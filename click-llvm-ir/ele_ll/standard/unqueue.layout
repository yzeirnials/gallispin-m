
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf30358 prev 0x55668cf27af8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cf30450 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55668cf304e0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55668cf30558 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55668cf30618 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55668cf306e0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55668cf30858 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55668cf30790 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55668cf30900 <col:24>
| `-OptimizeNoneAttr 0x55668cf30958 <col:34>
|-CXXMethodDecl 0x55668cf309a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55668cf30c58 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55668cf30a50 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55668cf30ac8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55668cf30b48 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55668cf30d10 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55668cf30d48 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55668cf30db0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55668cf30e38 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55668cf31158 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55668cf30ef0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55668cf30f68 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55668cf30fe0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55668cf31060 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55668cf31270 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55668cf38be8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55668cf38be8
| `-ParmVarDecl 0x55668cf38cf8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55668cf38d98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55668cf38d98
| `-ParmVarDecl 0x55668cf38ea8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55668d0bdf90 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf23370 prev 0x55668cf230f0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cf23468 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55668cf234f8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55668cf23558 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55668cf23648 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55668cf23748 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55668cf23918 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55668cf237c8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55668cf23840 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55668cf23aa8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55668cf239e0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55668cf23b50 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55668cf23c88 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55668cf23bc0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55668cf23e28 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55668cf23d68 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55668cf23fc8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55668cf23f08 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55668cf24070 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55668cf24170 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55668cf24250 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf24150 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55668cf24130 <col:26> 'int' 1
| `-EnumConstantDecl 0x55668cf24200 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55668cf24268 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cf241e0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55668cf241c0 <col:44> 'int' 2
|-CXXMethodDecl 0x55668cf243b0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55668cf24298 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55668cf24318 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55668cf24508 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55668cf24478 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55668cf24748 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55668cf245c8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55668cf24640 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55668cf247f8 <col:20>
| `-OptimizeNoneAttr 0x55668cf24850 <col:30>
|-CXXMethodDecl 0x55668cf24958 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55668cf24890 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55668cf24a00 <col:20>
| `-OptimizeNoneAttr 0x55668cf24a58 <col:30>
|-CXXMethodDecl 0x55668cf24aa8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55668cf24b70 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55668cf24c88 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55668cf24d10 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55668cf24d98 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55668cf24e20 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x55668cf24ea8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55668cf24f38 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55668cf24ff8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55668cf25080 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55668cf25108 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55668cf25190 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55668cf25218 <line:66:5, col:36> col:23 used PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55668cf252a0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55668cf25330 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55668cf253f0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55668cf25480 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55668cf255d0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55668cf25538 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55668cf25760 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55668cf25690 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55668cf25a10 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55668cf25818 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55668cf25898 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55668cf25918 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55668cf25ac8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55668cf25bd0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55668cf25e60 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf25bb0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cf25b90 <col:33> 'int' 0
| |-EnumConstantDecl 0x55668cf25c60 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55668cf25e78 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf25c40 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55668cf25c20 <col:32> 'int' 20
| |-EnumConstantDecl 0x55668cf25cf0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55668cf25e90 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf25cd0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55668cf25cb0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55668cf25d80 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55668cf25ea8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf25d60 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55668cf25d40 <col:35> 'int' 100
| `-EnumConstantDecl 0x55668cf25e10 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55668cf25ec0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cf25df0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55668cf25dd0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55668cf25f00 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55668cf26340 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55668cf261b0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55668cf26228 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf26410 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55668cf26590 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55668cf264c0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf26798 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55668cf26648 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55668cf266c0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf26898 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55668cf26938 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55668cf26a00 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55668cf26a90 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55668cf26cc0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf26a70 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55668cf26a50 <col:36> 'int' EnumConstant 0x55668cf26a00 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55668cf26ae0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55668cf26b30 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55668cf26b80 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55668cf26bd0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55668cf26c20 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55668cf26c70 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55668cf26da8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55668cf26ce8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55668cf26e70 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55668cf26f30 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55668cf26ff0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55668cf270b0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55668cf271c8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55668cf27290 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55668cf27410 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55668cf27340 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55668cf27538 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55668cf27738 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55668cf275e8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55668cf27668 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55668cf35088 <col:54, line:127:5>
|   |-ParenExpr 0x55668cf34f38 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55668cf34f08 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf34bf8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55668cf34bd0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55668cf34bb8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55668cf34ba0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55668cf34b70 <col:31> 'Router *' lvalue ->_router 0x55668cf32a50
|   |   |         `-CXXThisExpr 0x55668cf34b60 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55668cf34c58 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf34c38 <col:48> 'int' 0
|   |   `-CallExpr 0x55668cf34e68 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55668cf34e50 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf34e30 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf34ea8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf34cc8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55668cf34ec0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf34ce8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55668cf34ed8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf34d20 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55668cf34ef0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf34e18 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf34e00 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf34db8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55668cf34fd0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55668cf34f68 <col:9> 'Router *' lvalue ->_router 0x55668cf32a50
|   | | `-CXXThisExpr 0x55668cf34f58 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55668cf34fb8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55668cf34f98 <col:19> 'Router *' lvalue ParmVar 0x55668cf275e8 'r' 'Router *'
|   `-BinaryOperator 0x55668cf35068 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55668cf35000 <col:9> 'int' lvalue ->_eindex 0x55668cf32ab8
|     | `-CXXThisExpr 0x55668cf34ff0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55668cf35050 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf35030 <col:19> 'int' lvalue ParmVar 0x55668cf27668 'eindex' 'int'
|-CXXMethodDecl 0x55668cf278c0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55668cf277f8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55668cf27990 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55668cf27a58 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55668cf27af8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55668cf27d48 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55668cf27bc0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55668cf27c40 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55668cf27df8 <col:20>
| `-OptimizeNoneAttr 0x55668cf27e50 <col:30>
|-CXXMethodDecl 0x55668cf27f58 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55668cf27e90 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55668cf28000 <col:20>
| `-OptimizeNoneAttr 0x55668cf28058 <col:30>
|-CXXMethodDecl 0x55668cf28128 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55668cf28098 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55668cf281d0 <col:20>
| `-OptimizeNoneAttr 0x55668cf28228 <col:30>
|-CXXMethodDecl 0x55668cf283b8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55668cf28260 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55668cf282e0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55668cf28548 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55668cf28480 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55668cf28698 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55668cf28608 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55668cf287e8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55668cf28758 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55668cf28938 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55668cf288a8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55668cf28bf8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55668cf289f0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55668cf28a70 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55668cf28b18 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55668cf28cd0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55668cf28d90 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55668cf29060 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55668cf28f10 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55668cf28f88 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf29188 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55668cf29360 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55668cf29240 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55668cf292c0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55668cf29548 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55668cf29428 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55668cf294a8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55668cf298b8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55668cf29608 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55668cf29680 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55668cf29700 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55668cf34670 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55668cf34650 <col:106> 'int' 0
| `-ParmVarDecl 0x55668cf29778 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55668cf346a8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55668cf34688 <col:126> 'int' 0
|-CXXMethodDecl 0x55668cf29c58 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55668cf29988 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55668cf29a20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55668cf29aa0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55668cf29b18 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55668cf346e0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55668cf346c0 <col:114> 'int' 0
|-CXXMethodDecl 0x55668cf29fe8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55668cf29d30 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55668cf29da8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55668cf29e28 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55668cf346f8 <col:96> 'int' 0
| `-ParmVarDecl 0x55668cf29ea0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55668cf34738 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55668cf34718 <col:116> 'int' 0
|-CXXMethodDecl 0x55668cf2a368 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55668cf2a0b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55668cf2a130 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf2a1b0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55668cf34770 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55668cf34750 <col:109> 'int' 0
| `-ParmVarDecl 0x55668cf2a228 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55668cf347a8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55668cf34788 <col:129> 'int' 0
|-CXXMethodDecl 0x55668cf2a6e8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55668cf2a438 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55668cf2a4b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf2a530 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55668cf2a5a8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55668cf347e0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55668cf347c0 <col:117> 'int' 0
|-CXXMethodDecl 0x55668cf2aa78 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55668cf2a7c0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2a838 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf2a8b8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55668cf347f8 <col:99> 'int' 0
| `-ParmVarDecl 0x55668cf2a930 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55668cf34838 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55668cf34818 <col:119> 'int' 0
|-CXXMethodDecl 0x55668cf2ae98 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55668cf2ab48 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55668cf2abc8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55668cf2ac40 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf2acc0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55668cf34870 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55668cf34850 <col:108> 'int' 0
| `-ParmVarDecl 0x55668cf2ad40 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55668cf348a8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55668cf34888 <col:141> 'int' 0
|-CXXMethodDecl 0x55668cf2b2b8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55668cf2af70 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55668cf2aff0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55668cf2b068 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf2b0e8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55668cf2b168 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55668cf348c0 <col:121> 'int' 0
|-CXXMethodDecl 0x55668cf2b6e8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55668cf2b398 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55668cf2b418 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55668cf2b490 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf2b510 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55668cf348e0 <col:98> 'int' 0
| `-ParmVarDecl 0x55668cf2b590 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55668cf34900 <col:123> 'int' 0
|-CXXMethodDecl 0x55668cf2b9b0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55668cf2b7c0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55668cf2b840 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55668cf2b8c0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55668cf34920 <col:80> 'int' 0
|-EnumDecl 0x55668cf2ba68 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55668cf2bb70 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55668cf2be00 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf2bb50 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55668cf2bb30 <col:42> 'int' 1
| |-EnumConstantDecl 0x55668cf2bc00 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55668cf2be18 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf2bbe0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55668cf2bbc0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55668cf2bc90 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55668cf2be30 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf2bc70 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55668cf2bc50 <col:44> 'int' 4
| |-EnumConstantDecl 0x55668cf2bd20 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55668cf2be48 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf2bd00 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55668cf2bce0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55668cf2bdb0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55668cf2be60 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cf2bd90 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55668cf2bd70 <col:34> 'int' 6
|-CXXMethodDecl 0x55668cf2c118 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55668cf2be88 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55668cf2bf28 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55668cf2bfa8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55668cf2c020 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55668cf349d8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55668cf349c0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55668cf349a8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55668cf34988 <col:98, col:105> 'String' (CXXTemporary 0x55668cf34988)
|           `-CXXTemporaryObjectExpr 0x55668cf34950 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55668cf2c3b8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55668cf2c1e8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55668cf2c260 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55668cf2c2d8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55668cf34a88 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55668cf34a70 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55668cf34a58 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55668cf34a38 <col:94, col:101> 'String' (CXXTemporary 0x55668cf34a38)
| |         `-CXXTemporaryObjectExpr 0x55668cf34a00 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55668cf35270 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55668cf351e8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55668cf351b8 <col:9> '<bound member function type>' ->add_task_handlers 0x55668cf2c118
|     | `-CXXThisExpr 0x55668cf351a8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55668cf35228 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55668cf35128 <col:27> 'Task *' lvalue ParmVar 0x55668cf2c1e8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55668cf35240 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55668cf35148 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55668cf2c260 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55668cf35258 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55668cf35168 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55668cf2bdb0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55668cf35188 <col:62> 'const String' lvalue ParmVar 0x55668cf2c2d8 'prefix' 'const String &'
|-CXXMethodDecl 0x55668cf2c5c8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55668cf2c480 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55668cf2c4f8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55668cf34b38 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55668cf34b20 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55668cf34b08 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55668cf34ae8 <col:70, col:77> 'String' (CXXTemporary 0x55668cf34ae8)
| |         `-CXXTemporaryObjectExpr 0x55668cf34ab0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55668cf35448 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55668cf353c0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55668cf35390 <col:9> '<bound member function type>' ->add_task_handlers 0x55668cf2c118
|     | `-CXXThisExpr 0x55668cf35380 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55668cf35400 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55668cf35300 <col:27> 'Task *' lvalue ParmVar 0x55668cf2c480 'task' 'Task *'
|     |-ImplicitCastExpr 0x55668cf35418 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55668cf35320 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55668cf35430 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55668cf35340 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55668cf2bdb0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55668cf35360 <col:57> 'const String' lvalue ParmVar 0x55668cf2c4f8 'prefix' 'const String &'
|-CXXMethodDecl 0x55668cf2c8a8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55668cf2c690 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2c710 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2c788 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55668cf2cb58 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55668cf2c978 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2c9f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2ca78 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55668cf2ce48 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55668cf2cc28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2cca8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2cd20 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55668cf2d0f8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55668cf2cf18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2cf98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2d018 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55668cf2d3a8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55668cf2d1c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2d248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2d2c8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55668cf2d658 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55668cf2d478 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2d4f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2d570 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55668cf2d908 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55668cf2d728 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2d7a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2d828 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55668cf2dc18 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55668cf2da30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2dab0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2db30 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55668cf2def8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55668cf2dce8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2dd68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2de10 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55668cf2e1d8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55668cf2dfc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2e048 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2e0f0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55668cf2e440 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55668cf2e2a8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55668cf2e328 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55668cf2e3a0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55668cf2e6e8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55668cf2e510 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55668cf2e590 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55668cf2e608 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55668cf2e998 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55668cf2e7b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2e838 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2e8b8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55668cf2ec48 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55668cf2ea68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2eae8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2eb60 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55668cf2eef8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55668cf2ed18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2ed98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2ee10 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55668cf2f1c8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55668cf2efc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2f048 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55668cf2f0e8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55668cf2f4f8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55668cf2f298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55668cf2f318 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55668cf2f390 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55668cf2f408 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55668cf34b50 <col:93> 'bool' false
|-CXXMethodDecl 0x55668cf2f6e0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55668cf2f5c8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55668cf2f648 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55668cf2f8b8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55668cf2f7a0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55668cf2f820 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55668cf2fb98 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55668cf2f978 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55668cf2f9f0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55668cf2fa70 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55668cf2fae8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf2fe88 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55668cf2fc68 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55668cf2fce0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55668cf2fd60 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55668cf2fdd8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf300c0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55668cf2ff60 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55668cf2ffe0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55668cf302a8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55668cf30188 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55668cf30208 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55668cf30358 prev 0x55668cf27af8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cf30450 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55668cf304e0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55668cf30558 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55668cf30618 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55668cf306e0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55668cf30858 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55668cf30790 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55668cf30900 <col:24>
| | `-OptimizeNoneAttr 0x55668cf30958 <col:34>
| |-CXXMethodDecl 0x55668cf309a0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55668cf30c58 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55668cf30a50 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55668cf30ac8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55668cf30b48 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55668cf30d10 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55668cf30d48 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55668cf30db0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55668cf30e38 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55668cf31158 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55668cf30ef0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55668cf30f68 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55668cf30fe0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55668cf31060 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55668cf31270 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55668cf38be8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55668cf38be8
| | `-ParmVarDecl 0x55668cf38cf8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55668cf38d98 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55668cf38d98
| | `-ParmVarDecl 0x55668cf38ea8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55668d0bdf90 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55668cf312e8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55668cf31388 <col:38> "" ""
|-CXXMethodDecl 0x55668cf31418 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55668cf314b8 <col:44> "" ""
|-AccessSpecDecl 0x55668cf31528 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55668cf31550 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55668cf31650 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55668cf316a0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cf31630 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55668cf31610 <col:27> 'int' 4
|-FieldDecl 0x55668cf31758 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55668cf31908 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55668cf319c0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55668cf32a50 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55668cf32ab8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55668cf32c08 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55668cf32b48 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55668cf32db8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55668cf32cc8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55668cf32f98 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55668cf32e78 <col:20> col:23 'int'
| `-ParmVarDecl 0x55668cf32ef8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55668cf33240 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55668cf33060 <col:23> col:26 'int'
| |-ParmVarDecl 0x55668cf330e0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55668cf33158 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55668cf332f8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55668cf333c0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55668cf33410 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55668cf33460 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55668cf33640 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55668cf334f0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55668cf33568 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf338e8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55668cf33708 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55668cf33788 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55668cf33800 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55668cf33b08 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55668cf339b8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55668cf33a38 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55668cf33e40 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55668cf33bc8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55668cf33c48 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55668cf33cc0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55668cf33d40 <col:57> col:60 'int'
|-CXXMethodDecl 0x55668cf34028 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55668cf33f10 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55668cf33f90 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55668cf34178 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55668cf340e8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55668cf344f8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55668cf34238 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55668cf342b8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55668cf34330 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55668cf343b0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55668cf34610 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | union NotifierSignal::vmvalue
         0 |   class atomic_uint32_t * v1
         0 |   struct NotifierSignal::vmpair * vm
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class NotifierSignal
         0 |   union NotifierSignal::vmvalue _v
         0 |     class atomic_uint32_t * v1
         0 |     struct NotifierSignal::vmpair * vm
         8 |   uint32_t _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Unqueue
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   _Bool _active
       112 |   int32_t _burst
       116 |   int32_t _limit
       120 |   uint32_t _count
       128 |   class Task _task
       128 |     struct TaskLink (base)
       128 |       struct TaskLink * _prev
       136 |       struct TaskLink * _next
       144 |       unsigned int _pass
       148 |     unsigned int _stride
       152 |     int _tickets
       156 |     union Task::Status _status
       156 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       156 |         int16_t home_thread_id
       158 |         uint8_t is_scheduled
       159 |         uint8_t is_strong_unscheduled
       156 |       uint32_t status
       160 |     TaskCallback _hook
       168 |     void * _thunk
       176 |     class RouterThread * _thread
       184 |     class Element * _owner
       192 |     union Task::Pending _pending_nextptr
       192 |       class Task * t
       192 |       uintptr_t x
       200 |   class NotifierSignal _signal
       200 |     union NotifierSignal::vmvalue _v
       200 |       class atomic_uint32_t * v1
       200 |       struct NotifierSignal::vmpair * vm
       208 |     uint32_t _mask
           | [sizeof=216, dsize=216, align=8,
           |  nvsize=216, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf40c90 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cf40da8 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x55668cf40e78 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x55668cf40ed8 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x55668cf40f40 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x55668cf40fc8 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x55668cf41230 <col:16, line:46:5>
|   |-BinaryOperator 0x55668cf41178 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x55668cf41098 <col:9> 'TaskLink *' lvalue ->_prev 0x55668cf40e78
|   | | `-CXXThisExpr 0x55668cf41088 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x55668cf41160 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x55668cf41140 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x55668cf410d8 <col:17> 'TaskLink *' lvalue ->_next 0x55668cf40ed8
|   |     | `-CXXThisExpr 0x55668cf410c8 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x55668cf41128 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x55668cf41108 <col:25> 'int' 0
|   `-BinaryOperator 0x55668cf41210 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x55668cf411a8 <col:9> 'unsigned int' lvalue ->_pass 0x55668cf40f40
|     | `-CXXThisExpr 0x55668cf41198 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x55668cf411f8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55668cf411d8 <col:17> 'int' 0
|-CXXConstructorDecl 0x55668cfcd768 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x55668cfcd768
| `-ParmVarDecl 0x55668cfcd878 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x55668cfcd918 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x55668cfcd918
| `-ParmVarDecl 0x55668cfcda28 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x55668cfcdc18 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55668cfce418 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x55668cfce418
| `-ParmVarDecl 0x55668cfce528 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x55668cfce598 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x55668cfce598
  `-ParmVarDecl 0x55668cfce6a8 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cea4358 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55668cea4488 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x55668cea44e8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x55668cea4548 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x55668cfd4928 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x55668cfd4a00 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55668cfd4cb8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x55668cfd4cb8
| `-ParmVarDecl 0x55668cfd4dc8 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x55668cfd4e68 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x55668cfd4e68
  `-ParmVarDecl 0x55668cfd4f78 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cea41a8 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cea42c8 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x55668cea4358 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55668cea4488 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x55668cea44e8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x55668cea4548 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x55668cfd4928 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x55668cfd4a00 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55668cfd4cb8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x55668cfd4cb8
| | `-ParmVarDecl 0x55668cfd4dc8 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x55668cfd4e68 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x55668cfd4e68
|   `-ParmVarDecl 0x55668cfd4f78 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x55668cea4608 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x55668cea4668 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x55668cea4608 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x55668cea4488 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x55668cea46c0 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x55668cea4608 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x55668cea44e8 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x55668cea4718 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x55668cea4608 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x55668cea4548 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x55668cea4770 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55668cfd4838 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668cfd5198 <col:11>
|-CXXConstructorDecl 0x55668cfd4b08 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x55668cfd4b08
| `-ParmVarDecl 0x55668cfd4c18 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x55668cfd5018 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x55668cfd5018
| `-ParmVarDecl 0x55668cfd5128 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x55668d0bdea8 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cebbca0 prev 0x55668ceb2ae0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cebbd98 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x55668cebbe38 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55668cec2c00 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668cec2fe8 <col:11>
|-CXXConstructorDecl 0x55668cec2ce0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cec2dc8 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55668cec3730 <col:11>
|-CXXConstructorDecl 0x55668cec2e68 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cec2f78 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x55668cec4f88 <col:11>
|-CXXDestructorDecl 0x55668cec4298 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55668cbcae48 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cbcaf58 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55668cbcb820 <col:11>
|   `-ReturnStmt 0x55668cbcb810 <col:11>
|     `-UnaryOperator 0x55668cbcb7f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668cbcb7e8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55668cbcafc8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55668cbcb0d8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x55668cf5d6c0 <col:11>
    `-ReturnStmt 0x55668cf5d6b0 <col:11>
      `-UnaryOperator 0x55668cf5d698 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55668cf5d688 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668ceb1c98 prev 0x55668ceb19a8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668ceb1d90 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x55668ceb1e20 <col:19, col:25> col:19 public
|-TypedefDecl 0x55668ceb1e58 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55668cb17020 'int32_t' sugar
|   |-Typedef 0x55668ca27328 'int32_t'
|   `-TypedefType 0x55668ca00510 '__int32_t' sugar
|     |-Typedef 0x55668ca00128 '__int32_t'
|     `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668ceb1ec0 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55668cb171e0 'int64_t' sugar
|   |-Typedef 0x55668ca27390 'int64_t'
|   `-TypedefType 0x55668ca00630 '__int64_t' sugar
|     |-Typedef 0x55668ca00208 '__int64_t'
|     `-BuiltinType 0x55668c9be5a0 'long'
|-EnumDecl 0x55668ceb1f18 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x55668ceb2090 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x55668ceb2070 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x55668ceb2048 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x55668ceb2030 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x55668ceb2000 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x55668ceb2188 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x55668ceb2168 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x55668ceb2140 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x55668ceb2128 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x55668ceb2100 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x55668ceb20e0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x55668ceb21d8 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x55668ceb22e0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb2830 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb22c0 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x55668ceb22a0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x55668ceb2370 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb2848 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb2350 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55668ceb2330 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x55668ceb2400 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb2860 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb23e0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55668ceb23c0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55668ceb2490 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb2878 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb2470 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x55668ceb2450 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x55668ceb2520 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb2890 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb2500 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x55668ceb24e0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x55668ceb25b0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb28a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb2590 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x55668ceb2570 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55668ceb2640 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb28c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb2620 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x55668ceb2600 <col:26> 'int' EnumConstant 0x55668ceb22e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55668ceb2710 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55668ceb28d8 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceb26f0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55668ceb26d0 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55668ceb2690 <col:27> 'int' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55668ceb26b0 <col:44> 'int' EnumConstant 0x55668ceb25b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55668ceb27e0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55668ceb28f0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668ceb27c0 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55668ceb27a0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55668ceb2760 <col:27> 'int' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55668ceb2780 <col:44> 'int' EnumConstant 0x55668ceb2490 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55668ceb2908 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55668ceb2a10 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55668ceb2a60 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668ceb29f0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55668ceb29d0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55668ceb2a88 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55668cb16c50 'uninitialized_type'
|   `-CXXRecord 0x55668cb16bb8 'uninitialized_type'
|-CXXRecordDecl 0x55668ceb2ae0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55668ceb2bf0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec2ff8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668cec3118 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55668cec30d0 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55668cec3060 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668cec3050 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55668cec3090 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55668cec3100 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55668cec30b0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55668ceb2e38 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb2cb0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55668ceb2d28 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55668cebe930 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55668cebe910 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec3130 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668cec3280 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55668cec3208 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55668cec3198 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668cec3188 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55668cec3250 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55668cec3238 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55668cec31c8 <col:16> 'long' lvalue ParmVar 0x55668ceb2cb0 'sec' 'long'
|     `-ImplicitCastExpr 0x55668cec3268 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55668cec31e8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb2d28 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55668ceb3098 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb2f08 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55668ceb2f80 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55668cebe968 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55668cebe948 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec3298 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668cec33d0 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55668cec3370 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55668cec3300 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668cec32f0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55668cec33a0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55668cec3330 <col:16> 'int' lvalue ParmVar 0x55668ceb2f08 'sec' 'int'
|     `-ImplicitCastExpr 0x55668cec33b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55668cec3350 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb2f80 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55668ceb32f8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb3168 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x55668ceb31e0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55668cebe9a0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55668cebe980 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec33e8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668cec3538 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55668cec34c0 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55668cec3450 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668cec3440 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55668cec3508 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55668cec34f0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55668cec3480 <col:16> 'unsigned long' lvalue ParmVar 0x55668ceb3168 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55668cec3520 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55668cec34a0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb31e0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55668ceb4490 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb33c8 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x55668ceb3440 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55668cebe9d8 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55668cebe9b8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec3550 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668cec36a0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55668cec3628 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55668cec35b8 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668cec35a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55668cec3670 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55668cec3658 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55668cec35e8 <col:16> 'unsigned int' lvalue ParmVar 0x55668ceb33c8 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55668cec3688 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55668cec3608 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb3440 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55668ceb45f0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x55668ceb4560 <col:31> col:37 'double'
|-CXXConstructorDecl 0x55668ceb4788 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x55668ceb46c8 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x55668ceb49b8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x55668ceb48c0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x55668ceb4b68 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x55668ceb4aa8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec3740 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55668cec36b8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x55668ceb4aa8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55668cec37a0 <col:19, line:214:5>
|-CXXConstructorDecl 0x55668ceb4d38 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x55668ceb4c78 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec37b0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668cec3860 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55668cec3838 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55668cec3808 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x55668ceb4c78 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x55668ceb4f28 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x55668ceb4ea0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55668ceb1a40 'Timestamp'
|   | `-CXXRecord 0x55668ceb1c98 'Timestamp'
|   `-ParenType 0x55668ceb4e40 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x55668ceb4e10 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x55668ceb1fe0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x55668ceb1e58 'seconds_type'
|         `-TypedefType 0x55668cb17020 'int32_t' sugar
|           |-Typedef 0x55668ca27328 'int32_t'
|           `-TypedefType 0x55668ca00510 '__int32_t' sugar
|             |-Typedef 0x55668ca00128 '__int32_t'
|             `-BuiltinType 0x55668c9be580 'int'
|-CXXConversionDecl 0x55668ceb5068 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55668ceb5138 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55668cec3968 <col:37, line:231:5>
|   `-ReturnStmt 0x55668cec3958 <line:227:9, col:23>
|     `-BinaryOperator 0x55668cec3938 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55668cec3908 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55668cec38b8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55668cebbe38
|       |   `-MemberExpr 0x55668cec3888 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
|       |     `-CXXThisExpr 0x55668cec3878 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55668cec3920 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55668cec38e8 <col:23> 'int' 0
|-CXXMethodDecl 0x55668ceb51f8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x55668ceb52b8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceb5378 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceb5438 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceb54f8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceb5668 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x55668ceb55a8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x55668ceb57b0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x55668ceb5720 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb5878 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55668ceb5918 <col:54> "" ""
|-CXXMethodDecl 0x55668ceb59a8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55668ceb5a48 <col:54> "" ""
|-CXXMethodDecl 0x55668ceb5ad8 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x55668ceb5b78 <col:54> "" ""
|-CXXMethodDecl 0x55668ceb5c78 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x55668ceb5d48 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x55668ceb5e78 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x55668ceb5f70 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x55668ceb60a8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55668cec3b80 <col:39, line:271:5>
|   `-ReturnStmt 0x55668cec3b70 <line:267:9, col:61>
|     `-CallExpr 0x55668cec3b10 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55668cec3af8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668cec3980 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55668cebd118 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55668cec3b40 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55668cec39e0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55668cebbe38
|       |   `-MemberExpr 0x55668cec39b0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
|       |     `-CXXThisExpr 0x55668cec39a0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55668cec3b58 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55668cec3a80 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55668cec3a50 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55668cec3a10 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55668cec3a68 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55668cec3a30 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb25b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668ceb6168 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55668cec3d40 <col:39, line:279:5>
|   `-ReturnStmt 0x55668cec3d30 <line:275:9, col:61>
|     `-CallExpr 0x55668cec3cd0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55668cec3cb8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668cec3b98 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55668cebd118 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55668cec3d00 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55668cec3bf8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x55668cebbe38
|       |   `-MemberExpr 0x55668cec3bc8 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
|       |     `-CXXThisExpr 0x55668cec3bb8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55668cec3d18 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55668cec3c98 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55668cec3c68 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55668cec3c28 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55668cec3c80 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55668cec3c48 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2490 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668ceb6228 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55668cec3ed8 <col:39, line:287:5>
|   `-ReturnStmt 0x55668cec3ec8 <line:283:9, col:53>
|     `-BinaryOperator 0x55668cec3ea8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55668cec3e78 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55668cec3d98 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x55668cebbe38
|       |   `-MemberExpr 0x55668cec3d68 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
|       |     `-CXXThisExpr 0x55668cec3d58 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55668cec3e90 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55668cec3e58 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55668cec3e38 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55668cec3e08 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668cec3dc8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb22e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668cec3e20 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668cec3de8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668ceb6318 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55668cec5170 <col:40, line:293:5>
|   |-DeclStmt 0x55668cec4020 <line:291:9, col:48>
|   | `-VarDecl 0x55668cec3f00 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55668cec4000 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55668cec3fa8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55668cec3f78 <col:22> '<bound member function type>' ->subsec 0x55668ceb52b8
|   |     |   `-CXXThisExpr 0x55668cec3f68 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55668cec3fe8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55668cec3fc8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2710 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55668cec5160 <line:292:9, col:70>
|     `-ExprWithCleanups 0x55668cec5148 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55668cec5118 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cec5100 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55668cec50e0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55668cec50b0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55668cec4e48 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55668cec4e30 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55668cec4038 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55668cec3f00 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55668cec5050 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55668cec5038 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55668cec5008 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55668cec4e60 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55668cec4dd0 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55668cec4db8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55668cec4d68 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55668ceb1be8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55668cec4d08 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55668cec4068 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55668cec4058 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55668cec4d50 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55668cec4d38 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55668cec4528 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55668cec4090 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55668cec4120 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55668cec40f0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55668cec40b0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2710 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55668cec4108 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55668cec40d0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55668cec3f00 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55668cec5080 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55668cec4e18 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55668cec4e08 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55668ceb63d8 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55668cec56c8 <col:40, line:302:5>
|   |-DeclStmt 0x55668cec52c0 <line:297:9, col:48>
|   | `-VarDecl 0x55668cec51a0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55668cec52a0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55668cec5248 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55668cec5218 <col:22> '<bound member function type>' ->subsec 0x55668ceb52b8
|   |     |   `-CXXThisExpr 0x55668cec5208 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55668cec5288 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55668cec5268 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb27e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55668cec56b8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x55668cec56a0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x55668cec5670 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cec5658 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x55668cec5638 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x55668cec5608 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x55668cec5530 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x55668cec5518 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55668cec52d8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55668cec51a0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x55668cec55a8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x55668cec5590 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x55668cec5560 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x55668cec5548 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x55668cec54b8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x55668cec54a0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x55668cec5480 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55668ceb1be8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x55668cec5420 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55668cec5308 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55668cec52f8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x55668cec5468 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x55668cec5450 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55668cec53e0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55668cec5330 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55668cec53c0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55668cec5390 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55668cec5350 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb27e0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55668cec53a8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55668cec5370 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55668cec51a0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x55668cec55d8 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x55668cec5500 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x55668cec54f0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x55668ceb6498 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x55668cec5750 <col:40, line:306:5>
|   `-ReturnStmt 0x55668cec5740 <line:305:9, col:17>
|     `-CXXConstructExpr 0x55668cec5710 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x55668cec56f8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668cec56e8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x55668ceb6638 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x55668ceb6548 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb6808 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x55668ceb6710 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x55668ceb68f8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x55668ceb6a68 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x55668ceb69a8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55668cec5898 <col:56, line:320:5>
|   `-ReturnStmt 0x55668cec5888 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55668cec5870 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x55668cec5840 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cec5828 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55668cec57e8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55668cec57b8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55668cec5778 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb69a8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x55668cec57d0 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55668cec5798 <col:31> 'int' 0
|-CXXMethodDecl 0x55668ceb6ca8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55668ceb6b20 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb6b98 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cec5a68 <col:72, line:326:5>
|   `-ReturnStmt 0x55668cec5a58 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55668cec5a40 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55668cec5a10 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cec59f8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55668cec59b8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55668cec59a0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55668cec58c0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb6b20 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55668cec5960 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55668cec5948 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55668cec58e0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55668cebb590 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55668cec5988 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55668cec5900 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb6b98 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb6e58 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55668ceb6d68 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55668cec6130 <col:56, line:337:5>
|   |-DeclStmt 0x55668cec5d68 <line:329:9, col:51>
|   | `-VarDecl 0x55668cec5a90 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55668cec5d50 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55668cec5d20 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55668cec5d08 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55668cec5cf0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55668cec5cc0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55668cec5ca8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55668cec5c90 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55668cec5b80 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55668cec5f20 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55668cec5dd0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55668cebbe38
|   | | `-MemberExpr 0x55668cec5da0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55668cebcde8
|   | |   `-DeclRefExpr 0x55668cec5d80 <col:9> 'Timestamp' lvalue Var 0x55668cec5a90 't' 'Timestamp'
|   | `-BinaryOperator 0x55668cec5f00 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55668cec5ed0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55668cec5e00 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55668ceb6d68 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55668cec5ee8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55668cec5eb0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55668cec5e90 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55668cec5e60 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55668cec5e20 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55668cec5e78 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55668cec5e40 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb25b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55668cec6118 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55668cec60e8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55668cec60d0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55668cec60b0 <col:16> 'Timestamp' lvalue Var 0x55668cec5a90 't' 'Timestamp'
|-CXXMethodDecl 0x55668ceb7020 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55668ceb6f10 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb6f88 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cec62e8 <col:72, line:343:5>
|   `-ReturnStmt 0x55668cec62d8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55668cec62c0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55668cec6290 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cec6278 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55668cec6238 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55668cec6220 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55668cec6168 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb6f10 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55668cec61e0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55668cec61c8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55668cec6188 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55668cebb6d8 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55668cec6208 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55668cec61a8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb6f88 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb7170 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55668ceb70e0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55668cec6730 <col:56, line:354:5>
|   |-DeclStmt 0x55668cec64d8 <line:346:9, col:51>
|   | `-VarDecl 0x55668cec6310 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55668cec64c0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55668cec6490 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55668cec6478 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55668cec6460 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55668cec6430 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55668cec6418 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55668cec6400 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55668cec63d0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55668cec6690 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55668cec6540 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55668cebbe38
|   | | `-MemberExpr 0x55668cec6510 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55668cebcde8
|   | |   `-DeclRefExpr 0x55668cec64f0 <col:9> 'Timestamp' lvalue Var 0x55668cec6310 't' 'Timestamp'
|   | `-BinaryOperator 0x55668cec6670 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55668cec6640 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55668cec6570 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x55668ceb70e0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55668cec6658 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55668cec6620 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55668cec6600 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55668cec65d0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55668cec6590 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55668cec65e8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55668cec65b0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2490 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55668cec6718 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55668cec66e8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55668cec66d0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55668cec66b0 <col:16> 'Timestamp' lvalue Var 0x55668cec6310 't' 'Timestamp'
|-CXXMethodDecl 0x55668ceb7338 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x55668ceb7228 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb72a0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cec68e8 <col:72, line:360:5>
|   `-ReturnStmt 0x55668cec68d8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55668cec68c0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55668cec6890 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cec6878 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55668cec6838 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55668cec6820 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55668cec6768 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb7228 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55668cec67e0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55668cec67c8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55668cec6788 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55668cebb820 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55668cec6808 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55668cec67a8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb72a0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb7488 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x55668ceb73f8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55668ced3258 <col:56, line:371:5>
|   |-DeclStmt 0x55668cec6ad8 <line:363:9, col:51>
|   | `-VarDecl 0x55668cec6910 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55668cec6ac0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55668cec6a90 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55668cec6a78 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55668cec6a60 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55668cec6a30 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55668cec6a18 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55668cec6a00 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55668cec69d0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55668ced31b8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55668cec6b40 <col:9, col:14> 'int64_t':'long' lvalue .x 0x55668cebbe38
|   | | `-MemberExpr 0x55668cec6b10 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55668cebcde8
|   | |   `-DeclRefExpr 0x55668cec6af0 <col:9> 'Timestamp' lvalue Var 0x55668cec6910 't' 'Timestamp'
|   | `-CallExpr 0x55668ced3158 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55668ced3140 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55668cec6b70 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55668cebd118 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55668ced3188 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55668cec6b90 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x55668ceb73f8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55668ced31a0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55668ced3120 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55668ced30f0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55668cec6bb0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb22e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55668ced3108 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55668cec6bd0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55668ced3240 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55668ced3210 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55668ced31f8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55668ced31d8 <col:16> 'Timestamp' lvalue Var 0x55668cec6910 't' 'Timestamp'
|-CXXMethodDecl 0x55668ceb7578 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55668ced3398 <col:39, line:377:5>
|   `-ReturnStmt 0x55668ced3388 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55668ced3370 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55668ced3340 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668ced3328 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55668ced32e8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55668ced3290 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55668ced32d0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55668ced32b0 <col:29> 'int' 1
|-CXXMethodDecl 0x55668ceb7638 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55668ced3478 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55668ced3430 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55668ced33c0 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668ced33b0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55668ced33f0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55668ced3460 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55668ced3410 <col:19> 'int' 0
|-CXXMethodDecl 0x55668ceb7838 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb76e8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb7760 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55668cebea10 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55668cebe9f0 <col:60> 'int' 0
| `-CompoundStmt 0x55668ced3670 <col:63, line:395:5>
|   `-BinaryOperator 0x55668ced3650 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55668ced34d0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x55668cebbe38
|     | `-MemberExpr 0x55668ced34a0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
|     |   `-CXXThisExpr 0x55668ced3490 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55668ced3630 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55668ced35c0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55668ced3560 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55668ced3548 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55668ced3530 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55668ced3500 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb76e8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55668ced35a8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55668ced3588 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55668ced3618 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55668ced3600 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55668ced35e0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb7760 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb7a08 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb78f8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb7970 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced37c8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55668ced3780 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55668ced3698 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668ced3688 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55668ced37b0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55668ced36c8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb78f8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55668ced3740 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55668ced3728 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668ced36e8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55668cebb6d8 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55668ced3768 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55668ced3708 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb7970 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb7bd8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb7ac8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb7b40 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced3920 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55668ced38d8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55668ced37f0 <col:9> '<bound member function type>' ->assign 0x55668ceb7838
|     | `-CXXThisExpr 0x55668ced37e0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55668ced3908 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55668ced3820 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x55668ceb7ac8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55668ced3898 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55668ced3880 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668ced3840 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x55668cebb820 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55668ced38c0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55668ced3860 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668ceb7b40 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceb7da8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb7c98 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb7d10 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55668cebea48 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55668cebea28 <col:57> 'int' 0
| `-DeprecatedAttr 0x55668ceb7e58 <col:75> "" ""
|-CXXMethodDecl 0x55668ceb7fe8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb7ed8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb7f50 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668ceb8098 <col:74> "" ""
|-CXXMethodDecl 0x55668ceb8228 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x55668ceb8118 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x55668ceb8190 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668ceb82d8 <col:74> "" ""
|-CXXMethodDecl 0x55668ceb8368 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x55668ceb8408 <col:42> "" ""
|-CXXMethodDecl 0x55668cebac40 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x55668cebab20 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55668cebaba0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x55668cebad10 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x55668cebadd0 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x55668cebae70 <col:20>
| `-OptimizeNoneAttr 0x55668cebaec8 <col:30>
|-CXXMethodDecl 0x55668cebaf10 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x55668cebafd0 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x55668cebb090 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55668cebb150 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x55668cebb210 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x55668cebb2d0 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x55668cebb390 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55668cebb450 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x55668cebb590 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55668cebb500 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced3a68 <col:58, line:512:5>
|   `-ReturnStmt 0x55668ced3a58 <line:511:9, col:53>
|     `-BinaryOperator 0x55668ced3a38 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55668ced3a08 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced3938 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebb500 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55668ced3a20 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55668ced39e8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55668ced39c8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55668ced3998 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668ced3958 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668ced39b0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668ced3978 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb25b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668cebb6d8 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55668cebb648 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced3bb0 <col:58, line:516:5>
|   `-ReturnStmt 0x55668ced3ba0 <line:515:9, col:53>
|     `-BinaryOperator 0x55668ced3b80 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55668ced3b50 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced3a80 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebb648 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55668ced3b68 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55668ced3b30 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55668ced3b10 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55668ced3ae0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668ced3aa0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668ced3af8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668ced3ac0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2490 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668cebb820 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55668cebb790 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced3cf8 <col:58, line:520:5>
|   `-ReturnStmt 0x55668ced3ce8 <line:519:9, col:53>
|     `-BinaryOperator 0x55668ced3cc8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55668ced3c98 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced3bc8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebb790 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55668ced3cb0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55668ced3c78 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55668ced3c58 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55668ced3c28 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668ced3be8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb22e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668ced3c40 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668ced3c08 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668cebb968 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55668cebb8d8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced3e40 <col:60, line:524:5>
|   `-ReturnStmt 0x55668ced3e30 <line:523:9, col:55>
|     `-BinaryOperator 0x55668ced3e10 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55668ced3de0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced3d10 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebb8d8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55668ced3df8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55668ced3dc0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55668ced3da0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55668ced3d70 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668ced3d30 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668ced3d88 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668ced3d50 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb25b0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668cebbab0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55668cebba20 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced3f88 <col:60, line:528:5>
|   `-ReturnStmt 0x55668ced3f78 <line:527:9, col:55>
|     `-BinaryOperator 0x55668ced3f58 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55668ced3f28 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced3e58 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebba20 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55668ced3f40 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55668ced3f08 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55668ced3ee8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55668ced3eb8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668ced3e78 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668ced3ed0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668ced3e98 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2490 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x55668cebbbf8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x55668cebbb68 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced40d0 <col:60, line:532:5>
|   `-ReturnStmt 0x55668ced40c0 <line:531:9, col:55>
|     `-BinaryOperator 0x55668ced40a0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55668ced4070 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced3fa0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebbb68 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55668ced4088 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55668ced4050 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55668ced4030 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55668ced4000 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55668ced3fc0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb22e0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55668ced4018 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55668ced3fe0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55668ceb2640 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x55668cebbca0 prev 0x55668ceb2ae0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cebbd98 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x55668cebbe38 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55668cec2c00 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55668cec2fe8 <col:11>
| |-CXXConstructorDecl 0x55668cec2ce0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55668cec2dc8 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55668cec3730 <col:11>
| |-CXXConstructorDecl 0x55668cec2e68 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55668cec2f78 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x55668cec4f88 <col:11>
| |-CXXDestructorDecl 0x55668cec4298 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55668cbcae48 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55668cbcaf58 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55668cbcb820 <col:11>
| |   `-ReturnStmt 0x55668cbcb810 <col:11>
| |     `-UnaryOperator 0x55668cbcb7f8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55668cbcb7e8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55668cbcafc8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x55668cbcb0d8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x55668cf5d6c0 <col:11>
|     `-ReturnStmt 0x55668cf5d6b0 <col:11>
|       `-UnaryOperator 0x55668cf5d698 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668cf5d688 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x55668cebbea0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x55668cebbfa0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55668cebc1a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cebbf80 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cebbf60 <col:21> 'int' 0
| |-EnumConstantDecl 0x55668cebc030 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55668cebc1b8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cebc010 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x55668cebbff0 <col:23> 'int' 1
| |-EnumConstantDecl 0x55668cebc0c0 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x55668cebc1d0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cebc0a0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x55668cebc080 <col:23> 'int' 2
| `-EnumConstantDecl 0x55668cebc150 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x55668cebc1e8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cebc130 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x55668cebc110 <col:27> 'int' 3
|-CXXMethodDecl 0x55668cebc228 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x55668cebc2f0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x55668cebc4f8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x55668cebc3a0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x55668cebc420 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55668cebea60 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x55668cebc708 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x55668cebc5b8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x55668cebc630 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x55668cebc7d8 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x55668cebc898 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x55668cebca08 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x55668cebc948 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x55668cebcad0 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55668cebcb90 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x55668cebcc50 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x55668cebcd10 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55668cebcdb0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55668cebcde8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55668cebce58 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55668ced40e8 <col:27, line:684:5>
|-CXXMethodDecl 0x55668cebcf18 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55668ced40f8 <col:27, line:696:5>
|-CXXMethodDecl 0x55668cebd118 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55668cebcfc8 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55668cebd040 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced4280 <col:66, line:700:5>
|   `-ReturnStmt 0x55668ced4270 <line:699:9, col:31>
|     `-CallExpr 0x55668ced4210 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55668ced41f8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668ced41a8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x55668cd3f4c8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55668ced4240 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55668ced4168 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55668cebcfc8 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55668ced4258 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55668ced4188 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebd040 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cebd488 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55668cebd1d8 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55668cebd250 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55668cebd2c8 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55668cebd340 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668ced45d0 <col:64, line:707:5>
|   |-DeclStmt 0x55668ced4310 <line:704:9, col:24>
|   | `-VarDecl 0x55668ced42a8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55668ced4520 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55668ced4328 <col:9> 'int32_t':'int' lvalue ParmVar 0x55668cebd250 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55668ced4508 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55668ced44a0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55668ced4488 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668ced4408 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x55668cd44798 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55668ced44d8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55668ced43a8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55668cebd2c8 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55668ced44f0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55668ced43c8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cebd340 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55668ced43e8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55668ced42a8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55668ced45b0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55668ced4540 <col:9> 'int32_t':'int' lvalue ParmVar 0x55668cebd1d8 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55668ced4598 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55668ced4580 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55668ced4560 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55668ced42a8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55668cebd728 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55668cebd558 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55668cebd5d0 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55668cebd648 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55668cebd9c8 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55668cebd7f0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55668cebd868 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55668cebd8e0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55668cebdb58 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55668cebda90 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55668cebdd58 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55668cebdc10 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55668cebdc88 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55668cebe028 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55668cebdf68 parent 0x55668c9be488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55668cebde18 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55668cebde90 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55668cebe248 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55668cebe188 parent 0x55668c9be488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55668cebe078 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55668cebe0f0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55668cebe410 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55668cebe358 parent 0x55668c9be488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55668cebe298 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55668cebe698 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55668cebe5d8 parent 0x55668c9be488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55668cebe488 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55668cebe500 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55668cebe8b8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55668cebe7f8 parent 0x55668c9be488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55668cebe6e8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55668cebe760 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55668cec4140 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cec4228 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec4c98 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x55668cec4c50 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55668cebcde8
| |     `-DeclRefExpr 0x55668cec4c30 <col:7> 'const Timestamp' lvalue ParmVar 0x55668cec4228 '' 'const Timestamp &'
| `-CompoundStmt 0x55668cec4cf8 <col:7>
|-CXXConstructorDecl 0x55668cec43a8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cec44b8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55668cebcde8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55668cec4f98 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x55668cec4f40 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55668cebcde8
| |     `-CXXStaticCastExpr 0x55668cec4f10 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x55668cec4ee0 <col:7> 'Timestamp' lvalue ParmVar 0x55668cec44b8 '' 'Timestamp &&'
| `-CompoundStmt 0x55668cec4ff8 <col:7>
|-CXXDestructorDecl 0x55668cec4568 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55668cbcac98 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cbcada8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55668cbcb898 <col:7>
|   |-CXXMemberCallExpr 0x55668cbcb838 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55668cbcb778 <col:7> '<bound member function type>' .operator= 0x55668cbcae48
|   | | `-MemberExpr 0x55668cbcb688 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
|   | |   `-CXXThisExpr 0x55668cbcb678 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55668cbcb748 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55668cebcde8
|   |   `-DeclRefExpr 0x55668cbcb728 <col:7> 'const Timestamp' lvalue ParmVar 0x55668cbcada8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55668cbcb888 <col:7>
|     `-UnaryOperator 0x55668cbcb870 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668cbcb860 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55668cbcb148 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55668cbcb258 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x55668cf5d738 <col:7>
    |-CXXMemberCallExpr 0x55668cf5d6d8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x55668cf5d640 <col:7> '<bound member function type>' .operator= 0x55668cbcafc8
    | | `-MemberExpr 0x55668cf5d510 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55668cebcde8
    | |   `-CXXThisExpr 0x55668cf5d500 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x55668cf5d610 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55668cebcde8
    |   `-CXXStaticCastExpr 0x55668cf5d5e0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x55668cf5d5b0 <col:7> 'Timestamp' lvalue ParmVar 0x55668cbcb258 '' 'Timestamp &&'
    `-ReturnStmt 0x55668cf5d728 <col:7>
      `-UnaryOperator 0x55668cf5d710 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x55668cf5d700 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cf62430 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x55668cf62608 prev 0x55668cf62430 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55668cf62698 <col:46, col:52> col:46 public
|-TypedefDecl 0x55668cf626c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cf680c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x55668cf68070 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x55668cf62b70 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x55668cf62a70 'type'
|     `-TemplateSpecializationType 0x55668cf62a00 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55668cf628e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x55668cf628c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55668cf628a0 <col:24> 'unsigned long' 16
|       `-RecordType 0x55668cf629e0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x55668cf62900 'char_array'
|-TypedefDecl 0x55668cf68178 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x55668cf68140 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x55668cf68120 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x55668cf680c0 'type'
|     `-ElaboratedType 0x55668cf68070 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x55668cf62b70 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x55668cf62a70 'type'
|         `-TemplateSpecializationType 0x55668cf62a00 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55668cf628e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x55668cf628c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55668cf628a0 <col:24> 'unsigned long' 16
|           `-RecordType 0x55668cf629e0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x55668cf62900 'char_array'
|-CXXMethodDecl 0x55668cf682f8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x55668cf68208 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x55668cf683e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55668cf684c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55668cf684c8
|-CXXMethodDecl 0x55668cf68798 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x55668cf686a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x55668cf689d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55668cf68850 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cf688c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf68ba8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55668cf68a98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cf68b10 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf68d08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x55668cf68dd8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x55668cf69028 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55668cf68e98 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x55668cf68f10 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf69288 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x55668cf690f8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x55668cf69170 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf69448 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x55668cf69358 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf69608 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x55668cf69510 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf696c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cf69770 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cf699a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x55668cf69820 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cf69898 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x55668cf69c48 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x55668cf69b50 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x55668cf69d10 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x55668cf69d60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55668cf69db0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cf60d48 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x55668cf60f58 prev 0x55668cf60d48 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55668cf623a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x55668cf62350 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x55668cf62330 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x55668cf621e0 'type'
|     `-SubstTemplateTypeParmType 0x55668cf62000 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x55668cc87650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc875f8 'T'
|       `-RecordType 0x55668cf61b50 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x55668cf61a68 'sized_array_memory'
|-FieldDecl 0x55668cf69e00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x55668cf69e50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55668cf69e88 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|   `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|     `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf69f48 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x55668cf69f10 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|       `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf69fd8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x55668cf69fa0 'const TimerSet::heap_element &'
|   `-QualType 0x55668cf60ff1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|         `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf6a068 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x55668cf6a030 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|       `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf6a128 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x55668cf6a0f0 'const TimerSet::heap_element *'
|   `-QualType 0x55668cf60ff1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|         `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf6af90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x55668cf6af40 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x55668cf6af20 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x55668cf6ae58 'type'
|     `-LValueReferenceType 0x55668cf6ae20 'const TimerSet::heap_element &'
|       `-QualType 0x55668cf6abc1 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x55668cf6abc0 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x55668cc91d20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55668cc91cc8 'T'
|           `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|             `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf6aff8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x55668cf69fa0 'const TimerSet::heap_element &'
|   `-QualType 0x55668cf60ff1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|         `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf6b050 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cf6b0b8 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x55668cf6a030 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|       `-CXXRecord 0x55668cf5fec0 'heap_element'
|-TypedefDecl 0x55668cf6b120 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x55668cf6a0f0 'const TimerSet::heap_element *'
|   `-QualType 0x55668cf60ff1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55668cf60ff0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cf5ff50 'TimerSet::heap_element'
|         `-CXXRecord 0x55668cf5fec0 'heap_element'
|-EnumDecl 0x55668cf6b178 <line:134:5> col:5
| `-EnumConstantDecl 0x55668cf6b270 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55668cf6b250 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55668ccc09c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55668ccc09a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55668ccc0980 <col:40> 'int' 1
|-CXXConstructorDecl 0x55668cf6b2f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55668cf6b588 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf6b3b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cf6b450 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x55668cf6b848 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x55668cf6b730 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x55668cf6bb08 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x55668cf6b9f0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x55668cf6be50 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x55668cf6bd30 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x55668cf6c160 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x55668cf6c040 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x55668cf6c450 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf6c298 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cf6c310 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55668cf6c5a8 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x55668cf6c688 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf6c6e0 <col:30> Inherited
|-CXXMethodDecl 0x55668cf6c728 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x55668cf6c7d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf6c830 <col:30> Inherited
|-CXXMethodDecl 0x55668cf6c8f8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55668cf6c9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf6ca00 <col:30> Inherited
|-CXXMethodDecl 0x55668cf6ca48 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55668cf6caf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf6cb50 <col:30> Inherited
|-CXXMethodDecl 0x55668cf6cb98 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55668cf6cc48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf6cca0 <col:30> Inherited
|-CXXMethodDecl 0x55668cf6cce8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x55668cf6cd98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf6cdf0 <col:30> Inherited
|-CXXMethodDecl 0x55668cf6ce18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cf6cec8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cf6cf78 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55668cf6d138 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf6d028 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cf6d0a0 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55668cf6d288 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55668cf6d1f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf6d438 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x55668cf6d340 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cf6d4f0 <col:20>
| `-OptimizeNoneAttr 0x55668cf6d548 <col:30>
|-CXXMethodDecl 0x55668cf6d668 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x55668cf6d570 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cf6d720 <col:20>
| `-OptimizeNoneAttr 0x55668cf6d778 <col:30>
|-CXXMethodDecl 0x55668cf6d830 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cf6d7a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf6d978 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cf6d8e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf6daa8 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x55668cf6dbd8 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x55668cf6dca8 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x55668cf6dd78 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x55668cf6deb8 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cf6de28 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf6e000 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cf6df70 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf6e148 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x55668cf6e0b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cf6e200 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55668cf6e300 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55668cf6e270 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cf6e3b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55668cf6e478 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x55668cf6e578 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x55668cf6e728 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cf6e638 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x55668cf6ef18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55668cf6e7e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x55668cf6ee78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x55668cf6ed78 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x55668cf6eff8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cf6f148 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cf6f0b8 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55668cf6f200 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55668cf6f448 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf6f2c0 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x55668cf6f338 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x55668cf6f6a0 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x55668cf6f518 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x55668cf6f8f8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x55668cf6f768 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x55668cf6f7e0 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x55668cf6f9b8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cf6fc18 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x55668cf6fb20 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x55668cf6fce8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55668cf6fce8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cf71210 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x55668cf713e8 prev 0x55668cf71210 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55668cf71478 <col:46, col:52> col:46 public
|-TypedefDecl 0x55668cf714a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cf73070 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x55668cf73020 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x55668cf71950 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x55668cf71850 'type'
|     `-TemplateSpecializationType 0x55668cf717e0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55668cf716c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x55668cf716a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55668cf71680 <col:24> 'unsigned long' 8
|       `-RecordType 0x55668cf717c0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x55668cf716e0 'char_array'
|-TypedefDecl 0x55668cf73128 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x55668cf730f0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x55668cf730d0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x55668cf73070 'type'
|     `-ElaboratedType 0x55668cf73020 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x55668cf71950 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x55668cf71850 'type'
|         `-TemplateSpecializationType 0x55668cf717e0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55668cf716c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x55668cf716a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55668cf71680 <col:24> 'unsigned long' 8
|           `-RecordType 0x55668cf717c0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x55668cf716e0 'char_array'
|-CXXMethodDecl 0x55668cf732a8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x55668cf731b8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x55668cf73398 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55668cf73478 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55668cf73478
|-CXXMethodDecl 0x55668cf73748 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55668cf73650 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x55668cf73988 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55668cf73800 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cf73878 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf73b58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55668cf73a48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cf73ac0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf73cb8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55668cf73d88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55668cf73fd8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55668cf73e48 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55668cf73ec0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf74238 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x55668cf740a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55668cf74120 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf743f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55668cf74308 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf745b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55668cf744c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf74670 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cf74720 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cf74958 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55668cf747d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cf74848 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55668cf74bf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55668cf74b00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x55668cf74cc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x55668cf74d10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55668cf74d60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cf6fe30 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x55668cf70038 prev 0x55668cf6fe30 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55668cf71180 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x55668cf71130 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x55668cf71110 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x55668cf70fc0 'type'
|     `-SubstTemplateTypeParmType 0x55668cf70de0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x55668cc87650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc875f8 'T'
|       `-RecordType 0x55668cf70930 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55668cf70848 'sized_array_memory'
|-FieldDecl 0x55668cf74db0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x55668cf74e00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55668cf74e38 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|   |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|   `-PointerType 0x55668cf23ed0 'Timer *'
|     `-RecordType 0x55668cf23020 'Timer'
|       `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf74ef8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x55668cf74ec0 'Timer *&'
|   `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-PointerType 0x55668cf23ed0 'Timer *'
|       `-RecordType 0x55668cf23020 'Timer'
|         `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf74fb8 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x55668cf74f80 'Timer *const &'
|   `-QualType 0x55668cf700d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-PointerType 0x55668cf23ed0 'Timer *'
|         `-RecordType 0x55668cf23020 'Timer'
|           `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf75078 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x55668cf75040 'Timer **'
|   `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-PointerType 0x55668cf23ed0 'Timer *'
|       `-RecordType 0x55668cf23020 'Timer'
|         `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf75138 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x55668cf75100 'Timer *const *'
|   `-QualType 0x55668cf700d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-PointerType 0x55668cf23ed0 'Timer *'
|         `-RecordType 0x55668cf23020 'Timer'
|           `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf75d10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x55668cf75cc0 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x55668cf75ca0 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x55668cf75c30 'type'
|     `-SubstTemplateTypeParmType 0x55668cf759f0 'Timer *' sugar
|       |-TemplateTypeParmType 0x55668cc92450 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc92400 'T'
|       `-PointerType 0x55668cf23ed0 'Timer *'
|         `-RecordType 0x55668cf23020 'Timer'
|           `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf75d78 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x55668cf74f80 'Timer *const &'
|   `-QualType 0x55668cf700d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-PointerType 0x55668cf23ed0 'Timer *'
|         `-RecordType 0x55668cf23020 'Timer'
|           `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf75dd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cf75e38 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x55668cf75040 'Timer **'
|   `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-PointerType 0x55668cf23ed0 'Timer *'
|       `-RecordType 0x55668cf23020 'Timer'
|         `-CXXRecord 0x55668cea6cb8 'Timer'
|-TypedefDecl 0x55668cf75ea0 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x55668cf75100 'Timer *const *'
|   `-QualType 0x55668cf700d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x55668cf700d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-PointerType 0x55668cf23ed0 'Timer *'
|         `-RecordType 0x55668cf23020 'Timer'
|           `-CXXRecord 0x55668cea6cb8 'Timer'
|-EnumDecl 0x55668cf75ef8 <line:134:5> col:5
| `-EnumConstantDecl 0x55668cf75ff0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55668cf75fd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55668ccc09c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55668ccc09a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55668ccc0980 <col:40> 'int' 1
|-CXXConstructorDecl 0x55668cf76078 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55668cf76308 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf76130 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cf761d0 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x55668cf765c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x55668cf764b0 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x55668cf76888 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x55668cf76770 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x55668cf76bd0 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x55668cf76ab0 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x55668cf76ee0 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x55668cf76dc0 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x55668cf771d0 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf77018 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cf77090 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x55668cf77328 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x55668cf77408 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf77460 <col:30> Inherited
|-CXXMethodDecl 0x55668cf774a8 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x55668cf77558 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf775b0 <col:30> Inherited
|-CXXMethodDecl 0x55668cf7b6c0 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x55668cf7b770 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf7b7c8 <col:30> Inherited
|-CXXMethodDecl 0x55668cf7b810 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x55668cf7b8c0 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf7b918 <col:30> Inherited
|-CXXMethodDecl 0x55668cf7b960 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x55668cf7ba10 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf7ba68 <col:30> Inherited
|-CXXMethodDecl 0x55668cf7bab0 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x55668cf7bb60 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cf7bbb8 <col:30> Inherited
|-CXXMethodDecl 0x55668cf7bbe0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cf7bc90 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cf7bd40 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55668cf7bf00 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf7bdf0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cf7be68 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x55668cf7c050 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55668cf7bfc0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf7c1f8 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x55668cf7c108 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cf7c2b0 <col:20>
| `-OptimizeNoneAttr 0x55668cf7c308 <col:30>
|-CXXMethodDecl 0x55668cf7c428 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x55668cf7c330 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cf7c4e0 <col:20>
| `-OptimizeNoneAttr 0x55668cf7c538 <col:30>
|-CXXMethodDecl 0x55668cf7c5f0 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cf7c560 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf7c738 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cf7c6a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf7c868 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x55668cf7c998 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x55668cf7ca68 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x55668cf7cb38 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x55668cf7cc78 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cf7cbe8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf7cdc0 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cf7cd30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cf7cf08 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x55668cf7ce78 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cf7cfc0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55668cf7d0c0 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55668cf7d030 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cf7d178 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55668cf7d238 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x55668cf7d338 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x55668cf7d4b8 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cf7d3f8 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x55668cf7dc78 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55668cf7d570 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x55668cf7dbd8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x55668cf7dad8 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x55668cf7dd58 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cf7dea8 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cf7de18 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x55668cf7df60 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55668cf7e1a8 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cf7e020 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x55668cf7e098 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x55668cf7e368 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x55668cf7e278 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x55668cf7e5b8 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x55668cf7e430 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x55668cf7e4a8 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x55668cf7e678 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cf7e8d8 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x55668cf7e7e0 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x55668cf7e9a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55668cf7e9a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf3d580 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cf3d698 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x55668cf3d728 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x55668cf3d7b0 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x55668cf3d8a0 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x55668cf3d9a0 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x55668cf3da60 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x55668cf3db20 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x55668cf3dc48 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x55668cf3dc48
| `-ParmVarDecl 0x55668cf3dd58 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x55668cf7f758 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x55668cf7f758
  `-ParmVarDecl 0x55668cf7f868 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf5f040 prev 0x55668ceaae68 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x55668cf5f138 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x55668cf5f1c8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x55668cf5f250 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x55668cf5f348 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x55668cf7fbd0 <col:43, col:67>
|   `-ReturnStmt 0x55668cf7fbc0 <col:45, col:52>
|     `-CXXConstructExpr 0x55668cf7fb90 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x55668cf7fb60 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x55668cf60b30
|         `-CXXThisExpr 0x55668cf7fb50 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x55668cf5f408 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x55668cf5f610 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x55668cf5f4b8 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x55668cf5f530 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x55668cf5f708 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x55668cf5f7d0 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x55668cf7fc50 <col:39, col:67>
|   `-ReturnStmt 0x55668cf7fc40 <col:41, col:48>
|     `-ImplicitCastExpr 0x55668cf7fc28 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55668cf7fbf8 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x55668cf60c18
|         `-CXXThisExpr 0x55668cf7fbe8 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x55668cf5f898 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x55668cf7fcd0 <col:35, col:59>
|   `-ReturnStmt 0x55668cf7fcc0 <col:37, col:44>
|     `-ImplicitCastExpr 0x55668cf7fca8 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55668cf7fc78 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x55668cf60c80
|         `-CXXThisExpr 0x55668cf7fc68 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x55668cf5f9e0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x55668cf5f950 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x55668cf5fb28 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x55668cf5fa98 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x55668cf5fd28 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x55668cf5fbe0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x55668cf5fc58 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x55668cf5fdf8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x55668cf5fe98 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x55668cf5fec0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55668cf5ffd8 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x55668cf60078 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x55668cf600d8 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x55668cf60208 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x55668cf60138 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x55668cf60078 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x55668cf7fda8 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x55668cf7fd50 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x55668cf7fd20 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x55668cea82f8
|   |       `-ImplicitCastExpr 0x55668cf7fd70 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x55668cf7fd08 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x55668cf7fce8 <col:17> 'Timer *' lvalue ParmVar 0x55668cf60138 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x55668cf600d8 't' 'Timer *'
|   | `-ImplicitCastExpr 0x55668cf7fe40 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55668cf7fe00 <col:41> 'Timer *' lvalue ParmVar 0x55668cf60138 't_' 'Timer *'
|   `-CompoundStmt 0x55668cf7fe90 <col:45, line:44:2>
|-CXXRecordDecl 0x55668cf602d0 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55668cf603e8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x55668cf60638 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x55668cf604b8 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x55668cf60530 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x55668cf7ffc0 <col:71, line:49:2>
|     `-ReturnStmt 0x55668cf7ffb0 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x55668cf7ff78 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x55668cf7ff60 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55668cf7ff40 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x55668cee1238 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x55668cf7fec0 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x55668cf60078
|         | `-DeclRefExpr 0x55668cf7fea0 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x55668cf604b8 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x55668cf7ff10 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x55668cf60078
|           `-DeclRefExpr 0x55668cf7fef0 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x55668cf60530 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x55668cf60700 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55668cf60818 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x55668cf60a38 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x55668cf608b8 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x55668cf60930 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x55668cf801c8 <col:63, line:54:2>
|     `-BinaryOperator 0x55668cf801a8 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x55668cf80058 <col:6, col:12> 'int' lvalue ->_schedpos1 0x55668ceaa308
|       | `-ImplicitCastExpr 0x55668cf80040 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x55668cf80010 <col:6, col:9> 'Timer *' lvalue ->t 0x55668cf600d8
|       |     `-ImplicitCastExpr 0x55668cf7fff8 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x55668cf7ffd8 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x55668cf60930 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x55668cf80190 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x55668cf80170 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x55668cf80118 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x55668cf800f8 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x55668cf800c8 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x55668cf80088 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x55668cf60930 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x55668cf800e0 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x55668cf800a8 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x55668cf608b8 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x55668cf80158 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x55668cf80138 <col:39> 'int' 1
|-FieldDecl 0x55668cf60b30 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x55668cf60ba0 <col:44, col:53> aligned
|   `-ConstantExpr 0x55668cf60b80 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x55668cf60b00 <col:52> 'int' 8
|-FieldDecl 0x55668cf60c18 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x55668cf60c80 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x55668cf60ce8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x55668cf6fdd0 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x55668cf7ea90 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x55668cf7eaf0 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x55668cf7eb50 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x55668cf7ebb0 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cf7eca0 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x55668cf7ec10 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x55668cf7ed68 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x55668cf80620 <col:29, line:81:5>
|   `-IfStmt 0x55668cf805f8 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x55668cf802b0 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x55668cf80250 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x55668cf80220 <col:6, col:18> '<bound member function type>' .size 0x55668cf6ce18
|     |     `-ImplicitCastExpr 0x55668cf80298 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x55668cf801f0 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x55668cf6fdd0
|     |         `-CXXThisExpr 0x55668cf801e0 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x55668cf804a0 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x55668cf80488 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55668cf80468 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x55668cbcac98 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x55668cf802d8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x55668cf60b30
|     | | `-CXXThisExpr 0x55668cf802c8 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x55668cf80450 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x55668cf80420 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x55668cf60078
|     |     `-CXXMemberCallExpr 0x55668cf803f8 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x55668cf803c8 <col:22, col:34> '<bound member function type>' .unchecked_at 0x55668cf6deb8
|     |       | `-MemberExpr 0x55668cf80318 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x55668cf6fdd0
|     |       |   `-CXXThisExpr 0x55668cf80308 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x55668cf803a8 <col:47> 'int' 0
|     `-ExprWithCleanups 0x55668cf805e0 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x55668cf805a8 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x55668cf80590 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55668cf80570 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55668cbcb148 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x55668cf804e8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x55668cf60b30
|         | `-CXXThisExpr 0x55668cf804d8 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x55668cf80558 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55668cf80528 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x55668cf7eea8 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x55668cf7ee18 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x55668cf7ef70 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x55668cf7f030 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x55668cf7f0f0 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x55668cf7f1e0 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x55668cf7f248 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x55668cf7f248
| `-ParmVarDecl 0x55668cf7f358 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x55668cf7f3f8 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x55668cf7f3f8
| `-ParmVarDecl 0x55668cf7f508 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x55668cf7f5a8 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x55668cf7f5a8
| `-ParmVarDecl 0x55668cf7f6b8 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x55668cf7f8d8 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x55668cf7f8d8
| `-ParmVarDecl 0x55668cf7f9e8 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x55668cf7fa70 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x55668cf7fa70

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cfb64b8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x55668cfb66c8 prev 0x55668cfb64b8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55668cfb77a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x55668cfb7750 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x55668cfb7730 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x55668cfb75e0 'type'
|     `-SubstTemplateTypeParmType 0x55668cf70de0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x55668cc87650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc875f8 'T'
|       `-RecordType 0x55668cf70930 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x55668cf70848 'sized_array_memory'
|-FieldDecl 0x55668cfb78a0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x55668cfb78f0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55668cfb7928 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|   |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|   `-RecordType 0x55668cfaa530 'pollfd'
|     `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb79e8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x55668cfb79b0 'pollfd &'
|   `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cfaa530 'pollfd'
|       `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb7aa8 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x55668cfb7a70 'const pollfd &'
|   `-QualType 0x55668cfb6761 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfaa530 'pollfd'
|         `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb7b38 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x55668cfb7b00 'pollfd *'
|   `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cfaa530 'pollfd'
|       `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb7bf8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x55668cfb7bc0 'const pollfd *'
|   `-QualType 0x55668cfb6761 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfaa530 'pollfd'
|         `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb87d0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x55668cfb8780 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x55668cfb8760 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x55668cfb86f0 'type'
|     `-SubstTemplateTypeParmType 0x55668cfb84b0 'pollfd' sugar
|       |-TemplateTypeParmType 0x55668cc92450 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc92400 'T'
|       `-RecordType 0x55668cfaa530 'pollfd'
|         `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb8838 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x55668cfb7a70 'const pollfd &'
|   `-QualType 0x55668cfb6761 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfaa530 'pollfd'
|         `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb8890 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cfb88f8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x55668cfb7b00 'pollfd *'
|   `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cfaa530 'pollfd'
|       `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-TypedefDecl 0x55668cfb8960 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x55668cfb7bc0 'const pollfd *'
|   `-QualType 0x55668cfb6761 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x55668cfb6760 'pollfd' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfaa530 'pollfd'
|         `-CXXRecord 0x55668cfaa4a0 'pollfd'
|-EnumDecl 0x55668cfb89b8 <line:134:5> col:5
| `-EnumConstantDecl 0x55668cfb8ab0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55668cfb8a90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55668ccc09c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55668ccc09a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55668ccc0980 <col:40> 'int' 1
|-CXXConstructorDecl 0x55668cfb8b38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55668cfb8dc8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfb8bf0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cfb8c90 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x55668cfb9088 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x55668cfb8f70 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x55668cfb9348 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x55668cfb9230 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x55668cfb9690 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x55668cfb9570 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x55668cfb99a0 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x55668cfb9880 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x55668cfb9c90 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfb9ad8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cfb9b50 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x55668cfb9de8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x55668cfb9ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfb9f20 <col:30> Inherited
|-CXXMethodDecl 0x55668cfb9f68 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x55668cfba018 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfba070 <col:30> Inherited
|-CXXMethodDecl 0x55668cfba138 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x55668cfba1e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfba240 <col:30> Inherited
|-CXXMethodDecl 0x55668cfba288 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x55668cfba338 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfba390 <col:30> Inherited
|-CXXMethodDecl 0x55668cfba3d8 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x55668cfba488 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfba4e0 <col:30> Inherited
|-CXXMethodDecl 0x55668cfba528 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x55668cfba5d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfba630 <col:30> Inherited
|-CXXMethodDecl 0x55668cfba658 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cfba708 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cfba7b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55668cfba978 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfba868 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cfba8e0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x55668cfbaac8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55668cfbaa38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfbac78 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x55668cfbab80 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cfbad30 <col:20>
| `-OptimizeNoneAttr 0x55668cfbad88 <col:30>
|-CXXMethodDecl 0x55668cfbaea8 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x55668cfbadb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cfbaf60 <col:20>
| `-OptimizeNoneAttr 0x55668cfbafb8 <col:30>
|-CXXMethodDecl 0x55668cfbb070 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cfbafe0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfbb1b8 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cfbb128 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfbb2e8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x55668cfbb418 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x55668cfbb4e8 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x55668cfbb5b8 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x55668cfbb6f8 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cfbb668 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfbb840 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cfbb7b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfbb988 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x55668cfbb8f8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cfbba40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55668cfbbb40 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55668cfbbab0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cfbbbf8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55668cfbbcb8 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x55668cfbbdb8 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x55668cfbbf68 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cfbbe78 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x55668cfbc728 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55668cfbc020 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x55668cfbc688 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x55668cfbc588 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x55668cfbc808 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cfbc958 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cfbc8c8 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x55668cfbca10 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55668cfbcc58 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfbcad0 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x55668cfbcb48 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x55668cfbce18 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x55668cfbcd28 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x55668cfbd068 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x55668cfbcee0 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x55668cfbcf58 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x55668cfbd128 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cfbd3a8 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x55668cfbd290 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x55668cfbd478 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55668cfbd478

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cfbea60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x55668cfbec38 prev 0x55668cfbea60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55668cfbecc8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55668cfbecf0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cfc08c0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x55668cfc0870 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x55668cfbf1a0 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x55668cfbf0a0 'type'
|     `-TemplateSpecializationType 0x55668cfbf030 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55668cfbef10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x55668cfbeef0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55668cfbeed0 <col:24> 'unsigned long' 24
|       `-RecordType 0x55668cfbf010 'char_array<24>'
|         `-ClassTemplateSpecialization 0x55668cfbef30 'char_array'
|-TypedefDecl 0x55668cfc0978 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x55668cfc0940 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x55668cfc0920 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x55668cfc08c0 'type'
|     `-ElaboratedType 0x55668cfc0870 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x55668cfbf1a0 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x55668cfbf0a0 'type'
|         `-TemplateSpecializationType 0x55668cfbf030 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55668cfbef10 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x55668cfbeef0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55668cfbeed0 <col:24> 'unsigned long' 24
|           `-RecordType 0x55668cfbf010 'char_array<24>'
|             `-ClassTemplateSpecialization 0x55668cfbef30 'char_array'
|-CXXMethodDecl 0x55668cfc0af8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x55668cfc0a08 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x55668cfc0be8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55668cfc0cc8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55668cfc0cc8
|-CXXMethodDecl 0x55668cfc0f98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x55668cfc0ea0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x55668cfc11d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x55668cfc1050 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cfc10c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc13a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x55668cfc1298 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cfc1310 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc1508 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x55668cfc15d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x55668cfc1828 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x55668cfc1698 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x55668cfc1710 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc1a88 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x55668cfc18f8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x55668cfc1970 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc1c48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x55668cfc1b58 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc1e08 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x55668cfc1d10 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc1ec0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cfc1f70 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cfc21a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x55668cfc2020 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668cfc2098 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x55668cfc2448 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x55668cfc2350 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x55668cfc2510 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x55668cfc2560 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55668cfc25b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cfbd5c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x55668cfbd7c8 prev 0x55668cfbd5c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55668cfbe9d0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x55668cfbe980 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x55668cfbe960 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x55668cfbe810 'type'
|     `-SubstTemplateTypeParmType 0x55668cfbe630 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x55668cc87650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc875f8 'T'
|       `-RecordType 0x55668cfbe180 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x55668cfbe0a0 'sized_array_memory'
|-FieldDecl 0x55668cfc2600 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x55668cfc2650 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55668cfc2688 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|   `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc2748 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x55668cfc2710 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc2808 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x55668cfc27d0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x55668cfbd861 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc2898 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x55668cfc2860 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc2958 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x55668cfc2920 'const SelectSet::SelectorInfo *'
|   `-QualType 0x55668cfbd861 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc35b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x55668cfc3560 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x55668cfc3540 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x55668cfc3478 'type'
|     `-LValueReferenceType 0x55668cfc3440 'const SelectSet::SelectorInfo &'
|       `-QualType 0x55668cfc31e1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x55668cfc31e0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x55668cc91d20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55668cc91cc8 'T'
|           `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc3618 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x55668cfc27d0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x55668cfbd861 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc3670 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668cfc36d8 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x55668cfc2860 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-TypedefDecl 0x55668cfc3740 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x55668cfc2920 'const SelectSet::SelectorInfo *'
|   `-QualType 0x55668cfbd861 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x55668cfbd860 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cfb6020 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x55668cfb5f90 'SelectorInfo'
|-EnumDecl 0x55668cfc3798 <line:134:5> col:5
| `-EnumConstantDecl 0x55668cfc3890 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55668cfc3870 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55668ccc09c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55668ccc09a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55668ccc0980 <col:40> 'int' 1
|-CXXConstructorDecl 0x55668cfc3918 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55668cfc3ba8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfc39d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cfc3a70 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x55668cfc3e68 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x55668cfc3d50 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x55668cfc4128 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x55668cfc4010 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x55668cfc4470 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x55668cfc4350 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x55668cfc4780 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x55668cfc4660 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x55668cfc4a70 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfc48b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cfc4930 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x55668cfc4bc8 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x55668cfc4ca8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfc4d00 <col:30> Inherited
|-CXXMethodDecl 0x55668cfc4d48 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x55668cfc4df8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfc4e50 <col:30> Inherited
|-CXXMethodDecl 0x55668cfc4f18 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x55668cfc4fc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfc5020 <col:30> Inherited
|-CXXMethodDecl 0x55668cfc5068 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x55668cfc5118 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfc5170 <col:30> Inherited
|-CXXMethodDecl 0x55668cfc51b8 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x55668cfc5268 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfc52c0 <col:30> Inherited
|-CXXMethodDecl 0x55668cfc5360 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x55668cfc5410 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668cfc5468 <col:30> Inherited
|-CXXMethodDecl 0x55668cfc5490 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cfc5540 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668cfc55f0 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55668cfc57b0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfc56a0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668cfc5718 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x55668cfc5900 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55668cfc5870 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfc5aa8 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x55668cfc59b8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cfc5b60 <col:20>
| `-OptimizeNoneAttr 0x55668cfc5bb8 <col:30>
|-CXXMethodDecl 0x55668cfc5cd8 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x55668cfc5be0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668cfc5d90 <col:20>
| `-OptimizeNoneAttr 0x55668cfc5de8 <col:30>
|-CXXMethodDecl 0x55668cfc5ea0 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cfc5e10 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfc5fe8 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cfc5f58 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfc6118 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x55668cfc6248 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x55668cfc6318 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x55668cfc63e8 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x55668cfc6528 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668cfc6498 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfc6670 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668cfc65e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668cfc67b8 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x55668cfc6728 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cfc6870 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55668cfc6970 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55668cfc68e0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668cfc6a28 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55668cfc6ae8 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x55668cfc6be8 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x55668cfc6d98 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cfc6ca8 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x55668cfc7558 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55668cfc6e50 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x55668cfc74b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x55668cfc73b8 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x55668cfc7638 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668cfc7788 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x55668cfc76f8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x55668cfc7840 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55668cfc7a88 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x55668cfc7900 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x55668cfc7978 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x55668cfc7c48 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x55668cfc7b58 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x55668cfc7e98 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x55668cfc7d10 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x55668cfc7d88 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x55668cfc7f58 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668cfc81b8 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x55668cfc80c0 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x55668cfc8288 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55668cfc8288

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cfab130 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cfab248 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x55668cfab2d8 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x55668cfb53a0 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x55668cfb5490 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x55668cfb5490
|-CXXMethodDecl 0x55668cfb5590 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x55668cfb5830 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x55668cfb5648 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x55668cfb56c0 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x55668cfb5740 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x55668cfb5aa0 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x55668cfb5900 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x55668cfb5978 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x55668cfb59f8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x55668cfb5bf8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x55668cfb5b68 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x55668cfb5cc0 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x55668cfc9938 <col:34, line:50:5>
|   |-BinaryOperator 0x55668cfc9308 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x55668cfc92c8 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x55668cfb6448
|   | | `-CXXThisExpr 0x55668cfc92b8 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x55668cfc92f8 <col:23> 'bool' true
|   `-CallExpr 0x55668cfc9910 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x55668cfc98f8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x55668cfc9878 <col:2> 'void (long)' lvalue Function 0x55668cfc9778 'ignore_result' 'void (long)' (FunctionTemplate 0x55668cc825f8 'ignore_result')
|     `-CallExpr 0x55668cfc9520 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x55668cfc9508 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668cfc9488 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x55668cf836d0 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x55668cfc9558 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x55668cfc9430 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x55668cfc9418 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x55668cfc93c8 <col:22> 'int [2]' lvalue ->_wake_pipe 0x55668cfb63e8
|       |   |   `-CXXThisExpr 0x55668cfc93b8 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x55668cfc93f8 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x55668cfc9588 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x55668cfc9570 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x55668cfc9450 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x55668cfc95a0 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x55668cfc9468 <col:41> 'int' 1
|-CXXMethodDecl 0x55668cfb5e00 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x55668cfb5d70 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x55668cfb5ec8 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x55668cfb5f68 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x55668cfb5f90 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55668cfb60a8 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x55668cfb6148 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x55668cfb61a8 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x55668cfb6210 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x55668cfb62c0 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x55668cfb6148 'read' 'Element *'
|   | `-ImplicitCastExpr 0x55668cfc9998 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x55668cfc9958 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x55668cfb61a8 'write' 'Element *'
|   | `-ImplicitCastExpr 0x55668cfc9a18 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x55668cfc99d8 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x55668cfb6210 'pollfd' 'int'
|   | `-UnaryOperator 0x55668cfc9a78 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x55668cfc9a58 <col:35> 'int' 1
|   `-CompoundStmt 0x55668cfc9af0 <line:64:2, line:65:2>
|-FieldDecl 0x55668cfb63e8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x55668cfb6448 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x55668cfbd560 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x55668cfc8370 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x55668cfc85a8 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x55668cfc83d8 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x55668cfc8450 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x55668cfc84c8 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x55668cfc8790 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x55668cfc8678 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x55668cfc86f8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x55668cfc89d8 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x55668cfc8858 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x55668cfc88d8 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x55668cfc8be8 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x55668cfc8a98 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x55668cfc8b10 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x55668cfc8d38 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x55668cfc8ca8 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x55668cfc8e00 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x55668cfc8ec0 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x55668cfc8f88 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x55668cfc8f88
| `-ParmVarDecl 0x55668cfc9098 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x55668cfc9138 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x55668cfc9138
  `-ParmVarDecl 0x55668cfc9248 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf3c4e8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cf3c608 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x55668cf3c698 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x55668cf3c720 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x55668cf3c810 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x55668cf3c910 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x55668cf3c9d0 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x55668cf3ca90 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x55668cf3cb78 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x55668cf3cc98 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x55668cf3cc98
| `-ParmVarDecl 0x55668cf3cda8 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x55668cfce748 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x55668cfce748
  `-ParmVarDecl 0x55668cfce858 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cce1e20 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cce1f38 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55668cce1fc8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55668cce2098 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55668cce2180 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55668cce2398 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55668cce2240 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce2548 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55668cce2450 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55668cce2690 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55668cce2600 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55668cce27d8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55668cce2748 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce2920 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55668cce2890 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce29e8 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x55668cce2b30 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55668cce2aa0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55668cce2bf8 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x55668cce2d40 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55668cce2cb0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55668cce2eb8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55668cce2df8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce3000 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55668cce2f70 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce30c8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55668cce3288 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55668cce3178 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55668cce31f0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce34d8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55668cce3348 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55668cce33c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cce3588 <col:86> "" ""
|-CXXMethodDecl 0x55668cce37f8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55668cce3668 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55668cce36e0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce39a8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55668cce38b8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55668cce3b58 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55668cce3a60 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55668cce3e28 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55668cce3c10 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55668cce3c88 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55668cce3d00 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce4108 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55668cce3ef0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55668cce3f68 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55668cce3fe0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cce41c0 <col:115> "" ""
|-AccessSpecDecl 0x55668cce4230 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55668cce4268 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cce4770 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55668cce4770
| `-ParmVarDecl 0x55668cce4878 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55668cce4918 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55668cce4918
| `-ParmVarDecl 0x55668cce4a28 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55668cd1a058 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668cf0ce60 <col:7>
|-CXXConstructorDecl 0x55668cd1a130 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55668cd1a130
| `-ParmVarDecl 0x55668cd1a248 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55668cd1a2b8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55668cd1a2b8
| `-ParmVarDecl 0x55668cd1a3c8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55668cf0f860 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cea4a28 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cea4b48 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x55668cea4be8 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x55668cea4c48 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x55668cfcdd48 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x55668cfcdd48
| `-ParmVarDecl 0x55668cfcde58 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x55668cfcdef8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x55668cfcdef8
| `-ParmVarDecl 0x55668cfce008 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x55668cfce078 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55668cfce8f8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x55668cfce8f8
| `-ParmVarDecl 0x55668cfcea08 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x55668cfcea78 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x55668cfcea78
| `-ParmVarDecl 0x55668cfceb88 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x55668cfd51f8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x55668cfd52d0 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf3e3e0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cf3e4f8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x55668cf3e588 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x55668cf3e610 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x55668cf3e6d0 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-CXXMethodDecl 0x55668cf3e798 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x55668cf3e838 <col:45> always_inline
|-CXXMethodDecl 0x55668cf3e968 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x55668cf3e8a0 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x55668cf3ea10 <col:49> always_inline
|-CXXConstructorDecl 0x55668cf3eb08 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x55668cf3eb08
| `-ParmVarDecl 0x55668cf3ec18 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x55668cf3ecb8 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x55668cf3ecb8
| `-ParmVarDecl 0x55668cf3edc8 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x55668cfce160 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x55668cfce160
|-CXXMethodDecl 0x55668cfcec28 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x55668cfcec28
| `-ParmVarDecl 0x55668cfced38 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x55668cfceda8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x55668cfceda8
  `-ParmVarDecl 0x55668cfceeb8 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cfc9f60 prev 0x55668cfab0a0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x55668cfca058 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x55668cfca0e8 <col:22, col:28> col:22 public
|-EnumDecl 0x55668cfca110 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x55668cfca228 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x55668cfca208 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x55668cfca1f0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x55668cfca1d0 <col:32> 'int' 1
| `-EnumConstantDecl 0x55668cfca2d0 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x55668cfca2b0 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x55668cfca298 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x55668cfca278 <col:53> 'int' 1000
|-CXXMethodDecl 0x55668cfca370 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x55668cfca430 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55668cfca518 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x55668cfcef78 <col:34, col:52>
|   `-ReturnStmt 0x55668cfcef68 <col:36, col:43>
|     `-MemberExpr 0x55668cfcef38 <col:43> 'TimerSet' lvalue ->_timers 0x55668cfcc1e8
|       `-CXXThisExpr 0x55668cfcef28 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x55668cfca608 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x55668cfcefe0 <col:46, col:64>
|   `-ReturnStmt 0x55668cfcefd0 <col:48, col:55>
|     `-MemberExpr 0x55668cfcefa0 <col:55> 'const TimerSet' lvalue ->_timers 0x55668cfcc1e8
|       `-CXXThisExpr 0x55668cfcef90 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x55668cfca6f8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x55668cfcf048 <col:36, col:55>
|   `-ReturnStmt 0x55668cfcf038 <col:38, col:45>
|     `-MemberExpr 0x55668cfcf008 <col:45> 'SelectSet' lvalue ->_selects 0x55668cfcc248
|       `-CXXThisExpr 0x55668cfceff8 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x55668cfca7e8 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x55668cfcf0b0 <col:48, col:67>
|   `-ReturnStmt 0x55668cfcf0a0 <col:50, col:57>
|     `-MemberExpr 0x55668cfcf070 <col:57> 'const SelectSet' lvalue ->_selects 0x55668cfcc248
|       `-CXXThisExpr 0x55668cfcf060 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x55668cfca8a8 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x55668cfca998 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x55668cfcab08 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x55668cfcaa48 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x55668cfcabd0 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x55668cfcb018 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x55668cfcac80 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x55668cfcaf00 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x55668cfcb0e8 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x55668cfcb1a8 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x55668cfcb268 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x55668cfcb3a8 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x55668cfcb318 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x55668cfcb470 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x55668cfcb530 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x55668cfcb5f0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x55668cfcb6b0 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x55668cfcb7f0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x55668cfcb760 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x55668cfcb8b8 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x55668cfcb978 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x55668cfcba18 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x55668cfcbae0 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbb30 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbb80 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbbd0 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbc20 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbc70 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbcc0 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbd10 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbd60 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x55668cfcbdb0 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x55668cfcbe00 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x55668cfcbef8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x55668cfcbe68 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x55668cfcc048 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x55668cfcbfb8 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x55668cfcc0f0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x55668cfcc128 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x55668cfcc188 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x55668cfcc1e8 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x55668cfcc248 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x55668cfcc2c8 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x55668cfcc338 <col:40, col:50> aligned
|   `-ConstantExpr 0x55668cfcc318 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x55668cfcc298 <col:48> 'int' 64
|-FieldDecl 0x55668cfcc3a8 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x55668cfcc408 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x55668cfcc500 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x55668cfcc610 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x55668cfcc670 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x55668cfcc6f0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x55668cfcc760 <col:36, col:46> aligned
|   `-ConstantExpr 0x55668cfcc740 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x55668cfcc6c0 <col:44> 'int' 64
|-FieldDecl 0x55668cfcc7d8 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x55668cfcc838 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x55668cfcc888 <line:170:3, col:9> col:3 public
|-FieldDecl 0x55668cfcc8c8 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x55668cfcc930 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x55668cfcc980 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x55668cfccb28 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x55668cfcc9b8 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x55668cfcca38 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x55668cfccc28 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x55668cfccc28
|-CXXMethodDecl 0x55668cfccd30 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x55668cfccdf8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x55668cfcf1a8 <col:34, line:217:5>
|   `-ReturnStmt 0x55668cfcf198 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x55668cfcf180 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55668cfcf150 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x55668cf40f40
|         `-ImplicitCastExpr 0x55668cfcf138 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x55668cfcf108 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x55668cf40ed8
|             `-MemberExpr 0x55668cfcf0d8 <col:16> 'const TaskLink' lvalue ->_task_link 0x55668cfcc128
|               `-CXXThisExpr 0x55668cfcf0c8 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x55668cfcceb8 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x55668cfccf78 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x55668cfcf8d0 <col:39, line:226:5>
|   |-DeclStmt 0x55668cfcf3f8 <line:223:9, col:68>
|   | `-VarDecl 0x55668cfcf1d0 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x55668cfcf3b0 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x55668cfcf380 <col:24, col:38> '<bound member function type>' .compare_swap 0x55668cce7c30
|   |     | `-MemberExpr 0x55668cfcf248 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x55668cfcc3a8
|   |     |   `-CXXThisExpr 0x55668cfcf238 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x55668cfcf338 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x55668cfcf320 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x55668cfcf2f8 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x55668cfcf2d8 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x55668cfcf3e0 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x55668cfcf360 <col:66> 'int' 0
|   |-CStyleCastExpr 0x55668cfcf440 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x55668cfcf410 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x55668cfcf1d0 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x55668cfcf8b0 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x55668cfcf880 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x55668cfcf558 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x55668cfcf528 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x55668cfcf510 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55668cfcf468 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x55668cfcf1d0 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x55668cfcf4e8 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x55668cfcf4d0 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x55668cfcf4a8 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x55668cfcf488 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x55668cfcf5b8 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x55668cfcf598 <col:60> 'int' 0
|       `-CallExpr 0x55668cfcf7e0 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x55668cfcf7c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x55668cfcf7a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x55668cfcf820 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55668cfcf6a8 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x55668cfcf838 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x55668cfcf6d8 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x55668cfcf850 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x55668cfcf718 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x55668cfcf868 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x55668cfcf790 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x55668cfcf778 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x55668cfcf738 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x55668cfcd0c0 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x55668cfcd030 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x55668cfcd188 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x55668cfcd248 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x55668cfcd370 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x55668cfcd430 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x55668cfcd4f0 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x55668cfcd5e0 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x55668cfcd640 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x55668cfcd6d0 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x55668cfcda98 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x55668cfcda98
| `-ParmVarDecl 0x55668cfcdba8 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x55668cfce268 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x55668cfce268
  `-ParmVarDecl 0x55668cfce378 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cf41250 prev 0x55668cf22ee0 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x55668cf41388 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x55668cf41418 <col:33, col:39> col:33 public
|-EnumDecl 0x55668cf41440 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x55668cf41580 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x55668cf41560 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x55668cf41540 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x55668cf41500 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x55668cf41520 <col:26> 'int' 16
| `-EnumConstantDecl 0x55668cf41650 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x55668cf41630 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x55668cf41610 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x55668cf415d0 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x55668cf415f0 <col:47> 'int' 31
|-EnumDecl 0x55668cf416a0 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x55668cf417e0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x55668cf41900 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cf417c0 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x55668cf417a0 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x55668cf41760 <col:26> 'int' 1
| |       `-IntegerLiteral 0x55668cf41780 <col:29> 'int' 15
| `-EnumConstantDecl 0x55668cf418b0 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x55668cf41918 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cf41890 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x55668cf41870 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x55668cf41830 <col:51> 'int' 1
|         `-IntegerLiteral 0x55668cf41850 <col:54> 'int' 10
|-CXXConstructorDecl 0x55668cf41ae8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x55668cf41940 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x55668cf419c0 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x55668cf41c78 <line:86:5, col:27> col:12 used Task 'void (Element *)' inline
| `-ParmVarDecl 0x55668cf41bb0 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x55668cf41d70 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x55668cf41ef8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x55668cea5b88 <col:42, line:100:5>
|   `-ReturnStmt 0x55668cea5b78 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x55668cea5b60 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x55668cea5b30 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x55668cea48b0
|         `-CXXThisExpr 0x55668cea5b20 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55668cf41fc0 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x55668cea5c08 <col:36, line:105:5>
|   `-ReturnStmt 0x55668cea5bf8 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x55668cea5be0 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55668cea5bb0 <col:16> 'void *const' lvalue ->_thunk 0x55668cea4918
|         `-CXXThisExpr 0x55668cea5ba0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55668cf42080 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x55668cea5c88 <col:37, line:110:5>
|   `-ReturnStmt 0x55668cea5c78 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x55668cea5c60 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x55668cea5c30 <col:16> 'Element *const' lvalue ->_owner 0x55668cea49d8
|         `-CXXThisExpr 0x55668cea5c20 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55668cf42140 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x55668cf42208 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x55668cf422c8 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x55668cf42388 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x55668cea5d70 <col:35, line:137:5>
|   `-ReturnStmt 0x55668cea5d60 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x55668cea5d28 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x55668cea5cf8 <col:16, col:24> '<bound member function type>' ->router 0x55668cf356f0
|         `-ImplicitCastExpr 0x55668cea5d48 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x55668cea5ce0 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x55668cea5cb0 <col:16> 'Element *const' lvalue ->_owner 0x55668cea49d8
|               `-CXXThisExpr 0x55668cea5ca0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55668cf42448 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x55668cf42648 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x55668cf424f8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x55668cf42570 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x55668cf42858 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x55668cf42708 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x55668cf42780 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x55668cf42928 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x55668cea5e80 <col:35, line:181:5>
|   `-ReturnStmt 0x55668cea5e70 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x55668cea5e58 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x55668cea5e40 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x55668cea5e10 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x55668cea44e8
|           `-MemberExpr 0x55668cea5dc8 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|             `-MemberExpr 0x55668cea5d98 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x55668cea4838
|               `-CXXThisExpr 0x55668cea5d88 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x55668cea3530 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x55668cea5f98 <col:30, line:192:5>
|   `-BinaryOperator 0x55668cea5f78 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x55668cea5f20 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x55668cea44e8
|     | `-MemberExpr 0x55668cea5ed8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|     |   `-MemberExpr 0x55668cea5ea8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x55668cea4838
|     |     `-CXXThisExpr 0x55668cea5e98 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x55668cea5f60 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x55668cea5f50 <col:32> 'bool' false
|-CXXMethodDecl 0x55668cea35f0 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x55668cea62e8 <col:30, line:206:5>
|   |-BinaryOperator 0x55668cea6090 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x55668cea6038 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x55668cea44e8
|   | | `-MemberExpr 0x55668cea5ff0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|   | |   `-MemberExpr 0x55668cea5fc0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x55668cea4838
|   | |     `-CXXThisExpr 0x55668cea5fb0 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x55668cea6078 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x55668cea6068 <col:32> 'bool' true
|   |-CallExpr 0x55668cea6130 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x55668cea6118 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55668cea60f8 <col:9> 'void ()' lvalue Function 0x55668cf3c0a0 'click_fence' 'void ()'
|   `-IfStmt 0x55668cea62d0 <line:204:9, line:205:32>
|     |-BinaryOperator 0x55668cea6210 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x55668cea61e0 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x55668cea6190 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x55668cea4c48
|     | |   `-MemberExpr 0x55668cea6160 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x55668cea4cc0
|     | |     `-CXXThisExpr 0x55668cea6150 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x55668cea61f8 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x55668cea61c0 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x55668cea6290 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x55668cea6240 <col:13> '<bound member function type>' ->complete_schedule 0x55668cea56c0
|       | `-CXXThisExpr 0x55668cea6230 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x55668cea62b8 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x55668cea6270 <col:31> 'int' 0
|-CXXMethodDecl 0x55668cea36b0 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x55668cea6410 <col:35, line:240:5>
|   `-BinaryOperator 0x55668cea63f0 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x55668cea6398 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x55668cea44e8
|     | `-MemberExpr 0x55668cea6350 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|     |   `-MemberExpr 0x55668cea6320 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x55668cea4838
|     |     `-CXXThisExpr 0x55668cea6310 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x55668cea63d8 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x55668cea63c8 <col:32> 'bool' true
|-CXXMethodDecl 0x55668cea3770 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x55668cea6628 <col:37, line:253:5>
|   |-BinaryOperator 0x55668cea6508 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x55668cea64b0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x55668cea44e8
|   | | `-MemberExpr 0x55668cea6468 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|   | |   `-MemberExpr 0x55668cea6438 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x55668cea4838
|   | |     `-CXXThisExpr 0x55668cea6428 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x55668cea64f0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x55668cea64e0 <col:32> 'bool' false
|   `-BinaryOperator 0x55668cea6608 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x55668cea65b0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x55668cea4548
|     | `-MemberExpr 0x55668cea6568 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|     |   `-MemberExpr 0x55668cea6538 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x55668cea4838
|     |     `-CXXThisExpr 0x55668cea6528 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x55668cea65f0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x55668cea65e0 <col:41> 'bool' true
|-CXXMethodDecl 0x55668cea3830 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x55668cea67a8 <col:37, line:264:5>
|   |-BinaryOperator 0x55668cea6728 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x55668cea66d0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x55668cea4548
|   | | `-MemberExpr 0x55668cea6688 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x55668cea4608
|   | |   `-MemberExpr 0x55668cea6658 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x55668cea4838
|   | |     `-CXXThisExpr 0x55668cea6648 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x55668cea6710 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x55668cea6700 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x55668cea6788 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x55668cea6758 <col:9> '<bound member function type>' ->reschedule 0x55668cea35f0
|       `-CXXThisExpr 0x55668cea6748 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x55668cea3978 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x55668cea38e8 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x55668cea3a48 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x55668cea3b90 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x55668cea3b00 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x55668cea3ce0 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x55668cea3c50 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x55668cea3da8 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x55668cea3e68 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x55668cea3f08 <col:53> "" ""
|-CXXMethodDecl 0x55668cea3fa0 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x55668cea4040 <col:47> "" ""
|-AccessSpecDecl 0x55668cea40b0 <line:303:3, col:10> col:3 private
|-FieldDecl 0x55668cea40f0 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x55668cea4158 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x55668cea41a8 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cea42c8 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x55668cea4358 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x55668cea4488 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x55668cea44e8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x55668cea4548 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x55668cfd4928 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x55668cfd4a00 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x55668cfd4cb8 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x55668cfd4cb8
| | | `-ParmVarDecl 0x55668cfd4dc8 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x55668cfd4e68 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x55668cfd4e68
| |   `-ParmVarDecl 0x55668cfd4f78 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x55668cea4608 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x55668cea4668 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x55668cea4608 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x55668cea4488 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x55668cea46c0 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x55668cea4608 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x55668cea44e8 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x55668cea4718 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x55668cea4608 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x55668cea4548 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x55668cea4770 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x55668cfd4838 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55668cfd5198 <col:11>
| |-CXXConstructorDecl 0x55668cfd4b08 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x55668cfd4b08
| | `-ParmVarDecl 0x55668cfd4c18 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x55668cfd5018 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x55668cfd5018
| | `-ParmVarDecl 0x55668cfd5128 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x55668d0bdea8 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x55668cea4838 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x55668cea48b0 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x55668cea4918 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x55668cea4978 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x55668cea49d8 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x55668cea4a28 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cea4b48 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x55668cea4be8 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x55668cea4c48 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x55668cfcdd48 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x55668cfcdd48
| | `-ParmVarDecl 0x55668cfcde58 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x55668cfcdef8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x55668cfcdef8
| | `-ParmVarDecl 0x55668cfce008 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x55668cfce078 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55668cfce8f8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x55668cfce8f8
| | `-ParmVarDecl 0x55668cfcea08 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x55668cfcea78 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x55668cfcea78
| | `-ParmVarDecl 0x55668cfceb88 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x55668cfd51f8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x55668cfd52d0 <col:11>
|-FieldDecl 0x55668cea4cc0 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x55668cea4e08 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x55668cea4d48 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x55668cea4fb8 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x55668cea4ec8 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x55668cea5080 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x55668cea5140 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x55668cea5200 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x55668cea68b8 <col:41, line:355:5>
|   `-ReturnStmt 0x55668cea68a8 <line:354:9, col:38>
|     `-BinaryOperator 0x55668cea6888 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x55668cea6858 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x55668cea6808 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x55668cea4c48
|       |   `-MemberExpr 0x55668cea67d8 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x55668cea4cc0
|       |     `-CXXThisExpr 0x55668cea67c8 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x55668cea6870 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x55668cea6838 <col:38> 'int' 0
|-CXXMethodDecl 0x55668cea52c0 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x55668cea5400 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x55668cea5370 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x55668cea5578 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x55668cea54b8 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x55668cea56c0 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x55668cea5630 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x55668cea5788 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x55668cea5950 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x55668cea5838 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x55668cea58b8 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x55668cea5a50 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x55668cea5ae0 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NotifierSignal::vmpair
         0 |   class atomic_uint32_t * value
         8 |   uint32_t mask
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cfdca68 <../dummy_inc/click/notifier.hh:50:5, line:53:5> line:50:12 referenced struct vmpair definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cfdcb88 <col:5, col:12> col:12 implicit struct vmpair
|-FieldDecl 0x55668cfdcc28 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
|-FieldDecl 0x55668cfdcc88 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x55668cfe60d8 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x55668cfe60d8

Layout: <CGRecordLayout
  LLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  NonVirtualBaseLLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cfdccf0 <../dummy_inc/click/notifier.hh:54:5, line:57:5> line:54:11 referenced union vmvalue definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cfdce08 <col:5, col:11> col:11 implicit union vmvalue
|-FieldDecl 0x55668cfdcea8 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
|-FieldDecl 0x55668cfdcf38 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
|-CXXConstructorDecl 0x55668cfe4c70 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668cfe50a8 <col:11>
|-CXXConstructorDecl 0x55668cfe4d78 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x55668cfe4d78
| `-ParmVarDecl 0x55668cfe4e88 <col:11> col:11 'const NotifierSignal::vmvalue &'
|-CXXConstructorDecl 0x55668cfe4f28 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x55668cfe4f28
| `-ParmVarDecl 0x55668cfe5038 <col:11> col:11 'NotifierSignal::vmvalue &&'
`-CXXDestructorDecl 0x55668cfe5da0 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.NotifierSignal::vmvalue" = type { %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cfda9a0 prev 0x55668cf23040 <../dummy_inc/click/notifier.hh:12:1, line:71:1> line:12:7 referenced class NotifierSignal definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cfdaa98 <col:1, col:7> col:7 implicit referenced class NotifierSignal
|-AccessSpecDecl 0x55668cfdab28 <line:13:3, col:9> col:3 public
|-TypedefDecl 0x55668cfdac58 <line:14:5, col:61> col:36 referenced unspecified_bool_type 'bool (NotifierSignal::*)() const'
| `-MemberPointerType 0x55668cfdabd0 'bool (NotifierSignal::*)() const'
|   |-RecordType 0x55668cf230d0 'NotifierSignal'
|   | `-CXXRecord 0x55668cfda9a0 'NotifierSignal'
|   `-ParenType 0x55668cfdab70 'bool () const' sugar
|     `-FunctionProtoType 0x55668ca699d0 'bool () const' const cdecl
|       `-BuiltinType 0x55668c9be500 'bool'
|-CXXConstructorDecl 0x55668cfdace8 <line:16:5, col:27> col:12 used NotifierSignal 'void ()' inline
|-CXXConstructorDecl 0x55668cfdaf28 <line:17:5, col:64> col:12 used NotifierSignal 'void (atomic_uint32_t *, uint32_t)' inline
| |-ParmVarDecl 0x55668cfdada0 <col:27, col:44> col:44 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x55668cfdae18 <col:51, col:60> col:60 mask 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55668cfdb0d8 <line:18:5, col:50> col:12 used NotifierSignal 'void (const NotifierSignal &)' inline
| `-ParmVarDecl 0x55668cfdb018 <col:27, col:49> col:49 x 'const NotifierSignal &'
|-CXXDestructorDecl 0x55668cfdb1d0 <line:19:5, col:28> col:12 used ~NotifierSignal 'void () noexcept' inline
|-CXXMethodDecl 0x55668cfdb2f8 <line:21:5, col:46> col:34 idle_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x55668cfdb3b8 <line:22:5, col:46> col:34 busy_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x55668cfdb478 <line:23:5, col:53> col:34 overderived_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x55668cfdb538 <line:24:5, col:55> col:34 used uninitialized_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x55668cfdb628 <line:26:5, col:26> col:17 used active 'bool () const' inline
|-CXXConversionDecl 0x55668cfdb798 <line:27:5, col:45> col:12 operator bool (NotifierSignal::*)() const 'NotifierSignal::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55668cfdb918 <line:29:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x55668cfdb858 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x55668cfdb9e0 <line:31:5, col:24> col:17 idle 'bool () const' inline
|-CXXMethodDecl 0x55668cfdbaa0 <line:32:5, col:24> col:17 busy 'bool () const' inline
|-CXXMethodDecl 0x55668cfdbb60 <line:33:5, col:31> col:17 overderived 'bool () const' inline
|-CXXMethodDecl 0x55668cfdbc20 <line:34:5, col:31> col:17 used initialized 'bool () const' inline
|-FriendDecl 0x55668cfdbed8 <line:36:5, col:76> col:17
| `-FunctionDecl 0x55668cfdbe18 parent 0x55668c9be488 <col:5, col:76> col:17 used operator== 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x55668cfdbcd0 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x55668cfdbd48 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-FriendDecl 0x55668cfdc0f8 <line:37:5, col:76> col:17
| `-FunctionDecl 0x55668cfdc038 parent 0x55668c9be488 <col:5, col:76> col:17 operator!= 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x55668cfdbf28 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x55668cfdbfa0 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-CXXMethodDecl 0x55668cfdc238 <line:39:5, col:54> col:21 operator= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x55668cfdc148 <col:31, col:53> col:53 x 'const NotifierSignal &'
|-CXXMethodDecl 0x55668cfdc380 <line:40:5, col:55> col:21 used operator+= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x55668cfdc2f0 <col:32, col:54> col:54 x 'const NotifierSignal &'
|-FriendDecl 0x55668cfdc648 <line:41:5, col:78> col:27
| `-FunctionDecl 0x55668cfdc588 parent 0x55668c9be488 <col:5, col:78> col:27 operator+ 'NotifierSignal (NotifierSignal, const NotifierSignal &)'
|   |-ParmVarDecl 0x55668cfdc438 <col:37, col:52> col:52 a 'NotifierSignal' destroyed
|   `-ParmVarDecl 0x55668cfdc4b0 <col:55, col:77> col:77 b 'const NotifierSignal &'
|-CXXMethodDecl 0x55668cfdc758 <line:43:5, col:39> col:17 used swap 'void (NotifierSignal &)' inline
| `-ParmVarDecl 0x55668cfdc698 <col:22, col:38> col:38 x 'NotifierSignal &'
|-CXXMethodDecl 0x55668cfdc8d8 <line:45:5, col:36> col:12 unparse 'String (Router *) const'
| `-ParmVarDecl 0x55668cfdc810 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x55668cfdc9a0 <line:47:5, col:35> col:17 static_initialize 'void ()' static
|-AccessSpecDecl 0x55668cfdca40 <line:49:3, col:10> col:3 private
|-CXXRecordDecl 0x55668cfdca68 <line:50:5, line:53:5> line:50:12 referenced struct vmpair definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cfdcb88 <col:5, col:12> col:12 implicit struct vmpair
| |-FieldDecl 0x55668cfdcc28 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
| |-FieldDecl 0x55668cfdcc88 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x55668cfe60d8 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x55668cfe60d8
|-CXXRecordDecl 0x55668cfdccf0 <line:54:5, line:57:5> line:54:11 referenced union vmvalue definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cfdce08 <col:5, col:11> col:11 implicit union vmvalue
| |-FieldDecl 0x55668cfdcea8 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
| |-FieldDecl 0x55668cfdcf38 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
| |-CXXConstructorDecl 0x55668cfe4c70 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55668cfe50a8 <col:11>
| |-CXXConstructorDecl 0x55668cfe4d78 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x55668cfe4d78
| | `-ParmVarDecl 0x55668cfe4e88 <col:11> col:11 'const NotifierSignal::vmvalue &'
| |-CXXConstructorDecl 0x55668cfe4f28 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x55668cfe4f28
| | `-ParmVarDecl 0x55668cfe5038 <col:11> col:11 'NotifierSignal::vmvalue &&'
| `-CXXDestructorDecl 0x55668cfe5da0 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial
|-FieldDecl 0x55668cfdcfb0 <line:59:5, col:13> col:13 referenced _v 'NotifierSignal::vmvalue'
|-FieldDecl 0x55668cfdd010 <line:60:5, col:14> col:14 referenced _mask 'uint32_t':'unsigned int'
|-EnumDecl 0x55668cfdd060 <line:62:5, line:65:5> line:62:5
| |-EnumConstantDecl 0x55668cfdd160 <line:63:2, col:14> col:2 referenced true_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x55668cfdd360 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cfdd140 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55668cfdd120 <col:14> 'int' 1
| |-EnumConstantDecl 0x55668cfdd1f0 <col:17, col:30> col:17 referenced false_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x55668cfdd378 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cfdd1d0 <col:30> 'int' Int: 2
| |     `-IntegerLiteral 0x55668cfdd1b0 <col:30> 'int' 2
| |-EnumConstantDecl 0x55668cfdd280 <col:33, col:52> col:33 referenced overderived_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x55668cfdd390 <col:52> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cfdd260 <col:52> 'int' Int: 4
| |     `-IntegerLiteral 0x55668cfdd240 <col:52> 'int' 4
| `-EnumConstantDecl 0x55668cfdd310 <line:64:2, col:23> col:2 referenced uninitialized_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
|   `-ImplicitCastExpr 0x55668cfdd3a8 <col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cfdd2f0 <col:23> 'int' Int: 8
|       `-IntegerLiteral 0x55668cfdd2d0 <col:23> 'int' 8
|-VarDecl 0x55668cfdd3d0 <line:66:5, col:28> col:28 used static_value 'atomic_uint32_t' static
|-CXXMethodDecl 0x55668cfdd4d8 <line:68:5, col:48> col:10 used hard_assign_vm 'void (const NotifierSignal &)'
| `-ParmVarDecl 0x55668cfdd448 <col:25, col:47> col:47 x 'const NotifierSignal &'
|-CXXMethodDecl 0x55668cfdd6a0 <line:69:5, col:63> col:10 hard_derive_one 'void (atomic_uint32_t *, uint32_t)'
| |-ParmVarDecl 0x55668cfdd590 <col:26, col:43> col:43 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x55668cfdd608 <col:50, col:59> col:59 mask 'uint32_t':'unsigned int'
`-CXXMethodDecl 0x55668cfdd8d8 <line:70:5, col:61> col:17 used hard_equals 'bool (const NotifierSignal::vmpair *, const NotifierSignal::vmpair *)' static
  |-ParmVarDecl 0x55668cfdd788 <col:29, col:43> col:43 a 'const NotifierSignal::vmpair *'
  `-ParmVarDecl 0x55668cfdd800 <col:46, col:60> col:60 b 'const NotifierSignal::vmpair *'

Layout: <CGRecordLayout
  LLVMType:%class.NotifierSignal = type <{ %"union.NotifierSignal::vmvalue", i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.NotifierSignal.base = type <{ %"union.NotifierSignal::vmvalue", i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cff9418 <../elements/standard/unqueue.hh:66:1, line:94:1> line:66:7 class Unqueue definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55668cff9578 <col:1, col:7> col:7 implicit referenced class Unqueue
|-AccessSpecDecl 0x55668cff9608 <col:34, col:40> col:34 public
|-CXXConstructorDecl 0x55668cff9690 <line:68:5, col:13> col:5 Unqueue 'void ()'
|-CXXMethodDecl 0x55668cff9790 <line:70:5, col:56> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55668cf24aa8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55668cffaf18 <col:36, col:56>
|   `-ReturnStmt 0x55668cffaf08 <col:38, col:45>
|     `-ImplicitCastExpr 0x55668cffaef0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55668cffaed0 <col:45> 'const char [8]' lvalue "Unqueue"
|-CXXMethodDecl 0x55668cff9858 <line:71:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55668cf24b70 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55668cffaf78 <col:36, col:56>
|   `-ReturnStmt 0x55668cffaf68 <col:38, col:45>
|     `-ImplicitCastExpr 0x55668cffaf50 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55668cffaf30 <col:45> 'const char []' lvalue Var 0x55668cf24e20 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x55668cff9920 <line:72:5, col:59> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55668cf24f38 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55668cffafd8 <col:36, col:59>
|   `-ReturnStmt 0x55668cffafc8 <col:38, col:45>
|     `-ImplicitCastExpr 0x55668cffafb0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55668cffaf90 <col:45> 'const char []' lvalue Var 0x55668cf25218 'PULL_TO_PUSH' 'const char []'
|-CXXMethodDecl 0x55668cff9bf0 <line:74:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55668cf26340 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55668cff9aa0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55668cff9b18 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55668cff9d48 <line:75:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55668cf26590 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55668cff9cb0 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x55668cff9e10 <line:76:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55668cf26410 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55668cff9f50 <line:78:5, col:25> col:10 run_task 'bool (Task *)'
| |-Overrides: [ 0x55668cf23e28 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x55668cff9ec0 <col:19, col:24> col:25 'Task *'
|-AccessSpecDecl 0x55668cff9ff8 <line:80:3, col:10> col:3 private
|-FieldDecl 0x55668cffa030 <line:82:5, col:10> col:10 _active 'bool'
|-FieldDecl 0x55668cffa090 <line:83:5, col:13> col:13 _burst 'int32_t':'int'
|-FieldDecl 0x55668cffa0f0 <line:84:5, col:13> col:13 _limit 'int32_t':'int'
|-FieldDecl 0x55668cffa150 <line:85:5, col:14> col:14 _count 'uint32_t':'unsigned int'
|-FieldDecl 0x55668cffa1b0 <line:86:5, col:10> col:10 _task 'Task'
|-FieldDecl 0x55668cffa210 <line:87:5, col:20> col:20 _signal 'NotifierSignal'
|-EnumDecl 0x55668cffa260 <line:89:5, line:91:5> line:89:5
| |-EnumConstantDecl 0x55668cffa320 <line:90:2> col:2 h_active 'Unqueue::(anonymous enum at ../elements/standard/unqueue.hh:89:5)'
| |-EnumConstantDecl 0x55668cffa370 <col:12> col:12 h_reset 'Unqueue::(anonymous enum at ../elements/standard/unqueue.hh:89:5)'
| |-EnumConstantDecl 0x55668cffa3c0 <col:21> col:21 h_burst 'Unqueue::(anonymous enum at ../elements/standard/unqueue.hh:89:5)'
| `-EnumConstantDecl 0x55668cffa410 <col:30> col:30 h_limit 'Unqueue::(anonymous enum at ../elements/standard/unqueue.hh:89:5)'
|-CXXMethodDecl 0x55668cffa690 <line:92:5, col:77> col:16 write_param 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55668cffa470 <col:28, col:41> col:42 'const String &'
| |-ParmVarDecl 0x55668cffa4e8 <col:44, col:52> col:53 'Element *'
| |-ParmVarDecl 0x55668cffa568 <col:55, col:60> col:61 'void *'
| `-ParmVarDecl 0x55668cffa5e0 <col:63, col:76> col:77 'ErrorHandler *'
|-CXXConstructorDecl 0x55668cffa778 <line:66:7> col:7 implicit Unqueue 'void (const Unqueue &)' inline default_delete noexcept-unevaluated 0x55668cffa778
| `-ParmVarDecl 0x55668cffa888 <col:7> col:7 'const Unqueue &'
|-CXXConstructorDecl 0x55668cffa928 <col:7> col:7 implicit Unqueue 'void (Unqueue &&)' inline default_delete noexcept-unevaluated 0x55668cffa928
| `-ParmVarDecl 0x55668cffaa38 <col:7> col:7 'Unqueue &&'
|-CXXMethodDecl 0x55668cffaad8 <col:7> col:7 implicit operator= 'Unqueue &(const Unqueue &)' inline default_delete noexcept-unevaluated 0x55668cffaad8
| `-ParmVarDecl 0x55668cffabe8 <col:7> col:7 'const Unqueue &'
|-CXXMethodDecl 0x55668cffac58 <col:7> col:7 implicit operator= 'Unqueue &(Unqueue &&)' inline default_delete noexcept-unevaluated 0x55668cffac58
| `-ParmVarDecl 0x55668cffad68 <col:7> col:7 'Unqueue &&'
`-CXXDestructorDecl 0x55668cffadf0 <col:7> col:7 implicit ~Unqueue 'void ()' inline default noexcept-unevaluated 0x55668cffadf0
  `-Overrides: [ 0x55668cf23648 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Unqueue = type { %class.Element.base, i8, i32, i32, i32, %class.Task, %class.NotifierSignal }
  NonVirtualBaseLLVMType:%class.Unqueue = type { %class.Element.base, i8, i32, i32, i32, %class.Task, %class.NotifierSignal }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668ccf6200 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55668ccf6318 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55668ccf63b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55668ccf6418 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55668ccf6478 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55668ccf6528 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668ccf6830 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668ccf6948 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55668ccf69f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55668ccf6a58 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55668ccf6ae8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55668ccfcb80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668ccfcfb8 <col:12>
|-CXXConstructorDecl 0x55668ccfcc88 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668ccfcd98 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55668ccf69f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55668ccff540 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55668ccff510 <col:12> 'const char *const' lvalue .data 0x55668ccf69f0
| |     `-DeclRefExpr 0x55668ccff4f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668ccfcd98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55668ccf6a58 'length' 'int'
| | `-ImplicitCastExpr 0x55668ccff5d0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55668ccff5a0 <col:12> 'const int' lvalue .length 0x55668ccf6a58
| |     `-DeclRefExpr 0x55668ccff580 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668ccfcd98 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55668ccf6ae8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55668ccff660 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55668ccff630 <col:12> 'String::memo_t *const' lvalue .memo 0x55668ccf6ae8
| |     `-DeclRefExpr 0x55668ccff610 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668ccfcd98 '' 'const String::rep_t &'
| `-CompoundStmt 0x55668ccff6b8 <col:12>
|-CXXConstructorDecl 0x55668ccfce38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55668ccfce38
| `-ParmVarDecl 0x55668ccfcf48 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55668cd024a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55668cd0deb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cd0dfc8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55668cd0e4e0 <col:12>
|   |-BinaryOperator 0x55668cd0e2f8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55668cd0e2b0 <col:12> 'const char *' lvalue ->data 0x55668ccf69f0
|   | | `-CXXThisExpr 0x55668cd0e2a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55668cd0e2e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55668cd0e270 <col:12> 'const char *const' lvalue .data 0x55668ccf69f0
|   |     `-DeclRefExpr 0x55668cd0e250 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668cd0dfc8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55668cd0e3c0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55668cd0e378 <col:12> 'int' lvalue ->length 0x55668ccf6a58
|   | | `-CXXThisExpr 0x55668cd0e368 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55668cd0e3a8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55668cd0e338 <col:12> 'const int' lvalue .length 0x55668ccf6a58
|   |     `-DeclRefExpr 0x55668cd0e318 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668cd0dfc8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55668cd0e488 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55668cd0e440 <col:12> 'String::memo_t *' lvalue ->memo 0x55668ccf6ae8
|   | | `-CXXThisExpr 0x55668cd0e430 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55668cd0e470 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55668cd0e400 <col:12> 'String::memo_t *const' lvalue .memo 0x55668ccf6ae8
|   |     `-DeclRefExpr 0x55668cd0e3e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668cd0dfc8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55668cd0e4d0 <col:12>
|     `-UnaryOperator 0x55668cd0e4b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668cd0e4a8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55668cd0e038 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55668cd0e038
  `-ParmVarDecl 0x55668cd0e148 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cced770 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cced888 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55668cced918 <col:16, col:22> col:16 public
|-TypedefDecl 0x55668cced958 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55668c9befd0 'const char *'
|   `-QualType 0x55668c9be521 'const char' const
|     `-BuiltinType 0x55668c9be520 'char'
|-TypedefDecl 0x55668cced9e0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55668cced9b0 'String::const_iterator' sugar
|   |-Typedef 0x55668cced958 'const_iterator'
|   `-PointerType 0x55668c9befd0 'const char *'
|     `-QualType 0x55668c9be521 'const char' const
|       `-BuiltinType 0x55668c9be520 'char'
|-TypedefDecl 0x55668ccedb50 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55668ccedac0 'int (String::*)() const'
|   |-RecordType 0x55668cced800 'String'
|   | `-CXXRecord 0x55668cced770 'String'
|   `-ParenType 0x55668cceda60 'int () const' sugar
|     `-FunctionProtoType 0x55668ccc2600 'int () const' const cdecl
|       `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668ccedbb8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55668cb171e0 'int64_t' sugar
|   |-Typedef 0x55668ca27390 'int64_t'
|   `-TypedefType 0x55668ca00630 '__int64_t' sugar
|     |-Typedef 0x55668ca00208 '__int64_t'
|     `-BuiltinType 0x55668c9be5a0 'long'
|-TypedefDecl 0x55668ccedc20 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55668cb17100 'uint64_t' sugar
|   |-Typedef 0x55668ca27530 'uint64_t'
|   `-TypedefType 0x55668ca006c0 '__uint64_t' sugar
|     |-Typedef 0x55668ca00278 '__uint64_t'
|     `-BuiltinType 0x55668c9be640 'unsigned long'
|-TypedefDecl 0x55668ccedcb0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55668ccedc80 'String::intmax_t' sugar
|   |-Typedef 0x55668ccedbb8 'intmax_t'
|   `-TypedefType 0x55668cb171e0 'int64_t' sugar
|     |-Typedef 0x55668ca27390 'int64_t'
|     `-TypedefType 0x55668ca00630 '__int64_t' sugar
|       |-Typedef 0x55668ca00208 '__int64_t'
|       `-BuiltinType 0x55668c9be5a0 'long'
|-TypedefDecl 0x55668ccedd40 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55668ccedd10 'String::uintmax_t' sugar
|   |-Typedef 0x55668ccedc20 'uintmax_t'
|   `-TypedefType 0x55668cb17100 'uint64_t' sugar
|     |-Typedef 0x55668ca27530 'uint64_t'
|     `-TypedefType 0x55668ca006c0 '__uint64_t' sugar
|       |-Typedef 0x55668ca00278 '__uint64_t'
|       `-BuiltinType 0x55668c9be640 'unsigned long'
|-CXXConstructorDecl 0x55668ccede00 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55668ccedfa8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55668ccedee8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55668ccee158 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55668ccee098 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55668ccee2b0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55668ccee220 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55668ccee4c8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55668ccee378 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55668ccee3f8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55668ccee6e8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55668ccee598 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55668ccee618 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55668ccee908 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55668ccee7b8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55668ccee838 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55668cceeb28 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55668ccee9d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55668cceea58 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55668cceecb8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55668cceebf0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55668cceee38 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55668cceed78 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55668cceefc8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55668cceef00 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55668ccef120 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55668ccef090 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55668ccef278 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55668ccef1e8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55668ccef3d0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55668ccef340 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55668ccef558 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55668ccef498 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55668ccef6e8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55668ccef620 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55668ccef878 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55668ccef7b0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55668ccefa08 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55668ccef940 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55668ccefb00 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55668ccefc28 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55668ccefda8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55668ccefce0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55668ccefef8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55668ccefe68 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55668cceffb0 <col:63> "" ""
|-CXXMethodDecl 0x55668ccf00f8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55668ccf0038 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55668ccf0308 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55668ccf01b8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55668ccf0238 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55668ccf0528 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55668ccf03d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55668ccf0450 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55668ccf0808 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55668ccf05e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55668ccf0668 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55668ccfc650 <col:55> 'int' 10
| `-ParmVarDecl 0x55668ccf06e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55668ccfc670 <col:76> 'bool' true
|-CXXMethodDecl 0x55668ccf0ae8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55668ccf08d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55668ccf0950 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55668ccfc680 <col:56> 'int' 10
| `-ParmVarDecl 0x55668ccf09c8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55668ccfc6a0 <col:77> 'bool' true
|-CXXMethodDecl 0x55668ccf0bf0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55668ccf0cb8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55668ccf0d80 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55668ccf0e20 <col:20>
| `-OptimizeNoneAttr 0x55668ccf0e78 <col:30>
|-CXXConversionDecl 0x55668ccf0f68 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55668ccf1038 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55668ccf10f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55668ccf11e8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55668ccf12a8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55668ccf1428 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55668ccf1360 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55668ccf1578 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55668ccf14e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55668ccf1668 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55668ccf1728 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55668ccf1978 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55668ccf17e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55668ccf1860 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55668ccf1bd8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55668ccf1a40 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55668ccf1ac0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55668ccf1ca8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ccf1eb8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55668ccf1d60 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55668ccf1de0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55668ccf20d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55668ccf1f80 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55668ccf2000 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55668ccf2268 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55668ccf21a0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55668ccf2358 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55668ccf24c8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55668ccf2408 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55668ccf26d8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55668ccf2588 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55668ccf2608 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55668ccf28f0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55668ccf2798 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55668ccf2810 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55668ccf2a80 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55668ccf29b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55668ccf2ca0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55668ccf2b40 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55668ccf2bc0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55668ccf2df0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55668ccf2d60 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55668ccf2fc8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55668ccf2eb0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55668ccf2f30 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55668ccf3118 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55668ccf3088 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55668ccf3330 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55668ccf31d0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55668ccf3250 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55668ccfc6b0 <col:39> 'int' 0
|-CXXMethodDecl 0x55668ccf3550 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55668ccf33f0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55668ccf3470 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55668ccfc6d0 <col:48> 'int' 0
|-CXXMethodDecl 0x55668ccf3730 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55668ccf3610 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55668ccf3690 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55668ccfc6f0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55668ccf3800 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55668ccf38c0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55668ccf3980 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55668ccf3a40 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55668ccf3b00 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55668ccf3ca8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55668ccf3bb0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55668ccf3e28 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55668ccf3d60 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55668ccf4000 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55668ccf3ee8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55668ccf4178 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55668ccf40b8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55668ccf42c0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55668ccf4230 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55668ccf4410 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55668ccf4380 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55668ccf45e8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55668ccf44d0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55668ccf4550 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55668ccf47c8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55668ccf46b0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55668ccf4730 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55668ccf4918 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55668ccf4888 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55668ccf4b28 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55668ccf49d8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55668ccf4a58 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55668ccf4c88 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55668ccf4bf0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55668ccf4de0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55668ccf4d48 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55668ccf4e88 <col:57> "" ""
|-CXXMethodDecl 0x55668ccf4f98 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55668ccf4f08 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55668ccf50e8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55668ccf5058 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55668ccf5268 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55668ccf51a0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55668ccf5330 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55668ccf53f0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55668ccf54b0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55668ccf5550 <col:49> "" ""
|-CXXMethodDecl 0x55668ccf55e0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55668ccf56a0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55668ccf5790 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55668ccf5858 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55668ccf5918 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55668ccf59d8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55668ccf5ad0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55668ccf5b98 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55668ccf5c60 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55668ccf5e38 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55668ccf5d18 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55668ccf5d98 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55668ccf6060 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55668ccf5f00 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55668ccf5f80 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55668ccf6170 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55668ccf61d8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55668ccf6200 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55668ccf6318 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55668ccf63b8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55668ccf6418 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55668ccf6478 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55668ccf6528 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55668ccf6590 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55668ccf67c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55668ccf6818 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668ccf67a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55668ccf66b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55668ccf6660 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55668ccf66a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55668ccf6680 <col:32> 'int' 8
|-CXXRecordDecl 0x55668ccf6830 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668ccf6948 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55668ccf69f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55668ccf6a58 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55668ccf6ae8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55668ccfcb80 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55668ccfcfb8 <col:12>
| |-CXXConstructorDecl 0x55668ccfcc88 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55668ccfcd98 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55668ccf69f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55668ccff540 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55668ccff510 <col:12> 'const char *const' lvalue .data 0x55668ccf69f0
| | |     `-DeclRefExpr 0x55668ccff4f0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668ccfcd98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55668ccf6a58 'length' 'int'
| | | `-ImplicitCastExpr 0x55668ccff5d0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55668ccff5a0 <col:12> 'const int' lvalue .length 0x55668ccf6a58
| | |     `-DeclRefExpr 0x55668ccff580 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668ccfcd98 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55668ccf6ae8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55668ccff660 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55668ccff630 <col:12> 'String::memo_t *const' lvalue .memo 0x55668ccf6ae8
| | |     `-DeclRefExpr 0x55668ccff610 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668ccfcd98 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55668ccff6b8 <col:12>
| |-CXXConstructorDecl 0x55668ccfce38 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55668ccfce38
| | `-ParmVarDecl 0x55668ccfcf48 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55668cd024a0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55668cd0deb8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55668cd0dfc8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55668cd0e4e0 <col:12>
| |   |-BinaryOperator 0x55668cd0e2f8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55668cd0e2b0 <col:12> 'const char *' lvalue ->data 0x55668ccf69f0
| |   | | `-CXXThisExpr 0x55668cd0e2a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55668cd0e2e0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55668cd0e270 <col:12> 'const char *const' lvalue .data 0x55668ccf69f0
| |   |     `-DeclRefExpr 0x55668cd0e250 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668cd0dfc8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55668cd0e3c0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55668cd0e378 <col:12> 'int' lvalue ->length 0x55668ccf6a58
| |   | | `-CXXThisExpr 0x55668cd0e368 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55668cd0e3a8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55668cd0e338 <col:12> 'const int' lvalue .length 0x55668ccf6a58
| |   |     `-DeclRefExpr 0x55668cd0e318 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668cd0dfc8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55668cd0e488 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55668cd0e440 <col:12> 'String::memo_t *' lvalue ->memo 0x55668ccf6ae8
| |   | | `-CXXThisExpr 0x55668cd0e430 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55668cd0e470 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55668cd0e400 <col:12> 'String::memo_t *const' lvalue .memo 0x55668ccf6ae8
| |   |     `-DeclRefExpr 0x55668cd0e3e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55668cd0dfc8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55668cd0e4d0 <col:12>
| |     `-UnaryOperator 0x55668cd0e4b8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55668cd0e4a8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55668cd0e038 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55668cd0e038
|   `-ParmVarDecl 0x55668cd0e148 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55668ccf6b60 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55668ccf6da8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55668ccf6bc8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55668ccf6c48 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55668ccf6cc0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55668ccfcb40 <col:79, line:261:5>
|   |-BinaryOperator 0x55668ccfc7b8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55668ccfc750 <col:2, col:5> 'const char *' lvalue .data 0x55668ccf69f0
|   | | `-MemberExpr 0x55668ccfc720 <col:2> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|   | |   `-CXXThisExpr 0x55668ccfc710 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55668ccfc7a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55668ccfc780 <col:12> 'const char *' lvalue ParmVar 0x55668ccf6bc8 'data' 'const char *'
|   |-BinaryOperator 0x55668ccfc880 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55668ccfc818 <col:2, col:5> 'int' lvalue .length 0x55668ccf6a58
|   | | `-MemberExpr 0x55668ccfc7e8 <col:2> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|   | |   `-CXXThisExpr 0x55668ccfc7d8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55668ccfc868 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55668ccfc848 <col:14> 'int' lvalue ParmVar 0x55668ccf6c48 'length' 'int'
|   `-IfStmt 0x55668ccfcb28 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55668ccfc9a0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55668ccfc988 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55668ccfc968 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55668ccfc948 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55668ccfc8e0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|     |       | `-MemberExpr 0x55668ccfc8b0 <col:7> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|     |       |   `-CXXThisExpr 0x55668ccfc8a0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55668ccfc930 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55668ccfc910 <col:17> 'String::memo_t *' lvalue ParmVar 0x55668ccf6cc0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55668ccfcb00 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55668ccfcae8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668ccfc9f0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55668cce57d8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55668ccfca58 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55668ccf63b8
|         `-ImplicitCastExpr 0x55668ccfca40 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55668ccfca20 <col:27> 'String::memo_t *' lvalue ParmVar 0x55668ccf6cc0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55668ccf7058 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55668ccf6e78 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55668ccf6ef8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55668ccf6f70 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55668ccf6b60 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55668ccfcfc8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55668ccfd158 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55668ccfd0c0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55668ccfd030 <col:2> '<bound member function type>' ->assign_memo 0x55668ccf6da8
|     | `-ImplicitCastExpr 0x55668ccfd0f8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55668ccfd020 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55668ccfd110 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55668ccfd060 <col:14> 'const char *' lvalue ParmVar 0x55668ccf6e78 'data' 'const char *'
|     |-ImplicitCastExpr 0x55668ccfd128 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55668ccfd080 <col:20> 'int' lvalue ParmVar 0x55668ccf6ef8 'length' 'int'
|     `-ImplicitCastExpr 0x55668ccfd140 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55668ccfd0a0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55668ccf6f70 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55668ccf71e8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55668ccf7128 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55668ccfd3b0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55668ccfd330 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55668ccfd180 <col:2> '<bound member function type>' ->assign_memo 0x55668ccf6da8
|     | `-CXXThisExpr 0x55668ccfd170 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55668ccfd368 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55668ccfd200 <col:14, col:19> 'const char *' lvalue .data 0x55668ccf69f0
|     |   `-MemberExpr 0x55668ccfd1d0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55668ccf6b60
|     |     `-DeclRefExpr 0x55668ccfd1b0 <col:14> 'const String' lvalue ParmVar 0x55668ccf7128 'x' 'const String &'
|     |-ImplicitCastExpr 0x55668ccfd380 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55668ccfd280 <col:25, col:30> 'int' lvalue .length 0x55668ccf6a58
|     |   `-MemberExpr 0x55668ccfd250 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55668ccf6b60
|     |     `-DeclRefExpr 0x55668ccfd230 <col:25> 'const String' lvalue ParmVar 0x55668ccf7128 'x' 'const String &'
|     `-ImplicitCastExpr 0x55668ccfd398 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55668ccfd300 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|         `-MemberExpr 0x55668ccfd2d0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55668ccf6b60
|           `-DeclRefExpr 0x55668ccfd2b0 <col:38> 'const String' lvalue ParmVar 0x55668ccf7128 'x' 'const String &'
|-CXXMethodDecl 0x55668ccf72b0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55668ccfdd70 <col:31, line:278:5>
|   `-IfStmt 0x55668ccfdd58 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55668ccfd450 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55668ccfd438 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55668ccfd408 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|     |     `-MemberExpr 0x55668ccfd3d8 <col:6> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|     |       `-CXXThisExpr 0x55668ccfd3c8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55668ccfdd30 <col:15, line:277:2>
|       |-ParenExpr 0x55668ccfd900 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55668ccfd8d0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55668ccfd560 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55668ccfd548 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55668ccfd530 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55668ccfd4f0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55668ccf63b8
|       |   |       `-ImplicitCastExpr 0x55668ccfd4d8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55668ccfd4a8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|       |   |           `-MemberExpr 0x55668ccfd478 <col:27> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|       |   |             `-CXXThisExpr 0x55668ccfd468 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55668ccfd5c0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55668ccfd5a0 <col:54> 'int' 0
|       |   `-CallExpr 0x55668ccfd830 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55668ccfd818 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55668ccfd798 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55668ccfd870 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55668ccfd6a8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55668ccfd888 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55668ccfd6d8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55668ccfd8a0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55668ccfd710 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55668ccfd8b8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55668ccfd780 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55668ccfd768 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55668ccfd730 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55668ccfdc50 <line:274:6, line:275:22>
|       | |-CallExpr 0x55668ccfdb10 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55668ccfdaf8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55668ccfda70 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55668cce6c20 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55668ccfda40 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55668ccf63b8
|       | |   `-ImplicitCastExpr 0x55668ccfda28 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55668ccfd9f8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|       | |       `-MemberExpr 0x55668ccfd9c8 <col:40> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|       | |         `-CXXThisExpr 0x55668ccfd9b8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55668ccfdc10 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55668ccfdbf8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55668ccfdb38 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55668ccfba90 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55668ccfdc38 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55668ccfdb98 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|       |       `-MemberExpr 0x55668ccfdb68 <col:15> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|       |         `-CXXThisExpr 0x55668ccfdb58 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55668ccfdd10 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55668ccfdca8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55668ccf6ae8
|         | `-MemberExpr 0x55668ccfdc78 <col:6> 'String::rep_t' lvalue ->_r 0x55668ccf6b60
|         |   `-CXXThisExpr 0x55668ccfdc68 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55668ccfdcf8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55668ccfdcd8 <col:16> 'int' 0
|-CXXMethodDecl 0x55668ccf7548 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55668ccf7368 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55668ccf73e8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55668ccf7460 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55668ccf7620 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55668ccf7870 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55668ccf76d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55668ccf7758 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55668ccf77d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55668ccf7a58 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55668ccf7940 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55668ccf79c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55668ccf7b58 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55668ccfde48 <col:41, line:286:5>
|   `-ReturnStmt 0x55668ccfde38 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55668ccfde08 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55668ccfddd0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55668ccfddb8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55668ccfdd98 <col:46> 'int' 1
|-CXXMethodDecl 0x55668ccf7df8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55668ccf7c10 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55668ccf7c90 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55668ccf7d10 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55668ccfba90 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55668ccf7ec0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55668ccfbb60 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55668ccfbd30 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55668ccfbc18 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55668ccfbc98 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55668ccfbdf0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55668ccfbeb8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55668ccfbfb8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55668ccfc030 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55668ccfc0a8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55668ccfc110 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55668ccfc210 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55668ccfc260 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668ccfc1f0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55668ccfc1d0 <col:22> 'int' 14
|-CXXMethodDecl 0x55668ccfc478 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55668ccfc290 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55668ccfc310 <col:38> col:41 'int'
| `-ParmVarDecl 0x55668ccfc390 <col:43> col:46 'int'
|-FriendDecl 0x55668ccfc580 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55668ccfc610 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668d01de40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55668d01e018 prev 0x55668d01de40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55668d01e0a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55668d01e0d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d01fa30 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55668d01f9e0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55668d01f9c0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55668d01e2e8 'type'
|     `-SubstTemplateTypeParmType 0x55668d01e2b0 'String' sugar
|       |-TemplateTypeParmType 0x55668ccb2020 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccb1fd0 'T'
|       `-RecordType 0x55668cced800 'String'
|         `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d01fae8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55668d01fab0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55668d01fa90 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55668d01fa30 'type'
|     `-ElaboratedType 0x55668d01f9e0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55668d01f9c0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55668d01e2e8 'type'
|         `-SubstTemplateTypeParmType 0x55668d01e2b0 'String' sugar
|           |-TemplateTypeParmType 0x55668ccb2020 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55668ccb1fd0 'T'
|           `-RecordType 0x55668cced800 'String'
|             `-CXXRecord 0x55668cced770 'String'
|-CXXMethodDecl 0x55668d01fc68 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55668d01fb78 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55668d01fd58 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55668d01fe38 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55668d01fe38
|-CXXMethodDecl 0x55668d020108 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55668d020010 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55668d020348 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55668d0201c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668d020238 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d020518 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55668d020408 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668d020480 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d020678 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55668d020748 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55668d020998 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55668d020808 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55668d020880 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d020bf8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55668d020a68 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55668d020ae0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d020db8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55668d020cc8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d020f78 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55668d020e80 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d021030 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668d0210e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668d021318 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55668d021190 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668d021208 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55668d0215b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55668d0214c0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55668d021680 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55668d0216d0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55668d021720 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cf25fb0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55668d01bb98 prev 0x55668cf25fb0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55668d01ddb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55668d01dd60 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55668d01dd40 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55668d01dbf0 'type'
|     `-SubstTemplateTypeParmType 0x55668d01da80 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55668cc87dd0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55668cc87d78 'F'
|       `-RecordType 0x55668d01d6e0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55668d01d600 'typed_array_memory'
|-FieldDecl 0x55668d021770 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55668d0217c0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55668d0217f8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|   |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|   `-RecordType 0x55668cced800 'String'
|     `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d021888 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55668d021850 'String &'
|   `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cced800 'String'
|       `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d021918 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55668d0218e0 'const String &'
|   `-QualType 0x55668d01bc31 'const String' const
|     `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cced800 'String'
|         `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d0219a8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55668d021970 'String *'
|   `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cced800 'String'
|       `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d021a38 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55668d021a00 'const String *'
|   `-QualType 0x55668d01bc31 'const String' const
|     `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cced800 'String'
|         `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d022690 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55668d022640 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55668d022620 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55668d022558 'type'
|     `-LValueReferenceType 0x55668d022520 'const String &'
|       `-QualType 0x55668d0222c1 'const String' const
|         `-SubstTemplateTypeParmType 0x55668d0222c0 'String' sugar
|           |-TemplateTypeParmType 0x55668cc91d20 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55668cc91cc8 'T'
|           `-RecordType 0x55668cced800 'String'
|             `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d0226f8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55668d0218e0 'const String &'
|   `-QualType 0x55668d01bc31 'const String' const
|     `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cced800 'String'
|         `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d022750 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d0227b8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55668d021970 'String *'
|   `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-RecordType 0x55668cced800 'String'
|       `-CXXRecord 0x55668cced770 'String'
|-TypedefDecl 0x55668d022820 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55668d021a00 'const String *'
|   `-QualType 0x55668d01bc31 'const String' const
|     `-SubstTemplateTypeParmType 0x55668d01bc30 'String' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-RecordType 0x55668cced800 'String'
|         `-CXXRecord 0x55668cced770 'String'
|-EnumDecl 0x55668d022878 <line:134:5> col:5
| `-EnumConstantDecl 0x55668d022970 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55668d022950 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55668ccc09c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55668ccc09a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55668ccc0980 <col:40> 'int' 1
|-CXXConstructorDecl 0x55668d0229f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55668d022c88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d022ab0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668d022b50 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55668d022f18 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55668d022e00 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55668d0231d8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55668d0230c0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55668d0234f0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55668d0233d0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55668d023800 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55668d0236e0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55668d023af0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d023938 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668d0239b0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55668d023c18 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55668d023cc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d023d20 <col:30> Inherited
|-CXXMethodDecl 0x55668d023d68 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55668d023e18 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d023e70 <col:30> Inherited
|-CXXMethodDecl 0x55668d023f38 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55668d023fe8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d024040 <col:30> Inherited
|-CXXMethodDecl 0x55668d024088 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55668d024138 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d024190 <col:30> Inherited
|-CXXMethodDecl 0x55668d0241d8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55668d024288 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d0242e0 <col:30> Inherited
|-CXXMethodDecl 0x55668d024328 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55668d0243d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d024430 <col:30> Inherited
|-CXXMethodDecl 0x55668d024458 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668d024508 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668d0245b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55668d024778 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d024668 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668d0246e0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55668d0248c8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55668d024838 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d024a78 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55668d024980 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668d024b30 <col:20>
| `-OptimizeNoneAttr 0x55668d024b88 <col:30>
|-CXXMethodDecl 0x55668d024ca8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55668d024bb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668d024d60 <col:20>
| `-OptimizeNoneAttr 0x55668d024db8 <col:30>
|-CXXMethodDecl 0x55668d024e70 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668d024de0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d024fb8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668d024f28 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d0250e8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55668d0251e8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55668d0252b8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55668d026430 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55668d026570 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668d0264e0 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d0266b8 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668d026628 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d026800 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55668d026770 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668d0268b8 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55668d0269b8 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55668d026928 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668d026a70 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55668d026b28 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55668d026c28 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55668d026da8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55668d026ce8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55668d027538 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55668d026e60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55668d027498 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55668d027398 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55668d027618 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668d027768 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55668d0276d8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55668d027820 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55668d027a68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d0278e0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55668d027958 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55668d027bf8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55668d027b38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55668d027e08 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55668d027cc0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55668d027d38 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55668d027ec8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55668d028128 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55668d028030 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55668d0281f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55668d0281f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cedc908 prev 0x55668d0337f8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cedca00 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55668cedca90 <col:22, col:28> col:22 public
|-EnumDecl 0x55668cedcab8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55668cedcbd8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedcbb8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55668cedcba0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55668cedcb80 <col:14> 'int' 999
| |-EnumConstantDecl 0x55668cedcc80 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedcc60 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55668cedcc48 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55668cedcc28 <col:14> 'int' 1
| |-EnumConstantDecl 0x55668cedcd10 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedccf0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55668cedccd0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55668cedcda0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedcd80 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55668cedcd60 <col:13> 'int' 1
| |-EnumConstantDecl 0x55668cedce30 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedce10 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55668cedcdf0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55668cedcec0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedcea0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55668cedce80 <col:13> 'int' 3
| |-EnumConstantDecl 0x55668cedcf50 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedcf30 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55668cedcf10 <col:15> 'int' 4
| |-EnumConstantDecl 0x55668cedcfe0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedcfc0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55668cedcfa0 <col:14> 'int' 5
| |-EnumConstantDecl 0x55668cedd070 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55668cedd050 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55668cedd030 <col:12> 'int' 6
| `-EnumConstantDecl 0x55668cedd100 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55668cedd0e0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55668cedd0c0 <col:13> 'int' 7
|-VarDecl 0x55668cedd170 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55668cedd1f8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55668cedd280 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55668cedd308 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55668cedd390 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55668cedd418 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55668cedd4a0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55668cedd528 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55668cedd5b0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55668cedd638 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55668cedd6c0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55668cedd7c0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55668d0b0bd8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55668d0b1368 <line:128:13> 'int' 0
| `-CompoundStmt 0x55668d0b13d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55668cedd8b0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55668d0b13e8 <col:29, line:132:5>
|-CXXMethodDecl 0x55668cedda68 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55668cedd9a0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55668ceddb30 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55668ceddc18 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55668d0b1440 <col:44, line:161:5>
|   `-ReturnStmt 0x55668d0b1430 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55668d0b1418 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55668d0b13f8 <col:9> 'ErrorHandler *' lvalue Var 0x55668d0b0c38 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55668ceddd58 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55668ceddcc8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55668cedde20 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55668d0b14a0 <col:43, line:173:5>
|   `-ReturnStmt 0x55668d0b1490 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55668d0b1478 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55668d0b1458 <col:9> 'ErrorHandler *' lvalue Var 0x55668d0b0cb0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55668cedded8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55668ceddf58 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55668cede068 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55668ceddfd8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55668cede1b8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55668cede128 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55668cede310 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55668cede278 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55668cede468 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55668cede3d0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55668cede5c0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55668cede528 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55668cede7d0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55668cede678 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55668cede6f8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55668cede9a8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55668cede890 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55668cede910 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55668cedebc8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55668cedea68 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55668cedeae8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55668cededa8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55668cedec88 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55668ceded08 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55668cedef88 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55668cedee68 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55668cedeee8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55668d0ad240 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55668cedf048 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55668d0ad410 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55668d0ad2f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55668d0ad370 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55668d0b16f8 <col:57, line:234:5>
|   `-ReturnStmt 0x55668d0b16e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55668d0b16d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55668d0b1678 <col:9, col:41> 'int'
|         |-MemberExpr 0x55668d0b1648 <col:9> '<bound member function type>' ->xmessage 0x55668d0ad240
|         | `-CXXThisExpr 0x55668d0b1638 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55668d0b16b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55668d0b16a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55668d0b1618 <col:18, col:40> 'String' (CXXTemporary 0x55668d0b1618)
|               `-CallExpr 0x55668d0b15e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55668d0b15c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55668d0b1540 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55668d0af408 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55668d0b1560 <col:31> 'const String' lvalue ParmVar 0x55668d0ad370 'str' 'const String &'
|                 `-DeclRefExpr 0x55668d0b1580 <col:36> 'const String' lvalue ParmVar 0x55668d0ad2f8 'anno' 'const String &'
|-CXXMethodDecl 0x55668d0ad6f0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55668d0ad4d0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55668d0ad550 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55668d0ad5c8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55668d0b1988 <col:68, line:243:5>
|   `-ReturnStmt 0x55668d0b1978 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55668d0b1960 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55668d0b1900 <col:9, col:41> 'int'
|         |-MemberExpr 0x55668d0b18d0 <col:9> '<bound member function type>' ->xmessage 0x55668d0ad410
|         | `-CXXThisExpr 0x55668d0b18c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55668d0b1798 <col:18> 'const String' lvalue ParmVar 0x55668d0ad4d0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55668d0b1948 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55668d0b1930 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55668d0b18a0 <col:24, col:40> 'String' (CXXTemporary 0x55668d0b18a0)
|               `-CXXMemberCallExpr 0x55668d0b1838 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55668d0b17c8 <col:24> '<bound member function type>' ->vformat 0x55668d0ae8d0
|                 | `-CXXThisExpr 0x55668d0b17b8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55668d0b1868 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55668d0b17f8 <col:32> 'const char *' lvalue ParmVar 0x55668d0ad550 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55668d0b1880 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55668d0b1818 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55668d0ad5c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55668d0ad990 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55668d0ad7b8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55668d0ad830 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55668d0ad8a8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55668d0b1cc8 <col:23, line:254:5>
|   `-ReturnStmt 0x55668d0b1cb8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55668d0b1ca0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55668d0b1c40 <col:9, col:71> 'int'
|         |-MemberExpr 0x55668d0b1c10 <col:9> '<bound member function type>' ->xmessage 0x55668d0ad410
|         | `-CXXThisExpr 0x55668d0b1c00 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55668d0b1c88 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55668d0b1c70 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55668d0b1bc0 <col:18, col:65> 'String' (CXXTemporary 0x55668d0b1bc0)
|         |     `-CallExpr 0x55668d0b1b58 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55668d0b1b40 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55668d0b1a28 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55668d0af408 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55668d0b1a48 <col:31> 'const String' lvalue ParmVar 0x55668d0ad830 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55668d0b1ba0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55668d0b1b88 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55668d0b1b20 <col:37, col:64> 'String' (CXXTemporary 0x55668d0b1b20)
|         |             `-CallExpr 0x55668d0b1af0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55668d0b1ad8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55668d0b1a68 <col:37> 'String (const String &)' lvalue CXXMethod 0x55668d0afa58 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55668d0b1a88 <col:56> 'const String' lvalue ParmVar 0x55668d0ad7b8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55668d0b1be0 <col:68> 'const String' lvalue ParmVar 0x55668d0ad8a8 'str' 'const String &'
|-CXXMethodDecl 0x55668d0add10 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55668d0ada58 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55668d0adad0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55668d0adb50 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55668d0adbc8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55668d0b1f80 <col:34, line:267:5>
|   `-ReturnStmt 0x55668d0b1f70 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55668d0b1f58 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55668d0b1ef0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55668d0b1ec0 <col:9> '<bound member function type>' ->xmessage 0x55668d0ad990
|         | `-CXXThisExpr 0x55668d0b1eb0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55668d0b1d68 <col:18> 'const String' lvalue ParmVar 0x55668d0ada58 'landmark' 'const String &'
|         |-DeclRefExpr 0x55668d0b1d88 <col:28> 'const String' lvalue ParmVar 0x55668d0adad0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55668d0b1f40 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55668d0b1f28 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55668d0b1e90 <col:34, col:50> 'String' (CXXTemporary 0x55668d0b1e90)
|               `-CXXMemberCallExpr 0x55668d0b1e28 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55668d0b1db8 <col:34> '<bound member function type>' ->vformat 0x55668d0ae8d0
|                 | `-CXXThisExpr 0x55668d0b1da8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55668d0b1e58 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55668d0b1de8 <col:42> 'const char *' lvalue ParmVar 0x55668d0adb50 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55668d0b1e70 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55668d0b1e08 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55668d0adbc8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55668d0ade20 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55668d0b2000 <col:25, line:288:5>
|   `-ReturnStmt 0x55668d0b1ff0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55668d0b1fd8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55668d0b1fa8 <col:9> 'const int' lvalue ->_nerrors 0x55668d0b0bd8
|         `-CXXThisExpr 0x55668d0b1f98 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55668d0ae030 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55668d0aded8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55668d0adf58 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55668d0ae318 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55668d0ae0f8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55668d0ae178 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55668d0ae1f0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55668d0ae4b0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55668d0ae3e8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55668d0ae6f8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55668d0ae570 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55668d0ae5e8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55668d0b2260 <col:58, line:357:5>
|   `-ReturnStmt 0x55668d0b2250 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55668d0b2238 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55668d0b2208 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55668d0b21f0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55668d0b21d0 <col:9, col:29> 'String' (CXXTemporary 0x55668d0b21d0)
|             `-CallExpr 0x55668d0b2160 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55668d0b2148 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55668d0b20c8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55668d0ae318 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55668d0b2068 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55668d0b2198 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55668d0b2088 <col:21> 'const char *' lvalue ParmVar 0x55668d0ae570 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55668d0b21b0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55668d0b20a8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55668d0ae5e8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55668d0ae8d0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55668d0ae7c0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55668d0ae838 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55668d0aea28 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55668d0ae998 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55668d0aeb70 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55668d0aeae0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55668d0aee10 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55668d0aec28 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55668d0aeca8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55668d0aed20 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55668d0aef70 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55668d0aeee0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55668d0b2378 <col:37, line:441:5>
|   `-IfStmt 0x55668d0b2360 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55668d0b22e8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55668d0b22b8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55668d0b2278 <col:6> 'int' lvalue ParmVar 0x55668d0aeee0 'level' 'int'
|     | `-ImplicitCastExpr 0x55668d0b22d0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55668d0b2298 <col:15> 'ErrorHandler::Level' EnumConstant 0x55668cedcec0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55668d0b2348 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55668d0b2318 <col:8> 'int' lvalue ->_nerrors 0x55668d0b0bd8
|         `-CXXThisExpr 0x55668d0b2308 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55668d0af038 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55668d0b2410 <col:26, line:448:5>
|   `-BinaryOperator 0x55668d0b23f0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55668d0b23a0 <col:2> 'int' lvalue ->_nerrors 0x55668d0b0bd8
|     | `-CXXThisExpr 0x55668d0b2390 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55668d0b23d0 <col:13> 'int' 0
|-CXXMethodDecl 0x55668d0af200 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55668d0af0f0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55668d0af168 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55668d0af408 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55668d0af2c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55668d0af338 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55668d0af6b8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55668d0af4c8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55668d0af548 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55668d0af5c8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55668d0af770 <col:59> 0 0
|-CXXMethodDecl 0x55668d0af908 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55668d0af7e8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55668d0af868 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55668d0b2a80 <col:70, line:534:5>
|   |-DeclStmt 0x55668d0b2580 <line:528:2, col:20>
|   | |-VarDecl 0x55668d0b2438 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55668d0b24a0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55668d0b24d8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55668d0b2540 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55668d0b2650 <line:529:2, col:23>
|   | `-VarDecl 0x55668d0b25b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55668d0b2638 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55668d0b2618 <col:18> 'const char *' lvalue ParmVar 0x55668d0af7e8 'begin' 'const char *'
|   |-DoStmt 0x55668d0b2a18 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55668d0b2948 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55668d0b2930 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55668d0b2910 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55668d0b2668 <col:6> 'const char *' lvalue Var 0x55668d0b25b0 'x' 'const char *'
|   | |     `-CallExpr 0x55668d0b2860 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55668d0b2848 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55668d0b2800 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55668d0b10b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55668d0b28c8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55668d0b28b0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55668d0b2720 <col:20, col:27> 'String' (CXXTemporary 0x55668d0b2720)
|   | |       |     `-CXXTemporaryObjectExpr 0x55668d0b26e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55668d0b28e0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55668d0b2740 <col:30> 'const char *' lvalue Var 0x55668d0b25b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55668d0b28f8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55668d0b2760 <col:33> 'const char *' lvalue ParmVar 0x55668d0af868 'end' 'const char *'
|   | |       |-UnaryOperator 0x55668d0b27a0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55668d0b2780 <col:39> 'String' lvalue Var 0x55668d0b2438 'name' 'String'
|   | |       |-UnaryOperator 0x55668d0b27d8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55668d0b27b8 <col:46> 'String' lvalue Var 0x55668d0b24d8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55668d0b27f0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55668d0b2a00 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55668d0b29e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55668d0b29c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55668d0b2998 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|   |         `-ImplicitCastExpr 0x55668d0b2980 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55668d0b2960 <col:11> 'String' lvalue Var 0x55668d0b2438 'name' 'String'
|   `-ReturnStmt 0x55668d0b2a70 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55668d0b2a58 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55668d0b2a38 <col:9> 'const char *' lvalue Var 0x55668d0b25b0 'x' 'const char *'
|-CXXMethodDecl 0x55668d0afa58 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55668d0af9c8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55668d0b3088 <col:55, line:550:5>
|   `-IfStmt 0x55668d0b3060 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55668d0b2cc0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55668d0b2ca8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55668d0b2c90 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55668d0b2c70 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55668d0b2c40 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|     | |       `-DeclRefExpr 0x55668d0b2ae0 <col:6> 'const String' lvalue ParmVar 0x55668d0af9c8 'x' 'const String &'
|     | `-BinaryOperator 0x55668d0b2c20 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55668d0b2bf0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55668d0b2ba0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55668d0b2b88 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55668d0b2b40 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55668cd0a7a0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55668d0b2b00 <col:11> 'const String' lvalue ParmVar 0x55668d0af9c8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55668d0b2b20 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55668d0b2c08 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55668d0b2bd8 <col:19> 'char' 123
|     |-ReturnStmt 0x55668d0b2d30 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55668d0b2d00 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55668d0b2ce0 <col:13> 'const String' lvalue ParmVar 0x55668d0af9c8 'x' 'const String &'
|     `-IfStmt 0x55668d0b3038 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55668d0b2dc8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55668d0b2db0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55668d0b2d90 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55668d0b2d60 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |       `-DeclRefExpr 0x55668d0b2d40 <col:11> 'const String' lvalue ParmVar 0x55668d0af9c8 'x' 'const String &'
|       |-ReturnStmt 0x55668d0b2f50 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55668d0b2f38 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55668d0b2f08 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55668d0b2ef0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55668d0b2ed0 <col:13, col:29> 'String' (CXXTemporary 0x55668d0b2ed0)
|       |         `-CallExpr 0x55668d0b2e80 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55668d0b2e68 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55668d0b2de0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55668d0af200 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55668d0b2eb0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55668d0b2e00 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55668d0b2e20 <col:28> 'const String' lvalue ParmVar 0x55668d0af9c8 'x' 'const String &'
|       `-ReturnStmt 0x55668d0b3028 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55668d0b3010 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55668d0b2fe0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55668d0b2fc8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55668d0b2fa8 <col:13, col:20> 'String' (CXXTemporary 0x55668d0b2fa8)
|                 `-CXXTemporaryObjectExpr 0x55668d0b2f70 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55668d0afc20 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55668d0afb10 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55668d0afb88 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55668d0b1358 <col:71> 'bool' false
|-CXXRecordDecl 0x55668d0afcd0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55668d0affc8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55668d0aff60 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55668d0aff00 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55668d0afec0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55668cced800 'String'
|       | `-CXXRecord 0x55668cced770 'String'
|       |-BuiltinType 0x55668c9be580 'int'
|       `-DecayedType 0x55668d034840 '__va_list_tag *' sugar
|         |-TypedefType 0x55668d034810 'va_list' sugar
|         | |-Typedef 0x55668cbdf8c0 'va_list'
|         | `-TypedefType 0x55668cbdf870 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55668cb17498 '__gnuc_va_list'
|         |   `-TypedefType 0x55668cb17400 '__builtin_va_list' sugar
|         |     |-Typedef 0x55668c9ffd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55668c9ffce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55668c9bf2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55668c9bf238 '__va_list_tag'
|         `-PointerType 0x55668cbe5160 '__va_list_tag *'
|           `-RecordType 0x55668c9bf2d0 '__va_list_tag'
|             `-CXXRecord 0x55668c9bf238 '__va_list_tag'
|-EnumDecl 0x55668d0b0020 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55668d0b0120 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b0680 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b0100 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55668d0b00e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55668d0b01b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b0698 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b0190 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55668d0b0170 <col:21> 'int' 2
| |-EnumConstantDecl 0x55668d0b0240 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b06b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b0220 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55668d0b0200 <col:22> 'int' 4
| |-EnumConstantDecl 0x55668d0b02d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b06c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b02b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55668d0b0290 <col:17> 'int' 8
| |-EnumConstantDecl 0x55668d0b0360 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b06e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b0340 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55668d0b0320 <col:22> 'int' 16
| |-EnumConstantDecl 0x55668d0b03f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b06f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b03d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55668d0b03b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55668d0b0480 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b0710 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b0460 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55668d0b0440 <col:17> 'int' 64
| |-EnumConstantDecl 0x55668d0b0510 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b0728 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b04f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55668d0b04d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55668d0b05a0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55668d0b0740 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d0b0580 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55668d0b0560 <col:16> 'int' 256
| `-EnumConstantDecl 0x55668d0b0630 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55668d0b0758 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668d0b0610 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55668d0b05f0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55668d0b0968 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55668d0b0780 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55668d0b0820 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55668d0b0af0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55668d0b0a28 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55668d0b0b98 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55668d0b0bd8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55668d0b0c38 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55668d0b0cb0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55668d0b10b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55668d0b0d28 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55668d0b0da8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55668d0b0e28 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55668d0b0ea0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55668d0b0f18 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55668d0b0f90 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55668d0b11d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55668d0b11d8
| `-ParmVarDecl 0x55668d0b12e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55668d0b33e8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55668d0b33e8
  `-ParmVarDecl 0x55668d0b34f8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668d033888 prev 0x55668cee8a58 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668d033980 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55668d033a10 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55668d033b48 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55668d033a48 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55668d034f70 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55668d034f50 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55668d034ae8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55668d035000 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55668d034fc0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55668d033a48 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55668d034b50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55668d035080 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55668d035040 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55668d034bb0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55668d0350c0 <col:54> 'bool' false
| `-CompoundStmt 0x55668d0351c8 <col:61, line:38:5>
|   `-BinaryOperator 0x55668d0351a8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55668d035140 <col:9> 'const Element *' lvalue ->_context 0x55668d034a88
|     | `-CXXThisExpr 0x55668d035130 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55668d035190 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55668d035170 <col:20> 'int' 0
|-CXXConstructorDecl 0x55668d033d58 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55668d033c08 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55668d033c80 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55668d034fa8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55668d034f88 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55668d034a88 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55668d035220 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55668d0351e0 <col:20> 'const Element *' lvalue ParmVar 0x55668d033c08 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55668d034ae8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55668d0352a0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55668d035260 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55668d033c80 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55668d034b50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55668d035320 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55668d0352e0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55668d034bb0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55668d035360 <col:73> 'bool' false
| `-CompoundStmt 0x55668d0353d8 <col:80, line:46:5>
|-CXXMethodDecl 0x55668d033e88 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55668d035450 <col:36, line:51:5>
|   `-ReturnStmt 0x55668d035440 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55668d035428 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55668d0353f8 <col:16> 'const Element *const' lvalue ->_context 0x55668d034a88
|         `-CXXThisExpr 0x55668d0353e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55668d033f78 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55668d0354d0 <col:32, line:57:5>
|   `-ReturnStmt 0x55668d0354c0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55668d0354a8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55668d035478 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55668d034ae8
|         `-CXXThisExpr 0x55668d035468 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55668d034038 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55668d0341c0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55668d0340f0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55668d034310 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55668d034280 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55668d034460 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55668d0343d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55668d034668 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55668d034518 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55668d034590 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55668d034998 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55668d034728 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55668d0347a8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55668d034870 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55668d034a50 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55668d034a88 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55668d034ae8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55668d034b50 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55668d034bb0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55668d034c00 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55668d034c00
| `-ParmVarDecl 0x55668d034d18 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55668d034db8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55668d034db8
| `-ParmVarDecl 0x55668d034ec8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55668d0bfa00 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668d058730 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55668d058908 prev 0x55668d058730 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55668d058998 <col:46, col:52> col:46 public
|-TypedefDecl 0x55668d0589c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d066ac0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55668d066a70 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55668d0653a0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55668d0652a0 'type'
|     `-TemplateSpecializationType 0x55668d065230 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55668d058be0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55668d058bc0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55668d058ba0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55668d065210 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55668d065130 'char_array'
|-TypedefDecl 0x55668d066b78 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55668d066b40 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55668d066b20 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55668d066ac0 'type'
|     `-ElaboratedType 0x55668d066a70 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55668d0653a0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55668d0652a0 'type'
|         `-TemplateSpecializationType 0x55668d065230 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55668d058be0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55668d058bc0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55668d058ba0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55668d065210 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55668d065130 'char_array'
|-CXXMethodDecl 0x55668d066cf8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55668d066c08 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55668d066de8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55668d066ec8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55668d067198 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55668d0670a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55668d0673d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55668d067250 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668d0672c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d0675a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55668d067498 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668d067510 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d067708 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55668d0677d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55668d067a28 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55668d067898 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55668d067910 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d067c88 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55668d067af8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55668d067b70 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d067e48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55668d067d58 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d068008 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55668d067f10 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d0680c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668d068170 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55668d0683a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55668d068220 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55668d068298 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55668d068648 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55668d068550 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55668d068710 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55668d068760 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55668d0687b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668d057348 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55668d057558 prev 0x55668d057348 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55668d0586a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55668d058650 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55668d058630 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55668d0584e0 'type'
|     `-SubstTemplateTypeParmType 0x55668d058300 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55668cc87650 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc875f8 'T'
|       `-RecordType 0x55668d057e50 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55668d057d68 'sized_array_memory'
|-FieldDecl 0x55668d068800 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55668d068850 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55668d068888 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|   |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|   `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d068918 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55668d0688e0 'int &'
|   `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d0689d8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55668d0689a0 'const int &'
|   `-QualType 0x55668d0575f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d068a68 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55668d068a30 'int *'
|   `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d068af8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55668d068ac0 'const int *'
|   `-QualType 0x55668d0575f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d0696e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55668d069690 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55668d069670 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55668d069600 'type'
|     `-SubstTemplateTypeParmType 0x55668d0693c0 'int' sugar
|       |-TemplateTypeParmType 0x55668cc92450 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668cc92400 'T'
|       `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d069748 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55668d0689a0 'const int &'
|   `-QualType 0x55668d0575f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d0697a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d069808 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55668d068a30 'int *'
|   `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|     |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|     `-BuiltinType 0x55668c9be580 'int'
|-TypedefDecl 0x55668d069870 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55668d068ac0 'const int *'
|   `-QualType 0x55668d0575f1 'const int' const
|     `-SubstTemplateTypeParmType 0x55668d0575f0 'int' sugar
|       |-TemplateTypeParmType 0x55668ccbf340 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55668ccbf2e8 'T'
|       `-BuiltinType 0x55668c9be580 'int'
|-EnumDecl 0x55668d0698c8 <line:134:5> col:5
| `-EnumConstantDecl 0x55668d0699c0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55668d0699a0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55668ccc09c8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55668ccc09a0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55668ccc0980 <col:40> 'int' 1
|-CXXConstructorDecl 0x55668d069a48 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55668d069c98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d069b00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668d069ba0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55668d069f58 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55668d069e40 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55668d06a218 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55668d06a100 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55668d06a560 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55668d06a440 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55668d06a870 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55668d06a750 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55668d06ab60 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d06a9a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668d06aa20 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55668d06ac88 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55668d06ad68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d06adc0 <col:30> Inherited
|-CXXMethodDecl 0x55668d06ae08 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55668d06aeb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d06af10 <col:30> Inherited
|-CXXMethodDecl 0x55668d06afd8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55668d06b088 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d06b0e0 <col:30> Inherited
|-CXXMethodDecl 0x55668d06b128 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55668d06b1d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d06b230 <col:30> Inherited
|-CXXMethodDecl 0x55668d06b278 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55668d06b328 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d06b380 <col:30> Inherited
|-CXXMethodDecl 0x55668d06b3c8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55668d06b478 <col:20> Inherited
| `-OptimizeNoneAttr 0x55668d06b4d0 <col:30> Inherited
|-CXXMethodDecl 0x55668d06b4f8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668d06b5a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55668d06b658 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55668d06b818 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d06b708 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55668d06b780 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55668d06b968 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55668d06b8d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d06bb18 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55668d06ba20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668d06bbd0 <col:20>
| `-OptimizeNoneAttr 0x55668d06bc28 <col:30>
|-CXXMethodDecl 0x55668d06bd48 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55668d06bc50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55668d06be00 <col:20>
| `-OptimizeNoneAttr 0x55668d06be58 <col:30>
|-CXXMethodDecl 0x55668d06bf10 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668d06be80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d06c058 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668d06bfc8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d06c188 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55668d06c2b8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55668d06c388 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55668d06c458 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55668d06c598 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55668d06c508 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d06c6e0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55668d06c650 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55668d06c828 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55668d06c798 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668d06c8e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55668d06c9e0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55668d06c950 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55668d06ca98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55668d06cb58 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55668d06cc58 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55668d06cdd8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55668d06cd18 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55668d06fb98 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55668d06ce90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55668d06faf8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55668d06f9f8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55668d06fc78 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55668d06fdc8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55668d06fd38 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55668d06fe80 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55668d0700c8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55668d06ff40 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55668d06ffb8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55668d070288 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55668d070198 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55668d0704d8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55668d070350 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55668d0703c8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55668d070598 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55668d0707f8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55668d070700 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55668d0708c8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668d0554b8 prev 0x55668d03be58 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668d0555b0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55668d0556a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55668d0812d0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55668d055790 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55668d0812e0 <col:25, line:830:9>
|-CXXMethodDecl 0x55668d055890 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55668d055940 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55668d0559e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55668d0559e8
| `-ParmVarDecl 0x55668d055af8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55668d0562b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55668d0562b8
  `-ParmVarDecl 0x55668d0563c8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668d03bc68 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55668d03bdc8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55668d03be58 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55668d03bf10 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55668d03c018 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55668d03bf48 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55668d071e88 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55668d071e68 <col:31> 'int' 0
|-CXXConstructorDecl 0x55668d03c338 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55668d03c1b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55668d03c228 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55668d071ec0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55668d071ea0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55668d03c510 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55668d03c400 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55668d03c478 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55668d071ef8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55668d071ed8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55668d03c8c8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55668d03c6b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55668d03c728 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55668d03c7a0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55668d071f30 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55668d071f10 <col:31> 'int' 0
|-CXXConstructorDecl 0x55668d03ca88 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55668d03c9c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55668d03cb80 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55668d03cd68 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55668d03cc70 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55668d03ce58 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55668d0722e0 <col:24, line:291:5>
|   `-ReturnStmt 0x55668d0722d0 <line:290:9, col:79>
|     `-BinaryOperator 0x55668d0722b0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55668d072188 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55668d0720e0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55668d0720c0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55668d071fb8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55668d071fa0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55668d071f88 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55668d071f58 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55668d0572e0
|       | |   |       `-CXXThisExpr 0x55668d071f48 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55668d0720a8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55668d072090 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55668d072058 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55668d072028 <col:28, col:35> '<bound member function type>' ->size 0x55668d024458
|       | |           `-ImplicitCastExpr 0x55668d072078 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55668d072010 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55668d071fe0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55668d0572e0
|       | |                 `-CXXThisExpr 0x55668d071fd0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55668d072170 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55668d072158 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55668d072140 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55668d072110 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55668d070a10
|       |         `-CXXThisExpr 0x55668d072100 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55668d072290 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55668d072278 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55668d072260 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55668d072220 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55668d072208 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55668d0721b8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55668d070ac0
|         |     |   `-CXXThisExpr 0x55668d0721a8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55668d0721e8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55668d072240 <col:79> 'int' 0
|-CXXMethodDecl 0x55668d03cf18 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55668d0724b8 <col:32, line:296:5>
|   `-ReturnStmt 0x55668d0724a8 <line:295:9, col:49>
|     `-BinaryOperator 0x55668d072488 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55668d072368 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55668d072350 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55668d072338 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55668d072308 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55668d070a10
|       |       `-CXXThisExpr 0x55668d0722f8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55668d072468 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55668d072450 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55668d072438 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55668d0723f8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55668d0723e0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55668d072390 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55668d070ac0
|         |     |   `-CXXThisExpr 0x55668d072380 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55668d0723c0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55668d072418 <col:49> 'int' 0
|-CXXMethodDecl 0x55668d03d008 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55668d0726c8 <col:19, line:306:5>
|   |-IfStmt 0x55668d0725e8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55668d072528 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55668d072510 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55668d0724e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55668d0572e0
|   | |     `-CXXThisExpr 0x55668d0724d0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55668d0725c8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55668d072598 <col:13, col:20> '<bound member function type>' ->clear 0x55668d027ec8
|   |     `-ImplicitCastExpr 0x55668d072580 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55668d072550 <col:13> 'Vector<String> *' lvalue ->_conf 0x55668d0572e0
|   |         `-CXXThisExpr 0x55668d072540 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55668d072670 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55668d072640 <col:9, col:16> '<bound member function type>' .clear 0x55668d070598
|   |   `-MemberExpr 0x55668d072610 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55668d0709b0
|   |     `-CXXThisExpr 0x55668d072600 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55668d0726b8 <line:305:9, col:17>
|     `-UnaryOperator 0x55668d0726a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668d072690 <col:17> 'Args *' this
|-CXXMethodDecl 0x55668d03d288 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55668d03d190 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55668d03d408 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55668d03d340 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55668d03d788 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55668d03d4b0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55668d03d6e8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55668d03d558 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55668d03d5d0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55668d0729f0 <col:67, line:327:5>
|     |-WhileStmt 0x55668d0729a0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55668d0727b8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55668d072730 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55668cfeeca0 0x55668cee0f28 0x55668cd2a508 0x55668cd2a1e0 0x55668cd1a9b0 0x55668cd1a660 0x55668cd19f50 0x55668ccec8c0 0x55668cc79d90
|     | | |-DeclRefExpr 0x55668d0726f0 <col:16> 'Iter' lvalue ParmVar 0x55668d03d558 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55668d072710 <col:25> 'Iter' lvalue ParmVar 0x55668d03d5d0 'end' 'Iter'
|     | `-CompoundStmt 0x55668d072980 <col:30, line:325:9>
|     |   |-CallExpr 0x55668d072920 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55668d072800 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55668d0728f0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55668d072880 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|     |   |   `-DeclRefExpr 0x55668d072860 <col:24> 'Iter' lvalue ParmVar 0x55668d03d558 'begin' 'Iter'
|     |   `-UnaryOperator 0x55668d072968 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55668d072948 <col:15> 'Iter' lvalue ParmVar 0x55668d03d558 'begin' 'Iter'
|     `-ReturnStmt 0x55668d0729e0 <line:326:9, col:17>
|       `-UnaryOperator 0x55668d0729c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d0729b8 <col:17> 'Args *' this
|-CXXMethodDecl 0x55668d03d890 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55668d03d800 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55668d03d9d8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55668d03d948 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55668d03daa0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55668d072ad0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55668d072a70 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55668d072a20 <col:9> '<bound member function type>' ->reset_from 0x55668d070e38
|   | | `-CXXThisExpr 0x55668d072a10 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55668d072a50 <col:20> 'int' 0
|   `-ReturnStmt 0x55668d072ac0 <line:352:9, col:17>
|     `-UnaryOperator 0x55668d072aa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668d072a98 <col:17> 'Args *' this
|-VarDecl 0x55668d03db58 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55668d03dbc0 <col:38> 'int' 1
|-VarDecl 0x55668d03dc50 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55668d03dcb8 <col:39> 'int' 2
|-VarDecl 0x55668d03dd48 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55668d03ddb0 <col:39> 'int' 4
|-VarDecl 0x55668d03de40 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55668d03dea8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55668d03e228 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55668d03df20 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55668d03e188 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55668d03dfd0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55668d03e078 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x55668d072c28 <col:43, line:371:5>
| |   `-ReturnStmt 0x55668d072c18 <line:370:9, col:34>
| |     `-CallExpr 0x55668d072be0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55668d072b00 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55668d072b80 <col:21> 'const char *' lvalue ParmVar 0x55668d03dfd0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x55668d072ba0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x55668d072bc0 <col:33> 'T' lvalue ParmVar 0x55668d03e078 'x' 'T &'
| |-CXXMethodDecl 0x55668d0c0398 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x55668d0c01b8 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x55668d0c0288 <col:37, col:40> col:40 x 'bool &'
| `-CXXMethodDecl 0x55668d0c07f8 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55668d0c0650 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x55668d0c0728 <col:37, col:40> col:40 x 'int &'
|-FunctionTemplateDecl 0x55668d03e558 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55668d03e290 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d03e4b8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55668d03e340 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d03e3e8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55668d072d78 <col:45, line:375:5>
|     `-ReturnStmt 0x55668d072d68 <line:374:9, col:42>
|       `-CallExpr 0x55668d072d30 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d072c50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d072cd0 <col:21> 'const char *' lvalue ParmVar 0x55668d03e340 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d072cf0 <col:30> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int'
|         `-DeclRefExpr 0x55668d072d10 <col:41> 'T' lvalue ParmVar 0x55668d03e3e8 'x' 'T &'
|-FunctionTemplateDecl 0x55668d03e888 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55668d03e5c0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55668d03e7e8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55668d03e670 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55668d03e718 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55668d072ec8 <col:45, line:379:5>
| |   `-ReturnStmt 0x55668d072eb8 <line:378:9, col:43>
| |     `-CallExpr 0x55668d072e80 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55668d072da0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55668d072e20 <col:21> 'const char *' lvalue ParmVar 0x55668d03e670 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55668d072e40 <col:30> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int'
| |       `-DeclRefExpr 0x55668d072e60 <col:42> 'T' lvalue ParmVar 0x55668d03e718 'x' 'T &'
| `-CXXMethodDecl 0x55668d0bfe88 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55668d0bfca8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55668d0bfd78 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x55668d03ebb8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55668d03e8f0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d03eb18 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55668d03e9a0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d03ea48 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55668d0730c8 <col:46, line:383:5>
|     `-ReturnStmt 0x55668d0730b8 <line:382:9, col:55>
|       `-CallExpr 0x55668d073080 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d072ef0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d072f70 <col:21> 'const char *' lvalue ParmVar 0x55668d03e9a0 'keyword' 'const char *'
|         |-BinaryOperator 0x55668d073040 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55668d072ff0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55668d072fd0 <col:30> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55668d073028 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55668d073008 <col:42> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55668d073060 <col:54> 'T' lvalue ParmVar 0x55668d03ea48 'x' 'T &'
|-FunctionTemplateDecl 0x55668d03efb8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55668d03ec20 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d03ef18 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55668d03ecd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d03ed50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55668d03edf8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55668d073208 <col:54, line:388:5>
|     |-CallExpr 0x55668d073190 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d0730e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55668d073120 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55668d073130 <col:30> 'const char *' lvalue ParmVar 0x55668d03ecd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55668d073150 <col:39> 'int' lvalue ParmVar 0x55668d03ed50 'flags' 'int'
|     | `-DeclRefExpr 0x55668d073170 <col:46> 'T' lvalue ParmVar 0x55668d03edf8 'x' 'T &'
|     `-ReturnStmt 0x55668d0731f8 <line:387:9, col:17>
|       `-UnaryOperator 0x55668d0731e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d0731d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d03f468 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55668d03f028 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55668d03f0a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55668d03f3c8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55668d03f168 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d03f208 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55668d03f2a8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55668d073378 <col:74, line:403:5>
|     `-ReturnStmt 0x55668d073368 <line:402:9, col:56>
|       `-CallExpr 0x55668d073328 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d073238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0732a8 <col:28> 'const char *' lvalue ParmVar 0x55668d03f168 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d0732c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55668d0732e8 <col:40> 'T' lvalue ParmVar 0x55668d03f208 'x' 'T &'
|         `-DeclRefExpr 0x55668d073308 <col:43> 'const V' lvalue ParmVar 0x55668d03f2a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55668d03f8d8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55668d03f4d8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55668d03f558 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55668d03f838 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55668d03f618 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d03f6b8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55668d03f758 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55668d0734e0 <col:76, line:407:5>
|     `-ReturnStmt 0x55668d0734d0 <line:406:9, col:65>
|       `-CallExpr 0x55668d073490 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d0733a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d073410 <col:28> 'const char *' lvalue ParmVar 0x55668d03f618 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d073430 <col:37> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int'
|         |-DeclRefExpr 0x55668d073450 <col:49> 'T' lvalue ParmVar 0x55668d03f6b8 'x' 'T &'
|         `-DeclRefExpr 0x55668d073470 <col:52> 'const V' lvalue ParmVar 0x55668d03f758 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55668d03fe28 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55668d03f948 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55668d03f9c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55668d03fd88 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55668d03fa88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d03fb08 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55668d03fba8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55668d03fc48 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55668d073648 <col:85, line:412:5>
|     |-CallExpr 0x55668d0735c8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d0734f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55668d073538 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55668d073548 <col:37> 'const char *' lvalue ParmVar 0x55668d03fa88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55668d073568 <col:46> 'int' lvalue ParmVar 0x55668d03fb08 'flags' 'int'
|     | |-DeclRefExpr 0x55668d073588 <col:53> 'T' lvalue ParmVar 0x55668d03fba8 'x' 'T &'
|     | `-DeclRefExpr 0x55668d0735a8 <col:56> 'const V' lvalue ParmVar 0x55668d03fc48 'default_value' 'const V &'
|     `-ReturnStmt 0x55668d073638 <line:411:9, col:17>
|       `-UnaryOperator 0x55668d073620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d073610 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d0402b8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55668d03fea0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d03ff18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d040218 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d03ffd8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d040050 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0400f8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55668d0737c8 <col:53, line:425:5>
|     `-ReturnStmt 0x55668d0737b8 <line:424:9, col:42>
|       `-CallExpr 0x55668d073778 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d073678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0736f8 <col:21> 'const char *' lvalue ParmVar 0x55668d03ffd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d073718 <col:30> 'int' 0
|         |-DeclRefExpr 0x55668d073738 <col:33> 'P' lvalue ParmVar 0x55668d040050 'parser' 'P'
|         `-DeclRefExpr 0x55668d073758 <col:41> 'T' lvalue ParmVar 0x55668d0400f8 'x' 'T &'
|-FunctionTemplateDecl 0x55668d040708 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55668d040328 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d0403a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d040668 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d040468 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d0404e0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55668d040588 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55668d073940 <col:55, line:429:5>
|     `-ReturnStmt 0x55668d073930 <line:428:9, col:50>
|       `-CallExpr 0x55668d0738f0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d0737f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d073870 <col:21> 'const char *' lvalue ParmVar 0x55668d040468 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d073890 <col:30> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int'
|         |-DeclRefExpr 0x55668d0738b0 <col:41> 'P' lvalue ParmVar 0x55668d0404e0 'parser' 'P'
|         `-DeclRefExpr 0x55668d0738d0 <col:49> 'T' lvalue ParmVar 0x55668d040588 'x' 'T &'
|-FunctionTemplateDecl 0x55668d044338 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55668d040778 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d0407f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d044298 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d0440a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d044118 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0441b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55668d073ab8 <col:55, line:433:5>
|     `-ReturnStmt 0x55668d073aa8 <line:432:9, col:51>
|       `-CallExpr 0x55668d073a68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d073968 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0739e8 <col:21> 'const char *' lvalue ParmVar 0x55668d0440a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d073a08 <col:30> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int'
|         |-DeclRefExpr 0x55668d073a28 <col:42> 'P' lvalue ParmVar 0x55668d044118 'parser' 'P'
|         `-DeclRefExpr 0x55668d073a48 <col:50> 'T' lvalue ParmVar 0x55668d0441b8 'x' 'T &'
|-FunctionTemplateDecl 0x55668d044788 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55668d0443a8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d044428 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d0446e8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d0444e8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d044560 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55668d044608 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55668d073ce0 <col:56, line:437:5>
|     `-ReturnStmt 0x55668d073cd0 <line:436:9, col:63>
|       `-CallExpr 0x55668d073c90 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d073ae0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d073b60 <col:21> 'const char *' lvalue ParmVar 0x55668d0444e8 'keyword' 'const char *'
|         |-BinaryOperator 0x55668d073c30 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55668d073be0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55668d073bc0 <col:30> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55668d073c18 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55668d073bf8 <col:42> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55668d073c50 <col:54> 'P' lvalue ParmVar 0x55668d044560 'parser' 'P'
|         `-DeclRefExpr 0x55668d073c70 <col:62> 'T' lvalue ParmVar 0x55668d044608 'x' 'T &'
|-FunctionTemplateDecl 0x55668d044cb8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55668d0447f8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d044878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d044c18 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55668d044938 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d0449b8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55668d044a30 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55668d044ad8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55668d073e48 <col:64, line:442:5>
|     |-CallExpr 0x55668d073dc8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d073cf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55668d073d38 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55668d073d48 <col:30> 'const char *' lvalue ParmVar 0x55668d044938 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55668d073d68 <col:39> 'int' lvalue ParmVar 0x55668d0449b8 'flags' 'int'
|     | |-DeclRefExpr 0x55668d073d88 <col:46> 'P' lvalue ParmVar 0x55668d044a30 'parser' 'P'
|     | `-DeclRefExpr 0x55668d073da8 <col:54> 'T' lvalue ParmVar 0x55668d044ad8 'x' 'T &'
|     `-ReturnStmt 0x55668d073e38 <line:441:9, col:17>
|       `-UnaryOperator 0x55668d073e20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d073e10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d0452b8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55668d044d30 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d044da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55668d044e28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55668d045218 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55668d044ef0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d044f68 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55668d045008 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55668d0450d8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55668d073fe0 <col:84, line:458:5>
|     `-ReturnStmt 0x55668d073fd0 <line:457:9, col:64>
|       `-CallExpr 0x55668d073f88 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d073e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d073ee8 <col:28> 'const char *' lvalue ParmVar 0x55668d044ef0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d073f08 <col:37> 'int' 0
|         |-DeclRefExpr 0x55668d073f28 <col:40> 'P' lvalue ParmVar 0x55668d044f68 'parser' 'P'
|         |-DeclRefExpr 0x55668d073f48 <col:48> 'T' lvalue ParmVar 0x55668d045008 'x' 'T &'
|         `-DeclRefExpr 0x55668d073f68 <col:51> 'const V' lvalue ParmVar 0x55668d0450d8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55668d045838 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55668d045330 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d0453a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55668d045428 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55668d045798 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55668d0454f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d045568 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55668d045608 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55668d0456a8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55668d074170 <col:86, line:462:5>
|     `-ReturnStmt 0x55668d074160 <line:461:9, col:73>
|       `-CallExpr 0x55668d074118 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074008 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d074078 <col:28> 'const char *' lvalue ParmVar 0x55668d0454f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d074098 <col:37> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int'
|         |-DeclRefExpr 0x55668d0740b8 <col:49> 'P' lvalue ParmVar 0x55668d045568 'parser' 'P'
|         |-DeclRefExpr 0x55668d0740d8 <col:57> 'T' lvalue ParmVar 0x55668d045608 'x' 'T &'
|         `-DeclRefExpr 0x55668d0740f8 <col:60> 'const V' lvalue ParmVar 0x55668d0456a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55668d045e98 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55668d0458b0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d045928 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55668d0459a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55668d045df8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55668d045a70 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d045af0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55668d045b68 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55668d045c08 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55668d045ca8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55668d074300 <col:95, line:467:5>
|     |-CallExpr 0x55668d074278 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d074188 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55668d0741c8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55668d0741d8 <col:37> 'const char *' lvalue ParmVar 0x55668d045a70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55668d0741f8 <col:46> 'int' lvalue ParmVar 0x55668d045af0 'flags' 'int'
|     | |-DeclRefExpr 0x55668d074218 <col:53> 'P' lvalue ParmVar 0x55668d045b68 'parser' 'P'
|     | |-DeclRefExpr 0x55668d074238 <col:61> 'T' lvalue ParmVar 0x55668d045c08 'x' 'T &'
|     | `-DeclRefExpr 0x55668d074258 <col:64> 'const V' lvalue ParmVar 0x55668d045ca8 'default_value' 'const V &'
|     `-ReturnStmt 0x55668d0742f0 <line:466:9, col:17>
|       `-UnaryOperator 0x55668d0742d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d0742c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d046478 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55668d045f18 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d045f98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55668d046018 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55668d0463d8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55668d0460e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d046158 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0461f8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55668d046298 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55668d0744a8 <col:63, line:481:5>
|     `-ReturnStmt 0x55668d074498 <line:480:9, col:47>
|       `-CallExpr 0x55668d074450 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074330 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0743b0 <col:21> 'const char *' lvalue ParmVar 0x55668d0460e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d0743d0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55668d0743f0 <col:33> 'P' lvalue ParmVar 0x55668d046158 'parser' 'P'
|         |-DeclRefExpr 0x55668d074410 <col:41> 'T1' lvalue ParmVar 0x55668d0461f8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55668d074430 <col:45> 'T2' lvalue ParmVar 0x55668d046298 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55668d0469f8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55668d0464f0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d046568 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55668d0465e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55668d046958 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55668d0466b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d046728 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0467c8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55668d046868 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55668d074648 <col:65, line:485:5>
|     `-ReturnStmt 0x55668d074638 <line:484:9, col:55>
|       `-CallExpr 0x55668d0745f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d0744d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d074550 <col:21> 'const char *' lvalue ParmVar 0x55668d0466b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d074570 <col:30> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int'
|         |-DeclRefExpr 0x55668d074590 <col:41> 'P' lvalue ParmVar 0x55668d046728 'parser' 'P'
|         |-DeclRefExpr 0x55668d0745b0 <col:49> 'T1' lvalue ParmVar 0x55668d0467c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55668d0745d0 <col:53> 'T2' lvalue ParmVar 0x55668d046868 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55668d046f78 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55668d046a70 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d046ae8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55668d046b68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55668d046ed8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55668d046c30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d046ca8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55668d046d48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55668d046de8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55668d0747e8 <col:65, line:489:5>
|     `-ReturnStmt 0x55668d0747d8 <line:488:9, col:56>
|       `-CallExpr 0x55668d074790 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074670 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0746f0 <col:21> 'const char *' lvalue ParmVar 0x55668d046c30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d074710 <col:30> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int'
|         |-DeclRefExpr 0x55668d074730 <col:42> 'P' lvalue ParmVar 0x55668d046ca8 'parser' 'P'
|         |-DeclRefExpr 0x55668d074750 <col:50> 'T1' lvalue ParmVar 0x55668d046d48 'x1' 'T1 &'
|         `-DeclRefExpr 0x55668d074770 <col:54> 'T2' lvalue ParmVar 0x55668d046de8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55668d0474f8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55668d046ff0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d047068 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55668d0470e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55668d047458 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55668d0471b0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d047228 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0472c8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55668d047368 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55668d074a38 <col:66, line:493:5>
|     `-ReturnStmt 0x55668d074a28 <line:492:9, col:68>
|       `-CallExpr 0x55668d0749e0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d074890 <col:21> 'const char *' lvalue ParmVar 0x55668d0471b0 'keyword' 'const char *'
|         |-BinaryOperator 0x55668d074960 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55668d074910 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55668d0748f0 <col:30> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55668d074948 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55668d074928 <col:42> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55668d074980 <col:54> 'P' lvalue ParmVar 0x55668d047228 'parser' 'P'
|         |-DeclRefExpr 0x55668d0749a0 <col:62> 'T1' lvalue ParmVar 0x55668d0472c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55668d0749c0 <col:66> 'T2' lvalue ParmVar 0x55668d047368 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55668d047b58 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55668d047570 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d0475e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55668d047668 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55668d047ab8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55668d047730 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d0477b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55668d047828 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0478c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55668d047968 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55668d074bc8 <col:74, line:498:5>
|     |-CallExpr 0x55668d074b40 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d074a50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55668d074a90 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55668d074aa0 <col:30> 'const char *' lvalue ParmVar 0x55668d047730 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55668d074ac0 <col:39> 'int' lvalue ParmVar 0x55668d0477b0 'flags' 'int'
|     | |-DeclRefExpr 0x55668d074ae0 <col:46> 'P' lvalue ParmVar 0x55668d047828 'parser' 'P'
|     | |-DeclRefExpr 0x55668d074b00 <col:54> 'T1' lvalue ParmVar 0x55668d0478c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55668d074b20 <col:58> 'T2' lvalue ParmVar 0x55668d047968 'x2' 'T2 &'
|     `-ReturnStmt 0x55668d074bb8 <line:497:9, col:17>
|       `-UnaryOperator 0x55668d074ba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d074b90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d047eb8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55668d047bd8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d047e18 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55668d047c90 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d047d08 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55668d074d10 <col:52, line:509:5>
|     `-ReturnStmt 0x55668d074d00 <line:508:9, col:44>
|       `-CallExpr 0x55668d074cc8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d074c68 <col:26> 'const char *' lvalue ParmVar 0x55668d047c90 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d074c88 <col:35> 'int' 0
|         `-DeclRefExpr 0x55668d074ca8 <col:38> 'P' lvalue ParmVar 0x55668d047d08 'parser' 'P'
|-FunctionTemplateDecl 0x55668d0481b8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55668d047f20 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d048118 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55668d047fd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d048048 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55668d074e50 <col:54, line:513:5>
|     `-ReturnStmt 0x55668d074e40 <line:512:9, col:52>
|       `-CallExpr 0x55668d074e08 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074d38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d074da8 <col:26> 'const char *' lvalue ParmVar 0x55668d047fd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d074dc8 <col:35> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int'
|         `-DeclRefExpr 0x55668d074de8 <col:46> 'P' lvalue ParmVar 0x55668d048048 'parser' 'P'
|-FunctionTemplateDecl 0x55668d0484b8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55668d048220 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d048418 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55668d0482d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d048348 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55668d074f90 <col:54, line:517:5>
|     `-ReturnStmt 0x55668d074f80 <line:516:9, col:53>
|       `-CallExpr 0x55668d074f48 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074e78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d074ee8 <col:26> 'const char *' lvalue ParmVar 0x55668d0482d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d074f08 <col:35> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int'
|         `-DeclRefExpr 0x55668d074f28 <col:47> 'P' lvalue ParmVar 0x55668d048348 'parser' 'P'
|-FunctionTemplateDecl 0x55668d0487b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55668d048520 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d048718 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55668d0485d0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d048648 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55668d075180 <col:55, line:521:5>
|     `-ReturnStmt 0x55668d075170 <line:520:9, col:65>
|       `-CallExpr 0x55668d075138 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d074fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d075028 <col:26> 'const char *' lvalue ParmVar 0x55668d0485d0 'keyword' 'const char *'
|         |-BinaryOperator 0x55668d0750f8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55668d0750a8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55668d075088 <col:35> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55668d0750e0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55668d0750c0 <col:47> 'const int' lvalue Var 0x55668d03dc50 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55668d075118 <col:59> 'P' lvalue ParmVar 0x55668d048648 'parser' 'P'
|-FunctionTemplateDecl 0x55668d048b88 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55668d048820 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d048ae8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55668d0488d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d048950 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55668d0489c8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55668d0752c0 <col:63, line:526:5>
|     |-CallExpr 0x55668d075248 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d075198 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55668d0751d8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55668d0751e8 <col:35> 'const char *' lvalue ParmVar 0x55668d0488d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55668d075208 <col:44> 'int' lvalue ParmVar 0x55668d048950 'flags' 'int'
|     | `-DeclRefExpr 0x55668d075228 <col:51> 'P' lvalue ParmVar 0x55668d0489c8 'parser' 'P'
|     `-ReturnStmt 0x55668d0752b0 <line:525:9, col:17>
|       `-UnaryOperator 0x55668d075298 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d075288 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d048fd8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55668d048bf8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d048c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d048f38 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d048d38 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d048db0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55668d048e58 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55668d075418 <col:58, line:541:5>
|     `-ReturnStmt 0x55668d075408 <line:540:9, col:39>
|       `-CallExpr 0x55668d0753d0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d0752f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d075370 <col:21> 'const char *' lvalue ParmVar 0x55668d048d38 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d075390 <col:30> 'P' lvalue ParmVar 0x55668d048db0 'parser' 'P'
|         `-DeclRefExpr 0x55668d0753b0 <col:38> 'T' lvalue ParmVar 0x55668d048e58 'x' 'T &'
|-FunctionTemplateDecl 0x55668d049428 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55668d049048 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d0490c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d049388 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d049188 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d049200 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0492a8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55668d075550 <col:60, line:545:5>
|     `-ReturnStmt 0x55668d075540 <line:544:9, col:41>
|       `-CallExpr 0x55668d075508 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d075440 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0754a8 <col:23> 'const char *' lvalue ParmVar 0x55668d049188 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d0754c8 <col:32> 'P' lvalue ParmVar 0x55668d049200 'parser' 'P'
|         `-DeclRefExpr 0x55668d0754e8 <col:40> 'T' lvalue ParmVar 0x55668d0492a8 'x' 'T &'
|-FunctionTemplateDecl 0x55668d049878 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55668d049498 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d049518 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d0497d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d0495d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d049650 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0496f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55668d075688 <col:60, line:549:5>
|     `-ReturnStmt 0x55668d075678 <line:548:9, col:41>
|       `-CallExpr 0x55668d075640 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d075578 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0755e0 <col:23> 'const char *' lvalue ParmVar 0x55668d0495d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d075600 <col:32> 'P' lvalue ParmVar 0x55668d049650 'parser' 'P'
|         `-DeclRefExpr 0x55668d075620 <col:40> 'T' lvalue ParmVar 0x55668d0496f8 'x' 'T &'
|-FunctionTemplateDecl 0x55668d049cc8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55668d0498e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d049968 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d049c28 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d049a28 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d049aa0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55668d049b48 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55668d0757c0 <col:61, line:553:5>
|     `-ReturnStmt 0x55668d0757b0 <line:552:9, col:42>
|       `-CallExpr 0x55668d075778 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d0756b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d075718 <col:24> 'const char *' lvalue ParmVar 0x55668d049a28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d075738 <col:33> 'P' lvalue ParmVar 0x55668d049aa0 'parser' 'P'
|         `-DeclRefExpr 0x55668d075758 <col:41> 'T' lvalue ParmVar 0x55668d049b48 'x' 'T &'
|-FunctionTemplateDecl 0x55668d04a1a8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55668d049d38 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d049db8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d04a108 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55668d049e78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d049ef8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55668d049f70 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55668d04a018 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55668d075938 <col:69, line:557:5>
|     `-ReturnStmt 0x55668d075928 <line:556:9, col:46>
|       `-CallExpr 0x55668d0758e8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d0757e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d075868 <col:21> 'const char *' lvalue ParmVar 0x55668d049e78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d075888 <col:30> 'int' lvalue ParmVar 0x55668d049ef8 'flags' 'int'
|         |-DeclRefExpr 0x55668d0758a8 <col:37> 'P' lvalue ParmVar 0x55668d049f70 'parser' 'P'
|         `-DeclRefExpr 0x55668d0758c8 <col:45> 'T' lvalue ParmVar 0x55668d04a018 'x' 'T &'
|-FunctionTemplateDecl 0x55668d04a4b8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55668d04a220 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d04a418 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55668d04a2d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04a348 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55668d075a78 <col:56, line:571:5>
|     `-ReturnStmt 0x55668d075a68 <line:570:9, col:48>
|       `-CallExpr 0x55668d075a30 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d075960 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0759d0 <col:30> 'const char *' lvalue ParmVar 0x55668d04a2d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d0759f0 <col:39> 'int' 0
|         `-DeclRefExpr 0x55668d075a10 <col:42> 'P' lvalue ParmVar 0x55668d04a348 'parser' 'P'
|-FunctionTemplateDecl 0x55668d04a848 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55668d04a520 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d04a7a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55668d04a5d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04a650 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55668d04a6c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55668d075c48 <col:67, line:576:5>
|     |-CallExpr 0x55668d075bd0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d075a90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55668d075ad0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55668d075ae0 <col:39> 'const char *' lvalue ParmVar 0x55668d04a5d0 'keyword' 'const char *'
|     | |-BinaryOperator 0x55668d075b90 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55668d075b40 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55668d075b00 <col:48> 'int' lvalue ParmVar 0x55668d04a650 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55668d075b78 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55668d075b58 <col:56> 'const int' lvalue Var 0x55668d03de40 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55668d075bb0 <col:68> 'P' lvalue ParmVar 0x55668d04a6c8 'parser' 'P'
|     `-ReturnStmt 0x55668d075c38 <line:575:9, col:17>
|       `-UnaryOperator 0x55668d075c20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d075c10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d04ac98 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55668d04a8b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d04a938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d04abf8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55668d04a9f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04aa70 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55668d04ab18 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55668d075db8 <col:62, line:592:5>
|     `-ReturnStmt 0x55668d075da8 <line:591:9, col:51>
|       `-CallExpr 0x55668d075d68 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d075c78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d075ce8 <col:30> 'const char *' lvalue ParmVar 0x55668d04a9f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d075d08 <col:39> 'int' 0
|         |-DeclRefExpr 0x55668d075d28 <col:42> 'P' lvalue ParmVar 0x55668d04aa70 'parser' 'P'
|         `-DeclRefExpr 0x55668d075d48 <col:50> 'T' lvalue ParmVar 0x55668d04ab18 'x' 'T &'
|-FunctionTemplateDecl 0x55668d04b178 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55668d04ad08 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d04ad88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d04b0d8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55668d04ae48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04aec8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55668d04af40 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55668d04afe8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55668d075fb0 <col:73, line:597:5>
|     |-CallExpr 0x55668d075f30 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d075dd0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55668d075e10 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55668d075e20 <col:39> 'const char *' lvalue ParmVar 0x55668d04ae48 'keyword' 'const char *'
|     | |-BinaryOperator 0x55668d075ed0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55668d075e80 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55668d075e40 <col:48> 'int' lvalue ParmVar 0x55668d04aec8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55668d075eb8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55668d075e98 <col:56> 'const int' lvalue Var 0x55668d03de40 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55668d075ef0 <col:68> 'P' lvalue ParmVar 0x55668d04af40 'parser' 'P'
|     | `-DeclRefExpr 0x55668d075f10 <col:76> 'T' lvalue ParmVar 0x55668d04afe8 'x' 'T &'
|     `-ReturnStmt 0x55668d075fa0 <line:596:9, col:17>
|       `-UnaryOperator 0x55668d075f88 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d075f78 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d04b728 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55668d04b1f0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d04b268 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d04b688 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55668d04b328 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04b3a0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55668d04b560 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55668d076120 <col:65, line:614:5>
|     `-ReturnStmt 0x55668d076110 <line:613:9, col:46>
|       `-CallExpr 0x55668d0760d0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d075fe0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d076050 <col:25> 'const char *' lvalue ParmVar 0x55668d04b328 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d076070 <col:34> 'int' 0
|         |-DeclRefExpr 0x55668d076090 <col:37> 'P' lvalue ParmVar 0x55668d04b3a0 'parser' 'P'
|         `-DeclRefExpr 0x55668d0760b0 <col:45> 'Vector<T>' lvalue ParmVar 0x55668d04b560 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55668d04bb58 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55668d04b798 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d04bab8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55668d04b850 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04b9a0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55668d076340 <col:55, line:618:5>
|     `-ReturnStmt 0x55668d076330 <line:617:9, col:55>
|       `-CallExpr 0x55668d0762f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d076148 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0761b8 <col:25> 'const char *' lvalue ParmVar 0x55668d04b850 'keyword' 'const char *'
|         |-IntegerLiteral 0x55668d0761d8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55668d0762b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55668d0762d0 <col:54> 'Vector<T>' lvalue ParmVar 0x55668d04b9a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55668d050d30 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55668d04bbc0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d04bc38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d050c90 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55668d04bcf8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d04bd78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55668d04bdf0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55668d04bf40 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55668d076538 <col:76, line:623:5>
|     |-CallExpr 0x55668d0764b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d076358 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55668d076398 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55668d0763a8 <col:34> 'const char *' lvalue ParmVar 0x55668d04bcf8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55668d076458 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55668d076408 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55668d0763c8 <col:43> 'int' lvalue ParmVar 0x55668d04bd78 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55668d076440 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55668d076420 <col:51> 'const int' lvalue Var 0x55668d03de40 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55668d076478 <col:63> 'P' lvalue ParmVar 0x55668d04bdf0 'parser' 'P'
|     | `-DeclRefExpr 0x55668d076498 <col:71> 'Vector<T>' lvalue ParmVar 0x55668d04bf40 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55668d076528 <line:622:9, col:17>
|       `-UnaryOperator 0x55668d076510 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d076500 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d051278 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55668d050da8 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d050e28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d0511d8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55668d050ee8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d050f68 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55668d0510b0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55668d0767a0 <col:66, line:627:5>
|     `-ReturnStmt 0x55668d076790 <line:626:9, col:59>
|       `-CallExpr 0x55668d076750 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55668d076568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55668d0765d8 <col:25> 'const char *' lvalue ParmVar 0x55668d050ee8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55668d0765f8 <col:34> 'int' lvalue ParmVar 0x55668d050f68 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55668d076710 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55668d076730 <col:58> 'Vector<T>' lvalue ParmVar 0x55668d0510b0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55668d051308 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55668d076820 <col:25, line:633:5>
|   `-ReturnStmt 0x55668d076810 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55668d0767f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55668d0767c8 <col:16> 'const bool' lvalue ->_status 0x55668d057148
|         `-CXXThisExpr 0x55668d0767b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55668d051488 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55668d0513c0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55668d076908 <col:27, line:639:5>
|   |-BinaryOperator 0x55668d0768b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55668d076838 <col:9> 'bool' lvalue ParmVar 0x55668d0513c0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55668d076898 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55668d076868 <col:13> 'bool' lvalue ->_status 0x55668d057148
|   |     `-CXXThisExpr 0x55668d076858 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55668d0768f8 <line:638:9, col:17>
|     `-UnaryOperator 0x55668d0768e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668d0768d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55668d051608 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55668d051548 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55668d0769f8 <col:39, line:644:5>
|   |-BinaryOperator 0x55668d0769a0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55668d076928 <col:9> 'bool' lvalue ParmVar 0x55668d051548 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55668d076988 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55668d076958 <col:13> 'const bool' lvalue ->_status 0x55668d057148
|   |     `-CXXThisExpr 0x55668d076948 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55668d0769e8 <line:643:9, col:17>
|     `-UnaryOperator 0x55668d0769d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668d0769c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55668d0516d0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55668d076aa0 <col:30, line:651:5>
|   `-ReturnStmt 0x55668d076a90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55668d076a78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55668d076a48 <col:16> 'bool' lvalue ->_read_status 0x55668d034bb0
|         `-ImplicitCastExpr 0x55668d076a28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55668d076a18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55668d051818 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55668d051788 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55668d076ba8 <col:32, line:658:5>
|   |-BinaryOperator 0x55668d076b50 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55668d076ab8 <col:9> 'bool' lvalue ParmVar 0x55668d051788 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55668d076b38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55668d076b08 <col:13> 'bool' lvalue ->_read_status 0x55668d034bb0
|   |     `-ImplicitCastExpr 0x55668d076ae8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55668d076ad8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55668d076b98 <line:657:9, col:17>
|     `-UnaryOperator 0x55668d076b80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668d076b70 <col:17> 'Args *' this
|-CXXMethodDecl 0x55668d051968 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55668d0518d8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55668d076cb8 <col:44, line:663:5>
|   |-BinaryOperator 0x55668d076c60 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55668d076bc8 <col:9> 'bool' lvalue ParmVar 0x55668d0518d8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55668d076c48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55668d076c18 <col:13> 'bool' lvalue ->_read_status 0x55668d034bb0
|   |     `-ImplicitCastExpr 0x55668d076bf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55668d076be8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55668d076ca8 <line:662:9, col:17>
|     `-UnaryOperator 0x55668d076c90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668d076c80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55668d051a30 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55668d051af8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55668d051bc0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55668d051c88 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55668d051f98 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55668d051d28 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d051ef8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55668d051e08 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55668d077070 <col:19, line:706:5>
|     `-IfStmt 0x55668d077048 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55668d076db8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55668d076f78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55668d076f48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55668d076f08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55668d076e10 <col:42> '<bound member function type>' ->simple_slot 0x55668d071af0
|       |     | `-CXXThisExpr 0x55668d076e00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55668d076ea8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55668d076e60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55668cd2efa8
|       |     | `-DeclRefExpr 0x55668d076e40 <col:55> 'T' lvalue ParmVar 0x55668d051e08 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55668d076ee8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55668d077038 <line:705:13, col:34>
|         `-CallExpr 0x55668d077010 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55668d076f98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55668d076ff0 <col:33> 'T' lvalue ParmVar 0x55668d051e08 'x' 'T &'
|-FunctionTemplateDecl 0x55668d052268 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55668d051ff8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d0521c8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55668d0520d8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55668d077450 <col:31, line:717:5>
|     |-DeclStmt 0x55668d0771b0 <line:713:9, col:23>
|     | `-VarDecl 0x55668d077098 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55668d077188 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55668d077110 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55668d077168 <col:21> 'T' lvalue ParmVar 0x55668d0520d8 'x' 'T &'
|     |-IfStmt 0x55668d077400 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55668d0772a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55668d0773e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55668d077380 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55668d077310 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|     |   | `-DeclRefExpr 0x55668d0772f0 <col:14> 'T *' lvalue Var 0x55668d077098 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55668d0773c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55668d077438 <line:716:9, col:16>
|       `-DeclRefExpr 0x55668d077418 <col:16> 'T *' lvalue Var 0x55668d077098 's' 'T *'
|-FunctionTemplateDecl 0x55668d052678 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55668d0522c8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55668d052348 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55668d0525d8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55668d052428 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55668d0524c8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55668d07a050 <col:37, line:726:5>
|     |-IfStmt 0x55668d0776f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55668d07a000 <line:723:13, col:26>
|     | | `-VarDecl 0x55668d0774b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55668d0775a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55668d077530 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55668d077588 <col:25> 'T' lvalue ParmVar 0x55668d052428 'x' 'T &'
|     | |-DeclRefExpr 0x55668d0775d0 <col:16> 'T *' lvalue Var 0x55668d0774b8 's' 'T *'
|     | `-BinaryOperator 0x55668d0776d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55668d077680 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55668d077610 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|     |   | `-DeclRefExpr 0x55668d0775f0 <col:14> 'T *' lvalue Var 0x55668d0774b8 's' 'T *'
|     |   `-DeclRefExpr 0x55668d0776b0 <col:18> 'const V' lvalue ParmVar 0x55668d0524c8 'value' 'const V &'
|     `-ReturnStmt 0x55668d07a040 <line:725:9, col:17>
|       `-UnaryOperator 0x55668d07a028 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55668d07a018 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55668d052a78 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55668d0526e0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55668d0529d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55668d052790 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d052810 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55668d0528b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55668d07ae70 <col:65, line:737:5>
|     |-DeclStmt 0x55668d07a0e8 <line:732:9, col:26>
|     | `-VarDecl 0x55668d07a080 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55668d07ae38 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55668d07ae58 <line:733:13, col:58>
|       | `-VarDecl 0x55668d07a110 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55668d07a2f0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55668d07a2c0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55668d07a2a8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55668d07a288 <col:26, col:58> 'String' (CXXTemporary 0x55668d07a288)
|       |           `-CXXMemberCallExpr 0x55668d07a218 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55668d07a188 <col:26> '<bound member function type>' ->find 0x55668d071108
|       |             | `-CXXThisExpr 0x55668d07a178 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55668d07a250 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07a1b8 <col:31> 'const char *' lvalue ParmVar 0x55668d052790 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55668d07a268 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07a1d8 <col:40> 'int' lvalue ParmVar 0x55668d052810 'flags' 'int'
|       |             `-DeclRefExpr 0x55668d07a1f8 <col:47> 'Args::Slot *' lvalue Var 0x55668d07a080 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55668d07a3a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55668d07a390 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55668d07a370 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55668d07a340 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |       `-ImplicitCastExpr 0x55668d07a328 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55668d07a308 <col:20> 'String' lvalue Var 0x55668d07a110 'str' 'String'
|       `-CompoundStmt 0x55668d07ae18 <col:61, line:736:9>
|         |-DeclStmt 0x55668d07a860 <line:734:13, col:76>
|         | `-VarDecl 0x55668d07a3f8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55668d07a830 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55668d07a7a0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55668d07a7e8 <col:60> 'T' lvalue ParmVar 0x55668d0528b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55668d07a818 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55668d07a808 <col:71> 'Args *' this
|         `-CallExpr 0x55668d07ade8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55668d07a888 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|           | `-CXXThisExpr 0x55668d07a878 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55668d07ada8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55668d07a8b8 <col:23> 'T *' lvalue Var 0x55668d07a3f8 's' 'T *'
|           | `-CallExpr 0x55668d07ad68 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55668d07ab40 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55668d07ac40 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55668d07ac60 <col:86> 'String' lvalue Var 0x55668d07a110 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55668d07ad10 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55668d07aca0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|           |   | `-DeclRefExpr 0x55668d07ac80 <col:92> 'T *' lvalue Var 0x55668d07a3f8 's' 'T *'
|           |   `-UnaryOperator 0x55668d07ad50 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55668d07ad40 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55668d07adc8 <col:103> 'Args::Slot *' lvalue Var 0x55668d07a080 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55668d052fc8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55668d052ae8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55668d052b68 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55668d052f28 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55668d052c28 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d052ca8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55668d052d48 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55668d052de8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55668d07bd10 <col:88, line:745:5>
|     |-DeclStmt 0x55668d07af08 <line:741:9, col:26>
|     | `-VarDecl 0x55668d07aea0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55668d07b128 <line:742:9, col:55>
|     | `-VarDecl 0x55668d07af30 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55668d07b110 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55668d07b0e0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55668d07b0c8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55668d07b0a8 <col:22, col:54> 'String' (CXXTemporary 0x55668d07b0a8)
|     |           `-CXXMemberCallExpr 0x55668d07b038 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55668d07afa8 <col:22> '<bound member function type>' ->find 0x55668d071108
|     |             | `-CXXThisExpr 0x55668d07af98 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55668d07b070 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55668d07afd8 <col:27> 'const char *' lvalue ParmVar 0x55668d052c28 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55668d07b088 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55668d07aff8 <col:36> 'int' lvalue ParmVar 0x55668d052ca8 'flags' 'int'
|     |             `-DeclRefExpr 0x55668d07b018 <col:43> 'Args::Slot *' lvalue Var 0x55668d07aea0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55668d07b500 <line:743:9, col:72>
|     | `-VarDecl 0x55668d07b178 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55668d07b4d0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55668d07b440 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55668d07b488 <col:56> 'T' lvalue ParmVar 0x55668d052d48 'variable' 'T &'
|     |     `-UnaryOperator 0x55668d07b4b8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55668d07b4a8 <col:67> 'Args *' this
|     `-CallExpr 0x55668d07bce0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55668d07b528 <col:9> '<bound member function type>' ->postparse 0x55668d071318
|       | `-CXXThisExpr 0x55668d07b518 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55668d07bca0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55668d07b558 <col:19> 'T *' lvalue Var 0x55668d07b178 's' 'T *'
|       | `-ParenExpr 0x55668d07bc80 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55668d07bc50 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55668d07bc38 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55668d07bc20 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55668d07bc00 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55668d07bbd0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |     |       `-ImplicitCastExpr 0x55668d07bbb8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55668d07b578 <col:25> 'String' lvalue Var 0x55668d07af30 'str' 'String'
|       |     |-CallExpr 0x55668d07ba28 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55668d07b800 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55668d07b900 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55668d07b920 <col:89> 'String' lvalue Var 0x55668d07af30 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55668d07b9d0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55668d07b960 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|       |     | | `-DeclRefExpr 0x55668d07b940 <col:95> 'T *' lvalue Var 0x55668d07b178 's' 'T *'
|       |     | `-UnaryOperator 0x55668d07ba10 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55668d07ba00 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55668d07bb98 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55668d07bb78 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55668d07bb48 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55668d07baf8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55668d07ba88 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|       |         | | `-DeclRefExpr 0x55668d07ba68 <col:109> 'T *' lvalue Var 0x55668d07b178 's' 'T *'
|       |         | `-DeclRefExpr 0x55668d07bb28 <col:113> 'const V' lvalue ParmVar 0x55668d052de8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55668d07bb68 <col:120> 'bool' true
|       `-DeclRefExpr 0x55668d07bcc0 <col:128> 'Args::Slot *' lvalue Var 0x55668d07aea0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55668d0534f8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55668d053040 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d0530b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d053458 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55668d053178 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d0531f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55668d053270 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55668d053318 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55668d07c908 <col:75, line:754:5>
|     |-DeclStmt 0x55668d07bdb8 <line:749:9, col:26>
|     | `-VarDecl 0x55668d07bd50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55668d07c8d0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55668d07c8f0 <line:750:13, col:58>
|       | `-VarDecl 0x55668d07bde0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55668d07bfc0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55668d07bf90 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55668d07bf78 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55668d07bf58 <col:26, col:58> 'String' (CXXTemporary 0x55668d07bf58)
|       |           `-CXXMemberCallExpr 0x55668d07bee8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55668d07be58 <col:26> '<bound member function type>' ->find 0x55668d071108
|       |             | `-CXXThisExpr 0x55668d07be48 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55668d07bf20 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07be88 <col:31> 'const char *' lvalue ParmVar 0x55668d053178 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55668d07bf38 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07bea8 <col:40> 'int' lvalue ParmVar 0x55668d0531f8 'flags' 'int'
|       |             `-DeclRefExpr 0x55668d07bec8 <col:47> 'Args::Slot *' lvalue Var 0x55668d07bd50 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55668d07c078 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55668d07c060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55668d07c040 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55668d07c010 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |       `-ImplicitCastExpr 0x55668d07bff8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55668d07bfd8 <col:20> 'String' lvalue Var 0x55668d07bde0 'str' 'String'
|       `-CompoundStmt 0x55668d07c8b0 <col:61, line:753:9>
|         |-DeclStmt 0x55668d07c450 <line:751:13, col:63>
|         | `-VarDecl 0x55668d07c0c8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55668d07c420 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55668d07c390 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55668d07c3d8 <col:47> 'T' lvalue ParmVar 0x55668d053318 'variable' 'T &'
|         |     `-UnaryOperator 0x55668d07c408 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55668d07c3f8 <col:58> 'Args *' this
|         `-CallExpr 0x55668d07c880 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55668d07c478 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|           | `-CXXThisExpr 0x55668d07c468 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55668d07c840 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55668d07c4a8 <col:23> 'T *' lvalue Var 0x55668d07c0c8 's' 'T *'
|           | `-CallExpr 0x55668d07c800 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55668d07c690 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55668d07c6d8 <col:56> 'P' lvalue ParmVar 0x55668d053270 'parser' 'P'
|           |   |-DeclRefExpr 0x55668d07c6f8 <col:64> 'String' lvalue Var 0x55668d07bde0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55668d07c7a8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55668d07c738 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|           |   | `-DeclRefExpr 0x55668d07c718 <col:70> 'T *' lvalue Var 0x55668d07c0c8 's' 'T *'
|           |   `-UnaryOperator 0x55668d07c7e8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55668d07c7d8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55668d07c860 <col:81> 'Args::Slot *' lvalue Var 0x55668d07bd50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55668d053b58 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55668d053570 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55668d0535e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55668d053668 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55668d053ab8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55668d053730 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d0537b0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55668d053828 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55668d0538c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55668d053968 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55668d07d698 <col:98, line:762:5>
|     |-DeclStmt 0x55668d07c9a0 <line:758:9, col:26>
|     | `-VarDecl 0x55668d07c938 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55668d07cbc0 <line:759:9, col:55>
|     | `-VarDecl 0x55668d07c9c8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55668d07cba8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55668d07cb78 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55668d07cb60 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55668d07cb40 <col:22, col:54> 'String' (CXXTemporary 0x55668d07cb40)
|     |           `-CXXMemberCallExpr 0x55668d07cad0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55668d07ca40 <col:22> '<bound member function type>' ->find 0x55668d071108
|     |             | `-CXXThisExpr 0x55668d07ca30 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55668d07cb08 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55668d07ca70 <col:27> 'const char *' lvalue ParmVar 0x55668d053730 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55668d07cb20 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55668d07ca90 <col:36> 'int' lvalue ParmVar 0x55668d0537b0 'flags' 'int'
|     |             `-DeclRefExpr 0x55668d07cab0 <col:43> 'Args::Slot *' lvalue Var 0x55668d07c938 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55668d07cfe0 <line:760:9, col:59>
|     | `-VarDecl 0x55668d07cc18 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55668d07cfb0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55668d07cf20 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55668d07cf68 <col:43> 'T' lvalue ParmVar 0x55668d0538c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55668d07cf98 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55668d07cf88 <col:54> 'Args *' this
|     `-CallExpr 0x55668d07d668 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55668d07d008 <col:9> '<bound member function type>' ->postparse 0x55668d071318
|       | `-CXXThisExpr 0x55668d07cff8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55668d07d628 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55668d07d038 <col:19> 'T *' lvalue Var 0x55668d07cc18 's' 'T *'
|       | `-ParenExpr 0x55668d07d608 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55668d07d5d8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55668d07d5c0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55668d07d5a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55668d07d588 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55668d07d558 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |     |       `-ImplicitCastExpr 0x55668d07d540 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55668d07d058 <col:25> 'String' lvalue Var 0x55668d07c9c8 'str' 'String'
|       |     |-CallExpr 0x55668d07d3b0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55668d07d240 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55668d07d288 <col:59> 'P' lvalue ParmVar 0x55668d053828 'parser' 'P'
|       |     | |-DeclRefExpr 0x55668d07d2a8 <col:67> 'String' lvalue Var 0x55668d07c9c8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55668d07d358 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55668d07d2e8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|       |     | | `-DeclRefExpr 0x55668d07d2c8 <col:73> 'T *' lvalue Var 0x55668d07cc18 's' 'T *'
|       |     | `-UnaryOperator 0x55668d07d398 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55668d07d388 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55668d07d520 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55668d07d500 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55668d07d4d0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55668d07d480 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55668d07d410 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|       |         | | `-DeclRefExpr 0x55668d07d3f0 <col:87> 'T *' lvalue Var 0x55668d07cc18 's' 'T *'
|       |         | `-DeclRefExpr 0x55668d07d4b0 <col:91> 'const V' lvalue ParmVar 0x55668d053968 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55668d07d4f0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55668d07d648 <col:106> 'Args::Slot *' lvalue Var 0x55668d07c938 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55668d0541c8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55668d053bd8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d053c58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55668d053cd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55668d054128 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55668d053da0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d053e20 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55668d053e98 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55668d053f38 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55668d053fd8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55668d07e678 <col:60, line:773:5>
|     |-DeclStmt 0x55668d07d740 <line:767:9, col:26>
|     | `-VarDecl 0x55668d07d6d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55668d07e640 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55668d07e660 <line:768:13, col:58>
|       | `-VarDecl 0x55668d07d768 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55668d07d948 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55668d07d918 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55668d07d900 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55668d07d8e0 <col:26, col:58> 'String' (CXXTemporary 0x55668d07d8e0)
|       |           `-CXXMemberCallExpr 0x55668d07d870 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55668d07d7e0 <col:26> '<bound member function type>' ->find 0x55668d071108
|       |             | `-CXXThisExpr 0x55668d07d7d0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55668d07d8a8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07d810 <col:31> 'const char *' lvalue ParmVar 0x55668d053da0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55668d07d8c0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07d830 <col:40> 'int' lvalue ParmVar 0x55668d053e20 'flags' 'int'
|       |             `-DeclRefExpr 0x55668d07d850 <col:47> 'Args::Slot *' lvalue Var 0x55668d07d6d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55668d07da00 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55668d07d9e8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55668d07d9c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55668d07d998 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |       `-ImplicitCastExpr 0x55668d07d980 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55668d07d960 <col:20> 'String' lvalue Var 0x55668d07d768 'str' 'String'
|       `-CompoundStmt 0x55668d07e618 <col:61, line:772:9>
|         |-DeclStmt 0x55668d07dd40 <line:769:13, col:66>
|         | `-VarDecl 0x55668d07da58 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55668d07dd10 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55668d07dc80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55668d07dcc8 <col:49> 'T1' lvalue ParmVar 0x55668d053f38 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55668d07dcf8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55668d07dce8 <col:61> 'Args *' this
|         |-DeclStmt 0x55668d07e0b0 <line:770:13, col:66>
|         | `-VarDecl 0x55668d07ddc8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55668d07e080 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55668d07dff0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55668d07e038 <col:49> 'T2' lvalue ParmVar 0x55668d053fd8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55668d07e068 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55668d07e058 <col:61> 'Args *' this
|         `-CallExpr 0x55668d07e5e8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55668d07e0d8 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|           | `-CXXThisExpr 0x55668d07e0c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55668d07e5a8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55668d07e148 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55668d07e108 <col:23> 'T1 *' lvalue Var 0x55668d07da58 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55668d07e128 <col:29> 'T2 *' lvalue Var 0x55668d07ddc8 's2' 'T2 *'
|           | `-CallExpr 0x55668d07e560 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55668d07e330 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55668d07e378 <col:63> 'P' lvalue ParmVar 0x55668d053e98 'parser' 'P'
|           |   |-DeclRefExpr 0x55668d07e398 <col:71> 'String' lvalue Var 0x55668d07d768 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55668d07e448 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55668d07e3d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|           |   | `-DeclRefExpr 0x55668d07e3b8 <col:77> 'T1 *' lvalue Var 0x55668d07da58 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55668d07e508 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55668d07e498 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|           |   | `-DeclRefExpr 0x55668d07e478 <col:82> 'T2 *' lvalue Var 0x55668d07ddc8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55668d07e548 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55668d07e538 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55668d07e5c8 <col:94> 'Args::Slot *' lvalue Var 0x55668d07d6d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55668d0545b8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55668d054248 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d054518 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55668d054300 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d054380 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55668d0543f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55668d07eb90 <col:67, line:780:5>
|     |-DeclStmt 0x55668d07e710 <line:777:9, col:26>
|     | `-VarDecl 0x55668d07e6a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55668d07eb58 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55668d07eb78 <line:778:13, col:58>
|       | `-VarDecl 0x55668d07e738 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55668d07e918 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55668d07e8e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55668d07e8d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55668d07e8b0 <col:26, col:58> 'String' (CXXTemporary 0x55668d07e8b0)
|       |           `-CXXMemberCallExpr 0x55668d07e840 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55668d07e7b0 <col:26> '<bound member function type>' ->find 0x55668d071108
|       |             | `-CXXThisExpr 0x55668d07e7a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55668d07e878 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07e7e0 <col:31> 'const char *' lvalue ParmVar 0x55668d054300 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55668d07e890 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55668d07e800 <col:40> 'int' lvalue ParmVar 0x55668d054380 'flags' 'int'
|       |             `-DeclRefExpr 0x55668d07e820 <col:47> 'Args::Slot *' lvalue Var 0x55668d07e6a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55668d07e9d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55668d07e9b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55668d07e998 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55668d07e968 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|       |       `-ImplicitCastExpr 0x55668d07e950 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55668d07e930 <col:20> 'String' lvalue Var 0x55668d07e738 'str' 'String'
|       `-CallExpr 0x55668d07eb28 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55668d07e9f8 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|         | `-CXXThisExpr 0x55668d07e9e8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55668d07ead8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55668d07ea48 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55668d07ea28 <col:23> 'P' lvalue ParmVar 0x55668d0543f8 'parser' 'P'
|         | |-DeclRefExpr 0x55668d07ea90 <col:36> 'String' lvalue Var 0x55668d07e738 'str' 'String'
|         | `-UnaryOperator 0x55668d07eac0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55668d07eab0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55668d07eb08 <col:49> 'Args::Slot *' lvalue Var 0x55668d07e6a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55668d054958 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55668d054628 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55668d0548b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55668d0546e0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d054760 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55668d0547d8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55668d07f500 <col:71, line:792:5>
|     |-DeclStmt 0x55668d07ec28 <line:784:9, col:26>
|     | `-VarDecl 0x55668d07ebc0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55668d07ecf8 <line:785:9, col:29>
|     | `-VarDecl 0x55668d07ec58 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55668d07ece0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55668d07ecc0 <col:28> 'int' 1
|     |-WhileStmt 0x55668d07f3b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55668d07f3d0 <line:786:16, col:61>
|     | | `-VarDecl 0x55668d07ed20 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55668d07ef00 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55668d07eed0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55668d07eeb8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55668d07ee98 <col:29, col:61> 'String' (CXXTemporary 0x55668d07ee98)
|     | |           `-CXXMemberCallExpr 0x55668d07ee28 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55668d07ed98 <col:29> '<bound member function type>' ->find 0x55668d071108
|     | |             | `-CXXThisExpr 0x55668d07ed88 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55668d07ee60 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55668d07edc8 <col:34> 'const char *' lvalue ParmVar 0x55668d0546e0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55668d07ee78 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55668d07ede8 <col:43> 'int' lvalue ParmVar 0x55668d054760 'flags' 'int'
|     | |             `-DeclRefExpr 0x55668d07ee08 <col:50> 'Args::Slot *' lvalue Var 0x55668d07ebc0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55668d07efb8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55668d07efa0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55668d07ef80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55668d07ef50 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|     | |       `-ImplicitCastExpr 0x55668d07ef38 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55668d07ef18 <col:23> 'String' lvalue Var 0x55668d07ed20 'str' 'String'
|     | `-CompoundStmt 0x55668d07f388 <col:64, line:790:9>
|     |   |-CallExpr 0x55668d07f110 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55668d07efe0 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|     |   | | `-CXXThisExpr 0x55668d07efd0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55668d07f0c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55668d07f030 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55668d07f010 <col:23> 'P' lvalue ParmVar 0x55668d0547d8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55668d07f078 <col:36> 'String' lvalue Var 0x55668d07ed20 'str' 'String'
|     |   | | `-UnaryOperator 0x55668d07f0a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55668d07f098 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55668d07f0f0 <col:49> 'Args::Slot *' lvalue Var 0x55668d07ebc0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55668d07f2a8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55668d07f140 <col:13> 'int' lvalue Var 0x55668d07ec58 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55668d07f290 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55668d07f270 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55668d07f1d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55668d07f1b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55668d07f1a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55668d07f160 <col:28> 'int' lvalue Var 0x55668d07ec58 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55668d07f180 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55668d07f258 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55668d07f228 <col:49> 'bool' lvalue ->_read_status 0x55668d034bb0
|     |   |         `-ImplicitCastExpr 0x55668d07f208 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55668d07f1f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55668d07f358 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55668d07f2c8 <col:13> 'int' lvalue ParmVar 0x55668d054760 'flags' 'int'
|     |     `-UnaryOperator 0x55668d07f340 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55668d07f328 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55668d07f308 <col:23> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55668d07f4e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55668d07f418 <col:9> 'bool' lvalue ->_read_status 0x55668d034bb0
|       | `-ImplicitCastExpr 0x55668d07f3f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55668d07f3e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55668d07f4c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55668d07f4a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55668d07f488 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55668d07f448 <col:25> 'int' lvalue Var 0x55668d07ec58 'read_status' 'int'
|           `-IntegerLiteral 0x55668d07f468 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55668d054e38 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55668d0549c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d054a48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d054d98 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55668d054b08 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d054b88 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55668d054c00 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55668d054ca8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55668d080490 <col:84, line:805:5>
|     |-DeclStmt 0x55668d07f5a8 <line:796:9, col:26>
|     | `-VarDecl 0x55668d07f540 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55668d07f678 <line:797:9, col:29>
|     | `-VarDecl 0x55668d07f5d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55668d07f660 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55668d07f640 <col:28> 'int' 1
|     |-DeclStmt 0x55668d07f9b0 <line:798:9, col:71>
|     | `-VarDecl 0x55668d07f6c8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55668d07f980 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55668d07f8f0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55668d07f938 <col:55> 'T' lvalue ParmVar 0x55668d054ca8 'variable' 'T &'
|     |     `-UnaryOperator 0x55668d07f968 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55668d07f958 <col:66> 'Args *' this
|     |-WhileStmt 0x55668d080340 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55668d080360 <line:799:16, col:61>
|     | | `-VarDecl 0x55668d07f9d8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55668d07fbb8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55668d07fb88 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55668d07fb70 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55668d07fb50 <col:29, col:61> 'String' (CXXTemporary 0x55668d07fb50)
|     | |           `-CXXMemberCallExpr 0x55668d07fae0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55668d07fa50 <col:29> '<bound member function type>' ->find 0x55668d071108
|     | |             | `-CXXThisExpr 0x55668d07fa40 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55668d07fb18 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55668d07fa80 <col:34> 'const char *' lvalue ParmVar 0x55668d054b08 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55668d07fb30 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55668d07faa0 <col:43> 'int' lvalue ParmVar 0x55668d054b88 'flags' 'int'
|     | |             `-DeclRefExpr 0x55668d07fac0 <col:50> 'Args::Slot *' lvalue Var 0x55668d07f540 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55668d07fc70 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55668d07fc58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55668d07fc38 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55668d07fc08 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|     | |       `-ImplicitCastExpr 0x55668d07fbf0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55668d07fbd0 <col:23> 'String' lvalue Var 0x55668d07f9d8 'str' 'String'
|     | `-CompoundStmt 0x55668d080318 <col:64, line:803:9>
|     |   |-CallExpr 0x55668d0800a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55668d07fc98 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|     |   | | `-CXXThisExpr 0x55668d07fc88 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55668d080060 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55668d07fcc8 <col:23> 'T *' lvalue Var 0x55668d07f6c8 's' 'T *'
|     |   | | `-CallExpr 0x55668d080020 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55668d07feb0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55668d07fef8 <col:56> 'P' lvalue ParmVar 0x55668d054c00 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55668d07ff18 <col:64> 'String' lvalue Var 0x55668d07f9d8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55668d07ffc8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55668d07ff58 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|     |   | |   | `-DeclRefExpr 0x55668d07ff38 <col:70> 'T *' lvalue Var 0x55668d07f6c8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55668d080008 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55668d07fff8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55668d080080 <col:81> 'Args::Slot *' lvalue Var 0x55668d07f540 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55668d080238 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55668d0800d0 <col:13> 'int' lvalue Var 0x55668d07f5d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55668d080220 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55668d080200 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55668d080168 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55668d080148 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55668d080130 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55668d0800f0 <col:28> 'int' lvalue Var 0x55668d07f5d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55668d080110 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55668d0801e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55668d0801b8 <col:49> 'bool' lvalue ->_read_status 0x55668d034bb0
|     |   |         `-ImplicitCastExpr 0x55668d080198 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55668d080188 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55668d0802e8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55668d080258 <col:13> 'int' lvalue ParmVar 0x55668d054b88 'flags' 'int'
|     |     `-UnaryOperator 0x55668d0802d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55668d0802b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55668d080298 <col:23> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55668d080470 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55668d0803a8 <col:9> 'bool' lvalue ->_read_status 0x55668d034bb0
|       | `-ImplicitCastExpr 0x55668d080388 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55668d080378 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55668d080450 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55668d080430 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55668d080418 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55668d0803d8 <col:25> 'int' lvalue Var 0x55668d07f5d8 'read_status' 'int'
|           `-IntegerLiteral 0x55668d0803f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55668d055418 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55668d054eb0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55668d054f28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55668d055378 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55668d054fe8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55668d055068 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55668d0550e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55668d055230 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55668d081298 <col:87, line:821:5>
|     |-DeclStmt 0x55668d080540 <line:809:9, col:26>
|     | `-VarDecl 0x55668d0804d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55668d080610 <line:810:9, col:29>
|     | `-VarDecl 0x55668d080570 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55668d0805f8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55668d0805d8 <col:28> 'int' 1
|     |-DeclStmt 0x55668d080858 <line:811:9, col:38>
|     | `-VarDecl 0x55668d080740 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55668d080830 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55668d0807b8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55668d080810 <col:29> 'Vector<T>' lvalue ParmVar 0x55668d055230 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55668d081148 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55668d081168 <line:812:16, col:61>
|     | | `-VarDecl 0x55668d080880 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55668d080a60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55668d080a30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55668d080a18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55668d0809f8 <col:29, col:61> 'String' (CXXTemporary 0x55668d0809f8)
|     | |           `-CXXMemberCallExpr 0x55668d080988 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55668d0808f8 <col:29> '<bound member function type>' ->find 0x55668d071108
|     | |             | `-CXXThisExpr 0x55668d0808e8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55668d0809c0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55668d080928 <col:34> 'const char *' lvalue ParmVar 0x55668d054fe8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55668d0809d8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55668d080948 <col:43> 'int' lvalue ParmVar 0x55668d055068 'flags' 'int'
|     | |             `-DeclRefExpr 0x55668d080968 <col:50> 'Args::Slot *' lvalue Var 0x55668d0804d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55668d080b18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55668d080b00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55668d080ae0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55668d080ab0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55668ccf0f68
|     | |       `-ImplicitCastExpr 0x55668d080a98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55668d080a78 <col:23> 'String' lvalue Var 0x55668d080880 'str' 'String'
|     | `-CompoundStmt 0x55668d081110 <col:64, line:819:9>
|     |   |-DeclStmt 0x55668d080bd8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55668d080b40 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55668d080bb8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55668d080d58 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55668d080c00 <col:13> '<bound member function type>' ->postparse 0x55668d071318
|     |   | | `-CXXThisExpr 0x55668d080bf0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55668d080d00 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55668d080c50 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55668d080c30 <col:23> 'P' lvalue ParmVar 0x55668d0550e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55668d080c98 <col:36> 'String' lvalue Var 0x55668d080880 'str' 'String'
|     |   | | |-DeclRefExpr 0x55668d080cb8 <col:41> 'T' lvalue Var 0x55668d080b40 'sx' 'T'
|     |   | | `-UnaryOperator 0x55668d080ce8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55668d080cd8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55668d080d38 <col:53> 'Args::Slot *' lvalue Var 0x55668d0804d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55668d080eb0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55668d080de8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55668d080db8 <col:17> 'bool' lvalue ->_read_status 0x55668d034bb0
|     |   | |   `-ImplicitCastExpr 0x55668d080d98 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55668d080d88 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55668d080e88 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55668d080e20 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55668d080e00 <col:17> 'Vector<T> *' lvalue Var 0x55668d080740 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55668d080e68 <col:30> 'T' lvalue Var 0x55668d080b40 'sx' 'T'
|     |   |-BinaryOperator 0x55668d081030 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55668d080ec8 <col:13> 'int' lvalue Var 0x55668d080570 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55668d081018 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55668d080ff8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55668d080f60 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55668d080f40 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55668d080f28 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55668d080ee8 <col:28> 'int' lvalue Var 0x55668d080570 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55668d080f08 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55668d080fe0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55668d080fb0 <col:49> 'bool' lvalue ->_read_status 0x55668d034bb0
|     |   |         `-ImplicitCastExpr 0x55668d080f90 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55668d080f80 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55668d0810e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55668d081050 <col:13> 'int' lvalue ParmVar 0x55668d055068 'flags' 'int'
|     |     `-UnaryOperator 0x55668d0810c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55668d0810b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55668d081090 <col:23> 'const int' lvalue Var 0x55668d03db58 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55668d081278 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55668d0811b0 <col:9> 'bool' lvalue ->_read_status 0x55668d034bb0
|       | `-ImplicitCastExpr 0x55668d081190 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55668d081180 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55668d081258 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55668d081238 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55668d081220 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55668d0811e0 <col:25> 'int' lvalue Var 0x55668d080570 'read_status' 'int'
|           `-IntegerLiteral 0x55668d081200 <col:40> 'int' 1
|-AccessSpecDecl 0x55668d055490 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55668d0554b8 prev 0x55668d03be58 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55668d0555b0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55668d0556a0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55668d0812d0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55668d055790 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55668d0812e0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55668d055890 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55668d055940 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55668d0559e8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55668d0559e8
| | `-ParmVarDecl 0x55668d055af8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55668d0562b8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55668d0562b8
|   `-ParmVarDecl 0x55668d0563c8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55668d055b68 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55668d055cc8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55668d055ec0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55668d055d70 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55668d055de8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55668d0814c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55668d056178 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55668d081330 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55668d0812f0 <col:20> 'void *' lvalue ParmVar 0x55668d055d70 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55668d0561e0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55668d0813b8 <col:32, col:45> 'char *' array Function 0x55668cb14be8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55668d0813a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55668d081370 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55668d055de8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55668d056240 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55668d081480 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55668d081440 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55668d055de8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55668d081540 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55668d055fc0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55668d055790 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55668d0815c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55668d0815a8 <line:840:13, col:22> 'void' array Function 0x55668cb14f48 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55668d081590 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55668d081560 <col:22> 'char *' lvalue ->_slot 0x55668d0561e0
| |         `-CXXThisExpr 0x55668d081550 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55668d0560c0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55668d055890 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55668d0817b8 <col:22, line:844:9>
| |   `-CallExpr 0x55668d081720 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55668d081708 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55668d0816e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55668cc209c8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55668d081758 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55668d081638 <col:20> 'void *' lvalue ->_ptr 0x55668d056178
| |     |   `-CXXThisExpr 0x55668d081628 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55668d081788 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55668d081770 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55668d081678 <col:26> 'char *' lvalue ->_slot 0x55668d0561e0
| |     |     `-CXXThisExpr 0x55668d081668 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55668d0817a0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55668d0816b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55668d056240
| |         `-CXXThisExpr 0x55668d0816a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55668d056178 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55668d0561e0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55668d056240 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55668d056438 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55668d056438
| | `-ParmVarDecl 0x55668d056548 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55668d0565e8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55668d0565e8
|   `-ParmVarDecl 0x55668d0566f8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55668d056898 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55668d056768 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55668d056808 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55668d056b30 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55668d056d28 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55668d056bf8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55668d056ea8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55668d0817f0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55668d0817d0 <col:20> 'T *' lvalue ParmVar 0x55668d056bf8 'ptr' 'T *'
|   | `-CompoundStmt 0x55668d081840 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55668d056df8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55668d055890 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55668d0819f0 <col:22, line:857:9>
|   |   `-CallExpr 0x55668d0819c0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55668d081850 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55668ccd90f8 0x55668cc83428
|   |     |-CXXOperatorCallExpr 0x55668d081950 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55668d0818e0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55668cee60a8 0x55668cee5cc8 0x55668cee58f8 0x55668cee5518 0x55668cee5138 0x55668cee4d68
|   |     | `-MemberExpr 0x55668d0818b0 <col:29> 'T *' lvalue ->_ptr 0x55668d056ea8
|   |     |   `-CXXThisExpr 0x55668d0818a0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55668d081990 <col:35> 'T' lvalue ->_slot 0x55668d056f08
|   |       `-CXXThisExpr 0x55668d081980 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55668d056ea8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55668d056f08 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55668d056f70 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55668d057070 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55668d0570c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668d057050 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55668d057030 <col:31> 'int' 48
|-FieldDecl 0x55668d0570e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55668d057148 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55668d0571a8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55668d0572e0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55668d0709b0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55668d070a10 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55668d070ac0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55668d070ce8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55668d070bf0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55668d070e38 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55668d070da8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55668d071108 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55668d070ef8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55668d070f78 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55668d071020 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55668d071318 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55668d0711d0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55668d071248 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55668d0713e8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55668d071538 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55668d0714a0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55668d0718c8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55668d0715f8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55668d071678 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55668d071720 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55668d0717d8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55668d071af0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55668d0719a0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55668d071a18 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55668d071e08 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55668d071ba0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55668d071d68 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55668d071c78 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cefba08 prev 0x55668cef0c10 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cefbb00 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55668cefbbf0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55668cefbd18 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55668cefbe98 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55668cefc018 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55668cefc198 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55668cf0cfc8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668cf0d838 <col:11>
|-CXXDestructorDecl 0x55668cf0d0a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55668cf0d1d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55668cf0d1d8
| `-ParmVarDecl 0x55668cf0d2e8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55668cf0d388 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55668cf0d388
| `-ParmVarDecl 0x55668cf0d498 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55668cf10258 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55668cf10368 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55668cf105e8 <col:11>
|   `-ReturnStmt 0x55668cf105d8 <col:11>
|     `-UnaryOperator 0x55668cf105c0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55668cf105b0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55668cf103d8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55668cf103d8
  `-ParmVarDecl 0x55668cf104e8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cefc200 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668cefc318 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55668cefc3b8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55668cefc420 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55668cefc488 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55668cefc4f0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55668cefc550 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55668cefc610 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55668cefc670 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55668cefc6d0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55668cf0ced8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55668cefc3b8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55668cf0d848 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55668cf0d8a0 <col:12>
|-CXXConstructorDecl 0x55668cf0d508 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55668cf0d508
| `-ParmVarDecl 0x55668cf0d618 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55668cf0d6b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55668cf0d6b8
| `-ParmVarDecl 0x55668cf0d7c8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55668cf0f940 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668ceea320 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668ceea438 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55668ceea4c8 <col:16, col:22> col:16 public
|-EnumDecl 0x55668ceea4f0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55668ceea5f0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55668ceea6d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668ceea5d0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55668ceea5b0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55668ceea680 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55668ceea6e8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668ceea660 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55668ceea640 <col:22> 'int' 64
|-CXXMethodDecl 0x55668ceeaa28 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55668ceea710 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55668ceea790 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55668ceea808 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55668ceea880 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55668ceeaae8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55668ceeace8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55668ceeab60 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55668ceeabd8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55668ceead98 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55668ceeaef8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55668ceeae08 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55668ceeafa0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55668ceeb300 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55668ceeb290 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55668ceeb230 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55668ceeb1f0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55668c9be4e0 'void'
|       |-PointerType 0x55668cc6a6c0 'unsigned char *'
|       | `-BuiltinType 0x55668c9be5e0 'unsigned char'
|       |-TypedefType 0x55668ca66c90 'size_t' sugar
|       | |-Typedef 0x55668ca2ebe0 'size_t'
|       | `-BuiltinType 0x55668c9be640 'unsigned long'
|       `-PointerType 0x55668c9bece0 'void *'
|         `-BuiltinType 0x55668c9be4e0 'void'
|-CXXMethodDecl 0x55668ceeb778 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55668ceeb370 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55668ceeb3e8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55668ceeb480 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55668ceeb500 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55668cf05e70 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55668cf05e58 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55668cf05e20 <col:58> 'int' 0
| |-ParmVarDecl 0x55668ceeb580 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55668cf05e98 <col:76> 'int' 0
| |-ParmVarDecl 0x55668ceeb600 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55668cf05eb8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55668ceeb848 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55668ceeb8c8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55668ceeb988 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55668ceeba28 <col:20>
| `-OptimizeNoneAttr 0x55668ceeba80 <col:30>
|-CXXMethodDecl 0x55668ceebaf8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55668ceebb98 <col:20>
| `-OptimizeNoneAttr 0x55668ceebbf0 <col:30>
|-CXXMethodDecl 0x55668ceebc68 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55668ceebd08 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55668ceebdb8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55668ceebe58 <col:20>
| |-OptimizeNoneAttr 0x55668ceebeb0 <col:30>
| `-WarnUnusedResultAttr 0x55668ceebed8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55668ceebf30 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55668ceebfd0 <col:20>
| `-OptimizeNoneAttr 0x55668ceec028 <col:30>
|-CXXMethodDecl 0x55668ceec078 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55668ceec118 <col:20>
| `-OptimizeNoneAttr 0x55668ceec170 <col:30>
|-CXXMethodDecl 0x55668ceec1b8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55668ceec258 <col:20>
| `-OptimizeNoneAttr 0x55668ceec2b0 <col:30>
|-CXXMethodDecl 0x55668ceec2f8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceec3b8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceec480 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55668ceec548 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55668ceec608 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceec728 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55668cf05f80 <col:54, line:99:5>
|   `-ReturnStmt 0x55668cf05f70 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55668cf05f58 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55668cf05f28 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55668cefca08
|         `-CXXThisExpr 0x55668cf05f18 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55668ceec8c8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55668ceec7d8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55668cf06030 <col:67, line:103:5>
|   `-BinaryOperator 0x55668cf06010 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55668cf05fa8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55668cefca08
|     | `-CXXThisExpr 0x55668cf05f98 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55668cf05ff8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf05fd8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55668ceec7d8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55668ceec9c0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55668cf060b0 <col:33, line:107:5>
|   `-ReturnStmt 0x55668cf060a0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55668cf06088 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55668cf06058 <col:16> 'void *' lvalue ->_destructor_argument 0x55668cefca70
|         `-CXXThisExpr 0x55668cf06048 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55668ceeca80 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55668cf066e0 <col:25, line:113:5>
|   |-ParenExpr 0x55668cf06428 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55668cf063f8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf06168 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55668cf06140 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55668cf06108 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55668cf060d8 <col:24> '<bound member function type>' ->shared 0x55668ceebaf8
|   |   |       `-ImplicitCastExpr 0x55668cf06128 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55668cf060c8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55668cf061c8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf061a8 <col:42> 'int' 0
|   |   `-CallExpr 0x55668cf06358 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55668cf06340 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf06320 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf06398 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf06238 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55668cf063b0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf06260 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf063c8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf06298 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55668cf063e0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf06308 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf062f0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf062b8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55668cf06628 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55668cf06458 <col:2> 'unsigned char *' lvalue ->_head 0x55668cefc810
|   | | `-CXXThisExpr 0x55668cf06448 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55668cf06610 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55668cf065f0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55668cf06498 <col:10> 'unsigned char *' lvalue ->_data 0x55668cefc878
|   |     | `-CXXThisExpr 0x55668cf06488 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55668cf065d8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55668cf065b8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55668cf064d8 <col:18> 'unsigned char *' lvalue ->_tail 0x55668cefc8e0
|   |         | `-CXXThisExpr 0x55668cf064c8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55668cf065a0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55668cf06580 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55668cf06518 <col:26> 'unsigned char *' lvalue ->_end 0x55668cefc948
|   |             | `-CXXThisExpr 0x55668cf06508 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55668cf06568 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55668cf06548 <col:33> 'int' 0
|   `-BinaryOperator 0x55668cf066c0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55668cf06658 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55668cefca08
|     | `-CXXThisExpr 0x55668cf06648 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55668cf066a8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55668cf06688 <col:16> 'int' 0
|-CXXMethodDecl 0x55668ceecbc0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55668ceecb30 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668ceecc68 <col:20>
| |-OptimizeNoneAttr 0x55668ceeccc0 <col:30>
| `-WarnUnusedResultAttr 0x55668ceecce8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55668ceecdb8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55668ceecd28 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668ceece60 <col:20>
| |-OptimizeNoneAttr 0x55668ceeceb8 <col:30>
| `-WarnUnusedResultAttr 0x55668ceecee0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55668ceed018 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55668ceecf20 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55668ceed0c0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55668ceed1c0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55668ceed130 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668ceed268 <col:20>
| `-OptimizeNoneAttr 0x55668ceed2c0 <col:30>
|-CXXMethodDecl 0x55668ceed388 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55668ceed2f8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55668ceed430 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55668ceed530 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55668ceed4a0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55668ceed5d8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55668ceed6d8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55668ceed648 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668ceed780 <col:20>
| `-OptimizeNoneAttr 0x55668ceed7d8 <col:30>
|-CXXMethodDecl 0x55668ceed968 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55668ceed818 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55668ceed890 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55668cf05ed8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55668ceeda18 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55668ceedc18 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55668ceeda90 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55668ceedb08 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceede28 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55668ceedcd8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55668ceedd50 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceee038 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55668ceedee8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55668ceedf68 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55668cf05ee8 <col:39> 'int' 0
|-CXXMethodDecl 0x55668ceee108 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55668ceee1d0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55668ceee298 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55668ceee358 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceee420 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55668ceee568 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55668ceee4d8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55668ceee738 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55668ceee628 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55668ceee6a0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceee808 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55668ceee8c8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55668ceee968 <col:20>
| `-OptimizeNoneAttr 0x55668ceee9c0 <col:30>
|-CXXMethodDecl 0x55668ceeea10 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55668ceeeab0 <col:20>
| `-OptimizeNoneAttr 0x55668ceeeb08 <col:30>
|-CXXMethodDecl 0x55668ceeeb58 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55668ceeec18 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceeece0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55668ceeed80 <col:20>
| `-OptimizeNoneAttr 0x55668ceeedd8 <col:30>
|-CXXMethodDecl 0x55668ceeef28 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55668ceeee18 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55668ceeee90 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceef078 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55668ceeefe8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668ceef150 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55668ceef210 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55668ceef2b0 <col:20>
| `-OptimizeNoneAttr 0x55668ceef308 <col:30>
|-CXXMethodDecl 0x55668ceef358 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55668ceef3f8 <col:20>
| `-OptimizeNoneAttr 0x55668ceef450 <col:30>
|-CXXMethodDecl 0x55668ceef4a0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55668ceef568 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55668ceef608 <col:20>
| `-OptimizeNoneAttr 0x55668ceef660 <col:30>
|-CXXMethodDecl 0x55668ceef6a8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55668ceef7c8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55668ceef938 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55668ceef878 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55668ceefa28 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55668ceefac8 <col:20>
| `-OptimizeNoneAttr 0x55668ceefb20 <col:30>
|-CXXMethodDecl 0x55668ceefb70 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55668ceefc30 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55668ceefe68 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55668ceefce0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55668ceefd58 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668ceeff18 <col:20>
| `-OptimizeNoneAttr 0x55668ceeff70 <col:30>
|-CXXMethodDecl 0x55668cef0018 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55668cef00b8 <col:20>
| `-OptimizeNoneAttr 0x55668cef0110 <col:30>
|-CXXMethodDecl 0x55668cef0160 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55668cef0200 <col:20>
| `-OptimizeNoneAttr 0x55668cef0258 <col:30>
|-CXXMethodDecl 0x55668cef02a0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55668cef0340 <col:20>
| `-OptimizeNoneAttr 0x55668cef0398 <col:30>
|-CXXMethodDecl 0x55668cef0498 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55668cef03d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55668cef0540 <col:20>
| `-OptimizeNoneAttr 0x55668cef0598 <col:30>
|-CXXMethodDecl 0x55668cef0758 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55668cef05d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55668cef0648 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668cef0808 <col:20>
| `-OptimizeNoneAttr 0x55668cef0860 <col:30>
|-CXXMethodDecl 0x55668cef0908 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55668cef0a28 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55668cef0b48 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55668cef0be8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55668cef0c10 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55668cef0d38 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55668cef0dd8 <col:20>
| `-OptimizeNoneAttr 0x55668cef0e30 <col:30>
|-CXXMethodDecl 0x55668cef0ed8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55668cef0f78 <col:20>
| `-OptimizeNoneAttr 0x55668cef0fd0 <col:30>
|-AccessSpecDecl 0x55668cef0ff8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55668cef1020 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55668cef1120 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55668cef1170 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cef1100 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55668cef10e0 <col:14> 'int' 48
|-CXXMethodDecl 0x55668cef11d8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55668cef1278 <col:20>
| `-OptimizeNoneAttr 0x55668cef12d0 <col:30>
|-CXXMethodDecl 0x55668cef1348 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55668cef13e8 <col:20>
| `-OptimizeNoneAttr 0x55668cef1440 <col:30>
|-CXXMethodDecl 0x55668cef1508 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55668cef1478 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55668cef16a8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55668cef1848 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55668cef1758 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55668cef18f0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55668cef19f0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55668cef1da0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef19d0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cef19b0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55668cef1a80 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55668cef1db8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef1a60 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55668cef1a40 <col:14> 'int' 1
| |-EnumConstantDecl 0x55668cef1b10 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55668cef1dd0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef1af0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55668cef1ad0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55668cef1ba0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55668cef1de8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef1b80 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55668cef1b60 <col:14> 'int' 3
| |-EnumConstantDecl 0x55668cef1c30 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55668cef1e00 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef1c10 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55668cef1bf0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55668cef1cc0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55668cef1e18 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef1ca0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55668cef1c80 <col:13> 'int' 5
| `-EnumConstantDecl 0x55668cef1d50 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55668cef1e30 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cef1d30 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55668cef1d10 <col:14> 'int' 6
|-CXXMethodDecl 0x55668cef1e98 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55668cef1f38 <col:20>
| `-OptimizeNoneAttr 0x55668cef1f90 <col:30>
|-CXXMethodDecl 0x55668cef2088 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55668cef1fc8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55668cef2130 <col:20>
| `-OptimizeNoneAttr 0x55668cef2188 <col:30>
|-CXXMethodDecl 0x55668cef21f8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55668cef2320 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55668cef2498 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55668cef23d0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55668cef2560 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55668cef2628 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55668cef2768 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55668cef26d8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55668cef2810 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55668cef2910 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55668cef2b10 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef28f0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cef28d0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55668cef29a0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55668cef2b28 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef2980 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55668cef2960 <col:45> 'int' 4
| |-EnumConstantDecl 0x55668cef2a30 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55668cef2b40 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef2a10 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cef29f0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55668cef2ac0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55668cef2b58 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cef2aa0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55668cef2a80 <col:47> 'int' 16
|-CXXMethodDecl 0x55668cef2bb8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55668cef2d28 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55668cef2c68 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55668cef2dd0 <col:20>
| `-OptimizeNoneAttr 0x55668cef2e28 <col:30>
|-CXXMethodDecl 0x55668cef2e78 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55668cf06800 <col:18, col:36>
|   `-ReturnStmt 0x55668cf067f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55668cf067d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55668cf067b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55668cf06788 <col:27> '<bound member function type>' ->xanno 0x55668cef0ed8
|           `-CXXThisExpr 0x55668cf06778 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55668cef2f70 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55668cf06910 <col:30, col:48>
|   `-ReturnStmt 0x55668cf06900 <col:32, col:45>
|     `-ImplicitCastExpr 0x55668cf068e8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55668cf068c8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55668cf06898 <col:39> '<bound member function type>' ->xanno 0x55668cef0d38
|           `-CXXThisExpr 0x55668cf06888 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55668cef3058 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55668cf06aa8 <col:24, col:50>
|   `-ReturnStmt 0x55668cf06a98 <col:26, col:47>
|     `-UnaryOperator 0x55668cf06a80 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55668cf06a60 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55668cf06a48 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55668cf069f8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55668cefbd18
|         |   `-CXXMemberCallExpr 0x55668cf069d8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55668cf069a8 <col:34> '<bound member function type>' ->xanno 0x55668cef0ed8
|         |       `-CXXThisExpr 0x55668cf06998 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55668cf06a28 <col:46> 'int' 0
|-CXXMethodDecl 0x55668cef3160 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55668cf06c78 <col:36, col:62>
|   `-ReturnStmt 0x55668cf06c68 <col:38, col:59>
|     `-UnaryOperator 0x55668cf06c50 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55668cf06c30 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55668cf06c18 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55668cf06b90 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55668cefbd18
|         |   `-CXXMemberCallExpr 0x55668cf06b70 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55668cf06b40 <col:46> '<bound member function type>' ->xanno 0x55668cef0d38
|         |       `-CXXThisExpr 0x55668cf06b30 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55668cf06bc0 <col:58> 'int' 0
|-CXXMethodDecl 0x55668cef3278 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55668cf06e10 <col:26, col:53>
|   `-ReturnStmt 0x55668cf06e00 <col:28, col:50>
|     `-UnaryOperator 0x55668cf06de8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55668cf06dc8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55668cf06db0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55668cf06d60 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55668cefc018
|         |   `-CXXMemberCallExpr 0x55668cf06d40 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55668cf06d10 <col:36> '<bound member function type>' ->xanno 0x55668cef0ed8
|         |       `-CXXThisExpr 0x55668cf06d00 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55668cf06d90 <col:49> 'int' 0
|-CXXMethodDecl 0x55668cef3398 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55668cf06fe8 <col:38, col:65>
|   `-ReturnStmt 0x55668cf06fd8 <col:40, col:62>
|     `-UnaryOperator 0x55668cf06fc0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55668cf06fa0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55668cf06f88 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55668cf06ef8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55668cefc018
|         |   `-CXXMemberCallExpr 0x55668cf06ed8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55668cf06ea8 <col:48> '<bound member function type>' ->xanno 0x55668cef0d38
|         |       `-CXXThisExpr 0x55668cf06e98 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55668cf06f28 <col:61> 'int' 0
|-CXXMethodDecl 0x55668cef3548 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55668cef3450 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55668cf076b8 <col:34, line:463:5>
|   |-ParenExpr 0x55668cf07500 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55668cf074d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf07138 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf07108 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf07058 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf07040 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf07000 <col:23> 'int' lvalue ParmVar 0x55668cef3450 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf07020 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf070e8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf070b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf07078 <col:33> 'int' lvalue ParmVar 0x55668cef3450 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55668cf070d0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55668cf07098 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55668cf07198 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf07178 <col:56> 'int' 0
|   |   `-CallExpr 0x55668cf07430 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55668cf07418 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf073f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf07470 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf07288 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55668cf07488 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf072b8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf074a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf072f0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55668cf074b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf073e0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf073c8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf07388 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55668cf076a8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55668cf07690 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55668cf07670 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55668cf07640 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55668cf075f0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55668cefbd18
|         |   `-CXXMemberCallExpr 0x55668cf075d0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55668cf075a0 <col:9> '<bound member function type>' ->xanno 0x55668cef0d38
|         |       `-CXXThisExpr 0x55668cf07590 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55668cf07658 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55668cf07620 <col:21> 'int' lvalue ParmVar 0x55668cef3450 'i' 'int'
|-CXXMethodDecl 0x55668cef3798 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55668cef3608 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55668cef3680 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55668cf07d48 <col:40, line:472:5>
|   |-ParenExpr 0x55668cf07b60 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55668cf07b30 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf07810 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf077e0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf07730 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf07718 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf076d8 <col:23> 'int' lvalue ParmVar 0x55668cef3608 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf076f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf077c0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf07790 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf07750 <col:33> 'int' lvalue ParmVar 0x55668cef3608 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55668cf077a8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55668cf07770 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55668cf07870 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf07850 <col:56> 'int' 0
|   |   `-CallExpr 0x55668cf07a90 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55668cf07a78 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf07a58 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf07ad0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf078e0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55668cf07ae8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf07910 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf07b00 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf07948 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55668cf07b18 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf07a40 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf07a28 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf079e8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55668cf07d28 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55668cf07cd0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55668cf07ca0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55668cf07c50 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55668cefbd18
|     | |   `-CXXMemberCallExpr 0x55668cf07c30 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55668cf07c00 <col:2> '<bound member function type>' ->xanno 0x55668cef0ed8
|     | |       `-CXXThisExpr 0x55668cf07bf0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55668cf07cb8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55668cf07c80 <col:14> 'int' lvalue ParmVar 0x55668cef3608 'i' 'int'
|     `-ImplicitCastExpr 0x55668cf07d10 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf07cf0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55668cef3680 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55668cef3958 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55668cef3860 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55668cf084c8 <col:36, line:485:5>
|   |-ParenExpr 0x55668cf08230 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf08200 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf07ee0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf07eb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf07dc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf07da8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf07d68 <col:23> 'int' lvalue ParmVar 0x55668cef3860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf07d88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf07e90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf07e78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf07de0 <col:33> 'int' lvalue ParmVar 0x55668cef3860 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf07e58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf07e40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf07e00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf07e20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55668cf07f40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf07f20 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf08160 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf08148 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf08128 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf081a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf07fb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55668cf081b8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf07fe8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf081d0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf08020 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55668cf081e8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf08110 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf080f8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf080b8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55668cf084b8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55668cf084a0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55668cf08488 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55668cf08458 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55668cf083f8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55668cf083c8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55668cf08340 <col:61, col:70> 'char const[48]' lvalue ->c 0x55668cefbbf0
|             |   `-CXXMemberCallExpr 0x55668cf08320 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55668cf082f0 <col:61> '<bound member function type>' ->xanno 0x55668cef0d38
|             |       `-CXXThisExpr 0x55668cf082e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55668cf083e0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55668cf08370 <col:74> 'int' lvalue ParmVar 0x55668cef3860 'i' 'int'
|-CXXMethodDecl 0x55668cef3ba8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55668cef3a18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55668cef3a90 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55668cf08c18 <col:42, line:500:5>
|   |-ParenExpr 0x55668cf089b0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf08980 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf08660 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf08630 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf08540 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf08528 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf084e8 <col:23> 'int' lvalue ParmVar 0x55668cef3a18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf08508 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf08610 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf085f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf08560 <col:33> 'int' lvalue ParmVar 0x55668cef3a18 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf085d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf085c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf08580 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf085a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55668cf086c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf086a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf088e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf088c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf088a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf08920 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf08730 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55668cf08938 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf08768 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf08950 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf087a0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55668cf08968 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf08890 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf08878 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf08838 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55668cf08bf8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55668cf08ba8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55668cf08b78 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55668cf08b20 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55668cf08af0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55668cf08aa0 <col:48, col:57> 'char [48]' lvalue ->c 0x55668cefbbf0
|     |     |   `-CXXMemberCallExpr 0x55668cf08a80 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55668cf08a50 <col:48> '<bound member function type>' ->xanno 0x55668cef0ed8
|     |     |       `-CXXThisExpr 0x55668cf08a40 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55668cf08b08 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55668cf08ad0 <col:61> 'int' lvalue ParmVar 0x55668cef3a18 'i' 'int'
|     `-ImplicitCastExpr 0x55668cf08be0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf08bc0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55668cef3a90 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55668cef3d68 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55668cef3c70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55668cf09378 <col:35, line:513:5>
|   |-ParenExpr 0x55668cf09088 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf09058 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf08db0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf08d80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf08c90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf08c78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf08c38 <col:23> 'int' lvalue ParmVar 0x55668cef3c70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf08c58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf08d60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf08d48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf08cb0 <col:33> 'int' lvalue ParmVar 0x55668cef3c70 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf08d28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf08d10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf08cd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf08cf0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55668cf08e10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf08df0 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf08fb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf08fa0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf08f80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf08ff8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf08e80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55668cf09010 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf08eb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf09028 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf08ef0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55668cf09040 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf08f68 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf08f50 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf08f10 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55668cf09368 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55668cf09350 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55668cf09338 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55668cf09308 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55668cf09280 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55668cf09250 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55668cf09200 <col:60, col:69> 'char const[48]' lvalue ->c 0x55668cefbbf0
|             |   `-CXXMemberCallExpr 0x55668cf091e0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55668cf091b0 <col:60> '<bound member function type>' ->xanno 0x55668cef0d38
|             |       `-CXXThisExpr 0x55668cf091a0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55668cf09268 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55668cf09230 <col:73> 'int' lvalue ParmVar 0x55668cef3c70 'i' 'int'
|-CXXMethodDecl 0x55668cef3fb8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55668cef3e28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55668cef3ea0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55668cf09a98 <col:41, line:528:5>
|   |-ParenExpr 0x55668cf09820 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf097f0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf09510 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf094e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf093f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf093d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf09398 <col:23> 'int' lvalue ParmVar 0x55668cef3e28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf093b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf094c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf094a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf09410 <col:33> 'int' lvalue ParmVar 0x55668cef3e28 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf09488 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf09470 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf09430 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf09450 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55668cf09570 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf09550 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf09750 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf09738 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf09718 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf09790 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf095e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55668cf097a8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf09618 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf097c0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf09650 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55668cf097d8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf09700 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf096e8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf096a8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55668cf09a78 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55668cf09a28 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55668cf099f8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55668cf099a0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55668cf09960 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55668cf09910 <col:47, col:56> 'char [48]' lvalue ->c 0x55668cefbbf0
|     |     |   `-CXXMemberCallExpr 0x55668cf098f0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55668cf098c0 <col:47> '<bound member function type>' ->xanno 0x55668cef0ed8
|     |     |       `-CXXThisExpr 0x55668cf098b0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55668cf09978 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55668cf09940 <col:60> 'int' lvalue ParmVar 0x55668cef3e28 'i' 'int'
|     `-ImplicitCastExpr 0x55668cf09a60 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf09a40 <col:65> 'int16_t':'short' lvalue ParmVar 0x55668cef3ea0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55668cef4178 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55668cef4080 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55668cf0a168 <col:36, line:541:5>
|   |-ParenExpr 0x55668cf09f08 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf09ed8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf09c30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf09c00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf09b10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf09af8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf09ab8 <col:23> 'int' lvalue ParmVar 0x55668cef4080 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf09ad8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf09be0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf09bc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf09b30 <col:33> 'int' lvalue ParmVar 0x55668cef4080 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf09ba8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf09b90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf09b50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf09b70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55668cf09c90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf09c70 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf09e38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf09e20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf09e00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf09e78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf09d00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55668cf09e90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf09d38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf09ea8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf09d70 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55668cf09ec0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf09de8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf09dd0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf09d90 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55668cf0a158 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55668cf0a140 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55668cf0a128 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55668cf0a0f8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55668cf0a0a0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55668cf0a070 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55668cf0a020 <col:61, col:70> 'char const[48]' lvalue ->c 0x55668cefbbf0
|             |   `-CXXMemberCallExpr 0x55668cf0a000 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55668cf09fd0 <col:61> '<bound member function type>' ->xanno 0x55668cef0d38
|             |       `-CXXThisExpr 0x55668cf09fc0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55668cf0a088 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55668cf0a050 <col:74> 'int' lvalue ParmVar 0x55668cef4080 'i' 'int'
|-CXXMethodDecl 0x55668cef4348 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55668cef4238 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55668cef42b0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55668cef43f8 <col:20>
| `-OptimizeNoneAttr 0x55668cef4450 <col:30>
|-CXXMethodDecl 0x55668cef4588 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55668cef4490 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55668cf0a838 <col:35, line:562:5>
|   |-ParenExpr 0x55668cf0a5d8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf0a5a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf0a300 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf0a2d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf0a1e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf0a1c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf0a188 <col:23> 'int' lvalue ParmVar 0x55668cef4490 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf0a1a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf0a2b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf0a298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf0a200 <col:33> 'int' lvalue ParmVar 0x55668cef4490 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf0a278 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf0a260 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf0a220 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf0a240 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55668cf0a360 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf0a340 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf0a508 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf0a4f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf0a4d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf0a548 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0a3d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55668cf0a560 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0a408 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf0a578 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf0a440 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55668cf0a590 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf0a4b8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf0a4a0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf0a460 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55668cf0a828 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55668cf0a810 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55668cf0a7f8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55668cf0a7c8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55668cf0a770 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55668cf0a740 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55668cf0a6f0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55668cefbbf0
|             |   `-CXXMemberCallExpr 0x55668cf0a6d0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55668cf0a6a0 <col:60> '<bound member function type>' ->xanno 0x55668cef0d38
|             |       `-CXXThisExpr 0x55668cf0a690 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55668cf0a758 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55668cf0a720 <col:73> 'int' lvalue ParmVar 0x55668cef4490 'i' 'int'
|-CXXMethodDecl 0x55668cef4798 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55668cef4648 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55668cef46c0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55668cf0af18 <col:41, line:577:5>
|   |-ParenExpr 0x55668cf0aca8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf0ac78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf0a9d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf0a9a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf0a8b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf0a898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf0a858 <col:23> 'int' lvalue ParmVar 0x55668cef4648 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf0a878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf0a980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf0a968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf0a8d0 <col:33> 'int' lvalue ParmVar 0x55668cef4648 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf0a948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf0a930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf0a8f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf0a910 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55668cf0aa30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf0aa10 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf0abd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf0abc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf0aba0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf0ac18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0aaa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55668cf0ac30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0aad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf0ac48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf0ab10 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55668cf0ac60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf0ab88 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf0ab70 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf0ab30 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55668cf0aef8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55668cf0aea8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55668cf0ae78 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55668cf0ae18 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55668cf0ade8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55668cf0ad98 <col:47, col:56> 'char [48]' lvalue ->c 0x55668cefbbf0
|     |     |   `-CXXMemberCallExpr 0x55668cf0ad78 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55668cf0ad48 <col:47> '<bound member function type>' ->xanno 0x55668cef0ed8
|     |     |       `-CXXThisExpr 0x55668cf0ad38 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55668cf0ae00 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55668cf0adc8 <col:60> 'int' lvalue ParmVar 0x55668cef4648 'i' 'int'
|     `-ImplicitCastExpr 0x55668cf0aee0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf0aec0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55668cef46c0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55668cef4958 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55668cef4860 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55668cf0b648 <col:36, line:591:5>
|   |-ParenExpr 0x55668cf0b388 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf0b358 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf0b0b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf0b080 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf0af90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf0af78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf0af38 <col:23> 'int' lvalue ParmVar 0x55668cef4860 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf0af58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf0b060 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf0b048 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf0afb0 <col:33> 'int' lvalue ParmVar 0x55668cef4860 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf0b028 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf0b010 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf0afd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf0aff0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55668cf0b110 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf0b0f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf0b2b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf0b2a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf0b280 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf0b2f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0b180 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55668cf0b310 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0b1b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf0b328 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf0b1f0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55668cf0b340 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf0b268 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf0b250 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf0b210 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55668cf0b638 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55668cf0b620 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55668cf0b608 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55668cf0b5d8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55668cf0b550 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55668cf0b520 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55668cf0b4d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55668cefbbf0
|             |   `-CXXMemberCallExpr 0x55668cf0b4b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55668cf0b480 <col:61> '<bound member function type>' ->xanno 0x55668cef0d38
|             |       `-CXXThisExpr 0x55668cf0b470 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55668cf0b538 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55668cf0b500 <col:74> 'int' lvalue ParmVar 0x55668cef4860 'i' 'int'
|-CXXMethodDecl 0x55668cef4ba8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55668cef4a18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55668cef4a90 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55668cf0bd28 <col:42, line:606:5>
|   |-ParenExpr 0x55668cf0bab8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55668cf0ba88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf0b7e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf0b7b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf0b6c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf0b6a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf0b668 <col:23> 'int' lvalue ParmVar 0x55668cef4a18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf0b688 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf0b790 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55668cf0b778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf0b6e0 <col:33> 'int' lvalue ParmVar 0x55668cef4a18 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf0b758 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf0b740 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf0b700 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55668cf0b720 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55668cf0b840 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf0b820 <col:60> 'int' 0
|   |   `-CallExpr 0x55668cf0b9e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55668cf0b9d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf0b9b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf0ba28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0b8b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55668cf0ba40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0b8e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf0ba58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf0b920 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55668cf0ba70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf0b998 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf0b980 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf0b940 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55668cf0bd08 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55668cf0bcb8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55668cf0bc88 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55668cf0bc28 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55668cf0bbf8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55668cf0bba8 <col:48, col:57> 'char [48]' lvalue ->c 0x55668cefbbf0
|     |     |   `-CXXMemberCallExpr 0x55668cf0bb88 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55668cf0bb58 <col:48> '<bound member function type>' ->xanno 0x55668cef0ed8
|     |     |       `-CXXThisExpr 0x55668cf0bb48 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55668cf0bc10 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55668cf0bbd8 <col:61> 'int' lvalue ParmVar 0x55668cef4a18 'i' 'int'
|     `-ImplicitCastExpr 0x55668cf0bcf0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf0bcd0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55668cef4a90 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55668cef4d40 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55668cef4c70 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55668cf0c598 <col:33, line:620:5>
|   |-ParenExpr 0x55668cf0c310 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55668cf0c2e0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf0bf30 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf0bf00 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf0bda0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf0bd88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf0bd48 <col:23> 'int' lvalue ParmVar 0x55668cef4c70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf0bd68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf0bee0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55668cf0bec8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf0bdc0 <col:33> 'int' lvalue ParmVar 0x55668cef4c70 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf0bea8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf0be90 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf0bde0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55668cf0be68 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55668cf0be50 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55668cf0be18 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55668cf0bf90 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf0bf70 <col:79> 'int' 0
|   |   `-CallExpr 0x55668cf0c240 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55668cf0c228 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf0c208 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf0c280 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0c078 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55668cf0c298 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0c0c0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf0c2b0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf0c0f8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55668cf0c2c8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf0c1f0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf0c1d8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf0c198 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55668cf0c588 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55668cf0c570 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55668cf0c558 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55668cf0c528 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55668cf0c4a0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55668cf0c470 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55668cf0c420 <col:67, col:76> 'char const[48]' lvalue ->c 0x55668cefbbf0
|             |   `-CXXMemberCallExpr 0x55668cf0c400 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55668cf0c3d0 <col:67> '<bound member function type>' ->xanno 0x55668cef0d38
|             |       `-CXXThisExpr 0x55668cf0c3c0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55668cf0c488 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55668cf0c450 <col:80> 'int' lvalue ParmVar 0x55668cef4c70 'i' 'int'
|-CXXMethodDecl 0x55668cef4f58 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55668cef4e00 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55668cef4e80 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55668cf0cdc0 <col:45, line:635:5>
|   |-ParenExpr 0x55668cf0cb08 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55668cf0cad8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55668cf0c7a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55668cf0c770 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55668cf0c610 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55668cf0c5f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55668cf0c5b8 <col:23> 'int' lvalue ParmVar 0x55668cef4e00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55668cf0c5d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55668cf0c750 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55668cf0c738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55668cf0c630 <col:33> 'int' lvalue ParmVar 0x55668cef4e00 'i' 'int'
|   |   |     `-BinaryOperator 0x55668cf0c718 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55668cf0c700 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55668cf0c650 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55668cef1120 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55668cf0c6d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55668cf0c6c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55668cf0c688 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55668cf0c800 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55668cf0c7e0 <col:79> 'int' 0
|   |   `-CallExpr 0x55668cf0ca38 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55668cf0ca20 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55668cf0ca00 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55668ca5d9f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55668cf0ca78 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0c870 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55668cf0ca90 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55668cf0c8b8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55668cf0caa8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55668cf0c8f0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55668cf0cac0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55668cf0c9e8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55668cf0c9d0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55668cf0c988 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55668cf0cda0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55668cf0cd08 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55668cf0ccd8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55668cf0cc78 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55668cf0cc48 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55668cf0cbf8 <col:54, col:63> 'char [48]' lvalue ->c 0x55668cefbbf0
|     |     |   `-CXXMemberCallExpr 0x55668cf0cbd8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55668cf0cba8 <col:54> '<bound member function type>' ->xanno 0x55668cef0ed8
|     |     |       `-CXXThisExpr 0x55668cf0cb98 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55668cf0cc60 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55668cf0cc28 <col:67> 'int' lvalue ParmVar 0x55668cef4e00 'i' 'int'
|     `-CXXConstCastExpr 0x55668cf0cd70 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55668cf0cd58 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55668cf0cd20 <col:91> 'const void *' lvalue ParmVar 0x55668cef4e80 'x' 'const void *'
|-CXXMethodDecl 0x55668cef5028 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55668cf0ce48 <col:34, line:640:5>
|   `-ReturnStmt 0x55668cf0ce38 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55668cf0ce20 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55668cf0cdf0 <col:16> 'Packet *' lvalue ->_data_packet 0x55668cefc7a8
|         `-CXXThisExpr 0x55668cf0cde0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55668cef5168 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55668cef50d8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55668cf05f08 <col:46> 'bool' true
|-CXXMethodDecl 0x55668cef52e8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55668cef5220 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55668cef5390 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55668cef5b40 <line:660:22> "" ""
| |-EnumConstantDecl 0x55668cef5490 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5bb0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5470 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55668cef5450 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55668ceea5f0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55668cef5520 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5bc8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5500 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55668cef54e0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55668ceea680 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55668cef55b0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5be0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5590 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cef5570 <col:21> 'int' 0
| |-EnumConstantDecl 0x55668cef5640 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5bf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5620 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55668cef5600 <col:19> 'int' 16
| |-EnumConstantDecl 0x55668cef56d0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5c10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef56b0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55668cef5690 <col:21> 'int' 16
| |-EnumConstantDecl 0x55668cef5760 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5c28 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5740 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55668cef5720 <col:19> 'int' 32
| |-EnumConstantDecl 0x55668cef57f0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5c40 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef57d0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55668cef57b0 <col:19> 'int' EnumConstant 0x55668cef5640 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55668cef5880 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5c58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5860 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55668cef5840 <col:19> 'int' EnumConstant 0x55668cef5760 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55668cef5950 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5c70 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5930 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55668cef5910 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55668cef58d0 <col:23> 'int' EnumConstant 0x55668cef5880 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55668cef58f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55668cef5a20 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55668cef5c88 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cef5a00 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55668cef59e0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55668cef59a0 <col:23> 'int' EnumConstant 0x55668cef5880 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55668cef59c0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55668cef5af0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55668cef5ca0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668cef5ad0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55668cef5ab0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55668cef5a70 <col:23> 'int' EnumConstant 0x55668cef5880 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55668cef5a90 <col:40> 'int' 8
|-CXXMethodDecl 0x55668cef5ce0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55668cef5d80 <col:68> "" ""
|-CXXMethodDecl 0x55668cef5e18 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55668cef5eb8 <col:45> "" ""
|-CXXMethodDecl 0x55668cef5f50 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55668cef5ff0 <col:57> "" ""
|-CXXMethodDecl 0x55668cef6088 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55668cef6128 <col:45> "" ""
|-CXXMethodDecl 0x55668cef61c0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55668cef6260 <col:57> "" ""
|-CXXMethodDecl 0x55668cef62f0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55668cef6390 <col:51> "" ""
|-CXXMethodDecl 0x55668cef6420 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55668cef64c0 <col:63> "" ""
|-CXXMethodDecl 0x55668cef6550 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55668cef65f0 <col:53> "" ""
|-CXXMethodDecl 0x55668cef6680 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55668cef6720 <col:65> "" ""
|-CXXMethodDecl 0x55668cef6838 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55668cef67a8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55668cef68e0 <col:61> "" ""
|-CXXMethodDecl 0x55668cef6a78 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55668cef6968 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55668cef69e0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55668cef6b28 <col:67> "" ""
|-CXXMethodDecl 0x55668cef6c40 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55668cef6bb0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55668cef6ce8 <col:63> "" ""
|-CXXMethodDecl 0x55668cef6e80 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55668cef6d70 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55668cef6de8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55668cef6f30 <col:69> "" ""
|-CXXMethodDecl 0x55668cef7048 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55668cef6fb8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55668cef70f0 <col:63> "" ""
|-CXXMethodDecl 0x55668cef97c8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55668cef96b8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55668cef9730 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cef9878 <col:69> "" ""
|-CXXMethodDecl 0x55668cef9990 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55668cef9900 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55668cef9a38 <col:62> "" ""
|-CXXMethodDecl 0x55668cef9bd0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55668cef9ac0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55668cef9b38 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55668cef9c80 <col:68> "" ""
|-CXXMethodDecl 0x55668cef9d98 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55668cef9d08 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55668cef9e40 <col:63> "" ""
|-CXXMethodDecl 0x55668cef9fd8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55668cef9ec8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55668cef9f40 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55668cefa088 <col:69> "" ""
|-CXXMethodDecl 0x55668cefa118 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55668cefa1b8 <col:64> "" ""
|-CXXMethodDecl 0x55668cefa248 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55668cefa2e8 <col:52> "" ""
|-CXXMethodDecl 0x55668cefa378 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55668cefa418 <col:67> "" ""
|-CXXMethodDecl 0x55668cefa4a8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55668cefa548 <col:55> "" ""
|-CXXMethodDecl 0x55668cefa660 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55668cefa5d0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55668cefa708 <col:58> "" ""
|-CXXMethodDecl 0x55668cefa8a0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55668cefa790 <col:33> col:36 'int'
| |-ParmVarDecl 0x55668cefa808 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55668cefa950 <col:62> "" ""
|-CXXMethodDecl 0x55668cefaa68 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55668cefa9d8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55668cefab10 <col:58> "" ""
|-CXXMethodDecl 0x55668cefaca8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55668cefab98 <col:33> col:36 'int'
| |-ParmVarDecl 0x55668cefac10 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55668cefad58 <col:62> "" ""
|-CXXMethodDecl 0x55668cefae70 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55668cefade0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55668cefaf18 <col:60> "" ""
|-CXXMethodDecl 0x55668cefb0b0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55668cefafa0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55668cefb018 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55668cefb160 <col:64> "" ""
|-CXXMethodDecl 0x55668cefb278 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55668cefb1e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55668cefb320 <col:58> "" ""
|-CXXMethodDecl 0x55668cefb4b8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55668cefb3a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55668cefb420 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55668cefb568 <col:62> "" ""
|-CXXMethodDecl 0x55668cefb680 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55668cefb5f0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55668cefb728 <col:59> "" ""
|-CXXMethodDecl 0x55668cefb8c0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55668cefb7b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55668cefb828 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cefb970 <col:63> "" ""
|-AccessSpecDecl 0x55668cefb9e0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55668cefba08 prev 0x55668cef0c10 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cefbb00 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55668cefbbf0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55668cefbd18 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55668cefbe98 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55668cefc018 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55668cefc198 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55668cf0cfc8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55668cf0d838 <col:11>
| |-CXXDestructorDecl 0x55668cf0d0a0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55668cf0d1d8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55668cf0d1d8
| | `-ParmVarDecl 0x55668cf0d2e8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55668cf0d388 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55668cf0d388
| | `-ParmVarDecl 0x55668cf0d498 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55668cf10258 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55668cf10368 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55668cf105e8 <col:11>
| |   `-ReturnStmt 0x55668cf105d8 <col:11>
| |     `-UnaryOperator 0x55668cf105c0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55668cf105b0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55668cf103d8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55668cf103d8
|   `-ParmVarDecl 0x55668cf104e8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55668cefc200 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55668cefc318 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55668cefc3b8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55668cefc420 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55668cefc488 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55668cefc4f0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55668cefc550 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55668cefc610 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55668cefc670 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55668cefc6d0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55668cf0ced8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55668cefc3b8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55668cf0d848 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55668cf0d8a0 <col:12>
| |-CXXConstructorDecl 0x55668cf0d508 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55668cf0d508
| | `-ParmVarDecl 0x55668cf0d618 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55668cf0d6b8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55668cf0d6b8
| | `-ParmVarDecl 0x55668cf0d7c8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55668cf0f940 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55668cefc748 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55668cefc7a8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55668cefc810 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55668cefc878 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55668cefc8e0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55668cefc948 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55668cefc9a8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55668cefca08 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55668cefca70 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55668cefcaf8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55668cefc748 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55668cf0ce70 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55668cefc9a8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55668cf0d8b0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55668cf0d910 <col:21, line:755:5>
|-CXXConstructorDecl 0x55668cefcc98 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55668cefcbd8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55668cefcd90 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55668cefcf78 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55668cefce80 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55668cefd248 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55668cefd030 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55668cefd0a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55668cefd120 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cefd468 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55668cefd318 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55668cefd390 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55668cf05a48 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55668cefd528 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55668cefd5a0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55668cefd618 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55668cf05ba0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55668cf05b10 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cf05ce8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55668cf05c58 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55668cf05de0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668d09af40 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668d09b058 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x55668d09b0e8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x55668d09b328 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x55668d09b120 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x55668d09b1a0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x55668d09b218 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55668d09b540 <col:81> 'const ArgContext' lvalue Var 0x55668d081a18 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x55668d09b480 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x55668d09b3f0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x55668d09b698 <col:35, line:1261:5>
|   `-ReturnStmt 0x55668d09b688 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x55668d09b670 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x55668d09b640 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55668d09b628 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x55668d09b600 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x55668d09b5e0 <col:16, col:24> 'String' (CXXTemporary 0x55668d09b5e0)
|               `-CXXConstructExpr 0x55668d09b5a8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x55668d09b590 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x55668d09b570 <col:23> 'bool' lvalue ParmVar 0x55668d09b3f0 'x' 'bool'
|-CXXConstructorDecl 0x55668d0f4c68 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55668d0f4d68 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x55668d0f4d68
| `-ParmVarDecl 0x55668d0f4e78 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x55668d0f4f18 <col:7> col:7 implicit constexpr BoolArg 'void (BoolArg &&)' inline default trivial noexcept-unevaluated 0x55668d0f4f18
| `-ParmVarDecl 0x55668d0f5028 <col:7> col:7 'BoolArg &&'
`-CXXDestructorDecl 0x55668d0f50c8 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668d08d328 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55668d08d448 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55668d08d4d8 <col:16, col:22> col:16 public
|-EnumDecl 0x55668d08d500 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55668d08d600 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55668d08d850 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d08d5e0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55668d08d5c0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55668d08d690 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55668d08d868 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d08d670 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55668d08d650 <col:24> 'int' 22
| |-EnumConstantDecl 0x55668d08d720 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55668d08d880 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d08d700 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55668d08d6e0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55668d08d7b0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55668d08d898 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668d08d790 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55668d08d770 <col:25> 'int' 95
| `-EnumConstantDecl 0x55668d08d800 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55668d08f210 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55668d08f648 <col:7>
|-CXXConstructorDecl 0x55668d08f318 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55668d08f318
| `-ParmVarDecl 0x55668d08f428 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55668d08f4c8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55668d08f4c8
| `-ParmVarDecl 0x55668d08f5d8 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55668d091748 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668d08d8c8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55668d08da28 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55668d08dab8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55668d08daf0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55668cb16f40 'uint32_t' sugar
|   |-Typedef 0x55668ca274c8 'uint32_t'
|   `-TypedefType 0x55668ca005a0 '__uint32_t' sugar
|     |-Typedef 0x55668ca00198 '__uint32_t'
|     `-BuiltinType 0x55668c9be620 'unsigned int'
|-CXXConstructorDecl 0x55668d08dc38 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55668d08db60 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55668d08f118 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55668d08f658 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55668d08e9d0 'base' 'int'
| | `-ImplicitCastExpr 0x55668d08f1b8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55668d08f178 <col:16> 'int' lvalue ParmVar 0x55668d08db60 'b' 'int'
| `-CompoundStmt 0x55668d08f6c8 <col:19, line:1046:5>
|-CXXMethodDecl 0x55668d08e130 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55668d08dd00 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55668d08dd80 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55668d08ddf8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55668d08de78 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55668d08df38 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55668d08dfb8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55668d08e588 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55668d08e200 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55668d08e4e8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55668d08e2a8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55668d08e348 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55668d08e3c0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55668d08f138 <col:82> 'const ArgContext' lvalue Var 0x55668d081a18 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55668d0905f8 <col:94, line:1067:5>
|     |-DeclStmt 0x55668d08f858 <line:1054:9, col:64>
|     | `-VarDecl 0x55668d08f6e8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55668d08f810 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55668d08fa78 <line:1055:9, col:91>
|     | `-VarDecl 0x55668d08f888 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55668d08fa50 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55668d08fa30 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55668d08f9e0 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55668d08f9c0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55668d08f968 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55668d08f918 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55668d08f948 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55668d08f9a8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55668d08f988 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55668d08fa10 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55668d08fbd8 <line:1056:9, col:27>
|     | `-VarDecl 0x55668d08fb70 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55668d090028 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55668d08ff58 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55668d08fed0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55668cfeeca0 0x55668cee0f28 0x55668cd2a508 0x55668cd2a1e0 0x55668cd1a9b0 0x55668cd1a660 0x55668cd19f50 0x55668ccec8c0 0x55668cc79d90
|     | | |-CallExpr 0x55668d08fe10 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55668d08fc00 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55668d08fcb0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55668d08fc80 <col:19, col:23> '<bound member function type>' .begin 0x55668cd09bb8
|     | | | |   `-DeclRefExpr 0x55668d08fc60 <col:19> 'const String' lvalue ParmVar 0x55668d08e2a8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55668d08fd20 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55668d08fcf0 <col:32, col:36> '<bound member function type>' .end 0x55668cd09dd0
|     | | | |   `-DeclRefExpr 0x55668d08fcd0 <col:32> 'const String' lvalue ParmVar 0x55668d08e2a8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55668d08fd40 <col:43> 'const bool' lvalue Var 0x55668d08f6e8 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55668d08fda8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55668d08fd88 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55668d08fdd0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55668d08fb70 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55668d08fdf0 <col:73> 'const int' lvalue Var 0x55668d08f888 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55668d08feb0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55668d08fe80 <col:16, col:20> '<bound member function type>' .end 0x55668cd09dd0
|     | |     `-DeclRefExpr 0x55668d08fe60 <col:16> 'const String' lvalue ParmVar 0x55668d08e2a8 'str' 'const String &'
|     | `-BinaryOperator 0x55668d090008 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55668d08ffa0 <col:13> 'int' lvalue ->status 0x55668d08ea38
|     |   | `-CXXThisExpr 0x55668d08ff90 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55668d08fff0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55668d08ffd0 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55668d08d690 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55668d090278 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55668d090160 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55668d090148 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55668d090130 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55668d090050 <col:13> 'int' lvalue ->status 0x55668d08ea38
|     | | |     `-CXXThisExpr 0x55668d090040 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55668d090110 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55668d0900e0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55668d090090 <col:23> 'int' lvalue ->status 0x55668d08ea38
|     | |   |   `-CXXThisExpr 0x55668d090080 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55668d0900f8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55668d0900c0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55668d08d720 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55668d090258 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55668d0901f8 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55668d0901a0 <col:13, col:18> '<bound member function type>' .error 0x55668d0341c0
|     |   | | `-DeclRefExpr 0x55668d090180 <col:13> 'const ArgContext' lvalue ParmVar 0x55668d08e3c0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55668d090220 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55668d0901d0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55668d090248 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55668d090238 <col:20> 'bool' false
|     |-DeclStmt 0x55668d090448 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55668d0903f0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55668d090380 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55668d0905a8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55668d090460 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55668ccadd58
|     | |-DeclRefExpr 0x55668d0904a8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55668d08fb70 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55668d090578 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55668d0904f0 <col:64> 'V' lvalue ParmVar 0x55668d08e348 'result' 'V &'
|     `-ReturnStmt 0x55668d0905e8 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55668d0905d8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55668d08e948 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55668d08e5f8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55668d08e8a8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55668d08e6a8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55668d08e748 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55668d08e7c0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55668d08f158 <col:71> 'const ArgContext' lvalue Var 0x55668d081a18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55668d090d68 <col:83, line:1083:5>
| |   |-DeclStmt 0x55668d0906c0 <line:1071:9, col:12>
| |   | `-VarDecl 0x55668d090658 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55668d090d40 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55668d090950 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55668d0907d8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55668d0907a0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55668d0906e8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55668d090740 <col:31> 'const String' lvalue ParmVar 0x55668d08e6a8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55668d090760 <col:36> 'V' lvalue Var 0x55668d090658 'x' 'V'
| |     | |   `-DeclRefExpr 0x55668d090780 <col:39> 'const ArgContext' lvalue ParmVar 0x55668d08e7c0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55668d090930 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55668d090910 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55668d0908f8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55668d0908e0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55668d090800 <col:17> 'int' lvalue ->status 0x55668d08ea38
| |     |     |     `-CXXThisExpr 0x55668d0907f0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55668d0908c0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55668d090890 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55668d090840 <col:27> 'int' lvalue ->status 0x55668d08ea38
| |     |       |   `-CXXThisExpr 0x55668d090830 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55668d0908a8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55668d090870 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55668d08d720 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55668d090980 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55668d090970 <col:20> 'bool' false
| |     `-IfStmt 0x55668d090d18 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55668d090a20 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55668d0909f0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55668d0909a0 <col:18> 'int' lvalue ->status 0x55668d08ea38
| |       | |   `-CXXThisExpr 0x55668d090990 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55668d090a08 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55668d0909d0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55668d08d720 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55668d090c58 <col:42, line:1079:9>
| |       | |-CallExpr 0x55668d090c00 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55668d090a50 <line:1076:13> '<bound member function type>' ->range_error 0x55668d08f048
| |       | | | `-CXXThisExpr 0x55668d090a40 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55668d090a80 <col:25> 'const ArgContext' lvalue ParmVar 0x55668d08e7c0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55668d090b60 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55668d090bd8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55668d090bb8 <col:43> 'V' lvalue Var 0x55668d090658 'x' 'V'
| |       | `-ReturnStmt 0x55668d090c48 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55668d090c38 <col:20> 'bool' false
| |       `-CompoundStmt 0x55668d090cf8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55668d090cb8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55668d090c78 <col:13> 'V' lvalue ParmVar 0x55668d08e748 'result' 'V &'
| |         | `-DeclRefExpr 0x55668d090c98 <col:22> 'V' lvalue Var 0x55668d090658 'x' 'V'
| |         `-ReturnStmt 0x55668d090ce8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55668d090cd8 <col:20> 'bool' true
| `-CXXMethodDecl 0x55668d0f5b48 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55668d0f5920 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55668d0f59f8 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55668d0f5a60 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55668d08f158 <col:71> 'const ArgContext' lvalue Var 0x55668d081a18 'blank_args' 'const ArgContext'
|-FieldDecl 0x55668d08e9d0 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55668d08ea38 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55668d08ea88 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55668d08ed40 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55668d08eac8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55668d08eb48 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55668d08ebc0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55668d08ec40 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55668d08f048 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55668d08ee10 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55668d08ee88 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55668d08ef20 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55668d0915c8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55668d0915c8
| `-ParmVarDecl 0x55668d0916d8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55668d091858 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55668d091858
| `-ParmVarDecl 0x55668d091968 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55668d0f5678 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668ceaa3b8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55668ceaa4e8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x55668ceaafd8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cea6cb8 prev 0x55668cf22f90 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55668cea6db0 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x55668cea6e40 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x55668cea6ea0 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x55668cea6f48 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x55668cea7068 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x55668cea7208 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x55668cea7148 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x55668cea7458 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x55668cea72c8 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x55668cea7348 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x55668cea75b0 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x55668cea7520 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x55668cea7738 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x55668cea7670 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x55668cea78e8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x55668cea7828 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x55668cea79e0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x55668ceab1b0 <col:21, line:58:5>
|   `-IfStmt 0x55668ceab198 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x55668ceab100 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x55668ceab0d0 <col:6> '<bound member function type>' ->scheduled 0x55668cea8238
|     |   `-ImplicitCastExpr 0x55668ceab120 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x55668ceab0c0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x55668ceab178 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x55668ceab148 <col:6> '<bound member function type>' ->unschedule 0x55668cea9860
|         `-CXXThisExpr 0x55668ceab138 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x55668cea7ae0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x55668ceab350 <col:26, line:65:5>
|   |-BinaryOperator 0x55668ceab270 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55668ceab208 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55668ceaa4e8
|   | | `-MemberExpr 0x55668ceab1d8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55668ceaa5a8
|   | |   `-CXXThisExpr 0x55668ceab1c8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55668ceab258 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55668ceab238 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55668ceaaa08 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55668ceab330 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x55668ceab2a0 <col:2> 'void *' lvalue ->_thunk 0x55668ceaa628
|     | `-CXXThisExpr 0x55668ceab290 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x55668ceab308 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x55668ceab2d0 <col:20> 'int' 1
|-CXXMethodDecl 0x55668cea7c20 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x55668cea7b90 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x55668ceab4b0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x55668ceab3a0 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x55668ceab370 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x55668cea7b90 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x55668ceab490 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x55668ceab460 <col:2> '<bound member function type>' ->assign 0x55668cea7ae0
|       `-CXXThisExpr 0x55668ceab450 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x55668cea7df0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x55668cea7cd8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x55668cea7d58 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x55668cf5b990 <col:58, line:79:5>
|   |-BinaryOperator 0x55668cf5b8d8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55668cf5b870 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55668ceaa4e8
|   | | `-MemberExpr 0x55668ceab4e0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55668ceaa5a8
|   | |   `-CXXThisExpr 0x55668ceab4d0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55668cf5b8c0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x55668cf5b8a0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x55668cea7cd8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x55668cf5b970 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55668cf5b908 <col:2> 'void *' lvalue ->_thunk 0x55668ceaa628
|     | `-CXXThisExpr 0x55668cf5b8f8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55668cf5b958 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x55668cf5b938 <col:11> 'void *' lvalue ParmVar 0x55668cea7d58 'user_data' 'void *'
|-CXXMethodDecl 0x55668cea7f40 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x55668cea7eb0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x55668cf5bb28 <col:35, line:87:5>
|   |-BinaryOperator 0x55668cf5ba58 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55668cf5b9f0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55668ceaa4e8
|   | | `-MemberExpr 0x55668cf5b9c0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55668ceaa5a8
|   | |   `-CXXThisExpr 0x55668cf5b9b0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55668cf5ba40 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55668cf5ba20 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55668ceaabe0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55668cf5bb08 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55668cf5ba88 <col:2> 'void *' lvalue ->_thunk 0x55668ceaa628
|     | `-CXXThisExpr 0x55668cf5ba78 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55668cf5baf0 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55668cf5bad8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x55668cf5bab8 <col:11> 'Element *' lvalue ParmVar 0x55668cea7eb0 'element' 'Element *'
|-CXXMethodDecl 0x55668cea8088 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x55668cea7ff8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x55668cf5bcc0 <col:29, line:94:5>
|   |-BinaryOperator 0x55668cf5bbf0 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x55668cf5bb88 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x55668ceaa4e8
|   | | `-MemberExpr 0x55668cf5bb58 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x55668ceaa5a8
|   | |   `-CXXThisExpr 0x55668cf5bb48 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x55668cf5bbd8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x55668cf5bbb8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x55668ceaadb8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x55668cf5bca0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x55668cf5bc20 <col:2> 'void *' lvalue ->_thunk 0x55668ceaa628
|     | `-CXXThisExpr 0x55668cf5bc10 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x55668cf5bc88 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x55668cf5bc70 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x55668cf5bc50 <col:11> 'Task *' lvalue ParmVar 0x55668cea7ff8 'task' 'Task *'
|-CXXMethodDecl 0x55668cea8178 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x55668cf5bda0 <col:37, line:100:5>
|   `-ReturnStmt 0x55668cf5bd90 <line:99:2, col:19>
|     `-BinaryOperator 0x55668cf5bd70 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x55668cf5bd40 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x55668cf5bcf0 <col:9> 'Element *const' lvalue ->_owner 0x55668ceaa688
|       |   `-CXXThisExpr 0x55668cf5bce0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x55668cf5bd58 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x55668cf5bd20 <col:19> 'int' 0
|-CXXMethodDecl 0x55668cea8238 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x55668cf5be60 <col:35, line:105:5>
|   `-ReturnStmt 0x55668cf5be50 <line:104:2, col:23>
|     `-BinaryOperator 0x55668cf5be30 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x55668cf5be18 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x55668cf5bdc8 <col:9> 'const int' lvalue ->_schedpos1 0x55668ceaa308
|       |   `-CXXThisExpr 0x55668cf5bdb8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x55668cf5bdf8 <col:23> 'int' 0
|-CXXMethodDecl 0x55668cea82f8 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x55668cf5bec8 <col:51, line:118:5>
|   `-ReturnStmt 0x55668cf5beb8 <line:117:2, col:9>
|     `-MemberExpr 0x55668cf5be88 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|       `-CXXThisExpr 0x55668cf5be78 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55668cea83b8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x55668cf5c420 <col:37, line:136:5>
|   `-IfStmt 0x55668cf5c3f8 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x55668cf5bf88 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x55668cf5bf70 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x55668cf5bf50 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x55668cf5bf20 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x55668ceb5068
|     |       `-MemberExpr 0x55668cf5bef0 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|     |         `-CXXThisExpr 0x55668cf5bee0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x55668cf5c368 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x55668cf5c350 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x55668cf5c320 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x55668cf5c308 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x55668cf5c2d0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x55668cf5c2b8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x55668cf5c298 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55668cee3840 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x55668cf5c238 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x55668cf5c220 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x55668cf5c148 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x55668cf5c130 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x55668cf5c110 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55668cee3500 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x55668cf5c0b0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x55668cf5bfb0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|     |         |     |   `-CXXThisExpr 0x55668cf5bfa0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x55668cf5c0f8 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x55668cf5c0e0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x55668cf5c090 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x55668cf5c078 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x55668cf5c018 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x55668ced6b60 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x55668cf5c280 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x55668cf5c268 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x55668cf5c200 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x55668cf5c1e8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x55668cf5c1b8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x55668cd320b0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x55668cf5c3e8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x55668cf5c3b8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x55668cf5c388 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|           `-CXXThisExpr 0x55668cf5c378 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x55668cea8478 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x55668cf5c508 <col:35, line:141:5>
|   `-ReturnStmt 0x55668cf5c4f8 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x55668cf5c4c0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x55668cf5c490 <col:9, col:17> '<bound member function type>' ->router 0x55668cf356f0
|         `-ImplicitCastExpr 0x55668cf5c4e0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x55668cf5c478 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x55668cf5c448 <col:9> 'Element *const' lvalue ->_owner 0x55668ceaa688
|               `-CXXThisExpr 0x55668cf5c438 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55668cea8538 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x55668cf5c588 <col:37, line:146:5>
|   `-ReturnStmt 0x55668cf5c578 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x55668cf5c560 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x55668cf5c530 <col:9> 'Element *const' lvalue ->_owner 0x55668ceaa688
|         `-CXXThisExpr 0x55668cf5c520 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55668cea85f8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x55668cf5c608 <col:41, line:151:5>
|   `-ReturnStmt 0x55668cf5c5f8 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x55668cf5c5e0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x55668cf5c5b0 <col:9> 'RouterThread *const' lvalue ->_thread 0x55668ceaa6e8
|         `-CXXThisExpr 0x55668cf5c5a0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x55668cea86c0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x55668cea8880 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x55668cea8770 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x55668cea87e8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55668ceaafc8 <col:50> 'bool' false
|-CXXMethodDecl 0x55668cea8a08 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x55668cea8940 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x55668cea8b50 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55668cea8ac0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55668cea8c98 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x55668cea8c08 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x55668cea8de0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55668cea8d50 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x55668cea8f28 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55668cea8e98 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x55668cea8ff0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x55668cf5c770 <col:32, line:223:5>
|   `-ExprWithCleanups 0x55668cf5c758 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x55668cf5c700 <col:2, col:47> 'void'
|       |-MemberExpr 0x55668cf5c630 <col:2> '<bound member function type>' ->schedule_at_steady 0x55668cea8b50
|       | `-CXXThisExpr 0x55668cf5c620 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5c740 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55668cf5c728 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55668cf5c6e0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x55668cf5c6c8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x55668cf5c698 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x55668cd320b0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x55668cea9130 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x55668cea90a0 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x55668cea9278 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea91e8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cf5c8f8 <col:56, line:241:5>
|   `-ExprWithCleanups 0x55668cf5c8e0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x55668cf5c888 <col:2, col:40> 'void'
|       |-MemberExpr 0x55668cf5c798 <col:2> '<bound member function type>' ->schedule_after 0x55668cea9130
|       | `-CXXThisExpr 0x55668cf5c788 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5c8c8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55668cf5c8b0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55668cf5c848 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x55668cf5c818 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x55668cf5c7d8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cea91e8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x55668cf5c830 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55668cf5c7f8 <col:38> 'int' 0
|-CXXMethodDecl 0x55668cea93c0 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea9330 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cf5cb68 <col:58, line:249:5>
|   `-ExprWithCleanups 0x55668cf5cb50 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x55668cf5caf8 <col:2, col:49> 'void'
|       |-MemberExpr 0x55668cf5c920 <col:2> '<bound member function type>' ->schedule_after 0x55668cea9130
|       | `-CXXThisExpr 0x55668cf5c910 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5cb38 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55668cf5cb20 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x55668cf5caa0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x55668cf5ca88 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55668cf5c9f8 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55668ceb6e58 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55668cf5cae0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x55668cf5cac8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55668cf5c9d8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cea9330 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cea9508 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x55668cea9478 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x55668cf5cd48 <col:58, line:261:5>
|   `-ExprWithCleanups 0x55668cf5cd30 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x55668cf5ccd8 <col:2, col:38> 'void'
|       |-MemberExpr 0x55668cf5cb90 <col:2> '<bound member function type>' ->schedule_at_steady 0x55668cea8b50
|       | `-CXXThisExpr 0x55668cf5cb80 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5cd18 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55668cf5cd00 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55668cf5cca0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55668cf5cc88 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55668cf5cc68 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55668cee3500 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55668cf5cc38 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55668cf5cc20 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55668cf5cbd0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|             |     `-CXXThisExpr 0x55668cf5cbc0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x55668cf5cc00 <col:33> 'const Timestamp' lvalue ParmVar 0x55668cea9478 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x55668cea9650 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea95c0 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cf5d020 <col:58, line:270:5>
|   `-ExprWithCleanups 0x55668cf5d008 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x55668cf5cfb0 <col:2, col:79> 'void'
|       |-MemberExpr 0x55668cf5cd70 <col:2> '<bound member function type>' ->schedule_at_steady 0x55668cea8b50
|       | `-CXXThisExpr 0x55668cf5cd60 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5cff0 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55668cf5cfd8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x55668cf5cf70 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x55668cf5cea8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x55668cf5ce90 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x55668cf5ce20 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x55668cf5cdf0 <col:31, col:41> '<bound member function type>' .sec 0x55668cd33ba8
|             | |     `-ImplicitCastExpr 0x55668cf5ce40 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x55668cf5cdc0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|             | |         `-CXXThisExpr 0x55668cf5cdb0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x55668cf5ce78 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x55668cf5ce58 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cea95c0 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x55668cf5cf38 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x55668cf5cf08 <col:60, col:70> '<bound member function type>' .subsec 0x55668cd342a0
|                 `-ImplicitCastExpr 0x55668cf5cf58 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x55668cf5ced8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|                     `-CXXThisExpr 0x55668cf5cec8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x55668cea9798 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea9708 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55668cf5d358 <col:60, line:279:5>
|   `-ExprWithCleanups 0x55668cf5d340 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x55668cf5d2e8 <col:2, col:65> 'void'
|       |-MemberExpr 0x55668cf5d048 <col:2> '<bound member function type>' ->schedule_at_steady 0x55668cea8b50
|       | `-CXXThisExpr 0x55668cf5d038 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5d328 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x55668cf5d310 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x55668cf5d2b0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x55668cf5d298 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55668cf5d278 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55668cee3500 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x55668cf5d218 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x55668cf5d200 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x55668cf5d088 <col:21> 'Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|             |     `-CXXThisExpr 0x55668cf5d078 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x55668cf5d260 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x55668cf5d248 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x55668cf5d1a8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x55668cf5d190 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x55668cf5d160 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55668ceb6e58 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x55668cf5d1e8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x55668cf5d1d0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x55668cf5d140 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x55668cea9708 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55668cea9860 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x55668cea9920 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x55668cf5d820 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x55668cf5d3b0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x55668cf5d380 <col:2> '<bound member function type>' ->unschedule 0x55668cea9860
|   |   `-CXXThisExpr 0x55668cf5d370 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x55668cf5d808 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x55668cf5d7d0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x55668cf5d7b8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55668cf5d468 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55668cbcb148 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x55668cf5d3e0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x55668ceaa368
|       | `-CXXThisExpr 0x55668cf5d3d0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x55668cf5d450 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x55668cf5d420 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x55668cea99e0 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x55668cf5db78 <col:42, line:310:5>
|   |-IfStmt 0x55668cf5d9c0 <line:306:2, line:307:23>
|   | |-CallExpr 0x55668cf5d8f0 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x55668cf5d8d8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x55668cf5d878 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x55668ced4fd0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x55668cf5d9b0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x55668cf5d998 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x55668cf5d968 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55668cf5d950 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x55668cf5d920 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x55668cf5db68 <line:309:2, col:33>
|     `-ExprWithCleanups 0x55668cf5db50 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x55668cf5db20 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55668cf5db08 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x55668cf5dac8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x55668cf5dab0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x55668cf5da80 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x55668ceb7170 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x55668cf5daf0 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x55668cf5da60 <col:30> 'int' 500
|-CXXMethodDecl 0x55668cea9b20 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea9a90 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cea9bc8 <col:69> "" ""
|-CXXMethodDecl 0x55668cea9cd8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea9c48 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cea9d80 <col:70> "" ""
|-CXXMethodDecl 0x55668cea9e90 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea9e00 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668cea9f38 <col:71> "" ""
|-CXXMethodDecl 0x55668ceaa048 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x55668cea9fb8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55668ceaa0f0 <col:72> "" ""
|-EnumDecl 0x55668ceaa160 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x55668ceaa260 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x55668ceaa2b0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55668ceaa240 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x55668ceaa220 <col:25> 'int' 1
|-AccessSpecDecl 0x55668ceaa2c8 <line:339:3, col:10> col:3 private
|-FieldDecl 0x55668ceaa308 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x55668ceaa368 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x55668ceaa3b8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55668ceaa4e8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x55668ceaafd8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x55668ceaa5a8 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x55668ceaa628 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x55668ceaa688 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x55668ceaa6e8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x55668ceaa838 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x55668ceaa748 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x55668ceaaa08 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55668ceaa8f0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x55668ceaa970 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x55668ceaabe0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55668ceaaac8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x55668ceaab48 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x55668ceaadb8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x55668ceaaca0 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x55668ceaad20 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x55668ceaaf88 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668cf62900 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x55668d0f8dd8 <line:167:18>
|-CXXRecordDecl 0x55668d0f8e98 prev 0x55668cf62900 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55668d0f8fa8 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class Notifier
         0 |   (Notifier vtable pointer)
         8 |   class NotifierSignal _signal
         8 |     union NotifierSignal::vmvalue _v
         8 |       class atomic_uint32_t * v1
         8 |       struct NotifierSignal::vmpair * vm
        16 |     uint32_t _mask
        24 |   enum Notifier::SearchOp _search_op
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55668cfdd988 <../dummy_inc/click/notifier.hh:73:1, line:130:1> line:73:7 referenced class Notifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x55668cfddaa8 <col:1, col:7> col:7 implicit referenced class Notifier
|-AccessSpecDecl 0x55668cfddb38 <col:18, col:24> col:18 public
|-EnumDecl 0x55668cfddb60 <line:75:5, col:76> col:10 referenced SearchOp
| |-EnumConstantDecl 0x55668cfddc60 <col:21, col:35> col:21 referenced SEARCH_STOP 'Notifier::SearchOp'
| | `-ImplicitCastExpr 0x55668cfddd50 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55668cfddc40 <col:35> 'int' Int: 0
| |     `-IntegerLiteral 0x55668cfddc20 <col:35> 'int' 0
| |-EnumConstantDecl 0x55668cfddcb0 <col:38> col:38 SEARCH_CONTINUE 'Notifier::SearchOp'
| `-EnumConstantDecl 0x55668cfddd00 <col:55> col:55 SEARCH_CONTINUE_WAKE 'Notifier::SearchOp'
|-TypedefDecl 0x55668cfddf98 <line:76:5, col:53> col:20 referenced callback_type 'void (*)(void *, Notifier *)'
| `-PointerType 0x55668cfddf30 'void (*)(void *, Notifier *)'
|   `-ParenType 0x55668cfdded0 'void (void *, Notifier *)' sugar
|     `-FunctionProtoType 0x55668cfdde90 'void (void *, Notifier *)' cdecl
|       |-BuiltinType 0x55668c9be4e0 'void'
|       |-PointerType 0x55668c9bece0 'void *'
|       | `-BuiltinType 0x55668c9be4e0 'void'
|       `-PointerType 0x55668cfdddf0 'Notifier *'
|         `-RecordType 0x55668cfdda20 'Notifier'
|           `-CXXRecord 0x55668cfdd988 'Notifier'
|-CXXConstructorDecl 0x55668cfde0d8 <line:78:5, col:46> col:12 Notifier 'void (Notifier::SearchOp)' inline
| `-ParmVarDecl 0x55668cfde000 <col:21, col:35> col:30 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x55668cfe2e78 <col:35> 'Notifier::SearchOp' EnumConstant 0x55668cfddc60 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXConstructorDecl 0x55668cfde2e8 <line:79:5, col:76> col:12 Notifier 'void (const NotifierSignal &, Notifier::SearchOp)' inline
| |-ParmVarDecl 0x55668cfde198 <col:21, col:43> col:43 signal 'const NotifierSignal &'
| `-ParmVarDecl 0x55668cfde210 <col:51, col:65> col:60 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x55668cfe2e98 <col:65> 'Notifier::SearchOp' EnumConstant 0x55668cfddc60 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x55668cfde3e8 <line:80:5, col:23> col:13 ~Notifier 'void () noexcept' virtual
|-CXXMethodDecl 0x55668cfde518 <line:83:5, line:85:5> line:83:17 initialized 'bool () const' inline
| `-CompoundStmt 0x55668cfe2f58 <col:37, line:85:5>
|   `-ReturnStmt 0x55668cfe2f48 <line:84:2, col:29>
|     `-CXXMemberCallExpr 0x55668cfe2f28 <col:9, col:29> 'bool'
|       `-MemberExpr 0x55668cfe2ef8 <col:9, col:17> '<bound member function type>' .initialized 0x55668cfdbc20
|         `-MemberExpr 0x55668cfe2ec8 <col:9> 'const NotifierSignal' lvalue ->_signal 0x55668cfe2898
|           `-CXXThisExpr 0x55668cfe2eb8 <col:9> 'const Notifier *' implicit this
|-CXXMethodDecl 0x55668cfde720 <line:87:5, col:52> col:9 initialize 'int (const char *, Router *)'
| |-ParmVarDecl 0x55668cfde5d0 <col:20, col:32> col:32 name 'const char *'
| `-ParmVarDecl 0x55668cfde648 <col:38, col:46> col:46 router 'Router *'
|-CXXMethodDecl 0x55668cfde818 <line:89:5, col:43> col:34 signal 'const NotifierSignal &() const' inline
|-CXXMethodDecl 0x55668cfde908 <line:90:5, col:33> col:21 search_op 'Notifier::SearchOp () const' inline
|-CXXMethodDecl 0x55668cfde9c8 <line:92:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x55668cfdeb08 <line:94:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x55668cfdea78 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x55668cfdebd0 <line:95:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x55668cfdfaa0 <line:96:5, col:23> col:17 sleep 'void ()' inline
|-CXXMethodDecl 0x55668cfdfd10 <line:98:5, col:71> col:17 used add_activate_callback 'int (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x55668cfdfb70 <col:39, col:53> col:53 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x55668cfdfbf0 <col:56, col:62> col:62 user_data 'void *'
|-CXXMethodDecl 0x55668cfdff68 <line:99:5, col:75> col:18 used remove_activate_callback 'void (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x55668cfdfdd0 <col:43, col:57> col:57 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x55668cfdfe50 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x55668cfe00f0 <line:100:5, col:39> col:16 add_listener 'int (Task *)' inline
| `-ParmVarDecl 0x55668cfe0028 <col:29, col:35> col:35 task 'Task *'
|-CXXMethodDecl 0x55668cfe0238 <line:101:5, col:43> col:17 remove_listener 'void (Task *)' inline
| `-ParmVarDecl 0x55668cfe01a8 <col:33, col:39> col:39 task 'Task *'
|-CXXMethodDecl 0x55668cfe03c0 <line:102:5, col:59> col:16 add_dependent_signal 'int (NotifierSignal *)' inline
| `-ParmVarDecl 0x55668cfe02f0 <col:37, col:53> col:53 signal 'NotifierSignal *'
|-CXXMethodDecl 0x55668cfe0538 <line:103:5, col:63> col:17 remove_dependent_signal 'void (NotifierSignal *)' inline
| `-ParmVarDecl 0x55668cfe0478 <col:41, col:57> col:57 signal 'NotifierSignal *'
|-VarDecl 0x55668cfe0600 <line:105:5, col:38> col:23 EMPTY_NOTIFIER 'const char []' static
|-VarDecl 0x55668cfe0688 <line:106:5, col:37> col:23 FULL_NOTIFIER 'const char []' static
|-CXXMethodDecl 0x55668cfe0858 <line:108:5, col:76> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x55668cfe0700 <col:56, col:65> col:65 e 'Element *'
| `-ParmVarDecl 0x55668cfe0780 <col:68, col:72> col:72 port 'int'
|-CXXMethodDecl 0x55668cfe0af8 <line:109:5, col:88> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x55668cfe0918 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x55668cfe0998 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x55668cfe0a10 <col:78, col:84> col:84 task 'Task *'
|-CXXMethodDecl 0x55668cfe0d98 <line:110:5, col:106> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x55668cfe0bc0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x55668cfe0c40 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x55668cfe0cb8 <col:78, col:88> col:88 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x55668cfe1118 <line:111:5, col:103> col:27 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x55668cfe0e60 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x55668cfe0ee0 <col:61, col:65> col:65 port 'int'
| |-ParmVarDecl 0x55668cfe0f58 <col:71, col:85> col:85 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x55668cfe0fd8 <col:88, col:94> col:94 user_data 'void *'
|-CXXMethodDecl 0x55668cfe1300 <line:113:5, col:77> col:34 used downstream_full_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x55668cfe11e8 <col:57, col:66> col:66 e 'Element *'
| `-ParmVarDecl 0x55668cfe1268 <col:69, col:73> col:73 port 'int'
|-CXXMethodDecl 0x55668cfe1558 <line:114:5, col:89> col:34 downstream_full_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x55668cfe13c0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x55668cfe1440 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x55668cfe14b8 <col:79, col:85> col:85 task 'Task *'
|-CXXMethodDecl 0x55668cfe17b8 <line:115:5, col:107> col:34 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x55668cfe1620 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x55668cfe16a0 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x55668cfe1718 <col:79, col:89> col:89 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x55668cfe1aa0 <line:116:5, col:104> col:27 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x55668cfe1880 <col:50, col:59> col:59 e 'Element *'
| |-ParmVarDecl 0x55668cfe1900 <col:62, col:66> col:66 port 'int'
| |-ParmVarDecl 0x55668cfe1978 <col:72, col:86> col:86 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x55668cfe19f8 <col:89, col:95> col:95 user_data 'void *'
|-CXXMethodDecl 0x55668cfe1d58 <line:118:5, col:109> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x55668cfe1b70 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x55668cfe1bf0 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x55668cfe1c70 <col:78> col:81 'int'
| `-DeprecatedAttr 0x55668cfe1e10 <col:98> "" ""
|-CXXMethodDecl 0x55668cfe20f8 <line:119:5, col:121> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x55668cfe1e90 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x55668cfe1f10 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x55668cfe1f90 <col:78> col:81 'int'
| |-ParmVarDecl 0x55668cfe2008 <col:83, col:92> col:93 'Notifier *'
| `-DeprecatedAttr 0x55668cfe21b8 <col:110> "" ""
|-CXXMethodDecl 0x55668cfe23d8 <line:120:5, col:110> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x55668cfe2238 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x55668cfe22b8 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x55668cfe2338 <col:79> col:82 'int'
| `-DeprecatedAttr 0x55668cfe2490 <col:99> "" ""
|-CXXMethodDecl 0x55668cfe2730 <line:121:5, col:122> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x55668cfe2510 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x55668cfe2590 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x55668cfe2610 <col:79> col:82 'int'
| |-ParmVarDecl 0x55668cfe2688 <col:84, col:93> col:94 'Notifier *'
| `-DeprecatedAttr 0x55668cfe27f0 <col:111> "" ""
|-AccessSpecDecl 0x55668cfe2860 <line:123:3, col:10> col:3 private
|-FieldDecl 0x55668cfe2898 <line:125:5, col:20> col:20 referenced _signal 'NotifierSignal'
|-FieldDecl 0x55668cfe28f8 <line:126:5, col:14> col:14 referenced _search_op 'Notifier::SearchOp'
|-CXXMethodDecl 0x55668cfe2a70 <line:128:5, col:61> col:17 used dependent_signal_callback 'void (void *, Notifier *)' static
| |-ParmVarDecl 0x55668cfe2960 <col:43, col:48> col:49 'void *'
| `-ParmVarDecl 0x55668cfe29d8 <col:51, col:60> col:61 'Notifier *'
|-CXXConstructorDecl 0x55668cfe2b48 <line:73:7> col:7 implicit Notifier 'void (const Notifier &)' inline default noexcept-unevaluated 0x55668cfe2b48
| `-ParmVarDecl 0x55668cfe2c58 <col:7> col:7 'const Notifier &'
`-CXXMethodDecl 0x55668cfe2cf8 <col:7> col:7 implicit operator= 'Notifier &(const Notifier &)' inline default noexcept-unevaluated 0x55668cfe2cf8
  `-ParmVarDecl 0x55668cfe2e08 <col:7> col:7 'const Notifier &'

Layout: <CGRecordLayout
  LLVMType:%class.Notifier = type <{ i32 (...)**, %class.NotifierSignal, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Notifier.base = type <{ i32 (...)**, %class.NotifierSignal, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668d095eb0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55668d096108 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55668d11b268 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55668d11b700 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55668d11b6e0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55668d11b770 <col:19>
|-CXXConstructorDecl 0x55668d11b368 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55668d11b368
| `-ParmVarDecl 0x55668d11b478 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55668d11b518 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55668d11b628 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55668d11c350 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55668d11c070 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55668d11c040 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55668d11c010 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55668d11b628 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55668d11c3c0 <col:19>
`-CXXDestructorDecl 0x55668d11b7b0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55668d09b6d8 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x55668d09b938 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55668d123a68 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55668d127670 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x55668d127670
| `-ParmVarDecl 0x55668d127788 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x55668d127828 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55668d127938 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x55668d128270 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55668d128240 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x55668d128210 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x55668d1281e0 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x55668d127938 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x55668d1282e0 <col:19>
`-CXXDestructorDecl 0x55668d1279d8 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.12 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.12 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
