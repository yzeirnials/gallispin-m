
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b80398 prev 0x5577e9b77b38 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9b80490 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5577e9b80520 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5577e9b80598 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5577e9b80658 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5577e9b80720 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5577e9b80898 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5577e9b807d0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5577e9b80940 <col:24>
| `-OptimizeNoneAttr 0x5577e9b80998 <col:34>
|-CXXMethodDecl 0x5577e9b809e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5577e9b80c98 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5577e9b80a90 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5577e9b80b08 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5577e9b80b88 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5577e9b80d50 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5577e9b80d88 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5577e9b80df0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5577e9b80e78 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5577e9b81198 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5577e9b80f30 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5577e9b80fa8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5577e9b81020 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5577e9b810a0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5577e9b812b0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5577e9b88c28 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5577e9b88c28
| `-ParmVarDecl 0x5577e9b88d38 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5577e9b88dd8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5577e9b88dd8
| `-ParmVarDecl 0x5577e9b88ee8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5577e9c67e68 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b733b0 prev 0x5577e9b73130 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5577e9b734a8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5577e9b73538 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5577e9b73598 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5577e9b73688 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5577e9b73788 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5577e9b73958 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5577e9b73808 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5577e9b73880 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5577e9b73ae8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5577e9b73a20 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5577e9b73b90 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b73cc8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5577e9b73c00 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5577e9b73e68 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5577e9b73da8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5577e9b74008 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5577e9b73f48 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5577e9b740b0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5577e9b741b0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5577e9b74290 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b74190 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5577e9b74170 <col:26> 'int' 1
| `-EnumConstantDecl 0x5577e9b74240 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5577e9b742a8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b74220 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5577e9b74200 <col:44> 'int' 2
|-CXXMethodDecl 0x5577e9b743f0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5577e9b742d8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5577e9b74358 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5577e9b74548 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5577e9b744b8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5577e9b74788 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5577e9b74608 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5577e9b74680 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5577e9b74838 <col:20>
| `-OptimizeNoneAttr 0x5577e9b74890 <col:30>
|-CXXMethodDecl 0x5577e9b74998 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5577e9b748d0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5577e9b74a40 <col:20>
| `-OptimizeNoneAttr 0x5577e9b74a98 <col:30>
|-CXXMethodDecl 0x5577e9b74ae8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5577e9b74bb0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5577e9b74cc8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5577e9b74d50 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5577e9b74dd8 <line:57:5, col:33> col:23 used PORTS_1_0 'const char []' static
|-VarDecl 0x5577e9b74e60 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5577e9b74ee8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5577e9b74f78 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5577e9b75038 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5577e9b750c0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5577e9b75148 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x5577e9b751d0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5577e9b75258 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5577e9b752e0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5577e9b75370 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5577e9b75430 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5577e9b754c0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5577e9b75610 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5577e9b75578 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5577e9b757a0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5577e9b756d0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5577e9b75a50 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5577e9b75858 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5577e9b758d8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5577e9b75958 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5577e9b75b08 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5577e9b75c10 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5577e9b75ea0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b75bf0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5577e9b75bd0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5577e9b75ca0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5577e9b75eb8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b75c80 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5577e9b75c60 <col:32> 'int' 20
| |-EnumConstantDecl 0x5577e9b75d30 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5577e9b75ed0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b75d10 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5577e9b75cf0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5577e9b75dc0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5577e9b75ee8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b75da0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5577e9b75d80 <col:35> 'int' 100
| `-EnumConstantDecl 0x5577e9b75e50 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5577e9b75f00 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b75e30 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5577e9b75e10 <col:32> 'int' 2000
|-CXXMethodDecl 0x5577e9b75f40 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5577e9b76380 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5577e9b761f0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5577e9b76268 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b76450 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5577e9b765d0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5577e9b76500 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b767d8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5577e9b76688 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5577e9b76700 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b768d8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5577e9b76978 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5577e9b76a40 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5577e9b76ad0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5577e9b76d00 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b76ab0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5577e9b76a90 <col:36> 'int' EnumConstant 0x5577e9b76a40 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5577e9b76b20 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5577e9b76b70 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5577e9b76bc0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5577e9b76c10 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5577e9b76c60 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5577e9b76cb0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5577e9b76de8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5577e9b76d28 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5577e9b76eb0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5577e9b76f70 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5577e9b77030 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5577e9b770f0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5577e9b77208 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5577e9b772d0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5577e9b77450 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5577e9b77380 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5577e9b77578 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5577e9b77778 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5577e9b77628 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5577e9b776a8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5577e9b850c8 <col:54, line:127:5>
|   |-ParenExpr 0x5577e9b84f78 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5577e9b84f48 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b84c38 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5577e9b84c10 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5577e9b84bf8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5577e9b84be0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5577e9b84bb0 <col:31> 'Router *' lvalue ->_router 0x5577e9b82a90
|   |   |         `-CXXThisExpr 0x5577e9b84ba0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5577e9b84c98 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b84c78 <col:48> 'int' 0
|   |   `-CallExpr 0x5577e9b84ea8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b84e90 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b84e70 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b84ee8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b84d08 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5577e9b84f00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b84d28 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5577e9b84f18 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b84d60 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5577e9b84f30 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b84e58 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b84e40 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b84df8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5577e9b85010 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5577e9b84fa8 <col:9> 'Router *' lvalue ->_router 0x5577e9b82a90
|   | | `-CXXThisExpr 0x5577e9b84f98 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5577e9b84ff8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5577e9b84fd8 <col:19> 'Router *' lvalue ParmVar 0x5577e9b77628 'r' 'Router *'
|   `-BinaryOperator 0x5577e9b850a8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5577e9b85040 <col:9> 'int' lvalue ->_eindex 0x5577e9b82af8
|     | `-CXXThisExpr 0x5577e9b85030 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5577e9b85090 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b85070 <col:19> 'int' lvalue ParmVar 0x5577e9b776a8 'eindex' 'int'
|-CXXMethodDecl 0x5577e9b77900 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5577e9b77838 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5577e9b779d0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5577e9b77a98 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5577e9b77b38 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5577e9b77d88 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5577e9b77c00 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5577e9b77c80 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5577e9b77e38 <col:20>
| `-OptimizeNoneAttr 0x5577e9b77e90 <col:30>
|-CXXMethodDecl 0x5577e9b77f98 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5577e9b77ed0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5577e9b78040 <col:20>
| `-OptimizeNoneAttr 0x5577e9b78098 <col:30>
|-CXXMethodDecl 0x5577e9b78168 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5577e9b780d8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5577e9b78210 <col:20>
| `-OptimizeNoneAttr 0x5577e9b78268 <col:30>
|-CXXMethodDecl 0x5577e9b783f8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5577e9b782a0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5577e9b78320 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5577e9b78588 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5577e9b784c0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5577e9b786d8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5577e9b78648 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5577e9b78828 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5577e9b78798 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5577e9b78978 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5577e9b788e8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5577e9b78c38 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5577e9b78a30 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5577e9b78ab0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5577e9b78b58 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5577e9b78d10 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5577e9b78dd0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5577e9b790a0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5577e9b78f50 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5577e9b78fc8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b791c8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5577e9b793a0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5577e9b79280 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5577e9b79300 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5577e9b79588 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5577e9b79468 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5577e9b794e8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5577e9b798f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5577e9b79648 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5577e9b796c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5577e9b79740 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5577e9b846b0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9b84690 <col:106> 'int' 0
| `-ParmVarDecl 0x5577e9b797b8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5577e9b846e8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5577e9b846c8 <col:126> 'int' 0
|-CXXMethodDecl 0x5577e9b79c98 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5577e9b799c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5577e9b79a60 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5577e9b79ae0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5577e9b79b58 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5577e9b84720 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5577e9b84700 <col:114> 'int' 0
|-CXXMethodDecl 0x5577e9b7a028 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5577e9b79d70 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5577e9b79de8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5577e9b79e68 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5577e9b84738 <col:96> 'int' 0
| `-ParmVarDecl 0x5577e9b79ee0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5577e9b84778 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5577e9b84758 <col:116> 'int' 0
|-CXXMethodDecl 0x5577e9b7a3a8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5577e9b7a0f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5577e9b7a170 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b7a1f0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5577e9b847b0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9b84790 <col:109> 'int' 0
| `-ParmVarDecl 0x5577e9b7a268 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5577e9b847e8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5577e9b847c8 <col:129> 'int' 0
|-CXXMethodDecl 0x5577e9b7a728 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5577e9b7a478 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5577e9b7a4f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b7a570 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5577e9b7a5e8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5577e9b84820 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5577e9b84800 <col:117> 'int' 0
|-CXXMethodDecl 0x5577e9b7aab8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5577e9b7a800 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7a878 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b7a8f8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5577e9b84838 <col:99> 'int' 0
| `-ParmVarDecl 0x5577e9b7a970 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5577e9b84878 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5577e9b84858 <col:119> 'int' 0
|-CXXMethodDecl 0x5577e9b7aed8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5577e9b7ab88 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5577e9b7ac08 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5577e9b7ac80 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b7ad00 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5577e9b848b0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9b84890 <col:108> 'int' 0
| `-ParmVarDecl 0x5577e9b7ad80 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5577e9b848e8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5577e9b848c8 <col:141> 'int' 0
|-CXXMethodDecl 0x5577e9b7b2f8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5577e9b7afb0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5577e9b7b030 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5577e9b7b0a8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b7b128 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5577e9b7b1a8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5577e9b84900 <col:121> 'int' 0
|-CXXMethodDecl 0x5577e9b7b728 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5577e9b7b3d8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5577e9b7b458 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5577e9b7b4d0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b7b550 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5577e9b84920 <col:98> 'int' 0
| `-ParmVarDecl 0x5577e9b7b5d0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5577e9b84940 <col:123> 'int' 0
|-CXXMethodDecl 0x5577e9b7b9f0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5577e9b7b800 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5577e9b7b880 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5577e9b7b900 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5577e9b84960 <col:80> 'int' 0
|-EnumDecl 0x5577e9b7baa8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5577e9b7bbb0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5577e9b7be40 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b7bb90 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5577e9b7bb70 <col:42> 'int' 1
| |-EnumConstantDecl 0x5577e9b7bc40 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5577e9b7be58 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b7bc20 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5577e9b7bc00 <col:40> 'int' 2
| |-EnumConstantDecl 0x5577e9b7bcd0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5577e9b7be70 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b7bcb0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5577e9b7bc90 <col:44> 'int' 4
| |-EnumConstantDecl 0x5577e9b7bd60 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5577e9b7be88 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b7bd40 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5577e9b7bd20 <col:36> 'int' 7
| `-EnumConstantDecl 0x5577e9b7bdf0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5577e9b7bea0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b7bdd0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5577e9b7bdb0 <col:34> 'int' 6
|-CXXMethodDecl 0x5577e9b7c158 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5577e9b7bec8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5577e9b7bf68 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5577e9b7bfe8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5577e9b7c060 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5577e9b84a18 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5577e9b84a00 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5577e9b849e8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5577e9b849c8 <col:98, col:105> 'String' (CXXTemporary 0x5577e9b849c8)
|           `-CXXTemporaryObjectExpr 0x5577e9b84990 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5577e9b7c3f8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5577e9b7c228 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5577e9b7c2a0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5577e9b7c318 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5577e9b84ac8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5577e9b84ab0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5577e9b84a98 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5577e9b84a78 <col:94, col:101> 'String' (CXXTemporary 0x5577e9b84a78)
| |         `-CXXTemporaryObjectExpr 0x5577e9b84a40 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5577e9b852b0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5577e9b85228 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5577e9b851f8 <col:9> '<bound member function type>' ->add_task_handlers 0x5577e9b7c158
|     | `-CXXThisExpr 0x5577e9b851e8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5577e9b85268 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e9b85168 <col:27> 'Task *' lvalue ParmVar 0x5577e9b7c228 'task' 'Task *'
|     |-ImplicitCastExpr 0x5577e9b85280 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e9b85188 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5577e9b7c2a0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5577e9b85298 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5577e9b851a8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5577e9b7bdf0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5577e9b851c8 <col:62> 'const String' lvalue ParmVar 0x5577e9b7c318 'prefix' 'const String &'
|-CXXMethodDecl 0x5577e9b7c608 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5577e9b7c4c0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5577e9b7c538 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5577e9b84b78 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5577e9b84b60 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5577e9b84b48 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5577e9b84b28 <col:70, col:77> 'String' (CXXTemporary 0x5577e9b84b28)
| |         `-CXXTemporaryObjectExpr 0x5577e9b84af0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5577e9b85488 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5577e9b85400 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5577e9b853d0 <col:9> '<bound member function type>' ->add_task_handlers 0x5577e9b7c158
|     | `-CXXThisExpr 0x5577e9b853c0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5577e9b85440 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e9b85340 <col:27> 'Task *' lvalue ParmVar 0x5577e9b7c4c0 'task' 'Task *'
|     |-ImplicitCastExpr 0x5577e9b85458 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5577e9b85360 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5577e9b85470 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5577e9b85380 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5577e9b7bdf0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5577e9b853a0 <col:57> 'const String' lvalue ParmVar 0x5577e9b7c538 'prefix' 'const String &'
|-CXXMethodDecl 0x5577e9b7c8e8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5577e9b7c6d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7c750 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7c7c8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5577e9b7cb98 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5577e9b7c9b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7ca38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7cab8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5577e9b7ce88 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5577e9b7cc68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7cce8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7cd60 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5577e9b7d138 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5577e9b7cf58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7cfd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7d058 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5577e9b7d3e8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5577e9b7d208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7d288 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7d308 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5577e9b7d698 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5577e9b7d4b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7d538 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7d5b0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5577e9b7d948 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5577e9b7d768 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7d7e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7d868 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5577e9b7dc58 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5577e9b7da70 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7daf0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7db70 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5577e9b7df38 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5577e9b7dd28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7dda8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7de50 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5577e9b7e218 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5577e9b7e008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7e088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7e130 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5577e9b7e480 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5577e9b7e2e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5577e9b7e368 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5577e9b7e3e0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5577e9b7e728 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5577e9b7e550 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5577e9b7e5d0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5577e9b7e648 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5577e9b7e9d8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5577e9b7e7f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7e878 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7e8f8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5577e9b7ec88 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5577e9b7eaa8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7eb28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7eba0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5577e9b7ef38 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5577e9b7ed58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7edd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7ee50 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5577e9b7f208 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5577e9b7f008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7f088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5577e9b7f128 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5577e9b7f538 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5577e9b7f2d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5577e9b7f358 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5577e9b7f3d0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5577e9b7f448 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5577e9b84b90 <col:93> 'bool' false
|-CXXMethodDecl 0x5577e9b7f720 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5577e9b7f608 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5577e9b7f688 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5577e9b7f8f8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5577e9b7f7e0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5577e9b7f860 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5577e9b7fbd8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5577e9b7f9b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5577e9b7fa30 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5577e9b7fab0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5577e9b7fb28 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b7fec8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5577e9b7fca8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5577e9b7fd20 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5577e9b7fda0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5577e9b7fe18 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b80100 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5577e9b7ffa0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5577e9b80020 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5577e9b802e8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5577e9b801c8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5577e9b80248 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5577e9b80398 prev 0x5577e9b77b38 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5577e9b80490 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5577e9b80520 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5577e9b80598 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5577e9b80658 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5577e9b80720 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5577e9b80898 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5577e9b807d0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5577e9b80940 <col:24>
| | `-OptimizeNoneAttr 0x5577e9b80998 <col:34>
| |-CXXMethodDecl 0x5577e9b809e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5577e9b80c98 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5577e9b80a90 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5577e9b80b08 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5577e9b80b88 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5577e9b80d50 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5577e9b80d88 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5577e9b80df0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5577e9b80e78 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5577e9b81198 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5577e9b80f30 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5577e9b80fa8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5577e9b81020 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5577e9b810a0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5577e9b812b0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5577e9b88c28 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5577e9b88c28
| | `-ParmVarDecl 0x5577e9b88d38 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5577e9b88dd8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5577e9b88dd8
| | `-ParmVarDecl 0x5577e9b88ee8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5577e9c67e68 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5577e9b81328 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5577e9b813c8 <col:38> "" ""
|-CXXMethodDecl 0x5577e9b81458 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5577e9b814f8 <col:44> "" ""
|-AccessSpecDecl 0x5577e9b81568 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5577e9b81590 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5577e9b81690 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5577e9b816e0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b81670 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5577e9b81650 <col:27> 'int' 4
|-FieldDecl 0x5577e9b81798 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5577e9b81948 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5577e9b81a00 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5577e9b82a90 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5577e9b82af8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5577e9b82c48 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5577e9b82b88 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5577e9b82df8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5577e9b82d08 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5577e9b82fd8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5577e9b82eb8 <col:20> col:23 'int'
| `-ParmVarDecl 0x5577e9b82f38 <col:25> col:28 'int'
|-CXXMethodDecl 0x5577e9b83280 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9b830a0 <col:23> col:26 'int'
| |-ParmVarDecl 0x5577e9b83120 <col:28> col:31 'int'
| `-ParmVarDecl 0x5577e9b83198 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5577e9b83338 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5577e9b83400 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5577e9b83450 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5577e9b834a0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5577e9b83680 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5577e9b83530 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5577e9b835a8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b83928 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5577e9b83748 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5577e9b837c8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5577e9b83840 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9b83b48 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5577e9b839f8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5577e9b83a78 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5577e9b83e80 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5577e9b83c08 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5577e9b83c88 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5577e9b83d00 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5577e9b83d80 <col:57> col:60 'int'
|-CXXMethodDecl 0x5577e9b84068 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5577e9b83f50 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5577e9b83fd0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5577e9b841b8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5577e9b84128 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5577e9b84538 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5577e9b84278 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5577e9b842f8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5577e9b84370 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5577e9b843f0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5577e9b84650 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class TimedSink
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Timer _timer
       112 |     int _schedpos1
       120 |     class Timestamp _expiry_s
       120 |       union Timestamp::rep_t _t
       120 |         int64_t x
       128 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       128 |       TimerCallback callback
       136 |     void * _thunk
       144 |     class Element * _owner
       152 |     class RouterThread * _thread
       160 |   class Timestamp _interval
       160 |     union Timestamp::rep_t _t
       160 |       int64_t x
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b0bce0 prev 0x5577e9b02b20 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9b0bdd8 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5577e9b0be78 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x5577e9b12c40 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5577e9b13028 <col:11>
|-CXXConstructorDecl 0x5577e9b12d20 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e9b12e08 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5577e9b13770 <col:11>
|-CXXConstructorDecl 0x5577e9b12ea8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e9b12fb8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5577e9b14fc8 <col:11>
|-CXXDestructorDecl 0x5577e9b142d8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5577e981ae88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e981af98 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5577e981b860 <col:11>
|   `-ReturnStmt 0x5577e981b850 <col:11>
|     `-UnaryOperator 0x5577e981b838 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e981b828 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x5577e981b008 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5577e981b118 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5577e9ba9300 <col:11>
    `-ReturnStmt 0x5577e9ba92f0 <col:11>
      `-UnaryOperator 0x5577e9ba92d8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5577e9ba92c8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b01cd8 prev 0x5577e9b019e8 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9b01dd0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x5577e9b01e60 <col:19, col:25> col:19 public
|-TypedefDecl 0x5577e9b01e98 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x5577e9767060 'int32_t' sugar
|   |-Typedef 0x5577e967a268 'int32_t'
|   `-TypedefType 0x5577e96533b0 '__int32_t' sugar
|     |-Typedef 0x5577e9652fc8 '__int32_t'
|     `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9b01f00 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x5577e9767220 'int64_t' sugar
|   |-Typedef 0x5577e967a2d0 'int64_t'
|   `-TypedefType 0x5577e96534d0 '__int64_t' sugar
|     |-Typedef 0x5577e96530a8 '__int64_t'
|     `-BuiltinType 0x5577e9611390 'long'
|-EnumDecl 0x5577e9b01f58 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x5577e9b020d0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5577e9b020b0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5577e9b02088 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5577e9b02070 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x5577e9b02040 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5577e9b021c8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5577e9b021a8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5577e9b02180 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5577e9b02168 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5577e9b02140 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5577e9b02120 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x5577e9b02218 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5577e9b02320 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b02870 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b02300 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x5577e9b022e0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x5577e9b023b0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b02888 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b02390 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5577e9b02370 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5577e9b02440 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b028a0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b02420 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5577e9b02400 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5577e9b024d0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b028b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b024b0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5577e9b02490 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5577e9b02560 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b028d0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b02540 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5577e9b02520 <col:25> 'int' 1000
| |-EnumConstantDecl 0x5577e9b025f0 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b028e8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b025d0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x5577e9b025b0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x5577e9b02680 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b02900 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b02660 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5577e9b02640 <col:26> 'int' EnumConstant 0x5577e9b02320 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5577e9b02750 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5577e9b02918 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b02730 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x5577e9b02710 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x5577e9b026d0 <col:27> 'int' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x5577e9b026f0 <col:44> 'int' EnumConstant 0x5577e9b025f0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5577e9b02820 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5577e9b02930 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b02800 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x5577e9b027e0 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x5577e9b027a0 <col:27> 'int' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x5577e9b027c0 <col:44> 'int' EnumConstant 0x5577e9b024d0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5577e9b02948 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5577e9b02a50 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x5577e9b02aa0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b02a30 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x5577e9b02a10 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x5577e9b02ac8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x5577e9766c90 'uninitialized_type'
|   `-CXXRecord 0x5577e9766bf8 'uninitialized_type'
|-CXXRecordDecl 0x5577e9b02b20 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x5577e9b02c30 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b13038 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e9b13158 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x5577e9b13110 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x5577e9b130a0 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b13090 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5577e9b130d0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5577e9b13140 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5577e9b130f0 <col:19> 'int' 0
|-CXXConstructorDecl 0x5577e9b02e78 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b02cf0 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x5577e9b02d68 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5577e9b0e970 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5577e9b0e950 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b13170 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e9b132c0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5577e9b13248 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x5577e9b131d8 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b131c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5577e9b13290 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5577e9b13278 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5577e9b13208 <col:16> 'long' lvalue ParmVar 0x5577e9b02cf0 'sec' 'long'
|     `-ImplicitCastExpr 0x5577e9b132a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b13228 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b02d68 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5577e9b030d8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b02f48 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x5577e9b02fc0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5577e9b0e9a8 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5577e9b0e988 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b132d8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e9b13410 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x5577e9b133b0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5577e9b13340 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b13330 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5577e9b133e0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e9b13370 <col:16> 'int' lvalue ParmVar 0x5577e9b02f48 'sec' 'int'
|     `-ImplicitCastExpr 0x5577e9b133f8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b13390 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b02fc0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5577e9b03338 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b031a8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5577e9b03220 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5577e9b0e9e0 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5577e9b0e9c0 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b13428 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e9b13578 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x5577e9b13500 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x5577e9b13490 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b13480 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5577e9b13548 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5577e9b13530 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x5577e9b134c0 <col:16> 'unsigned long' lvalue ParmVar 0x5577e9b031a8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5577e9b13560 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b134e0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b03220 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5577e9b044d0 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b03408 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5577e9b03480 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5577e9b0ea18 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5577e9b0e9f8 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b13590 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e9b136e0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5577e9b13668 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x5577e9b135f8 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b135e8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5577e9b136b0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5577e9b13698 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5577e9b13628 <col:16> 'unsigned int' lvalue ParmVar 0x5577e9b03408 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x5577e9b136c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b13648 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b03480 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5577e9b04630 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x5577e9b045a0 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5577e9b047c8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x5577e9b04708 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5577e9b049f8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x5577e9b04900 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x5577e9b04ba8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x5577e9b04ae8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b13780 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x5577e9b136f8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x5577e9b04ae8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5577e9b137e0 <col:19, line:214:5>
|-CXXConstructorDecl 0x5577e9b04d78 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x5577e9b04cb8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b137f0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e9b138a0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5577e9b13878 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5577e9b13848 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x5577e9b04cb8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x5577e9b04f68 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x5577e9b04ee0 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x5577e9b01a80 'Timestamp'
|   | `-CXXRecord 0x5577e9b01cd8 'Timestamp'
|   `-ParenType 0x5577e9b04e80 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x5577e9b04e50 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x5577e9b02020 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5577e9b01e98 'seconds_type'
|         `-TypedefType 0x5577e9767060 'int32_t' sugar
|           |-Typedef 0x5577e967a268 'int32_t'
|           `-TypedefType 0x5577e96533b0 '__int32_t' sugar
|             |-Typedef 0x5577e9652fc8 '__int32_t'
|             `-BuiltinType 0x5577e9611370 'int'
|-CXXConversionDecl 0x5577e9b050a8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5577e9b05178 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x5577e9b139a8 <col:37, line:231:5>
|   `-ReturnStmt 0x5577e9b13998 <line:227:9, col:23>
|     `-BinaryOperator 0x5577e9b13978 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5577e9b13948 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5577e9b138f8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5577e9b0be78
|       |   `-MemberExpr 0x5577e9b138c8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
|       |     `-CXXThisExpr 0x5577e9b138b8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5577e9b13960 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5577e9b13928 <col:23> 'int' 0
|-CXXMethodDecl 0x5577e9b05238 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x5577e9b052f8 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b053b8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b05478 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b05538 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b056a8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x5577e9b055e8 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x5577e9b057f0 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5577e9b05760 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b058b8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5577e9b05958 <col:54> "" ""
|-CXXMethodDecl 0x5577e9b059e8 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5577e9b05a88 <col:54> "" ""
|-CXXMethodDecl 0x5577e9b05b18 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5577e9b05bb8 <col:54> "" ""
|-CXXMethodDecl 0x5577e9b05cb8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x5577e9b05d88 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x5577e9b05eb8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x5577e9b05fb0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x5577e9b060e8 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5577e9b13bc0 <col:39, line:271:5>
|   `-ReturnStmt 0x5577e9b13bb0 <line:267:9, col:61>
|     `-CallExpr 0x5577e9b13b50 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5577e9b13b38 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9b139c0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5577e9b0d158 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5577e9b13b80 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5577e9b13a20 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5577e9b0be78
|       |   `-MemberExpr 0x5577e9b139f0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
|       |     `-CXXThisExpr 0x5577e9b139e0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5577e9b13b98 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5577e9b13ac0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5577e9b13a90 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5577e9b13a50 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5577e9b13aa8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5577e9b13a70 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b025f0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b061a8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5577e9b13d80 <col:39, line:279:5>
|   `-ReturnStmt 0x5577e9b13d70 <line:275:9, col:61>
|     `-CallExpr 0x5577e9b13d10 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x5577e9b13cf8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9b13bd8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5577e9b0d158 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x5577e9b13d40 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5577e9b13c38 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5577e9b0be78
|       |   `-MemberExpr 0x5577e9b13c08 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
|       |     `-CXXThisExpr 0x5577e9b13bf8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5577e9b13d58 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x5577e9b13cd8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x5577e9b13ca8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5577e9b13c68 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x5577e9b13cc0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5577e9b13c88 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b024d0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b06268 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x5577e9b13f18 <col:39, line:287:5>
|   `-ReturnStmt 0x5577e9b13f08 <line:283:9, col:53>
|     `-BinaryOperator 0x5577e9b13ee8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x5577e9b13eb8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5577e9b13dd8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5577e9b0be78
|       |   `-MemberExpr 0x5577e9b13da8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
|       |     `-CXXThisExpr 0x5577e9b13d98 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5577e9b13ed0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x5577e9b13e98 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5577e9b13e78 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b13e48 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b13e08 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02320 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b13e60 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b13e28 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b06358 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5577e9b151b0 <col:40, line:293:5>
|   |-DeclStmt 0x5577e9b14060 <line:291:9, col:48>
|   | `-VarDecl 0x5577e9b13f40 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5577e9b14040 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5577e9b13fe8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5577e9b13fb8 <col:22> '<bound member function type>' ->subsec 0x5577e9b052f8
|   |     |   `-CXXThisExpr 0x5577e9b13fa8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5577e9b14028 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5577e9b14008 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02750 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5577e9b151a0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x5577e9b15188 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b15158 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b15140 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5577e9b15120 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5577e9b150f0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5577e9b14e88 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5577e9b14e70 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5577e9b14078 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5577e9b13f40 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5577e9b15090 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5577e9b15078 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5577e9b15048 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5577e9b14ea0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5577e9b14e10 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5577e9b14df8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5577e9b14da8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5577e9b01c28 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5577e9b14d48 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5577e9b140a8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5577e9b14098 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5577e9b14d90 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5577e9b14d78 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5577e9b14568 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5577e9b140d0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5577e9b14160 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5577e9b14130 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5577e9b140f0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02750 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5577e9b14148 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5577e9b14110 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5577e9b13f40 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5577e9b150c0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5577e9b14e58 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5577e9b14e48 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5577e9b06418 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5577e9b15708 <col:40, line:302:5>
|   |-DeclStmt 0x5577e9b15300 <line:297:9, col:48>
|   | `-VarDecl 0x5577e9b151e0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5577e9b152e0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x5577e9b15288 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5577e9b15258 <col:22> '<bound member function type>' ->subsec 0x5577e9b052f8
|   |     |   `-CXXThisExpr 0x5577e9b15248 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5577e9b152c8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5577e9b152a8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02820 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5577e9b156f8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x5577e9b156e0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b156b0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b15698 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5577e9b15678 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5577e9b15648 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5577e9b15570 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5577e9b15558 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x5577e9b15318 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5577e9b151e0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x5577e9b155e8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x5577e9b155d0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x5577e9b155a0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5577e9b15588 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x5577e9b154f8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5577e9b154e0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5577e9b154c0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5577e9b01c28 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5577e9b15460 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5577e9b15348 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5577e9b15338 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x5577e9b154a8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x5577e9b15490 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5577e9b15420 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5577e9b15370 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5577e9b15400 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5577e9b153d0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x5577e9b15390 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02820 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5577e9b153e8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x5577e9b153b0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5577e9b151e0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5577e9b15618 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5577e9b15540 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5577e9b15530 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x5577e9b064d8 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5577e9b15790 <col:40, line:306:5>
|   `-ReturnStmt 0x5577e9b15780 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5577e9b15750 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5577e9b15738 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9b15728 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5577e9b06678 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5577e9b06588 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b06848 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5577e9b06750 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5577e9b06938 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x5577e9b06aa8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x5577e9b069e8 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x5577e9b158d8 <col:56, line:320:5>
|   `-ReturnStmt 0x5577e9b158c8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x5577e9b158b0 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b15880 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b15868 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5577e9b15828 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5577e9b157f8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5577e9b157b8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b069e8 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x5577e9b15810 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5577e9b157d8 <col:31> 'int' 0
|-CXXMethodDecl 0x5577e9b06ce8 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b06b60 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b06bd8 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b15aa8 <col:72, line:326:5>
|   `-ReturnStmt 0x5577e9b15a98 <line:325:9, col:51>
|     `-ExprWithCleanups 0x5577e9b15a80 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b15a50 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b15a38 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5577e9b159f8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5577e9b159e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5577e9b15900 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b06b60 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5577e9b159a0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5577e9b15988 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5577e9b15920 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5577e9b0b5d0 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5577e9b159c8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5577e9b15940 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b06bd8 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b06e98 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5577e9b06da8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5577e9b16170 <col:56, line:337:5>
|   |-DeclStmt 0x5577e9b15da8 <line:329:9, col:51>
|   | `-VarDecl 0x5577e9b15ad0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5577e9b15d90 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5577e9b15d60 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5577e9b15d48 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5577e9b15d30 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5577e9b15d00 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5577e9b15ce8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5577e9b15cd0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5577e9b15bc0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5577e9b15f60 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5577e9b15e10 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5577e9b0be78
|   | | `-MemberExpr 0x5577e9b15de0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5577e9b0ce28
|   | |   `-DeclRefExpr 0x5577e9b15dc0 <col:9> 'Timestamp' lvalue Var 0x5577e9b15ad0 't' 'Timestamp'
|   | `-BinaryOperator 0x5577e9b15f40 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5577e9b15f10 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5577e9b15e40 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5577e9b06da8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5577e9b15f28 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5577e9b15ef0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5577e9b15ed0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5577e9b15ea0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5577e9b15e60 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5577e9b15eb8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5577e9b15e80 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b025f0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5577e9b16158 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5577e9b16128 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5577e9b16110 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5577e9b160f0 <col:16> 'Timestamp' lvalue Var 0x5577e9b15ad0 't' 'Timestamp'
|-CXXMethodDecl 0x5577e9b07060 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b06f50 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b06fc8 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b16328 <col:72, line:343:5>
|   `-ReturnStmt 0x5577e9b16318 <line:342:9, col:51>
|     `-ExprWithCleanups 0x5577e9b16300 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b162d0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b162b8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5577e9b16278 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5577e9b16260 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5577e9b161a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b06f50 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5577e9b16220 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5577e9b16208 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5577e9b161c8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5577e9b0b718 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5577e9b16248 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5577e9b161e8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b06fc8 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b071b0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5577e9b07120 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5577e9b16770 <col:56, line:354:5>
|   |-DeclStmt 0x5577e9b16518 <line:346:9, col:51>
|   | `-VarDecl 0x5577e9b16350 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5577e9b16500 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5577e9b164d0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5577e9b164b8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5577e9b164a0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5577e9b16470 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5577e9b16458 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5577e9b16440 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5577e9b16410 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5577e9b166d0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5577e9b16580 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5577e9b0be78
|   | | `-MemberExpr 0x5577e9b16550 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5577e9b0ce28
|   | |   `-DeclRefExpr 0x5577e9b16530 <col:9> 'Timestamp' lvalue Var 0x5577e9b16350 't' 'Timestamp'
|   | `-BinaryOperator 0x5577e9b166b0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x5577e9b16680 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5577e9b165b0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x5577e9b07120 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5577e9b16698 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5577e9b16660 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5577e9b16640 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x5577e9b16610 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x5577e9b165d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5577e9b16628 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x5577e9b165f0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b024d0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5577e9b16758 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5577e9b16728 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5577e9b16710 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5577e9b166f0 <col:16> 'Timestamp' lvalue Var 0x5577e9b16350 't' 'Timestamp'
|-CXXMethodDecl 0x5577e9b07378 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b07268 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b072e0 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b16928 <col:72, line:360:5>
|   `-ReturnStmt 0x5577e9b16918 <line:359:9, col:51>
|     `-ExprWithCleanups 0x5577e9b16900 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b168d0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b168b8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5577e9b16878 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5577e9b16860 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x5577e9b167a8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b07268 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5577e9b16820 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x5577e9b16808 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5577e9b167c8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5577e9b0b860 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5577e9b16848 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5577e9b167e8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b072e0 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b074c8 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x5577e9b07438 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5577e9b23298 <col:56, line:371:5>
|   |-DeclStmt 0x5577e9b16b18 <line:363:9, col:51>
|   | `-VarDecl 0x5577e9b16950 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x5577e9b16b00 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x5577e9b16ad0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5577e9b16ab8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x5577e9b16aa0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5577e9b16a70 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5577e9b16a58 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5577e9b16a40 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x5577e9b16a10 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x5577e9b231f8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x5577e9b16b80 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5577e9b0be78
|   | | `-MemberExpr 0x5577e9b16b50 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x5577e9b0ce28
|   | |   `-DeclRefExpr 0x5577e9b16b30 <col:9> 'Timestamp' lvalue Var 0x5577e9b16950 't' 'Timestamp'
|   | `-CallExpr 0x5577e9b23198 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x5577e9b23180 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x5577e9b16bb0 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5577e9b0d158 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x5577e9b231c8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x5577e9b16bd0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x5577e9b07438 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x5577e9b231e0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5577e9b23160 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5577e9b23130 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x5577e9b16bf0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02320 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5577e9b23148 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x5577e9b16c10 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5577e9b23280 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5577e9b23250 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5577e9b23238 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x5577e9b23218 <col:16> 'Timestamp' lvalue Var 0x5577e9b16950 't' 'Timestamp'
|-CXXMethodDecl 0x5577e9b075b8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x5577e9b233d8 <col:39, line:377:5>
|   `-ReturnStmt 0x5577e9b233c8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x5577e9b233b0 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9b23380 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9b23368 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5577e9b23328 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x5577e9b232d0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x5577e9b23310 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5577e9b232f0 <col:29> 'int' 1
|-CXXMethodDecl 0x5577e9b07678 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x5577e9b234b8 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5577e9b23470 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x5577e9b23400 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b233f0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5577e9b23430 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5577e9b234a0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5577e9b23450 <col:19> 'int' 0
|-CXXMethodDecl 0x5577e9b07878 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b07728 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b077a0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5577e9b0ea50 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5577e9b0ea30 <col:60> 'int' 0
| `-CompoundStmt 0x5577e9b236b0 <col:63, line:395:5>
|   `-BinaryOperator 0x5577e9b23690 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x5577e9b23510 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5577e9b0be78
|     | `-MemberExpr 0x5577e9b234e0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
|     |   `-CXXThisExpr 0x5577e9b234d0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5577e9b23670 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x5577e9b23600 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x5577e9b235a0 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x5577e9b23588 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5577e9b23570 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5577e9b23540 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b07728 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x5577e9b235e8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x5577e9b235c8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5577e9b23658 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5577e9b23640 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5577e9b23620 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b077a0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b07a48 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b07938 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b079b0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23808 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x5577e9b237c0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x5577e9b236d8 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b236c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5577e9b237f0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e9b23708 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b07938 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5577e9b23780 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5577e9b23768 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9b23728 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5577e9b0b718 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5577e9b237a8 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5577e9b23748 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b079b0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b07c18 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b07b08 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b07b80 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23960 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x5577e9b23918 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5577e9b23830 <col:9> '<bound member function type>' ->assign 0x5577e9b07878
|     | `-CXXThisExpr 0x5577e9b23820 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5577e9b23948 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e9b23860 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5577e9b07b08 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x5577e9b238d8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5577e9b238c0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9b23880 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x5577e9b0b860 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x5577e9b23900 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5577e9b238a0 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b07b80 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b07de8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b07cd8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b07d50 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5577e9b0ea88 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5577e9b0ea68 <col:57> 'int' 0
| `-DeprecatedAttr 0x5577e9b07e98 <col:75> "" ""
|-CXXMethodDecl 0x5577e9b08028 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b07f18 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b07f90 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9b080d8 <col:74> "" ""
|-CXXMethodDecl 0x5577e9b08268 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b08158 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5577e9b081d0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9b08318 <col:74> "" ""
|-CXXMethodDecl 0x5577e9b083a8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x5577e9b08448 <col:42> "" ""
|-CXXMethodDecl 0x5577e9b0ac80 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x5577e9b0ab60 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5577e9b0abe0 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x5577e9b0ad50 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x5577e9b0ae10 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x5577e9b0aeb0 <col:20>
| `-OptimizeNoneAttr 0x5577e9b0af08 <col:30>
|-CXXMethodDecl 0x5577e9b0af50 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x5577e9b0b010 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x5577e9b0b0d0 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5577e9b0b190 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5577e9b0b250 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5577e9b0b310 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x5577e9b0b3d0 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5577e9b0b490 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x5577e9b0b5d0 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0b540 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23aa8 <col:58, line:512:5>
|   `-ReturnStmt 0x5577e9b23a98 <line:511:9, col:53>
|     `-BinaryOperator 0x5577e9b23a78 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5577e9b23a48 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b23978 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0b540 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5577e9b23a60 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5577e9b23a28 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5577e9b23a08 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b239d8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b23998 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b239f0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b239b8 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b025f0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b0b718 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0b688 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23bf0 <col:58, line:516:5>
|   `-ReturnStmt 0x5577e9b23be0 <line:515:9, col:53>
|     `-BinaryOperator 0x5577e9b23bc0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5577e9b23b90 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b23ac0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0b688 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5577e9b23ba8 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5577e9b23b70 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5577e9b23b50 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b23b20 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b23ae0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b23b38 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b23b00 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b024d0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b0b860 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0b7d0 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23d38 <col:58, line:520:5>
|   `-ReturnStmt 0x5577e9b23d28 <line:519:9, col:53>
|     `-BinaryOperator 0x5577e9b23d08 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5577e9b23cd8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b23c08 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0b7d0 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5577e9b23cf0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5577e9b23cb8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x5577e9b23c98 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b23c68 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b23c28 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02320 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b23c80 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b23c48 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b0b9a8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0b918 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23e80 <col:60, line:524:5>
|   `-ReturnStmt 0x5577e9b23e70 <line:523:9, col:55>
|     `-BinaryOperator 0x5577e9b23e50 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5577e9b23e20 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b23d50 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0b918 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5577e9b23e38 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5577e9b23e00 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5577e9b23de0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b23db0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b23d70 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b23dc8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b23d90 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b025f0 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b0baf0 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0ba60 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b23fc8 <col:60, line:528:5>
|   `-ReturnStmt 0x5577e9b23fb8 <line:527:9, col:55>
|     `-BinaryOperator 0x5577e9b23f98 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x5577e9b23f68 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b23e98 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0ba60 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5577e9b23f80 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5577e9b23f48 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5577e9b23f28 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b23ef8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b23eb8 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b23f10 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b23ed8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b024d0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5577e9b0bc38 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0bba8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b24110 <col:60, line:532:5>
|   `-ReturnStmt 0x5577e9b24100 <line:531:9, col:55>
|     `-BinaryOperator 0x5577e9b240e0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5577e9b240b0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b23fe0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0bba8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5577e9b240c8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5577e9b24090 <col:25, col:55> 'int'
|           `-BinaryOperator 0x5577e9b24070 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x5577e9b24040 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x5577e9b24000 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02320 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x5577e9b24058 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x5577e9b24020 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5577e9b02680 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x5577e9b0bce0 prev 0x5577e9b02b20 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5577e9b0bdd8 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5577e9b0be78 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x5577e9b12c40 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5577e9b13028 <col:11>
| |-CXXConstructorDecl 0x5577e9b12d20 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5577e9b12e08 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5577e9b13770 <col:11>
| |-CXXConstructorDecl 0x5577e9b12ea8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5577e9b12fb8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5577e9b14fc8 <col:11>
| |-CXXDestructorDecl 0x5577e9b142d8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5577e981ae88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5577e981af98 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5577e981b860 <col:11>
| |   `-ReturnStmt 0x5577e981b850 <col:11>
| |     `-UnaryOperator 0x5577e981b838 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5577e981b828 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x5577e981b008 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x5577e981b118 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5577e9ba9300 <col:11>
|     `-ReturnStmt 0x5577e9ba92f0 <col:11>
|       `-UnaryOperator 0x5577e9ba92d8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9ba92c8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x5577e9b0bee0 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x5577e9b0bfe0 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5577e9b0c1e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b0bfc0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5577e9b0bfa0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5577e9b0c070 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5577e9b0c1f8 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b0c050 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x5577e9b0c030 <col:23> 'int' 1
| |-EnumConstantDecl 0x5577e9b0c100 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x5577e9b0c210 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b0c0e0 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x5577e9b0c0c0 <col:23> 'int' 2
| `-EnumConstantDecl 0x5577e9b0c190 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x5577e9b0c228 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b0c170 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5577e9b0c150 <col:27> 'int' 3
|-CXXMethodDecl 0x5577e9b0c268 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x5577e9b0c330 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x5577e9b0c538 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x5577e9b0c3e0 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5577e9b0c460 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x5577e9b0eaa0 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5577e9b0c748 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x5577e9b0c5f8 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5577e9b0c670 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x5577e9b0c818 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x5577e9b0c8d8 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x5577e9b0ca48 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x5577e9b0c988 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x5577e9b0cb10 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5577e9b0cbd0 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x5577e9b0cc90 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x5577e9b0cd50 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x5577e9b0cdf0 <line:670:3, col:10> col:3 private
|-FieldDecl 0x5577e9b0ce28 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x5577e9b0ce98 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5577e9b24128 <col:27, line:684:5>
|-CXXMethodDecl 0x5577e9b0cf58 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5577e9b24138 <col:27, line:696:5>
|-CXXMethodDecl 0x5577e9b0d158 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0d008 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5577e9b0d080 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b242c0 <col:66, line:700:5>
|   `-ReturnStmt 0x5577e9b242b0 <line:699:9, col:31>
|     `-CallExpr 0x5577e9b24250 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5577e9b24238 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9b241e8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5577e998f508 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x5577e9b24280 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x5577e9b241a8 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x5577e9b0d008 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x5577e9b24298 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5577e9b241c8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0d080 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b0d4c8 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b0d218 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x5577e9b0d290 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x5577e9b0d308 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x5577e9b0d380 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9b24610 <col:64, line:707:5>
|   |-DeclStmt 0x5577e9b24350 <line:704:9, col:24>
|   | `-VarDecl 0x5577e9b242e8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5577e9b24560 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5577e9b24368 <col:9> 'int32_t':'int' lvalue ParmVar 0x5577e9b0d290 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5577e9b24548 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x5577e9b244e0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x5577e9b244c8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b24448 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5577e99947d8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x5577e9b24518 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5577e9b243e8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x5577e9b0d308 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5577e9b24530 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x5577e9b24408 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9b0d380 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5577e9b24428 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x5577e9b242e8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x5577e9b245f0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x5577e9b24580 <col:9> 'int32_t':'int' lvalue ParmVar 0x5577e9b0d218 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x5577e9b245d8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x5577e9b245c0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x5577e9b245a0 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x5577e9b242e8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5577e9b0d768 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x5577e9b0d598 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x5577e9b0d610 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x5577e9b0d688 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x5577e9b0da08 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5577e9b0d830 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x5577e9b0d8a8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5577e9b0d920 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x5577e9b0db98 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x5577e9b0dad0 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x5577e9b0dd98 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x5577e9b0dc50 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x5577e9b0dcc8 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x5577e9b0e068 <line:717:5, col:73> col:24
| `-FunctionDecl 0x5577e9b0dfa8 parent 0x5577e9611278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5577e9b0de58 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x5577e9b0ded0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5577e9b0e288 <line:718:5, col:72> col:24
| `-FunctionDecl 0x5577e9b0e1c8 parent 0x5577e9611278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5577e9b0e0b8 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5577e9b0e130 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5577e9b0e450 <line:719:5, col:57> col:29
| `-FunctionDecl 0x5577e9b0e398 parent 0x5577e9611278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x5577e9b0e2d8 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x5577e9b0e6d8 <line:720:5, col:73> col:30
| `-FunctionDecl 0x5577e9b0e618 parent 0x5577e9611278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5577e9b0e4c8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5577e9b0e540 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x5577e9b0e8f8 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5577e9b0e838 parent 0x5577e9611278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5577e9b0e728 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5577e9b0e7a0 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x5577e9b14180 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e9b14268 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b14cd8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x5577e9b14c90 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5577e9b0ce28
| |     `-DeclRefExpr 0x5577e9b14c70 <col:7> 'const Timestamp' lvalue ParmVar 0x5577e9b14268 '' 'const Timestamp &'
| `-CompoundStmt 0x5577e9b14d38 <col:7>
|-CXXConstructorDecl 0x5577e9b143e8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e9b144f8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x5577e9b0ce28 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5577e9b14fd8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x5577e9b14f80 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5577e9b0ce28
| |     `-CXXStaticCastExpr 0x5577e9b14f50 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x5577e9b14f20 <col:7> 'Timestamp' lvalue ParmVar 0x5577e9b144f8 '' 'Timestamp &&'
| `-CompoundStmt 0x5577e9b15038 <col:7>
|-CXXDestructorDecl 0x5577e9b145a8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5577e981acd8 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e981ade8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x5577e981b8d8 <col:7>
|   |-CXXMemberCallExpr 0x5577e981b878 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x5577e981b7b8 <col:7> '<bound member function type>' .operator= 0x5577e981ae88
|   | | `-MemberExpr 0x5577e981b6c8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
|   | |   `-CXXThisExpr 0x5577e981b6b8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x5577e981b788 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x5577e9b0ce28
|   |   `-DeclRefExpr 0x5577e981b768 <col:7> 'const Timestamp' lvalue ParmVar 0x5577e981ade8 '' 'const Timestamp &'
|   `-ReturnStmt 0x5577e981b8c8 <col:7>
|     `-UnaryOperator 0x5577e981b8b0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e981b8a0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x5577e981b188 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5577e981b298 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5577e9ba9378 <col:7>
    |-CXXMemberCallExpr 0x5577e9ba9318 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5577e9ba9280 <col:7> '<bound member function type>' .operator= 0x5577e981b008
    | | `-MemberExpr 0x5577e9ba9150 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x5577e9b0ce28
    | |   `-CXXThisExpr 0x5577e9ba9140 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5577e9ba9250 <col:7> 'Timestamp::rep_t' xvalue ._t 0x5577e9b0ce28
    |   `-CXXStaticCastExpr 0x5577e9ba9220 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5577e9ba91f0 <col:7> 'Timestamp' lvalue ParmVar 0x5577e981b298 '' 'Timestamp &&'
    `-ReturnStmt 0x5577e9ba9368 <col:7>
      `-UnaryOperator 0x5577e9ba9350 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5577e9ba9340 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9ba6358 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x5577e9ba6488 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x5577e9ba6f78 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b90b88 prev 0x5577e9b72fd0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 referenced class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5577e9b90c80 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5577e9b90d10 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x5577e9b90d70 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5577e9b90e18 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5577e9b90f38 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x5577e9c67810 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x5577e9c67810
| |-CXXConstructorDecl 0x5577e9c678f0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x5577e9c678f0
| | `-ParmVarDecl 0x5577e9c679d8 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x5577e9c67a78 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x5577e9c67a78
|   `-ParmVarDecl 0x5577e9c67b88 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x5577e9b910d8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5577e9b91018 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x5577e9b91328 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x5577e9b91198 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x5577e9b91218 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x5577e9b914b8 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x5577e9b913f0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x5577e9b91638 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x5577e9b91578 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x5577e9b917e8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x5577e9b91728 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x5577e9b918e0 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x5577e9ba7150 <col:21, line:58:5>
|   `-IfStmt 0x5577e9ba7138 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x5577e9ba70a0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x5577e9ba7070 <col:6> '<bound member function type>' ->scheduled 0x5577e9b92138
|     |   `-ImplicitCastExpr 0x5577e9ba70c0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x5577e9ba7060 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5577e9ba7118 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5577e9ba70e8 <col:6> '<bound member function type>' ->unschedule 0x5577e9ba5800
|         `-CXXThisExpr 0x5577e9ba70d8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x5577e9b919e0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5577e9ba72f0 <col:26, line:65:5>
|   |-BinaryOperator 0x5577e9ba7210 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5577e9ba71a8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5577e9ba6488
|   | | `-MemberExpr 0x5577e9ba7178 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5577e9ba6548
|   | |   `-CXXThisExpr 0x5577e9ba7168 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5577e9ba71f8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5577e9ba71d8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5577e9ba69a8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5577e9ba72d0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x5577e9ba7240 <col:2> 'void *' lvalue ->_thunk 0x5577e9ba65c8
|     | `-CXXThisExpr 0x5577e9ba7230 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x5577e9ba72a8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x5577e9ba7270 <col:20> 'int' 1
|-CXXMethodDecl 0x5577e9b91b20 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x5577e9b91a90 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x5577e9ba7450 <col:52, line:71:5>
|   |-CStyleCastExpr 0x5577e9ba7340 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5577e9ba7310 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x5577e9b91a90 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x5577e9ba7430 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5577e9ba7400 <col:2> '<bound member function type>' ->assign 0x5577e9b919e0
|       `-CXXThisExpr 0x5577e9ba73f0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x5577e9b91cf0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x5577e9b91bd8 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5577e9b91c58 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5577e9ba75d0 <col:58, line:79:5>
|   |-BinaryOperator 0x5577e9ba7518 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5577e9ba74b0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5577e9ba6488
|   | | `-MemberExpr 0x5577e9ba7480 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5577e9ba6548
|   | |   `-CXXThisExpr 0x5577e9ba7470 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5577e9ba7500 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5577e9ba74e0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x5577e9b91bd8 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5577e9ba75b0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5577e9ba7548 <col:2> 'void *' lvalue ->_thunk 0x5577e9ba65c8
|     | `-CXXThisExpr 0x5577e9ba7538 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5577e9ba7598 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9ba7578 <col:11> 'void *' lvalue ParmVar 0x5577e9b91c58 'user_data' 'void *'
|-CXXMethodDecl 0x5577e9b91e40 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x5577e9b91db0 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5577e9ba7768 <col:35, line:87:5>
|   |-BinaryOperator 0x5577e9ba7698 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5577e9ba7630 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5577e9ba6488
|   | | `-MemberExpr 0x5577e9ba7600 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5577e9ba6548
|   | |   `-CXXThisExpr 0x5577e9ba75f0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5577e9ba7680 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5577e9ba7660 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5577e9ba6b80 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5577e9ba7748 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5577e9ba76c8 <col:2> 'void *' lvalue ->_thunk 0x5577e9ba65c8
|     | `-CXXThisExpr 0x5577e9ba76b8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5577e9ba7730 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5577e9ba7718 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5577e9ba76f8 <col:11> 'Element *' lvalue ParmVar 0x5577e9b91db0 'element' 'Element *'
|-CXXMethodDecl 0x5577e9b91f88 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x5577e9b91ef8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5577e9ba7900 <col:29, line:94:5>
|   |-BinaryOperator 0x5577e9ba7830 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5577e9ba77c8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x5577e9ba6488
|   | | `-MemberExpr 0x5577e9ba7798 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x5577e9ba6548
|   | |   `-CXXThisExpr 0x5577e9ba7788 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5577e9ba7818 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5577e9ba77f8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x5577e9ba6d58 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5577e9ba78e0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5577e9ba7860 <col:2> 'void *' lvalue ->_thunk 0x5577e9ba65c8
|     | `-CXXThisExpr 0x5577e9ba7850 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5577e9ba78c8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5577e9ba78b0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5577e9ba7890 <col:11> 'Task *' lvalue ParmVar 0x5577e9b91ef8 'task' 'Task *'
|-CXXMethodDecl 0x5577e9b92078 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5577e9ba79e0 <col:37, line:100:5>
|   `-ReturnStmt 0x5577e9ba79d0 <line:99:2, col:19>
|     `-BinaryOperator 0x5577e9ba79b0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5577e9ba7980 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5577e9ba7930 <col:9> 'Element *const' lvalue ->_owner 0x5577e9ba6628
|       |   `-CXXThisExpr 0x5577e9ba7920 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5577e9ba7998 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5577e9ba7960 <col:19> 'int' 0
|-CXXMethodDecl 0x5577e9b92138 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5577e9ba7aa0 <col:35, line:105:5>
|   `-ReturnStmt 0x5577e9ba7a90 <line:104:2, col:23>
|     `-BinaryOperator 0x5577e9ba7a70 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5577e9ba7a58 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5577e9ba7a08 <col:9> 'const int' lvalue ->_schedpos1 0x5577e9ba62a8
|       |   `-CXXThisExpr 0x5577e9ba79f8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5577e9ba7a38 <col:23> 'int' 0
|-CXXMethodDecl 0x5577e9b921f8 <line:116:5, line:118:5> line:116:29 expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5577e9ba7b08 <col:51, line:118:5>
|   `-ReturnStmt 0x5577e9ba7af8 <line:117:2, col:9>
|     `-MemberExpr 0x5577e9ba7ac8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|       `-CXXThisExpr 0x5577e9ba7ab8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5577e9b922b8 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5577e9ba8060 <col:37, line:136:5>
|   `-IfStmt 0x5577e9ba8038 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5577e9ba7bc8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5577e9ba7bb0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5577e9ba7b90 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5577e9ba7b60 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x5577e9b050a8
|     |       `-MemberExpr 0x5577e9ba7b30 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|     |         `-CXXThisExpr 0x5577e9ba7b20 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5577e9ba7fa8 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5577e9ba7f90 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5577e9ba7f60 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5577e9ba7f48 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5577e9ba7f10 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5577e9ba7ef8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5577e9ba7ed8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5577e9b33880 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5577e9ba7e78 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5577e9ba7e60 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5577e9ba7d88 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5577e9ba7d70 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5577e9ba7d50 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5577e9b33540 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5577e9ba7cf0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5577e9ba7bf0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|     |         |     |   `-CXXThisExpr 0x5577e9ba7be0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5577e9ba7d38 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5577e9ba7d20 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5577e9ba7cd0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5577e9ba7cb8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5577e9ba7c58 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5577e9b26ba0 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5577e9ba7ec0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5577e9ba7ea8 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5577e9ba7e40 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5577e9ba7e28 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5577e9ba7df8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5577e99820f0 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5577e9ba8028 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5577e9ba7ff8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5577e9ba7fc8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|           `-CXXThisExpr 0x5577e9ba7fb8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x5577e9b92378 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5577e9ba8148 <col:35, line:141:5>
|   `-ReturnStmt 0x5577e9ba8138 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5577e9ba8100 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5577e9ba80d0 <col:9, col:17> '<bound member function type>' ->router 0x5577e9b85730
|         `-ImplicitCastExpr 0x5577e9ba8120 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5577e9ba80b8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5577e9ba8088 <col:9> 'Element *const' lvalue ->_owner 0x5577e9ba6628
|               `-CXXThisExpr 0x5577e9ba8078 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5577e9b92438 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5577e9ba81c8 <col:37, line:146:5>
|   `-ReturnStmt 0x5577e9ba81b8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5577e9ba81a0 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5577e9ba8170 <col:9> 'Element *const' lvalue ->_owner 0x5577e9ba6628
|         `-CXXThisExpr 0x5577e9ba8160 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5577e9b924f8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5577e9ba8248 <col:41, line:151:5>
|   `-ReturnStmt 0x5577e9ba8238 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5577e9ba8220 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5577e9ba81f0 <col:9> 'RouterThread *const' lvalue ->_thread 0x5577e9ba6688
|         `-CXXThisExpr 0x5577e9ba81e0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x5577e9b925c0 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x5577e9b927b8 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5577e9b92670 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5577e9b926e8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5577e9ba6f68 <col:50> 'bool' false
|-CXXMethodDecl 0x5577e9b92938 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5577e9b92878 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5577e9ba4af0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5577e9b929f0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5577e9ba4c38 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x5577e9ba4ba8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x5577e9ba4d80 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5577e9ba4cf0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5577e9ba4ec8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5577e9ba4e38 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x5577e9ba4f90 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5577e9ba83b0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5577e9ba8398 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5577e9ba8340 <col:2, col:47> 'void'
|       |-MemberExpr 0x5577e9ba8270 <col:2> '<bound member function type>' ->schedule_at_steady 0x5577e9ba4af0
|       | `-CXXThisExpr 0x5577e9ba8260 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba8380 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5577e9ba8368 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5577e9ba8320 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5577e9ba8308 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5577e9ba82d8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5577e99820f0 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5577e9ba50d0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x5577e9ba5040 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5577e9ba5218 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba5188 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9ba8538 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5577e9ba8520 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5577e9ba84c8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5577e9ba83d8 <col:2> '<bound member function type>' ->schedule_after 0x5577e9ba50d0
|       | `-CXXThisExpr 0x5577e9ba83c8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba8508 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5577e9ba84f0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5577e9ba8488 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5577e9ba8458 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5577e9ba8418 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9ba5188 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5577e9ba8470 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5577e9ba8438 <col:38> 'int' 0
|-CXXMethodDecl 0x5577e9ba5360 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba52d0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9ba87a8 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5577e9ba8790 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5577e9ba8738 <col:2, col:49> 'void'
|       |-MemberExpr 0x5577e9ba8560 <col:2> '<bound member function type>' ->schedule_after 0x5577e9ba50d0
|       | `-CXXThisExpr 0x5577e9ba8550 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba8778 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5577e9ba8760 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5577e9ba86e0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5577e9ba86c8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5577e9ba8638 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5577e9b06e98 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5577e9ba8720 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5577e9ba8708 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5577e9ba8618 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9ba52d0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9ba54a8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x5577e9ba5418 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5577e9ba8988 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5577e9ba8970 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5577e9ba8918 <col:2, col:38> 'void'
|       |-MemberExpr 0x5577e9ba87d0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5577e9ba4af0
|       | `-CXXThisExpr 0x5577e9ba87c0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba8958 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5577e9ba8940 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5577e9ba88e0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5577e9ba88c8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5577e9ba88a8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5577e9b33540 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5577e9ba8878 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5577e9ba8860 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5577e9ba8810 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|             |     `-CXXThisExpr 0x5577e9ba8800 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5577e9ba8840 <col:33> 'const Timestamp' lvalue ParmVar 0x5577e9ba5418 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x5577e9ba55f0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba5560 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9ba8c60 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5577e9ba8c48 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5577e9ba8bf0 <col:2, col:79> 'void'
|       |-MemberExpr 0x5577e9ba89b0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5577e9ba4af0
|       | `-CXXThisExpr 0x5577e9ba89a0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba8c30 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5577e9ba8c18 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5577e9ba8bb0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5577e9ba8ae8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5577e9ba8ad0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5577e9ba8a60 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5577e9ba8a30 <col:31, col:41> '<bound member function type>' .sec 0x5577e9983be8
|             | |     `-ImplicitCastExpr 0x5577e9ba8a80 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5577e9ba8a00 <col:31> 'Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|             | |         `-CXXThisExpr 0x5577e9ba89f0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5577e9ba8ab8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5577e9ba8a98 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9ba5560 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5577e9ba8b78 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5577e9ba8b48 <col:60, col:70> '<bound member function type>' .subsec 0x5577e99842e0
|                 `-ImplicitCastExpr 0x5577e9ba8b98 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5577e9ba8b18 <col:60> 'Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|                     `-CXXThisExpr 0x5577e9ba8b08 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x5577e9ba5738 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba56a8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5577e9ba8f98 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5577e9ba8f80 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5577e9ba8f28 <col:2, col:65> 'void'
|       |-MemberExpr 0x5577e9ba8c88 <col:2> '<bound member function type>' ->schedule_at_steady 0x5577e9ba4af0
|       | `-CXXThisExpr 0x5577e9ba8c78 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba8f68 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5577e9ba8f50 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5577e9ba8ef0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5577e9ba8ed8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5577e9ba8eb8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5577e9b33540 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5577e9ba8e58 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5577e9ba8e40 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5577e9ba8cc8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|             |     `-CXXThisExpr 0x5577e9ba8cb8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5577e9ba8ea0 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5577e9ba8e88 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5577e9ba8de8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5577e9ba8dd0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5577e9ba8da0 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5577e9b06e98 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5577e9ba8e28 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5577e9ba8e10 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5577e9ba8d80 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x5577e9ba56a8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9ba5800 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5577e9ba58c0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5577e9ba9460 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5577e9ba8ff0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5577e9ba8fc0 <col:2> '<bound member function type>' ->unschedule 0x5577e9ba5800
|   |   `-CXXThisExpr 0x5577e9ba8fb0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5577e9ba9448 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5577e9ba9410 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5577e9ba93f8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9ba90a8 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x5577e981b188 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5577e9ba9020 <col:2> 'Timestamp' lvalue ->_expiry_s 0x5577e9ba6308
|       | `-CXXThisExpr 0x5577e9ba9010 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5577e9ba9090 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5577e9ba9060 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x5577e9ba5980 <line:304:5, line:310:5> line:304:29 adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5577e9ba97b8 <col:42, line:310:5>
|   |-IfStmt 0x5577e9ba9600 <line:306:2, line:307:23>
|   | |-CallExpr 0x5577e9ba9530 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5577e9ba9518 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5577e9ba94b8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x5577e9b25010 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5577e9ba95f0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5577e9ba95d8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5577e9ba95a8 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5577e9ba9590 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5577e9ba9560 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5577e9ba97a8 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5577e9ba9790 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5577e9ba9760 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5577e9ba9748 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5577e9ba9708 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5577e9ba96f0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5577e9ba96c0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x5577e9b071b0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5577e9ba9730 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5577e9ba96a0 <col:30> 'int' 500
|-CXXMethodDecl 0x5577e9ba5ac0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba5a30 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9ba5b68 <col:69> "" ""
|-CXXMethodDecl 0x5577e9ba5c78 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba5be8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9ba5d20 <col:70> "" ""
|-CXXMethodDecl 0x5577e9ba5e30 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba5da0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9ba5ed8 <col:71> "" ""
|-CXXMethodDecl 0x5577e9ba5fe8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5577e9ba5f58 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9ba6090 <col:72> "" ""
|-EnumDecl 0x5577e9ba6100 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5577e9ba6200 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x5577e9ba6250 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9ba61e0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5577e9ba61c0 <col:25> 'int' 1
|-AccessSpecDecl 0x5577e9ba6268 <line:339:3, col:10> col:3 private
|-FieldDecl 0x5577e9ba62a8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x5577e9ba6308 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x5577e9ba6358 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x5577e9ba6488 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x5577e9ba6f78 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x5577e9ba6548 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x5577e9ba65c8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5577e9ba6628 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x5577e9ba6688 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x5577e9ba67d8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x5577e9ba66e8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x5577e9ba69a8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5577e9ba6890 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5577e9ba6910 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x5577e9ba6b80 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5577e9ba6a68 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5577e9ba6ae8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x5577e9ba6d58 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x5577e9ba6c40 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x5577e9ba6cc0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x5577e9ba6f28 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9baaad0 <../elements/standard/timedsink.hh:20:1, line:42:1> line:20:7 class TimedSink definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5577e9baac28 <col:1, col:7> col:7 implicit referenced class TimedSink
|-AccessSpecDecl 0x5577e9baacb8 <col:36, col:42> col:36 public
|-CXXConstructorDecl 0x5577e9baad40 <line:22:3, col:13> col:3 TimedSink 'void ()'
|-CXXMethodDecl 0x5577e9baae40 <line:24:3, col:56> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x5577e9b74ae8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5577e9bac430 <col:34, col:56>
|   `-ReturnStmt 0x5577e9bac420 <col:36, col:43>
|     `-ImplicitCastExpr 0x5577e9bac408 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5577e9bac3e0 <col:43> 'const char [10]' lvalue "TimedSink"
|-CXXMethodDecl 0x5577e9baaf08 <line:25:3, col:54> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x5577e9b74bb0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5577e9bac490 <col:34, col:54>
|   `-ReturnStmt 0x5577e9bac480 <col:36, col:43>
|     `-ImplicitCastExpr 0x5577e9bac468 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5577e9bac448 <col:43> 'const char []' lvalue Var 0x5577e9b74dd8 'PORTS_1_0' 'const char []'
|-CXXMethodDecl 0x5577e9baafd0 <line:26:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x5577e9b74f78 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5577e9bac4f0 <col:34, col:49>
|   `-ReturnStmt 0x5577e9bac4e0 <col:36, col:43>
|     `-ImplicitCastExpr 0x5577e9bac4c8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5577e9bac4a8 <col:43> 'const char []' lvalue Var 0x5577e9b75148 'PULL' 'const char []'
|-CXXMethodDecl 0x5577e9bab2a0 <line:28:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5577e9b76380 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5577e9bab150 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x5577e9bab1c8 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9bab3f8 <line:29:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5577e9b765d0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5577e9bab360 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9bab4c0 <line:30:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x5577e9b76450 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5577e9bab600 <line:32:3, col:25> col:8 run_timer 'void (Timer *)'
| |-Overrides: [ 0x5577e9b74008 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x5577e9bab570 <col:18, col:24> col:25 'Timer *'
|-AccessSpecDecl 0x5577e9bab6a8 <line:34:3, col:10> col:3 private
|-FieldDecl 0x5577e9bab6e0 <line:36:5, col:11> col:11 _timer 'Timer'
|-FieldDecl 0x5577e9bab740 <line:37:5, col:15> col:15 _interval 'Timestamp'
|-CXXMethodDecl 0x5577e9bab8b8 <line:39:5, col:49> col:19 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5577e9bab7a0 <col:32, col:40> col:41 'Element *'
| `-ParmVarDecl 0x5577e9bab820 <col:43, col:48> col:49 'void *'
|-CXXMethodDecl 0x5577e9babb98 <line:40:5, col:79> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5577e9bab978 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x5577e9bab9f0 <col:46, col:54> col:55 'Element *'
| |-ParmVarDecl 0x5577e9baba70 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x5577e9babae8 <col:65, col:78> col:79 'ErrorHandler *'
|-CXXConstructorDecl 0x5577e9babc88 <line:20:7> col:7 implicit TimedSink 'void (const TimedSink &)' inline default_delete noexcept-unevaluated 0x5577e9babc88
| `-ParmVarDecl 0x5577e9babd98 <col:7> col:7 'const TimedSink &'
|-CXXConstructorDecl 0x5577e9babe38 <col:7> col:7 implicit TimedSink 'void (TimedSink &&)' inline default_delete noexcept-unevaluated 0x5577e9babe38
| `-ParmVarDecl 0x5577e9babf48 <col:7> col:7 'TimedSink &&'
|-CXXMethodDecl 0x5577e9babfe8 <col:7> col:7 implicit operator= 'TimedSink &(const TimedSink &)' inline default_delete noexcept-unevaluated 0x5577e9babfe8
| `-ParmVarDecl 0x5577e9bac0f8 <col:7> col:7 'const TimedSink &'
|-CXXMethodDecl 0x5577e9bac168 <col:7> col:7 implicit operator= 'TimedSink &(TimedSink &&)' inline default_delete noexcept-unevaluated 0x5577e9bac168
| `-ParmVarDecl 0x5577e9bac278 <col:7> col:7 'TimedSink &&'
`-CXXDestructorDecl 0x5577e9bac300 <col:7> col:7 implicit ~TimedSink 'void ()' inline default noexcept-unevaluated 0x5577e9bac300
  `-Overrides: [ 0x5577e9b73688 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.TimedSink = type { %class.Element.base, %class.Timer, %class.Timestamp }
  NonVirtualBaseLLVMType:%class.TimedSink = type { %class.Element.base, %class.Timer, %class.Timestamp }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9947250 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5577e9947368 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5577e9947408 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5577e9947468 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5577e99474c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5577e9947578 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9947880 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9947998 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5577e9947a40 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5577e9947aa8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5577e9947b38 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5577e994dbd0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5577e994e008 <col:12>
|-CXXConstructorDecl 0x5577e994dcd8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e994dde8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5577e9947a40 'data' 'const char *'
| | `-ImplicitCastExpr 0x5577e9950590 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5577e9950560 <col:12> 'const char *const' lvalue .data 0x5577e9947a40
| |     `-DeclRefExpr 0x5577e9950540 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e994dde8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5577e9947aa8 'length' 'int'
| | `-ImplicitCastExpr 0x5577e9950620 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5577e99505f0 <col:12> 'const int' lvalue .length 0x5577e9947aa8
| |     `-DeclRefExpr 0x5577e99505d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e994dde8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5577e9947b38 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5577e99506b0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5577e9950680 <col:12> 'String::memo_t *const' lvalue .memo 0x5577e9947b38
| |     `-DeclRefExpr 0x5577e9950660 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e994dde8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5577e9950708 <col:12>
|-CXXConstructorDecl 0x5577e994de88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5577e994de88
| `-ParmVarDecl 0x5577e994df98 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5577e99534f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5577e995ef08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e995f018 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5577e995f530 <col:12>
|   |-BinaryOperator 0x5577e995f348 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5577e995f300 <col:12> 'const char *' lvalue ->data 0x5577e9947a40
|   | | `-CXXThisExpr 0x5577e995f2f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5577e995f330 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5577e995f2c0 <col:12> 'const char *const' lvalue .data 0x5577e9947a40
|   |     `-DeclRefExpr 0x5577e995f2a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e995f018 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5577e995f410 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5577e995f3c8 <col:12> 'int' lvalue ->length 0x5577e9947aa8
|   | | `-CXXThisExpr 0x5577e995f3b8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5577e995f3f8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5577e995f388 <col:12> 'const int' lvalue .length 0x5577e9947aa8
|   |     `-DeclRefExpr 0x5577e995f368 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e995f018 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5577e995f4d8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5577e995f490 <col:12> 'String::memo_t *' lvalue ->memo 0x5577e9947b38
|   | | `-CXXThisExpr 0x5577e995f480 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5577e995f4c0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5577e995f450 <col:12> 'String::memo_t *const' lvalue .memo 0x5577e9947b38
|   |     `-DeclRefExpr 0x5577e995f430 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e995f018 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5577e995f520 <col:12>
|     `-UnaryOperator 0x5577e995f508 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e995f4f8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5577e995f088 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5577e995f088
  `-ParmVarDecl 0x5577e995f198 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e993e7c0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5577e993e8d8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5577e993e968 <col:16, col:22> col:16 public
|-TypedefDecl 0x5577e993e9a8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5577e9611dc0 'const char *'
|   `-QualType 0x5577e9611311 'const char' const
|     `-BuiltinType 0x5577e9611310 'char'
|-TypedefDecl 0x5577e993ea30 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5577e993ea00 'String::const_iterator' sugar
|   |-Typedef 0x5577e993e9a8 'const_iterator'
|   `-PointerType 0x5577e9611dc0 'const char *'
|     `-QualType 0x5577e9611311 'const char' const
|       `-BuiltinType 0x5577e9611310 'char'
|-TypedefDecl 0x5577e993eba0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5577e993eb10 'int (String::*)() const'
|   |-RecordType 0x5577e993e850 'String'
|   | `-CXXRecord 0x5577e993e7c0 'String'
|   `-ParenType 0x5577e993eab0 'int () const' sugar
|     `-FunctionProtoType 0x5577e9912640 'int () const' const cdecl
|       `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e993ec08 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5577e9767220 'int64_t' sugar
|   |-Typedef 0x5577e967a2d0 'int64_t'
|   `-TypedefType 0x5577e96534d0 '__int64_t' sugar
|     |-Typedef 0x5577e96530a8 '__int64_t'
|     `-BuiltinType 0x5577e9611390 'long'
|-TypedefDecl 0x5577e993ec70 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5577e9767140 'uint64_t' sugar
|   |-Typedef 0x5577e967a470 'uint64_t'
|   `-TypedefType 0x5577e9653560 '__uint64_t' sugar
|     |-Typedef 0x5577e9653118 '__uint64_t'
|     `-BuiltinType 0x5577e9611430 'unsigned long'
|-TypedefDecl 0x5577e993ed00 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5577e993ecd0 'String::intmax_t' sugar
|   |-Typedef 0x5577e993ec08 'intmax_t'
|   `-TypedefType 0x5577e9767220 'int64_t' sugar
|     |-Typedef 0x5577e967a2d0 'int64_t'
|     `-TypedefType 0x5577e96534d0 '__int64_t' sugar
|       |-Typedef 0x5577e96530a8 '__int64_t'
|       `-BuiltinType 0x5577e9611390 'long'
|-TypedefDecl 0x5577e993ed90 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5577e993ed60 'String::uintmax_t' sugar
|   |-Typedef 0x5577e993ec70 'uintmax_t'
|   `-TypedefType 0x5577e9767140 'uint64_t' sugar
|     |-Typedef 0x5577e967a470 'uint64_t'
|     `-TypedefType 0x5577e9653560 '__uint64_t' sugar
|       |-Typedef 0x5577e9653118 '__uint64_t'
|       `-BuiltinType 0x5577e9611430 'unsigned long'
|-CXXConstructorDecl 0x5577e993ee50 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5577e993eff8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5577e993ef38 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5577e993f1a8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5577e993f0e8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5577e993f300 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5577e993f270 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5577e993f518 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5577e993f3c8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5577e993f448 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5577e993f738 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5577e993f5e8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5577e993f668 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5577e993f958 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5577e993f808 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5577e993f888 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5577e993fb78 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5577e993fa28 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5577e993faa8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5577e993fd08 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5577e993fc40 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5577e993fe88 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5577e993fdc8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5577e9940018 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5577e993ff50 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5577e9940170 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5577e99400e0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5577e99402c8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5577e9940238 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5577e9940420 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5577e9940390 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5577e99405a8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5577e99404e8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5577e9940738 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5577e9940670 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5577e99408c8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5577e9940800 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5577e9940a58 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5577e9940990 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5577e9940b50 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5577e9940c78 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5577e9940df8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5577e9940d30 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5577e9940f48 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5577e9940eb8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5577e9941000 <col:63> "" ""
|-CXXMethodDecl 0x5577e9941148 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5577e9941088 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5577e9941358 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5577e9941208 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5577e9941288 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5577e9941578 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5577e9941420 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5577e99414a0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5577e9941858 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5577e9941638 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5577e99416b8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5577e994d6a0 <col:55> 'int' 10
| `-ParmVarDecl 0x5577e9941730 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5577e994d6c0 <col:76> 'bool' true
|-CXXMethodDecl 0x5577e9941b38 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5577e9941920 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5577e99419a0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5577e994d6d0 <col:56> 'int' 10
| `-ParmVarDecl 0x5577e9941a18 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5577e994d6f0 <col:77> 'bool' true
|-CXXMethodDecl 0x5577e9941c40 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5577e9941d08 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5577e9941dd0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5577e9941e70 <col:20>
| `-OptimizeNoneAttr 0x5577e9941ec8 <col:30>
|-CXXConversionDecl 0x5577e9941fb8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5577e9942088 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5577e9942148 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5577e9942238 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5577e99422f8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5577e9942478 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5577e99423b0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5577e99425c8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5577e9942538 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5577e99426b8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5577e9942778 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5577e99429c8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5577e9942830 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5577e99428b0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5577e9942c28 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5577e9942a90 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5577e9942b10 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5577e9942cf8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9942f08 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5577e9942db0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5577e9942e30 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5577e9943128 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5577e9942fd0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5577e9943050 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5577e99432b8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5577e99431f0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5577e99433a8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5577e9943518 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5577e9943458 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5577e9943728 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5577e99435d8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5577e9943658 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5577e9943940 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5577e99437e8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5577e9943860 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5577e9943ad0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5577e9943a00 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5577e9943cf0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5577e9943b90 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5577e9943c10 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5577e9943e40 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5577e9943db0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5577e9944018 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5577e9943f00 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5577e9943f80 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5577e9944168 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5577e99440d8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5577e9944380 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5577e9944220 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5577e99442a0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5577e994d700 <col:39> 'int' 0
|-CXXMethodDecl 0x5577e99445a0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5577e9944440 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5577e99444c0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5577e994d720 <col:48> 'int' 0
|-CXXMethodDecl 0x5577e9944780 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5577e9944660 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5577e99446e0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5577e994d740 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5577e9944850 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5577e9944910 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5577e99449d0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5577e9944a90 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5577e9944b50 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5577e9944cf8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5577e9944c00 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5577e9944e78 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5577e9944db0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5577e9945050 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5577e9944f38 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5577e99451c8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5577e9945108 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5577e9945310 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5577e9945280 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5577e9945460 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5577e99453d0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5577e9945638 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5577e9945520 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5577e99455a0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5577e9945818 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5577e9945700 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5577e9945780 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5577e9945968 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5577e99458d8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5577e9945b78 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5577e9945a28 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5577e9945aa8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5577e9945cd8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5577e9945c40 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5577e9945e30 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5577e9945d98 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5577e9945ed8 <col:57> "" ""
|-CXXMethodDecl 0x5577e9945fe8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5577e9945f58 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5577e9946138 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5577e99460a8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5577e99462b8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5577e99461f0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5577e9946380 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5577e9946440 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5577e9946500 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5577e99465a0 <col:49> "" ""
|-CXXMethodDecl 0x5577e9946630 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5577e99466f0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5577e99467e0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5577e99468a8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5577e9946968 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5577e9946a28 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5577e9946b20 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5577e9946be8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5577e9946cb0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5577e9946e88 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5577e9946d68 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5577e9946de8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5577e99470b0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5577e9946f50 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5577e9946fd0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5577e99471c0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5577e9947228 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5577e9947250 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5577e9947368 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5577e9947408 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5577e9947468 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5577e99474c8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5577e9947578 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5577e99475e0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5577e9947818 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5577e9947868 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e99477f8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5577e9947708 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5577e99476b0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5577e99476f0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5577e99476d0 <col:32> 'int' 8
|-CXXRecordDecl 0x5577e9947880 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5577e9947998 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5577e9947a40 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5577e9947aa8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5577e9947b38 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5577e994dbd0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5577e994e008 <col:12>
| |-CXXConstructorDecl 0x5577e994dcd8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5577e994dde8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5577e9947a40 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5577e9950590 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5577e9950560 <col:12> 'const char *const' lvalue .data 0x5577e9947a40
| | |     `-DeclRefExpr 0x5577e9950540 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e994dde8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5577e9947aa8 'length' 'int'
| | | `-ImplicitCastExpr 0x5577e9950620 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5577e99505f0 <col:12> 'const int' lvalue .length 0x5577e9947aa8
| | |     `-DeclRefExpr 0x5577e99505d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e994dde8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5577e9947b38 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5577e99506b0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5577e9950680 <col:12> 'String::memo_t *const' lvalue .memo 0x5577e9947b38
| | |     `-DeclRefExpr 0x5577e9950660 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e994dde8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5577e9950708 <col:12>
| |-CXXConstructorDecl 0x5577e994de88 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5577e994de88
| | `-ParmVarDecl 0x5577e994df98 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5577e99534f0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5577e995ef08 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5577e995f018 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5577e995f530 <col:12>
| |   |-BinaryOperator 0x5577e995f348 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5577e995f300 <col:12> 'const char *' lvalue ->data 0x5577e9947a40
| |   | | `-CXXThisExpr 0x5577e995f2f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5577e995f330 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5577e995f2c0 <col:12> 'const char *const' lvalue .data 0x5577e9947a40
| |   |     `-DeclRefExpr 0x5577e995f2a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e995f018 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5577e995f410 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5577e995f3c8 <col:12> 'int' lvalue ->length 0x5577e9947aa8
| |   | | `-CXXThisExpr 0x5577e995f3b8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5577e995f3f8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5577e995f388 <col:12> 'const int' lvalue .length 0x5577e9947aa8
| |   |     `-DeclRefExpr 0x5577e995f368 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e995f018 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5577e995f4d8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5577e995f490 <col:12> 'String::memo_t *' lvalue ->memo 0x5577e9947b38
| |   | | `-CXXThisExpr 0x5577e995f480 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5577e995f4c0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5577e995f450 <col:12> 'String::memo_t *const' lvalue .memo 0x5577e9947b38
| |   |     `-DeclRefExpr 0x5577e995f430 <col:12> 'const String::rep_t' lvalue ParmVar 0x5577e995f018 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5577e995f520 <col:12>
| |     `-UnaryOperator 0x5577e995f508 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5577e995f4f8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5577e995f088 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5577e995f088
|   `-ParmVarDecl 0x5577e995f198 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5577e9947bb0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5577e9947df8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5577e9947c18 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5577e9947c98 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5577e9947d10 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5577e994db90 <col:79, line:261:5>
|   |-BinaryOperator 0x5577e994d808 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5577e994d7a0 <col:2, col:5> 'const char *' lvalue .data 0x5577e9947a40
|   | | `-MemberExpr 0x5577e994d770 <col:2> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|   | |   `-CXXThisExpr 0x5577e994d760 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5577e994d7f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5577e994d7d0 <col:12> 'const char *' lvalue ParmVar 0x5577e9947c18 'data' 'const char *'
|   |-BinaryOperator 0x5577e994d8d0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5577e994d868 <col:2, col:5> 'int' lvalue .length 0x5577e9947aa8
|   | | `-MemberExpr 0x5577e994d838 <col:2> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|   | |   `-CXXThisExpr 0x5577e994d828 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5577e994d8b8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5577e994d898 <col:14> 'int' lvalue ParmVar 0x5577e9947c98 'length' 'int'
|   `-IfStmt 0x5577e994db78 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5577e994d9f0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5577e994d9d8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5577e994d9b8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5577e994d998 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5577e994d930 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|     |       | `-MemberExpr 0x5577e994d900 <col:7> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|     |       |   `-CXXThisExpr 0x5577e994d8f0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5577e994d980 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5577e994d960 <col:17> 'String::memo_t *' lvalue ParmVar 0x5577e9947d10 'memo' 'String::memo_t *'
|     `-CallExpr 0x5577e994db50 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5577e994db38 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e994da40 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5577e9936828 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5577e994daa8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5577e9947408
|         `-ImplicitCastExpr 0x5577e994da90 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5577e994da70 <col:27> 'String::memo_t *' lvalue ParmVar 0x5577e9947d10 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5577e99480a8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5577e9947ec8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5577e9947f48 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5577e9947fc0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5577e9947bb0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5577e994e018 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5577e994e1a8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5577e994e110 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5577e994e080 <col:2> '<bound member function type>' ->assign_memo 0x5577e9947df8
|     | `-ImplicitCastExpr 0x5577e994e148 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5577e994e070 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5577e994e160 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e994e0b0 <col:14> 'const char *' lvalue ParmVar 0x5577e9947ec8 'data' 'const char *'
|     |-ImplicitCastExpr 0x5577e994e178 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5577e994e0d0 <col:20> 'int' lvalue ParmVar 0x5577e9947f48 'length' 'int'
|     `-ImplicitCastExpr 0x5577e994e190 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5577e994e0f0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5577e9947fc0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5577e9948238 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5577e9948178 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5577e994e400 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5577e994e380 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5577e994e1d0 <col:2> '<bound member function type>' ->assign_memo 0x5577e9947df8
|     | `-CXXThisExpr 0x5577e994e1c0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5577e994e3b8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5577e994e250 <col:14, col:19> 'const char *' lvalue .data 0x5577e9947a40
|     |   `-MemberExpr 0x5577e994e220 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5577e9947bb0
|     |     `-DeclRefExpr 0x5577e994e200 <col:14> 'const String' lvalue ParmVar 0x5577e9948178 'x' 'const String &'
|     |-ImplicitCastExpr 0x5577e994e3d0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5577e994e2d0 <col:25, col:30> 'int' lvalue .length 0x5577e9947aa8
|     |   `-MemberExpr 0x5577e994e2a0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5577e9947bb0
|     |     `-DeclRefExpr 0x5577e994e280 <col:25> 'const String' lvalue ParmVar 0x5577e9948178 'x' 'const String &'
|     `-ImplicitCastExpr 0x5577e994e3e8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5577e994e350 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|         `-MemberExpr 0x5577e994e320 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5577e9947bb0
|           `-DeclRefExpr 0x5577e994e300 <col:38> 'const String' lvalue ParmVar 0x5577e9948178 'x' 'const String &'
|-CXXMethodDecl 0x5577e9948300 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5577e994edc0 <col:31, line:278:5>
|   `-IfStmt 0x5577e994eda8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5577e994e4a0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5577e994e488 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5577e994e458 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|     |     `-MemberExpr 0x5577e994e428 <col:6> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|     |       `-CXXThisExpr 0x5577e994e418 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5577e994ed80 <col:15, line:277:2>
|       |-ParenExpr 0x5577e994e950 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5577e994e920 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5577e994e5b0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5577e994e598 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5577e994e580 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5577e994e540 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5577e9947408
|       |   |       `-ImplicitCastExpr 0x5577e994e528 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5577e994e4f8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|       |   |           `-MemberExpr 0x5577e994e4c8 <col:27> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|       |   |             `-CXXThisExpr 0x5577e994e4b8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5577e994e610 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5577e994e5f0 <col:54> 'int' 0
|       |   `-CallExpr 0x5577e994e880 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5577e994e868 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5577e994e7e8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5577e994e8c0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5577e994e6f8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5577e994e8d8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5577e994e728 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5577e994e8f0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5577e994e760 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5577e994e908 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5577e994e7d0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5577e994e7b8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5577e994e780 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5577e994eca0 <line:274:6, line:275:22>
|       | |-CallExpr 0x5577e994eb60 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5577e994eb48 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5577e994eac0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5577e9937c70 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5577e994ea90 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5577e9947408
|       | |   `-ImplicitCastExpr 0x5577e994ea78 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5577e994ea48 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|       | |       `-MemberExpr 0x5577e994ea18 <col:40> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|       | |         `-CXXThisExpr 0x5577e994ea08 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5577e994ec60 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5577e994ec48 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5577e994eb88 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5577e994cae0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5577e994ec88 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5577e994ebe8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|       |       `-MemberExpr 0x5577e994ebb8 <col:15> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|       |         `-CXXThisExpr 0x5577e994eba8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5577e994ed60 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5577e994ecf8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5577e9947b38
|         | `-MemberExpr 0x5577e994ecc8 <col:6> 'String::rep_t' lvalue ->_r 0x5577e9947bb0
|         |   `-CXXThisExpr 0x5577e994ecb8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5577e994ed48 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5577e994ed28 <col:16> 'int' 0
|-CXXMethodDecl 0x5577e9948598 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5577e99483b8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5577e9948438 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5577e99484b0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5577e9948670 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5577e99488c0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5577e9948728 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5577e99487a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5577e9948820 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5577e9948aa8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5577e9948990 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5577e9948a10 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5577e9948ba8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5577e994ee98 <col:41, line:286:5>
|   `-ReturnStmt 0x5577e994ee88 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5577e994ee58 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5577e994ee20 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5577e994ee08 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5577e994ede8 <col:46> 'int' 1
|-CXXMethodDecl 0x5577e9948e48 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5577e9948c60 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5577e9948ce0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5577e9948d60 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5577e994cae0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5577e9948f10 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5577e994cbb0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5577e994cd80 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5577e994cc68 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5577e994cce8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5577e994ce40 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5577e994cf08 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5577e994d008 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5577e994d080 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5577e994d0f8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5577e994d160 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5577e994d260 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5577e994d2b0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e994d240 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5577e994d220 <col:22> 'int' 14
|-CXXMethodDecl 0x5577e994d4c8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5577e994d2e0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5577e994d360 <col:38> col:41 'int'
| `-ParmVarDecl 0x5577e994d3e0 <col:43> col:46 'int'
|-FriendDecl 0x5577e994d5d0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5577e994d660 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5577e9bd76f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5577e9bd78c8 prev 0x5577e9bd76f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5577e9bd7958 <col:46, col:52> col:46 public
|-TypedefDecl 0x5577e9bd7980 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9bd92e0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5577e9bd9290 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5577e9bd9270 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5577e9bd7b98 'type'
|     `-SubstTemplateTypeParmType 0x5577e9bd7b60 'String' sugar
|       |-TemplateTypeParmType 0x5577e9902060 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e9902010 'T'
|       `-RecordType 0x5577e993e850 'String'
|         `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bd9398 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5577e9bd9360 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5577e9bd9340 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5577e9bd92e0 'type'
|     `-ElaboratedType 0x5577e9bd9290 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5577e9bd9270 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5577e9bd7b98 'type'
|         `-SubstTemplateTypeParmType 0x5577e9bd7b60 'String' sugar
|           |-TemplateTypeParmType 0x5577e9902060 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5577e9902010 'T'
|           `-RecordType 0x5577e993e850 'String'
|             `-CXXRecord 0x5577e993e7c0 'String'
|-CXXMethodDecl 0x5577e9bd9518 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5577e9bd9428 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5577e9bd9608 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5577e9bd96e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5577e9bd96e8
|-CXXMethodDecl 0x5577e9bd99b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5577e9bd98c0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5577e9bd9bf8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5577e9bd9a70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5577e9bd9ae8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bd9dc8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5577e9bd9cb8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5577e9bd9d30 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bd9f28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5577e9bd9ff8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5577e9bda248 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5577e9bda0b8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5577e9bda130 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bda4a8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5577e9bda318 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5577e9bda390 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bda668 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5577e9bda578 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bda828 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5577e9bda730 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bda8e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5577e9bda990 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5577e9bdabc8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5577e9bdaa40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5577e9bdaab8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5577e9bdae68 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5577e9bdad70 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5577e9bdaf30 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5577e9bdaf80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5577e9bdafd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5577e9b75ff0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5577e9bd6158 prev 0x5577e9b75ff0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5577e9bd7660 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5577e9bd7610 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5577e9bd75f0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5577e9bd74a0 'type'
|     `-SubstTemplateTypeParmType 0x5577e9bd7330 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5577e98d7e10 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5577e98d7db8 'F'
|       `-RecordType 0x5577e9bd6f90 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5577e9bd6eb0 'typed_array_memory'
|-FieldDecl 0x5577e9bdb020 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5577e9bdb070 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5577e9bdb0a8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|   |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5577e990f328 'T'
|   `-RecordType 0x5577e993e850 'String'
|     `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdb138 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5577e9bdb100 'String &'
|   `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|     |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5577e990f328 'T'
|     `-RecordType 0x5577e993e850 'String'
|       `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdb1c8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5577e9bdb190 'const String &'
|   `-QualType 0x5577e9bd61f1 'const String' const
|     `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-RecordType 0x5577e993e850 'String'
|         `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdb258 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5577e9bdb220 'String *'
|   `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|     |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5577e990f328 'T'
|     `-RecordType 0x5577e993e850 'String'
|       `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdb2e8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5577e9bdb2b0 'const String *'
|   `-QualType 0x5577e9bd61f1 'const String' const
|     `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-RecordType 0x5577e993e850 'String'
|         `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdbf40 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5577e9bdbef0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5577e9bdbed0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5577e9bdbe08 'type'
|     `-LValueReferenceType 0x5577e9bdbdd0 'const String &'
|       `-QualType 0x5577e9bdbb71 'const String' const
|         `-SubstTemplateTypeParmType 0x5577e9bdbb70 'String' sugar
|           |-TemplateTypeParmType 0x5577e98e1d60 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5577e98e1d08 'T'
|           `-RecordType 0x5577e993e850 'String'
|             `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdbfa8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5577e9bdb190 'const String &'
|   `-QualType 0x5577e9bd61f1 'const String' const
|     `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-RecordType 0x5577e993e850 'String'
|         `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdc000 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9bdc068 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5577e9bdb220 'String *'
|   `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|     |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5577e990f328 'T'
|     `-RecordType 0x5577e993e850 'String'
|       `-CXXRecord 0x5577e993e7c0 'String'
|-TypedefDecl 0x5577e9bdc0d0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5577e9bdb2b0 'const String *'
|   `-QualType 0x5577e9bd61f1 'const String' const
|     `-SubstTemplateTypeParmType 0x5577e9bd61f0 'String' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-RecordType 0x5577e993e850 'String'
|         `-CXXRecord 0x5577e993e7c0 'String'
|-EnumDecl 0x5577e9bdc128 <line:134:5> col:5
| `-EnumConstantDecl 0x5577e9bdc220 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5577e9bdc200 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5577e9910a08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5577e99109e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5577e99109c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5577e9bdc2a8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5577e9bdc538 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9bdc360 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5577e9bdc400 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5577e9bdc7c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5577e9bdc6b0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5577e9bdca88 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5577e9bdc970 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5577e9bdcdb0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5577e9bdcc90 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5577e9bdd0c0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5577e9bdcfa0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5577e9bdd3b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9bdd1f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5577e9bdd270 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5577e9bdd4d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5577e9bdd588 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9bdd5e0 <col:30> Inherited
|-CXXMethodDecl 0x5577e9bdd628 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5577e9bdd6d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9bdd730 <col:30> Inherited
|-CXXMethodDecl 0x5577e9bdd7f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5577e9bdd8a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9bdd900 <col:30> Inherited
|-CXXMethodDecl 0x5577e9bdd948 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5577e9bdd9f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9bdda50 <col:30> Inherited
|-CXXMethodDecl 0x5577e9bdda98 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5577e9bddb48 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9bddba0 <col:30> Inherited
|-CXXMethodDecl 0x5577e9bddbe8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5577e9bddc98 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9bddcf0 <col:30> Inherited
|-CXXMethodDecl 0x5577e9bddd18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5577e9bdddc8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5577e9bdde78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5577e9bde038 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9bddf28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5577e9bddfa0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5577e9bde188 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5577e9bde0f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9bde338 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5577e9bde240 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5577e9bde3f0 <col:20>
| `-OptimizeNoneAttr 0x5577e9bde448 <col:30>
|-CXXMethodDecl 0x5577e9bde568 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5577e9bde470 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5577e9bde620 <col:20>
| `-OptimizeNoneAttr 0x5577e9bde678 <col:30>
|-CXXMethodDecl 0x5577e9bde730 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5577e9bde6a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9bde878 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5577e9bde7e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9bde9a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5577e9bdeaa8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5577e9bdeb78 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5577e9bdec48 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5577e9bded88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5577e9bdecf8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9bdeed0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5577e9bdee40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9bdf018 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5577e9bdef88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5577e9bdf0d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5577e9bdf1d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5577e9bdf140 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5577e9bdf288 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5577e9bdf348 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5577e9bdf448 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5577e9bdf5c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5577e9bdf508 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5577e9bdfd88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5577e9bdf680 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5577e9bdfce8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5577e9bdfbe8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5577e9bdfe68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5577e9bdffb8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5577e9bdff28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5577e9be0070 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5577e9be02b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9be0130 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5577e9be01a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5577e9be0448 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5577e9be0388 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5577e9be0658 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5577e9be0510 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5577e9be0588 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5577e9be0718 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5577e9be0978 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5577e9be0880 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5577e9be0a48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5577e9be0a48

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9c56e08 prev 0x5577e9beb5c8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5577e9c56f00 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5577e9c56f90 <col:22, col:28> col:22 public
|-EnumDecl 0x5577e9c56fb8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5577e9c570d8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c570b8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5577e9c570a0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5577e9c57080 <col:14> 'int' 999
| |-EnumConstantDecl 0x5577e9c57180 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c57160 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5577e9c57148 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5577e9c57128 <col:14> 'int' 1
| |-EnumConstantDecl 0x5577e9c57210 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c571f0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5577e9c571d0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5577e9c572b0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c57280 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5577e9c57260 <col:13> 'int' 1
| |-EnumConstantDecl 0x5577e9c57340 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c57320 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5577e9c57300 <col:16> 'int' 2
| |-EnumConstantDecl 0x5577e9c573d0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c573b0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5577e9c57390 <col:13> 'int' 3
| |-EnumConstantDecl 0x5577e9c57460 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c57440 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5577e9c57420 <col:15> 'int' 4
| |-EnumConstantDecl 0x5577e9c574f0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c574d0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5577e9c574b0 <col:14> 'int' 5
| |-EnumConstantDecl 0x5577e9c57580 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5577e9c57560 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5577e9c57540 <col:12> 'int' 6
| `-EnumConstantDecl 0x5577e9c57610 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5577e9c575f0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5577e9c575d0 <col:13> 'int' 7
|-VarDecl 0x5577e9c57680 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5577e9c57708 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5577e9c57790 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5577e9c57818 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5577e9c578a0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5577e9c57928 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5577e9c579b0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5577e9c57a38 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5577e9c57ac0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5577e9c57b48 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5577e9c57bd0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5577e9c57cd0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5577e9c5cfb8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5577e9c5d748 <line:128:13> 'int' 0
| `-CompoundStmt 0x5577e9c5d7b8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5577e9c57dc0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5577e9c5d7c8 <col:29, line:132:5>
|-CXXMethodDecl 0x5577e9c57f78 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5577e9c57eb0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9c58040 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5577e9c58128 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5577e9c5d820 <col:44, line:161:5>
|   `-ReturnStmt 0x5577e9c5d810 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5577e9c5d7f8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9c5d7d8 <col:9> 'ErrorHandler *' lvalue Var 0x5577e9c5d018 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9c58268 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5577e9c581d8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5577e9c58330 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5577e9c5d880 <col:43, line:173:5>
|   `-ReturnStmt 0x5577e9c5d870 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5577e9c5d858 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9c5d838 <col:9> 'ErrorHandler *' lvalue Var 0x5577e9c5d090 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5577e9c583e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5577e9c58468 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5577e9c58578 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5577e9c584e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c586c8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5577e9c58638 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c58820 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5577e9c58788 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c58978 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5577e9c588e0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c58ad0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5577e9c58a38 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c58ce0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5577e9c58b88 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5577e9c58c08 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c58eb8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5577e9c58da0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5577e9c58e20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c590d8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5577e9c58f78 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5577e9c58ff8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c592b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5577e9c59198 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5577e9c59218 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c59498 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5577e9c59378 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5577e9c593f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c59620 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5577e9c59558 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5577e9c597f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5577e9c596d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5577e9c59750 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5577e9c5dad8 <col:57, line:234:5>
|   `-ReturnStmt 0x5577e9c5dac8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5577e9c5dab0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5577e9c5da58 <col:9, col:41> 'int'
|         |-MemberExpr 0x5577e9c5da28 <col:9> '<bound member function type>' ->xmessage 0x5577e9c59620
|         | `-CXXThisExpr 0x5577e9c5da18 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5577e9c5da98 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5577e9c5da80 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5577e9c5d9f8 <col:18, col:40> 'String' (CXXTemporary 0x5577e9c5d9f8)
|               `-CallExpr 0x5577e9c5d9c0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5577e9c5d9a8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5577e9c5d920 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5577e9c5b7e8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5577e9c5d940 <col:31> 'const String' lvalue ParmVar 0x5577e9c59750 'str' 'const String &'
|                 `-DeclRefExpr 0x5577e9c5d960 <col:36> 'const String' lvalue ParmVar 0x5577e9c596d8 'anno' 'const String &'
|-CXXMethodDecl 0x5577e9c59ad0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5577e9c598b0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5577e9c59930 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5577e9c599a8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5577e9c5dd68 <col:68, line:243:5>
|   `-ReturnStmt 0x5577e9c5dd58 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5577e9c5dd40 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5577e9c5dce0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5577e9c5dcb0 <col:9> '<bound member function type>' ->xmessage 0x5577e9c597f0
|         | `-CXXThisExpr 0x5577e9c5dca0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5577e9c5db78 <col:18> 'const String' lvalue ParmVar 0x5577e9c598b0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5577e9c5dd28 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5577e9c5dd10 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5577e9c5dc80 <col:24, col:40> 'String' (CXXTemporary 0x5577e9c5dc80)
|               `-CXXMemberCallExpr 0x5577e9c5dc18 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5577e9c5dba8 <col:24> '<bound member function type>' ->vformat 0x5577e9c5acb0
|                 | `-CXXThisExpr 0x5577e9c5db98 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5577e9c5dc48 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5577e9c5dbd8 <col:32> 'const char *' lvalue ParmVar 0x5577e9c59930 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5577e9c5dc60 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5577e9c5dbf8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5577e9c599a8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5577e9c59d70 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5577e9c59b98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5577e9c59c10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5577e9c59c88 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5577e9c5e0a8 <col:23, line:254:5>
|   `-ReturnStmt 0x5577e9c5e098 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5577e9c5e080 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5577e9c5e020 <col:9, col:71> 'int'
|         |-MemberExpr 0x5577e9c5dff0 <col:9> '<bound member function type>' ->xmessage 0x5577e9c597f0
|         | `-CXXThisExpr 0x5577e9c5dfe0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5577e9c5e068 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5577e9c5e050 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5577e9c5dfa0 <col:18, col:65> 'String' (CXXTemporary 0x5577e9c5dfa0)
|         |     `-CallExpr 0x5577e9c5df38 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5577e9c5df20 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5577e9c5de08 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5577e9c5b7e8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5577e9c5de28 <col:31> 'const String' lvalue ParmVar 0x5577e9c59c10 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5577e9c5df80 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5577e9c5df68 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5577e9c5df00 <col:37, col:64> 'String' (CXXTemporary 0x5577e9c5df00)
|         |             `-CallExpr 0x5577e9c5ded0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5577e9c5deb8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5577e9c5de48 <col:37> 'String (const String &)' lvalue CXXMethod 0x5577e9c5be38 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5577e9c5de68 <col:56> 'const String' lvalue ParmVar 0x5577e9c59b98 'landmark' 'const String &'
|         `-DeclRefExpr 0x5577e9c5dfc0 <col:68> 'const String' lvalue ParmVar 0x5577e9c59c88 'str' 'const String &'
|-CXXMethodDecl 0x5577e9c5a0f0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5577e9c59e38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5577e9c59eb0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5577e9c59f30 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5577e9c59fa8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5577e9c5e360 <col:34, line:267:5>
|   `-ReturnStmt 0x5577e9c5e350 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5577e9c5e338 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5577e9c5e2d0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5577e9c5e2a0 <col:9> '<bound member function type>' ->xmessage 0x5577e9c59d70
|         | `-CXXThisExpr 0x5577e9c5e290 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5577e9c5e148 <col:18> 'const String' lvalue ParmVar 0x5577e9c59e38 'landmark' 'const String &'
|         |-DeclRefExpr 0x5577e9c5e168 <col:28> 'const String' lvalue ParmVar 0x5577e9c59eb0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5577e9c5e320 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5577e9c5e308 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5577e9c5e270 <col:34, col:50> 'String' (CXXTemporary 0x5577e9c5e270)
|               `-CXXMemberCallExpr 0x5577e9c5e208 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5577e9c5e198 <col:34> '<bound member function type>' ->vformat 0x5577e9c5acb0
|                 | `-CXXThisExpr 0x5577e9c5e188 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5577e9c5e238 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5577e9c5e1c8 <col:42> 'const char *' lvalue ParmVar 0x5577e9c59f30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5577e9c5e250 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5577e9c5e1e8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5577e9c59fa8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5577e9c5a200 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5577e9c5e3e0 <col:25, line:288:5>
|   `-ReturnStmt 0x5577e9c5e3d0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5577e9c5e3b8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5577e9c5e388 <col:9> 'const int' lvalue ->_nerrors 0x5577e9c5cfb8
|         `-CXXThisExpr 0x5577e9c5e378 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5577e9c5a410 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5577e9c5a2b8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5577e9c5a338 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c5a6f8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5577e9c5a4d8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5577e9c5a558 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5577e9c5a5d0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5577e9c5a890 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5577e9c5a7c8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c5aad8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5577e9c5a950 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5577e9c5a9c8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5577e9c5e640 <col:58, line:357:5>
|   `-ReturnStmt 0x5577e9c5e630 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5577e9c5e618 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5577e9c5e5e8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5577e9c5e5d0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5577e9c5e5b0 <col:9, col:29> 'String' (CXXTemporary 0x5577e9c5e5b0)
|             `-CallExpr 0x5577e9c5e540 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5577e9c5e528 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5577e9c5e4a8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5577e9c5a6f8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5577e9c5e448 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5577e9c5e578 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5577e9c5e468 <col:21> 'const char *' lvalue ParmVar 0x5577e9c5a950 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5577e9c5e590 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5577e9c5e488 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5577e9c5a9c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5577e9c5acb0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5577e9c5aba0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5577e9c5ac18 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5577e9c5ae08 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5577e9c5ad78 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5577e9c5af50 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5577e9c5aec0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5577e9c5b1f0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5577e9c5b008 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5577e9c5b088 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5577e9c5b100 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5577e9c5b350 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5577e9c5b2c0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5577e9c5e758 <col:37, line:441:5>
|   `-IfStmt 0x5577e9c5e740 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5577e9c5e6c8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5577e9c5e698 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5577e9c5e658 <col:6> 'int' lvalue ParmVar 0x5577e9c5b2c0 'level' 'int'
|     | `-ImplicitCastExpr 0x5577e9c5e6b0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5577e9c5e678 <col:15> 'ErrorHandler::Level' EnumConstant 0x5577e9c573d0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5577e9c5e728 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5577e9c5e6f8 <col:8> 'int' lvalue ->_nerrors 0x5577e9c5cfb8
|         `-CXXThisExpr 0x5577e9c5e6e8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5577e9c5b418 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5577e9c5e7f0 <col:26, line:448:5>
|   `-BinaryOperator 0x5577e9c5e7d0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5577e9c5e780 <col:2> 'int' lvalue ->_nerrors 0x5577e9c5cfb8
|     | `-CXXThisExpr 0x5577e9c5e770 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5577e9c5e7b0 <col:13> 'int' 0
|-CXXMethodDecl 0x5577e9c5b5e0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5577e9c5b4d0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5577e9c5b548 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5577e9c5b7e8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5577e9c5b6a0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5577e9c5b718 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5577e9c5ba98 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5577e9c5b8a8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5577e9c5b928 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5577e9c5b9a8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5577e9c5bb50 <col:59> 0 0
|-CXXMethodDecl 0x5577e9c5bce8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5577e9c5bbc8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5577e9c5bc48 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5577e9c5ee60 <col:70, line:534:5>
|   |-DeclStmt 0x5577e9c5e960 <line:528:2, col:20>
|   | |-VarDecl 0x5577e9c5e818 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5577e9c5e880 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5577e9c5e8b8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5577e9c5e920 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5577e9c5ea30 <line:529:2, col:23>
|   | `-VarDecl 0x5577e9c5e990 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5577e9c5ea18 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5577e9c5e9f8 <col:18> 'const char *' lvalue ParmVar 0x5577e9c5bbc8 'begin' 'const char *'
|   |-DoStmt 0x5577e9c5edf8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5577e9c5ed28 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5577e9c5ed10 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5577e9c5ecf0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5577e9c5ea48 <col:6> 'const char *' lvalue Var 0x5577e9c5e990 'x' 'const char *'
|   | |     `-CallExpr 0x5577e9c5ec40 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5577e9c5ec28 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5577e9c5ebe0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5577e9c5d490 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5577e9c5eca8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5577e9c5ec90 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5577e9c5eb00 <col:20, col:27> 'String' (CXXTemporary 0x5577e9c5eb00)
|   | |       |     `-CXXTemporaryObjectExpr 0x5577e9c5eac8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5577e9c5ecc0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5577e9c5eb20 <col:30> 'const char *' lvalue Var 0x5577e9c5e990 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5577e9c5ecd8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5577e9c5eb40 <col:33> 'const char *' lvalue ParmVar 0x5577e9c5bc48 'end' 'const char *'
|   | |       |-UnaryOperator 0x5577e9c5eb80 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5577e9c5eb60 <col:39> 'String' lvalue Var 0x5577e9c5e818 'name' 'String'
|   | |       |-UnaryOperator 0x5577e9c5ebb8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5577e9c5eb98 <col:46> 'String' lvalue Var 0x5577e9c5e8b8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5577e9c5ebd0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5577e9c5ede0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5577e9c5edc8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5577e9c5eda8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5577e9c5ed78 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|   |         `-ImplicitCastExpr 0x5577e9c5ed60 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5577e9c5ed40 <col:11> 'String' lvalue Var 0x5577e9c5e818 'name' 'String'
|   `-ReturnStmt 0x5577e9c5ee50 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5577e9c5ee38 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9c5ee18 <col:9> 'const char *' lvalue Var 0x5577e9c5e990 'x' 'const char *'
|-CXXMethodDecl 0x5577e9c5be38 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5577e9c5bda8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5577e9c5f478 <col:55, line:550:5>
|   `-IfStmt 0x5577e9c5f450 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5577e9c5f0a0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5577e9c5f088 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5577e9c5f070 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5577e9c5f050 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5577e9c5f020 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|     | |       `-DeclRefExpr 0x5577e9c5eec0 <col:6> 'const String' lvalue ParmVar 0x5577e9c5bda8 'x' 'const String &'
|     | `-BinaryOperator 0x5577e9c5f000 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5577e9c5efd0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5577e9c5ef80 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5577e9c5ef68 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5577e9c5ef20 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5577e995b7f0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5577e9c5eee0 <col:11> 'const String' lvalue ParmVar 0x5577e9c5bda8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5577e9c5ef00 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5577e9c5efe8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5577e9c5efb8 <col:19> 'char' 123
|     |-ReturnStmt 0x5577e9c5f110 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5577e9c5f0e0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5577e9c5f0c0 <col:13> 'const String' lvalue ParmVar 0x5577e9c5bda8 'x' 'const String &'
|     `-IfStmt 0x5577e9c5f428 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5577e9c5f1a8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5577e9c5f190 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5577e9c5f170 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5577e9c5f140 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |       `-DeclRefExpr 0x5577e9c5f120 <col:11> 'const String' lvalue ParmVar 0x5577e9c5bda8 'x' 'const String &'
|       |-ReturnStmt 0x5577e9c5f340 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5577e9c5f328 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5577e9c5f2f8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5577e9c5f2e0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5577e9c5f2c0 <col:13, col:29> 'String' (CXXTemporary 0x5577e9c5f2c0)
|       |         `-CallExpr 0x5577e9c5f260 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5577e9c5f248 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5577e9c5f1c0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5577e9c5b5e0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5577e9c5f290 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5577e9c5f1e0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5577e9c5f200 <col:28> 'const String' lvalue ParmVar 0x5577e9c5bda8 'x' 'const String &'
|       `-ReturnStmt 0x5577e9c5f418 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5577e9c5f400 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5577e9c5f3d0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5577e9c5f3b8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5577e9c5f398 <col:13, col:20> 'String' (CXXTemporary 0x5577e9c5f398)
|                 `-CXXTemporaryObjectExpr 0x5577e9c5f360 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5577e9c5c000 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5577e9c5bef0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5577e9c5bf68 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5577e9c5d738 <col:71> 'bool' false
|-CXXRecordDecl 0x5577e9c5c0b0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5577e9c5c3a8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5577e9c5c340 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5577e9c5c2e0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5577e9c5c2a0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5577e993e850 'String'
|       | `-CXXRecord 0x5577e993e7c0 'String'
|       |-BuiltinType 0x5577e9611370 'int'
|       `-DecayedType 0x5577e9bec610 '__va_list_tag *' sugar
|         |-TypedefType 0x5577e9bec5e0 'va_list' sugar
|         | |-Typedef 0x5577e982f900 'va_list'
|         | `-TypedefType 0x5577e982f8b0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5577e97674d8 '__gnuc_va_list'
|         |   `-TypedefType 0x5577e9767440 '__builtin_va_list' sugar
|         |     |-Typedef 0x5577e9652bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5577e9652b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5577e96120c0 '__va_list_tag'
|         |         `-CXXRecord 0x5577e9612028 '__va_list_tag'
|         `-PointerType 0x5577e98351a0 '__va_list_tag *'
|           `-RecordType 0x5577e96120c0 '__va_list_tag'
|             `-CXXRecord 0x5577e9612028 '__va_list_tag'
|-EnumDecl 0x5577e9c5c400 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5577e9c5c500 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5ca60 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c4e0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5577e9c5c4c0 <col:16> 'int' 1
| |-EnumConstantDecl 0x5577e9c5c590 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5ca78 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c570 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5577e9c5c550 <col:21> 'int' 2
| |-EnumConstantDecl 0x5577e9c5c620 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5ca90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c600 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5577e9c5c5e0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5577e9c5c6b0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5caa8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c690 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5577e9c5c670 <col:17> 'int' 8
| |-EnumConstantDecl 0x5577e9c5c740 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5cac0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c720 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5577e9c5c700 <col:22> 'int' 16
| |-EnumConstantDecl 0x5577e9c5c7d0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5cad8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c7b0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5577e9c5c790 <col:19> 'int' 32
| |-EnumConstantDecl 0x5577e9c5c860 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5caf0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c840 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5577e9c5c820 <col:17> 'int' 64
| |-EnumConstantDecl 0x5577e9c5c8f0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5cb08 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c8d0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5577e9c5c8b0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5577e9c5c980 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5577e9c5cb20 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9c5c960 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5577e9c5c940 <col:16> 'int' 256
| `-EnumConstantDecl 0x5577e9c5ca10 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5577e9c5cb38 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9c5c9f0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5577e9c5c9d0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5577e9c5cd48 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5577e9c5cb60 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5577e9c5cc00 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5577e9c5ced0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5577e9c5ce08 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5577e9c5cf78 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5577e9c5cfb8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5577e9c5d018 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5577e9c5d090 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5577e9c5d490 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5577e9c5d108 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5577e9c5d188 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5577e9c5d208 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5577e9c5d280 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5577e9c5d2f8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5577e9c5d370 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5577e9c5d5b8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5577e9c5d5b8
| `-ParmVarDecl 0x5577e9c5d6c8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5577e9c5f7d8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5577e9c5f7d8
  `-ParmVarDecl 0x5577e9c5f8e8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9beb658 prev 0x5577e9b38a98 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9beb750 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5577e9beb7e0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5577e9beb918 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5577e9beb818 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5577e9becd50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9becd30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9bec8b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5577e9becde0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5577e9becda0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5577e9beb818 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5577e9bec920 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5577e9bece60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9bece20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9bec980 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5577e9becea0 <col:54> 'bool' false
| `-CompoundStmt 0x5577e9becfa8 <col:61, line:38:5>
|   `-BinaryOperator 0x5577e9becf88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5577e9becf20 <col:9> 'const Element *' lvalue ->_context 0x5577e9bec858
|     | `-CXXThisExpr 0x5577e9becf10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5577e9becf70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5577e9becf50 <col:20> 'int' 0
|-CXXConstructorDecl 0x5577e9bebb28 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9beb9d8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5577e9beba50 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5577e9becd88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9becd68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9bec858 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5577e9bed000 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5577e9becfc0 <col:20> 'const Element *' lvalue ParmVar 0x5577e9beb9d8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5577e9bec8b8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5577e9bed080 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5577e9bed040 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5577e9beba50 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5577e9bec920 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5577e9bed100 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5577e9bed0c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5577e9bec980 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5577e9bed140 <col:73> 'bool' false
| `-CompoundStmt 0x5577e9bed1b8 <col:80, line:46:5>
|-CXXMethodDecl 0x5577e9bebc58 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5577e9bed230 <col:36, line:51:5>
|   `-ReturnStmt 0x5577e9bed220 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5577e9bed208 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5577e9bed1d8 <col:16> 'const Element *const' lvalue ->_context 0x5577e9bec858
|         `-CXXThisExpr 0x5577e9bed1c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5577e9bebd48 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5577e9bed2b0 <col:32, line:57:5>
|   `-ReturnStmt 0x5577e9bed2a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5577e9bed288 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5577e9bed258 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5577e9bec8b8
|         `-CXXThisExpr 0x5577e9bed248 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5577e9bebe08 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5577e9bebf90 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5577e9bebec0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5577e9bec0e0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5577e9bec050 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5577e9bec230 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5577e9bec1a0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5577e9bec438 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5577e9bec2e8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5577e9bec360 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5577e9bec768 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5577e9bec4f8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5577e9bec578 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5577e9bec640 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5577e9bec820 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5577e9bec858 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5577e9bec8b8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5577e9bec920 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5577e9bec980 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5577e9bec9d0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5577e9bec9d0
| `-ParmVarDecl 0x5577e9becae8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5577e9becb98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5577e9becb98
| `-ParmVarDecl 0x5577e9becca8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5577e9c687a8 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5577e9c19240 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5577e9c19418 prev 0x5577e9c19240 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5577e9c194a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5577e9c194d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1b0a0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5577e9c1b050 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5577e9c19980 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5577e9c19880 'type'
|     `-TemplateSpecializationType 0x5577e9c19810 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5577e9c196f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5577e9c196d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5577e9c196b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5577e9c197f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5577e9c19710 'char_array'
|-TypedefDecl 0x5577e9c1b158 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5577e9c1b120 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5577e9c1b100 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5577e9c1b0a0 'type'
|     `-ElaboratedType 0x5577e9c1b050 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5577e9c19980 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5577e9c19880 'type'
|         `-TemplateSpecializationType 0x5577e9c19810 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5577e9c196f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5577e9c196d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5577e9c196b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5577e9c197f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5577e9c19710 'char_array'
|-CXXMethodDecl 0x5577e9c1b2d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5577e9c1b1e8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5577e9c1b3c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5577e9c1b4a8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5577e9c1b778 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5577e9c1b680 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5577e9c1b9b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5577e9c1b830 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5577e9c1b8a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1bb88 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5577e9c1ba78 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5577e9c1baf0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1bce8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5577e9c1bdb8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5577e9c1c008 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5577e9c1be78 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5577e9c1bef0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1c268 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5577e9c1c0d8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5577e9c1c150 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1c428 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5577e9c1c338 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1c5e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5577e9c1c4f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1c6a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5577e9c1c750 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5577e9c1c988 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5577e9c1c800 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5577e9c1c878 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5577e9c1cc28 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5577e9c1cb30 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5577e9c1ccf0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5577e9c1cd40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5577e9c1cd90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5577e9c17c48 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5577e9c17e58 prev 0x5577e9c17c48 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5577e9c191b0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5577e9c19160 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5577e9c19140 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5577e9c18ff0 'type'
|     `-SubstTemplateTypeParmType 0x5577e9c18e10 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5577e98d7690 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e98d7638 'T'
|       `-RecordType 0x5577e9c18960 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5577e9c18878 'sized_array_memory'
|-FieldDecl 0x5577e9c1cde0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5577e9c1ce30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5577e9c1ce68 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|   |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5577e990f328 'T'
|   `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1cef8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5577e9c1cec0 'int &'
|   `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|     |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5577e990f328 'T'
|     `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1cfb8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5577e9c1cf80 'const int &'
|   `-QualType 0x5577e9c17ef1 'const int' const
|     `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1d048 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5577e9c1d010 'int *'
|   `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|     |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5577e990f328 'T'
|     `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1d0d8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5577e9c1d0a0 'const int *'
|   `-QualType 0x5577e9c17ef1 'const int' const
|     `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1dcc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5577e9c1dc70 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5577e9c1dc50 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5577e9c1dbe0 'type'
|     `-SubstTemplateTypeParmType 0x5577e9c1d9a0 'int' sugar
|       |-TemplateTypeParmType 0x5577e98e2490 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e98e2440 'T'
|       `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1dd28 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5577e9c1cf80 'const int &'
|   `-QualType 0x5577e9c17ef1 'const int' const
|     `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1dd80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1dde8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5577e9c1d010 'int *'
|   `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|     |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5577e990f328 'T'
|     `-BuiltinType 0x5577e9611370 'int'
|-TypedefDecl 0x5577e9c1de50 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5577e9c1d0a0 'const int *'
|   `-QualType 0x5577e9c17ef1 'const int' const
|     `-SubstTemplateTypeParmType 0x5577e9c17ef0 'int' sugar
|       |-TemplateTypeParmType 0x5577e990f380 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5577e990f328 'T'
|       `-BuiltinType 0x5577e9611370 'int'
|-EnumDecl 0x5577e9c1dea8 <line:134:5> col:5
| `-EnumConstantDecl 0x5577e9c1dfa0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5577e9c1df80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5577e9910a08 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5577e99109e0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5577e99109c0 <col:40> 'int' 1
|-CXXConstructorDecl 0x5577e9c1e028 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5577e9c1e278 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9c1e0e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5577e9c1e180 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5577e9c1e538 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5577e9c1e420 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5577e9c1e7f8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5577e9c1e6e0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5577e9c1eb40 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5577e9c1ea20 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5577e9c1ee50 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5577e9c1ed30 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5577e9c1f140 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9c1ef88 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5577e9c1f000 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5577e9c1f268 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5577e9c1f348 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9c1f3a0 <col:30> Inherited
|-CXXMethodDecl 0x5577e9c21650 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5577e9c21700 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9c21758 <col:30> Inherited
|-CXXMethodDecl 0x5577e9c21818 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5577e9c218c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9c21920 <col:30> Inherited
|-CXXMethodDecl 0x5577e9c21968 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5577e9c21a18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9c21a70 <col:30> Inherited
|-CXXMethodDecl 0x5577e9c21ab8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5577e9c21b68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9c21bc0 <col:30> Inherited
|-CXXMethodDecl 0x5577e9c21c08 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5577e9c21cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5577e9c21d10 <col:30> Inherited
|-CXXMethodDecl 0x5577e9c21d38 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5577e9c21de8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5577e9c21e98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5577e9c22058 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9c21f48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5577e9c21fc0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5577e9c221a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5577e9c22118 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9c22358 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5577e9c22260 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5577e9c22410 <col:20>
| `-OptimizeNoneAttr 0x5577e9c22468 <col:30>
|-CXXMethodDecl 0x5577e9c22588 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5577e9c22490 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5577e9c22640 <col:20>
| `-OptimizeNoneAttr 0x5577e9c22698 <col:30>
|-CXXMethodDecl 0x5577e9c22750 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5577e9c226c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9c22898 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5577e9c22808 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9c229c8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5577e9c22af8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5577e9c22bc8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5577e9c22c98 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5577e9c22dd8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5577e9c22d48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9c22f20 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5577e9c22e90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5577e9c23068 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5577e9c22fd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5577e9c23120 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5577e9c23220 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5577e9c23190 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5577e9c232d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5577e9c23398 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5577e9c23498 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5577e9c23618 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5577e9c23558 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5577e9c23dd8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5577e9c236d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5577e9c23d38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5577e9c23c38 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5577e9c23eb8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5577e9c24008 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5577e9c23f78 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5577e9c240c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5577e9c24308 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5577e9c24180 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5577e9c241f8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5577e9c244c8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5577e9c243d8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5577e9c24718 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5577e9c24590 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5577e9c24608 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5577e9c247d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5577e9c24a38 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5577e9c24940 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5577e9c24b08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9c09378 prev 0x5577e9bf21c8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5577e9c09470 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5577e9c09560 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5577e9c38830 <col:16, line:828:9>
|-CXXDestructorDecl 0x5577e9c09650 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5577e9c38840 <col:25, line:830:9>
|-CXXMethodDecl 0x5577e9c09750 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5577e9c09800 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5577e9c098a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5577e9c098a8
| `-ParmVarDecl 0x5577e9c099b8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5577e9c0a178 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5577e9c0a178
  `-ParmVarDecl 0x5577e9c0a288 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9bf1fd8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5577e9bf2138 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5577e9bf21c8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5577e9bf2280 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5577e9bf2388 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5577e9bf22b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5577e9c260c8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5577e9c260a8 <col:31> 'int' 0
|-CXXConstructorDecl 0x5577e9bf26a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9bf2520 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5577e9bf2598 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5577e9c26100 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5577e9c260e0 <col:59> 'int' 0
|-CXXConstructorDecl 0x5577e9bf2880 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9bf2770 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5577e9bf27e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5577e9c26138 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5577e9c26118 <col:55> 'int' 0
|-CXXConstructorDecl 0x5577e9bf2c38 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5577e9bf2a20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5577e9bf2a98 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5577e9bf2b10 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5577e9c26170 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5577e9c26150 <col:31> 'int' 0
|-CXXConstructorDecl 0x5577e9bf2df8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5577e9bf2d38 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5577e9bf2ef0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5577e9bf30d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5577e9bf2fe0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5577e9bf31c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5577e9c26520 <col:24, line:291:5>
|   `-ReturnStmt 0x5577e9c26510 <line:290:9, col:79>
|     `-BinaryOperator 0x5577e9c264f0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5577e9c263c8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5577e9c26320 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5577e9c26300 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5577e9c261f8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5577e9c261e0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5577e9c261c8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5577e9c26198 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5577e9c17be0
|       | |   |       `-CXXThisExpr 0x5577e9c26188 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5577e9c262e8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5577e9c262d0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5577e9c26298 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5577e9c26268 <col:28, col:35> '<bound member function type>' ->size 0x5577e9bddd18
|       | |           `-ImplicitCastExpr 0x5577e9c262b8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5577e9c26250 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5577e9c26220 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5577e9c17be0
|       | |                 `-CXXThisExpr 0x5577e9c26210 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5577e9c263b0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5577e9c26398 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5577e9c26380 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5577e9c26350 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5577e9c24c50
|       |         `-CXXThisExpr 0x5577e9c26340 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5577e9c264d0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5577e9c264b8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5577e9c264a0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5577e9c26460 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5577e9c26448 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5577e9c263f8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5577e9c24d00
|         |     |   `-CXXThisExpr 0x5577e9c263e8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5577e9c26428 <col:73> 'int' 0
|         `-IntegerLiteral 0x5577e9c26480 <col:79> 'int' 0
|-CXXMethodDecl 0x5577e9bf3288 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5577e9c266f8 <col:32, line:296:5>
|   `-ReturnStmt 0x5577e9c266e8 <line:295:9, col:49>
|     `-BinaryOperator 0x5577e9c266c8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5577e9c265a8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5577e9c26590 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5577e9c26578 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5577e9c26548 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5577e9c24c50
|       |       `-CXXThisExpr 0x5577e9c26538 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5577e9c266a8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5577e9c26690 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5577e9c26678 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5577e9c26638 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5577e9c26620 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5577e9c265d0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5577e9c24d00
|         |     |   `-CXXThisExpr 0x5577e9c265c0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5577e9c26600 <col:43> 'int' 0
|         `-IntegerLiteral 0x5577e9c26658 <col:49> 'int' 0
|-CXXMethodDecl 0x5577e9bf3378 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5577e9c26908 <col:19, line:306:5>
|   |-IfStmt 0x5577e9c26828 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5577e9c26768 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5577e9c26750 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5577e9c26720 <col:13> 'Vector<String> *' lvalue ->_conf 0x5577e9c17be0
|   | |     `-CXXThisExpr 0x5577e9c26710 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5577e9c26808 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5577e9c267d8 <col:13, col:20> '<bound member function type>' ->clear 0x5577e9be0718
|   |     `-ImplicitCastExpr 0x5577e9c267c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5577e9c26790 <col:13> 'Vector<String> *' lvalue ->_conf 0x5577e9c17be0
|   |         `-CXXThisExpr 0x5577e9c26780 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5577e9c268b0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5577e9c26880 <col:9, col:16> '<bound member function type>' .clear 0x5577e9c247d8
|   |   `-MemberExpr 0x5577e9c26850 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5577e9c24bf0
|   |     `-CXXThisExpr 0x5577e9c26840 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5577e9c268f8 <line:305:9, col:17>
|     `-UnaryOperator 0x5577e9c268e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9c268d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5577e9bf35f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5577e9bf3500 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5577e9bf3778 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5577e9bf36b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5577e9bf3af8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5577e9bf3820 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5577e9bf3a58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5577e9bf38c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5577e9bf3940 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5577e9c26c28 <col:67, line:327:5>
|     |-WhileStmt 0x5577e9c26bd8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5577e9c269f0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5577e9c26970 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5577e9b30f68 0x5577e997a548 0x5577e997a220 0x5577e996ba00 0x5577e996b6b0 0x5577e996afa0 0x5577e993d910 0x5577e98c9dd0
|     | | |-DeclRefExpr 0x5577e9c26930 <col:16> 'Iter' lvalue ParmVar 0x5577e9bf38c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5577e9c26950 <col:25> 'Iter' lvalue ParmVar 0x5577e9bf3940 'end' 'Iter'
|     | `-CompoundStmt 0x5577e9c26bb8 <col:30, line:325:9>
|     |   |-CallExpr 0x5577e9c26b58 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5577e9c26a38 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5577e9c26b28 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5577e9c26ab8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|     |   |   `-DeclRefExpr 0x5577e9c26a98 <col:24> 'Iter' lvalue ParmVar 0x5577e9bf38c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x5577e9c26ba0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5577e9c26b80 <col:15> 'Iter' lvalue ParmVar 0x5577e9bf38c8 'begin' 'Iter'
|     `-ReturnStmt 0x5577e9c26c18 <line:326:9, col:17>
|       `-UnaryOperator 0x5577e9c26c00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c26bf0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5577e9bf3c00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5577e9bf3b70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5577e9bf3d48 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5577e9bf3cb8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5577e9bf3e10 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5577e9c26d08 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5577e9c26ca8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5577e9c26c58 <col:9> '<bound member function type>' ->reset_from 0x5577e9c25078
|   | | `-CXXThisExpr 0x5577e9c26c48 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5577e9c26c88 <col:20> 'int' 0
|   `-ReturnStmt 0x5577e9c26cf8 <line:352:9, col:17>
|     `-UnaryOperator 0x5577e9c26ce0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9c26cd0 <col:17> 'Args *' this
|-VarDecl 0x5577e9bf3ec8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5577e9bf3f30 <col:38> 'int' 1
|-VarDecl 0x5577e9bf3fc0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5577e9bf4028 <col:39> 'int' 2
|-VarDecl 0x5577e9bf40b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5577e9bf4120 <col:39> 'int' 4
|-VarDecl 0x5577e9bf41b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5577e9bf4218 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5577e9bf4598 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5577e9bf4290 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9bf44f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5577e9bf4340 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf43e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c26e60 <col:43, line:371:5>
|     `-ReturnStmt 0x5577e9c26e50 <line:370:9, col:34>
|       `-CallExpr 0x5577e9c26e18 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c26d38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c26db8 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf4340 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c26dd8 <col:30> 'int' 0
|         `-DeclRefExpr 0x5577e9c26df8 <col:33> 'T' lvalue ParmVar 0x5577e9bf43e8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf48c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5577e9bf4600 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9bf4828 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5577e9bf46b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf4758 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c26fb0 <col:45, line:375:5>
|     `-ReturnStmt 0x5577e9c26fa0 <line:374:9, col:42>
|       `-CallExpr 0x5577e9c26f68 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c26e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c26f08 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf46b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c26f28 <col:30> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5577e9c26f48 <col:41> 'T' lvalue ParmVar 0x5577e9bf4758 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf5b40 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5577e9bf4930 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5577e9bf5aa0 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5577e9bf49e0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5577e9bf4a88 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5577e9c27100 <col:45, line:379:5>
| |   `-ReturnStmt 0x5577e9c270f0 <line:378:9, col:43>
| |     `-CallExpr 0x5577e9c270b8 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5577e9c26fd8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5577e9c27058 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf49e0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5577e9c27078 <col:30> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int'
| |       `-DeclRefExpr 0x5577e9c27098 <col:42> 'T' lvalue ParmVar 0x5577e9bf4a88 'x' 'T &'
| `-CXXMethodDecl 0x5577e9c68c38 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, Timestamp &)'
|   |-TemplateArgument type 'Timestamp'
|   |-ParmVarDecl 0x5577e9c68a50 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5577e9c68b28 <col:39, col:42> col:42 x 'Timestamp &'
|-FunctionTemplateDecl 0x5577e9bf5e78 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5577e9bf5ba8 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9bf5dd8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5577e9bf5c60 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf5d08 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c27300 <col:46, line:383:5>
|     `-ReturnStmt 0x5577e9c272f0 <line:382:9, col:55>
|       `-CallExpr 0x5577e9c272b8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c27128 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c271a8 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf5c60 'keyword' 'const char *'
|         |-BinaryOperator 0x5577e9c27278 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5577e9c27228 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5577e9c27208 <col:30> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5577e9c27260 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5577e9c27240 <col:42> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5577e9c27298 <col:54> 'T' lvalue ParmVar 0x5577e9bf5d08 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf6278 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5577e9bf5ee0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9bf61d8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5577e9bf5f90 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf6010 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9bf60b8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c27440 <col:54, line:388:5>
|     |-CallExpr 0x5577e9c273c8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c27318 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5577e9c27358 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c27368 <col:30> 'const char *' lvalue ParmVar 0x5577e9bf5f90 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5577e9c27388 <col:39> 'int' lvalue ParmVar 0x5577e9bf6010 'flags' 'int'
|     | `-DeclRefExpr 0x5577e9c273a8 <col:46> 'T' lvalue ParmVar 0x5577e9bf60b8 'x' 'T &'
|     `-ReturnStmt 0x5577e9c27430 <line:387:9, col:17>
|       `-UnaryOperator 0x5577e9c27418 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c27408 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9bf6728 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5577e9bf62e8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5577e9bf6368 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5577e9bf6688 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5577e9bf6428 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf64c8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9bf6568 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5577e9c275b0 <col:74, line:403:5>
|     `-ReturnStmt 0x5577e9c275a0 <line:402:9, col:56>
|       `-CallExpr 0x5577e9c27560 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c27470 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c274e0 <col:28> 'const char *' lvalue ParmVar 0x5577e9bf6428 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c27500 <col:37> 'int' 0
|         |-DeclRefExpr 0x5577e9c27520 <col:40> 'T' lvalue ParmVar 0x5577e9bf64c8 'x' 'T &'
|         `-DeclRefExpr 0x5577e9c27540 <col:43> 'const V' lvalue ParmVar 0x5577e9bf6568 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5577e9bf6b98 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5577e9bf6798 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5577e9bf6818 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5577e9bf6af8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5577e9bf68d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf6978 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9bf6a18 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5577e9c27718 <col:76, line:407:5>
|     `-ReturnStmt 0x5577e9c27708 <line:406:9, col:65>
|       `-CallExpr 0x5577e9c276c8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c275d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c27648 <col:28> 'const char *' lvalue ParmVar 0x5577e9bf68d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c27668 <col:37> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5577e9c27688 <col:49> 'T' lvalue ParmVar 0x5577e9bf6978 'x' 'T &'
|         `-DeclRefExpr 0x5577e9c276a8 <col:52> 'const V' lvalue ParmVar 0x5577e9bf6a18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5577e9bf70e8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5577e9bf6c08 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5577e9bf6c88 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5577e9bf7048 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5577e9bf6d48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf6dc8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9bf6e68 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9bf6f08 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5577e9c27880 <col:85, line:412:5>
|     |-CallExpr 0x5577e9c27800 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c27730 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5577e9c27770 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c27780 <col:37> 'const char *' lvalue ParmVar 0x5577e9bf6d48 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5577e9c277a0 <col:46> 'int' lvalue ParmVar 0x5577e9bf6dc8 'flags' 'int'
|     | |-DeclRefExpr 0x5577e9c277c0 <col:53> 'T' lvalue ParmVar 0x5577e9bf6e68 'x' 'T &'
|     | `-DeclRefExpr 0x5577e9c277e0 <col:56> 'const V' lvalue ParmVar 0x5577e9bf6f08 'default_value' 'const V &'
|     `-ReturnStmt 0x5577e9c27870 <line:411:9, col:17>
|       `-UnaryOperator 0x5577e9c27858 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c27848 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9bf7578 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5577e9bf7160 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf71d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bf74d8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bf7298 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf7310 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf73b8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c27a00 <col:53, line:425:5>
|     `-ReturnStmt 0x5577e9c279f0 <line:424:9, col:42>
|       `-CallExpr 0x5577e9c279b0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c278b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c27930 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf7298 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c27950 <col:30> 'int' 0
|         |-DeclRefExpr 0x5577e9c27970 <col:33> 'P' lvalue ParmVar 0x5577e9bf7310 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c27990 <col:41> 'T' lvalue ParmVar 0x5577e9bf73b8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf79c8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5577e9bf75e8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf7668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bf7928 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bf7728 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf77a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf7848 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c27b78 <col:55, line:429:5>
|     `-ReturnStmt 0x5577e9c27b68 <line:428:9, col:50>
|       `-CallExpr 0x5577e9c27b28 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c27a28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c27aa8 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf7728 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c27ac8 <col:30> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5577e9c27ae8 <col:41> 'P' lvalue ParmVar 0x5577e9bf77a0 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c27b08 <col:49> 'T' lvalue ParmVar 0x5577e9bf7848 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf7e18 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5577e9bf7a38 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf7ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bf7d78 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bf7b78 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf7bf0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf7c98 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c27cf0 <col:55, line:433:5>
|     `-ReturnStmt 0x5577e9c27ce0 <line:432:9, col:51>
|       `-CallExpr 0x5577e9c27ca0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c27ba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c27c20 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf7b78 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c27c40 <col:30> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5577e9c27c60 <col:42> 'P' lvalue ParmVar 0x5577e9bf7bf0 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c27c80 <col:50> 'T' lvalue ParmVar 0x5577e9bf7c98 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf8268 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5577e9bf7e88 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf7f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bf81c8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bf7fc8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf8040 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf80e8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c27f18 <col:56, line:437:5>
|     `-ReturnStmt 0x5577e9c27f08 <line:436:9, col:63>
|       `-CallExpr 0x5577e9c27ec8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c27d18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c27d98 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf7fc8 'keyword' 'const char *'
|         |-BinaryOperator 0x5577e9c27e68 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5577e9c27e18 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5577e9c27df8 <col:30> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5577e9c27e50 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5577e9c27e30 <col:42> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5577e9c27e88 <col:54> 'P' lvalue ParmVar 0x5577e9bf8040 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c27ea8 <col:62> 'T' lvalue ParmVar 0x5577e9bf80e8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bf8798 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5577e9bf82d8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf8358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bf86f8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5577e9bf8418 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf8498 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9bf8510 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf85b8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c28080 <col:64, line:442:5>
|     |-CallExpr 0x5577e9c28000 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c27f30 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5577e9c27f70 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c27f80 <col:30> 'const char *' lvalue ParmVar 0x5577e9bf8418 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5577e9c27fa0 <col:39> 'int' lvalue ParmVar 0x5577e9bf8498 'flags' 'int'
|     | |-DeclRefExpr 0x5577e9c27fc0 <col:46> 'P' lvalue ParmVar 0x5577e9bf8510 'parser' 'P'
|     | `-DeclRefExpr 0x5577e9c27fe0 <col:54> 'T' lvalue ParmVar 0x5577e9bf85b8 'x' 'T &'
|     `-ReturnStmt 0x5577e9c28070 <line:441:9, col:17>
|       `-UnaryOperator 0x5577e9c28058 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c28048 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9bf8d98 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5577e9bf8810 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf8888 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5577e9bf8908 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5577e9bf8cf8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5577e9bf89d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf8a48 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf8ae8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9bf8bb8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5577e9c28218 <col:84, line:458:5>
|     `-ReturnStmt 0x5577e9c28208 <line:457:9, col:64>
|       `-CallExpr 0x5577e9c281c0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c280b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c28120 <col:28> 'const char *' lvalue ParmVar 0x5577e9bf89d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c28140 <col:37> 'int' 0
|         |-DeclRefExpr 0x5577e9c28160 <col:40> 'P' lvalue ParmVar 0x5577e9bf8a48 'parser' 'P'
|         |-DeclRefExpr 0x5577e9c28180 <col:48> 'T' lvalue ParmVar 0x5577e9bf8ae8 'x' 'T &'
|         `-DeclRefExpr 0x5577e9c281a0 <col:51> 'const V' lvalue ParmVar 0x5577e9bf8bb8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5577e9bf9318 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5577e9bf8e10 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf8e88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5577e9bf8f08 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5577e9bf9278 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5577e9bf8fd0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf9048 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf90e8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9bf9188 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5577e9c283a8 <col:86, line:462:5>
|     `-ReturnStmt 0x5577e9c28398 <line:461:9, col:73>
|       `-CallExpr 0x5577e9c28350 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c28240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c282b0 <col:28> 'const char *' lvalue ParmVar 0x5577e9bf8fd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c282d0 <col:37> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5577e9c282f0 <col:49> 'P' lvalue ParmVar 0x5577e9bf9048 'parser' 'P'
|         |-DeclRefExpr 0x5577e9c28310 <col:57> 'T' lvalue ParmVar 0x5577e9bf90e8 'x' 'T &'
|         `-DeclRefExpr 0x5577e9c28330 <col:60> 'const V' lvalue ParmVar 0x5577e9bf9188 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5577e9bf9978 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5577e9bf9390 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf9408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5577e9bf9488 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5577e9bf98d8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5577e9bf9550 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf95d0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9bf9648 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf96e8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9bf9788 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5577e9c28538 <col:95, line:467:5>
|     |-CallExpr 0x5577e9c284b0 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c283c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5577e9c28400 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c28410 <col:37> 'const char *' lvalue ParmVar 0x5577e9bf9550 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5577e9c28430 <col:46> 'int' lvalue ParmVar 0x5577e9bf95d0 'flags' 'int'
|     | |-DeclRefExpr 0x5577e9c28450 <col:53> 'P' lvalue ParmVar 0x5577e9bf9648 'parser' 'P'
|     | |-DeclRefExpr 0x5577e9c28470 <col:61> 'T' lvalue ParmVar 0x5577e9bf96e8 'x' 'T &'
|     | `-DeclRefExpr 0x5577e9c28490 <col:64> 'const V' lvalue ParmVar 0x5577e9bf9788 'default_value' 'const V &'
|     `-ReturnStmt 0x5577e9c28528 <line:466:9, col:17>
|       `-UnaryOperator 0x5577e9c28510 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c28500 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9bf9f58 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5577e9bf99f8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bf9a78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5577e9bf9af8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5577e9bf9eb8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5577e9bf9bc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bf9c38 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bf9cd8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5577e9bf9d78 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5577e9c286e0 <col:63, line:481:5>
|     `-ReturnStmt 0x5577e9c286d0 <line:480:9, col:47>
|       `-CallExpr 0x5577e9c28688 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c28568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c285e8 <col:21> 'const char *' lvalue ParmVar 0x5577e9bf9bc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c28608 <col:30> 'int' 0
|         |-DeclRefExpr 0x5577e9c28628 <col:33> 'P' lvalue ParmVar 0x5577e9bf9c38 'parser' 'P'
|         |-DeclRefExpr 0x5577e9c28648 <col:41> 'T1' lvalue ParmVar 0x5577e9bf9cd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5577e9c28668 <col:45> 'T2' lvalue ParmVar 0x5577e9bf9d78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5577e9bfa4d8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5577e9bf9fd0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfa048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5577e9bfa0c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5577e9bfa438 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5577e9bfa190 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfa208 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfa2a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5577e9bfa348 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5577e9c28880 <col:65, line:485:5>
|     `-ReturnStmt 0x5577e9c28870 <line:484:9, col:55>
|       `-CallExpr 0x5577e9c28828 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c28708 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c28788 <col:21> 'const char *' lvalue ParmVar 0x5577e9bfa190 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c287a8 <col:30> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5577e9c287c8 <col:41> 'P' lvalue ParmVar 0x5577e9bfa208 'parser' 'P'
|         |-DeclRefExpr 0x5577e9c287e8 <col:49> 'T1' lvalue ParmVar 0x5577e9bfa2a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5577e9c28808 <col:53> 'T2' lvalue ParmVar 0x5577e9bfa348 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5577e9bfaa58 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5577e9bfa550 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfa5c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5577e9bfa648 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5577e9bfa9b8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5577e9bfa710 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfa788 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfa828 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5577e9bfa8c8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5577e9c28a20 <col:65, line:489:5>
|     `-ReturnStmt 0x5577e9c28a10 <line:488:9, col:56>
|       `-CallExpr 0x5577e9c289c8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c288a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c28928 <col:21> 'const char *' lvalue ParmVar 0x5577e9bfa710 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c28948 <col:30> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int'
|         |-DeclRefExpr 0x5577e9c28968 <col:42> 'P' lvalue ParmVar 0x5577e9bfa788 'parser' 'P'
|         |-DeclRefExpr 0x5577e9c28988 <col:50> 'T1' lvalue ParmVar 0x5577e9bfa828 'x1' 'T1 &'
|         `-DeclRefExpr 0x5577e9c289a8 <col:54> 'T2' lvalue ParmVar 0x5577e9bfa8c8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5577e9bfafd8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5577e9bfaad0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfab48 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5577e9bfabc8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5577e9bfaf38 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5577e9bfac90 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfad08 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfada8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5577e9bfae48 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5577e9c28c70 <col:66, line:493:5>
|     `-ReturnStmt 0x5577e9c28c60 <line:492:9, col:68>
|       `-CallExpr 0x5577e9c28c18 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c28a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c28ac8 <col:21> 'const char *' lvalue ParmVar 0x5577e9bfac90 'keyword' 'const char *'
|         |-BinaryOperator 0x5577e9c28b98 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5577e9c28b48 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5577e9c28b28 <col:30> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5577e9c28b80 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5577e9c28b60 <col:42> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5577e9c28bb8 <col:54> 'P' lvalue ParmVar 0x5577e9bfad08 'parser' 'P'
|         |-DeclRefExpr 0x5577e9c28bd8 <col:62> 'T1' lvalue ParmVar 0x5577e9bfada8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5577e9c28bf8 <col:66> 'T2' lvalue ParmVar 0x5577e9bfae48 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5577e9bfb638 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5577e9bfb050 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfb0c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5577e9bfb148 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5577e9bfb598 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5577e9bfb210 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfb290 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9bfb308 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfb3a8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5577e9bfb448 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5577e9c28e00 <col:74, line:498:5>
|     |-CallExpr 0x5577e9c28d78 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c28c88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5577e9c28cc8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c28cd8 <col:30> 'const char *' lvalue ParmVar 0x5577e9bfb210 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5577e9c28cf8 <col:39> 'int' lvalue ParmVar 0x5577e9bfb290 'flags' 'int'
|     | |-DeclRefExpr 0x5577e9c28d18 <col:46> 'P' lvalue ParmVar 0x5577e9bfb308 'parser' 'P'
|     | |-DeclRefExpr 0x5577e9c28d38 <col:54> 'T1' lvalue ParmVar 0x5577e9bfb3a8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5577e9c28d58 <col:58> 'T2' lvalue ParmVar 0x5577e9bfb448 'x2' 'T2 &'
|     `-ReturnStmt 0x5577e9c28df0 <line:497:9, col:17>
|       `-UnaryOperator 0x5577e9c28dd8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c28dc8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9bfb998 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5577e9bfb6b8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9bfb8f8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5577e9bfb770 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfb7e8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c28f48 <col:52, line:509:5>
|     `-ReturnStmt 0x5577e9c28f38 <line:508:9, col:44>
|       `-CallExpr 0x5577e9c28f00 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c28e30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c28ea0 <col:26> 'const char *' lvalue ParmVar 0x5577e9bfb770 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c28ec0 <col:35> 'int' 0
|         `-DeclRefExpr 0x5577e9c28ee0 <col:38> 'P' lvalue ParmVar 0x5577e9bfb7e8 'parser' 'P'
|-FunctionTemplateDecl 0x5577e9bfbc98 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5577e9bfba00 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9bfbbf8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5577e9bfbab0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfbb28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c29088 <col:54, line:513:5>
|     `-ReturnStmt 0x5577e9c29078 <line:512:9, col:52>
|       `-CallExpr 0x5577e9c29040 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c28f70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c28fe0 <col:26> 'const char *' lvalue ParmVar 0x5577e9bfbab0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c29000 <col:35> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5577e9c29020 <col:46> 'P' lvalue ParmVar 0x5577e9bfbb28 'parser' 'P'
|-FunctionTemplateDecl 0x5577e9bfbf98 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5577e9bfbd00 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9bfbef8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5577e9bfbdb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfbe28 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c291c8 <col:54, line:517:5>
|     `-ReturnStmt 0x5577e9c291b8 <line:516:9, col:53>
|       `-CallExpr 0x5577e9c29180 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c290b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c29120 <col:26> 'const char *' lvalue ParmVar 0x5577e9bfbdb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c29140 <col:35> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int'
|         `-DeclRefExpr 0x5577e9c29160 <col:47> 'P' lvalue ParmVar 0x5577e9bfbe28 'parser' 'P'
|-FunctionTemplateDecl 0x5577e9bfc298 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5577e9bfc000 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9bfc1f8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5577e9bfc0b0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfc128 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c293b8 <col:55, line:521:5>
|     `-ReturnStmt 0x5577e9c293a8 <line:520:9, col:65>
|       `-CallExpr 0x5577e9c29370 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c291f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c29260 <col:26> 'const char *' lvalue ParmVar 0x5577e9bfc0b0 'keyword' 'const char *'
|         |-BinaryOperator 0x5577e9c29330 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5577e9c292e0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5577e9c292c0 <col:35> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5577e9c29318 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5577e9c292f8 <col:47> 'const int' lvalue Var 0x5577e9bf3fc0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5577e9c29350 <col:59> 'P' lvalue ParmVar 0x5577e9bfc128 'parser' 'P'
|-FunctionTemplateDecl 0x5577e9bfc668 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5577e9bfc300 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9bfc5c8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5577e9bfc3b0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfc430 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9bfc4a8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c294f8 <col:63, line:526:5>
|     |-CallExpr 0x5577e9c29480 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c293d0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5577e9c29410 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c29420 <col:35> 'const char *' lvalue ParmVar 0x5577e9bfc3b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5577e9c29440 <col:44> 'int' lvalue ParmVar 0x5577e9bfc430 'flags' 'int'
|     | `-DeclRefExpr 0x5577e9c29460 <col:51> 'P' lvalue ParmVar 0x5577e9bfc4a8 'parser' 'P'
|     `-ReturnStmt 0x5577e9c294e8 <line:525:9, col:17>
|       `-UnaryOperator 0x5577e9c294d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c294c0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9bfcab8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5577e9bfc6d8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfc758 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bfca18 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bfc818 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfc890 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfc938 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2b2a0 <col:58, line:541:5>
|     `-ReturnStmt 0x5577e9c29640 <line:540:9, col:39>
|       `-CallExpr 0x5577e9c29608 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c29528 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c295a8 <col:21> 'const char *' lvalue ParmVar 0x5577e9bfc818 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c295c8 <col:30> 'P' lvalue ParmVar 0x5577e9bfc890 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c295e8 <col:38> 'T' lvalue ParmVar 0x5577e9bfc938 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bfcf08 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5577e9bfcb28 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfcba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bfce68 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bfcc68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfcce0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfcd88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2b3d8 <col:60, line:545:5>
|     `-ReturnStmt 0x5577e9c2b3c8 <line:544:9, col:41>
|       `-CallExpr 0x5577e9c2b390 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2b2c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2b330 <col:23> 'const char *' lvalue ParmVar 0x5577e9bfcc68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c2b350 <col:32> 'P' lvalue ParmVar 0x5577e9bfcce0 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c2b370 <col:40> 'T' lvalue ParmVar 0x5577e9bfcd88 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bfd358 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5577e9bfcf78 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfcff8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bfd2b8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bfd0b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfd130 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfd1d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2b510 <col:60, line:549:5>
|     `-ReturnStmt 0x5577e9c2b500 <line:548:9, col:41>
|       `-CallExpr 0x5577e9c2b4c8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2b400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2b468 <col:23> 'const char *' lvalue ParmVar 0x5577e9bfd0b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c2b488 <col:32> 'P' lvalue ParmVar 0x5577e9bfd130 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c2b4a8 <col:40> 'T' lvalue ParmVar 0x5577e9bfd1d8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9bfd7a8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5577e9bfd3c8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfd448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9bfd708 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9bfd508 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfd580 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9bfd628 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2b648 <col:61, line:553:5>
|     `-ReturnStmt 0x5577e9c2b638 <line:552:9, col:42>
|       `-CallExpr 0x5577e9c2b600 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2b538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2b5a0 <col:24> 'const char *' lvalue ParmVar 0x5577e9bfd508 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c2b5c0 <col:33> 'P' lvalue ParmVar 0x5577e9bfd580 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c2b5e0 <col:41> 'T' lvalue ParmVar 0x5577e9bfd628 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9c02c78 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5577e9bfd818 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9bfd898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c02bd8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5577e9bfd958 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9bfd9d8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c02a40 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c02ae8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2b7c0 <col:69, line:557:5>
|     `-ReturnStmt 0x5577e9c2b7b0 <line:556:9, col:46>
|       `-CallExpr 0x5577e9c2b770 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2b670 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2b6f0 <col:21> 'const char *' lvalue ParmVar 0x5577e9bfd958 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c2b710 <col:30> 'int' lvalue ParmVar 0x5577e9bfd9d8 'flags' 'int'
|         |-DeclRefExpr 0x5577e9c2b730 <col:37> 'P' lvalue ParmVar 0x5577e9c02a40 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c2b750 <col:45> 'T' lvalue ParmVar 0x5577e9c02ae8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9c02f88 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5577e9c02cf0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9c02ee8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5577e9c02da0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c02e18 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c2b900 <col:56, line:571:5>
|     `-ReturnStmt 0x5577e9c2b8f0 <line:570:9, col:48>
|       `-CallExpr 0x5577e9c2b8b8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2b7e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2b858 <col:30> 'const char *' lvalue ParmVar 0x5577e9c02da0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c2b878 <col:39> 'int' 0
|         `-DeclRefExpr 0x5577e9c2b898 <col:42> 'P' lvalue ParmVar 0x5577e9c02e18 'parser' 'P'
|-FunctionTemplateDecl 0x5577e9c03318 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5577e9c02ff0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9c03278 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5577e9c030a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c03120 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c03198 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c2bad0 <col:67, line:576:5>
|     |-CallExpr 0x5577e9c2ba58 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c2b918 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5577e9c2b958 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c2b968 <col:39> 'const char *' lvalue ParmVar 0x5577e9c030a0 'keyword' 'const char *'
|     | |-BinaryOperator 0x5577e9c2ba18 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5577e9c2b9c8 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5577e9c2b988 <col:48> 'int' lvalue ParmVar 0x5577e9c03120 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5577e9c2ba00 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5577e9c2b9e0 <col:56> 'const int' lvalue Var 0x5577e9bf41b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5577e9c2ba38 <col:68> 'P' lvalue ParmVar 0x5577e9c03198 'parser' 'P'
|     `-ReturnStmt 0x5577e9c2bac0 <line:575:9, col:17>
|       `-UnaryOperator 0x5577e9c2baa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c2ba98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9c03768 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5577e9c03388 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c03408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c036c8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5577e9c034c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c03540 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c035e8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2bc40 <col:62, line:592:5>
|     `-ReturnStmt 0x5577e9c2bc30 <line:591:9, col:51>
|       `-CallExpr 0x5577e9c2bbf0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2bb00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2bb70 <col:30> 'const char *' lvalue ParmVar 0x5577e9c034c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c2bb90 <col:39> 'int' 0
|         |-DeclRefExpr 0x5577e9c2bbb0 <col:42> 'P' lvalue ParmVar 0x5577e9c03540 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c2bbd0 <col:50> 'T' lvalue ParmVar 0x5577e9c035e8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9c03c48 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5577e9c037d8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c03858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c03ba8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5577e9c03918 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c03998 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c03a10 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c03ab8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2be38 <col:73, line:597:5>
|     |-CallExpr 0x5577e9c2bdb8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c2bc58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5577e9c2bc98 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c2bca8 <col:39> 'const char *' lvalue ParmVar 0x5577e9c03918 'keyword' 'const char *'
|     | |-BinaryOperator 0x5577e9c2bd58 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5577e9c2bd08 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5577e9c2bcc8 <col:48> 'int' lvalue ParmVar 0x5577e9c03998 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5577e9c2bd40 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5577e9c2bd20 <col:56> 'const int' lvalue Var 0x5577e9bf41b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5577e9c2bd78 <col:68> 'P' lvalue ParmVar 0x5577e9c03a10 'parser' 'P'
|     | `-DeclRefExpr 0x5577e9c2bd98 <col:76> 'T' lvalue ParmVar 0x5577e9c03ab8 'x' 'T &'
|     `-ReturnStmt 0x5577e9c2be28 <line:596:9, col:17>
|       `-UnaryOperator 0x5577e9c2be10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c2be00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9c041f8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5577e9c03cc0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c03d38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c04158 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5577e9c03df8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c03e70 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c04030 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5577e9c2bfa8 <col:65, line:614:5>
|     `-ReturnStmt 0x5577e9c2bf98 <line:613:9, col:46>
|       `-CallExpr 0x5577e9c2bf58 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2be68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2bed8 <col:25> 'const char *' lvalue ParmVar 0x5577e9c03df8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c2bef8 <col:34> 'int' 0
|         |-DeclRefExpr 0x5577e9c2bf18 <col:37> 'P' lvalue ParmVar 0x5577e9c03e70 'parser' 'P'
|         `-DeclRefExpr 0x5577e9c2bf38 <col:45> 'Vector<T>' lvalue ParmVar 0x5577e9c04030 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5577e9c04628 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5577e9c04268 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9c04588 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5577e9c04320 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c04470 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5577e9c2c1c0 <col:55, line:618:5>
|     `-ReturnStmt 0x5577e9c2c1b0 <line:617:9, col:55>
|       `-CallExpr 0x5577e9c2c170 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2bfd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2c040 <col:25> 'const char *' lvalue ParmVar 0x5577e9c04320 'keyword' 'const char *'
|         |-IntegerLiteral 0x5577e9c2c060 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5577e9c2c130 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5577e9c2c150 <col:54> 'Vector<T>' lvalue ParmVar 0x5577e9c04470 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5577e9c04bf8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5577e9c04690 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c04708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c04b58 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5577e9c047c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c04848 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c048c0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c04a10 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5577e9c2c3b8 <col:76, line:623:5>
|     |-CallExpr 0x5577e9c2c338 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5577e9c2c1d8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5577e9c2c218 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5577e9c2c228 <col:34> 'const char *' lvalue ParmVar 0x5577e9c047c8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5577e9c2c2d8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5577e9c2c288 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5577e9c2c248 <col:43> 'int' lvalue ParmVar 0x5577e9c04848 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5577e9c2c2c0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5577e9c2c2a0 <col:51> 'const int' lvalue Var 0x5577e9bf41b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5577e9c2c2f8 <col:63> 'P' lvalue ParmVar 0x5577e9c048c0 'parser' 'P'
|     | `-DeclRefExpr 0x5577e9c2c318 <col:71> 'Vector<T>' lvalue ParmVar 0x5577e9c04a10 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5577e9c2c3a8 <line:622:9, col:17>
|       `-UnaryOperator 0x5577e9c2c390 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c2c380 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9c05138 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5577e9c04c70 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c04ce8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c05098 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5577e9c04da8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c04e28 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c04f70 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5577e9c2c620 <col:66, line:627:5>
|     `-ReturnStmt 0x5577e9c2c610 <line:626:9, col:59>
|       `-CallExpr 0x5577e9c2c5d0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5577e9c2c3e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5577e9c2c458 <col:25> 'const char *' lvalue ParmVar 0x5577e9c04da8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5577e9c2c478 <col:34> 'int' lvalue ParmVar 0x5577e9c04e28 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5577e9c2c590 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5577e9c2c5b0 <col:58> 'Vector<T>' lvalue ParmVar 0x5577e9c04f70 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5577e9c051c8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5577e9c2c6a0 <col:25, line:633:5>
|   `-ReturnStmt 0x5577e9c2c690 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5577e9c2c678 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5577e9c2c648 <col:16> 'const bool' lvalue ->_status 0x5577e9c17a48
|         `-CXXThisExpr 0x5577e9c2c638 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5577e9c05348 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5577e9c05280 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5577e9c2c788 <col:27, line:639:5>
|   |-BinaryOperator 0x5577e9c2c730 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5577e9c2c6b8 <col:9> 'bool' lvalue ParmVar 0x5577e9c05280 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5577e9c2c718 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5577e9c2c6e8 <col:13> 'bool' lvalue ->_status 0x5577e9c17a48
|   |     `-CXXThisExpr 0x5577e9c2c6d8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5577e9c2c778 <line:638:9, col:17>
|     `-UnaryOperator 0x5577e9c2c760 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9c2c750 <col:17> 'Args *' this
|-CXXMethodDecl 0x5577e9c054c8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5577e9c05408 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5577e9c2c878 <col:39, line:644:5>
|   |-BinaryOperator 0x5577e9c2c820 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5577e9c2c7a8 <col:9> 'bool' lvalue ParmVar 0x5577e9c05408 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5577e9c2c808 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5577e9c2c7d8 <col:13> 'const bool' lvalue ->_status 0x5577e9c17a48
|   |     `-CXXThisExpr 0x5577e9c2c7c8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5577e9c2c868 <line:643:9, col:17>
|     `-UnaryOperator 0x5577e9c2c850 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9c2c840 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5577e9c05590 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5577e9c2c920 <col:30, line:651:5>
|   `-ReturnStmt 0x5577e9c2c910 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5577e9c2c8f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5577e9c2c8c8 <col:16> 'bool' lvalue ->_read_status 0x5577e9bec980
|         `-ImplicitCastExpr 0x5577e9c2c8a8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5577e9c2c898 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5577e9c056d8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5577e9c05648 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5577e9c2ca28 <col:32, line:658:5>
|   |-BinaryOperator 0x5577e9c2c9d0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5577e9c2c938 <col:9> 'bool' lvalue ParmVar 0x5577e9c05648 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5577e9c2c9b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5577e9c2c988 <col:13> 'bool' lvalue ->_read_status 0x5577e9bec980
|   |     `-ImplicitCastExpr 0x5577e9c2c968 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5577e9c2c958 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5577e9c2ca18 <line:657:9, col:17>
|     `-UnaryOperator 0x5577e9c2ca00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9c2c9f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5577e9c05828 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5577e9c05798 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5577e9c2cb38 <col:44, line:663:5>
|   |-BinaryOperator 0x5577e9c2cae0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5577e9c2ca48 <col:9> 'bool' lvalue ParmVar 0x5577e9c05798 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5577e9c2cac8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5577e9c2ca98 <col:13> 'bool' lvalue ->_read_status 0x5577e9bec980
|   |     `-ImplicitCastExpr 0x5577e9c2ca78 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5577e9c2ca68 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5577e9c2cb28 <line:662:9, col:17>
|     `-UnaryOperator 0x5577e9c2cb10 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9c2cb00 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5577e9c058f0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5577e9c059b8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5577e9c05a80 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5577e9c05b48 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5577e9c05e58 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5577e9c05be8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9c05db8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5577e9c05cc8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2cef0 <col:19, line:706:5>
|     `-IfStmt 0x5577e9c2cec8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5577e9c2cc38 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5577e9c2cdf8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5577e9c2cdc8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5577e9c2cd88 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5577e9c2cc90 <col:42> '<bound member function type>' ->simple_slot 0x5577e9c25d30
|       |     | `-CXXThisExpr 0x5577e9c2cc80 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5577e9c2cd28 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5577e9c2cce0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5577e997efe8
|       |     | `-DeclRefExpr 0x5577e9c2ccc0 <col:55> 'T' lvalue ParmVar 0x5577e9c05cc8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5577e9c2cd68 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5577e9c2ceb8 <line:705:13, col:34>
|         `-CallExpr 0x5577e9c2ce90 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5577e9c2ce18 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5577e9c2ce70 <col:33> 'T' lvalue ParmVar 0x5577e9c05cc8 'x' 'T &'
|-FunctionTemplateDecl 0x5577e9c06128 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5577e9c05eb8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9c06088 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5577e9c05f98 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5577e9c2d2d0 <col:31, line:717:5>
|     |-DeclStmt 0x5577e9c2d030 <line:713:9, col:23>
|     | `-VarDecl 0x5577e9c2cf18 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5577e9c2d008 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5577e9c2cf90 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5577e9c2cfe8 <col:21> 'T' lvalue ParmVar 0x5577e9c05f98 'x' 'T &'
|     |-IfStmt 0x5577e9c2d280 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5577e9c2d128 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5577e9c2d260 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5577e9c2d200 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5577e9c2d190 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|     |   | `-DeclRefExpr 0x5577e9c2d170 <col:14> 'T *' lvalue Var 0x5577e9c2cf18 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5577e9c2d240 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5577e9c2d2b8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5577e9c2d298 <col:16> 'T *' lvalue Var 0x5577e9c2cf18 's' 'T *'
|-FunctionTemplateDecl 0x5577e9c06538 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5577e9c06188 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5577e9c06208 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5577e9c06498 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5577e9c062e8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5577e9c06388 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5577e9c2d5e0 <col:37, line:726:5>
|     |-IfStmt 0x5577e9c2d570 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5577e9c2d590 <line:723:13, col:26>
|     | | `-VarDecl 0x5577e9c2d338 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5577e9c2d428 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5577e9c2d3b0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5577e9c2d408 <col:25> 'T' lvalue ParmVar 0x5577e9c062e8 'x' 'T &'
|     | |-DeclRefExpr 0x5577e9c2d450 <col:16> 'T *' lvalue Var 0x5577e9c2d338 's' 'T *'
|     | `-BinaryOperator 0x5577e9c2d550 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5577e9c2d500 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5577e9c2d490 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|     |   | `-DeclRefExpr 0x5577e9c2d470 <col:14> 'T *' lvalue Var 0x5577e9c2d338 's' 'T *'
|     |   `-DeclRefExpr 0x5577e9c2d530 <col:18> 'const V' lvalue ParmVar 0x5577e9c06388 'value' 'const V &'
|     `-ReturnStmt 0x5577e9c2d5d0 <line:725:9, col:17>
|       `-UnaryOperator 0x5577e9c2d5b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5577e9c2d5a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5577e9c06938 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5577e9c065a0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5577e9c06898 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5577e9c06650 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c066d0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c06778 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5577e9c2e400 <col:65, line:737:5>
|     |-DeclStmt 0x5577e9c2d678 <line:732:9, col:26>
|     | `-VarDecl 0x5577e9c2d610 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5577e9c2e3c8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5577e9c2e3e8 <line:733:13, col:58>
|       | `-VarDecl 0x5577e9c2d6a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5577e9c2d880 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5577e9c2d850 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5577e9c2d838 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5577e9c2d818 <col:26, col:58> 'String' (CXXTemporary 0x5577e9c2d818)
|       |           `-CXXMemberCallExpr 0x5577e9c2d7a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5577e9c2d718 <col:26> '<bound member function type>' ->find 0x5577e9c25348
|       |             | `-CXXThisExpr 0x5577e9c2d708 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5577e9c2d7e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c2d748 <col:31> 'const char *' lvalue ParmVar 0x5577e9c06650 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5577e9c2d7f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c2d768 <col:40> 'int' lvalue ParmVar 0x5577e9c066d0 'flags' 'int'
|       |             `-DeclRefExpr 0x5577e9c2d788 <col:47> 'Args::Slot *' lvalue Var 0x5577e9c2d610 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5577e9c2d938 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5577e9c2d920 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5577e9c2d900 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5577e9c2d8d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |       `-ImplicitCastExpr 0x5577e9c2d8b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5577e9c2d898 <col:20> 'String' lvalue Var 0x5577e9c2d6a0 'str' 'String'
|       `-CompoundStmt 0x5577e9c2e3a8 <col:61, line:736:9>
|         |-DeclStmt 0x5577e9c2ddf0 <line:734:13, col:76>
|         | `-VarDecl 0x5577e9c2d988 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5577e9c2ddc0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5577e9c2dd30 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5577e9c2dd78 <col:60> 'T' lvalue ParmVar 0x5577e9c06778 'variable' 'T &'
|         |     `-UnaryOperator 0x5577e9c2dda8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5577e9c2dd98 <col:71> 'Args *' this
|         `-CallExpr 0x5577e9c2e378 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5577e9c2de18 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|           | `-CXXThisExpr 0x5577e9c2de08 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5577e9c2e338 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5577e9c2de48 <col:23> 'T *' lvalue Var 0x5577e9c2d988 's' 'T *'
|           | `-CallExpr 0x5577e9c2e2f8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5577e9c2e0d0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5577e9c2e1d0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5577e9c2e1f0 <col:86> 'String' lvalue Var 0x5577e9c2d6a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5577e9c2e2a0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5577e9c2e230 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|           |   | `-DeclRefExpr 0x5577e9c2e210 <col:92> 'T *' lvalue Var 0x5577e9c2d988 's' 'T *'
|           |   `-UnaryOperator 0x5577e9c2e2e0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5577e9c2e2d0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5577e9c2e358 <col:103> 'Args::Slot *' lvalue Var 0x5577e9c2d610 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5577e9c06e88 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5577e9c069a8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5577e9c06a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5577e9c06de8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5577e9c06ae8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c06b68 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c06c08 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5577e9c06ca8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5577e9c2f2a0 <col:88, line:745:5>
|     |-DeclStmt 0x5577e9c2e498 <line:741:9, col:26>
|     | `-VarDecl 0x5577e9c2e430 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5577e9c2e6b8 <line:742:9, col:55>
|     | `-VarDecl 0x5577e9c2e4c0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5577e9c2e6a0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5577e9c2e670 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5577e9c2e658 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5577e9c2e638 <col:22, col:54> 'String' (CXXTemporary 0x5577e9c2e638)
|     |           `-CXXMemberCallExpr 0x5577e9c2e5c8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5577e9c2e538 <col:22> '<bound member function type>' ->find 0x5577e9c25348
|     |             | `-CXXThisExpr 0x5577e9c2e528 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5577e9c2e600 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5577e9c2e568 <col:27> 'const char *' lvalue ParmVar 0x5577e9c06ae8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5577e9c2e618 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5577e9c2e588 <col:36> 'int' lvalue ParmVar 0x5577e9c06b68 'flags' 'int'
|     |             `-DeclRefExpr 0x5577e9c2e5a8 <col:43> 'Args::Slot *' lvalue Var 0x5577e9c2e430 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5577e9c2ea90 <line:743:9, col:72>
|     | `-VarDecl 0x5577e9c2e708 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5577e9c2ea60 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5577e9c2e9d0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5577e9c2ea18 <col:56> 'T' lvalue ParmVar 0x5577e9c06c08 'variable' 'T &'
|     |     `-UnaryOperator 0x5577e9c2ea48 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5577e9c2ea38 <col:67> 'Args *' this
|     `-CallExpr 0x5577e9c2f270 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5577e9c2eab8 <col:9> '<bound member function type>' ->postparse 0x5577e9c25558
|       | `-CXXThisExpr 0x5577e9c2eaa8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5577e9c2f230 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5577e9c2eae8 <col:19> 'T *' lvalue Var 0x5577e9c2e708 's' 'T *'
|       | `-ParenExpr 0x5577e9c2f210 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5577e9c2f1e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5577e9c2f1c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5577e9c2f1b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5577e9c2f190 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5577e9c2f160 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |     |       `-ImplicitCastExpr 0x5577e9c2f148 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5577e9c2eb08 <col:25> 'String' lvalue Var 0x5577e9c2e4c0 'str' 'String'
|       |     |-CallExpr 0x5577e9c2efb8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5577e9c2ed90 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5577e9c2ee90 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5577e9c2eeb0 <col:89> 'String' lvalue Var 0x5577e9c2e4c0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5577e9c2ef60 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5577e9c2eef0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|       |     | | `-DeclRefExpr 0x5577e9c2eed0 <col:95> 'T *' lvalue Var 0x5577e9c2e708 's' 'T *'
|       |     | `-UnaryOperator 0x5577e9c2efa0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5577e9c2ef90 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5577e9c2f128 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5577e9c2f108 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5577e9c2f0d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5577e9c2f088 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5577e9c2f018 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|       |         | | `-DeclRefExpr 0x5577e9c2eff8 <col:109> 'T *' lvalue Var 0x5577e9c2e708 's' 'T *'
|       |         | `-DeclRefExpr 0x5577e9c2f0b8 <col:113> 'const V' lvalue ParmVar 0x5577e9c06ca8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5577e9c2f0f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x5577e9c2f250 <col:128> 'Args::Slot *' lvalue Var 0x5577e9c2e430 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5577e9c073b8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5577e9c06f00 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c06f78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c07318 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5577e9c07038 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c070b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c07130 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c071d8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5577e9c2fe98 <col:75, line:754:5>
|     |-DeclStmt 0x5577e9c2f348 <line:749:9, col:26>
|     | `-VarDecl 0x5577e9c2f2e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5577e9c2fe60 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5577e9c2fe80 <line:750:13, col:58>
|       | `-VarDecl 0x5577e9c2f370 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5577e9c2f550 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5577e9c2f520 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5577e9c2f508 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5577e9c2f4e8 <col:26, col:58> 'String' (CXXTemporary 0x5577e9c2f4e8)
|       |           `-CXXMemberCallExpr 0x5577e9c2f478 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5577e9c2f3e8 <col:26> '<bound member function type>' ->find 0x5577e9c25348
|       |             | `-CXXThisExpr 0x5577e9c2f3d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5577e9c2f4b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c2f418 <col:31> 'const char *' lvalue ParmVar 0x5577e9c07038 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5577e9c2f4c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c2f438 <col:40> 'int' lvalue ParmVar 0x5577e9c070b8 'flags' 'int'
|       |             `-DeclRefExpr 0x5577e9c2f458 <col:47> 'Args::Slot *' lvalue Var 0x5577e9c2f2e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5577e9c2f608 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5577e9c2f5f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5577e9c2f5d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5577e9c2f5a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |       `-ImplicitCastExpr 0x5577e9c2f588 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5577e9c2f568 <col:20> 'String' lvalue Var 0x5577e9c2f370 'str' 'String'
|       `-CompoundStmt 0x5577e9c2fe40 <col:61, line:753:9>
|         |-DeclStmt 0x5577e9c2f9e0 <line:751:13, col:63>
|         | `-VarDecl 0x5577e9c2f658 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5577e9c2f9b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5577e9c2f920 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5577e9c2f968 <col:47> 'T' lvalue ParmVar 0x5577e9c071d8 'variable' 'T &'
|         |     `-UnaryOperator 0x5577e9c2f998 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5577e9c2f988 <col:58> 'Args *' this
|         `-CallExpr 0x5577e9c2fe10 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5577e9c2fa08 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|           | `-CXXThisExpr 0x5577e9c2f9f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5577e9c2fdd0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5577e9c2fa38 <col:23> 'T *' lvalue Var 0x5577e9c2f658 's' 'T *'
|           | `-CallExpr 0x5577e9c2fd90 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5577e9c2fc20 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5577e9c2fc68 <col:56> 'P' lvalue ParmVar 0x5577e9c07130 'parser' 'P'
|           |   |-DeclRefExpr 0x5577e9c2fc88 <col:64> 'String' lvalue Var 0x5577e9c2f370 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5577e9c2fd38 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5577e9c2fcc8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|           |   | `-DeclRefExpr 0x5577e9c2fca8 <col:70> 'T *' lvalue Var 0x5577e9c2f658 's' 'T *'
|           |   `-UnaryOperator 0x5577e9c2fd78 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5577e9c2fd68 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5577e9c2fdf0 <col:81> 'Args::Slot *' lvalue Var 0x5577e9c2f2e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5577e9c07a18 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5577e9c07430 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5577e9c074a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5577e9c07528 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5577e9c07978 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5577e9c075f0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c07670 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c076e8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c07788 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5577e9c07828 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5577e9c30c28 <col:98, line:762:5>
|     |-DeclStmt 0x5577e9c2ff30 <line:758:9, col:26>
|     | `-VarDecl 0x5577e9c2fec8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5577e9c30150 <line:759:9, col:55>
|     | `-VarDecl 0x5577e9c2ff58 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5577e9c30138 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5577e9c30108 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5577e9c300f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5577e9c300d0 <col:22, col:54> 'String' (CXXTemporary 0x5577e9c300d0)
|     |           `-CXXMemberCallExpr 0x5577e9c30060 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5577e9c2ffd0 <col:22> '<bound member function type>' ->find 0x5577e9c25348
|     |             | `-CXXThisExpr 0x5577e9c2ffc0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5577e9c30098 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5577e9c30000 <col:27> 'const char *' lvalue ParmVar 0x5577e9c075f0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5577e9c300b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5577e9c30020 <col:36> 'int' lvalue ParmVar 0x5577e9c07670 'flags' 'int'
|     |             `-DeclRefExpr 0x5577e9c30040 <col:43> 'Args::Slot *' lvalue Var 0x5577e9c2fec8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5577e9c30570 <line:760:9, col:59>
|     | `-VarDecl 0x5577e9c301a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5577e9c30540 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5577e9c304b0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5577e9c304f8 <col:43> 'T' lvalue ParmVar 0x5577e9c07788 'variable' 'T &'
|     |     `-UnaryOperator 0x5577e9c30528 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5577e9c30518 <col:54> 'Args *' this
|     `-CallExpr 0x5577e9c30bf8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5577e9c30598 <col:9> '<bound member function type>' ->postparse 0x5577e9c25558
|       | `-CXXThisExpr 0x5577e9c30588 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5577e9c30bb8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5577e9c305c8 <col:19> 'T *' lvalue Var 0x5577e9c301a8 's' 'T *'
|       | `-ParenExpr 0x5577e9c30b98 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5577e9c30b68 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5577e9c30b50 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5577e9c30b38 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5577e9c30b18 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5577e9c30ae8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |     |       `-ImplicitCastExpr 0x5577e9c30ad0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5577e9c305e8 <col:25> 'String' lvalue Var 0x5577e9c2ff58 'str' 'String'
|       |     |-CallExpr 0x5577e9c30940 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5577e9c307d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5577e9c30818 <col:59> 'P' lvalue ParmVar 0x5577e9c076e8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5577e9c30838 <col:67> 'String' lvalue Var 0x5577e9c2ff58 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5577e9c308e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5577e9c30878 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|       |     | | `-DeclRefExpr 0x5577e9c30858 <col:73> 'T *' lvalue Var 0x5577e9c301a8 's' 'T *'
|       |     | `-UnaryOperator 0x5577e9c30928 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5577e9c30918 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5577e9c30ab0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5577e9c30a90 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5577e9c30a60 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5577e9c30a10 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5577e9c309a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|       |         | | `-DeclRefExpr 0x5577e9c30980 <col:87> 'T *' lvalue Var 0x5577e9c301a8 's' 'T *'
|       |         | `-DeclRefExpr 0x5577e9c30a40 <col:91> 'const V' lvalue ParmVar 0x5577e9c07828 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5577e9c30a80 <col:98> 'bool' true
|       `-DeclRefExpr 0x5577e9c30bd8 <col:106> 'Args::Slot *' lvalue Var 0x5577e9c2fec8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5577e9c08088 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5577e9c07a98 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c07b18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5577e9c07b98 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5577e9c07fe8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5577e9c07c60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c07ce0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c07d58 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c07df8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5577e9c07e98 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5577e9c31c08 <col:60, line:773:5>
|     |-DeclStmt 0x5577e9c30cd0 <line:767:9, col:26>
|     | `-VarDecl 0x5577e9c30c68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5577e9c31bd0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5577e9c31bf0 <line:768:13, col:58>
|       | `-VarDecl 0x5577e9c30cf8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5577e9c30ed8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5577e9c30ea8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5577e9c30e90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5577e9c30e70 <col:26, col:58> 'String' (CXXTemporary 0x5577e9c30e70)
|       |           `-CXXMemberCallExpr 0x5577e9c30e00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5577e9c30d70 <col:26> '<bound member function type>' ->find 0x5577e9c25348
|       |             | `-CXXThisExpr 0x5577e9c30d60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5577e9c30e38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c30da0 <col:31> 'const char *' lvalue ParmVar 0x5577e9c07c60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5577e9c30e50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c30dc0 <col:40> 'int' lvalue ParmVar 0x5577e9c07ce0 'flags' 'int'
|       |             `-DeclRefExpr 0x5577e9c30de0 <col:47> 'Args::Slot *' lvalue Var 0x5577e9c30c68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5577e9c30f90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5577e9c30f78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5577e9c30f58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5577e9c30f28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |       `-ImplicitCastExpr 0x5577e9c30f10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5577e9c30ef0 <col:20> 'String' lvalue Var 0x5577e9c30cf8 'str' 'String'
|       `-CompoundStmt 0x5577e9c31ba8 <col:61, line:772:9>
|         |-DeclStmt 0x5577e9c312d0 <line:769:13, col:66>
|         | `-VarDecl 0x5577e9c30fe8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5577e9c312a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5577e9c31210 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5577e9c31258 <col:49> 'T1' lvalue ParmVar 0x5577e9c07df8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5577e9c31288 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5577e9c31278 <col:61> 'Args *' this
|         |-DeclStmt 0x5577e9c31640 <line:770:13, col:66>
|         | `-VarDecl 0x5577e9c31358 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5577e9c31610 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5577e9c31580 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5577e9c315c8 <col:49> 'T2' lvalue ParmVar 0x5577e9c07e98 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5577e9c315f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5577e9c315e8 <col:61> 'Args *' this
|         `-CallExpr 0x5577e9c31b78 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5577e9c31668 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|           | `-CXXThisExpr 0x5577e9c31658 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5577e9c31b38 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5577e9c316d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5577e9c31698 <col:23> 'T1 *' lvalue Var 0x5577e9c30fe8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5577e9c316b8 <col:29> 'T2 *' lvalue Var 0x5577e9c31358 's2' 'T2 *'
|           | `-CallExpr 0x5577e9c31af0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5577e9c318c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5577e9c31908 <col:63> 'P' lvalue ParmVar 0x5577e9c07d58 'parser' 'P'
|           |   |-DeclRefExpr 0x5577e9c31928 <col:71> 'String' lvalue Var 0x5577e9c30cf8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5577e9c319d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5577e9c31968 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|           |   | `-DeclRefExpr 0x5577e9c31948 <col:77> 'T1 *' lvalue Var 0x5577e9c30fe8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5577e9c31a98 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5577e9c31a28 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|           |   | `-DeclRefExpr 0x5577e9c31a08 <col:82> 'T2 *' lvalue Var 0x5577e9c31358 's2' 'T2 *'
|           |   `-UnaryOperator 0x5577e9c31ad8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5577e9c31ac8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5577e9c31b58 <col:94> 'Args::Slot *' lvalue Var 0x5577e9c30c68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5577e9c08478 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5577e9c08108 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9c083d8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5577e9c081c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c08240 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c082b8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c32120 <col:67, line:780:5>
|     |-DeclStmt 0x5577e9c31ca0 <line:777:9, col:26>
|     | `-VarDecl 0x5577e9c31c38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5577e9c320e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5577e9c32108 <line:778:13, col:58>
|       | `-VarDecl 0x5577e9c31cc8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5577e9c31ea8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5577e9c31e78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5577e9c31e60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5577e9c31e40 <col:26, col:58> 'String' (CXXTemporary 0x5577e9c31e40)
|       |           `-CXXMemberCallExpr 0x5577e9c31dd0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5577e9c31d40 <col:26> '<bound member function type>' ->find 0x5577e9c25348
|       |             | `-CXXThisExpr 0x5577e9c31d30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5577e9c31e08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c31d70 <col:31> 'const char *' lvalue ParmVar 0x5577e9c081c0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5577e9c31e20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5577e9c31d90 <col:40> 'int' lvalue ParmVar 0x5577e9c08240 'flags' 'int'
|       |             `-DeclRefExpr 0x5577e9c31db0 <col:47> 'Args::Slot *' lvalue Var 0x5577e9c31c38 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5577e9c31f60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5577e9c31f48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5577e9c31f28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5577e9c31ef8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|       |       `-ImplicitCastExpr 0x5577e9c31ee0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5577e9c31ec0 <col:20> 'String' lvalue Var 0x5577e9c31cc8 'str' 'String'
|       `-CallExpr 0x5577e9c320b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5577e9c31f88 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|         | `-CXXThisExpr 0x5577e9c31f78 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5577e9c32068 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5577e9c31fd8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5577e9c31fb8 <col:23> 'P' lvalue ParmVar 0x5577e9c082b8 'parser' 'P'
|         | |-DeclRefExpr 0x5577e9c32020 <col:36> 'String' lvalue Var 0x5577e9c31cc8 'str' 'String'
|         | `-UnaryOperator 0x5577e9c32050 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5577e9c32040 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5577e9c32098 <col:49> 'Args::Slot *' lvalue Var 0x5577e9c31c38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5577e9c08818 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5577e9c084e8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5577e9c08778 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5577e9c085a0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c08620 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c08698 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5577e9c32a90 <col:71, line:792:5>
|     |-DeclStmt 0x5577e9c321b8 <line:784:9, col:26>
|     | `-VarDecl 0x5577e9c32150 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5577e9c32288 <line:785:9, col:29>
|     | `-VarDecl 0x5577e9c321e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5577e9c32270 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5577e9c32250 <col:28> 'int' 1
|     |-WhileStmt 0x5577e9c32940 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5577e9c32960 <line:786:16, col:61>
|     | | `-VarDecl 0x5577e9c322b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5577e9c32490 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5577e9c32460 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5577e9c32448 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5577e9c32428 <col:29, col:61> 'String' (CXXTemporary 0x5577e9c32428)
|     | |           `-CXXMemberCallExpr 0x5577e9c323b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5577e9c32328 <col:29> '<bound member function type>' ->find 0x5577e9c25348
|     | |             | `-CXXThisExpr 0x5577e9c32318 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5577e9c323f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5577e9c32358 <col:34> 'const char *' lvalue ParmVar 0x5577e9c085a0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5577e9c32408 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5577e9c32378 <col:43> 'int' lvalue ParmVar 0x5577e9c08620 'flags' 'int'
|     | |             `-DeclRefExpr 0x5577e9c32398 <col:50> 'Args::Slot *' lvalue Var 0x5577e9c32150 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5577e9c32548 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5577e9c32530 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5577e9c32510 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5577e9c324e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|     | |       `-ImplicitCastExpr 0x5577e9c324c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5577e9c324a8 <col:23> 'String' lvalue Var 0x5577e9c322b0 'str' 'String'
|     | `-CompoundStmt 0x5577e9c32918 <col:64, line:790:9>
|     |   |-CallExpr 0x5577e9c326a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5577e9c32570 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|     |   | | `-CXXThisExpr 0x5577e9c32560 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5577e9c32650 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5577e9c325c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5577e9c325a0 <col:23> 'P' lvalue ParmVar 0x5577e9c08698 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5577e9c32608 <col:36> 'String' lvalue Var 0x5577e9c322b0 'str' 'String'
|     |   | | `-UnaryOperator 0x5577e9c32638 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5577e9c32628 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5577e9c32680 <col:49> 'Args::Slot *' lvalue Var 0x5577e9c32150 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5577e9c32838 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5577e9c326d0 <col:13> 'int' lvalue Var 0x5577e9c321e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5577e9c32820 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5577e9c32800 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5577e9c32768 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5577e9c32748 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5577e9c32730 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5577e9c326f0 <col:28> 'int' lvalue Var 0x5577e9c321e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5577e9c32710 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5577e9c327e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5577e9c327b8 <col:49> 'bool' lvalue ->_read_status 0x5577e9bec980
|     |   |         `-ImplicitCastExpr 0x5577e9c32798 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5577e9c32788 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5577e9c328e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5577e9c32858 <col:13> 'int' lvalue ParmVar 0x5577e9c08620 'flags' 'int'
|     |     `-UnaryOperator 0x5577e9c328d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5577e9c328b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5577e9c32898 <col:23> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5577e9c32a70 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5577e9c329a8 <col:9> 'bool' lvalue ->_read_status 0x5577e9bec980
|       | `-ImplicitCastExpr 0x5577e9c32988 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5577e9c32978 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5577e9c32a50 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5577e9c32a30 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5577e9c32a18 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5577e9c329d8 <col:25> 'int' lvalue Var 0x5577e9c321e8 'read_status' 'int'
|           `-IntegerLiteral 0x5577e9c329f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5577e9c08cf8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5577e9c08888 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c08908 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c08c58 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5577e9c089c8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c08a48 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c08ac0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c08b68 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5577e9c379f0 <col:84, line:805:5>
|     |-DeclStmt 0x5577e9c32b38 <line:796:9, col:26>
|     | `-VarDecl 0x5577e9c32ad0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5577e9c32c08 <line:797:9, col:29>
|     | `-VarDecl 0x5577e9c32b68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5577e9c32bf0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5577e9c32bd0 <col:28> 'int' 1
|     |-DeclStmt 0x5577e9c32f40 <line:798:9, col:71>
|     | `-VarDecl 0x5577e9c32c58 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5577e9c32f10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5577e9c32e80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5577e9c32ec8 <col:55> 'T' lvalue ParmVar 0x5577e9c08b68 'variable' 'T &'
|     |     `-UnaryOperator 0x5577e9c32ef8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5577e9c32ee8 <col:66> 'Args *' this
|     |-WhileStmt 0x5577e9c378a0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5577e9c378c0 <line:799:16, col:61>
|     | | `-VarDecl 0x5577e9c32f68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5577e9c33148 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5577e9c33118 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5577e9c33100 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5577e9c330e0 <col:29, col:61> 'String' (CXXTemporary 0x5577e9c330e0)
|     | |           `-CXXMemberCallExpr 0x5577e9c33070 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5577e9c32fe0 <col:29> '<bound member function type>' ->find 0x5577e9c25348
|     | |             | `-CXXThisExpr 0x5577e9c32fd0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5577e9c330a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5577e9c33010 <col:34> 'const char *' lvalue ParmVar 0x5577e9c089c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5577e9c330c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5577e9c33030 <col:43> 'int' lvalue ParmVar 0x5577e9c08a48 'flags' 'int'
|     | |             `-DeclRefExpr 0x5577e9c33050 <col:50> 'Args::Slot *' lvalue Var 0x5577e9c32ad0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5577e9c33200 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5577e9c331e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5577e9c331c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5577e9c33198 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|     | |       `-ImplicitCastExpr 0x5577e9c33180 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5577e9c33160 <col:23> 'String' lvalue Var 0x5577e9c32f68 'str' 'String'
|     | `-CompoundStmt 0x5577e9c37878 <col:64, line:803:9>
|     |   |-CallExpr 0x5577e9c37600 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5577e9c33228 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|     |   | | `-CXXThisExpr 0x5577e9c33218 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5577e9c375c0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5577e9c33258 <col:23> 'T *' lvalue Var 0x5577e9c32c58 's' 'T *'
|     |   | | `-CallExpr 0x5577e9c37580 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5577e9c37410 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5577e9c37458 <col:56> 'P' lvalue ParmVar 0x5577e9c08ac0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5577e9c37478 <col:64> 'String' lvalue Var 0x5577e9c32f68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5577e9c37528 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5577e9c374b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|     |   | |   | `-DeclRefExpr 0x5577e9c37498 <col:70> 'T *' lvalue Var 0x5577e9c32c58 's' 'T *'
|     |   | |   `-UnaryOperator 0x5577e9c37568 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5577e9c37558 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5577e9c375e0 <col:81> 'Args::Slot *' lvalue Var 0x5577e9c32ad0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5577e9c37798 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5577e9c37630 <col:13> 'int' lvalue Var 0x5577e9c32b68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5577e9c37780 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5577e9c37760 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5577e9c376c8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5577e9c376a8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5577e9c37690 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5577e9c37650 <col:28> 'int' lvalue Var 0x5577e9c32b68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5577e9c37670 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5577e9c37748 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5577e9c37718 <col:49> 'bool' lvalue ->_read_status 0x5577e9bec980
|     |   |         `-ImplicitCastExpr 0x5577e9c376f8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5577e9c376e8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5577e9c37848 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5577e9c377b8 <col:13> 'int' lvalue ParmVar 0x5577e9c08a48 'flags' 'int'
|     |     `-UnaryOperator 0x5577e9c37830 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5577e9c37818 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5577e9c377f8 <col:23> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5577e9c379d0 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5577e9c37908 <col:9> 'bool' lvalue ->_read_status 0x5577e9bec980
|       | `-ImplicitCastExpr 0x5577e9c378e8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5577e9c378d8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5577e9c379b0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5577e9c37990 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5577e9c37978 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5577e9c37938 <col:25> 'int' lvalue Var 0x5577e9c32b68 'read_status' 'int'
|           `-IntegerLiteral 0x5577e9c37958 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5577e9c092d8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5577e9c08d70 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5577e9c08de8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5577e9c09238 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5577e9c08ea8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5577e9c08f28 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5577e9c08fa0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5577e9c090f0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5577e9c387f8 <col:87, line:821:5>
|     |-DeclStmt 0x5577e9c37aa0 <line:809:9, col:26>
|     | `-VarDecl 0x5577e9c37a38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5577e9c37b70 <line:810:9, col:29>
|     | `-VarDecl 0x5577e9c37ad0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5577e9c37b58 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5577e9c37b38 <col:28> 'int' 1
|     |-DeclStmt 0x5577e9c37db8 <line:811:9, col:38>
|     | `-VarDecl 0x5577e9c37ca0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5577e9c37d90 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5577e9c37d18 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5577e9c37d70 <col:29> 'Vector<T>' lvalue ParmVar 0x5577e9c090f0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5577e9c386a8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5577e9c386c8 <line:812:16, col:61>
|     | | `-VarDecl 0x5577e9c37de0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5577e9c37fc0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5577e9c37f90 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5577e9c37f78 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5577e9c37f58 <col:29, col:61> 'String' (CXXTemporary 0x5577e9c37f58)
|     | |           `-CXXMemberCallExpr 0x5577e9c37ee8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5577e9c37e58 <col:29> '<bound member function type>' ->find 0x5577e9c25348
|     | |             | `-CXXThisExpr 0x5577e9c37e48 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5577e9c37f20 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5577e9c37e88 <col:34> 'const char *' lvalue ParmVar 0x5577e9c08ea8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5577e9c37f38 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5577e9c37ea8 <col:43> 'int' lvalue ParmVar 0x5577e9c08f28 'flags' 'int'
|     | |             `-DeclRefExpr 0x5577e9c37ec8 <col:50> 'Args::Slot *' lvalue Var 0x5577e9c37a38 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5577e9c38078 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5577e9c38060 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5577e9c38040 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5577e9c38010 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5577e9941fb8
|     | |       `-ImplicitCastExpr 0x5577e9c37ff8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5577e9c37fd8 <col:23> 'String' lvalue Var 0x5577e9c37de0 'str' 'String'
|     | `-CompoundStmt 0x5577e9c38670 <col:64, line:819:9>
|     |   |-DeclStmt 0x5577e9c38138 <line:813:13, col:23>
|     |   | `-VarDecl 0x5577e9c380a0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5577e9c38118 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5577e9c382b8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5577e9c38160 <col:13> '<bound member function type>' ->postparse 0x5577e9c25558
|     |   | | `-CXXThisExpr 0x5577e9c38150 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5577e9c38260 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5577e9c381b0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5577e9c38190 <col:23> 'P' lvalue ParmVar 0x5577e9c08fa0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5577e9c381f8 <col:36> 'String' lvalue Var 0x5577e9c37de0 'str' 'String'
|     |   | | |-DeclRefExpr 0x5577e9c38218 <col:41> 'T' lvalue Var 0x5577e9c380a0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5577e9c38248 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5577e9c38238 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5577e9c38298 <col:53> 'Args::Slot *' lvalue Var 0x5577e9c37a38 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5577e9c38410 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5577e9c38348 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5577e9c38318 <col:17> 'bool' lvalue ->_read_status 0x5577e9bec980
|     |   | |   `-ImplicitCastExpr 0x5577e9c382f8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5577e9c382e8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5577e9c383e8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5577e9c38380 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5577e9c38360 <col:17> 'Vector<T> *' lvalue Var 0x5577e9c37ca0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5577e9c383c8 <col:30> 'T' lvalue Var 0x5577e9c380a0 'sx' 'T'
|     |   |-BinaryOperator 0x5577e9c38590 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5577e9c38428 <col:13> 'int' lvalue Var 0x5577e9c37ad0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5577e9c38578 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5577e9c38558 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5577e9c384c0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5577e9c384a0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5577e9c38488 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5577e9c38448 <col:28> 'int' lvalue Var 0x5577e9c37ad0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5577e9c38468 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5577e9c38540 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5577e9c38510 <col:49> 'bool' lvalue ->_read_status 0x5577e9bec980
|     |   |         `-ImplicitCastExpr 0x5577e9c384f0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5577e9c384e0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5577e9c38640 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5577e9c385b0 <col:13> 'int' lvalue ParmVar 0x5577e9c08f28 'flags' 'int'
|     |     `-UnaryOperator 0x5577e9c38628 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5577e9c38610 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5577e9c385f0 <col:23> 'const int' lvalue Var 0x5577e9bf3ec8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5577e9c387d8 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5577e9c38710 <col:9> 'bool' lvalue ->_read_status 0x5577e9bec980
|       | `-ImplicitCastExpr 0x5577e9c386f0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5577e9c386e0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5577e9c387b8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5577e9c38798 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5577e9c38780 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5577e9c38740 <col:25> 'int' lvalue Var 0x5577e9c37ad0 'read_status' 'int'
|           `-IntegerLiteral 0x5577e9c38760 <col:40> 'int' 1
|-AccessSpecDecl 0x5577e9c09350 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5577e9c09378 prev 0x5577e9bf21c8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5577e9c09470 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5577e9c09560 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5577e9c38830 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5577e9c09650 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5577e9c38840 <col:25, line:830:9>
| |-CXXMethodDecl 0x5577e9c09750 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5577e9c09800 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5577e9c098a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5577e9c098a8
| | `-ParmVarDecl 0x5577e9c099b8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5577e9c0a178 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5577e9c0a178
|   `-ParmVarDecl 0x5577e9c0a288 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5577e9c09a28 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5577e9c09b88 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5577e9c09d80 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5577e9c09c30 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5577e9c09ca8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5577e9c38a20 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5577e9c0a038 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5577e9c38890 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5577e9c38850 <col:20> 'void *' lvalue ParmVar 0x5577e9c09c30 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5577e9c0a0a0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5577e9c38918 <col:32, col:45> 'char *' array Function 0x5577e9764c28 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5577e9c38900 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5577e9c388d0 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5577e9c09ca8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5577e9c0a100 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5577e9c389e0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5577e9c389a0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5577e9c09ca8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5577e9c38aa0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5577e9c09e80 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5577e9c09650 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5577e9c38b28 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5577e9c38b08 <line:840:13, col:22> 'void' array Function 0x5577e9764f88 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5577e9c38af0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5577e9c38ac0 <col:22> 'char *' lvalue ->_slot 0x5577e9c0a0a0
| |         `-CXXThisExpr 0x5577e9c38ab0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5577e9c09f80 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5577e9c09750 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5577e9c38d18 <col:22, line:844:9>
| |   `-CallExpr 0x5577e9c38c80 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5577e9c38c68 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5577e9c38c48 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5577e9870a08 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5577e9c38cb8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5577e9c38b98 <col:20> 'void *' lvalue ->_ptr 0x5577e9c0a038
| |     |   `-CXXThisExpr 0x5577e9c38b88 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5577e9c38ce8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5577e9c38cd0 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5577e9c38bd8 <col:26> 'char *' lvalue ->_slot 0x5577e9c0a0a0
| |     |     `-CXXThisExpr 0x5577e9c38bc8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5577e9c38d00 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5577e9c38c18 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5577e9c0a100
| |         `-CXXThisExpr 0x5577e9c38c08 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5577e9c0a038 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5577e9c0a0a0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5577e9c0a100 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5577e9c0a2f8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5577e9c0a2f8
| | `-ParmVarDecl 0x5577e9c0a408 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5577e9c0a4a8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5577e9c0a4a8
|   `-ParmVarDecl 0x5577e9c0a5b8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5577e9c0a758 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5577e9c0a628 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5577e9c0a6c8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5577e9c17430 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5577e9c17628 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5577e9c174f8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5577e9c177a8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5577e9c38d50 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5577e9c38d30 <col:20> 'T *' lvalue ParmVar 0x5577e9c174f8 'ptr' 'T *'
|   | `-CompoundStmt 0x5577e9c38da0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5577e9c176f8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5577e9c09750 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5577e9c38f50 <col:22, line:857:9>
|   |   `-CallExpr 0x5577e9c38f20 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5577e9c38db0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5577e9929138 0x5577e98d3468
|   |     |-CXXOperatorCallExpr 0x5577e9c38eb0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5577e9c38e40 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5577e9b360e8 0x5577e9b35d08 0x5577e9b35938 0x5577e9b35558 0x5577e9b35178 0x5577e9b34da8
|   |     | `-MemberExpr 0x5577e9c38e10 <col:29> 'T *' lvalue ->_ptr 0x5577e9c177a8
|   |     |   `-CXXThisExpr 0x5577e9c38e00 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5577e9c38ef0 <col:35> 'T' lvalue ->_slot 0x5577e9c17808
|   |       `-CXXThisExpr 0x5577e9c38ee0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5577e9c177a8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5577e9c17808 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5577e9c17870 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5577e9c17970 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5577e9c179c0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9c17950 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5577e9c17930 <col:31> 'int' 48
|-FieldDecl 0x5577e9c179e8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5577e9c17a48 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5577e9c17aa8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5577e9c17be0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5577e9c24bf0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5577e9c24c50 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5577e9c24d00 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5577e9c24f28 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5577e9c24e30 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5577e9c25078 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5577e9c24fe8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5577e9c25348 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5577e9c25138 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5577e9c251b8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5577e9c25260 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5577e9c25558 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5577e9c25410 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5577e9c25488 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5577e9c25628 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5577e9c25778 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5577e9c256e0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5577e9c25b08 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5577e9c25838 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5577e9c258b8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5577e9c25960 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5577e9c25a18 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5577e9c25d30 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5577e9c25be0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5577e9c25c58 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5577e9c26048 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5577e9c25de0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5577e9c25fa8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5577e9c25eb8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9931e60 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9931f78 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5577e9932008 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5577e99320d8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5577e99321c0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e99323d8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5577e9932280 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9932588 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5577e9932490 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5577e99326d0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5577e9932640 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5577e9932818 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5577e9932788 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9932960 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5577e99328d0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9932a28 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5577e9932b70 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5577e9932ae0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5577e9932c38 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5577e9932d80 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5577e9932cf0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5577e9932ef8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5577e9932e38 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9933040 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5577e9932fb0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9933108 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5577e99332c8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5577e99331b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5577e9933230 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9933518 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5577e9933388 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5577e9933400 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e99335c8 <col:86> "" ""
|-CXXMethodDecl 0x5577e9933838 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5577e99336a8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5577e9933720 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e99339e8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5577e99338f8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5577e9933b98 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5577e9933aa0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5577e9933e68 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9933c50 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5577e9933cc8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5577e9933d40 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9934148 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9933f30 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5577e9933fa8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5577e9934020 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9934200 <col:115> "" ""
|-AccessSpecDecl 0x5577e9934270 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5577e99342a8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e99357c0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5577e99357c0
| `-ParmVarDecl 0x5577e99358c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5577e9935968 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5577e9935968
| `-ParmVarDecl 0x5577e9935a78 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5577e996b0a8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5577e9b5cea0 <col:7>
|-CXXConstructorDecl 0x5577e996b180 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5577e996b180
| `-ParmVarDecl 0x5577e996b298 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5577e996b308 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5577e996b308
| `-ParmVarDecl 0x5577e996b418 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5577e9b5f8a0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b4ba48 prev 0x5577e9b40c50 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9b4bb40 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5577e9b4bc30 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5577e9b4bd58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5577e9b4bed8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5577e9b4c058 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5577e9b4c1d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5577e9b5d008 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5577e9b5d878 <col:11>
|-CXXDestructorDecl 0x5577e9b5d0e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5577e9b5d218 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5577e9b5d218
| `-ParmVarDecl 0x5577e9b5d328 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5577e9b5d3c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5577e9b5d3c8
| `-ParmVarDecl 0x5577e9b5d4d8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5577e9b60298 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e9b603a8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5577e9b60628 <col:11>
|   `-ReturnStmt 0x5577e9b60618 <col:11>
|     `-UnaryOperator 0x5577e9b60600 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5577e9b605f0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5577e9b60418 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5577e9b60418
  `-ParmVarDecl 0x5577e9b60528 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b4c240 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9b4c358 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5577e9b4c3f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5577e9b4c460 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5577e9b4c4c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5577e9b4c530 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5577e9b4c590 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5577e9b4c650 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5577e9b4c6b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5577e9b4c710 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5577e9b5cf18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5577e9b4c3f8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5577e9b5d888 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5577e9b5d8e0 <col:12>
|-CXXConstructorDecl 0x5577e9b5d548 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5577e9b5d548
| `-ParmVarDecl 0x5577e9b5d658 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5577e9b5d6f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5577e9b5d6f8
| `-ParmVarDecl 0x5577e9b5d808 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5577e9b5f980 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b3a360 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5577e9b3a478 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5577e9b3a508 <col:16, col:22> col:16 public
|-EnumDecl 0x5577e9b3a530 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5577e9b3a630 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5577e9b3a710 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b3a610 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5577e9b3a5f0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5577e9b3a6c0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5577e9b3a728 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b3a6a0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5577e9b3a680 <col:22> 'int' 64
|-CXXMethodDecl 0x5577e9b3aa68 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5577e9b3a750 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5577e9b3a7d0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5577e9b3a848 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5577e9b3a8c0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5577e9b3ab28 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3ad28 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b3aba0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5577e9b3ac18 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5577e9b3add8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3af38 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5577e9b3ae48 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5577e9b3afe0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5577e9b3b340 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5577e9b3b2d0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5577e9b3b270 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5577e9b3b230 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5577e96112d0 'void'
|       |-PointerType 0x5577e98ba700 'unsigned char *'
|       | `-BuiltinType 0x5577e96113d0 'unsigned char'
|       |-TypedefType 0x5577e96b6c70 'size_t' sugar
|       | |-Typedef 0x5577e9681b20 'size_t'
|       | `-BuiltinType 0x5577e9611430 'unsigned long'
|       `-PointerType 0x5577e9611ad0 'void *'
|         `-BuiltinType 0x5577e96112d0 'void'
|-CXXMethodDecl 0x5577e9b3b7b8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5577e9b3b3b0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5577e9b3b428 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5577e9b3b4c0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5577e9b3b540 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5577e9b55eb0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5577e9b55e98 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5577e9b55e60 <col:58> 'int' 0
| |-ParmVarDecl 0x5577e9b3b5c0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5577e9b55ed8 <col:76> 'int' 0
| |-ParmVarDecl 0x5577e9b3b640 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5577e9b55ef8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5577e9b3b888 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3b908 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5577e9b3b9c8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5577e9b3ba68 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3bac0 <col:30>
|-CXXMethodDecl 0x5577e9b3bb38 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5577e9b3bbd8 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3bc30 <col:30>
|-CXXMethodDecl 0x5577e9b3bca8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5577e9b3bd48 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3bdf8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5577e9b3be98 <col:20>
| |-OptimizeNoneAttr 0x5577e9b3bef0 <col:30>
| `-WarnUnusedResultAttr 0x5577e9b3bf18 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3bf70 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5577e9b3c010 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3c068 <col:30>
|-CXXMethodDecl 0x5577e9b3c0b8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5577e9b3c158 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3c1b0 <col:30>
|-CXXMethodDecl 0x5577e9b3c1f8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5577e9b3c298 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3c2f0 <col:30>
|-CXXMethodDecl 0x5577e9b3c338 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b3c3f8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b3c4c0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5577e9b3c588 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5577e9b3c648 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b3c768 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5577e9b55fc0 <col:54, line:99:5>
|   `-ReturnStmt 0x5577e9b55fb0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5577e9b55f98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5577e9b55f68 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5577e9b4ca48
|         `-CXXThisExpr 0x5577e9b55f58 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5577e9b3c908 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5577e9b3c818 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5577e9b56070 <col:67, line:103:5>
|   `-BinaryOperator 0x5577e9b56050 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5577e9b55fe8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5577e9b4ca48
|     | `-CXXThisExpr 0x5577e9b55fd8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5577e9b56038 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b56018 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5577e9b3c818 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5577e9b3ca00 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5577e9b560f0 <col:33, line:107:5>
|   `-ReturnStmt 0x5577e9b560e0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5577e9b560c8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5577e9b56098 <col:16> 'void *' lvalue ->_destructor_argument 0x5577e9b4cab0
|         `-CXXThisExpr 0x5577e9b56088 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5577e9b3cac0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5577e9b56720 <col:25, line:113:5>
|   |-ParenExpr 0x5577e9b56468 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5577e9b56438 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b561a8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5577e9b56180 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5577e9b56148 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5577e9b56118 <col:24> '<bound member function type>' ->shared 0x5577e9b3bb38
|   |   |       `-ImplicitCastExpr 0x5577e9b56168 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5577e9b56108 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5577e9b56208 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b561e8 <col:42> 'int' 0
|   |   `-CallExpr 0x5577e9b56398 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b56380 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b56360 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b563d8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b56278 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5577e9b563f0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b562a0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b56408 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b562d8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5577e9b56420 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b56348 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b56330 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b562f8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5577e9b56668 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5577e9b56498 <col:2> 'unsigned char *' lvalue ->_head 0x5577e9b4c850
|   | | `-CXXThisExpr 0x5577e9b56488 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5577e9b56650 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5577e9b56630 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5577e9b564d8 <col:10> 'unsigned char *' lvalue ->_data 0x5577e9b4c8b8
|   |     | `-CXXThisExpr 0x5577e9b564c8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5577e9b56618 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5577e9b565f8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5577e9b56518 <col:18> 'unsigned char *' lvalue ->_tail 0x5577e9b4c920
|   |         | `-CXXThisExpr 0x5577e9b56508 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5577e9b565e0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5577e9b565c0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5577e9b56558 <col:26> 'unsigned char *' lvalue ->_end 0x5577e9b4c988
|   |             | `-CXXThisExpr 0x5577e9b56548 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5577e9b565a8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5577e9b56588 <col:33> 'int' 0
|   `-BinaryOperator 0x5577e9b56700 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5577e9b56698 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5577e9b4ca48
|     | `-CXXThisExpr 0x5577e9b56688 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5577e9b566e8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5577e9b566c8 <col:16> 'int' 0
|-CXXMethodDecl 0x5577e9b3cc00 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5577e9b3cb70 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b3cca8 <col:20>
| |-OptimizeNoneAttr 0x5577e9b3cd00 <col:30>
| `-WarnUnusedResultAttr 0x5577e9b3cd28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3cdf8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5577e9b3cd68 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b3cea0 <col:20>
| |-OptimizeNoneAttr 0x5577e9b3cef8 <col:30>
| `-WarnUnusedResultAttr 0x5577e9b3cf20 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3d058 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5577e9b3cf60 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5577e9b3d100 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3d200 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5577e9b3d170 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b3d2a8 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3d300 <col:30>
|-CXXMethodDecl 0x5577e9b3d3c8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5577e9b3d338 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5577e9b3d470 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3d570 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5577e9b3d4e0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5577e9b3d618 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3d718 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5577e9b3d688 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b3d7c0 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3d818 <col:30>
|-CXXMethodDecl 0x5577e9b3d9a8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5577e9b3d858 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5577e9b3d8d0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5577e9b55f18 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5577e9b3da58 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5577e9b3dc58 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b3dad0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5577e9b3db48 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b3de68 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b3dd18 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5577e9b3dd90 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b3e078 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5577e9b3df28 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5577e9b3dfa8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5577e9b55f28 <col:39> 'int' 0
|-CXXMethodDecl 0x5577e9b3e148 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5577e9b3e210 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5577e9b3e2d8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5577e9b3e398 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b3e460 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5577e9b3e5a8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5577e9b3e518 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5577e9b3e778 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b3e668 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5577e9b3e6e0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b3e848 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5577e9b3e908 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5577e9b3e9a8 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3ea00 <col:30>
|-CXXMethodDecl 0x5577e9b3ea50 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5577e9b3eaf0 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3eb48 <col:30>
|-CXXMethodDecl 0x5577e9b3eb98 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5577e9b3ec58 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b3ed20 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5577e9b3edc0 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3ee18 <col:30>
|-CXXMethodDecl 0x5577e9b3ef68 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b3ee58 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5577e9b3eed0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b3f0b8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5577e9b3f028 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b3f190 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5577e9b3f250 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5577e9b3f2f0 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3f348 <col:30>
|-CXXMethodDecl 0x5577e9b3f398 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5577e9b3f438 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3f490 <col:30>
|-CXXMethodDecl 0x5577e9b3f4e0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5577e9b3f5a8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5577e9b3f648 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3f6a0 <col:30>
|-CXXMethodDecl 0x5577e9b3f6e8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5577e9b3f808 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5577e9b3f978 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5577e9b3f8b8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5577e9b3fa68 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5577e9b3fb08 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3fb60 <col:30>
|-CXXMethodDecl 0x5577e9b3fbb0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5577e9b3fc70 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5577e9b3fea8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5577e9b3fd20 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5577e9b3fd98 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b3ff58 <col:20>
| `-OptimizeNoneAttr 0x5577e9b3ffb0 <col:30>
|-CXXMethodDecl 0x5577e9b40058 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5577e9b400f8 <col:20>
| `-OptimizeNoneAttr 0x5577e9b40150 <col:30>
|-CXXMethodDecl 0x5577e9b401a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5577e9b40240 <col:20>
| `-OptimizeNoneAttr 0x5577e9b40298 <col:30>
|-CXXMethodDecl 0x5577e9b402e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5577e9b40380 <col:20>
| `-OptimizeNoneAttr 0x5577e9b403d8 <col:30>
|-CXXMethodDecl 0x5577e9b404d8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5577e9b40410 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5577e9b40580 <col:20>
| `-OptimizeNoneAttr 0x5577e9b405d8 <col:30>
|-CXXMethodDecl 0x5577e9b40798 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5577e9b40610 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5577e9b40688 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b40848 <col:20>
| `-OptimizeNoneAttr 0x5577e9b408a0 <col:30>
|-CXXMethodDecl 0x5577e9b40948 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5577e9b40a68 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5577e9b40b88 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5577e9b40c28 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5577e9b40c50 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5577e9b40d78 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5577e9b40e18 <col:20>
| `-OptimizeNoneAttr 0x5577e9b40e70 <col:30>
|-CXXMethodDecl 0x5577e9b40f18 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5577e9b40fb8 <col:20>
| `-OptimizeNoneAttr 0x5577e9b41010 <col:30>
|-AccessSpecDecl 0x5577e9b41038 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5577e9b41060 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5577e9b41160 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5577e9b411b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b41140 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5577e9b41120 <col:14> 'int' 48
|-CXXMethodDecl 0x5577e9b41218 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5577e9b412b8 <col:20>
| `-OptimizeNoneAttr 0x5577e9b41310 <col:30>
|-CXXMethodDecl 0x5577e9b41388 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5577e9b41428 <col:20>
| `-OptimizeNoneAttr 0x5577e9b41480 <col:30>
|-CXXMethodDecl 0x5577e9b41548 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5577e9b414b8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5577e9b416e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5577e9b41888 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5577e9b41798 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5577e9b41930 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5577e9b41a30 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5577e9b41de0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b41a10 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5577e9b419f0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5577e9b41ac0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5577e9b41df8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b41aa0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5577e9b41a80 <col:14> 'int' 1
| |-EnumConstantDecl 0x5577e9b41b50 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5577e9b41e10 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b41b30 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5577e9b41b10 <col:14> 'int' 2
| |-EnumConstantDecl 0x5577e9b41be0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5577e9b41e28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b41bc0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5577e9b41ba0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5577e9b41c70 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5577e9b41e40 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b41c50 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5577e9b41c30 <col:13> 'int' 4
| |-EnumConstantDecl 0x5577e9b41d00 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5577e9b41e58 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b41ce0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5577e9b41cc0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5577e9b41d90 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5577e9b41e70 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b41d70 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5577e9b41d50 <col:14> 'int' 6
|-CXXMethodDecl 0x5577e9b41ed8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5577e9b41f78 <col:20>
| `-OptimizeNoneAttr 0x5577e9b41fd0 <col:30>
|-CXXMethodDecl 0x5577e9b420c8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5577e9b42008 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5577e9b42170 <col:20>
| `-OptimizeNoneAttr 0x5577e9b421c8 <col:30>
|-CXXMethodDecl 0x5577e9b42238 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5577e9b42360 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5577e9b424d8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5577e9b42410 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5577e9b425a0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5577e9b42668 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5577e9b427a8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5577e9b42718 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5577e9b42850 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5577e9b42950 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5577e9b42b50 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b42930 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5577e9b42910 <col:23> 'int' 0
| |-EnumConstantDecl 0x5577e9b429e0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5577e9b42b68 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b429c0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5577e9b429a0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5577e9b42a70 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5577e9b42b80 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b42a50 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5577e9b42a30 <col:24> 'int' 0
| `-EnumConstantDecl 0x5577e9b42b00 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5577e9b42b98 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b42ae0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5577e9b42ac0 <col:47> 'int' 16
|-CXXMethodDecl 0x5577e9b42bf8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5577e9b42d68 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5577e9b42ca8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5577e9b42e10 <col:20>
| `-OptimizeNoneAttr 0x5577e9b42e68 <col:30>
|-CXXMethodDecl 0x5577e9b42eb8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5577e9b56840 <col:18, col:36>
|   `-ReturnStmt 0x5577e9b56830 <col:20, col:33>
|     `-ImplicitCastExpr 0x5577e9b56818 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5577e9b567f8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5577e9b567c8 <col:27> '<bound member function type>' ->xanno 0x5577e9b40f18
|           `-CXXThisExpr 0x5577e9b567b8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5577e9b42fb0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5577e9b56950 <col:30, col:48>
|   `-ReturnStmt 0x5577e9b56940 <col:32, col:45>
|     `-ImplicitCastExpr 0x5577e9b56928 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5577e9b56908 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5577e9b568d8 <col:39> '<bound member function type>' ->xanno 0x5577e9b40d78
|           `-CXXThisExpr 0x5577e9b568c8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5577e9b43098 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5577e9b56ae8 <col:24, col:50>
|   `-ReturnStmt 0x5577e9b56ad8 <col:26, col:47>
|     `-UnaryOperator 0x5577e9b56ac0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5577e9b56aa0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5577e9b56a88 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5577e9b56a38 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5577e9b4bd58
|         |   `-CXXMemberCallExpr 0x5577e9b56a18 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5577e9b569e8 <col:34> '<bound member function type>' ->xanno 0x5577e9b40f18
|         |       `-CXXThisExpr 0x5577e9b569d8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5577e9b56a68 <col:46> 'int' 0
|-CXXMethodDecl 0x5577e9b431a0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5577e9b56cb8 <col:36, col:62>
|   `-ReturnStmt 0x5577e9b56ca8 <col:38, col:59>
|     `-UnaryOperator 0x5577e9b56c90 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5577e9b56c70 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5577e9b56c58 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5577e9b56bd0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5577e9b4bd58
|         |   `-CXXMemberCallExpr 0x5577e9b56bb0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5577e9b56b80 <col:46> '<bound member function type>' ->xanno 0x5577e9b40d78
|         |       `-CXXThisExpr 0x5577e9b56b70 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5577e9b56c00 <col:58> 'int' 0
|-CXXMethodDecl 0x5577e9b432b8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5577e9b56e50 <col:26, col:53>
|   `-ReturnStmt 0x5577e9b56e40 <col:28, col:50>
|     `-UnaryOperator 0x5577e9b56e28 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5577e9b56e08 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5577e9b56df0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5577e9b56da0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5577e9b4c058
|         |   `-CXXMemberCallExpr 0x5577e9b56d80 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5577e9b56d50 <col:36> '<bound member function type>' ->xanno 0x5577e9b40f18
|         |       `-CXXThisExpr 0x5577e9b56d40 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5577e9b56dd0 <col:49> 'int' 0
|-CXXMethodDecl 0x5577e9b433d8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5577e9b57028 <col:38, col:65>
|   `-ReturnStmt 0x5577e9b57018 <col:40, col:62>
|     `-UnaryOperator 0x5577e9b57000 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5577e9b56fe0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5577e9b56fc8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5577e9b56f38 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5577e9b4c058
|         |   `-CXXMemberCallExpr 0x5577e9b56f18 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5577e9b56ee8 <col:48> '<bound member function type>' ->xanno 0x5577e9b40d78
|         |       `-CXXThisExpr 0x5577e9b56ed8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5577e9b56f68 <col:61> 'int' 0
|-CXXMethodDecl 0x5577e9b43588 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5577e9b43490 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5577e9b576f8 <col:34, line:463:5>
|   |-ParenExpr 0x5577e9b57540 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5577e9b57510 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b57178 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b57148 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b57098 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b57080 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b57040 <col:23> 'int' lvalue ParmVar 0x5577e9b43490 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b57060 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b57128 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b570f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b570b8 <col:33> 'int' lvalue ParmVar 0x5577e9b43490 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5577e9b57110 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5577e9b570d8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5577e9b571d8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b571b8 <col:56> 'int' 0
|   |   `-CallExpr 0x5577e9b57470 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b57458 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b57438 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b574b0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b572c8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5577e9b574c8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b572f8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b574e0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b57330 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5577e9b574f8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b57420 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b57408 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b573c8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5577e9b576e8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5577e9b576d0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5577e9b576b0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5577e9b57680 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5577e9b57630 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5577e9b4bd58
|         |   `-CXXMemberCallExpr 0x5577e9b57610 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5577e9b575e0 <col:9> '<bound member function type>' ->xanno 0x5577e9b40d78
|         |       `-CXXThisExpr 0x5577e9b575d0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5577e9b57698 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5577e9b57660 <col:21> 'int' lvalue ParmVar 0x5577e9b43490 'i' 'int'
|-CXXMethodDecl 0x5577e9b437d8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5577e9b43648 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5577e9b436c0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5577e9b57d88 <col:40, line:472:5>
|   |-ParenExpr 0x5577e9b57ba0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5577e9b57b70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b57850 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b57820 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b57770 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b57758 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b57718 <col:23> 'int' lvalue ParmVar 0x5577e9b43648 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b57738 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b57800 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b577d0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b57790 <col:33> 'int' lvalue ParmVar 0x5577e9b43648 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5577e9b577e8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5577e9b577b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5577e9b578b0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b57890 <col:56> 'int' 0
|   |   `-CallExpr 0x5577e9b57ad0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b57ab8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b57a98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b57b10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b57920 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5577e9b57b28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b57950 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b57b40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b57988 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5577e9b57b58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b57a80 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b57a68 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b57a28 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5577e9b57d68 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5577e9b57d10 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5577e9b57ce0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5577e9b57c90 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5577e9b4bd58
|     | |   `-CXXMemberCallExpr 0x5577e9b57c70 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5577e9b57c40 <col:2> '<bound member function type>' ->xanno 0x5577e9b40f18
|     | |       `-CXXThisExpr 0x5577e9b57c30 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5577e9b57cf8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5577e9b57cc0 <col:14> 'int' lvalue ParmVar 0x5577e9b43648 'i' 'int'
|     `-ImplicitCastExpr 0x5577e9b57d50 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b57d30 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5577e9b436c0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5577e9b43998 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5577e9b438a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5577e9b58508 <col:36, line:485:5>
|   |-ParenExpr 0x5577e9b58270 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b58240 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b57f20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b57ef0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b57e00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b57de8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b57da8 <col:23> 'int' lvalue ParmVar 0x5577e9b438a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b57dc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b57ed0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b57eb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b57e20 <col:33> 'int' lvalue ParmVar 0x5577e9b438a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b57e98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b57e80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b57e40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b57e60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5577e9b57f80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b57f60 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b581a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b58188 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b58168 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b581e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b57ff0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5577e9b581f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b58028 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b58210 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b58060 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5577e9b58228 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b58150 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b58138 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b580f8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5577e9b584f8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5577e9b584e0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5577e9b584c8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5577e9b58498 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5577e9b58438 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5577e9b58408 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5577e9b58380 <col:61, col:70> 'char const[48]' lvalue ->c 0x5577e9b4bc30
|             |   `-CXXMemberCallExpr 0x5577e9b58360 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5577e9b58330 <col:61> '<bound member function type>' ->xanno 0x5577e9b40d78
|             |       `-CXXThisExpr 0x5577e9b58320 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5577e9b58420 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5577e9b583b0 <col:74> 'int' lvalue ParmVar 0x5577e9b438a0 'i' 'int'
|-CXXMethodDecl 0x5577e9b43be8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5577e9b43a58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5577e9b43ad0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5577e9b58c58 <col:42, line:500:5>
|   |-ParenExpr 0x5577e9b589f0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b589c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b586a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b58670 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b58580 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b58568 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b58528 <col:23> 'int' lvalue ParmVar 0x5577e9b43a58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b58548 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b58650 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b58638 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b585a0 <col:33> 'int' lvalue ParmVar 0x5577e9b43a58 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b58618 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b58600 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b585c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b585e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5577e9b58700 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b586e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b58920 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b58908 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b588e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b58960 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b58770 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5577e9b58978 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b587a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b58990 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b587e0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5577e9b589a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b588d0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b588b8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b58878 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5577e9b58c38 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5577e9b58be8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5577e9b58bb8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5577e9b58b60 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5577e9b58b30 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5577e9b58ae0 <col:48, col:57> 'char [48]' lvalue ->c 0x5577e9b4bc30
|     |     |   `-CXXMemberCallExpr 0x5577e9b58ac0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5577e9b58a90 <col:48> '<bound member function type>' ->xanno 0x5577e9b40f18
|     |     |       `-CXXThisExpr 0x5577e9b58a80 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5577e9b58b48 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5577e9b58b10 <col:61> 'int' lvalue ParmVar 0x5577e9b43a58 'i' 'int'
|     `-ImplicitCastExpr 0x5577e9b58c20 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b58c00 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5577e9b43ad0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5577e9b43da8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5577e9b43cb0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5577e9b593b8 <col:35, line:513:5>
|   |-ParenExpr 0x5577e9b590c8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b59098 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b58df0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b58dc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b58cd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b58cb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b58c78 <col:23> 'int' lvalue ParmVar 0x5577e9b43cb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b58c98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b58da0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b58d88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b58cf0 <col:33> 'int' lvalue ParmVar 0x5577e9b43cb0 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b58d68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b58d50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b58d10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b58d30 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5577e9b58e50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b58e30 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b58ff8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b58fe0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b58fc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b59038 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b58ec0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5577e9b59050 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b58ef8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b59068 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b58f30 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5577e9b59080 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b58fa8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b58f90 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b58f50 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5577e9b593a8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5577e9b59390 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5577e9b59378 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5577e9b59348 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5577e9b592c0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5577e9b59290 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5577e9b59240 <col:60, col:69> 'char const[48]' lvalue ->c 0x5577e9b4bc30
|             |   `-CXXMemberCallExpr 0x5577e9b59220 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5577e9b591f0 <col:60> '<bound member function type>' ->xanno 0x5577e9b40d78
|             |       `-CXXThisExpr 0x5577e9b591e0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5577e9b592a8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5577e9b59270 <col:73> 'int' lvalue ParmVar 0x5577e9b43cb0 'i' 'int'
|-CXXMethodDecl 0x5577e9b43ff8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5577e9b43e68 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5577e9b43ee0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5577e9b59ad8 <col:41, line:528:5>
|   |-ParenExpr 0x5577e9b59860 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b59830 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b59550 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b59520 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b59430 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b59418 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b593d8 <col:23> 'int' lvalue ParmVar 0x5577e9b43e68 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b593f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b59500 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b594e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b59450 <col:33> 'int' lvalue ParmVar 0x5577e9b43e68 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b594c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b594b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b59470 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b59490 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5577e9b595b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b59590 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b59790 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b59778 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b59758 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b597d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b59620 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5577e9b597e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b59658 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b59800 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b59690 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5577e9b59818 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b59740 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b59728 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b596e8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5577e9b59ab8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5577e9b59a68 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5577e9b59a38 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5577e9b599e0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5577e9b599a0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5577e9b59950 <col:47, col:56> 'char [48]' lvalue ->c 0x5577e9b4bc30
|     |     |   `-CXXMemberCallExpr 0x5577e9b59930 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5577e9b59900 <col:47> '<bound member function type>' ->xanno 0x5577e9b40f18
|     |     |       `-CXXThisExpr 0x5577e9b598f0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5577e9b599b8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5577e9b59980 <col:60> 'int' lvalue ParmVar 0x5577e9b43e68 'i' 'int'
|     `-ImplicitCastExpr 0x5577e9b59aa0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b59a80 <col:65> 'int16_t':'short' lvalue ParmVar 0x5577e9b43ee0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5577e9b441b8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5577e9b440c0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5577e9b5a1a8 <col:36, line:541:5>
|   |-ParenExpr 0x5577e9b59f48 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b59f18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b59c70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b59c40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b59b50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b59b38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b59af8 <col:23> 'int' lvalue ParmVar 0x5577e9b440c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b59b18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b59c20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b59c08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b59b70 <col:33> 'int' lvalue ParmVar 0x5577e9b440c0 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b59be8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b59bd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b59b90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b59bb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5577e9b59cd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b59cb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b59e78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b59e60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b59e40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b59eb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b59d40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5577e9b59ed0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b59d78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b59ee8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b59db0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5577e9b59f00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b59e28 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b59e10 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b59dd0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5577e9b5a198 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5577e9b5a180 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5577e9b5a168 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5577e9b5a138 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5577e9b5a0e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5577e9b5a0b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5577e9b5a060 <col:61, col:70> 'char const[48]' lvalue ->c 0x5577e9b4bc30
|             |   `-CXXMemberCallExpr 0x5577e9b5a040 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5577e9b5a010 <col:61> '<bound member function type>' ->xanno 0x5577e9b40d78
|             |       `-CXXThisExpr 0x5577e9b5a000 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5577e9b5a0c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5577e9b5a090 <col:74> 'int' lvalue ParmVar 0x5577e9b440c0 'i' 'int'
|-CXXMethodDecl 0x5577e9b44388 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5577e9b44278 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5577e9b442f0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5577e9b44438 <col:20>
| `-OptimizeNoneAttr 0x5577e9b44490 <col:30>
|-CXXMethodDecl 0x5577e9b445c8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5577e9b444d0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5577e9b5a878 <col:35, line:562:5>
|   |-ParenExpr 0x5577e9b5a618 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b5a5e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b5a340 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b5a310 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b5a220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b5a208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b5a1c8 <col:23> 'int' lvalue ParmVar 0x5577e9b444d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b5a1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b5a2f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b5a2d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b5a240 <col:33> 'int' lvalue ParmVar 0x5577e9b444d0 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b5a2b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b5a2a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b5a260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b5a280 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5577e9b5a3a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b5a380 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b5a548 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b5a530 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b5a510 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b5a588 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5a410 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5577e9b5a5a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5a448 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b5a5b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b5a480 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5577e9b5a5d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b5a4f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b5a4e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b5a4a0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5577e9b5a868 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5577e9b5a850 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5577e9b5a838 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5577e9b5a808 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5577e9b5a7b0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5577e9b5a780 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5577e9b5a730 <col:60, col:69> 'char const[48]' lvalue ->c 0x5577e9b4bc30
|             |   `-CXXMemberCallExpr 0x5577e9b5a710 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5577e9b5a6e0 <col:60> '<bound member function type>' ->xanno 0x5577e9b40d78
|             |       `-CXXThisExpr 0x5577e9b5a6d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5577e9b5a798 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5577e9b5a760 <col:73> 'int' lvalue ParmVar 0x5577e9b444d0 'i' 'int'
|-CXXMethodDecl 0x5577e9b447d8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5577e9b44688 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5577e9b44700 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5577e9b5af58 <col:41, line:577:5>
|   |-ParenExpr 0x5577e9b5ace8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b5acb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b5aa10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b5a9e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b5a8f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b5a8d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b5a898 <col:23> 'int' lvalue ParmVar 0x5577e9b44688 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b5a8b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b5a9c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b5a9a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b5a910 <col:33> 'int' lvalue ParmVar 0x5577e9b44688 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b5a988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b5a970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b5a930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b5a950 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5577e9b5aa70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b5aa50 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b5ac18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b5ac00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b5abe0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b5ac58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5aae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5577e9b5ac70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5ab18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b5ac88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b5ab50 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5577e9b5aca0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b5abc8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b5abb0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b5ab70 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5577e9b5af38 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5577e9b5aee8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5577e9b5aeb8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5577e9b5ae58 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5577e9b5ae28 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5577e9b5add8 <col:47, col:56> 'char [48]' lvalue ->c 0x5577e9b4bc30
|     |     |   `-CXXMemberCallExpr 0x5577e9b5adb8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5577e9b5ad88 <col:47> '<bound member function type>' ->xanno 0x5577e9b40f18
|     |     |       `-CXXThisExpr 0x5577e9b5ad78 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5577e9b5ae40 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5577e9b5ae08 <col:60> 'int' lvalue ParmVar 0x5577e9b44688 'i' 'int'
|     `-ImplicitCastExpr 0x5577e9b5af20 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b5af00 <col:65> 'int32_t':'int' lvalue ParmVar 0x5577e9b44700 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5577e9b44998 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5577e9b448a0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5577e9b5b688 <col:36, line:591:5>
|   |-ParenExpr 0x5577e9b5b3c8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b5b398 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b5b0f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b5b0c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b5afd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b5afb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b5af78 <col:23> 'int' lvalue ParmVar 0x5577e9b448a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b5af98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b5b0a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b5b088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b5aff0 <col:33> 'int' lvalue ParmVar 0x5577e9b448a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b5b068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b5b050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b5b010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b5b030 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5577e9b5b150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b5b130 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b5b2f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b5b2e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b5b2c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b5b338 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5b1c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5577e9b5b350 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5b1f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b5b368 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b5b230 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5577e9b5b380 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b5b2a8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b5b290 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b5b250 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5577e9b5b678 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5577e9b5b660 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5577e9b5b648 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5577e9b5b618 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5577e9b5b590 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5577e9b5b560 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5577e9b5b510 <col:61, col:70> 'char const[48]' lvalue ->c 0x5577e9b4bc30
|             |   `-CXXMemberCallExpr 0x5577e9b5b4f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5577e9b5b4c0 <col:61> '<bound member function type>' ->xanno 0x5577e9b40d78
|             |       `-CXXThisExpr 0x5577e9b5b4b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5577e9b5b578 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5577e9b5b540 <col:74> 'int' lvalue ParmVar 0x5577e9b448a0 'i' 'int'
|-CXXMethodDecl 0x5577e9b44be8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5577e9b44a58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5577e9b44ad0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5577e9b5bd68 <col:42, line:606:5>
|   |-ParenExpr 0x5577e9b5baf8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5577e9b5bac8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b5b820 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b5b7f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b5b700 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b5b6e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b5b6a8 <col:23> 'int' lvalue ParmVar 0x5577e9b44a58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b5b6c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b5b7d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5577e9b5b7b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b5b720 <col:33> 'int' lvalue ParmVar 0x5577e9b44a58 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b5b798 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b5b780 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b5b740 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5577e9b5b760 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5577e9b5b880 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b5b860 <col:60> 'int' 0
|   |   `-CallExpr 0x5577e9b5ba28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b5ba10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b5b9f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b5ba68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5b8f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5577e9b5ba80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5b928 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b5ba98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b5b960 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5577e9b5bab0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b5b9d8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b5b9c0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b5b980 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5577e9b5bd48 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5577e9b5bcf8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5577e9b5bcc8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5577e9b5bc68 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5577e9b5bc38 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5577e9b5bbe8 <col:48, col:57> 'char [48]' lvalue ->c 0x5577e9b4bc30
|     |     |   `-CXXMemberCallExpr 0x5577e9b5bbc8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5577e9b5bb98 <col:48> '<bound member function type>' ->xanno 0x5577e9b40f18
|     |     |       `-CXXThisExpr 0x5577e9b5bb88 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5577e9b5bc50 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5577e9b5bc18 <col:61> 'int' lvalue ParmVar 0x5577e9b44a58 'i' 'int'
|     `-ImplicitCastExpr 0x5577e9b5bd30 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5577e9b5bd10 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5577e9b44ad0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5577e9b44d80 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5577e9b44cb0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5577e9b5c5d8 <col:33, line:620:5>
|   |-ParenExpr 0x5577e9b5c350 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5577e9b5c320 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b5bf70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b5bf40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b5bde0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b5bdc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b5bd88 <col:23> 'int' lvalue ParmVar 0x5577e9b44cb0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b5bda8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b5bf20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5577e9b5bf08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b5be00 <col:33> 'int' lvalue ParmVar 0x5577e9b44cb0 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b5bee8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b5bed0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b5be20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5577e9b5bea8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5577e9b5be90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5577e9b5be58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5577e9b5bfd0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b5bfb0 <col:79> 'int' 0
|   |   `-CallExpr 0x5577e9b5c280 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b5c268 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b5c248 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b5c2c0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5c0b8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5577e9b5c2d8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5c100 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b5c2f0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b5c138 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5577e9b5c308 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b5c230 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b5c218 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b5c1d8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5577e9b5c5c8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5577e9b5c5b0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5577e9b5c598 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5577e9b5c568 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5577e9b5c4e0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5577e9b5c4b0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5577e9b5c460 <col:67, col:76> 'char const[48]' lvalue ->c 0x5577e9b4bc30
|             |   `-CXXMemberCallExpr 0x5577e9b5c440 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5577e9b5c410 <col:67> '<bound member function type>' ->xanno 0x5577e9b40d78
|             |       `-CXXThisExpr 0x5577e9b5c400 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5577e9b5c4c8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5577e9b5c490 <col:80> 'int' lvalue ParmVar 0x5577e9b44cb0 'i' 'int'
|-CXXMethodDecl 0x5577e9b44f98 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5577e9b44e40 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5577e9b44ec0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5577e9b5ce00 <col:45, line:635:5>
|   |-ParenExpr 0x5577e9b5cb48 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5577e9b5cb18 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5577e9b5c7e0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5577e9b5c7b0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5577e9b5c650 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5577e9b5c638 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5577e9b5c5f8 <col:23> 'int' lvalue ParmVar 0x5577e9b44e40 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5577e9b5c618 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5577e9b5c790 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5577e9b5c778 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5577e9b5c670 <col:33> 'int' lvalue ParmVar 0x5577e9b44e40 'i' 'int'
|   |   |     `-BinaryOperator 0x5577e9b5c758 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5577e9b5c740 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5577e9b5c690 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5577e9b41160 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5577e9b5c718 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5577e9b5c700 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5577e9b5c6c8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5577e9b5c840 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5577e9b5c820 <col:79> 'int' 0
|   |   `-CallExpr 0x5577e9b5ca78 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5577e9b5ca60 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5577e9b5ca40 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5577e96ada80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5577e9b5cab8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5c8b0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5577e9b5cad0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5577e9b5c8f8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5577e9b5cae8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5577e9b5c930 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5577e9b5cb00 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5577e9b5ca28 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5577e9b5ca10 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5577e9b5c9c8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5577e9b5cde0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5577e9b5cd48 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5577e9b5cd18 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5577e9b5ccb8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5577e9b5cc88 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5577e9b5cc38 <col:54, col:63> 'char [48]' lvalue ->c 0x5577e9b4bc30
|     |     |   `-CXXMemberCallExpr 0x5577e9b5cc18 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5577e9b5cbe8 <col:54> '<bound member function type>' ->xanno 0x5577e9b40f18
|     |     |       `-CXXThisExpr 0x5577e9b5cbd8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5577e9b5cca0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5577e9b5cc68 <col:67> 'int' lvalue ParmVar 0x5577e9b44e40 'i' 'int'
|     `-CXXConstCastExpr 0x5577e9b5cdb0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5577e9b5cd98 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5577e9b5cd60 <col:91> 'const void *' lvalue ParmVar 0x5577e9b44ec0 'x' 'const void *'
|-CXXMethodDecl 0x5577e9b45068 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5577e9b5ce88 <col:34, line:640:5>
|   `-ReturnStmt 0x5577e9b5ce78 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5577e9b5ce60 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5577e9b5ce30 <col:16> 'Packet *' lvalue ->_data_packet 0x5577e9b4c7e8
|         `-CXXThisExpr 0x5577e9b5ce20 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5577e9b451a8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5577e9b45118 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5577e9b55f48 <col:46> 'bool' true
|-CXXMethodDecl 0x5577e9b45328 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5577e9b45260 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5577e9b453d0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5577e9b45b80 <line:660:22> "" ""
| |-EnumConstantDecl 0x5577e9b454d0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45bf0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b454b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5577e9b45490 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5577e9b3a630 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5577e9b45560 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c08 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b45540 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5577e9b45520 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5577e9b3a6c0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5577e9b455f0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c20 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b455d0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5577e9b455b0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5577e9b45680 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c38 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b45660 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5577e9b45640 <col:19> 'int' 16
| |-EnumConstantDecl 0x5577e9b45710 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b456f0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5577e9b456d0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5577e9b457a0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c68 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b45780 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5577e9b45760 <col:19> 'int' 32
| |-EnumConstantDecl 0x5577e9b45830 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c80 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b45810 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5577e9b457f0 <col:19> 'int' EnumConstant 0x5577e9b45680 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5577e9b458c0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45c98 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b458a0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5577e9b45880 <col:19> 'int' EnumConstant 0x5577e9b457a0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5577e9b45990 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45cb0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b45970 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5577e9b45950 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5577e9b45910 <col:23> 'int' EnumConstant 0x5577e9b458c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5577e9b45930 <col:40> 'int' 2
| |-EnumConstantDecl 0x5577e9b45a60 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5577e9b45cc8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5577e9b45a40 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5577e9b45a20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5577e9b459e0 <col:23> 'int' EnumConstant 0x5577e9b458c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5577e9b45a00 <col:40> 'int' 4
| `-EnumConstantDecl 0x5577e9b45b30 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5577e9b45ce0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5577e9b45b10 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5577e9b45af0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5577e9b45ab0 <col:23> 'int' EnumConstant 0x5577e9b458c0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5577e9b45ad0 <col:40> 'int' 8
|-CXXMethodDecl 0x5577e9b45d20 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5577e9b45dc0 <col:68> "" ""
|-CXXMethodDecl 0x5577e9b45e58 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5577e9b45ef8 <col:45> "" ""
|-CXXMethodDecl 0x5577e9b45f90 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5577e9b46030 <col:57> "" ""
|-CXXMethodDecl 0x5577e9b460c8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5577e9b46168 <col:45> "" ""
|-CXXMethodDecl 0x5577e9b46200 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5577e9b462a0 <col:57> "" ""
|-CXXMethodDecl 0x5577e9b46330 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5577e9b463d0 <col:51> "" ""
|-CXXMethodDecl 0x5577e9b46460 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5577e9b46500 <col:63> "" ""
|-CXXMethodDecl 0x5577e9b46590 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5577e9b46630 <col:53> "" ""
|-CXXMethodDecl 0x5577e9b466c0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5577e9b46760 <col:65> "" ""
|-CXXMethodDecl 0x5577e9b46878 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5577e9b467e8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5577e9b46920 <col:61> "" ""
|-CXXMethodDecl 0x5577e9b46ab8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5577e9b469a8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5577e9b46a20 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5577e9b46b68 <col:67> "" ""
|-CXXMethodDecl 0x5577e9b46c80 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5577e9b46bf0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5577e9b46d28 <col:63> "" ""
|-CXXMethodDecl 0x5577e9b46ec0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5577e9b46db0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5577e9b46e28 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5577e9b46f70 <col:69> "" ""
|-CXXMethodDecl 0x5577e9b47088 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5577e9b46ff8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5577e9b47130 <col:63> "" ""
|-CXXMethodDecl 0x5577e9b49808 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b496f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5577e9b49770 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9b498b8 <col:69> "" ""
|-CXXMethodDecl 0x5577e9b499d0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5577e9b49940 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5577e9b49a78 <col:62> "" ""
|-CXXMethodDecl 0x5577e9b49c10 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5577e9b49b00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5577e9b49b78 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5577e9b49cc0 <col:68> "" ""
|-CXXMethodDecl 0x5577e9b49dd8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5577e9b49d48 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5577e9b49e80 <col:63> "" ""
|-CXXMethodDecl 0x5577e9b4a018 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5577e9b49f08 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5577e9b49f80 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5577e9b4a0c8 <col:69> "" ""
|-CXXMethodDecl 0x5577e9b4a158 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5577e9b4a1f8 <col:64> "" ""
|-CXXMethodDecl 0x5577e9b4a288 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5577e9b4a328 <col:52> "" ""
|-CXXMethodDecl 0x5577e9b4a3b8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5577e9b4a458 <col:67> "" ""
|-CXXMethodDecl 0x5577e9b4a4e8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5577e9b4a588 <col:55> "" ""
|-CXXMethodDecl 0x5577e9b4a6a0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5577e9b4a610 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5577e9b4a748 <col:58> "" ""
|-CXXMethodDecl 0x5577e9b4a8e0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5577e9b4a7d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5577e9b4a848 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5577e9b4a990 <col:62> "" ""
|-CXXMethodDecl 0x5577e9b4aaa8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5577e9b4aa18 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5577e9b4ab50 <col:58> "" ""
|-CXXMethodDecl 0x5577e9b4ace8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5577e9b4abd8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5577e9b4ac50 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5577e9b4ad98 <col:62> "" ""
|-CXXMethodDecl 0x5577e9b4aeb0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5577e9b4ae20 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5577e9b4af58 <col:60> "" ""
|-CXXMethodDecl 0x5577e9b4b0f0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5577e9b4afe0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5577e9b4b058 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5577e9b4b1a0 <col:64> "" ""
|-CXXMethodDecl 0x5577e9b4b2b8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5577e9b4b228 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5577e9b4b360 <col:58> "" ""
|-CXXMethodDecl 0x5577e9b4b4f8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5577e9b4b3e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5577e9b4b460 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5577e9b4b5a8 <col:62> "" ""
|-CXXMethodDecl 0x5577e9b4b6c0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5577e9b4b630 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5577e9b4b768 <col:59> "" ""
|-CXXMethodDecl 0x5577e9b4b900 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5577e9b4b7f0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5577e9b4b868 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5577e9b4b9b0 <col:63> "" ""
|-AccessSpecDecl 0x5577e9b4ba20 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5577e9b4ba48 prev 0x5577e9b40c50 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5577e9b4bb40 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5577e9b4bc30 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5577e9b4bd58 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5577e9b4bed8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5577e9b4c058 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5577e9b4c1d8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5577e9b5d008 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5577e9b5d878 <col:11>
| |-CXXDestructorDecl 0x5577e9b5d0e0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5577e9b5d218 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5577e9b5d218
| | `-ParmVarDecl 0x5577e9b5d328 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5577e9b5d3c8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5577e9b5d3c8
| | `-ParmVarDecl 0x5577e9b5d4d8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5577e9b60298 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5577e9b603a8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5577e9b60628 <col:11>
| |   `-ReturnStmt 0x5577e9b60618 <col:11>
| |     `-UnaryOperator 0x5577e9b60600 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5577e9b605f0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5577e9b60418 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5577e9b60418
|   `-ParmVarDecl 0x5577e9b60528 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5577e9b4c240 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5577e9b4c358 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5577e9b4c3f8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5577e9b4c460 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5577e9b4c4c8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5577e9b4c530 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5577e9b4c590 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5577e9b4c650 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5577e9b4c6b0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5577e9b4c710 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5577e9b5cf18 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5577e9b4c3f8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5577e9b5d888 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5577e9b5d8e0 <col:12>
| |-CXXConstructorDecl 0x5577e9b5d548 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5577e9b5d548
| | `-ParmVarDecl 0x5577e9b5d658 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5577e9b5d6f8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5577e9b5d6f8
| | `-ParmVarDecl 0x5577e9b5d808 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5577e9b5f980 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5577e9b4c788 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5577e9b4c7e8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5577e9b4c850 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5577e9b4c8b8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5577e9b4c920 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5577e9b4c988 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5577e9b4c9e8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5577e9b4ca48 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5577e9b4cab0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5577e9b4cb38 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5577e9b4c788 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5577e9b5ceb0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5577e9b4c9e8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5577e9b5d8f0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5577e9b5d950 <col:21, line:755:5>
|-CXXConstructorDecl 0x5577e9b4ccd8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5577e9b4cc18 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5577e9b4cdd0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5577e9b4cfb8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5577e9b4cec0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5577e9b4d288 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5577e9b4d070 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5577e9b4d0e8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5577e9b4d160 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b4d4a8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5577e9b4d358 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5577e9b4d3d0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5577e9b55a88 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5577e9b4d568 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5577e9b4d5e0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5577e9b4d658 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5577e9b55be0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5577e9b55b50 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5577e9b55d28 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5577e9b55c98 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5577e9b55e20 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Timestamp>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Timestamp * _ptr
        24 |   class Timestamp _slot
        24 |     union Timestamp::rep_t _t
        24 |       int64_t x
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class TimestampArg
         0 |   _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class Timestamp>
         0 |   class TimestampArg (base)
         0 |     _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5577e9b38e40 <../dummy_inc/click/timestamp.hh:1525:1, line:1534:1> line:1525:7 referenced class TimestampArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5577e9b38f58 <col:1, col:7> col:7 implicit referenced class TimestampArg
|-AccessSpecDecl 0x5577e9b38fe8 <col:22, col:28> col:22 public
|-CXXConstructorDecl 0x5577e9b390f8 <line:1526:5, line:1528:5> line:1526:5 used TimestampArg 'void (bool)'
| |-ParmVarDecl 0x5577e9b39020 <col:18, col:35> col:23 used is_signed 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5577e9b394b8 <col:35> 'bool' false
| |-CXXCtorInitializer Field 0x5577e9b39450 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x5577e9b39528 <line:1527:21> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x5577e9b394e8 <col:21> 'bool' lvalue ParmVar 0x5577e9b39020 'is_signed' 'bool'
| `-CompoundStmt 0x5577e9b39570 <col:32, line:1528:5>
|-CXXMethodDecl 0x5577e9b39388 <line:1529:5, line:1532:5> line:1529:10 used parse 'bool (const String &, Timestamp &, const ArgContext &)'
| |-ParmVarDecl 0x5577e9b391b8 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5577e9b39230 <col:35, col:46> col:46 used value 'Timestamp &'
| |-ParmVarDecl 0x5577e9b392a8 <col:53, col:78> col:71 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x5577e9b394c8 <col:78> 'const ArgContext' lvalue Var 0x5577e9b38b38 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x5577e9b39780 <col:90, line:1532:5>
|   |-CStyleCastExpr 0x5577e9b395b0 <line:1530:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5577e9b39580 <col:16> 'const ArgContext' lvalue ParmVar 0x5577e9b392a8 'args' 'const ArgContext &'
|   `-ReturnStmt 0x5577e9b39770 <line:1531:9, col:46>
|     `-CallExpr 0x5577e9b39720 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x5577e9b39708 <col:16> 'bool (*)(const String &, Timestamp *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5577e9b396b8 <col:16> 'bool (const String &, Timestamp *, bool)' lvalue Function 0x5577e9b38d88 'cp_time' 'bool (const String &, Timestamp *, bool)'
|       |-DeclRefExpr 0x5577e9b39620 <col:24> 'const String' lvalue ParmVar 0x5577e9b391b8 'str' 'const String &'
|       |-UnaryOperator 0x5577e9b39660 <col:29, col:30> 'Timestamp *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x5577e9b39640 <col:30> 'Timestamp' lvalue ParmVar 0x5577e9b39230 'value' 'Timestamp &'
|       `-ImplicitCastExpr 0x5577e9b39758 <col:37> 'bool' <LValueToRValue>
|         `-MemberExpr 0x5577e9b39688 <col:37> 'bool' lvalue ->is_signed 0x5577e9b39450
|           `-CXXThisExpr 0x5577e9b39678 <col:37> 'TimestampArg *' implicit this
|-FieldDecl 0x5577e9b39450 <line:1533:5, col:10> col:10 referenced is_signed 'bool'
|-CXXDestructorDecl 0x5577e9caeb60 <line:1525:7> col:7 implicit ~TimestampArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5577e9caec98 <col:7> col:7 implicit constexpr TimestampArg 'void (const TimestampArg &)' inline default trivial noexcept-unevaluated 0x5577e9caec98
| `-ParmVarDecl 0x5577e9caeda8 <col:7> col:7 'const TimestampArg &'
`-CXXConstructorDecl 0x5577e9caee48 <col:7> col:7 implicit used constexpr TimestampArg 'void (TimestampArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x5577e9caef58 <col:7> col:7 used 'TimestampArg &&'
  |-CXXCtorInitializer Field 0x5577e9b39450 'is_signed' 'bool'
  | `-ImplicitCastExpr 0x5577e9cafd20 <col:7> 'bool' <LValueToRValue>
  |   `-MemberExpr 0x5577e9cafcf0 <col:7> 'bool' xvalue .is_signed 0x5577e9b39450
  |     `-CXXStaticCastExpr 0x5577e9cafcc0 <col:7> 'TimestampArg' xvalue static_cast<class TimestampArg &&> <NoOp>
  |       `-DeclRefExpr 0x5577e9cafc90 <col:7> 'TimestampArg' lvalue ParmVar 0x5577e9caef58 '' 'TimestampArg &&'
  `-CompoundStmt 0x5577e9cafd68 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.TimestampArg = type { i8 }
  NonVirtualBaseLLVMType:%class.TimestampArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5577e9b397c8 <../dummy_inc/click/timestamp.hh:1536:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'TimestampArg'
|-TemplateArgument type 'Timestamp'
|-CXXRecordDecl 0x5577e9b39a28 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5577e9caea88 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x5577e9caf360 <col:19> 'TimestampArg' 'void (bool)'
| |   `-CXXDefaultArgExpr 0x5577e9caf340 <<invalid sloc>> 'bool'
| `-CompoundStmt 0x5577e9caf3d0 <col:19>
|-CXXConstructorDecl 0x5577e9caefc8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Timestamp> &)' inline default trivial noexcept-unevaluated 0x5577e9caefc8
| `-ParmVarDecl 0x5577e9caf0d8 <col:19> col:19 'const DefaultArg<Timestamp> &'
|-CXXConstructorDecl 0x5577e9caf178 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Timestamp> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5577e9caf288 <col:19> col:19 used 'DefaultArg<Timestamp> &&'
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x5577e9cafd78 <col:19> 'TimestampArg' 'void (TimestampArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5577e9cafc70 <col:19> 'TimestampArg' xvalue <UncheckedDerivedToBase (TimestampArg)>
| |     `-CXXStaticCastExpr 0x5577e9cafc40 <col:19> 'DefaultArg<Timestamp>' xvalue static_cast<struct DefaultArg<class Timestamp> &&> <NoOp>
| |       `-DeclRefExpr 0x5577e9cafc10 <col:19> 'DefaultArg<Timestamp>' lvalue ParmVar 0x5577e9caf288 '' 'DefaultArg<Timestamp> &&'
| `-CompoundStmt 0x5577e9cafde8 <col:19>
`-CXXDestructorDecl 0x5577e9caf410 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  IsZeroInitializable:1
  BitFields:[
]>
