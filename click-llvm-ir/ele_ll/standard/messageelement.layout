
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517e228c8 prev 0x560517e1a068 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517e229c0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x560517e22a50 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x560517e22ac8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x560517e22b88 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x560517e22c50 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x560517e22dc8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x560517e22d00 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x560517e22e70 <col:24>
| `-OptimizeNoneAttr 0x560517e22ec8 <col:34>
|-CXXMethodDecl 0x560517e22f10 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x560517e231c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x560517e22fc0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x560517e23038 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x560517e230b8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x560517e23280 <line:229:7, col:14> col:7 private
|-FieldDecl 0x560517e232b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x560517e23320 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x560517e233a8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x560517e236c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x560517e23460 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x560517e234d8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x560517e23550 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x560517e235d0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x560517e237e0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x560517e2b158 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x560517e2b158
| `-ParmVarDecl 0x560517e2b268 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x560517e2b308 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x560517e2b308
| `-ParmVarDecl 0x560517e2b418 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x560517ef6880 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517e158e0 prev 0x560517e15660 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560517e159d8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x560517e15a68 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x560517e15ac8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x560517e15bb8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x560517e15cb8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x560517e15e88 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x560517e15d38 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x560517e15db0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x560517e16018 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x560517e15f50 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x560517e160c0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x560517e161f8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x560517e16130 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x560517e16398 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x560517e162d8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x560517e16538 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x560517e16478 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x560517e165e0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x560517e166e0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x560517e167c0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e166c0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x560517e166a0 <col:26> 'int' 1
| `-EnumConstantDecl 0x560517e16770 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x560517e167d8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517e16750 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x560517e16730 <col:44> 'int' 2
|-CXXMethodDecl 0x560517e16920 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x560517e16808 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x560517e16888 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x560517e16a78 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x560517e169e8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x560517e16cb8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x560517e16b38 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x560517e16bb0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x560517e16d68 <col:20>
| `-OptimizeNoneAttr 0x560517e16dc0 <col:30>
|-CXXMethodDecl 0x560517e16ec8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x560517e16e00 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x560517e16f70 <col:20>
| `-OptimizeNoneAttr 0x560517e16fc8 <col:30>
|-CXXMethodDecl 0x560517e17018 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x560517e170e0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x560517e171f8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x560517e17280 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x560517e17308 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x560517e17390 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x560517e17418 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x560517e174a8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x560517e17568 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x560517e175f0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x560517e17678 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x560517e17700 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x560517e17788 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x560517e17810 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x560517e178a0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x560517e17960 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x560517e179f0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x560517e17b40 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x560517e17aa8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x560517e17cd0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x560517e17c00 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x560517e17f80 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x560517e17d88 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x560517e17e08 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x560517e17e88 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x560517e18038 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x560517e18140 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560517e183d0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e18120 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x560517e18100 <col:33> 'int' 0
| |-EnumConstantDecl 0x560517e181d0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560517e183e8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e181b0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x560517e18190 <col:32> 'int' 20
| |-EnumConstantDecl 0x560517e18260 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560517e18400 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e18240 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x560517e18220 <col:38> 'int' 90
| |-EnumConstantDecl 0x560517e182f0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560517e18418 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e182d0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x560517e182b0 <col:35> 'int' 100
| `-EnumConstantDecl 0x560517e18380 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x560517e18430 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517e18360 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x560517e18340 <col:32> 'int' 2000
|-CXXMethodDecl 0x560517e18470 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x560517e188b0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x560517e18720 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x560517e18798 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560517e18980 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x560517e18b00 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x560517e18a30 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560517e18d08 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x560517e18bb8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x560517e18c30 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560517e18e08 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x560517e18ea8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x560517e18f70 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x560517e19000 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x560517e19230 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e18fe0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x560517e18fc0 <col:36> 'int' EnumConstant 0x560517e18f70 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x560517e19050 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560517e190a0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560517e190f0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560517e19140 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560517e19190 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x560517e191e0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x560517e19318 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x560517e19258 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x560517e193e0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x560517e194a0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x560517e19560 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x560517e19620 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x560517e19738 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x560517e19800 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x560517e19980 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x560517e198b0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x560517e19aa8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x560517e19ca8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x560517e19b58 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x560517e19bd8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x560517e275f8 <col:54, line:127:5>
|   |-ParenExpr 0x560517e274a8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x560517e27478 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x560517e27168 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x560517e27140 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x560517e27128 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x560517e27110 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x560517e270e0 <col:31> 'Router *' lvalue ->_router 0x560517e24fc0
|   |   |         `-CXXThisExpr 0x560517e270d0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x560517e271c8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517e271a8 <col:48> 'int' 0
|   |   `-CallExpr 0x560517e273d8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x560517e273c0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517e273a0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517e27418 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517e27238 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x560517e27430 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517e27258 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x560517e27448 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517e27290 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x560517e27460 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517e27388 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517e27370 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517e27328 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x560517e27540 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x560517e274d8 <col:9> 'Router *' lvalue ->_router 0x560517e24fc0
|   | | `-CXXThisExpr 0x560517e274c8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x560517e27528 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x560517e27508 <col:19> 'Router *' lvalue ParmVar 0x560517e19b58 'r' 'Router *'
|   `-BinaryOperator 0x560517e275d8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x560517e27570 <col:9> 'int' lvalue ->_eindex 0x560517e25028
|     | `-CXXThisExpr 0x560517e27560 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x560517e275c0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x560517e275a0 <col:19> 'int' lvalue ParmVar 0x560517e19bd8 'eindex' 'int'
|-CXXMethodDecl 0x560517e19e30 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x560517e19d68 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x560517e19f00 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x560517e19fc8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x560517e1a068 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x560517e1a2b8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x560517e1a130 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x560517e1a1b0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x560517e1a368 <col:20>
| `-OptimizeNoneAttr 0x560517e1a3c0 <col:30>
|-CXXMethodDecl 0x560517e1a4c8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x560517e1a400 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x560517e1a570 <col:20>
| `-OptimizeNoneAttr 0x560517e1a5c8 <col:30>
|-CXXMethodDecl 0x560517e1a698 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x560517e1a608 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x560517e1a740 <col:20>
| `-OptimizeNoneAttr 0x560517e1a798 <col:30>
|-CXXMethodDecl 0x560517e1a928 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x560517e1a7d0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x560517e1a850 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x560517e1aab8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x560517e1a9f0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x560517e1ac08 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x560517e1ab78 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x560517e1ad58 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x560517e1acc8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x560517e1aea8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x560517e1ae18 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x560517e1b168 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x560517e1af60 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x560517e1afe0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x560517e1b088 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x560517e1b240 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x560517e1b300 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x560517e1b5d0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x560517e1b480 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x560517e1b4f8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x560517e1b6f8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x560517e1b8d0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x560517e1b7b0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x560517e1b830 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x560517e1bab8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x560517e1b998 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x560517e1ba18 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x560517e1be28 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x560517e1bb78 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x560517e1bbf0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x560517e1bc70 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560517e26be0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560517e26bc0 <col:106> 'int' 0
| `-ParmVarDecl 0x560517e1bce8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560517e26c18 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560517e26bf8 <col:126> 'int' 0
|-CXXMethodDecl 0x560517e1c1c8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560517e1bef8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x560517e1bf90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x560517e1c010 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x560517e1c088 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560517e26c50 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560517e26c30 <col:114> 'int' 0
|-CXXMethodDecl 0x560517e1c558 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560517e1c2a0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x560517e1c318 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x560517e1c398 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x560517e26c68 <col:96> 'int' 0
| `-ParmVarDecl 0x560517e1c410 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560517e26ca8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560517e26c88 <col:116> 'int' 0
|-CXXMethodDecl 0x560517e1c8d8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x560517e1c628 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x560517e1c6a0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e1c720 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560517e26ce0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560517e26cc0 <col:109> 'int' 0
| `-ParmVarDecl 0x560517e1c798 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560517e26d18 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560517e26cf8 <col:129> 'int' 0
|-CXXMethodDecl 0x560517e1cc58 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560517e1c9a8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x560517e1ca20 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e1caa0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x560517e1cb18 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560517e26d50 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560517e26d30 <col:117> 'int' 0
|-CXXMethodDecl 0x560517e1cfe8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560517e1cd30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1cda8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e1ce28 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x560517e26d68 <col:99> 'int' 0
| `-ParmVarDecl 0x560517e1cea0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560517e26da8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560517e26d88 <col:119> 'int' 0
|-CXXMethodDecl 0x560517e1d408 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x560517e1d0b8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x560517e1d138 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x560517e1d1b0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e1d230 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560517e26de0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560517e26dc0 <col:108> 'int' 0
| `-ParmVarDecl 0x560517e1d2b0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x560517e26e18 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x560517e26df8 <col:141> 'int' 0
|-CXXMethodDecl 0x560517e1d828 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x560517e1d4e0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x560517e1d560 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x560517e1d5d8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e1d658 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x560517e1d6d8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x560517e26e30 <col:121> 'int' 0
|-CXXMethodDecl 0x560517e1dc58 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x560517e1d908 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x560517e1d988 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x560517e1da00 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e1da80 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x560517e26e50 <col:98> 'int' 0
| `-ParmVarDecl 0x560517e1db00 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x560517e26e70 <col:123> 'int' 0
|-CXXMethodDecl 0x560517e1df20 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x560517e1dd30 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x560517e1ddb0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x560517e1de30 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x560517e26e90 <col:80> 'int' 0
|-EnumDecl 0x560517e1dfd8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x560517e1e0e0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560517e1e370 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e1e0c0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x560517e1e0a0 <col:42> 'int' 1
| |-EnumConstantDecl 0x560517e1e170 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560517e1e388 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e1e150 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x560517e1e130 <col:40> 'int' 2
| |-EnumConstantDecl 0x560517e1e200 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560517e1e3a0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e1e1e0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x560517e1e1c0 <col:44> 'int' 4
| |-EnumConstantDecl 0x560517e1e290 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560517e1e3b8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517e1e270 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x560517e1e250 <col:36> 'int' 7
| `-EnumConstantDecl 0x560517e1e320 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x560517e1e3d0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517e1e300 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x560517e1e2e0 <col:34> 'int' 6
|-CXXMethodDecl 0x560517e1e688 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x560517e1e3f8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x560517e1e498 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x560517e1e518 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x560517e1e590 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x560517e26f48 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x560517e26f30 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x560517e26f18 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x560517e26ef8 <col:98, col:105> 'String' (CXXTemporary 0x560517e26ef8)
|           `-CXXTemporaryObjectExpr 0x560517e26ec0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x560517e1e928 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x560517e1e758 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x560517e1e7d0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x560517e1e848 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x560517e26ff8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x560517e26fe0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x560517e26fc8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x560517e26fa8 <col:94, col:101> 'String' (CXXTemporary 0x560517e26fa8)
| |         `-CXXTemporaryObjectExpr 0x560517e26f70 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x560517e277e0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x560517e27758 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x560517e27728 <col:9> '<bound member function type>' ->add_task_handlers 0x560517e1e688
|     | `-CXXThisExpr 0x560517e27718 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x560517e27798 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x560517e27698 <col:27> 'Task *' lvalue ParmVar 0x560517e1e758 'task' 'Task *'
|     |-ImplicitCastExpr 0x560517e277b0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x560517e276b8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x560517e1e7d0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x560517e277c8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x560517e276d8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x560517e1e320 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x560517e276f8 <col:62> 'const String' lvalue ParmVar 0x560517e1e848 'prefix' 'const String &'
|-CXXMethodDecl 0x560517e1eb38 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x560517e1e9f0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x560517e1ea68 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x560517e270a8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x560517e27090 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x560517e27078 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x560517e27058 <col:70, col:77> 'String' (CXXTemporary 0x560517e27058)
| |         `-CXXTemporaryObjectExpr 0x560517e27020 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x560517e279b8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x560517e27930 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x560517e27900 <col:9> '<bound member function type>' ->add_task_handlers 0x560517e1e688
|     | `-CXXThisExpr 0x560517e278f0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x560517e27970 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x560517e27870 <col:27> 'Task *' lvalue ParmVar 0x560517e1e9f0 'task' 'Task *'
|     |-ImplicitCastExpr 0x560517e27988 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x560517e27890 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x560517e279a0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x560517e278b0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x560517e1e320 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x560517e278d0 <col:57> 'const String' lvalue ParmVar 0x560517e1ea68 'prefix' 'const String &'
|-CXXMethodDecl 0x560517e1ee18 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x560517e1ec00 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1ec80 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1ecf8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x560517e1f0c8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x560517e1eee8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1ef68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1efe8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x560517e1f3b8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x560517e1f198 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1f218 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1f290 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x560517e1f668 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x560517e1f488 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1f508 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1f588 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x560517e1f918 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x560517e1f738 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1f7b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1f838 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x560517e1fbc8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x560517e1f9e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1fa68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1fae0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x560517e1fe78 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x560517e1fc98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e1fd18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e1fd98 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x560517e20188 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x560517e1ffa0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e20020 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e200a0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x560517e20468 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x560517e20258 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e202d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e20380 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x560517e20748 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x560517e20538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e205b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e20660 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x560517e209b0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x560517e20818 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x560517e20898 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x560517e20910 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x560517e20c58 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x560517e20a80 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x560517e20b00 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x560517e20b78 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x560517e20f08 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x560517e20d28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e20da8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e20e28 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x560517e211b8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x560517e20fd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e21058 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e210d0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x560517e21468 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x560517e21288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e21308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e21380 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x560517e21738 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x560517e21538 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e215b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560517e21658 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x560517e21a68 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x560517e21808 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560517e21888 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x560517e21900 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x560517e21978 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560517e270c0 <col:93> 'bool' false
|-CXXMethodDecl 0x560517e21c50 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560517e21b38 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x560517e21bb8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x560517e21e28 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560517e21d10 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x560517e21d90 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x560517e22108 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x560517e21ee8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x560517e21f60 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x560517e21fe0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x560517e22058 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x560517e223f8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x560517e221d8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x560517e22250 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x560517e222d0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x560517e22348 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x560517e22630 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x560517e224d0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x560517e22550 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x560517e22818 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x560517e226f8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x560517e22778 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x560517e228c8 prev 0x560517e1a068 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560517e229c0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x560517e22a50 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x560517e22ac8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x560517e22b88 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x560517e22c50 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x560517e22dc8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x560517e22d00 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x560517e22e70 <col:24>
| | `-OptimizeNoneAttr 0x560517e22ec8 <col:34>
| |-CXXMethodDecl 0x560517e22f10 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x560517e231c8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x560517e22fc0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x560517e23038 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x560517e230b8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x560517e23280 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x560517e232b8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x560517e23320 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x560517e233a8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x560517e236c8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x560517e23460 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x560517e234d8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x560517e23550 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x560517e235d0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x560517e237e0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x560517e2b158 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x560517e2b158
| | `-ParmVarDecl 0x560517e2b268 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x560517e2b308 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x560517e2b308
| | `-ParmVarDecl 0x560517e2b418 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x560517ef6880 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x560517e23858 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x560517e238f8 <col:38> "" ""
|-CXXMethodDecl 0x560517e23988 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x560517e23a28 <col:44> "" ""
|-AccessSpecDecl 0x560517e23a98 <line:260:3, col:10> col:3 private
|-EnumDecl 0x560517e23ac0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x560517e23bc0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x560517e23c10 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517e23ba0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x560517e23b80 <col:27> 'int' 4
|-FieldDecl 0x560517e23cc8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x560517e23e78 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x560517e23f30 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x560517e24fc0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x560517e25028 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x560517e25178 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x560517e250b8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x560517e25328 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x560517e25238 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x560517e25508 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x560517e253e8 <col:20> col:23 'int'
| `-ParmVarDecl 0x560517e25468 <col:25> col:28 'int'
|-CXXMethodDecl 0x560517e257b0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x560517e255d0 <col:23> col:26 'int'
| |-ParmVarDecl 0x560517e25650 <col:28> col:31 'int'
| `-ParmVarDecl 0x560517e256c8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x560517e25868 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x560517e25930 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x560517e25980 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x560517e259d0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x560517e25bb0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x560517e25a60 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x560517e25ad8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560517e25e58 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x560517e25c78 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x560517e25cf8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x560517e25d70 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x560517e26078 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x560517e25f28 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x560517e25fa8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x560517e263b0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x560517e26138 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x560517e261b8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x560517e26230 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x560517e262b0 <col:57> col:60 'int'
|-CXXMethodDecl 0x560517e26598 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560517e26480 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x560517e26500 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x560517e266e8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x560517e26658 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x560517e26a68 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x560517e267a8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x560517e26828 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x560517e268a0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x560517e26920 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x560517e26b80 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class MessageElement
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517e2e2c8 <../elements/standard/messageelement.hh:36:1, line:43:1> line:36:7 class MessageElement definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x560517e2e428 <col:1, col:7> col:7 implicit referenced class MessageElement
|-AccessSpecDecl 0x560517e2e4b8 <col:41, col:47> col:41 public
|-CXXConstructorDecl 0x560517e2e540 <line:38:5, col:20> col:5 MessageElement 'void ()'
|-CXXMethodDecl 0x560517e2e640 <line:40:5, col:56> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x560517e17018 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x560517e2f188 <col:36, col:56>
|   `-ReturnStmt 0x560517e2f178 <col:38, col:45>
|     `-ImplicitCastExpr 0x560517e2f160 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x560517e2f140 <col:45> 'const char [8]' lvalue "Message"
|-CXXMethodDecl 0x560517e2e910 <line:41:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x560517e188b0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x560517e2e7c0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x560517e2e838 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXConstructorDecl 0x560517e2e9e8 <line:36:7> col:7 implicit MessageElement 'void (const MessageElement &)' inline default_delete noexcept-unevaluated 0x560517e2e9e8
| `-ParmVarDecl 0x560517e2eaf8 <col:7> col:7 'const MessageElement &'
|-CXXConstructorDecl 0x560517e2eb98 <col:7> col:7 implicit MessageElement 'void (MessageElement &&)' inline default_delete noexcept-unevaluated 0x560517e2eb98
| `-ParmVarDecl 0x560517e2eca8 <col:7> col:7 'MessageElement &&'
|-CXXMethodDecl 0x560517e2ed48 <col:7> col:7 implicit operator= 'MessageElement &(const MessageElement &)' inline default_delete noexcept-unevaluated 0x560517e2ed48
| `-ParmVarDecl 0x560517e2ee58 <col:7> col:7 'const MessageElement &'
|-CXXMethodDecl 0x560517e2eec8 <col:7> col:7 implicit operator= 'MessageElement &(MessageElement &&)' inline default_delete noexcept-unevaluated 0x560517e2eec8
| `-ParmVarDecl 0x560517e2efd8 <col:7> col:7 'MessageElement &&'
`-CXXDestructorDecl 0x560517e2f060 <col:7> col:7 implicit ~MessageElement 'void ()' inline default noexcept-unevaluated 0x560517e2f060
  `-Overrides: [ 0x560517e15bb8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.MessageElement = type { %class.Element.base, [4 x i8] }
  NonVirtualBaseLLVMType:%class.MessageElement.base = type { %class.Element.base }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517be9780 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x560517be9898 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x560517be9938 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x560517be9998 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x560517be99f8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x560517be9aa8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517be9db0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517be9ec8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x560517be9f70 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x560517be9fd8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x560517bea068 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x560517bf0100 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560517bf0538 <col:12>
|-CXXConstructorDecl 0x560517bf0208 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x560517bf0318 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560517be9f70 'data' 'const char *'
| | `-ImplicitCastExpr 0x560517bf2ac0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x560517bf2a90 <col:12> 'const char *const' lvalue .data 0x560517be9f70
| |     `-DeclRefExpr 0x560517bf2a70 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517bf0318 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560517be9fd8 'length' 'int'
| | `-ImplicitCastExpr 0x560517bf2b50 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x560517bf2b20 <col:12> 'const int' lvalue .length 0x560517be9fd8
| |     `-DeclRefExpr 0x560517bf2b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517bf0318 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560517bea068 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x560517bf2be0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x560517bf2bb0 <col:12> 'String::memo_t *const' lvalue .memo 0x560517bea068
| |     `-DeclRefExpr 0x560517bf2b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517bf0318 '' 'const String::rep_t &'
| `-CompoundStmt 0x560517bf2c38 <col:12>
|-CXXConstructorDecl 0x560517bf03b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560517bf03b8
| `-ParmVarDecl 0x560517bf04c8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x560517bf5a20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x560517c01438 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x560517c01548 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x560517c01a60 <col:12>
|   |-BinaryOperator 0x560517c01878 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x560517c01830 <col:12> 'const char *' lvalue ->data 0x560517be9f70
|   | | `-CXXThisExpr 0x560517c01820 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x560517c01860 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x560517c017f0 <col:12> 'const char *const' lvalue .data 0x560517be9f70
|   |     `-DeclRefExpr 0x560517c017d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517c01548 '' 'const String::rep_t &'
|   |-BinaryOperator 0x560517c01940 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x560517c018f8 <col:12> 'int' lvalue ->length 0x560517be9fd8
|   | | `-CXXThisExpr 0x560517c018e8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x560517c01928 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x560517c018b8 <col:12> 'const int' lvalue .length 0x560517be9fd8
|   |     `-DeclRefExpr 0x560517c01898 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517c01548 '' 'const String::rep_t &'
|   |-BinaryOperator 0x560517c01a08 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x560517c019c0 <col:12> 'String::memo_t *' lvalue ->memo 0x560517bea068
|   | | `-CXXThisExpr 0x560517c019b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x560517c019f0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x560517c01980 <col:12> 'String::memo_t *const' lvalue .memo 0x560517bea068
|   |     `-DeclRefExpr 0x560517c01960 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517c01548 '' 'const String::rep_t &'
|   `-ReturnStmt 0x560517c01a50 <col:12>
|     `-UnaryOperator 0x560517c01a38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517c01a28 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x560517c015b8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560517c015b8
  `-ParmVarDecl 0x560517c016c8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517be0cf0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560517be0e08 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x560517be0e98 <col:16, col:22> col:16 public
|-TypedefDecl 0x560517be0ed8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5605178b4e00 'const char *'
|   `-QualType 0x5605178b4351 'const char' const
|     `-BuiltinType 0x5605178b4350 'char'
|-TypedefDecl 0x560517be0f60 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x560517be0f30 'String::const_iterator' sugar
|   |-Typedef 0x560517be0ed8 'const_iterator'
|   `-PointerType 0x5605178b4e00 'const char *'
|     `-QualType 0x5605178b4351 'const char' const
|       `-BuiltinType 0x5605178b4350 'char'
|-TypedefDecl 0x560517be10d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x560517be1040 'int (String::*)() const'
|   |-RecordType 0x560517be0d80 'String'
|   | `-CXXRecord 0x560517be0cf0 'String'
|   `-ParenType 0x560517be0fe0 'int () const' sugar
|     `-FunctionProtoType 0x560517bb4b70 'int () const' const cdecl
|       `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517be1138 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x560517a09750 'int64_t' sugar
|   |-Typedef 0x56051791d2a0 'int64_t'
|   `-TypedefType 0x5605178f6510 '__int64_t' sugar
|     |-Typedef 0x5605178f60e8 '__int64_t'
|     `-BuiltinType 0x5605178b43d0 'long'
|-TypedefDecl 0x560517be11a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x560517a09670 'uint64_t' sugar
|   |-Typedef 0x56051791d440 'uint64_t'
|   `-TypedefType 0x5605178f65a0 '__uint64_t' sugar
|     |-Typedef 0x5605178f6158 '__uint64_t'
|     `-BuiltinType 0x5605178b4470 'unsigned long'
|-TypedefDecl 0x560517be1230 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x560517be1200 'String::intmax_t' sugar
|   |-Typedef 0x560517be1138 'intmax_t'
|   `-TypedefType 0x560517a09750 'int64_t' sugar
|     |-Typedef 0x56051791d2a0 'int64_t'
|     `-TypedefType 0x5605178f6510 '__int64_t' sugar
|       |-Typedef 0x5605178f60e8 '__int64_t'
|       `-BuiltinType 0x5605178b43d0 'long'
|-TypedefDecl 0x560517be12c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x560517be1290 'String::uintmax_t' sugar
|   |-Typedef 0x560517be11a0 'uintmax_t'
|   `-TypedefType 0x560517a09670 'uint64_t' sugar
|     |-Typedef 0x56051791d440 'uint64_t'
|     `-TypedefType 0x5605178f65a0 '__uint64_t' sugar
|       |-Typedef 0x5605178f6158 '__uint64_t'
|       `-BuiltinType 0x5605178b4470 'unsigned long'
|-CXXConstructorDecl 0x560517be1380 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x560517be1528 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x560517be1468 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x560517be16d8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x560517be1618 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x560517be1830 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x560517be17a0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x560517be1a48 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x560517be18f8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x560517be1978 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x560517be1c68 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x560517be1b18 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x560517be1b98 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x560517be1e88 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x560517be1d38 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x560517be1db8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x560517be20a8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x560517be1f58 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x560517be1fd8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x560517be2238 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x560517be2170 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x560517be23b8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x560517be22f8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x560517be2548 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x560517be2480 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x560517be26a0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x560517be2610 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x560517be27f8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x560517be2768 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x560517be2950 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x560517be28c0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x560517be2ad8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x560517be2a18 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x560517be2c68 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x560517be2ba0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x560517be2df8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x560517be2d30 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x560517be2f88 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x560517be2ec0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x560517be3080 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x560517be31a8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x560517be3328 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x560517be3260 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x560517be3478 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x560517be33e8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x560517be3530 <col:63> "" ""
|-CXXMethodDecl 0x560517be3678 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x560517be35b8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x560517be3888 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x560517be3738 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x560517be37b8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x560517be3aa8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x560517be3950 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x560517be39d0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x560517be3d88 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x560517be3b68 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x560517be3be8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x560517befbd0 <col:55> 'int' 10
| `-ParmVarDecl 0x560517be3c60 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560517befbf0 <col:76> 'bool' true
|-CXXMethodDecl 0x560517be4068 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x560517be3e50 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x560517be3ed0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x560517befc00 <col:56> 'int' 10
| `-ParmVarDecl 0x560517be3f48 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560517befc20 <col:77> 'bool' true
|-CXXMethodDecl 0x560517be4170 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x560517be4238 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x560517be4300 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x560517be43a0 <col:20>
| `-OptimizeNoneAttr 0x560517be43f8 <col:30>
|-CXXConversionDecl 0x560517be44e8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x560517be45b8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x560517be4678 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x560517be4768 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x560517be4828 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x560517be49a8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x560517be48e0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x560517be4af8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x560517be4a68 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x560517be4be8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x560517be4ca8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x560517be4ef8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x560517be4d60 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x560517be4de0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x560517be5158 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x560517be4fc0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x560517be5040 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x560517be5228 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x560517be5438 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x560517be52e0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x560517be5360 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x560517be5658 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x560517be5500 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x560517be5580 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x560517be57e8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x560517be5720 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x560517be58d8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x560517be5a48 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x560517be5988 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560517be5c58 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x560517be5b08 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x560517be5b88 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x560517be5e70 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x560517be5d18 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x560517be5d90 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x560517be6000 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x560517be5f30 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560517be6220 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x560517be60c0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x560517be6140 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x560517be6370 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x560517be62e0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x560517be6548 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x560517be6430 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x560517be64b0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x560517be6698 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x560517be6608 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x560517be68b0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x560517be6750 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x560517be67d0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x560517befc30 <col:39> 'int' 0
|-CXXMethodDecl 0x560517be6ad0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x560517be6970 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x560517be69f0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x560517befc50 <col:48> 'int' 0
|-CXXMethodDecl 0x560517be6cb0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x560517be6b90 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x560517be6c10 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x560517befc70 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x560517be6d80 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x560517be6e40 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x560517be6f00 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x560517be6fc0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x560517be7080 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x560517be7228 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x560517be7130 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x560517be73a8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x560517be72e0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x560517be7580 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x560517be7468 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x560517be76f8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x560517be7638 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x560517be7840 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x560517be77b0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560517be7990 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x560517be7900 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x560517be7b68 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x560517be7a50 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x560517be7ad0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x560517be7d48 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x560517be7c30 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x560517be7cb0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x560517be7e98 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x560517be7e08 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x560517be80a8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x560517be7f58 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x560517be7fd8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x560517be8208 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x560517be8170 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x560517be8360 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x560517be82c8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x560517be8408 <col:57> "" ""
|-CXXMethodDecl 0x560517be8518 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x560517be8488 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x560517be8668 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x560517be85d8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x560517be87e8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x560517be8720 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x560517be88b0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x560517be8970 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x560517be8a30 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x560517be8ad0 <col:49> "" ""
|-CXXMethodDecl 0x560517be8b60 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x560517be8c20 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x560517be8d10 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x560517be8dd8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x560517be8e98 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x560517be8f58 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x560517be9050 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x560517be9118 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x560517be91e0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x560517be93b8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x560517be9298 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x560517be9318 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x560517be95e0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x560517be9480 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x560517be9500 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x560517be96f0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x560517be9758 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x560517be9780 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x560517be9898 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x560517be9938 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x560517be9998 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x560517be99f8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x560517be9aa8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x560517be9b10 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x560517be9d48 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x560517be9d98 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517be9d28 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x560517be9c38 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x560517be9be0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x560517be9c20 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x560517be9c00 <col:32> 'int' 8
|-CXXRecordDecl 0x560517be9db0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560517be9ec8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x560517be9f70 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x560517be9fd8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x560517bea068 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x560517bf0100 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x560517bf0538 <col:12>
| |-CXXConstructorDecl 0x560517bf0208 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560517bf0318 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560517be9f70 'data' 'const char *'
| | | `-ImplicitCastExpr 0x560517bf2ac0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x560517bf2a90 <col:12> 'const char *const' lvalue .data 0x560517be9f70
| | |     `-DeclRefExpr 0x560517bf2a70 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517bf0318 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560517be9fd8 'length' 'int'
| | | `-ImplicitCastExpr 0x560517bf2b50 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x560517bf2b20 <col:12> 'const int' lvalue .length 0x560517be9fd8
| | |     `-DeclRefExpr 0x560517bf2b00 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517bf0318 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560517bea068 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x560517bf2be0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x560517bf2bb0 <col:12> 'String::memo_t *const' lvalue .memo 0x560517bea068
| | |     `-DeclRefExpr 0x560517bf2b90 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517bf0318 '' 'const String::rep_t &'
| | `-CompoundStmt 0x560517bf2c38 <col:12>
| |-CXXConstructorDecl 0x560517bf03b8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560517bf03b8
| | `-ParmVarDecl 0x560517bf04c8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x560517bf5a20 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x560517c01438 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560517c01548 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x560517c01a60 <col:12>
| |   |-BinaryOperator 0x560517c01878 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x560517c01830 <col:12> 'const char *' lvalue ->data 0x560517be9f70
| |   | | `-CXXThisExpr 0x560517c01820 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x560517c01860 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x560517c017f0 <col:12> 'const char *const' lvalue .data 0x560517be9f70
| |   |     `-DeclRefExpr 0x560517c017d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517c01548 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x560517c01940 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x560517c018f8 <col:12> 'int' lvalue ->length 0x560517be9fd8
| |   | | `-CXXThisExpr 0x560517c018e8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x560517c01928 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x560517c018b8 <col:12> 'const int' lvalue .length 0x560517be9fd8
| |   |     `-DeclRefExpr 0x560517c01898 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517c01548 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x560517c01a08 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x560517c019c0 <col:12> 'String::memo_t *' lvalue ->memo 0x560517bea068
| |   | | `-CXXThisExpr 0x560517c019b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x560517c019f0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x560517c01980 <col:12> 'String::memo_t *const' lvalue .memo 0x560517bea068
| |   |     `-DeclRefExpr 0x560517c01960 <col:12> 'const String::rep_t' lvalue ParmVar 0x560517c01548 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x560517c01a50 <col:12>
| |     `-UnaryOperator 0x560517c01a38 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x560517c01a28 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x560517c015b8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560517c015b8
|   `-ParmVarDecl 0x560517c016c8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x560517bea0e0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x560517bea328 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x560517bea148 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x560517bea1c8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x560517bea240 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x560517bf00c0 <col:79, line:261:5>
|   |-BinaryOperator 0x560517befd38 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x560517befcd0 <col:2, col:5> 'const char *' lvalue .data 0x560517be9f70
|   | | `-MemberExpr 0x560517befca0 <col:2> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|   | |   `-CXXThisExpr 0x560517befc90 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x560517befd20 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x560517befd00 <col:12> 'const char *' lvalue ParmVar 0x560517bea148 'data' 'const char *'
|   |-BinaryOperator 0x560517befe00 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x560517befd98 <col:2, col:5> 'int' lvalue .length 0x560517be9fd8
|   | | `-MemberExpr 0x560517befd68 <col:2> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|   | |   `-CXXThisExpr 0x560517befd58 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x560517befde8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560517befdc8 <col:14> 'int' lvalue ParmVar 0x560517bea1c8 'length' 'int'
|   `-IfStmt 0x560517bf00a8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x560517beff20 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x560517beff08 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x560517befee8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x560517befec8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x560517befe60 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x560517bea068
|     |       | `-MemberExpr 0x560517befe30 <col:7> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|     |       |   `-CXXThisExpr 0x560517befe20 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x560517befeb0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x560517befe90 <col:17> 'String::memo_t *' lvalue ParmVar 0x560517bea240 'memo' 'String::memo_t *'
|     `-CallExpr 0x560517bf0080 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x560517bf0068 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560517beff70 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x560517bd8d58 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x560517beffd8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x560517be9938
|         `-ImplicitCastExpr 0x560517beffc0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x560517beffa0 <col:27> 'String::memo_t *' lvalue ParmVar 0x560517bea240 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x560517bea5d8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x560517bea3f8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x560517bea478 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x560517bea4f0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x560517bea0e0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x560517bf0548 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x560517bf06d8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x560517bf0640 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x560517bf05b0 <col:2> '<bound member function type>' ->assign_memo 0x560517bea328
|     | `-ImplicitCastExpr 0x560517bf0678 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x560517bf05a0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x560517bf0690 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x560517bf05e0 <col:14> 'const char *' lvalue ParmVar 0x560517bea3f8 'data' 'const char *'
|     |-ImplicitCastExpr 0x560517bf06a8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x560517bf0600 <col:20> 'int' lvalue ParmVar 0x560517bea478 'length' 'int'
|     `-ImplicitCastExpr 0x560517bf06c0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x560517bf0620 <col:28> 'String::memo_t *' lvalue ParmVar 0x560517bea4f0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x560517bea768 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x560517bea6a8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x560517bf0930 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x560517bf08b0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x560517bf0700 <col:2> '<bound member function type>' ->assign_memo 0x560517bea328
|     | `-CXXThisExpr 0x560517bf06f0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x560517bf08e8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x560517bf0780 <col:14, col:19> 'const char *' lvalue .data 0x560517be9f70
|     |   `-MemberExpr 0x560517bf0750 <col:14, col:16> 'String::rep_t' lvalue ._r 0x560517bea0e0
|     |     `-DeclRefExpr 0x560517bf0730 <col:14> 'const String' lvalue ParmVar 0x560517bea6a8 'x' 'const String &'
|     |-ImplicitCastExpr 0x560517bf0900 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x560517bf0800 <col:25, col:30> 'int' lvalue .length 0x560517be9fd8
|     |   `-MemberExpr 0x560517bf07d0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x560517bea0e0
|     |     `-DeclRefExpr 0x560517bf07b0 <col:25> 'const String' lvalue ParmVar 0x560517bea6a8 'x' 'const String &'
|     `-ImplicitCastExpr 0x560517bf0918 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x560517bf0880 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x560517bea068
|         `-MemberExpr 0x560517bf0850 <col:38, col:40> 'String::rep_t' lvalue ._r 0x560517bea0e0
|           `-DeclRefExpr 0x560517bf0830 <col:38> 'const String' lvalue ParmVar 0x560517bea6a8 'x' 'const String &'
|-CXXMethodDecl 0x560517bea830 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x560517bf12f0 <col:31, line:278:5>
|   `-IfStmt 0x560517bf12d8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x560517bf09d0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x560517bf09b8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x560517bf0988 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x560517bea068
|     |     `-MemberExpr 0x560517bf0958 <col:6> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|     |       `-CXXThisExpr 0x560517bf0948 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x560517bf12b0 <col:15, line:277:2>
|       |-ParenExpr 0x560517bf0e80 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x560517bf0e50 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x560517bf0ae0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x560517bf0ac8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x560517bf0ab0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x560517bf0a70 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x560517be9938
|       |   |       `-ImplicitCastExpr 0x560517bf0a58 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x560517bf0a28 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x560517bea068
|       |   |           `-MemberExpr 0x560517bf09f8 <col:27> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|       |   |             `-CXXThisExpr 0x560517bf09e8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x560517bf0b40 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x560517bf0b20 <col:54> 'int' 0
|       |   `-CallExpr 0x560517bf0db0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x560517bf0d98 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x560517bf0d18 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x560517bf0df0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x560517bf0c28 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x560517bf0e08 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x560517bf0c58 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x560517bf0e20 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x560517bf0c90 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x560517bf0e38 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x560517bf0d00 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x560517bf0ce8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x560517bf0cb0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x560517bf11d0 <line:274:6, line:275:22>
|       | |-CallExpr 0x560517bf1090 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x560517bf1078 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x560517bf0ff0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x560517bda1a0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x560517bf0fc0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x560517be9938
|       | |   `-ImplicitCastExpr 0x560517bf0fa8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x560517bf0f78 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x560517bea068
|       | |       `-MemberExpr 0x560517bf0f48 <col:40> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|       | |         `-CXXThisExpr 0x560517bf0f38 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x560517bf1190 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x560517bf1178 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x560517bf10b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x560517bef010 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x560517bf11b8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x560517bf1118 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x560517bea068
|       |       `-MemberExpr 0x560517bf10e8 <col:15> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|       |         `-CXXThisExpr 0x560517bf10d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x560517bf1290 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x560517bf1228 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x560517bea068
|         | `-MemberExpr 0x560517bf11f8 <col:6> 'String::rep_t' lvalue ->_r 0x560517bea0e0
|         |   `-CXXThisExpr 0x560517bf11e8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x560517bf1278 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x560517bf1258 <col:16> 'int' 0
|-CXXMethodDecl 0x560517beaac8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x560517bea8e8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x560517bea968 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x560517bea9e0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x560517beaba0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x560517beadf0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x560517beac58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x560517beacd8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x560517bead50 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x560517beafd8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x560517beaec0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x560517beaf40 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x560517beb0d8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x560517bf13c8 <col:41, line:286:5>
|   `-ReturnStmt 0x560517bf13b8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x560517bf1388 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x560517bf1350 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x560517bf1338 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x560517bf1318 <col:46> 'int' 1
|-CXXMethodDecl 0x560517beb378 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x560517beb190 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x560517beb210 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x560517beb290 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x560517bef010 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x560517beb440 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x560517bef0e0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x560517bef2b0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x560517bef198 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x560517bef218 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x560517bef370 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x560517bef438 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x560517bef538 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x560517bef5b0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x560517bef628 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x560517bef690 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x560517bef790 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x560517bef7e0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517bef770 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x560517bef750 <col:22> 'int' 14
|-CXXMethodDecl 0x560517bef9f8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x560517bef810 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x560517bef890 <col:38> col:41 'int'
| `-ParmVarDecl 0x560517bef910 <col:43> col:46 'int'
|-FriendDecl 0x560517befb00 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x560517befb90 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560517cb1480 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x560517cb1658 prev 0x560517cb1480 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x560517cb16e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x560517cb1710 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517cb3070 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x560517cb3020 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x560517cb3000 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x560517cb1928 'type'
|     `-SubstTemplateTypeParmType 0x560517cb18f0 'String' sugar
|       |-TemplateTypeParmType 0x560517ba4590 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517ba4540 'T'
|       `-RecordType 0x560517be0d80 'String'
|         `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517cb3128 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x560517cb30f0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x560517cb30d0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x560517cb3070 'type'
|     `-ElaboratedType 0x560517cb3020 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x560517cb3000 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x560517cb1928 'type'
|         `-SubstTemplateTypeParmType 0x560517cb18f0 'String' sugar
|           |-TemplateTypeParmType 0x560517ba4590 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560517ba4540 'T'
|           `-RecordType 0x560517be0d80 'String'
|             `-CXXRecord 0x560517be0cf0 'String'
|-CXXMethodDecl 0x560517cb32a8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x560517cb31b8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x560517cb3398 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x560517cb3478 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x560517cb3478
|-CXXMethodDecl 0x560517cb3748 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x560517cb3650 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x560517cb3988 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560517cb3800 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560517cb3878 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517cb3b58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560517cb3a48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560517cb3ac0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517cb3cb8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x560517cb3d88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x560517cb3fd8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560517cb3e48 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x560517cb3ec0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517e5e178 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x560517cb40a8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x560517cb4120 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517e5e338 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x560517e5e248 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517e5e4f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x560517e5e400 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517e5e5b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560517e5e660 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x560517e5e898 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560517e5e710 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560517e5e788 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560517e5eb38 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x560517e5ea40 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x560517e5ec00 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x560517e5ec50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x560517e5eca0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560517e18520 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x560517cafee8 prev 0x560517e18520 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x560517cb13f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x560517cb13a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x560517cb1380 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x560517cb1230 'type'
|     `-SubstTemplateTypeParmType 0x560517cb10c0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x560517b7a340 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x560517b7a2e8 'F'
|       `-RecordType 0x560517cb0d20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x560517cb0c40 'typed_array_memory'
|-FieldDecl 0x560517e5ecf0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x560517e5ed40 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x560517e5ed78 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|   |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x560517bb1858 'T'
|   `-RecordType 0x560517be0d80 'String'
|     `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5ee08 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x560517e5edd0 'String &'
|   `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|     |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560517bb1858 'T'
|     `-RecordType 0x560517be0d80 'String'
|       `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5ee98 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x560517e5ee60 'const String &'
|   `-QualType 0x560517caff81 'const String' const
|     `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-RecordType 0x560517be0d80 'String'
|         `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5ef28 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x560517e5eef0 'String *'
|   `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|     |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560517bb1858 'T'
|     `-RecordType 0x560517be0d80 'String'
|       `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5efb8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x560517e5ef80 'const String *'
|   `-QualType 0x560517caff81 'const String' const
|     `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-RecordType 0x560517be0d80 'String'
|         `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5fc10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x560517e5fbc0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x560517e5fba0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x560517e5fad8 'type'
|     `-LValueReferenceType 0x560517e5faa0 'const String &'
|       `-QualType 0x560517e5f841 'const String' const
|         `-SubstTemplateTypeParmType 0x560517e5f840 'String' sugar
|           |-TemplateTypeParmType 0x560517b84290 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560517b84238 'T'
|           `-RecordType 0x560517be0d80 'String'
|             `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5fc78 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x560517e5ee60 'const String &'
|   `-QualType 0x560517caff81 'const String' const
|     `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-RecordType 0x560517be0d80 'String'
|         `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5fcd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517e5fd38 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x560517e5eef0 'String *'
|   `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|     |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560517bb1858 'T'
|     `-RecordType 0x560517be0d80 'String'
|       `-CXXRecord 0x560517be0cf0 'String'
|-TypedefDecl 0x560517e5fda0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x560517e5ef80 'const String *'
|   `-QualType 0x560517caff81 'const String' const
|     `-SubstTemplateTypeParmType 0x560517caff80 'String' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-RecordType 0x560517be0d80 'String'
|         `-CXXRecord 0x560517be0cf0 'String'
|-EnumDecl 0x560517e5fdf8 <line:134:5> col:5
| `-EnumConstantDecl 0x560517e5fef0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x560517e5fed0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x560517bb2f38 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x560517bb2f10 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560517bb2ef0 <col:40> 'int' 1
|-CXXConstructorDecl 0x560517e5ff78 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x560517e60208 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560517e60030 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560517e600d0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x560517e60498 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x560517e60380 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x560517e60758 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x560517e60640 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x560517e60a70 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x560517e60950 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x560517e60d80 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x560517e60c60 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x560517e61070 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560517e60eb8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560517e60f30 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560517e61198 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560517e61248 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517e612a0 <col:30> Inherited
|-CXXMethodDecl 0x560517e612e8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560517e61398 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517e613f0 <col:30> Inherited
|-CXXMethodDecl 0x560517e614b8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560517e61568 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517e615c0 <col:30> Inherited
|-CXXMethodDecl 0x560517e61608 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560517e616b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517e61710 <col:30> Inherited
|-CXXMethodDecl 0x560517e61758 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560517e61808 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517e61860 <col:30> Inherited
|-CXXMethodDecl 0x560517e618a8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560517e61958 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517e619b0 <col:30> Inherited
|-CXXMethodDecl 0x560517e619d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560517e61a88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560517e61b38 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x560517e61cf8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560517e61be8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560517e61c60 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560517e61e48 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x560517e61db8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517e61ff8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x560517e61f00 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560517e620b0 <col:20>
| `-OptimizeNoneAttr 0x560517e62108 <col:30>
|-CXXMethodDecl 0x560517e62228 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x560517e62130 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560517e622e0 <col:20>
| `-OptimizeNoneAttr 0x560517e62338 <col:30>
|-CXXMethodDecl 0x560517e623f0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560517e62360 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517e62538 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560517e624a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517e62668 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x560517e62768 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x560517e62838 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x560517e62908 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x560517e62a48 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560517e629b8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517e62b90 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560517e62b00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517e62cd8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x560517e62c48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560517e62d90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560517e62e90 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x560517e62e00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560517e62f48 <col:60> Inherited "" ""
|-CXXMethodDecl 0x560517e63008 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x560517e63108 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x560517e63288 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560517e631c8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x560517e63a48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560517e63340 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x560517e639a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x560517e638a8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x560517e63b28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560517e63c78 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560517e63be8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560517e63d30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x560517e63f78 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560517e63df0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560517e63e68 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560517e64108 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x560517e64048 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560517e64318 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x560517e641d0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560517e64248 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560517e643d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560517e64638 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x560517e64540 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x560517e64708 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x560517e64708

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517ee5e28 prev 0x560517d95c38 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560517ee5f20 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x560517ee5fb0 <col:22, col:28> col:22 public
|-EnumDecl 0x560517ee5fd8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x560517ee60f8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee60d8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x560517ee60c0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x560517ee60a0 <col:14> 'int' 999
| |-EnumConstantDecl 0x560517ee61a0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee6180 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x560517ee6168 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x560517ee6148 <col:14> 'int' 1
| |-EnumConstantDecl 0x560517ee6230 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee6210 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x560517ee61f0 <col:17> 'int' 0
| |-EnumConstantDecl 0x560517ee62c0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee62a0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x560517ee6280 <col:13> 'int' 1
| |-EnumConstantDecl 0x560517ee6350 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee6330 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x560517ee6310 <col:16> 'int' 2
| |-EnumConstantDecl 0x560517ee63e0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee63c0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x560517ee63a0 <col:13> 'int' 3
| |-EnumConstantDecl 0x560517ee6470 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee6450 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x560517ee6430 <col:15> 'int' 4
| |-EnumConstantDecl 0x560517ee6500 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee64e0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x560517ee64c0 <col:14> 'int' 5
| |-EnumConstantDecl 0x560517ee6590 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x560517ee6570 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x560517ee6550 <col:12> 'int' 6
| `-EnumConstantDecl 0x560517ee6620 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x560517ee6600 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x560517ee65e0 <col:13> 'int' 7
|-VarDecl 0x560517ee6690 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x560517ee6718 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x560517ee67a0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x560517ee6828 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x560517ee68b0 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x560517ee6938 <line:114:5, line:119:10> col:2 used e_error 'const char []' static
|-VarDecl 0x560517ee69c0 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x560517ee6a48 <line:114:5, line:121:22> col:2 used e_warning_annotated 'const char []' static
|-VarDecl 0x560517ee6ad0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x560517ee6b58 <line:114:5, line:123:9> col:2 used e_info 'const char []' static
|-VarDecl 0x560517ee6be0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x560517ee6ce0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x560517eec018 '_nerrors' 'int'
| | `-IntegerLiteral 0x560517eec7a8 <line:128:13> 'int' 0
| `-CompoundStmt 0x560517eec818 <col:16, line:129:5>
|-CXXDestructorDecl 0x560517ee6dd0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x560517eec828 <col:29, line:132:5>
|-CXXMethodDecl 0x560517ee6f88 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x560517ee6ec0 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560517ee7050 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x560517ee7138 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x560517eec880 <col:44, line:161:5>
|   `-ReturnStmt 0x560517eec870 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x560517eec858 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x560517eec838 <col:9> 'ErrorHandler *' lvalue Var 0x560517eec078 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x560517ee7278 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x560517ee71e8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560517ee7340 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x560517eec8e0 <col:43, line:173:5>
|   `-ReturnStmt 0x560517eec8d0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x560517eec8b8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x560517eec898 <col:9> 'ErrorHandler *' lvalue Var 0x560517eec0f0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x560517ee73f8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x560517ee7478 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x560517ee7588 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x560517ee74f8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x560517ee76d8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x560517ee7648 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560517ee7830 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x560517ee7798 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x560517ee7988 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x560517ee78f0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x560517ee7ae0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x560517ee7a48 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x560517ee7cf0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x560517ee7b98 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x560517ee7c18 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x560517ee7ec8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x560517ee7db0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x560517ee7e30 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x560517ee80e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x560517ee7f88 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x560517ee8008 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x560517ee82c8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x560517ee81a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x560517ee8228 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x560517ee84a8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x560517ee8388 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x560517ee8408 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x560517ee8630 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x560517ee8568 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x560517ee8800 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x560517ee86e8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x560517ee8760 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x560517eecb38 <col:57, line:234:5>
|   `-ReturnStmt 0x560517eecb28 <line:233:2, col:41>
|     `-ExprWithCleanups 0x560517eecb10 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x560517eecab8 <col:9, col:41> 'int'
|         |-MemberExpr 0x560517eeca88 <col:9> '<bound member function type>' ->xmessage 0x560517ee8630
|         | `-CXXThisExpr 0x560517eeca78 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x560517eecaf8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x560517eecae0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x560517eeca58 <col:18, col:40> 'String' (CXXTemporary 0x560517eeca58)
|               `-CallExpr 0x560517eeca20 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x560517eeca08 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x560517eec980 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x560517eea7f8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x560517eec9a0 <col:31> 'const String' lvalue ParmVar 0x560517ee8760 'str' 'const String &'
|                 `-DeclRefExpr 0x560517eec9c0 <col:36> 'const String' lvalue ParmVar 0x560517ee86e8 'anno' 'const String &'
|-CXXMethodDecl 0x560517ee8ae0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x560517ee88c0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x560517ee8940 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x560517ee89b8 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560517eecdc8 <col:68, line:243:5>
|   `-ReturnStmt 0x560517eecdb8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x560517eecda0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x560517eecd40 <col:9, col:41> 'int'
|         |-MemberExpr 0x560517eecd10 <col:9> '<bound member function type>' ->xmessage 0x560517ee8800
|         | `-CXXThisExpr 0x560517eecd00 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x560517eecbd8 <col:18> 'const String' lvalue ParmVar 0x560517ee88c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x560517eecd88 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x560517eecd70 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x560517eecce0 <col:24, col:40> 'String' (CXXTemporary 0x560517eecce0)
|               `-CXXMemberCallExpr 0x560517eecc78 <col:24, col:40> 'String'
|                 |-MemberExpr 0x560517eecc08 <col:24> '<bound member function type>' ->vformat 0x560517ee9cc0
|                 | `-CXXThisExpr 0x560517eecbf8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x560517eecca8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x560517eecc38 <col:32> 'const char *' lvalue ParmVar 0x560517ee8940 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x560517eeccc0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x560517eecc58 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x560517ee89b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560517ee8d80 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x560517ee8ba8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x560517ee8c20 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x560517ee8c98 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x560517eed108 <col:23, line:254:5>
|   `-ReturnStmt 0x560517eed0f8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x560517eed0e0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x560517eed080 <col:9, col:71> 'int'
|         |-MemberExpr 0x560517eed050 <col:9> '<bound member function type>' ->xmessage 0x560517ee8800
|         | `-CXXThisExpr 0x560517eed040 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x560517eed0c8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x560517eed0b0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x560517eed000 <col:18, col:65> 'String' (CXXTemporary 0x560517eed000)
|         |     `-CallExpr 0x560517eecf98 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x560517eecf80 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x560517eece68 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x560517eea7f8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x560517eece88 <col:31> 'const String' lvalue ParmVar 0x560517ee8c20 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x560517eecfe0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x560517eecfc8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x560517eecf60 <col:37, col:64> 'String' (CXXTemporary 0x560517eecf60)
|         |             `-CallExpr 0x560517eecf30 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x560517eecf18 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x560517eecea8 <col:37> 'String (const String &)' lvalue CXXMethod 0x560517eeae48 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x560517eecec8 <col:56> 'const String' lvalue ParmVar 0x560517ee8ba8 'landmark' 'const String &'
|         `-DeclRefExpr 0x560517eed020 <col:68> 'const String' lvalue ParmVar 0x560517ee8c98 'str' 'const String &'
|-CXXMethodDecl 0x560517ee9100 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x560517ee8e48 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x560517ee8ec0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x560517ee8f40 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x560517ee8fb8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560517eed3c0 <col:34, line:267:5>
|   `-ReturnStmt 0x560517eed3b0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x560517eed398 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x560517eed330 <col:9, col:51> 'int'
|         |-MemberExpr 0x560517eed300 <col:9> '<bound member function type>' ->xmessage 0x560517ee8d80
|         | `-CXXThisExpr 0x560517eed2f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x560517eed1a8 <col:18> 'const String' lvalue ParmVar 0x560517ee8e48 'landmark' 'const String &'
|         |-DeclRefExpr 0x560517eed1c8 <col:28> 'const String' lvalue ParmVar 0x560517ee8ec0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x560517eed380 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x560517eed368 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x560517eed2d0 <col:34, col:50> 'String' (CXXTemporary 0x560517eed2d0)
|               `-CXXMemberCallExpr 0x560517eed268 <col:34, col:50> 'String'
|                 |-MemberExpr 0x560517eed1f8 <col:34> '<bound member function type>' ->vformat 0x560517ee9cc0
|                 | `-CXXThisExpr 0x560517eed1e8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x560517eed298 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x560517eed228 <col:42> 'const char *' lvalue ParmVar 0x560517ee8f40 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x560517eed2b0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x560517eed248 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x560517ee8fb8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560517ee9210 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x560517eed440 <col:25, line:288:5>
|   `-ReturnStmt 0x560517eed430 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x560517eed418 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x560517eed3e8 <col:9> 'const int' lvalue ->_nerrors 0x560517eec018
|         `-CXXThisExpr 0x560517eed3d8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x560517ee9420 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x560517ee92c8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x560517ee9348 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x560517ee9708 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x560517ee94e8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x560517ee9568 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x560517ee95e0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560517ee98a0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x560517ee97d8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x560517ee9ae8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x560517ee9960 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x560517ee99d8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560517eed6a0 <col:58, line:357:5>
|   `-ReturnStmt 0x560517eed690 <line:356:2, col:29>
|     `-ExprWithCleanups 0x560517eed678 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x560517eed648 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x560517eed630 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x560517eed610 <col:9, col:29> 'String' (CXXTemporary 0x560517eed610)
|             `-CallExpr 0x560517eed5a0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x560517eed588 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x560517eed508 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x560517ee9708 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x560517eed4a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x560517eed5d8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x560517eed4c8 <col:21> 'const char *' lvalue ParmVar 0x560517ee9960 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x560517eed5f0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x560517eed4e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x560517ee99d8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560517ee9cc0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x560517ee9bb0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x560517ee9c28 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560517ee9e18 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x560517ee9d88 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x560517ee9f60 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x560517ee9ed0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x560517eea200 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x560517eea018 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x560517eea098 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x560517eea110 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x560517eea360 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x560517eea2d0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x560517eed7b8 <col:37, line:441:5>
|   `-IfStmt 0x560517eed7a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x560517eed728 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x560517eed6f8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x560517eed6b8 <col:6> 'int' lvalue ParmVar 0x560517eea2d0 'level' 'int'
|     | `-ImplicitCastExpr 0x560517eed710 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x560517eed6d8 <col:15> 'ErrorHandler::Level' EnumConstant 0x560517ee63e0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x560517eed788 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x560517eed758 <col:8> 'int' lvalue ->_nerrors 0x560517eec018
|         `-CXXThisExpr 0x560517eed748 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x560517eea428 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x560517eed850 <col:26, line:448:5>
|   `-BinaryOperator 0x560517eed830 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x560517eed7e0 <col:2> 'int' lvalue ->_nerrors 0x560517eec018
|     | `-CXXThisExpr 0x560517eed7d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x560517eed810 <col:13> 'int' 0
|-CXXMethodDecl 0x560517eea5f0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x560517eea4e0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x560517eea558 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x560517eea7f8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x560517eea6b0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x560517eea728 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x560517eeaaa8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x560517eea8b8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x560517eea938 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x560517eea9b8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x560517eeab60 <col:59> 0 0
|-CXXMethodDecl 0x560517eeacf8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x560517eeabd8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x560517eeac58 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x560517eedec0 <col:70, line:534:5>
|   |-DeclStmt 0x560517eed9c0 <line:528:2, col:20>
|   | |-VarDecl 0x560517eed878 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x560517eed8e0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x560517eed918 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x560517eed980 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x560517eeda90 <line:529:2, col:23>
|   | `-VarDecl 0x560517eed9f0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x560517eeda78 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x560517eeda58 <col:18> 'const char *' lvalue ParmVar 0x560517eeabd8 'begin' 'const char *'
|   |-DoStmt 0x560517eede58 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x560517eedd88 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x560517eedd70 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x560517eedd50 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x560517eedaa8 <col:6> 'const char *' lvalue Var 0x560517eed9f0 'x' 'const char *'
|   | |     `-CallExpr 0x560517eedca0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x560517eedc88 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x560517eedc40 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x560517eec4f0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x560517eedd08 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x560517eedcf0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x560517eedb60 <col:20, col:27> 'String' (CXXTemporary 0x560517eedb60)
|   | |       |     `-CXXTemporaryObjectExpr 0x560517eedb28 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x560517eedd20 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x560517eedb80 <col:30> 'const char *' lvalue Var 0x560517eed9f0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x560517eedd38 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x560517eedba0 <col:33> 'const char *' lvalue ParmVar 0x560517eeac58 'end' 'const char *'
|   | |       |-UnaryOperator 0x560517eedbe0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x560517eedbc0 <col:39> 'String' lvalue Var 0x560517eed878 'name' 'String'
|   | |       |-UnaryOperator 0x560517eedc18 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x560517eedbf8 <col:46> 'String' lvalue Var 0x560517eed918 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x560517eedc30 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x560517eede40 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x560517eede28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x560517eede08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x560517eeddd8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|   |         `-ImplicitCastExpr 0x560517eeddc0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x560517eedda0 <col:11> 'String' lvalue Var 0x560517eed878 'name' 'String'
|   `-ReturnStmt 0x560517eedeb0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x560517eede98 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x560517eede78 <col:9> 'const char *' lvalue Var 0x560517eed9f0 'x' 'const char *'
|-CXXMethodDecl 0x560517eeae48 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x560517eeadb8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x560517eee4c8 <col:55, line:550:5>
|   `-IfStmt 0x560517eee4a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x560517eee100 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x560517eee0e8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560517eee0d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560517eee0b0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560517eee080 <col:6> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|     | |       `-DeclRefExpr 0x560517eedf20 <col:6> 'const String' lvalue ParmVar 0x560517eeadb8 'x' 'const String &'
|     | `-BinaryOperator 0x560517eee060 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x560517eee030 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x560517eedfe0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x560517eedfc8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x560517eedf80 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x560517bfdd20 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x560517eedf40 <col:11> 'const String' lvalue ParmVar 0x560517eeadb8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x560517eedf60 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x560517eee048 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x560517eee018 <col:19> 'char' 123
|     |-ReturnStmt 0x560517eee170 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x560517eee140 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x560517eee120 <col:13> 'const String' lvalue ParmVar 0x560517eeadb8 'x' 'const String &'
|     `-IfStmt 0x560517eee478 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x560517eee208 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560517eee1f0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560517eee1d0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560517eee1a0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |       `-DeclRefExpr 0x560517eee180 <col:11> 'const String' lvalue ParmVar 0x560517eeadb8 'x' 'const String &'
|       |-ReturnStmt 0x560517eee390 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x560517eee378 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x560517eee348 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x560517eee330 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x560517eee310 <col:13, col:29> 'String' (CXXTemporary 0x560517eee310)
|       |         `-CallExpr 0x560517eee2c0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x560517eee2a8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x560517eee220 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x560517eea5f0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x560517eee2f0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x560517eee240 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x560517eee260 <col:28> 'const String' lvalue ParmVar 0x560517eeadb8 'x' 'const String &'
|       `-ReturnStmt 0x560517eee468 <line:549:6, col:20>
|         `-ExprWithCleanups 0x560517eee450 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x560517eee420 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x560517eee408 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x560517eee3e8 <col:13, col:20> 'String' (CXXTemporary 0x560517eee3e8)
|                 `-CXXTemporaryObjectExpr 0x560517eee3b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x560517eeb010 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x560517eeaf00 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x560517eeaf78 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560517eec798 <col:71> 'bool' false
|-CXXRecordDecl 0x560517eeb0c0 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x560517eeb3b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x560517eeb350 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x560517eeb2f0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x560517eeb2b0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x560517be0d80 'String'
|       | `-CXXRecord 0x560517be0cf0 'String'
|       |-BuiltinType 0x5605178b43b0 'int'
|       `-DecayedType 0x560517d96c80 '__va_list_tag *' sugar
|         |-TypedefType 0x560517d96c50 'va_list' sugar
|         | |-Typedef 0x560517ad1e30 'va_list'
|         | `-TypedefType 0x560517ad1de0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x560517a09a08 '__gnuc_va_list'
|         |   `-TypedefType 0x560517a09970 '__builtin_va_list' sugar
|         |     |-Typedef 0x5605178f5c18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5605178f5bc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5605178b5100 '__va_list_tag'
|         |         `-CXXRecord 0x5605178b5068 '__va_list_tag'
|         `-PointerType 0x560517ad76d0 '__va_list_tag *'
|           `-RecordType 0x5605178b5100 '__va_list_tag'
|             `-CXXRecord 0x5605178b5068 '__va_list_tag'
|-EnumDecl 0x560517eeb410 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x560517eeb510 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eeba70 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb4f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x560517eeb4d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x560517eeb5a0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eeba88 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb580 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x560517eeb560 <col:21> 'int' 2
| |-EnumConstantDecl 0x560517eeb630 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebaa0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb610 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x560517eeb5f0 <col:22> 'int' 4
| |-EnumConstantDecl 0x560517eeb6c0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebab8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb6a0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x560517eeb680 <col:17> 'int' 8
| |-EnumConstantDecl 0x560517eeb750 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebad0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb730 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x560517eeb710 <col:22> 'int' 16
| |-EnumConstantDecl 0x560517eeb7e0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebae8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb7c0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x560517eeb7a0 <col:19> 'int' 32
| |-EnumConstantDecl 0x560517eeb870 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebb00 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb850 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x560517eeb830 <col:17> 'int' 64
| |-EnumConstantDecl 0x560517eeb900 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebb18 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb8e0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x560517eeb8c0 <col:14> 'int' 128
| |-EnumConstantDecl 0x560517eeb990 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560517eebb30 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517eeb970 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x560517eeb950 <col:16> 'int' 256
| `-EnumConstantDecl 0x560517eeba20 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x560517eebb48 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517eeba00 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x560517eeb9e0 <col:12> 'int' 1024
|-CXXMethodDecl 0x560517eebda8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x560517eebb70 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x560517eebc60 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x560517eebf30 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x560517eebe68 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x560517eebfd8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x560517eec018 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x560517eec078 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x560517eec0f0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x560517eec4f0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x560517eec168 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x560517eec1e8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x560517eec268 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x560517eec2e0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x560517eec358 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x560517eec3d0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x560517eec618 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x560517eec618
| `-ParmVarDecl 0x560517eec728 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x560517eee828 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x560517eee828
  `-ParmVarDecl 0x560517eee938 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517d95cc8 prev 0x560517ddafc8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517d95dc0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x560517d95e50 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x560517d95f88 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x560517d95e88 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560517d973b0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560517d97390 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x560517d96f28 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560517d97440 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560517d97400 <col:17> 'ErrorHandler *' lvalue ParmVar 0x560517d95e88 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560517d96f90 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560517d974c0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560517d97480 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x560517d96ff0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560517d97500 <col:54> 'bool' false
| `-CompoundStmt 0x560517d97608 <col:61, line:38:5>
|   `-BinaryOperator 0x560517d975e8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x560517d97580 <col:9> 'const Element *' lvalue ->_context 0x560517d96ec8
|     | `-CXXThisExpr 0x560517d97570 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x560517d975d0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x560517d975b0 <col:20> 'int' 0
|-CXXConstructorDecl 0x560517d96198 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560517d96048 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x560517d960c0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560517d973e8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560517d973c8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x560517d96ec8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x560517d97660 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x560517d97620 <col:20> 'const Element *' lvalue ParmVar 0x560517d96048 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x560517d96f28 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560517d976e0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560517d976a0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x560517d960c0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560517d96f90 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560517d97760 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560517d97720 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x560517d96ff0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560517d977a0 <col:73> 'bool' false
| `-CompoundStmt 0x560517d97818 <col:80, line:46:5>
|-CXXMethodDecl 0x560517d962c8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x560517d97890 <col:36, line:51:5>
|   `-ReturnStmt 0x560517d97880 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x560517d97868 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x560517d97838 <col:16> 'const Element *const' lvalue ->_context 0x560517d96ec8
|         `-CXXThisExpr 0x560517d97828 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x560517d963b8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x560517d97910 <col:32, line:57:5>
|   `-ReturnStmt 0x560517d97900 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x560517d978e8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x560517d978b8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x560517d96f28
|         `-CXXThisExpr 0x560517d978a8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x560517d96478 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x560517d96600 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x560517d96530 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x560517d96750 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x560517d966c0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560517d968a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x560517d96810 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560517d96aa8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x560517d96958 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x560517d969d0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x560517d96dd8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x560517d96b68 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x560517d96be8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x560517d96cb0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x560517d96e90 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x560517d96ec8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x560517d96f28 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x560517d96f90 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x560517d96ff0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x560517d97040 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x560517d97040
| `-ParmVarDecl 0x560517d97158 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x560517d971f8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x560517d971f8
| `-ParmVarDecl 0x560517d97308 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x560517ef7258 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560517ea3620 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x560517ea37f8 prev 0x560517ea3620 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x560517ea3888 <col:46, col:52> col:46 public
|-TypedefDecl 0x560517ea38b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517ea5480 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x560517ea5430 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x560517ea3d60 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x560517ea3c60 'type'
|     `-TemplateSpecializationType 0x560517ea3bf0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x560517ea3ad0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x560517ea3ab0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x560517ea3a90 <col:24> 'unsigned long' 4
|       `-RecordType 0x560517ea3bd0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x560517ea3af0 'char_array'
|-TypedefDecl 0x560517ea5538 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x560517ea5500 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x560517ea54e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x560517ea5480 'type'
|     `-ElaboratedType 0x560517ea5430 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x560517ea3d60 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x560517ea3c60 'type'
|         `-TemplateSpecializationType 0x560517ea3bf0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x560517ea3ad0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x560517ea3ab0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x560517ea3a90 <col:24> 'unsigned long' 4
|           `-RecordType 0x560517ea3bd0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x560517ea3af0 'char_array'
|-CXXMethodDecl 0x560517ea56b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x560517ea55c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x560517ea57a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x560517ea5888 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x560517ea5b58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x560517ea5a60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x560517ea5d98 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560517ea5c10 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560517ea5c88 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea5f68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560517ea5e58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560517ea5ed0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea60c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x560517ea6198 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x560517ea63e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560517ea6258 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x560517ea62d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea6648 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x560517ea64b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x560517ea6530 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea6808 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x560517ea6718 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea69c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x560517ea68d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea6a80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560517ea6b30 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x560517ea6d68 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560517ea6be0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560517ea6c58 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560517ea7008 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x560517ea6f10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x560517ea70d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x560517ea7120 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x560517ead590 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560517ea2028 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x560517ea2238 prev 0x560517ea2028 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x560517ea3590 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x560517ea3540 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x560517ea3520 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x560517ea33d0 'type'
|     `-SubstTemplateTypeParmType 0x560517ea31f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x560517b79bc0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517b79b68 'T'
|       `-RecordType 0x560517ea2d40 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x560517ea2c58 'sized_array_memory'
|-FieldDecl 0x560517ead5e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x560517ead630 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x560517ead668 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|   |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x560517bb1858 'T'
|   `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517ead6f8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x560517ead6c0 'int &'
|   `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|     |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560517bb1858 'T'
|     `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517ead7b8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x560517ead780 'const int &'
|   `-QualType 0x560517ea22d1 'const int' const
|     `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517ead848 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x560517ead810 'int *'
|   `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|     |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560517bb1858 'T'
|     `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517ead8d8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x560517ead8a0 'const int *'
|   `-QualType 0x560517ea22d1 'const int' const
|     `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517eae4c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x560517eae470 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x560517eae450 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x560517eae3e0 'type'
|     `-SubstTemplateTypeParmType 0x560517eae1a0 'int' sugar
|       |-TemplateTypeParmType 0x560517b849c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517b84970 'T'
|       `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517eae528 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x560517ead780 'const int &'
|   `-QualType 0x560517ea22d1 'const int' const
|     `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517eae580 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517eae5e8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x560517ead810 'int *'
|   `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|     |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560517bb1858 'T'
|     `-BuiltinType 0x5605178b43b0 'int'
|-TypedefDecl 0x560517eae650 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x560517ead8a0 'const int *'
|   `-QualType 0x560517ea22d1 'const int' const
|     `-SubstTemplateTypeParmType 0x560517ea22d0 'int' sugar
|       |-TemplateTypeParmType 0x560517bb18b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560517bb1858 'T'
|       `-BuiltinType 0x5605178b43b0 'int'
|-EnumDecl 0x560517eae6a8 <line:134:5> col:5
| `-EnumConstantDecl 0x560517eae7a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x560517eae780 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x560517bb2f38 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x560517bb2f10 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560517bb2ef0 <col:40> 'int' 1
|-CXXConstructorDecl 0x560517eae828 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x560517eaea78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560517eae8e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560517eae980 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x560517eaed38 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x560517eaec20 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x560517eaeff8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x560517eaeee0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x560517eaf340 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x560517eaf220 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x560517eaf650 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x560517eaf530 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x560517eaf940 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560517eaf788 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560517eaf800 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560517eafa68 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x560517eafb48 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517eafba0 <col:30> Inherited
|-CXXMethodDecl 0x560517eafbe8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x560517eafc98 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517eafcf0 <col:30> Inherited
|-CXXMethodDecl 0x560517eafdb8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560517eafe68 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517eafec0 <col:30> Inherited
|-CXXMethodDecl 0x560517eaff08 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560517eaffb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517eb0010 <col:30> Inherited
|-CXXMethodDecl 0x560517eb0058 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560517eb0108 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517eb0160 <col:30> Inherited
|-CXXMethodDecl 0x560517eb01a8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560517eb0258 <col:20> Inherited
| `-OptimizeNoneAttr 0x560517eb02b0 <col:30> Inherited
|-CXXMethodDecl 0x560517eb02d8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560517eb0388 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560517eb0438 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x560517eb05f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560517eb04e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560517eb0560 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560517eb0748 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x560517eb06b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517eb08f8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x560517eb0800 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560517eb09b0 <col:20>
| `-OptimizeNoneAttr 0x560517eb0a08 <col:30>
|-CXXMethodDecl 0x560517eb0b28 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x560517eb0a30 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560517eb0be0 <col:20>
| `-OptimizeNoneAttr 0x560517eb0c38 <col:30>
|-CXXMethodDecl 0x560517eb0cf0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x560517eb0c60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517eb0e38 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560517eb0da8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517eb0f68 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x560517eb1098 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x560517eb1168 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x560517eb1238 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x560517eb1378 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x560517eb12e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517eb14c0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560517eb1430 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560517eb1608 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x560517eb1578 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560517eb16c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560517eb17c0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x560517eb1730 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560517eb1878 <col:60> Inherited "" ""
|-CXXMethodDecl 0x560517eb1938 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x560517eb1a38 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x560517eb1bb8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x560517eb1af8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x560517eb2378 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560517eb1c70 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x560517eb22d8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x560517eb21d8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x560517eb2458 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560517eb25a8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x560517eb2518 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560517eb2660 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x560517eb28a8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560517eb2720 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x560517eb2798 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560517eb2a68 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x560517eb2978 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x560517eb2cb8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x560517eb2b30 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x560517eb2ba8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x560517eb2d78 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560517eb2fd8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x560517eb2ee0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x560517eb30a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517ea0198 prev 0x560517d9c828 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560517ea0290 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x560517ea0380 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x560517ec4e60 <col:16, line:828:9>
|-CXXDestructorDecl 0x560517ea0470 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x560517ec4e70 <col:25, line:830:9>
|-CXXMethodDecl 0x560517ea0570 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x560517ea0620 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x560517ea06c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x560517ea06c8
| `-ParmVarDecl 0x560517ea07d8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x560517ea0f98 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x560517ea0f98
  `-ParmVarDecl 0x560517ea10a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517d9c638 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x560517d9c798 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x560517d9c828 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x560517d9c8e0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x560517d9c9e8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x560517d9c918 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560517eb4668 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560517eb4648 <col:31> 'int' 0
|-CXXConstructorDecl 0x560517e811a8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x560517e81020 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x560517e81098 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560517eb46a0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560517eb4680 <col:59> 'int' 0
|-CXXConstructorDecl 0x560517e81380 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e81270 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x560517e812e8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560517eb46d8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560517eb46b8 <col:55> 'int' 0
|-CXXConstructorDecl 0x560517e81738 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560517e81520 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x560517e81598 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x560517e81610 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560517eb4710 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560517eb46f0 <col:31> 'int' 0
|-CXXConstructorDecl 0x560517e818f8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x560517e81838 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x560517e819f0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x560517e81bd8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x560517e81ae0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x560517e81cc8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x560517eb4ac0 <col:24, line:291:5>
|   `-ReturnStmt 0x560517eb4ab0 <line:290:9, col:79>
|     `-BinaryOperator 0x560517eb4a90 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x560517eb4968 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x560517eb48c0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x560517eb48a0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x560517eb4798 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x560517eb4780 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x560517eb4768 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x560517eb4738 <col:18> 'Vector<String> *const' lvalue ->_conf 0x560517ea1fc0
|       | |   |       `-CXXThisExpr 0x560517eb4728 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x560517eb4888 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x560517eb4870 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x560517eb4838 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x560517eb4808 <col:28, col:35> '<bound member function type>' ->size 0x560517e619d8
|       | |           `-ImplicitCastExpr 0x560517eb4858 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x560517eb47f0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x560517eb47c0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x560517ea1fc0
|       | |                 `-CXXThisExpr 0x560517eb47b0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x560517eb4950 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x560517eb4938 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x560517eb4920 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x560517eb48f0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x560517eb31f0
|       |         `-CXXThisExpr 0x560517eb48e0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x560517eb4a70 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x560517eb4a58 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x560517eb4a40 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x560517eb4a00 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x560517eb49e8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x560517eb4998 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x560517eb32a0
|         |     |   `-CXXThisExpr 0x560517eb4988 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x560517eb49c8 <col:73> 'int' 0
|         `-IntegerLiteral 0x560517eb4a20 <col:79> 'int' 0
|-CXXMethodDecl 0x560517e81d88 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x560517eb4c98 <col:32, line:296:5>
|   `-ReturnStmt 0x560517eb4c88 <line:295:9, col:49>
|     `-BinaryOperator 0x560517eb4c68 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x560517eb4b48 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x560517eb4b30 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x560517eb4b18 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x560517eb4ae8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x560517eb31f0
|       |       `-CXXThisExpr 0x560517eb4ad8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x560517eb4c48 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x560517eb4c30 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x560517eb4c18 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x560517eb4bd8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x560517eb4bc0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x560517eb4b70 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x560517eb32a0
|         |     |   `-CXXThisExpr 0x560517eb4b60 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x560517eb4ba0 <col:43> 'int' 0
|         `-IntegerLiteral 0x560517eb4bf8 <col:49> 'int' 0
|-CXXMethodDecl 0x560517e81e78 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x560517eb4ea8 <col:19, line:306:5>
|   |-IfStmt 0x560517eb4dc8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x560517eb4d08 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x560517eb4cf0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x560517eb4cc0 <col:13> 'Vector<String> *' lvalue ->_conf 0x560517ea1fc0
|   | |     `-CXXThisExpr 0x560517eb4cb0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x560517eb4da8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x560517eb4d78 <col:13, col:20> '<bound member function type>' ->clear 0x560517e643d8
|   |     `-ImplicitCastExpr 0x560517eb4d60 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x560517eb4d30 <col:13> 'Vector<String> *' lvalue ->_conf 0x560517ea1fc0
|   |         `-CXXThisExpr 0x560517eb4d20 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x560517eb4e50 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x560517eb4e20 <col:9, col:16> '<bound member function type>' .clear 0x560517eb2d78
|   |   `-MemberExpr 0x560517eb4df0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x560517eb3190
|   |     `-CXXThisExpr 0x560517eb4de0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x560517eb4e98 <line:305:9, col:17>
|     `-UnaryOperator 0x560517eb4e80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517eb4e70 <col:17> 'Args *' this
|-CXXMethodDecl 0x560517e820f8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x560517e82000 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x560517e82278 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x560517e821b0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x560517e825f8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x560517e82320 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x560517e82558 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x560517e823c8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x560517e82440 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x560517eb51c8 <col:67, line:327:5>
|     |-WhileStmt 0x560517eb5178 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x560517eb4f90 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x560517eb4f10 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x560517dd3498 0x560517c1ca78 0x560517c1c750 0x560517c0df30 0x560517c0dbe0 0x560517c0d4d0 0x560517bdfe40 0x560517b6c300
|     | | |-DeclRefExpr 0x560517eb4ed0 <col:16> 'Iter' lvalue ParmVar 0x560517e823c8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x560517eb4ef0 <col:25> 'Iter' lvalue ParmVar 0x560517e82440 'end' 'Iter'
|     | `-CompoundStmt 0x560517eb5158 <col:30, line:325:9>
|     |   |-CallExpr 0x560517eb50f8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x560517eb4fd8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x560517eb50c8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x560517eb5058 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|     |   |   `-DeclRefExpr 0x560517eb5038 <col:24> 'Iter' lvalue ParmVar 0x560517e823c8 'begin' 'Iter'
|     |   `-UnaryOperator 0x560517eb5140 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x560517eb5120 <col:15> 'Iter' lvalue ParmVar 0x560517e823c8 'begin' 'Iter'
|     `-ReturnStmt 0x560517eb51b8 <line:326:9, col:17>
|       `-UnaryOperator 0x560517eb51a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb5190 <col:17> 'Args *' this
|-CXXMethodDecl 0x560517e82700 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x560517e82670 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x560517e82848 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x560517e827b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x560517e82910 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x560517eb52a8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x560517eb5248 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x560517eb51f8 <col:9> '<bound member function type>' ->reset_from 0x560517eb3618
|   | | `-CXXThisExpr 0x560517eb51e8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x560517eb5228 <col:20> 'int' 0
|   `-ReturnStmt 0x560517eb5298 <line:352:9, col:17>
|     `-UnaryOperator 0x560517eb5280 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517eb5270 <col:17> 'Args *' this
|-VarDecl 0x560517e829c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x560517e82a30 <col:38> 'int' 1
|-VarDecl 0x560517e82ac0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x560517e82b28 <col:39> 'int' 2
|-VarDecl 0x560517e82bb8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x560517e82c20 <col:39> 'int' 4
|-VarDecl 0x560517e82cb0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x560517e82d18 <col:39> 'int' 8
|-FunctionTemplateDecl 0x560517e83098 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x560517e82d90 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e82ff8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560517e82e40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e82ee8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x560517eb5400 <col:43, line:371:5>
|     `-ReturnStmt 0x560517eb53f0 <line:370:9, col:34>
|       `-CallExpr 0x560517eb53b8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb52d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb5358 <col:21> 'const char *' lvalue ParmVar 0x560517e82e40 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb5378 <col:30> 'int' 0
|         `-DeclRefExpr 0x560517eb5398 <col:33> 'T' lvalue ParmVar 0x560517e82ee8 'x' 'T &'
|-FunctionTemplateDecl 0x560517e833c8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x560517e83100 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e83328 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560517e831b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e83258 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x560517eb5550 <col:45, line:375:5>
|     `-ReturnStmt 0x560517eb5540 <line:374:9, col:42>
|       `-CallExpr 0x560517eb5508 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb5428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb54a8 <col:21> 'const char *' lvalue ParmVar 0x560517e831b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb54c8 <col:30> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x560517eb54e8 <col:41> 'T' lvalue ParmVar 0x560517e83258 'x' 'T &'
|-FunctionTemplateDecl 0x560517e836f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x560517e83430 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e83658 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560517e834e0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e83588 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x560517eb6fd8 <col:45, line:379:5>
|     `-ReturnStmt 0x560517eb6fc8 <line:378:9, col:43>
|       `-CallExpr 0x560517eb6f90 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb6eb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb6f30 <col:21> 'const char *' lvalue ParmVar 0x560517e834e0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb6f50 <col:30> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int'
|         `-DeclRefExpr 0x560517eb6f70 <col:42> 'T' lvalue ParmVar 0x560517e83588 'x' 'T &'
|-FunctionTemplateDecl 0x560517e83a28 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x560517e83760 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x560517e83988 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x560517e83810 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x560517e838b8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x560517eb71d8 <col:46, line:383:5>
| |   `-ReturnStmt 0x560517eb71c8 <line:382:9, col:55>
| |     `-CallExpr 0x560517eb7190 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x560517eb7000 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x560517eb7080 <col:21> 'const char *' lvalue ParmVar 0x560517e83810 'keyword' 'const char *'
| |       |-BinaryOperator 0x560517eb7150 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x560517eb7100 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x560517eb70e0 <col:30> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x560517eb7138 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x560517eb7118 <col:42> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x560517eb7170 <col:54> 'T' lvalue ParmVar 0x560517e838b8 'x' 'T &'
| `-CXXMethodDecl 0x560517ef76c8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, String &)'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x560517ef74e0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x560517ef75b8 <col:40, col:43> col:43 x 'String &'
|-FunctionTemplateDecl 0x560517e83e28 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x560517e83a90 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e83d88 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x560517e83b40 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e83bc0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560517e83c68 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x560517eb7318 <col:54, line:388:5>
|     |-CallExpr 0x560517eb72a0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb71f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560517eb7230 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560517eb7240 <col:30> 'const char *' lvalue ParmVar 0x560517e83b40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560517eb7260 <col:39> 'int' lvalue ParmVar 0x560517e83bc0 'flags' 'int'
|     | `-DeclRefExpr 0x560517eb7280 <col:46> 'T' lvalue ParmVar 0x560517e83c68 'x' 'T &'
|     `-ReturnStmt 0x560517eb7308 <line:387:9, col:17>
|       `-UnaryOperator 0x560517eb72f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb72e0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e842d8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x560517e83e98 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560517e83f18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560517e84238 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x560517e83fd8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e84078 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x560517e84118 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x560517eb7488 <col:74, line:403:5>
|     `-ReturnStmt 0x560517eb7478 <line:402:9, col:56>
|       `-CallExpr 0x560517eb7438 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb7348 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb73b8 <col:28> 'const char *' lvalue ParmVar 0x560517e83fd8 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb73d8 <col:37> 'int' 0
|         |-DeclRefExpr 0x560517eb73f8 <col:40> 'T' lvalue ParmVar 0x560517e84078 'x' 'T &'
|         `-DeclRefExpr 0x560517eb7418 <col:43> 'const V' lvalue ParmVar 0x560517e84118 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560517e84748 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x560517e84348 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560517e843c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560517e846a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x560517e84488 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e84528 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x560517e845c8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x560517eb75f0 <col:76, line:407:5>
|     `-ReturnStmt 0x560517eb75e0 <line:406:9, col:65>
|       `-CallExpr 0x560517eb75a0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb74b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb7520 <col:28> 'const char *' lvalue ParmVar 0x560517e84488 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb7540 <col:37> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int'
|         |-DeclRefExpr 0x560517eb7560 <col:49> 'T' lvalue ParmVar 0x560517e84528 'x' 'T &'
|         `-DeclRefExpr 0x560517eb7580 <col:52> 'const V' lvalue ParmVar 0x560517e845c8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560517e84c98 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x560517e847b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560517e84838 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560517e84bf8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x560517e848f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e84978 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x560517e84a18 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x560517e84ab8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x560517eb7758 <col:85, line:412:5>
|     |-CallExpr 0x560517eb76d8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb7608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x560517eb7648 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x560517eb7658 <col:37> 'const char *' lvalue ParmVar 0x560517e848f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560517eb7678 <col:46> 'int' lvalue ParmVar 0x560517e84978 'flags' 'int'
|     | |-DeclRefExpr 0x560517eb7698 <col:53> 'T' lvalue ParmVar 0x560517e84a18 'x' 'T &'
|     | `-DeclRefExpr 0x560517eb76b8 <col:56> 'const V' lvalue ParmVar 0x560517e84ab8 'default_value' 'const V &'
|     `-ReturnStmt 0x560517eb7748 <line:411:9, col:17>
|       `-UnaryOperator 0x560517eb7730 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb7720 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e85128 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x560517e84d10 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e84d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e85088 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e84e48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e84ec0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x560517e84f68 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x560517eb78d8 <col:53, line:425:5>
|     `-ReturnStmt 0x560517eb78c8 <line:424:9, col:42>
|       `-CallExpr 0x560517eb7888 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb7788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb7808 <col:21> 'const char *' lvalue ParmVar 0x560517e84e48 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb7828 <col:30> 'int' 0
|         |-DeclRefExpr 0x560517eb7848 <col:33> 'P' lvalue ParmVar 0x560517e84ec0 'parser' 'P'
|         `-DeclRefExpr 0x560517eb7868 <col:41> 'T' lvalue ParmVar 0x560517e84f68 'x' 'T &'
|-FunctionTemplateDecl 0x560517e85578 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x560517e85198 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e85218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e854d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e852d8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e85350 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560517e853f8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x560517eb7a50 <col:55, line:429:5>
|     `-ReturnStmt 0x560517eb7a40 <line:428:9, col:50>
|       `-CallExpr 0x560517eb7a00 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb7900 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb7980 <col:21> 'const char *' lvalue ParmVar 0x560517e852d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb79a0 <col:30> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x560517eb79c0 <col:41> 'P' lvalue ParmVar 0x560517e85350 'parser' 'P'
|         `-DeclRefExpr 0x560517eb79e0 <col:49> 'T' lvalue ParmVar 0x560517e853f8 'x' 'T &'
|-FunctionTemplateDecl 0x560517e859c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x560517e855e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e85668 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x560517e85928 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x560517e85728 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x560517e857a0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x560517e85848 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x560517eb7bc8 <col:55, line:433:5>
| |   `-ReturnStmt 0x560517eb7bb8 <line:432:9, col:51>
| |     `-CallExpr 0x560517eb7b78 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x560517eb7a78 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x560517eb7af8 <col:21> 'const char *' lvalue ParmVar 0x560517e85728 'keyword' 'const char *'
| |       |-DeclRefExpr 0x560517eb7b18 <col:30> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int'
| |       |-DeclRefExpr 0x560517eb7b38 <col:42> 'P' lvalue ParmVar 0x560517e857a0 'parser' 'P'
| |       `-DeclRefExpr 0x560517eb7b58 <col:50> 'T' lvalue ParmVar 0x560517e85848 'x' 'T &'
| `-CXXMethodDecl 0x560517ef8278 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, KeywordArg, String &)'
|   |-TemplateArgument type 'KeywordArg'
|   |-TemplateArgument type 'String'
|   |-ParmVarDecl 0x560517ef7fe0 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x560517ef8088 <col:39, col:41> col:41 parser 'KeywordArg':'KeywordArg'
|   `-ParmVarDecl 0x560517ef8158 <col:49, col:52> col:52 x 'String &'
|-FunctionTemplateDecl 0x560517e85e18 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x560517e85a38 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e85ab8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e85d78 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e85b78 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e85bf0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x560517e85c98 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x560517eb7df0 <col:56, line:437:5>
|     `-ReturnStmt 0x560517eb7de0 <line:436:9, col:63>
|       `-CallExpr 0x560517eb7da0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb7bf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb7c70 <col:21> 'const char *' lvalue ParmVar 0x560517e85b78 'keyword' 'const char *'
|         |-BinaryOperator 0x560517eb7d40 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x560517eb7cf0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560517eb7cd0 <col:30> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560517eb7d28 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560517eb7d08 <col:42> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x560517eb7d60 <col:54> 'P' lvalue ParmVar 0x560517e85bf0 'parser' 'P'
|         `-DeclRefExpr 0x560517eb7d80 <col:62> 'T' lvalue ParmVar 0x560517e85c98 'x' 'T &'
|-FunctionTemplateDecl 0x560517e86348 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x560517e85e88 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e85f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e862a8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560517e85fc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e86048 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560517e860c0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x560517e86168 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x560517eb7f58 <col:64, line:442:5>
|     |-CallExpr 0x560517eb7ed8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb7e08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560517eb7e48 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560517eb7e58 <col:30> 'const char *' lvalue ParmVar 0x560517e85fc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560517eb7e78 <col:39> 'int' lvalue ParmVar 0x560517e86048 'flags' 'int'
|     | |-DeclRefExpr 0x560517eb7e98 <col:46> 'P' lvalue ParmVar 0x560517e860c0 'parser' 'P'
|     | `-DeclRefExpr 0x560517eb7eb8 <col:54> 'T' lvalue ParmVar 0x560517e86168 'x' 'T &'
|     `-ReturnStmt 0x560517eb7f48 <line:441:9, col:17>
|       `-UnaryOperator 0x560517eb7f30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb7f20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e86948 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x560517e863c0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e86438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560517e864b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560517e868a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560517e86580 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e865f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560517e86698 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x560517e86768 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x560517eb80f0 <col:84, line:458:5>
|     `-ReturnStmt 0x560517eb80e0 <line:457:9, col:64>
|       `-CallExpr 0x560517eb8098 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb7f88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb7ff8 <col:28> 'const char *' lvalue ParmVar 0x560517e86580 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb8018 <col:37> 'int' 0
|         |-DeclRefExpr 0x560517eb8038 <col:40> 'P' lvalue ParmVar 0x560517e865f8 'parser' 'P'
|         |-DeclRefExpr 0x560517eb8058 <col:48> 'T' lvalue ParmVar 0x560517e86698 'x' 'T &'
|         `-DeclRefExpr 0x560517eb8078 <col:51> 'const V' lvalue ParmVar 0x560517e86768 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560517e86ec8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x560517e869c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e86a38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560517e86ab8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560517e86e28 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560517e86b80 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e86bf8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560517e86c98 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x560517e86d38 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x560517eb8280 <col:86, line:462:5>
|     `-ReturnStmt 0x560517eb8270 <line:461:9, col:73>
|       `-CallExpr 0x560517eb8228 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8118 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb8188 <col:28> 'const char *' lvalue ParmVar 0x560517e86b80 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb81a8 <col:37> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int'
|         |-DeclRefExpr 0x560517eb81c8 <col:49> 'P' lvalue ParmVar 0x560517e86bf8 'parser' 'P'
|         |-DeclRefExpr 0x560517eb81e8 <col:57> 'T' lvalue ParmVar 0x560517e86c98 'x' 'T &'
|         `-DeclRefExpr 0x560517eb8208 <col:60> 'const V' lvalue ParmVar 0x560517e86d38 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560517e87528 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x560517e86f40 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e86fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560517e87038 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560517e87488 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x560517e87100 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e87180 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x560517e871f8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x560517e87298 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x560517e87338 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x560517eb8410 <col:95, line:467:5>
|     |-CallExpr 0x560517eb8388 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb8298 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x560517eb82d8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x560517eb82e8 <col:37> 'const char *' lvalue ParmVar 0x560517e87100 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560517eb8308 <col:46> 'int' lvalue ParmVar 0x560517e87180 'flags' 'int'
|     | |-DeclRefExpr 0x560517eb8328 <col:53> 'P' lvalue ParmVar 0x560517e871f8 'parser' 'P'
|     | |-DeclRefExpr 0x560517eb8348 <col:61> 'T' lvalue ParmVar 0x560517e87298 'x' 'T &'
|     | `-DeclRefExpr 0x560517eb8368 <col:64> 'const V' lvalue ParmVar 0x560517e87338 'default_value' 'const V &'
|     `-ReturnStmt 0x560517eb8400 <line:466:9, col:17>
|       `-UnaryOperator 0x560517eb83e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb83d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e87b08 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x560517e875a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e87628 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560517e876a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560517e87a68 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560517e87770 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e877e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x560517e87888 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560517e87928 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x560517eb85b8 <col:63, line:481:5>
|     `-ReturnStmt 0x560517eb85a8 <line:480:9, col:47>
|       `-CallExpr 0x560517eb8560 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8440 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb84c0 <col:21> 'const char *' lvalue ParmVar 0x560517e87770 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb84e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x560517eb8500 <col:33> 'P' lvalue ParmVar 0x560517e877e8 'parser' 'P'
|         |-DeclRefExpr 0x560517eb8520 <col:41> 'T1' lvalue ParmVar 0x560517e87888 'x1' 'T1 &'
|         `-DeclRefExpr 0x560517eb8540 <col:45> 'T2' lvalue ParmVar 0x560517e87928 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560517e88088 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x560517e87b80 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e87bf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560517e87c78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560517e87fe8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560517e87d40 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e87db8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560517e87e58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560517e87ef8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x560517eb8758 <col:65, line:485:5>
|     `-ReturnStmt 0x560517eb8748 <line:484:9, col:55>
|       `-CallExpr 0x560517eb8700 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb85e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb8660 <col:21> 'const char *' lvalue ParmVar 0x560517e87d40 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb8680 <col:30> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x560517eb86a0 <col:41> 'P' lvalue ParmVar 0x560517e87db8 'parser' 'P'
|         |-DeclRefExpr 0x560517eb86c0 <col:49> 'T1' lvalue ParmVar 0x560517e87e58 'x1' 'T1 &'
|         `-DeclRefExpr 0x560517eb86e0 <col:53> 'T2' lvalue ParmVar 0x560517e87ef8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560517e88608 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x560517e88100 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e88178 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560517e881f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560517e88568 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560517e882c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e88338 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560517e883d8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560517e88478 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x560517eb88f8 <col:65, line:489:5>
|     `-ReturnStmt 0x560517eb88e8 <line:488:9, col:56>
|       `-CallExpr 0x560517eb88a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8780 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb8800 <col:21> 'const char *' lvalue ParmVar 0x560517e882c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb8820 <col:30> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int'
|         |-DeclRefExpr 0x560517eb8840 <col:42> 'P' lvalue ParmVar 0x560517e88338 'parser' 'P'
|         |-DeclRefExpr 0x560517eb8860 <col:50> 'T1' lvalue ParmVar 0x560517e883d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x560517eb8880 <col:54> 'T2' lvalue ParmVar 0x560517e88478 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560517e88b88 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x560517e88680 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e886f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560517e88778 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560517e88ae8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560517e88840 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e888b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x560517e88958 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560517e889f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x560517eb8b48 <col:66, line:493:5>
|     `-ReturnStmt 0x560517eb8b38 <line:492:9, col:68>
|       `-CallExpr 0x560517eb8af0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8920 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb89a0 <col:21> 'const char *' lvalue ParmVar 0x560517e88840 'keyword' 'const char *'
|         |-BinaryOperator 0x560517eb8a70 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x560517eb8a20 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560517eb8a00 <col:30> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560517eb8a58 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560517eb8a38 <col:42> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x560517eb8a90 <col:54> 'P' lvalue ParmVar 0x560517e888b8 'parser' 'P'
|         |-DeclRefExpr 0x560517eb8ab0 <col:62> 'T1' lvalue ParmVar 0x560517e88958 'x1' 'T1 &'
|         `-DeclRefExpr 0x560517eb8ad0 <col:66> 'T2' lvalue ParmVar 0x560517e889f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560517e8ead8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x560517e88c00 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e88c78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560517e88cf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560517e8ea38 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560517e88dc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e88e40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560517e88eb8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x560517e8e848 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560517e8e8e8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x560517eb8cd8 <col:74, line:498:5>
|     |-CallExpr 0x560517eb8c50 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb8b60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560517eb8ba0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560517eb8bb0 <col:30> 'const char *' lvalue ParmVar 0x560517e88dc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560517eb8bd0 <col:39> 'int' lvalue ParmVar 0x560517e88e40 'flags' 'int'
|     | |-DeclRefExpr 0x560517eb8bf0 <col:46> 'P' lvalue ParmVar 0x560517e88eb8 'parser' 'P'
|     | |-DeclRefExpr 0x560517eb8c10 <col:54> 'T1' lvalue ParmVar 0x560517e8e848 'x1' 'T1 &'
|     | `-DeclRefExpr 0x560517eb8c30 <col:58> 'T2' lvalue ParmVar 0x560517e8e8e8 'x2' 'T2 &'
|     `-ReturnStmt 0x560517eb8cc8 <line:497:9, col:17>
|       `-UnaryOperator 0x560517eb8cb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb8ca0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e8ee38 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x560517e8eb58 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e8ed98 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560517e8ec10 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e8ec88 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x560517eb8e20 <col:52, line:509:5>
|     `-ReturnStmt 0x560517eb8e10 <line:508:9, col:44>
|       `-CallExpr 0x560517eb8dd8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8d08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb8d78 <col:26> 'const char *' lvalue ParmVar 0x560517e8ec10 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb8d98 <col:35> 'int' 0
|         `-DeclRefExpr 0x560517eb8db8 <col:38> 'P' lvalue ParmVar 0x560517e8ec88 'parser' 'P'
|-FunctionTemplateDecl 0x560517e8f138 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x560517e8eea0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e8f098 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560517e8ef50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e8efc8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x560517eb8f60 <col:54, line:513:5>
|     `-ReturnStmt 0x560517eb8f50 <line:512:9, col:52>
|       `-CallExpr 0x560517eb8f18 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8e48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb8eb8 <col:26> 'const char *' lvalue ParmVar 0x560517e8ef50 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb8ed8 <col:35> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x560517eb8ef8 <col:46> 'P' lvalue ParmVar 0x560517e8efc8 'parser' 'P'
|-FunctionTemplateDecl 0x560517e8f438 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x560517e8f1a0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e8f398 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560517e8f250 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e8f2c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x560517eb90a0 <col:54, line:517:5>
|     `-ReturnStmt 0x560517eb9090 <line:516:9, col:53>
|       `-CallExpr 0x560517eb9058 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb8f88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb8ff8 <col:26> 'const char *' lvalue ParmVar 0x560517e8f250 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb9018 <col:35> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int'
|         `-DeclRefExpr 0x560517eb9038 <col:47> 'P' lvalue ParmVar 0x560517e8f2c8 'parser' 'P'
|-FunctionTemplateDecl 0x560517e8f738 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x560517e8f4a0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e8f698 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560517e8f550 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e8f5c8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x560517eb9290 <col:55, line:521:5>
|     `-ReturnStmt 0x560517eb9280 <line:520:9, col:65>
|       `-CallExpr 0x560517eb9248 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb90c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb9138 <col:26> 'const char *' lvalue ParmVar 0x560517e8f550 'keyword' 'const char *'
|         |-BinaryOperator 0x560517eb9208 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x560517eb91b8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560517eb9198 <col:35> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560517eb91f0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560517eb91d0 <col:47> 'const int' lvalue Var 0x560517e82ac0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x560517eb9228 <col:59> 'P' lvalue ParmVar 0x560517e8f5c8 'parser' 'P'
|-FunctionTemplateDecl 0x560517e8fb08 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x560517e8f7a0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e8fa68 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x560517e8f850 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e8f8d0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x560517e8f948 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x560517eb93d0 <col:63, line:526:5>
|     |-CallExpr 0x560517eb9358 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb92a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x560517eb92e8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x560517eb92f8 <col:35> 'const char *' lvalue ParmVar 0x560517e8f850 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560517eb9318 <col:44> 'int' lvalue ParmVar 0x560517e8f8d0 'flags' 'int'
|     | `-DeclRefExpr 0x560517eb9338 <col:51> 'P' lvalue ParmVar 0x560517e8f948 'parser' 'P'
|     `-ReturnStmt 0x560517eb93c0 <line:525:9, col:17>
|       `-UnaryOperator 0x560517eb93a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb9398 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e8ff58 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x560517e8fb78 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e8fbf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e8feb8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e8fcb8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e8fd30 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x560517e8fdd8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x560517eb9528 <col:58, line:541:5>
|     `-ReturnStmt 0x560517eb9518 <line:540:9, col:39>
|       `-CallExpr 0x560517eb94e0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb9400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb9480 <col:21> 'const char *' lvalue ParmVar 0x560517e8fcb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb94a0 <col:30> 'P' lvalue ParmVar 0x560517e8fd30 'parser' 'P'
|         `-DeclRefExpr 0x560517eb94c0 <col:38> 'T' lvalue ParmVar 0x560517e8fdd8 'x' 'T &'
|-FunctionTemplateDecl 0x560517e903a8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x560517e8ffc8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e90048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e90308 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e90108 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e90180 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560517e90228 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x560517eb9660 <col:60, line:545:5>
|     `-ReturnStmt 0x560517eb9650 <line:544:9, col:41>
|       `-CallExpr 0x560517eb9618 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb9550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb95b8 <col:23> 'const char *' lvalue ParmVar 0x560517e90108 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb95d8 <col:32> 'P' lvalue ParmVar 0x560517e90180 'parser' 'P'
|         `-DeclRefExpr 0x560517eb95f8 <col:40> 'T' lvalue ParmVar 0x560517e90228 'x' 'T &'
|-FunctionTemplateDecl 0x560517e907f8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x560517e90418 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e90498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e90758 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e90558 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e905d0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560517e90678 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x560517eb9798 <col:60, line:549:5>
|     `-ReturnStmt 0x560517eb9788 <line:548:9, col:41>
|       `-CallExpr 0x560517eb9750 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb9688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb96f0 <col:23> 'const char *' lvalue ParmVar 0x560517e90558 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb9710 <col:32> 'P' lvalue ParmVar 0x560517e905d0 'parser' 'P'
|         `-DeclRefExpr 0x560517eb9730 <col:40> 'T' lvalue ParmVar 0x560517e90678 'x' 'T &'
|-FunctionTemplateDecl 0x560517e90c48 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x560517e90868 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e908e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e90ba8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e909a8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e90a20 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x560517e90ac8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x560517eb98d0 <col:61, line:553:5>
|     `-ReturnStmt 0x560517eb98c0 <line:552:9, col:42>
|       `-CallExpr 0x560517eb9888 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb97c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb9828 <col:24> 'const char *' lvalue ParmVar 0x560517e909a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb9848 <col:33> 'P' lvalue ParmVar 0x560517e90a20 'parser' 'P'
|         `-DeclRefExpr 0x560517eb9868 <col:41> 'T' lvalue ParmVar 0x560517e90ac8 'x' 'T &'
|-FunctionTemplateDecl 0x560517e91128 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x560517e90cb8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e90d38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e91088 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560517e90df8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e90e78 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x560517e90ef0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x560517e90f98 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x560517eb9a48 <col:69, line:557:5>
|     `-ReturnStmt 0x560517eb9a38 <line:556:9, col:46>
|       `-CallExpr 0x560517eb99f8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb98f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb9978 <col:21> 'const char *' lvalue ParmVar 0x560517e90df8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eb9998 <col:30> 'int' lvalue ParmVar 0x560517e90e78 'flags' 'int'
|         |-DeclRefExpr 0x560517eb99b8 <col:37> 'P' lvalue ParmVar 0x560517e90ef0 'parser' 'P'
|         `-DeclRefExpr 0x560517eb99d8 <col:45> 'T' lvalue ParmVar 0x560517e90f98 'x' 'T &'
|-FunctionTemplateDecl 0x560517e91438 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x560517e911a0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e91398 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560517e91250 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e912c8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x560517eb9b88 <col:56, line:571:5>
|     `-ReturnStmt 0x560517eb9b78 <line:570:9, col:48>
|       `-CallExpr 0x560517eb9b40 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb9a70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb9ae0 <col:30> 'const char *' lvalue ParmVar 0x560517e91250 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb9b00 <col:39> 'int' 0
|         `-DeclRefExpr 0x560517eb9b20 <col:42> 'P' lvalue ParmVar 0x560517e912c8 'parser' 'P'
|-FunctionTemplateDecl 0x560517e917c8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x560517e914a0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e91728 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x560517e91550 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e915d0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560517e91648 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x560517eb9d58 <col:67, line:576:5>
|     |-CallExpr 0x560517eb9ce0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb9ba0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x560517eb9be0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x560517eb9bf0 <col:39> 'const char *' lvalue ParmVar 0x560517e91550 'keyword' 'const char *'
|     | |-BinaryOperator 0x560517eb9ca0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x560517eb9c50 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560517eb9c10 <col:48> 'int' lvalue ParmVar 0x560517e915d0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560517eb9c88 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560517eb9c68 <col:56> 'const int' lvalue Var 0x560517e82cb0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x560517eb9cc0 <col:68> 'P' lvalue ParmVar 0x560517e91648 'parser' 'P'
|     `-ReturnStmt 0x560517eb9d48 <line:575:9, col:17>
|       `-UnaryOperator 0x560517eb9d30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eb9d20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e91c18 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x560517e91838 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e918b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e91b78 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560517e91978 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e919f0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560517e91a98 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x560517eb9ec8 <col:62, line:592:5>
|     `-ReturnStmt 0x560517eb9eb8 <line:591:9, col:51>
|       `-CallExpr 0x560517eb9e78 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eb9d88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eb9df8 <col:30> 'const char *' lvalue ParmVar 0x560517e91978 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eb9e18 <col:39> 'int' 0
|         |-DeclRefExpr 0x560517eb9e38 <col:42> 'P' lvalue ParmVar 0x560517e919f0 'parser' 'P'
|         `-DeclRefExpr 0x560517eb9e58 <col:50> 'T' lvalue ParmVar 0x560517e91a98 'x' 'T &'
|-FunctionTemplateDecl 0x560517e920f8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x560517e91c88 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e91d08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e92058 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560517e91dc8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e91e48 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560517e91ec0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x560517e91f68 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x560517eba0c0 <col:73, line:597:5>
|     |-CallExpr 0x560517eba040 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eb9ee0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x560517eb9f20 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x560517eb9f30 <col:39> 'const char *' lvalue ParmVar 0x560517e91dc8 'keyword' 'const char *'
|     | |-BinaryOperator 0x560517eb9fe0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x560517eb9f90 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560517eb9f50 <col:48> 'int' lvalue ParmVar 0x560517e91e48 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560517eb9fc8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560517eb9fa8 <col:56> 'const int' lvalue Var 0x560517e82cb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x560517eba000 <col:68> 'P' lvalue ParmVar 0x560517e91ec0 'parser' 'P'
|     | `-DeclRefExpr 0x560517eba020 <col:76> 'T' lvalue ParmVar 0x560517e91f68 'x' 'T &'
|     `-ReturnStmt 0x560517eba0b0 <line:596:9, col:17>
|       `-UnaryOperator 0x560517eba098 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eba088 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e926a8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x560517e92170 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e921e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e92608 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x560517e922a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e92320 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x560517e924e0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560517eba230 <col:65, line:614:5>
|     `-ReturnStmt 0x560517eba220 <line:613:9, col:46>
|       `-CallExpr 0x560517eba1e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eba0f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eba160 <col:25> 'const char *' lvalue ParmVar 0x560517e922a8 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eba180 <col:34> 'int' 0
|         |-DeclRefExpr 0x560517eba1a0 <col:37> 'P' lvalue ParmVar 0x560517e92320 'parser' 'P'
|         `-DeclRefExpr 0x560517eba1c0 <col:45> 'Vector<T>' lvalue ParmVar 0x560517e924e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x560517e92ad8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x560517e92718 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e92a38 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x560517e927d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e92920 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560517eba450 <col:55, line:618:5>
|     `-ReturnStmt 0x560517eba440 <line:617:9, col:55>
|       `-CallExpr 0x560517eba400 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eba258 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eba2c8 <col:25> 'const char *' lvalue ParmVar 0x560517e927d0 'keyword' 'const char *'
|         |-IntegerLiteral 0x560517eba2e8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x560517eba3c0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x560517eba3e0 <col:54> 'Vector<T>' lvalue ParmVar 0x560517e92920 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x560517e930a8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x560517e92b40 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e92bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e93008 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x560517e92c78 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e92cf8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560517e92d70 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x560517e92ec0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560517eba648 <col:76, line:623:5>
|     |-CallExpr 0x560517eba5c8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560517eba468 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x560517eba4a8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x560517eba4b8 <col:34> 'const char *' lvalue ParmVar 0x560517e92c78 'keyword' 'const char *'
|     | |-BinaryOperator 0x560517eba568 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x560517eba518 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560517eba4d8 <col:43> 'int' lvalue ParmVar 0x560517e92cf8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560517eba550 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560517eba530 <col:51> 'const int' lvalue Var 0x560517e82cb0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x560517eba588 <col:63> 'P' lvalue ParmVar 0x560517e92d70 'parser' 'P'
|     | `-DeclRefExpr 0x560517eba5a8 <col:71> 'Vector<T>' lvalue ParmVar 0x560517e92ec0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x560517eba638 <line:622:9, col:17>
|       `-UnaryOperator 0x560517eba620 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517eba610 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e935e8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x560517e93120 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e93198 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e93548 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x560517e93258 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e932d8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560517e93420 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560517eba8b0 <col:66, line:627:5>
|     `-ReturnStmt 0x560517eba8a0 <line:626:9, col:59>
|       `-CallExpr 0x560517eba860 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560517eba678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560517eba6e8 <col:25> 'const char *' lvalue ParmVar 0x560517e93258 'keyword' 'const char *'
|         |-DeclRefExpr 0x560517eba708 <col:34> 'int' lvalue ParmVar 0x560517e932d8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x560517eba820 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x560517eba840 <col:58> 'Vector<T>' lvalue ParmVar 0x560517e93420 'x' 'Vector<T> &'
|-CXXMethodDecl 0x560517e93678 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x560517eba930 <col:25, line:633:5>
|   `-ReturnStmt 0x560517eba920 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x560517eba908 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x560517eba8d8 <col:16> 'const bool' lvalue ->_status 0x560517ea1e28
|         `-CXXThisExpr 0x560517eba8c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x560517e937f8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x560517e93730 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x560517ebaa18 <col:27, line:639:5>
|   |-BinaryOperator 0x560517eba9c0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560517eba948 <col:9> 'bool' lvalue ParmVar 0x560517e93730 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560517eba9a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560517eba978 <col:13> 'bool' lvalue ->_status 0x560517ea1e28
|   |     `-CXXThisExpr 0x560517eba968 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x560517ebaa08 <line:638:9, col:17>
|     `-UnaryOperator 0x560517eba9f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517eba9e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x560517e93978 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x560517e938b8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x560517ebab08 <col:39, line:644:5>
|   |-BinaryOperator 0x560517ebaab0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560517ebaa38 <col:9> 'bool' lvalue ParmVar 0x560517e938b8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560517ebaa98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560517ebaa68 <col:13> 'const bool' lvalue ->_status 0x560517ea1e28
|   |     `-CXXThisExpr 0x560517ebaa58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x560517ebaaf8 <line:643:9, col:17>
|     `-UnaryOperator 0x560517ebaae0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517ebaad0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x560517e93a40 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x560517ebabb0 <col:30, line:651:5>
|   `-ReturnStmt 0x560517ebaba0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x560517ebab88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x560517ebab58 <col:16> 'bool' lvalue ->_read_status 0x560517d96ff0
|         `-ImplicitCastExpr 0x560517ebab38 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x560517ebab28 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x560517e93b88 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x560517e93af8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x560517ebacb8 <col:32, line:658:5>
|   |-BinaryOperator 0x560517ebac60 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560517ebabc8 <col:9> 'bool' lvalue ParmVar 0x560517e93af8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560517ebac48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560517ebac18 <col:13> 'bool' lvalue ->_read_status 0x560517d96ff0
|   |     `-ImplicitCastExpr 0x560517ebabf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x560517ebabe8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x560517ebaca8 <line:657:9, col:17>
|     `-UnaryOperator 0x560517ebac90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517ebac80 <col:17> 'Args *' this
|-CXXMethodDecl 0x560517e93cd8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x560517e93c48 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x560517ebadc8 <col:44, line:663:5>
|   |-BinaryOperator 0x560517ebad70 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560517ebacd8 <col:9> 'bool' lvalue ParmVar 0x560517e93c48 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560517ebad58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560517ebad28 <col:13> 'bool' lvalue ->_read_status 0x560517d96ff0
|   |     `-ImplicitCastExpr 0x560517ebad08 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x560517ebacf8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x560517ebadb8 <line:662:9, col:17>
|     `-UnaryOperator 0x560517ebada0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517ebad90 <col:17> 'const Args *' this
|-CXXMethodDecl 0x560517e93da0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x560517e93e68 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x560517e93f30 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x560517e93ff8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x560517e94308 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x560517e94098 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e94268 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x560517e94178 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x560517ebb180 <col:19, line:706:5>
|     `-IfStmt 0x560517ebb158 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x560517ebaec8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x560517ebb088 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x560517ebb058 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x560517ebb018 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x560517ebaf20 <col:42> '<bound member function type>' ->simple_slot 0x560517eb42d0
|       |     | `-CXXThisExpr 0x560517ebaf10 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x560517ebafb8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x560517ebaf70 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x560517c21518
|       |     | `-DeclRefExpr 0x560517ebaf50 <col:55> 'T' lvalue ParmVar 0x560517e94178 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x560517ebaff8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x560517ebb148 <line:705:13, col:34>
|         `-CallExpr 0x560517ebb120 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x560517ebb0a8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x560517ebb100 <col:33> 'T' lvalue ParmVar 0x560517e94178 'x' 'T &'
|-FunctionTemplateDecl 0x560517e945d8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x560517e94368 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e94538 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x560517e94448 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x560517ebb560 <col:31, line:717:5>
|     |-DeclStmt 0x560517ebb2c0 <line:713:9, col:23>
|     | `-VarDecl 0x560517ebb1a8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x560517ebb298 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x560517ebb220 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x560517ebb278 <col:21> 'T' lvalue ParmVar 0x560517e94448 'x' 'T &'
|     |-IfStmt 0x560517ebb510 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x560517ebb3b8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x560517ebb4f0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x560517ebb490 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x560517ebb420 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|     |   | `-DeclRefExpr 0x560517ebb400 <col:14> 'T *' lvalue Var 0x560517ebb1a8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x560517ebb4d0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x560517ebb548 <line:716:9, col:16>
|       `-DeclRefExpr 0x560517ebb528 <col:16> 'T *' lvalue Var 0x560517ebb1a8 's' 'T *'
|-FunctionTemplateDecl 0x560517e949e8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x560517e94638 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560517e946b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560517e94948 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x560517e94798 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x560517e94838 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x560517ebb870 <col:37, line:726:5>
|     |-IfStmt 0x560517ebb800 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x560517ebb820 <line:723:13, col:26>
|     | | `-VarDecl 0x560517ebb5c8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x560517ebb6b8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x560517ebb640 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x560517ebb698 <col:25> 'T' lvalue ParmVar 0x560517e94798 'x' 'T &'
|     | |-DeclRefExpr 0x560517ebb6e0 <col:16> 'T *' lvalue Var 0x560517ebb5c8 's' 'T *'
|     | `-BinaryOperator 0x560517ebb7e0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x560517ebb790 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x560517ebb720 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|     |   | `-DeclRefExpr 0x560517ebb700 <col:14> 'T *' lvalue Var 0x560517ebb5c8 's' 'T *'
|     |   `-DeclRefExpr 0x560517ebb7c0 <col:18> 'const V' lvalue ParmVar 0x560517e94838 'value' 'const V &'
|     `-ReturnStmt 0x560517ebb860 <line:725:9, col:17>
|       `-UnaryOperator 0x560517ebb848 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560517ebb838 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560517e94de8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x560517e94a50 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560517e94d48 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x560517e94b00 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e94b80 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560517e94c28 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x560517ebc690 <col:65, line:737:5>
|     |-DeclStmt 0x560517ebb908 <line:732:9, col:26>
|     | `-VarDecl 0x560517ebb8a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560517ebc658 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x560517ebc678 <line:733:13, col:58>
|       | `-VarDecl 0x560517ebb930 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560517ebbb10 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560517ebbae0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560517ebbac8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560517ebbaa8 <col:26, col:58> 'String' (CXXTemporary 0x560517ebbaa8)
|       |           `-CXXMemberCallExpr 0x560517ebba38 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560517ebb9a8 <col:26> '<bound member function type>' ->find 0x560517eb38e8
|       |             | `-CXXThisExpr 0x560517ebb998 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560517ebba70 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ebb9d8 <col:31> 'const char *' lvalue ParmVar 0x560517e94b00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560517ebba88 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ebb9f8 <col:40> 'int' lvalue ParmVar 0x560517e94b80 'flags' 'int'
|       |             `-DeclRefExpr 0x560517ebba18 <col:47> 'Args::Slot *' lvalue Var 0x560517ebb8a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560517ebbbc8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560517ebbbb0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560517ebbb90 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560517ebbb60 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |       `-ImplicitCastExpr 0x560517ebbb48 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560517ebbb28 <col:20> 'String' lvalue Var 0x560517ebb930 'str' 'String'
|       `-CompoundStmt 0x560517ebc638 <col:61, line:736:9>
|         |-DeclStmt 0x560517ebc080 <line:734:13, col:76>
|         | `-VarDecl 0x560517ebbc18 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x560517ebc050 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560517ebbfc0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560517ebc008 <col:60> 'T' lvalue ParmVar 0x560517e94c28 'variable' 'T &'
|         |     `-UnaryOperator 0x560517ebc038 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560517ebc028 <col:71> 'Args *' this
|         `-CallExpr 0x560517ebc608 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x560517ebc0a8 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|           | `-CXXThisExpr 0x560517ebc098 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560517ebc5c8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x560517ebc0d8 <col:23> 'T *' lvalue Var 0x560517ebbc18 's' 'T *'
|           | `-CallExpr 0x560517ebc588 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560517ebc360 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x560517ebc460 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x560517ebc480 <col:86> 'String' lvalue Var 0x560517ebb930 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560517ebc530 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560517ebc4c0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|           |   | `-DeclRefExpr 0x560517ebc4a0 <col:92> 'T *' lvalue Var 0x560517ebbc18 's' 'T *'
|           |   `-UnaryOperator 0x560517ebc570 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560517ebc560 <col:96> 'Args *' this
|           `-DeclRefExpr 0x560517ebc5e8 <col:103> 'Args::Slot *' lvalue Var 0x560517ebb8a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560517e95338 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x560517e94e58 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560517e94ed8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560517e95298 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x560517e94f98 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e95018 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x560517e950b8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x560517e95158 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x560517ebd530 <col:88, line:745:5>
|     |-DeclStmt 0x560517ebc728 <line:741:9, col:26>
|     | `-VarDecl 0x560517ebc6c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560517ebc948 <line:742:9, col:55>
|     | `-VarDecl 0x560517ebc750 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x560517ebc930 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x560517ebc900 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x560517ebc8e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x560517ebc8c8 <col:22, col:54> 'String' (CXXTemporary 0x560517ebc8c8)
|     |           `-CXXMemberCallExpr 0x560517ebc858 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x560517ebc7c8 <col:22> '<bound member function type>' ->find 0x560517eb38e8
|     |             | `-CXXThisExpr 0x560517ebc7b8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x560517ebc890 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560517ebc7f8 <col:27> 'const char *' lvalue ParmVar 0x560517e94f98 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x560517ebc8a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560517ebc818 <col:36> 'int' lvalue ParmVar 0x560517e95018 'flags' 'int'
|     |             `-DeclRefExpr 0x560517ebc838 <col:43> 'Args::Slot *' lvalue Var 0x560517ebc6c0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x560517ebcd20 <line:743:9, col:72>
|     | `-VarDecl 0x560517ebc998 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560517ebccf0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560517ebcc60 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x560517ebcca8 <col:56> 'T' lvalue ParmVar 0x560517e950b8 'variable' 'T &'
|     |     `-UnaryOperator 0x560517ebccd8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560517ebccc8 <col:67> 'Args *' this
|     `-CallExpr 0x560517ebd500 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x560517ebcd48 <col:9> '<bound member function type>' ->postparse 0x560517eb3af8
|       | `-CXXThisExpr 0x560517ebcd38 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x560517ebd4c0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x560517ebcd78 <col:19> 'T *' lvalue Var 0x560517ebc998 's' 'T *'
|       | `-ParenExpr 0x560517ebd4a0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x560517ebd470 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x560517ebd458 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x560517ebd440 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x560517ebd420 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x560517ebd3f0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |     |       `-ImplicitCastExpr 0x560517ebd3d8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x560517ebcd98 <col:25> 'String' lvalue Var 0x560517ebc750 'str' 'String'
|       |     |-CallExpr 0x560517ebd248 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x560517ebd020 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x560517ebd120 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x560517ebd140 <col:89> 'String' lvalue Var 0x560517ebc750 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x560517ebd1f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x560517ebd180 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|       |     | | `-DeclRefExpr 0x560517ebd160 <col:95> 'T *' lvalue Var 0x560517ebc998 's' 'T *'
|       |     | `-UnaryOperator 0x560517ebd230 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x560517ebd220 <col:99> 'Args *' this
|       |     `-ParenExpr 0x560517ebd3b8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x560517ebd398 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x560517ebd368 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x560517ebd318 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x560517ebd2a8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|       |         | | `-DeclRefExpr 0x560517ebd288 <col:109> 'T *' lvalue Var 0x560517ebc998 's' 'T *'
|       |         | `-DeclRefExpr 0x560517ebd348 <col:113> 'const V' lvalue ParmVar 0x560517e95158 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x560517ebd388 <col:120> 'bool' true
|       `-DeclRefExpr 0x560517ebd4e0 <col:128> 'Args::Slot *' lvalue Var 0x560517ebc6c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560517e95868 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x560517e953b0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e95428 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e957c8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x560517e954e8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e95568 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560517e955e0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x560517e95688 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x560517ebe128 <col:75, line:754:5>
|     |-DeclStmt 0x560517ebd5d8 <line:749:9, col:26>
|     | `-VarDecl 0x560517ebd570 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560517ebe0f0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x560517ebe110 <line:750:13, col:58>
|       | `-VarDecl 0x560517ebd600 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560517ebd7e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560517ebd7b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560517ebd798 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560517ebd778 <col:26, col:58> 'String' (CXXTemporary 0x560517ebd778)
|       |           `-CXXMemberCallExpr 0x560517ebd708 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560517ebd678 <col:26> '<bound member function type>' ->find 0x560517eb38e8
|       |             | `-CXXThisExpr 0x560517ebd668 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560517ebd740 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ebd6a8 <col:31> 'const char *' lvalue ParmVar 0x560517e954e8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560517ebd758 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ebd6c8 <col:40> 'int' lvalue ParmVar 0x560517e95568 'flags' 'int'
|       |             `-DeclRefExpr 0x560517ebd6e8 <col:47> 'Args::Slot *' lvalue Var 0x560517ebd570 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560517ebd898 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560517ebd880 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560517ebd860 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560517ebd830 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |       `-ImplicitCastExpr 0x560517ebd818 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560517ebd7f8 <col:20> 'String' lvalue Var 0x560517ebd600 'str' 'String'
|       `-CompoundStmt 0x560517ebe0d0 <col:61, line:753:9>
|         |-DeclStmt 0x560517ebdc70 <line:751:13, col:63>
|         | `-VarDecl 0x560517ebd8e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x560517ebdc40 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560517ebdbb0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560517ebdbf8 <col:47> 'T' lvalue ParmVar 0x560517e95688 'variable' 'T &'
|         |     `-UnaryOperator 0x560517ebdc28 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560517ebdc18 <col:58> 'Args *' this
|         `-CallExpr 0x560517ebe0a0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x560517ebdc98 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|           | `-CXXThisExpr 0x560517ebdc88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560517ebe060 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x560517ebdcc8 <col:23> 'T *' lvalue Var 0x560517ebd8e8 's' 'T *'
|           | `-CallExpr 0x560517ebe020 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560517ebdeb0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x560517ebdef8 <col:56> 'P' lvalue ParmVar 0x560517e955e0 'parser' 'P'
|           |   |-DeclRefExpr 0x560517ebdf18 <col:64> 'String' lvalue Var 0x560517ebd600 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560517ebdfc8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560517ebdf58 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|           |   | `-DeclRefExpr 0x560517ebdf38 <col:70> 'T *' lvalue Var 0x560517ebd8e8 's' 'T *'
|           |   `-UnaryOperator 0x560517ebe008 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560517ebdff8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x560517ebe080 <col:81> 'Args::Slot *' lvalue Var 0x560517ebd570 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560517e95ec8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x560517e958e0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560517e95958 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x560517e959d8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560517e95e28 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x560517e95aa0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e95b20 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x560517e95b98 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x560517e95c38 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x560517e95cd8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x560517ec1230 <col:98, line:762:5>
|     |-DeclStmt 0x560517ebe1c0 <line:758:9, col:26>
|     | `-VarDecl 0x560517ebe158 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560517ebe3e0 <line:759:9, col:55>
|     | `-VarDecl 0x560517ebe1e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x560517ebe3c8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x560517ebe398 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x560517ebe380 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x560517ebe360 <col:22, col:54> 'String' (CXXTemporary 0x560517ebe360)
|     |           `-CXXMemberCallExpr 0x560517ebe2f0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x560517ebe260 <col:22> '<bound member function type>' ->find 0x560517eb38e8
|     |             | `-CXXThisExpr 0x560517ebe250 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x560517ebe328 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560517ebe290 <col:27> 'const char *' lvalue ParmVar 0x560517e95aa0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x560517ebe340 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560517ebe2b0 <col:36> 'int' lvalue ParmVar 0x560517e95b20 'flags' 'int'
|     |             `-DeclRefExpr 0x560517ebe2d0 <col:43> 'Args::Slot *' lvalue Var 0x560517ebe158 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x560517ebe800 <line:760:9, col:59>
|     | `-VarDecl 0x560517ebe438 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560517ebe7d0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560517ebe740 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x560517ebe788 <col:43> 'T' lvalue ParmVar 0x560517e95c38 'variable' 'T &'
|     |     `-UnaryOperator 0x560517ebe7b8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560517ebe7a8 <col:54> 'Args *' this
|     `-CallExpr 0x560517ec1200 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x560517ebe828 <col:9> '<bound member function type>' ->postparse 0x560517eb3af8
|       | `-CXXThisExpr 0x560517ebe818 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x560517ebee48 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x560517ebe858 <col:19> 'T *' lvalue Var 0x560517ebe438 's' 'T *'
|       | `-ParenExpr 0x560517ebee28 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x560517ebedf8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x560517ebede0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x560517ebedc8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x560517ebeda8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x560517ebed78 <col:25> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |     |       `-ImplicitCastExpr 0x560517ebed60 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x560517ebe878 <col:25> 'String' lvalue Var 0x560517ebe1e8 'str' 'String'
|       |     |-CallExpr 0x560517ebebd0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x560517ebea60 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x560517ebeaa8 <col:59> 'P' lvalue ParmVar 0x560517e95b98 'parser' 'P'
|       |     | |-DeclRefExpr 0x560517ebeac8 <col:67> 'String' lvalue Var 0x560517ebe1e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x560517ebeb78 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x560517ebeb08 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|       |     | | `-DeclRefExpr 0x560517ebeae8 <col:73> 'T *' lvalue Var 0x560517ebe438 's' 'T *'
|       |     | `-UnaryOperator 0x560517ebebb8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x560517ebeba8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x560517ebed40 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x560517ebed20 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x560517ebecf0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x560517ebeca0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x560517ebec30 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|       |         | | `-DeclRefExpr 0x560517ebec10 <col:87> 'T *' lvalue Var 0x560517ebe438 's' 'T *'
|       |         | `-DeclRefExpr 0x560517ebecd0 <col:91> 'const V' lvalue ParmVar 0x560517e95cd8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x560517ebed10 <col:98> 'bool' true
|       `-DeclRefExpr 0x560517ebee68 <col:106> 'Args::Slot *' lvalue Var 0x560517ebe158 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560517e96538 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x560517e95f48 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e95fc8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560517e96048 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560517e96498 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560517e96110 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e96190 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560517e96208 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x560517e962a8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x560517e96348 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x560517ec2208 <col:60, line:773:5>
|     |-DeclStmt 0x560517ec12d8 <line:767:9, col:26>
|     | `-VarDecl 0x560517ec1270 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560517ec21d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x560517ec21f0 <line:768:13, col:58>
|       | `-VarDecl 0x560517ec1300 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560517ec14e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560517ec14b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560517ec1498 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560517ec1478 <col:26, col:58> 'String' (CXXTemporary 0x560517ec1478)
|       |           `-CXXMemberCallExpr 0x560517ec1408 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560517ec1378 <col:26> '<bound member function type>' ->find 0x560517eb38e8
|       |             | `-CXXThisExpr 0x560517ec1368 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560517ec1440 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ec13a8 <col:31> 'const char *' lvalue ParmVar 0x560517e96110 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560517ec1458 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ec13c8 <col:40> 'int' lvalue ParmVar 0x560517e96190 'flags' 'int'
|       |             `-DeclRefExpr 0x560517ec13e8 <col:47> 'Args::Slot *' lvalue Var 0x560517ec1270 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560517ec1598 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560517ec1580 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560517ec1560 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560517ec1530 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |       `-ImplicitCastExpr 0x560517ec1518 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560517ec14f8 <col:20> 'String' lvalue Var 0x560517ec1300 'str' 'String'
|       `-CompoundStmt 0x560517ec21a8 <col:61, line:772:9>
|         |-DeclStmt 0x560517ec18d0 <line:769:13, col:66>
|         | `-VarDecl 0x560517ec15e8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x560517ec18a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560517ec1810 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560517ec1858 <col:49> 'T1' lvalue ParmVar 0x560517e962a8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x560517ec1888 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560517ec1878 <col:61> 'Args *' this
|         |-DeclStmt 0x560517ec1c40 <line:770:13, col:66>
|         | `-VarDecl 0x560517ec1958 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x560517ec1c10 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560517ec1b80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560517ec1bc8 <col:49> 'T2' lvalue ParmVar 0x560517e96348 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x560517ec1bf8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560517ec1be8 <col:61> 'Args *' this
|         `-CallExpr 0x560517ec2178 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x560517ec1c68 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|           | `-CXXThisExpr 0x560517ec1c58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560517ec2138 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x560517ec1cd8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x560517ec1c98 <col:23> 'T1 *' lvalue Var 0x560517ec15e8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x560517ec1cb8 <col:29> 'T2 *' lvalue Var 0x560517ec1958 's2' 'T2 *'
|           | `-CallExpr 0x560517ec20f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560517ec1ec0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x560517ec1f08 <col:63> 'P' lvalue ParmVar 0x560517e96208 'parser' 'P'
|           |   |-DeclRefExpr 0x560517ec1f28 <col:71> 'String' lvalue Var 0x560517ec1300 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560517ec1fd8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560517ec1f68 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|           |   | `-DeclRefExpr 0x560517ec1f48 <col:77> 'T1 *' lvalue Var 0x560517ec15e8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x560517ec2098 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560517ec2028 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|           |   | `-DeclRefExpr 0x560517ec2008 <col:82> 'T2 *' lvalue Var 0x560517ec1958 's2' 'T2 *'
|           |   `-UnaryOperator 0x560517ec20d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560517ec20c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x560517ec2158 <col:94> 'Args::Slot *' lvalue Var 0x560517ec1270 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560517e9f298 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x560517e965b8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e9f1f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x560517e96670 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e966f0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560517e96768 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x560517ec2720 <col:67, line:780:5>
|     |-DeclStmt 0x560517ec22a0 <line:777:9, col:26>
|     | `-VarDecl 0x560517ec2238 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560517ec26e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x560517ec2708 <line:778:13, col:58>
|       | `-VarDecl 0x560517ec22c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560517ec24a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560517ec2478 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560517ec2460 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560517ec2440 <col:26, col:58> 'String' (CXXTemporary 0x560517ec2440)
|       |           `-CXXMemberCallExpr 0x560517ec23d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560517ec2340 <col:26> '<bound member function type>' ->find 0x560517eb38e8
|       |             | `-CXXThisExpr 0x560517ec2330 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560517ec2408 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ec2370 <col:31> 'const char *' lvalue ParmVar 0x560517e96670 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560517ec2420 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560517ec2390 <col:40> 'int' lvalue ParmVar 0x560517e966f0 'flags' 'int'
|       |             `-DeclRefExpr 0x560517ec23b0 <col:47> 'Args::Slot *' lvalue Var 0x560517ec2238 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560517ec2560 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560517ec2548 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560517ec2528 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560517ec24f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|       |       `-ImplicitCastExpr 0x560517ec24e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560517ec24c0 <col:20> 'String' lvalue Var 0x560517ec22c8 'str' 'String'
|       `-CallExpr 0x560517ec26b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x560517ec2588 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|         | `-CXXThisExpr 0x560517ec2578 <col:13> 'Args *' implicit this
|         |-CallExpr 0x560517ec2668 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x560517ec25d8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x560517ec25b8 <col:23> 'P' lvalue ParmVar 0x560517e96768 'parser' 'P'
|         | |-DeclRefExpr 0x560517ec2620 <col:36> 'String' lvalue Var 0x560517ec22c8 'str' 'String'
|         | `-UnaryOperator 0x560517ec2650 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x560517ec2640 <col:42> 'Args *' this
|         `-DeclRefExpr 0x560517ec2698 <col:49> 'Args::Slot *' lvalue Var 0x560517ec2238 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560517e9f638 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x560517e9f308 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560517e9f598 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x560517e9f3c0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e9f440 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x560517e9f4b8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x560517ec3090 <col:71, line:792:5>
|     |-DeclStmt 0x560517ec27b8 <line:784:9, col:26>
|     | `-VarDecl 0x560517ec2750 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560517ec2888 <line:785:9, col:29>
|     | `-VarDecl 0x560517ec27e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560517ec2870 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560517ec2850 <col:28> 'int' 1
|     |-WhileStmt 0x560517ec2f40 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x560517ec2f60 <line:786:16, col:61>
|     | | `-VarDecl 0x560517ec28b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560517ec2a90 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560517ec2a60 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560517ec2a48 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560517ec2a28 <col:29, col:61> 'String' (CXXTemporary 0x560517ec2a28)
|     | |           `-CXXMemberCallExpr 0x560517ec29b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560517ec2928 <col:29> '<bound member function type>' ->find 0x560517eb38e8
|     | |             | `-CXXThisExpr 0x560517ec2918 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560517ec29f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560517ec2958 <col:34> 'const char *' lvalue ParmVar 0x560517e9f3c0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560517ec2a08 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560517ec2978 <col:43> 'int' lvalue ParmVar 0x560517e9f440 'flags' 'int'
|     | |             `-DeclRefExpr 0x560517ec2998 <col:50> 'Args::Slot *' lvalue Var 0x560517ec2750 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560517ec2b48 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560517ec2b30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560517ec2b10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560517ec2ae0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|     | |       `-ImplicitCastExpr 0x560517ec2ac8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560517ec2aa8 <col:23> 'String' lvalue Var 0x560517ec28b0 'str' 'String'
|     | `-CompoundStmt 0x560517ec2f18 <col:64, line:790:9>
|     |   |-CallExpr 0x560517ec2ca0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x560517ec2b70 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|     |   | | `-CXXThisExpr 0x560517ec2b60 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x560517ec2c50 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x560517ec2bc0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x560517ec2ba0 <col:23> 'P' lvalue ParmVar 0x560517e9f4b8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x560517ec2c08 <col:36> 'String' lvalue Var 0x560517ec28b0 'str' 'String'
|     |   | | `-UnaryOperator 0x560517ec2c38 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x560517ec2c28 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x560517ec2c80 <col:49> 'Args::Slot *' lvalue Var 0x560517ec2750 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x560517ec2e38 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560517ec2cd0 <col:13> 'int' lvalue Var 0x560517ec27e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560517ec2e20 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560517ec2e00 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560517ec2d68 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560517ec2d48 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560517ec2d30 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560517ec2cf0 <col:28> 'int' lvalue Var 0x560517ec27e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560517ec2d10 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560517ec2de8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560517ec2db8 <col:49> 'bool' lvalue ->_read_status 0x560517d96ff0
|     |   |         `-ImplicitCastExpr 0x560517ec2d98 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560517ec2d88 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560517ec2ee8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560517ec2e58 <col:13> 'int' lvalue ParmVar 0x560517e9f440 'flags' 'int'
|     |     `-UnaryOperator 0x560517ec2ed0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560517ec2eb8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560517ec2e98 <col:23> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560517ec3070 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560517ec2fa8 <col:9> 'bool' lvalue ->_read_status 0x560517d96ff0
|       | `-ImplicitCastExpr 0x560517ec2f88 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560517ec2f78 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560517ec3050 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560517ec3030 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560517ec3018 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560517ec2fd8 <col:25> 'int' lvalue Var 0x560517ec27e8 'read_status' 'int'
|           `-IntegerLiteral 0x560517ec2ff8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x560517e9fb18 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x560517e9f6a8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e9f728 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517e9fa78 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x560517e9f7e8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e9f868 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x560517e9f8e0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x560517e9f988 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x560517ec4020 <col:84, line:805:5>
|     |-DeclStmt 0x560517ec3138 <line:796:9, col:26>
|     | `-VarDecl 0x560517ec30d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560517ec3208 <line:797:9, col:29>
|     | `-VarDecl 0x560517ec3168 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560517ec31f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560517ec31d0 <col:28> 'int' 1
|     |-DeclStmt 0x560517ec3540 <line:798:9, col:71>
|     | `-VarDecl 0x560517ec3258 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560517ec3510 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560517ec3480 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x560517ec34c8 <col:55> 'T' lvalue ParmVar 0x560517e9f988 'variable' 'T &'
|     |     `-UnaryOperator 0x560517ec34f8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560517ec34e8 <col:66> 'Args *' this
|     |-WhileStmt 0x560517ec3ed0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x560517ec3ef0 <line:799:16, col:61>
|     | | `-VarDecl 0x560517ec3568 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560517ec3748 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560517ec3718 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560517ec3700 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560517ec36e0 <col:29, col:61> 'String' (CXXTemporary 0x560517ec36e0)
|     | |           `-CXXMemberCallExpr 0x560517ec3670 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560517ec35e0 <col:29> '<bound member function type>' ->find 0x560517eb38e8
|     | |             | `-CXXThisExpr 0x560517ec35d0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560517ec36a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560517ec3610 <col:34> 'const char *' lvalue ParmVar 0x560517e9f7e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560517ec36c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560517ec3630 <col:43> 'int' lvalue ParmVar 0x560517e9f868 'flags' 'int'
|     | |             `-DeclRefExpr 0x560517ec3650 <col:50> 'Args::Slot *' lvalue Var 0x560517ec30d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560517ec3800 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560517ec37e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560517ec37c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560517ec3798 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|     | |       `-ImplicitCastExpr 0x560517ec3780 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560517ec3760 <col:23> 'String' lvalue Var 0x560517ec3568 'str' 'String'
|     | `-CompoundStmt 0x560517ec3ea8 <col:64, line:803:9>
|     |   |-CallExpr 0x560517ec3c30 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x560517ec3828 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|     |   | | `-CXXThisExpr 0x560517ec3818 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x560517ec3bf0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x560517ec3858 <col:23> 'T *' lvalue Var 0x560517ec3258 's' 'T *'
|     |   | | `-CallExpr 0x560517ec3bb0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x560517ec3a40 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x560517ec3a88 <col:56> 'P' lvalue ParmVar 0x560517e9f8e0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x560517ec3aa8 <col:64> 'String' lvalue Var 0x560517ec3568 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x560517ec3b58 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x560517ec3ae8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|     |   | |   | `-DeclRefExpr 0x560517ec3ac8 <col:70> 'T *' lvalue Var 0x560517ec3258 's' 'T *'
|     |   | |   `-UnaryOperator 0x560517ec3b98 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x560517ec3b88 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x560517ec3c10 <col:81> 'Args::Slot *' lvalue Var 0x560517ec30d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x560517ec3dc8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560517ec3c60 <col:13> 'int' lvalue Var 0x560517ec3168 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560517ec3db0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560517ec3d90 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560517ec3cf8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560517ec3cd8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560517ec3cc0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560517ec3c80 <col:28> 'int' lvalue Var 0x560517ec3168 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560517ec3ca0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560517ec3d78 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560517ec3d48 <col:49> 'bool' lvalue ->_read_status 0x560517d96ff0
|     |   |         `-ImplicitCastExpr 0x560517ec3d28 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560517ec3d18 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560517ec3e78 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560517ec3de8 <col:13> 'int' lvalue ParmVar 0x560517e9f868 'flags' 'int'
|     |     `-UnaryOperator 0x560517ec3e60 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560517ec3e48 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560517ec3e28 <col:23> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560517ec4000 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560517ec3f38 <col:9> 'bool' lvalue ->_read_status 0x560517d96ff0
|       | `-ImplicitCastExpr 0x560517ec3f18 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560517ec3f08 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560517ec3fe0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560517ec3fc0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560517ec3fa8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560517ec3f68 <col:25> 'int' lvalue Var 0x560517ec3168 'read_status' 'int'
|           `-IntegerLiteral 0x560517ec3f88 <col:40> 'int' 1
|-FunctionTemplateDecl 0x560517ea00f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x560517e9fb90 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560517e9fc08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560517ea0058 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x560517e9fcc8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560517e9fd48 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x560517e9fdc0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x560517e9ff10 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x560517ec4e28 <col:87, line:821:5>
|     |-DeclStmt 0x560517ec40d0 <line:809:9, col:26>
|     | `-VarDecl 0x560517ec4068 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560517ec41a0 <line:810:9, col:29>
|     | `-VarDecl 0x560517ec4100 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560517ec4188 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560517ec4168 <col:28> 'int' 1
|     |-DeclStmt 0x560517ec43e8 <line:811:9, col:38>
|     | `-VarDecl 0x560517ec42d0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x560517ec43c0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x560517ec4348 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x560517ec43a0 <col:29> 'Vector<T>' lvalue ParmVar 0x560517e9ff10 'variable' 'Vector<T> &'
|     |-WhileStmt 0x560517ec4cd8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x560517ec4cf8 <line:812:16, col:61>
|     | | `-VarDecl 0x560517ec4410 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560517ec45f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560517ec45c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560517ec45a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560517ec4588 <col:29, col:61> 'String' (CXXTemporary 0x560517ec4588)
|     | |           `-CXXMemberCallExpr 0x560517ec4518 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560517ec4488 <col:29> '<bound member function type>' ->find 0x560517eb38e8
|     | |             | `-CXXThisExpr 0x560517ec4478 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560517ec4550 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560517ec44b8 <col:34> 'const char *' lvalue ParmVar 0x560517e9fcc8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560517ec4568 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560517ec44d8 <col:43> 'int' lvalue ParmVar 0x560517e9fd48 'flags' 'int'
|     | |             `-DeclRefExpr 0x560517ec44f8 <col:50> 'Args::Slot *' lvalue Var 0x560517ec4068 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560517ec46a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560517ec4690 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560517ec4670 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560517ec4640 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560517be44e8
|     | |       `-ImplicitCastExpr 0x560517ec4628 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560517ec4608 <col:23> 'String' lvalue Var 0x560517ec4410 'str' 'String'
|     | `-CompoundStmt 0x560517ec4ca0 <col:64, line:819:9>
|     |   |-DeclStmt 0x560517ec4768 <line:813:13, col:23>
|     |   | `-VarDecl 0x560517ec46d0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x560517ec4748 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x560517ec48e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x560517ec4790 <col:13> '<bound member function type>' ->postparse 0x560517eb3af8
|     |   | | `-CXXThisExpr 0x560517ec4780 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x560517ec4890 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x560517ec47e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x560517ec47c0 <col:23> 'P' lvalue ParmVar 0x560517e9fdc0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x560517ec4828 <col:36> 'String' lvalue Var 0x560517ec4410 'str' 'String'
|     |   | | |-DeclRefExpr 0x560517ec4848 <col:41> 'T' lvalue Var 0x560517ec46d0 'sx' 'T'
|     |   | | `-UnaryOperator 0x560517ec4878 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x560517ec4868 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x560517ec48c8 <col:53> 'Args::Slot *' lvalue Var 0x560517ec4068 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x560517ec4a40 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x560517ec4978 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x560517ec4948 <col:17> 'bool' lvalue ->_read_status 0x560517d96ff0
|     |   | |   `-ImplicitCastExpr 0x560517ec4928 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x560517ec4918 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x560517ec4a18 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x560517ec49b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x560517ec4990 <col:17> 'Vector<T> *' lvalue Var 0x560517ec42d0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x560517ec49f8 <col:30> 'T' lvalue Var 0x560517ec46d0 'sx' 'T'
|     |   |-BinaryOperator 0x560517ec4bc0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560517ec4a58 <col:13> 'int' lvalue Var 0x560517ec4100 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560517ec4ba8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560517ec4b88 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560517ec4af0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560517ec4ad0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560517ec4ab8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560517ec4a78 <col:28> 'int' lvalue Var 0x560517ec4100 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560517ec4a98 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560517ec4b70 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560517ec4b40 <col:49> 'bool' lvalue ->_read_status 0x560517d96ff0
|     |   |         `-ImplicitCastExpr 0x560517ec4b20 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560517ec4b10 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560517ec4c70 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560517ec4be0 <col:13> 'int' lvalue ParmVar 0x560517e9fd48 'flags' 'int'
|     |     `-UnaryOperator 0x560517ec4c58 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560517ec4c40 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560517ec4c20 <col:23> 'const int' lvalue Var 0x560517e829c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560517ec4e08 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560517ec4d40 <col:9> 'bool' lvalue ->_read_status 0x560517d96ff0
|       | `-ImplicitCastExpr 0x560517ec4d20 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560517ec4d10 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560517ec4de8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560517ec4dc8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560517ec4db0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560517ec4d70 <col:25> 'int' lvalue Var 0x560517ec4100 'read_status' 'int'
|           `-IntegerLiteral 0x560517ec4d90 <col:40> 'int' 1
|-AccessSpecDecl 0x560517ea0170 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x560517ea0198 prev 0x560517d9c828 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x560517ea0290 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x560517ea0380 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x560517ec4e60 <col:16, line:828:9>
| |-CXXDestructorDecl 0x560517ea0470 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x560517ec4e70 <col:25, line:830:9>
| |-CXXMethodDecl 0x560517ea0570 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x560517ea0620 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x560517ea06c8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x560517ea06c8
| | `-ParmVarDecl 0x560517ea07d8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x560517ea0f98 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x560517ea0f98
|   `-ParmVarDecl 0x560517ea10a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x560517ea0848 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x560517ea09a8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x560517ea0ba0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x560517ea0a50 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x560517ea0ac8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x560517ec5050 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x560517ea0e58 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x560517ec4ec0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x560517ec4e80 <col:20> 'void *' lvalue ParmVar 0x560517ea0a50 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x560517ea0ec0 '_slot' 'char *'
| | | `-CXXNewExpr 0x560517ec4f48 <col:32, col:45> 'char *' array Function 0x560517a07158 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x560517ec4f30 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x560517ec4f00 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x560517ea0ac8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x560517ea0f20 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x560517ec5010 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x560517ec4fd0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x560517ea0ac8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x560517ec50d0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x560517ea0ca0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x560517ea0470 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x560517ec5158 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x560517ec5138 <line:840:13, col:22> 'void' array Function 0x560517a074b8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x560517ec5120 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x560517ec50f0 <col:22> 'char *' lvalue ->_slot 0x560517ea0ec0
| |         `-CXXThisExpr 0x560517ec50e0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x560517ea0da0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x560517ea0570 Slot::store 'void ()' ]
| | `-CompoundStmt 0x560517ec5348 <col:22, line:844:9>
| |   `-CallExpr 0x560517ec52b0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x560517ec5298 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x560517ec5278 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x560517b12f38 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x560517ec52e8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x560517ec51c8 <col:20> 'void *' lvalue ->_ptr 0x560517ea0e58
| |     |   `-CXXThisExpr 0x560517ec51b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x560517ec5318 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x560517ec5300 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x560517ec5208 <col:26> 'char *' lvalue ->_slot 0x560517ea0ec0
| |     |     `-CXXThisExpr 0x560517ec51f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x560517ec5330 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x560517ec5248 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x560517ea0f20
| |         `-CXXThisExpr 0x560517ec5238 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x560517ea0e58 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x560517ea0ec0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x560517ea0f20 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x560517ea1118 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x560517ea1118
| | `-ParmVarDecl 0x560517ea1228 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x560517ea12c8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x560517ea12c8
|   `-ParmVarDecl 0x560517ea13d8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x560517ea1578 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x560517ea1448 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x560517ea14e8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x560517ea1810 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x560517ea1a08 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x560517ea18d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x560517ea1b88 '_ptr' 'T *'
|   | | `-ParenListExpr 0x560517ec5380 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x560517ec5360 <col:20> 'T *' lvalue ParmVar 0x560517ea18d8 'ptr' 'T *'
|   | `-CompoundStmt 0x560517ec53d0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x560517ea1ad8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x560517ea0570 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x560517ec5580 <col:22, line:857:9>
|   |   `-CallExpr 0x560517ec5550 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x560517ec53e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x560517bcb668 0x560517b75998
|   |     |-CXXOperatorCallExpr 0x560517ec54e0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x560517ec5470 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560517dd8618 0x560517dd8238 0x560517dd7e68 0x560517dd7a88 0x560517dd76a8 0x560517dd72d8
|   |     | `-MemberExpr 0x560517ec5440 <col:29> 'T *' lvalue ->_ptr 0x560517ea1b88
|   |     |   `-CXXThisExpr 0x560517ec5430 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x560517ec5520 <col:35> 'T' lvalue ->_slot 0x560517ea1be8
|   |       `-CXXThisExpr 0x560517ec5510 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x560517ea1b88 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x560517ea1be8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x560517ea1c50 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x560517ea1d50 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x560517ea1da0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517ea1d30 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x560517ea1d10 <col:31> 'int' 48
|-FieldDecl 0x560517ea1dc8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x560517ea1e28 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x560517ea1e88 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x560517ea1fc0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x560517eb3190 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x560517eb31f0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x560517eb32a0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x560517eb34c8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x560517eb33d0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x560517eb3618 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x560517eb3588 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x560517eb38e8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x560517eb36d8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x560517eb3758 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x560517eb3800 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x560517eb3af8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x560517eb39b0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x560517eb3a28 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x560517eb3bc8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x560517eb3d18 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x560517eb3c80 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x560517eb40a8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x560517eb3dd8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x560517eb3e58 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x560517eb3f00 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x560517eb3fb8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x560517eb42d0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x560517eb4180 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x560517eb41f8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x560517eb45e8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x560517eb4380 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x560517eb4548 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x560517eb4458 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class KeywordArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517ee3198 <../dummy_inc/click/args.hh:1358:1, line:1362:1> line:1358:7 referenced class KeywordArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517ee32b8 <col:1, col:7> col:7 implicit class KeywordArg
|-AccessSpecDecl 0x560517ee3348 <col:20, col:26> col:20 public
|-CXXMethodDecl 0x560517ee3540 <line:1359:5, line:1361:5> line:1359:17 parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x560517ee3380 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x560517ee33f8 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x560517ee3470 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x560517ee3610 <col:79> 'const ArgContext' lvalue Var 0x560517ec55a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x560517ee3788 <col:91, line:1361:5>
|   `-ReturnStmt 0x560517ee3778 <line:1360:9, col:42>
|     `-CallExpr 0x560517ee3728 <col:16, col:42> 'bool'
|       |-ImplicitCastExpr 0x560517ee3710 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560517ee36f0 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x560517ee30e0 'cp_keyword' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x560517ee3678 <col:27> 'const String' lvalue ParmVar 0x560517ee3380 'str' 'const String &'
|       |-UnaryOperator 0x560517ee36b8 <col:32, col:33> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x560517ee3698 <col:33> 'String' lvalue ParmVar 0x560517ee33f8 'result' 'String &'
|       `-ImplicitCastExpr 0x560517ee3760 <col:41> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x560517ee36d0 <col:41> 'int' 0
|-CXXConstructorDecl 0x560517ef7990 <line:1358:7> col:7 implicit referenced constexpr KeywordArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x560517ef7a98 <col:7> col:7 implicit constexpr KeywordArg 'void (const KeywordArg &)' inline default trivial noexcept-unevaluated 0x560517ef7a98
| `-ParmVarDecl 0x560517ef7ba8 <col:7> col:7 'const KeywordArg &'
|-CXXConstructorDecl 0x560517ef7c48 <col:7> col:7 implicit used constexpr KeywordArg 'void (KeywordArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560517ef7d58 <col:7> col:7 'KeywordArg &&'
| `-CompoundStmt 0x560517ef8480 <col:7>
`-CXXDestructorDecl 0x560517ef7df8 <col:7> col:7 implicit referenced ~KeywordArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.KeywordArg = type { i8 }
  NonVirtualBaseLLVMType:%class.KeywordArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517bd4390 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517bd44a8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x560517bd4538 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x560517bd4608 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x560517bd46f0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x560517bd4908 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560517bd47b0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd4ab8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x560517bd49c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x560517bd4c00 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x560517bd4b70 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x560517bd4d48 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560517bd4cb8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd4e90 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560517bd4e00 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd4f58 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x560517bd50a0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x560517bd5010 <col:28> col:31 'int'
|-CXXMethodDecl 0x560517bd5168 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x560517bd52b0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x560517bd5220 <col:28> col:31 'int'
|-CXXMethodDecl 0x560517bd5428 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x560517bd5368 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd5570 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x560517bd54e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd5638 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x560517bd57f8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560517bd56e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560517bd5760 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd5a48 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560517bd58b8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560517bd5930 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560517bd5af8 <col:86> "" ""
|-CXXMethodDecl 0x560517bd5d68 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x560517bd5bd8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x560517bd5c50 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd5f18 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x560517bd5e28 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x560517bd60c8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x560517bd5fd0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x560517bd6398 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x560517bd6180 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x560517bd61f8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560517bd6270 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd6678 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x560517bd6460 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x560517bd64d8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560517bd6550 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560517bd6730 <col:115> "" ""
|-AccessSpecDecl 0x560517bd67a0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x560517bd67d8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517bd7cf0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x560517bd7cf0
| `-ParmVarDecl 0x560517bd7df8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x560517bd7e98 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x560517bd7e98
| `-ParmVarDecl 0x560517bd7fa8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x560517c0d5d8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560517dff3d0 <col:7>
|-CXXConstructorDecl 0x560517c0d6b0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x560517c0d6b0
| `-ParmVarDecl 0x560517c0d7c8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x560517c0d838 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x560517c0d838
| `-ParmVarDecl 0x560517c0d948 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x560517e01dd0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517dedf78 prev 0x560517de3180 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517dee070 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x560517dee160 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x560517dee288 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x560517dee408 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x560517dee588 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x560517dee708 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x560517dff538 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560517dffda8 <col:11>
|-CXXDestructorDecl 0x560517dff610 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x560517dff748 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x560517dff748
| `-ParmVarDecl 0x560517dff858 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x560517dff8f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560517dff8f8
| `-ParmVarDecl 0x560517dffa08 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x560517e027c8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x560517e028d8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x560517e02b58 <col:11>
|   `-ReturnStmt 0x560517e02b48 <col:11>
|     `-UnaryOperator 0x560517e02b30 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560517e02b20 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x560517e02948 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560517e02948
  `-ParmVarDecl 0x560517e02a58 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517dee770 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517dee888 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x560517dee928 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x560517dee990 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x560517dee9f8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x560517deea60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x560517deeac0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x560517deeb80 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x560517deebe0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x560517deec40 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x560517dff448 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x560517dee928 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x560517dffdb8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x560517dffe10 <col:12>
|-CXXConstructorDecl 0x560517dffa78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x560517dffa78
| `-ParmVarDecl 0x560517dffb88 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x560517dffc28 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x560517dffc28
| `-ParmVarDecl 0x560517dffd38 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x560517e01eb0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517ddc890 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560517ddc9a8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x560517ddca38 <col:16, col:22> col:16 public
|-EnumDecl 0x560517ddca60 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x560517ddcb60 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x560517ddcc40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517ddcb40 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x560517ddcb20 <col:21> 'int' 28
| `-EnumConstantDecl 0x560517ddcbf0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x560517ddcc58 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517ddcbd0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x560517ddcbb0 <col:22> 'int' 64
|-CXXMethodDecl 0x560517ddcf98 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x560517ddcc80 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560517ddcd00 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x560517ddcd78 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560517ddcdf0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560517ddd058 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x560517ddd258 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x560517ddd0d0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x560517ddd148 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560517ddd308 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x560517ddd468 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x560517ddd378 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560517ddd510 <col:72> warn_unused_result ""
|-TypedefDecl 0x560517ddd870 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x560517ddd800 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x560517ddd7a0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x560517ddd760 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5605178b4310 'void'
|       |-PointerType 0x560517b5cc30 'unsigned char *'
|       | `-BuiltinType 0x5605178b4410 'unsigned char'
|       |-TypedefType 0x560517959200 'size_t' sugar
|       | |-Typedef 0x560517924af0 'size_t'
|       | `-BuiltinType 0x5605178b4470 'unsigned long'
|       `-PointerType 0x5605178b4b10 'void *'
|         `-BuiltinType 0x5605178b4310 'void'
|-CXXMethodDecl 0x560517dddce8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x560517ddd8e0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x560517ddd958 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560517ddd9f0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x560517ddda70 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x560517df83e0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x560517df83c8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x560517df8390 <col:58> 'int' 0
| |-ParmVarDecl 0x560517dddaf0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x560517df8408 <col:76> 'int' 0
| |-ParmVarDecl 0x560517dddb70 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x560517df8428 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x560517ddddb8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x560517ddde38 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x560517dddef8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x560517dddf98 <col:20>
| `-OptimizeNoneAttr 0x560517dddff0 <col:30>
|-CXXMethodDecl 0x560517dde068 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x560517dde108 <col:20>
| `-OptimizeNoneAttr 0x560517dde160 <col:30>
|-CXXMethodDecl 0x560517dde1d8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x560517dde278 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x560517dde328 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x560517dde3c8 <col:20>
| |-OptimizeNoneAttr 0x560517dde420 <col:30>
| `-WarnUnusedResultAttr 0x560517dde448 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x560517dde4a0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x560517dde540 <col:20>
| `-OptimizeNoneAttr 0x560517dde598 <col:30>
|-CXXMethodDecl 0x560517dde5e8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x560517dde688 <col:20>
| `-OptimizeNoneAttr 0x560517dde6e0 <col:30>
|-CXXMethodDecl 0x560517dde728 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x560517dde7c8 <col:20>
| `-OptimizeNoneAttr 0x560517dde820 <col:30>
|-CXXMethodDecl 0x560517dde868 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x560517dde928 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x560517dde9f0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x560517ddeab8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x560517ddeb78 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560517ddec98 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x560517df84f0 <col:54, line:99:5>
|   `-ReturnStmt 0x560517df84e0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x560517df84c8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x560517df8498 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x560517deef78
|         `-CXXThisExpr 0x560517df8488 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x560517ddee38 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x560517dded48 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x560517df85a0 <col:67, line:103:5>
|   `-BinaryOperator 0x560517df8580 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x560517df8518 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x560517deef78
|     | `-CXXThisExpr 0x560517df8508 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x560517df8568 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x560517df8548 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x560517dded48 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x560517ddef30 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x560517df8620 <col:33, line:107:5>
|   `-ReturnStmt 0x560517df8610 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x560517df85f8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x560517df85c8 <col:16> 'void *' lvalue ->_destructor_argument 0x560517deefe0
|         `-CXXThisExpr 0x560517df85b8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x560517ddeff0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x560517df8c50 <col:25, line:113:5>
|   |-ParenExpr 0x560517df8998 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x560517df8968 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x560517df86d8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x560517df86b0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x560517df8678 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x560517df8648 <col:24> '<bound member function type>' ->shared 0x560517dde068
|   |   |       `-ImplicitCastExpr 0x560517df8698 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x560517df8638 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x560517df8738 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517df8718 <col:42> 'int' 0
|   |   `-CallExpr 0x560517df88c8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x560517df88b0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517df8890 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517df8908 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517df87a8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x560517df8920 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517df87d0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517df8938 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517df8808 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x560517df8950 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517df8878 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517df8860 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517df8828 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x560517df8b98 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x560517df89c8 <col:2> 'unsigned char *' lvalue ->_head 0x560517deed80
|   | | `-CXXThisExpr 0x560517df89b8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x560517df8b80 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x560517df8b60 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x560517df8a08 <col:10> 'unsigned char *' lvalue ->_data 0x560517deede8
|   |     | `-CXXThisExpr 0x560517df89f8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x560517df8b48 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x560517df8b28 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x560517df8a48 <col:18> 'unsigned char *' lvalue ->_tail 0x560517deee50
|   |         | `-CXXThisExpr 0x560517df8a38 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x560517df8b10 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x560517df8af0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x560517df8a88 <col:26> 'unsigned char *' lvalue ->_end 0x560517deeeb8
|   |             | `-CXXThisExpr 0x560517df8a78 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x560517df8ad8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x560517df8ab8 <col:33> 'int' 0
|   `-BinaryOperator 0x560517df8c30 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x560517df8bc8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x560517deef78
|     | `-CXXThisExpr 0x560517df8bb8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x560517df8c18 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x560517df8bf8 <col:16> 'int' 0
|-CXXMethodDecl 0x560517ddf130 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x560517ddf0a0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517ddf1d8 <col:20>
| |-OptimizeNoneAttr 0x560517ddf230 <col:30>
| `-WarnUnusedResultAttr 0x560517ddf258 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x560517ddf328 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x560517ddf298 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517ddf3d0 <col:20>
| |-OptimizeNoneAttr 0x560517ddf428 <col:30>
| `-WarnUnusedResultAttr 0x560517ddf450 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x560517ddf588 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x560517ddf490 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560517ddf630 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x560517ddf730 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x560517ddf6a0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517ddf7d8 <col:20>
| `-OptimizeNoneAttr 0x560517ddf830 <col:30>
|-CXXMethodDecl 0x560517ddf8f8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x560517ddf868 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560517ddf9a0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x560517ddfaa0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x560517ddfa10 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560517ddfb48 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x560517ddfc48 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x560517ddfbb8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517ddfcf0 <col:20>
| `-OptimizeNoneAttr 0x560517ddfd48 <col:30>
|-CXXMethodDecl 0x560517ddfed8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x560517ddfd88 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x560517ddfe00 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x560517df8448 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x560517ddff88 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x560517de0188 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x560517de0000 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x560517de0078 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517de0398 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560517de0248 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560517de02c0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517de05a8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x560517de0458 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x560517de04d8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x560517df8458 <col:39> 'int' 0
|-CXXMethodDecl 0x560517de0678 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x560517de0740 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x560517de0808 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x560517de08c8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560517de0990 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x560517de0ad8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x560517de0a48 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x560517de0ca8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x560517de0b98 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x560517de0c10 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517de0d78 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x560517de0e38 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x560517de0ed8 <col:20>
| `-OptimizeNoneAttr 0x560517de0f30 <col:30>
|-CXXMethodDecl 0x560517de0f80 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x560517de1020 <col:20>
| `-OptimizeNoneAttr 0x560517de1078 <col:30>
|-CXXMethodDecl 0x560517de10c8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x560517de1188 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560517de1250 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x560517de12f0 <col:20>
| `-OptimizeNoneAttr 0x560517de1348 <col:30>
|-CXXMethodDecl 0x560517de1498 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x560517de1388 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x560517de1400 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517de15e8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x560517de1558 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517de16c0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x560517de1780 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x560517de1820 <col:20>
| `-OptimizeNoneAttr 0x560517de1878 <col:30>
|-CXXMethodDecl 0x560517de18c8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x560517de1968 <col:20>
| `-OptimizeNoneAttr 0x560517de19c0 <col:30>
|-CXXMethodDecl 0x560517de1a10 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x560517de1ad8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x560517de1b78 <col:20>
| `-OptimizeNoneAttr 0x560517de1bd0 <col:30>
|-CXXMethodDecl 0x560517de1c18 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x560517de1d38 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x560517de1ea8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x560517de1de8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x560517de1f98 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x560517de2038 <col:20>
| `-OptimizeNoneAttr 0x560517de2090 <col:30>
|-CXXMethodDecl 0x560517de20e0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x560517de21a0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560517de23d8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x560517de2250 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x560517de22c8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517de2488 <col:20>
| `-OptimizeNoneAttr 0x560517de24e0 <col:30>
|-CXXMethodDecl 0x560517de2588 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x560517de2628 <col:20>
| `-OptimizeNoneAttr 0x560517de2680 <col:30>
|-CXXMethodDecl 0x560517de26d0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x560517de2770 <col:20>
| `-OptimizeNoneAttr 0x560517de27c8 <col:30>
|-CXXMethodDecl 0x560517de2810 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x560517de28b0 <col:20>
| `-OptimizeNoneAttr 0x560517de2908 <col:30>
|-CXXMethodDecl 0x560517de2a08 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x560517de2940 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x560517de2ab0 <col:20>
| `-OptimizeNoneAttr 0x560517de2b08 <col:30>
|-CXXMethodDecl 0x560517de2cc8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x560517de2b40 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x560517de2bb8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517de2d78 <col:20>
| `-OptimizeNoneAttr 0x560517de2dd0 <col:30>
|-CXXMethodDecl 0x560517de2e78 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x560517de2f98 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x560517de30b8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x560517de3158 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x560517de3180 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x560517de32a8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x560517de3348 <col:20>
| `-OptimizeNoneAttr 0x560517de33a0 <col:30>
|-CXXMethodDecl 0x560517de3448 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x560517de34e8 <col:20>
| `-OptimizeNoneAttr 0x560517de3540 <col:30>
|-AccessSpecDecl 0x560517de3568 <line:344:3, col:9> col:3 public
|-EnumDecl 0x560517de3590 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x560517de3690 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x560517de36e0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517de3670 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x560517de3650 <col:14> 'int' 48
|-CXXMethodDecl 0x560517de3748 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x560517de37e8 <col:20>
| `-OptimizeNoneAttr 0x560517de3840 <col:30>
|-CXXMethodDecl 0x560517de38b8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x560517de3958 <col:20>
| `-OptimizeNoneAttr 0x560517de39b0 <col:30>
|-CXXMethodDecl 0x560517de3a78 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x560517de39e8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x560517de3c18 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x560517de3db8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x560517de3cc8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x560517de3e60 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x560517de3f60 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560517de4310 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de3f40 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x560517de3f20 <col:9> 'int' 0
| |-EnumConstantDecl 0x560517de3ff0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560517de4328 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de3fd0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x560517de3fb0 <col:14> 'int' 1
| |-EnumConstantDecl 0x560517de4080 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560517de4340 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de4060 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x560517de4040 <col:14> 'int' 2
| |-EnumConstantDecl 0x560517de4110 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560517de4358 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de40f0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x560517de40d0 <col:14> 'int' 3
| |-EnumConstantDecl 0x560517de41a0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560517de4370 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de4180 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x560517de4160 <col:13> 'int' 4
| |-EnumConstantDecl 0x560517de4230 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560517de4388 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de4210 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x560517de41f0 <col:13> 'int' 5
| `-EnumConstantDecl 0x560517de42c0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x560517de43a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517de42a0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x560517de4280 <col:14> 'int' 6
|-CXXMethodDecl 0x560517de4408 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x560517de44a8 <col:20>
| `-OptimizeNoneAttr 0x560517de4500 <col:30>
|-CXXMethodDecl 0x560517de45f8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x560517de4538 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x560517de46a0 <col:20>
| `-OptimizeNoneAttr 0x560517de46f8 <col:30>
|-CXXMethodDecl 0x560517de4768 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x560517de4890 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x560517de4a08 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x560517de4940 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x560517de4ad0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x560517de4b98 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x560517de4cd8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x560517de4c48 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x560517de4d80 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x560517de4e80 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560517de5080 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de4e60 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x560517de4e40 <col:23> 'int' 0
| |-EnumConstantDecl 0x560517de4f10 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560517de5098 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de4ef0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x560517de4ed0 <col:45> 'int' 4
| |-EnumConstantDecl 0x560517de4fa0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560517de50b0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de4f80 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x560517de4f60 <col:24> 'int' 0
| `-EnumConstantDecl 0x560517de5030 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x560517de50c8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517de5010 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x560517de4ff0 <col:47> 'int' 16
|-CXXMethodDecl 0x560517de5128 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x560517de5298 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x560517de51d8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x560517de5340 <col:20>
| `-OptimizeNoneAttr 0x560517de5398 <col:30>
|-CXXMethodDecl 0x560517de53e8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x560517df8d70 <col:18, col:36>
|   `-ReturnStmt 0x560517df8d60 <col:20, col:33>
|     `-ImplicitCastExpr 0x560517df8d48 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x560517df8d28 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x560517df8cf8 <col:27> '<bound member function type>' ->xanno 0x560517de3448
|           `-CXXThisExpr 0x560517df8ce8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x560517de54e0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x560517df8e80 <col:30, col:48>
|   `-ReturnStmt 0x560517df8e70 <col:32, col:45>
|     `-ImplicitCastExpr 0x560517df8e58 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x560517df8e38 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x560517df8e08 <col:39> '<bound member function type>' ->xanno 0x560517de32a8
|           `-CXXThisExpr 0x560517df8df8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x560517de55c8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x560517df9018 <col:24, col:50>
|   `-ReturnStmt 0x560517df9008 <col:26, col:47>
|     `-UnaryOperator 0x560517df8ff0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560517df8fd0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x560517df8fb8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560517df8f68 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x560517dee288
|         |   `-CXXMemberCallExpr 0x560517df8f48 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x560517df8f18 <col:34> '<bound member function type>' ->xanno 0x560517de3448
|         |       `-CXXThisExpr 0x560517df8f08 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x560517df8f98 <col:46> 'int' 0
|-CXXMethodDecl 0x560517de56d0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x560517df91e8 <col:36, col:62>
|   `-ReturnStmt 0x560517df91d8 <col:38, col:59>
|     `-UnaryOperator 0x560517df91c0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560517df91a0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x560517df9188 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560517df9100 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x560517dee288
|         |   `-CXXMemberCallExpr 0x560517df90e0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560517df90b0 <col:46> '<bound member function type>' ->xanno 0x560517de32a8
|         |       `-CXXThisExpr 0x560517df90a0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x560517df9130 <col:58> 'int' 0
|-CXXMethodDecl 0x560517de57e8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x560517df9380 <col:26, col:53>
|   `-ReturnStmt 0x560517df9370 <col:28, col:50>
|     `-UnaryOperator 0x560517df9358 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560517df9338 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x560517df9320 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560517df92d0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x560517dee588
|         |   `-CXXMemberCallExpr 0x560517df92b0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x560517df9280 <col:36> '<bound member function type>' ->xanno 0x560517de3448
|         |       `-CXXThisExpr 0x560517df9270 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x560517df9300 <col:49> 'int' 0
|-CXXMethodDecl 0x560517de5908 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x560517df9558 <col:38, col:65>
|   `-ReturnStmt 0x560517df9548 <col:40, col:62>
|     `-UnaryOperator 0x560517df9530 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560517df9510 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x560517df94f8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560517df9468 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x560517dee588
|         |   `-CXXMemberCallExpr 0x560517df9448 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560517df9418 <col:48> '<bound member function type>' ->xanno 0x560517de32a8
|         |       `-CXXThisExpr 0x560517df9408 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x560517df9498 <col:61> 'int' 0
|-CXXMethodDecl 0x560517de5ab8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x560517de59c0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x560517df9c28 <col:34, line:463:5>
|   |-ParenExpr 0x560517df9a70 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x560517df9a40 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x560517df96a8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517df9678 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517df95c8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517df95b0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517df9570 <col:23> 'int' lvalue ParmVar 0x560517de59c0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517df9590 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517df9658 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517df9628 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517df95e8 <col:33> 'int' lvalue ParmVar 0x560517de59c0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x560517df9640 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x560517df9608 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x560517df9708 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517df96e8 <col:56> 'int' 0
|   |   `-CallExpr 0x560517df99a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x560517df9988 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517df9968 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517df99e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517df97f8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x560517df99f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517df9828 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517df9a10 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517df9860 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x560517df9a28 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517df9950 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517df9938 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517df98f8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x560517df9c18 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x560517df9c00 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x560517df9be0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x560517df9bb0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560517df9b60 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x560517dee288
|         |   `-CXXMemberCallExpr 0x560517df9b40 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560517df9b10 <col:9> '<bound member function type>' ->xanno 0x560517de32a8
|         |       `-CXXThisExpr 0x560517df9b00 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x560517df9bc8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x560517df9b90 <col:21> 'int' lvalue ParmVar 0x560517de59c0 'i' 'int'
|-CXXMethodDecl 0x560517de5d08 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x560517de5b78 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x560517de5bf0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x560517dfa2b8 <col:40, line:472:5>
|   |-ParenExpr 0x560517dfa0d0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x560517dfa0a0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x560517df9d80 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517df9d50 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517df9ca0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517df9c88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517df9c48 <col:23> 'int' lvalue ParmVar 0x560517de5b78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517df9c68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517df9d30 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517df9d00 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517df9cc0 <col:33> 'int' lvalue ParmVar 0x560517de5b78 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x560517df9d18 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x560517df9ce0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x560517df9de0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517df9dc0 <col:56> 'int' 0
|   |   `-CallExpr 0x560517dfa000 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x560517df9fe8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517df9fc8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfa040 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517df9e50 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x560517dfa058 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517df9e80 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfa070 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517df9eb8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x560517dfa088 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517df9fb0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517df9f98 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517df9f58 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x560517dfa298 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x560517dfa240 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x560517dfa210 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x560517dfa1c0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x560517dee288
|     | |   `-CXXMemberCallExpr 0x560517dfa1a0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x560517dfa170 <col:2> '<bound member function type>' ->xanno 0x560517de3448
|     | |       `-CXXThisExpr 0x560517dfa160 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x560517dfa228 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x560517dfa1f0 <col:14> 'int' lvalue ParmVar 0x560517de5b78 'i' 'int'
|     `-ImplicitCastExpr 0x560517dfa280 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x560517dfa260 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x560517de5bf0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x560517de5ec8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x560517de5dd0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560517dfaa38 <col:36, line:485:5>
|   |-ParenExpr 0x560517dfa7a0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfa770 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfa450 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfa420 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfa330 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfa318 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfa2d8 <col:23> 'int' lvalue ParmVar 0x560517de5dd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfa2f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfa400 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfa3e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfa350 <col:33> 'int' lvalue ParmVar 0x560517de5dd0 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfa3c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfa3b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfa370 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfa390 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560517dfa4b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfa490 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfa6d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfa6b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfa698 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfa710 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfa520 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560517dfa728 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfa558 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfa740 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfa590 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x560517dfa758 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfa680 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfa668 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfa628 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x560517dfaa28 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x560517dfaa10 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x560517dfa9f8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560517dfa9c8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x560517dfa968 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x560517dfa938 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560517dfa8b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x560517dee160
|             |   `-CXXMemberCallExpr 0x560517dfa890 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560517dfa860 <col:61> '<bound member function type>' ->xanno 0x560517de32a8
|             |       `-CXXThisExpr 0x560517dfa850 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560517dfa950 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560517dfa8e0 <col:74> 'int' lvalue ParmVar 0x560517de5dd0 'i' 'int'
|-CXXMethodDecl 0x560517de6118 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x560517de5f88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560517de6000 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x560517dfb188 <col:42, line:500:5>
|   |-ParenExpr 0x560517dfaf20 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfaef0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfabd0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfaba0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfaab0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfaa98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfaa58 <col:23> 'int' lvalue ParmVar 0x560517de5f88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfaa78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfab80 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfab68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfaad0 <col:33> 'int' lvalue ParmVar 0x560517de5f88 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfab48 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfab30 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfaaf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfab10 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560517dfac30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfac10 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfae50 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfae38 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfae18 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfae90 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfaca0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560517dfaea8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfacd8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfaec0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfad10 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x560517dfaed8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfae00 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfade8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfada8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x560517dfb168 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x560517dfb118 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560517dfb0e8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x560517dfb090 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560517dfb060 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560517dfb010 <col:48, col:57> 'char [48]' lvalue ->c 0x560517dee160
|     |     |   `-CXXMemberCallExpr 0x560517dfaff0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560517dfafc0 <col:48> '<bound member function type>' ->xanno 0x560517de3448
|     |     |       `-CXXThisExpr 0x560517dfafb0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560517dfb078 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560517dfb040 <col:61> 'int' lvalue ParmVar 0x560517de5f88 'i' 'int'
|     `-ImplicitCastExpr 0x560517dfb150 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x560517dfb130 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x560517de6000 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x560517de62d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x560517de61e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x560517dfb8e8 <col:35, line:513:5>
|   |-ParenExpr 0x560517dfb5f8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfb5c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfb320 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfb2f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfb200 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfb1e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfb1a8 <col:23> 'int' lvalue ParmVar 0x560517de61e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfb1c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfb2d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfb2b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfb220 <col:33> 'int' lvalue ParmVar 0x560517de61e0 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfb298 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfb280 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfb240 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfb260 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560517dfb380 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfb360 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfb528 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfb510 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfb4f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfb568 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfb3f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560517dfb580 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfb428 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfb598 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfb460 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x560517dfb5b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfb4d8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfb4c0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfb480 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x560517dfb8d8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x560517dfb8c0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x560517dfb8a8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560517dfb878 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x560517dfb7f0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x560517dfb7c0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560517dfb770 <col:60, col:69> 'char const[48]' lvalue ->c 0x560517dee160
|             |   `-CXXMemberCallExpr 0x560517dfb750 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560517dfb720 <col:60> '<bound member function type>' ->xanno 0x560517de32a8
|             |       `-CXXThisExpr 0x560517dfb710 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560517dfb7d8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560517dfb7a0 <col:73> 'int' lvalue ParmVar 0x560517de61e0 'i' 'int'
|-CXXMethodDecl 0x560517de6528 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x560517de6398 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560517de6410 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x560517dfc008 <col:41, line:528:5>
|   |-ParenExpr 0x560517dfbd90 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfbd60 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfba80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfba50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfb960 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfb948 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfb908 <col:23> 'int' lvalue ParmVar 0x560517de6398 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfb928 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfba30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfba18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfb980 <col:33> 'int' lvalue ParmVar 0x560517de6398 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfb9f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfb9e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfb9a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfb9c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560517dfbae0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfbac0 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfbcc0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfbca8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfbc88 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfbd00 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfbb50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560517dfbd18 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfbb88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfbd30 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfbbc0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x560517dfbd48 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfbc70 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfbc58 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfbc18 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x560517dfbfe8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x560517dfbf98 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560517dfbf68 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x560517dfbf10 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560517dfbed0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560517dfbe80 <col:47, col:56> 'char [48]' lvalue ->c 0x560517dee160
|     |     |   `-CXXMemberCallExpr 0x560517dfbe60 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560517dfbe30 <col:47> '<bound member function type>' ->xanno 0x560517de3448
|     |     |       `-CXXThisExpr 0x560517dfbe20 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560517dfbee8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560517dfbeb0 <col:60> 'int' lvalue ParmVar 0x560517de6398 'i' 'int'
|     `-ImplicitCastExpr 0x560517dfbfd0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x560517dfbfb0 <col:65> 'int16_t':'short' lvalue ParmVar 0x560517de6410 'x' 'int16_t':'short'
|-CXXMethodDecl 0x560517de66e8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x560517de65f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560517dfc6d8 <col:36, line:541:5>
|   |-ParenExpr 0x560517dfc478 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfc448 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfc1a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfc170 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfc080 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfc068 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfc028 <col:23> 'int' lvalue ParmVar 0x560517de65f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfc048 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfc150 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfc138 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfc0a0 <col:33> 'int' lvalue ParmVar 0x560517de65f0 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfc118 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfc100 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfc0c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfc0e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x560517dfc200 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfc1e0 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfc3a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfc390 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfc370 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfc3e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfc270 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x560517dfc400 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfc2a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfc418 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfc2e0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x560517dfc430 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfc358 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfc340 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfc300 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x560517dfc6c8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x560517dfc6b0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x560517dfc698 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560517dfc668 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x560517dfc610 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x560517dfc5e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560517dfc590 <col:61, col:70> 'char const[48]' lvalue ->c 0x560517dee160
|             |   `-CXXMemberCallExpr 0x560517dfc570 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560517dfc540 <col:61> '<bound member function type>' ->xanno 0x560517de32a8
|             |       `-CXXThisExpr 0x560517dfc530 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560517dfc5f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560517dfc5c0 <col:74> 'int' lvalue ParmVar 0x560517de65f0 'i' 'int'
|-CXXMethodDecl 0x560517de68b8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x560517de67a8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x560517de6820 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560517de6968 <col:20>
| `-OptimizeNoneAttr 0x560517de69c0 <col:30>
|-CXXMethodDecl 0x560517de6af8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x560517de6a00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x560517dfcda8 <col:35, line:562:5>
|   |-ParenExpr 0x560517dfcb48 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfcb18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfc870 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfc840 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfc750 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfc738 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfc6f8 <col:23> 'int' lvalue ParmVar 0x560517de6a00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfc718 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfc820 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfc808 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfc770 <col:33> 'int' lvalue ParmVar 0x560517de6a00 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfc7e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfc7d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfc790 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfc7b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x560517dfc8d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfc8b0 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfca78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfca60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfca40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfcab8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfc940 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x560517dfcad0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfc978 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfcae8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfc9b0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x560517dfcb00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfca28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfca10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfc9d0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x560517dfcd98 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x560517dfcd80 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x560517dfcd68 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560517dfcd38 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x560517dfcce0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x560517dfccb0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560517dfcc60 <col:60, col:69> 'char const[48]' lvalue ->c 0x560517dee160
|             |   `-CXXMemberCallExpr 0x560517dfcc40 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560517dfcc10 <col:60> '<bound member function type>' ->xanno 0x560517de32a8
|             |       `-CXXThisExpr 0x560517dfcc00 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560517dfccc8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560517dfcc90 <col:73> 'int' lvalue ParmVar 0x560517de6a00 'i' 'int'
|-CXXMethodDecl 0x560517de6d08 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x560517de6bb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560517de6c30 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x560517dfd488 <col:41, line:577:5>
|   |-ParenExpr 0x560517dfd218 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfd1e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfcf40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfcf10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfce20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfce08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfcdc8 <col:23> 'int' lvalue ParmVar 0x560517de6bb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfcde8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfcef0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfced8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfce40 <col:33> 'int' lvalue ParmVar 0x560517de6bb8 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfceb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfcea0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfce60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfce80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x560517dfcfa0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfcf80 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfd148 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfd130 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfd110 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfd188 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfd010 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x560517dfd1a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfd048 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfd1b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfd080 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x560517dfd1d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfd0f8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfd0e0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfd0a0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x560517dfd468 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x560517dfd418 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560517dfd3e8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x560517dfd388 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560517dfd358 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560517dfd308 <col:47, col:56> 'char [48]' lvalue ->c 0x560517dee160
|     |     |   `-CXXMemberCallExpr 0x560517dfd2e8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560517dfd2b8 <col:47> '<bound member function type>' ->xanno 0x560517de3448
|     |     |       `-CXXThisExpr 0x560517dfd2a8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560517dfd370 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560517dfd338 <col:60> 'int' lvalue ParmVar 0x560517de6bb8 'i' 'int'
|     `-ImplicitCastExpr 0x560517dfd450 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x560517dfd430 <col:65> 'int32_t':'int' lvalue ParmVar 0x560517de6c30 'x' 'int32_t':'int'
|-CXXMethodDecl 0x560517de6ec8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x560517de6dd0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560517dfdbb8 <col:36, line:591:5>
|   |-ParenExpr 0x560517dfd8f8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfd8c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfd620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfd5f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfd500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfd4e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfd4a8 <col:23> 'int' lvalue ParmVar 0x560517de6dd0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfd4c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfd5d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfd5b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfd520 <col:33> 'int' lvalue ParmVar 0x560517de6dd0 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfd598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfd580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfd540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfd560 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x560517dfd680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfd660 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfd828 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfd810 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfd7f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfd868 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfd6f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x560517dfd880 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfd728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfd898 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfd760 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x560517dfd8b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfd7d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfd7c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfd780 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x560517dfdba8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x560517dfdb90 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x560517dfdb78 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560517dfdb48 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x560517dfdac0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x560517dfda90 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560517dfda40 <col:61, col:70> 'char const[48]' lvalue ->c 0x560517dee160
|             |   `-CXXMemberCallExpr 0x560517dfda20 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560517dfd9f0 <col:61> '<bound member function type>' ->xanno 0x560517de32a8
|             |       `-CXXThisExpr 0x560517dfd9e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560517dfdaa8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560517dfda70 <col:74> 'int' lvalue ParmVar 0x560517de6dd0 'i' 'int'
|-CXXMethodDecl 0x560517de7118 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x560517de6f88 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560517de7000 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x560517dfe298 <col:42, line:606:5>
|   |-ParenExpr 0x560517dfe028 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x560517dfdff8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfdd50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfdd20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfdc30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfdc18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfdbd8 <col:23> 'int' lvalue ParmVar 0x560517de6f88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfdbf8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfdd00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560517dfdce8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfdc50 <col:33> 'int' lvalue ParmVar 0x560517de6f88 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfdcc8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfdcb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfdc70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560517dfdc90 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x560517dfddb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfdd90 <col:60> 'int' 0
|   |   `-CallExpr 0x560517dfdf58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560517dfdf40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfdf20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfdf98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfde20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x560517dfdfb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfde58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfdfc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfde90 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x560517dfdfe0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfdf08 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfdef0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfdeb0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x560517dfe278 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x560517dfe228 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560517dfe1f8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x560517dfe198 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560517dfe168 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560517dfe118 <col:48, col:57> 'char [48]' lvalue ->c 0x560517dee160
|     |     |   `-CXXMemberCallExpr 0x560517dfe0f8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560517dfe0c8 <col:48> '<bound member function type>' ->xanno 0x560517de3448
|     |     |       `-CXXThisExpr 0x560517dfe0b8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560517dfe180 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560517dfe148 <col:61> 'int' lvalue ParmVar 0x560517de6f88 'i' 'int'
|     `-ImplicitCastExpr 0x560517dfe260 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x560517dfe240 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x560517de7000 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x560517de72b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x560517de71e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x560517dfeb08 <col:33, line:620:5>
|   |-ParenExpr 0x560517dfe880 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x560517dfe850 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfe4a0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfe470 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfe310 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfe2f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfe2b8 <col:23> 'int' lvalue ParmVar 0x560517de71e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfe2d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfe450 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x560517dfe438 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfe330 <col:33> 'int' lvalue ParmVar 0x560517de71e0 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfe418 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfe400 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfe350 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x560517dfe3d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x560517dfe3c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x560517dfe388 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x560517dfe500 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfe4e0 <col:79> 'int' 0
|   |   `-CallExpr 0x560517dfe7b0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x560517dfe798 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfe778 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfe7f0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfe5e8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x560517dfe808 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfe630 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dfe820 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfe668 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x560517dfe838 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfe760 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfe748 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfe708 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x560517dfeaf8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x560517dfeae0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x560517dfeac8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560517dfea98 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x560517dfea10 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x560517dfe9e0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560517dfe990 <col:67, col:76> 'char const[48]' lvalue ->c 0x560517dee160
|             |   `-CXXMemberCallExpr 0x560517dfe970 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560517dfe940 <col:67> '<bound member function type>' ->xanno 0x560517de32a8
|             |       `-CXXThisExpr 0x560517dfe930 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560517dfe9f8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560517dfe9c0 <col:80> 'int' lvalue ParmVar 0x560517de71e0 'i' 'int'
|-CXXMethodDecl 0x560517de74c8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x560517de7370 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560517de73f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x560517dff330 <col:45, line:635:5>
|   |-ParenExpr 0x560517dff078 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x560517dff048 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x560517dfed10 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560517dfece0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560517dfeb80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560517dfeb68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560517dfeb28 <col:23> 'int' lvalue ParmVar 0x560517de7370 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560517dfeb48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560517dfecc0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x560517dfeca8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560517dfeba0 <col:33> 'int' lvalue ParmVar 0x560517de7370 'i' 'int'
|   |   |     `-BinaryOperator 0x560517dfec88 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560517dfec70 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560517dfebc0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560517de3690 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x560517dfec48 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x560517dfec30 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x560517dfebf8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x560517dfed70 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560517dfed50 <col:79> 'int' 0
|   |   `-CallExpr 0x560517dfefa8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x560517dfef90 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560517dfef70 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56051794ffc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560517dfefe8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfede0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x560517dff000 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560517dfee28 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560517dff018 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560517dfee60 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x560517dff030 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560517dfef58 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560517dfef40 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560517dfeef8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x560517dff310 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x560517dff278 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560517dff248 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x560517dff1e8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560517dff1b8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560517dff168 <col:54, col:63> 'char [48]' lvalue ->c 0x560517dee160
|     |     |   `-CXXMemberCallExpr 0x560517dff148 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560517dff118 <col:54> '<bound member function type>' ->xanno 0x560517de3448
|     |     |       `-CXXThisExpr 0x560517dff108 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560517dff1d0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560517dff198 <col:67> 'int' lvalue ParmVar 0x560517de7370 'i' 'int'
|     `-CXXConstCastExpr 0x560517dff2e0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x560517dff2c8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x560517dff290 <col:91> 'const void *' lvalue ParmVar 0x560517de73f0 'x' 'const void *'
|-CXXMethodDecl 0x560517de7598 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x560517dff3b8 <col:34, line:640:5>
|   `-ReturnStmt 0x560517dff3a8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x560517dff390 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x560517dff360 <col:16> 'Packet *' lvalue ->_data_packet 0x560517deed18
|         `-CXXThisExpr 0x560517dff350 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x560517de76d8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x560517de7648 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560517df8478 <col:46> 'bool' true
|-CXXMethodDecl 0x560517de7858 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x560517de7790 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x560517de7900 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x560517de80b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x560517de7a00 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de8120 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de79e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x560517de79c0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x560517ddcb60 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x560517de7a90 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de8138 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7a70 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x560517de7a50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x560517ddcbf0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x560517de7b20 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de8150 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7b00 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x560517de7ae0 <col:21> 'int' 0
| |-EnumConstantDecl 0x560517de7bb0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de8168 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7b90 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x560517de7b70 <col:19> 'int' 16
| |-EnumConstantDecl 0x560517de7c40 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de8180 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7c20 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x560517de7c00 <col:21> 'int' 16
| |-EnumConstantDecl 0x560517de7cd0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de8198 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7cb0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x560517de7c90 <col:19> 'int' 32
| |-EnumConstantDecl 0x560517de7d60 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de81b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7d40 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x560517de7d20 <col:19> 'int' EnumConstant 0x560517de7bb0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x560517de7df0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de81c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7dd0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x560517de7db0 <col:19> 'int' EnumConstant 0x560517de7cd0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x560517de7ec0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de81e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7ea0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x560517de7e80 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x560517de7e40 <col:23> 'int' EnumConstant 0x560517de7df0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x560517de7e60 <col:40> 'int' 2
| |-EnumConstantDecl 0x560517de7f90 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560517de81f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560517de7f70 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x560517de7f50 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x560517de7f10 <col:23> 'int' EnumConstant 0x560517de7df0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x560517de7f30 <col:40> 'int' 4
| `-EnumConstantDecl 0x560517de8060 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x560517de8210 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560517de8040 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x560517de8020 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x560517de7fe0 <col:23> 'int' EnumConstant 0x560517de7df0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x560517de8000 <col:40> 'int' 8
|-CXXMethodDecl 0x560517de8250 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x560517de82f0 <col:68> "" ""
|-CXXMethodDecl 0x560517de8388 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x560517de8428 <col:45> "" ""
|-CXXMethodDecl 0x560517de84c0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x560517de8560 <col:57> "" ""
|-CXXMethodDecl 0x560517de85f8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x560517de8698 <col:45> "" ""
|-CXXMethodDecl 0x560517de8730 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x560517de87d0 <col:57> "" ""
|-CXXMethodDecl 0x560517de8860 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x560517de8900 <col:51> "" ""
|-CXXMethodDecl 0x560517de8990 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x560517de8a30 <col:63> "" ""
|-CXXMethodDecl 0x560517de8ac0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x560517de8b60 <col:53> "" ""
|-CXXMethodDecl 0x560517de8bf0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x560517de8c90 <col:65> "" ""
|-CXXMethodDecl 0x560517de8da8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x560517de8d18 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x560517de8e50 <col:61> "" ""
|-CXXMethodDecl 0x560517de8fe8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x560517de8ed8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x560517de8f50 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x560517de9098 <col:67> "" ""
|-CXXMethodDecl 0x560517de91b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x560517de9120 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560517de9258 <col:63> "" ""
|-CXXMethodDecl 0x560517de93f0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x560517de92e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560517de9358 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x560517de94a0 <col:69> "" ""
|-CXXMethodDecl 0x560517de95b8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x560517de9528 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560517de9660 <col:63> "" ""
|-CXXMethodDecl 0x560517debd38 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x560517debc28 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560517debca0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560517debde8 <col:69> "" ""
|-CXXMethodDecl 0x560517debf00 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x560517debe70 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x560517debfa8 <col:62> "" ""
|-CXXMethodDecl 0x560517dec140 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x560517dec030 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560517dec0a8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x560517dec1f0 <col:68> "" ""
|-CXXMethodDecl 0x560517dec308 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x560517dec278 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560517dec3b0 <col:63> "" ""
|-CXXMethodDecl 0x560517dec548 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x560517dec438 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560517dec4b0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x560517dec5f8 <col:69> "" ""
|-CXXMethodDecl 0x560517dec688 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x560517dec728 <col:64> "" ""
|-CXXMethodDecl 0x560517dec7b8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x560517dec858 <col:52> "" ""
|-CXXMethodDecl 0x560517dec8e8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x560517dec988 <col:67> "" ""
|-CXXMethodDecl 0x560517deca18 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x560517decab8 <col:55> "" ""
|-CXXMethodDecl 0x560517decbd0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x560517decb40 <col:32> col:35 'int'
| `-DeprecatedAttr 0x560517decc78 <col:58> "" ""
|-CXXMethodDecl 0x560517dece10 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x560517decd00 <col:33> col:36 'int'
| |-ParmVarDecl 0x560517decd78 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x560517decec0 <col:62> "" ""
|-CXXMethodDecl 0x560517decfd8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x560517decf48 <col:32> col:35 'int'
| `-DeprecatedAttr 0x560517ded080 <col:58> "" ""
|-CXXMethodDecl 0x560517ded218 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x560517ded108 <col:33> col:36 'int'
| |-ParmVarDecl 0x560517ded180 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x560517ded2c8 <col:62> "" ""
|-CXXMethodDecl 0x560517ded3e0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x560517ded350 <col:34> col:37 'int'
| `-DeprecatedAttr 0x560517ded488 <col:60> "" ""
|-CXXMethodDecl 0x560517ded620 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x560517ded510 <col:34> col:37 'int'
| |-ParmVarDecl 0x560517ded588 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x560517ded6d0 <col:64> "" ""
|-CXXMethodDecl 0x560517ded7e8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x560517ded758 <col:32> col:35 'int'
| `-DeprecatedAttr 0x560517ded890 <col:58> "" ""
|-CXXMethodDecl 0x560517deda28 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x560517ded918 <col:33> col:36 'int'
| |-ParmVarDecl 0x560517ded990 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x560517dedad8 <col:62> "" ""
|-CXXMethodDecl 0x560517dedbf0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x560517dedb60 <col:33> col:36 'int'
| `-DeprecatedAttr 0x560517dedc98 <col:59> "" ""
|-CXXMethodDecl 0x560517dede30 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x560517dedd20 <col:33> col:36 'int'
| |-ParmVarDecl 0x560517dedd98 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560517dedee0 <col:63> "" ""
|-AccessSpecDecl 0x560517dedf50 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x560517dedf78 prev 0x560517de3180 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560517dee070 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x560517dee160 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x560517dee288 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x560517dee408 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x560517dee588 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x560517dee708 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x560517dff538 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x560517dffda8 <col:11>
| |-CXXDestructorDecl 0x560517dff610 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x560517dff748 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x560517dff748
| | `-ParmVarDecl 0x560517dff858 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x560517dff8f8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560517dff8f8
| | `-ParmVarDecl 0x560517dffa08 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x560517e027c8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560517e028d8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x560517e02b58 <col:11>
| |   `-ReturnStmt 0x560517e02b48 <col:11>
| |     `-UnaryOperator 0x560517e02b30 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x560517e02b20 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x560517e02948 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560517e02948
|   `-ParmVarDecl 0x560517e02a58 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x560517dee770 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560517dee888 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x560517dee928 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x560517dee990 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x560517dee9f8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x560517deea60 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x560517deeac0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x560517deeb80 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x560517deebe0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x560517deec40 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x560517dff448 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x560517dee928 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x560517dffdb8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x560517dffe10 <col:12>
| |-CXXConstructorDecl 0x560517dffa78 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x560517dffa78
| | `-ParmVarDecl 0x560517dffb88 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x560517dffc28 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x560517dffc28
| | `-ParmVarDecl 0x560517dffd38 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x560517e01eb0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x560517deecb8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x560517deed18 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x560517deed80 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x560517deede8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x560517deee50 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x560517deeeb8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x560517deef18 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x560517deef78 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x560517deefe0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x560517def068 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x560517deecb8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x560517dff3e0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x560517deef18 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x560517dffe20 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x560517dffe80 <col:21, line:755:5>
|-CXXConstructorDecl 0x560517def208 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x560517def148 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x560517def300 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x560517def4e8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x560517def3f0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x560517def7b8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x560517def5a0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560517def618 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560517def690 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517def9d8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x560517def888 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x560517def900 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x560517df7fb8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x560517defa98 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x560517defb10 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x560517defb88 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x560517df8110 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x560517df8080 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560517df8258 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x560517df81c8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x560517df8350 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class String>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class String * _ptr
        24 |   class String _slot
        24 |     struct String::rep_t _r
        24 |       const char * data
        32 |       int length
        40 |       struct String::memo_t * memo
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class StringArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class String> (empty)
         0 |   class StringArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560517ee25e8 <../dummy_inc/click/args.hh:1345:1, line:1349:1> line:1345:7 referenced class StringArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560517ee2708 <col:1, col:7> col:7 implicit class StringArg
|-AccessSpecDecl 0x560517ee2798 <col:19, col:25> col:19 public
|-CXXMethodDecl 0x560517ee2990 <line:1346:5, line:1348:5> line:1346:17 used parse 'bool (const String &, String &, const ArgContext &)' static
| |-ParmVarDecl 0x560517ee27d0 <col:23, col:37> col:37 used str 'const String &'
| |-ParmVarDecl 0x560517ee2848 <col:42, col:50> col:50 used result 'String &'
| |-ParmVarDecl 0x560517ee28c0 <col:58, col:79> col:77 'const ArgContext &' cinit
| | `-DeclRefExpr 0x560517ee2a60 <col:79> 'const ArgContext' lvalue Var 0x560517ec55a8 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x560517ee2c00 <col:91, line:1348:5>
|   `-ReturnStmt 0x560517ee2bf0 <line:1347:9, col:41>
|     `-CallExpr 0x560517ee2ba0 <col:16, col:41> 'bool'
|       |-ImplicitCastExpr 0x560517ee2b88 <col:16> 'bool (*)(const String &, String *, String *)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560517ee2b40 <col:16> 'bool (const String &, String *, String *)' lvalue Function 0x560517ee2530 'cp_string' 'bool (const String &, String *, String *)'
|       |-DeclRefExpr 0x560517ee2ac8 <col:26> 'const String' lvalue ParmVar 0x560517ee27d0 'str' 'const String &'
|       |-UnaryOperator 0x560517ee2b08 <col:31, col:32> 'String *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x560517ee2ae8 <col:32> 'String' lvalue ParmVar 0x560517ee2848 'result' 'String &'
|       `-ImplicitCastExpr 0x560517ee2bd8 <col:40> 'String *' <NullToPointer>
|         `-IntegerLiteral 0x560517ee2b20 <col:40> 'int' 0
|-CXXConstructorDecl 0x560517f2d7b8 <line:1345:7> col:7 implicit constexpr StringArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x560517f2d890 <col:7> col:7 implicit ~StringArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x560517f2d9c8 <col:7> col:7 implicit constexpr StringArg 'void (const StringArg &)' inline default trivial noexcept-unevaluated 0x560517f2d9c8
| `-ParmVarDecl 0x560517f2dad8 <col:7> col:7 'const StringArg &'
`-CXXConstructorDecl 0x560517f2db78 <col:7> col:7 implicit used constexpr StringArg 'void (StringArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x560517f2dc88 <col:7> col:7 'StringArg &&'
  `-CompoundStmt 0x560517f2e8e0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.StringArg = type { i8 }
  NonVirtualBaseLLVMType:%class.StringArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560517ee2c40 <../dummy_inc/click/args.hh:1351:1, col:58> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'StringArg'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x560517ee2e98 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x560517f2d6c8 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x560517f2dcf8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<String> &)' inline default trivial noexcept-unevaluated 0x560517f2dcf8
| `-ParmVarDecl 0x560517f2de08 <col:19> col:19 'const DefaultArg<String> &'
|-CXXConstructorDecl 0x560517f2dea8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<String> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560517f2dfb8 <col:19> col:19 used 'DefaultArg<String> &&'
| |-CXXCtorInitializer 'StringArg'
| | `-CXXConstructExpr 0x560517f2e8f0 <col:19> 'StringArg' 'void (StringArg &&) noexcept'
| |   `-ImplicitCastExpr 0x560517f2e8c0 <col:19> 'StringArg' xvalue <UncheckedDerivedToBase (StringArg)>
| |     `-CXXStaticCastExpr 0x560517f2e890 <col:19> 'DefaultArg<String>' xvalue static_cast<struct DefaultArg<class String> &&> <NoOp>
| |       `-DeclRefExpr 0x560517f2e860 <col:19> 'DefaultArg<String>' lvalue ParmVar 0x560517f2dfb8 '' 'DefaultArg<String> &&'
| `-CompoundStmt 0x560517f2e960 <col:19>
`-CXXDestructorDecl 0x560517f2e058 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560517f2f628 <../dummy_inc/click/args.hh:850:5, line:860:5> line:851:12 struct SlotT definition
|-DefinitionData polymorphic has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Args::Slot'
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x560517f2fa28 prev 0x560517f2f628 <col:5, col:12> col:12 implicit struct SlotT
|-CXXConstructorDecl 0x560517f2fc20 <line:852:9, line:854:9> line:852:9 used SlotT 'void (String *)'
| |-ParmVarDecl 0x560517f2fb28 <col:15, col:18> col:18 used ptr 'String *'
| |-CXXCtorInitializer 'Args::Slot'
| | `-CXXConstructExpr 0x560517f30b68 <col:9> 'Args::Slot' 'void ()'
| |-CXXCtorInitializer Field 0x560517f2fda0 '_ptr' 'String *'
| | `-ImplicitCastExpr 0x560517f30b28 <line:853:20> 'String *' <LValueToRValue>
| |   `-DeclRefExpr 0x560517f30ae8 <col:20> 'String *' lvalue ParmVar 0x560517f2fb28 'ptr' 'String *'
| |-CXXCtorInitializer Field 0x560517f2fe00 '_slot' 'String':'String'
| | `-CXXConstructExpr 0x560517f30bc8 <line:852:9> 'String':'String' 'void ()'
| `-CompoundStmt 0x560517ec53d0 <line:853:25, line:854:9>
|-CXXMethodDecl 0x560517f2fce0 <line:855:9, line:857:9> line:855:14 used store 'void ()'
| |-Overrides: [ 0x560517ea0570 Slot::store 'void ()' ]
| `-CompoundStmt 0x560517f31308 <col:22, line:857:9>
|   `-CallExpr 0x560517f312c0 <line:856:13, col:40> 'void'
|     |-ImplicitCastExpr 0x560517f312a8 <col:13> 'void (*)(String &, const String &)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x560517f31228 <col:13> 'void (String &, const String &)' lvalue Function 0x560517f31108 'assign_consume' 'void (String &, const String &)' (FunctionTemplate 0x560517b75998 'assign_consume')
|     |-UnaryOperator 0x560517f30d58 <col:28, col:29> 'String':'String' lvalue prefix '*' cannot overflow
|     | `-ImplicitCastExpr 0x560517f30d40 <col:29> 'String *' <LValueToRValue>
|     |   `-MemberExpr 0x560517f30d10 <col:29> 'String *' lvalue ->_ptr 0x560517f2fda0
|     |     `-CXXThisExpr 0x560517f30d00 <col:29> 'Args::SlotT<String> *' implicit this
|     `-ImplicitCastExpr 0x560517f312f0 <col:35> 'const String':'const String' lvalue <NoOp>
|       `-MemberExpr 0x560517f30d80 <col:35> 'String':'String' lvalue ->_slot 0x560517f2fe00
|         `-CXXThisExpr 0x560517f30d70 <col:35> 'Args::SlotT<String> *' implicit this
|-FieldDecl 0x560517f2fda0 <line:858:9, col:12> col:12 referenced _ptr 'String *'
|-FieldDecl 0x560517f2fe00 <line:859:9, col:11> col:11 referenced _slot 'String':'String'
|-CXXConstructorDecl 0x560517f2fe78 <line:851:12> col:12 implicit SlotT 'void (const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x560517f2fe78
| `-ParmVarDecl 0x560517f2ff88 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXConstructorDecl 0x560517f30028 <col:12> col:12 implicit SlotT 'void (Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x560517f30028
| `-ParmVarDecl 0x560517f30138 <col:12> col:12 'Args::SlotT<String> &&'
|-CXXMethodDecl 0x560517f301d8 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(const Args::SlotT<String> &)' inline default noexcept-unevaluated 0x560517f301d8
| `-ParmVarDecl 0x560517f302e8 <col:12> col:12 'const Args::SlotT<String> &'
|-CXXMethodDecl 0x560517f30358 <col:12> col:12 implicit operator= 'Args::SlotT<String> &(Args::SlotT<String> &&)' inline default noexcept-unevaluated 0x560517f30358
| `-ParmVarDecl 0x560517f30468 <col:12> col:12 'Args::SlotT<String> &&'
`-CXXDestructorDecl 0x560517f304f0 <col:12> col:12 implicit used ~SlotT 'void () noexcept' inline default
  |-Overrides: [ 0x560517ea0470 Slot::~Slot 'void () noexcept' ]
  `-CompoundStmt 0x560517f30c30 <col:12>

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  NonVirtualBaseLLVMType:%"struct.Args::SlotT" = type { %"struct.Args::Slot", %class.String*, %class.String }
  IsZeroInitializable:1
  BitFields:[
]>
