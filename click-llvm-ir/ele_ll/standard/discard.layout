
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073b3318 prev 0x5643073aaab8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643073b3410 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5643073b34a0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5643073b3518 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5643073b35d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5643073b36a0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5643073b3818 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5643073b3750 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5643073b38c0 <col:24>
| `-OptimizeNoneAttr 0x5643073b3918 <col:34>
|-CXXMethodDecl 0x5643073b3960 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5643073b3c18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5643073b3a10 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5643073b3a88 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5643073b3b08 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5643073b3cd0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5643073b3d08 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5643073b3d70 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5643073b3df8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5643073b4118 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5643073b3eb0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5643073b3f28 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5643073b3fa0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5643073b4020 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5643073b4230 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5643073bbba8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5643073bbba8
| `-ParmVarDecl 0x5643073bbcb8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5643073bbd58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5643073bbd58
| `-ParmVarDecl 0x5643073bbe68 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5643075477b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073a6330 prev 0x5643073a60b0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643073a6428 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5643073a64b8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5643073a6518 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5643073a6608 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5643073a6708 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5643073a68d8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5643073a6788 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5643073a6800 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5643073a6a68 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5643073a69a0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5643073a6b10 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5643073a6c48 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5643073a6b80 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5643073a6de8 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5643073a6d28 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5643073a6f88 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5643073a6ec8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5643073a7030 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5643073a7130 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5643073a7210 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073a7110 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5643073a70f0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5643073a71c0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5643073a7228 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073a71a0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5643073a7180 <col:44> 'int' 2
|-CXXMethodDecl 0x5643073a7370 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5643073a7258 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5643073a72d8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5643073a74c8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5643073a7438 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5643073a7708 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5643073a7588 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5643073a7600 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5643073a77b8 <col:20>
| `-OptimizeNoneAttr 0x5643073a7810 <col:30>
|-CXXMethodDecl 0x5643073a7918 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5643073a7850 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5643073a79c0 <col:20>
| `-OptimizeNoneAttr 0x5643073a7a18 <col:30>
|-CXXMethodDecl 0x5643073a7a68 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5643073a7b30 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5643073a7c48 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5643073a7cd0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5643073a7d58 <line:57:5, col:33> col:23 used PORTS_1_0 'const char []' static
|-VarDecl 0x5643073a7de0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x5643073a7e68 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5643073a7ef8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5643073a7fb8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5643073a8040 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5643073a80c8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5643073a8150 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5643073a81d8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5643073a8260 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5643073a82f0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5643073a83b0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5643073a8440 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5643073a8590 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5643073a84f8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5643073a8720 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5643073a8650 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5643073a89d0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5643073a87d8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5643073a8858 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5643073a88d8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5643073a8a88 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5643073a8b90 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643073a8e20 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073a8b70 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5643073a8b50 <col:33> 'int' 0
| |-EnumConstantDecl 0x5643073a8c20 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643073a8e38 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073a8c00 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5643073a8be0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5643073a8cb0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643073a8e50 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073a8c90 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5643073a8c70 <col:38> 'int' 90
| |-EnumConstantDecl 0x5643073a8d40 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5643073a8e68 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073a8d20 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5643073a8d00 <col:35> 'int' 100
| `-EnumConstantDecl 0x5643073a8dd0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5643073a8e80 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073a8db0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5643073a8d90 <col:32> 'int' 2000
|-CXXMethodDecl 0x5643073a8ec0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5643073a9300 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5643073a9170 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5643073a91e8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643073a93d0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5643073a9550 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5643073a9480 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643073a9758 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5643073a9608 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5643073a9680 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643073a9858 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5643073a98f8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5643073a99c0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643073a9a50 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5643073a9c80 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073a9a30 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5643073a9a10 <col:36> 'int' EnumConstant 0x5643073a99c0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643073a9aa0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643073a9af0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643073a9b40 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643073a9b90 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5643073a9be0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5643073a9c30 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5643073a9d68 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5643073a9ca8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5643073a9e30 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5643073a9ef0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5643073a9fb0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5643073aa070 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5643073aa188 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5643073aa250 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5643073aa3d0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5643073aa300 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5643073aa4f8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5643073aa6f8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5643073aa5a8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5643073aa628 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5643073b8048 <col:54, line:127:5>
|   |-ParenExpr 0x5643073b7ef8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5643073b7ec8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5643073b7bb8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5643073b7b90 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5643073b7b78 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5643073b7b60 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5643073b7b30 <col:31> 'Router *' lvalue ->_router 0x5643073b5a10
|   |   |         `-CXXThisExpr 0x5643073b7b20 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5643073b7c18 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5643073b7bf8 <col:48> 'int' 0
|   |   `-CallExpr 0x5643073b7e28 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5643073b7e10 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643073b7df0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5643073b7e68 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643073b7c88 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5643073b7e80 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643073b7ca8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5643073b7e98 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5643073b7ce0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5643073b7eb0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643073b7dd8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643073b7dc0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5643073b7d78 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5643073b7f90 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5643073b7f28 <col:9> 'Router *' lvalue ->_router 0x5643073b5a10
|   | | `-CXXThisExpr 0x5643073b7f18 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5643073b7f78 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5643073b7f58 <col:19> 'Router *' lvalue ParmVar 0x5643073aa5a8 'r' 'Router *'
|   `-BinaryOperator 0x5643073b8028 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5643073b7fc0 <col:9> 'int' lvalue ->_eindex 0x5643073b5a78
|     | `-CXXThisExpr 0x5643073b7fb0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5643073b8010 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5643073b7ff0 <col:19> 'int' lvalue ParmVar 0x5643073aa628 'eindex' 'int'
|-CXXMethodDecl 0x5643073aa880 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5643073aa7b8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5643073aa950 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5643073aaa18 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5643073aaab8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5643073aad08 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5643073aab80 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5643073aac00 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5643073aadb8 <col:20>
| `-OptimizeNoneAttr 0x5643073aae10 <col:30>
|-CXXMethodDecl 0x5643073aaf18 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5643073aae50 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5643073aafc0 <col:20>
| `-OptimizeNoneAttr 0x5643073ab018 <col:30>
|-CXXMethodDecl 0x5643073ab0e8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5643073ab058 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5643073ab190 <col:20>
| `-OptimizeNoneAttr 0x5643073ab1e8 <col:30>
|-CXXMethodDecl 0x5643073ab378 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5643073ab220 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5643073ab2a0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5643073ab508 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5643073ab440 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5643073ab658 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5643073ab5c8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5643073ab7a8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5643073ab718 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5643073ab8f8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5643073ab868 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5643073abbb8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5643073ab9b0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5643073aba30 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5643073abad8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5643073abc90 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5643073abd50 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5643073ac020 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5643073abed0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5643073abf48 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5643073ac148 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5643073ac320 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5643073ac200 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5643073ac280 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5643073ac508 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5643073ac3e8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5643073ac468 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5643073ac878 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5643073ac5c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5643073ac640 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5643073ac6c0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5643073b7630 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5643073b7610 <col:106> 'int' 0
| `-ParmVarDecl 0x5643073ac738 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643073b7668 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643073b7648 <col:126> 'int' 0
|-CXXMethodDecl 0x5643073acc18 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643073ac948 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5643073ac9e0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5643073aca60 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5643073acad8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643073b76a0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643073b7680 <col:114> 'int' 0
|-CXXMethodDecl 0x5643073acfa8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643073accf0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5643073acd68 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5643073acde8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5643073b76b8 <col:96> 'int' 0
| `-ParmVarDecl 0x5643073ace60 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643073b76f8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643073b76d8 <col:116> 'int' 0
|-CXXMethodDecl 0x5643073ad328 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5643073ad078 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5643073ad0f0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5643073ad170 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5643073b7730 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5643073b7710 <col:109> 'int' 0
| `-ParmVarDecl 0x5643073ad1e8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643073b7768 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643073b7748 <col:129> 'int' 0
|-CXXMethodDecl 0x5643073ad6a8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643073ad3f8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5643073ad470 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5643073ad4f0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5643073ad568 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643073b77a0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643073b7780 <col:117> 'int' 0
|-CXXMethodDecl 0x5643073ada38 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5643073ad780 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073ad7f8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5643073ad878 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5643073b77b8 <col:99> 'int' 0
| `-ParmVarDecl 0x5643073ad8f0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5643073b77f8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5643073b77d8 <col:119> 'int' 0
|-CXXMethodDecl 0x5643073ade58 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5643073adb08 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5643073adb88 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5643073adc00 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5643073adc80 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5643073b7830 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5643073b7810 <col:108> 'int' 0
| `-ParmVarDecl 0x5643073add00 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5643073b7868 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5643073b7848 <col:141> 'int' 0
|-CXXMethodDecl 0x5643073ae278 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5643073adf30 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5643073adfb0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5643073ae028 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5643073ae0a8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5643073ae128 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5643073b7880 <col:121> 'int' 0
|-CXXMethodDecl 0x5643073ae6a8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5643073ae358 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5643073ae3d8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5643073ae450 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5643073ae4d0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5643073b78a0 <col:98> 'int' 0
| `-ParmVarDecl 0x5643073ae550 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5643073b78c0 <col:123> 'int' 0
|-CXXMethodDecl 0x5643073ae970 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5643073ae780 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5643073ae800 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5643073ae880 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5643073b78e0 <col:80> 'int' 0
|-EnumDecl 0x5643073aea28 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5643073aeb30 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643073aedc0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073aeb10 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5643073aeaf0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5643073aebc0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643073aedd8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073aeba0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5643073aeb80 <col:40> 'int' 2
| |-EnumConstantDecl 0x5643073aec50 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643073aedf0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073aec30 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5643073aec10 <col:44> 'int' 4
| |-EnumConstantDecl 0x5643073aece0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5643073aee08 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073aecc0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5643073aeca0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5643073aed70 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5643073aee20 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073aed50 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5643073aed30 <col:34> 'int' 6
|-CXXMethodDecl 0x5643073af0d8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5643073aee48 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5643073aeee8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5643073aef68 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5643073aefe0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5643073b7998 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5643073b7980 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5643073b7968 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5643073b7948 <col:98, col:105> 'String' (CXXTemporary 0x5643073b7948)
|           `-CXXTemporaryObjectExpr 0x5643073b7910 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5643073af378 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5643073af1a8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5643073af220 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5643073af298 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5643073b7a48 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5643073b7a30 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5643073b7a18 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5643073b79f8 <col:94, col:101> 'String' (CXXTemporary 0x5643073b79f8)
| |         `-CXXTemporaryObjectExpr 0x5643073b79c0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5643073b8230 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5643073b81a8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5643073b8178 <col:9> '<bound member function type>' ->add_task_handlers 0x5643073af0d8
|     | `-CXXThisExpr 0x5643073b8168 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5643073b81e8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643073b80e8 <col:27> 'Task *' lvalue ParmVar 0x5643073af1a8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5643073b8200 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643073b8108 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5643073af220 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5643073b8218 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5643073b8128 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5643073aed70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5643073b8148 <col:62> 'const String' lvalue ParmVar 0x5643073af298 'prefix' 'const String &'
|-CXXMethodDecl 0x5643073af588 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5643073af440 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5643073af4b8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5643073b7af8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5643073b7ae0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5643073b7ac8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5643073b7aa8 <col:70, col:77> 'String' (CXXTemporary 0x5643073b7aa8)
| |         `-CXXTemporaryObjectExpr 0x5643073b7a70 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5643073b8408 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5643073b8380 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5643073b8350 <col:9> '<bound member function type>' ->add_task_handlers 0x5643073af0d8
|     | `-CXXThisExpr 0x5643073b8340 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5643073b83c0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5643073b82c0 <col:27> 'Task *' lvalue ParmVar 0x5643073af440 'task' 'Task *'
|     |-ImplicitCastExpr 0x5643073b83d8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5643073b82e0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5643073b83f0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5643073b8300 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5643073aed70 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5643073b8320 <col:57> 'const String' lvalue ParmVar 0x5643073af4b8 'prefix' 'const String &'
|-CXXMethodDecl 0x5643073af868 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5643073af650 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073af6d0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073af748 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5643073afb18 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5643073af938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073af9b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073afa38 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5643073afe08 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5643073afbe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073afc68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073afce0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5643073b00b8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5643073afed8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073aff58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073affd8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5643073b0368 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5643073b0188 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b0208 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b0288 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5643073b0618 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5643073b0438 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b04b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b0530 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5643073b08c8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5643073b06e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b0768 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b07e8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5643073b0bd8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5643073b09f0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b0a70 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b0af0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5643073b0eb8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5643073b0ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b0d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b0dd0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5643073b1198 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5643073b0f88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b1008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b10b0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5643073b1400 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5643073b1268 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5643073b12e8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5643073b1360 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5643073b16a8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5643073b14d0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5643073b1550 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5643073b15c8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5643073b1958 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5643073b1778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b17f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b1878 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5643073b1c08 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5643073b1a28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b1aa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b1b20 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5643073b1eb8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5643073b1cd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b1d58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b1dd0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5643073b2188 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5643073b1f88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b2008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5643073b20a8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5643073b24b8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5643073b2258 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5643073b22d8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5643073b2350 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5643073b23c8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5643073b7b10 <col:93> 'bool' false
|-CXXMethodDecl 0x5643073b26a0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5643073b2588 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5643073b2608 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5643073b2878 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5643073b2760 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5643073b27e0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5643073b2b58 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5643073b2938 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5643073b29b0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5643073b2a30 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5643073b2aa8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5643073b2e48 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5643073b2c28 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5643073b2ca0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5643073b2d20 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5643073b2d98 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5643073b3080 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5643073b2f20 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5643073b2fa0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5643073b3268 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5643073b3148 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5643073b31c8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5643073b3318 prev 0x5643073aaab8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5643073b3410 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5643073b34a0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5643073b3518 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5643073b35d8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5643073b36a0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5643073b3818 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5643073b3750 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5643073b38c0 <col:24>
| | `-OptimizeNoneAttr 0x5643073b3918 <col:34>
| |-CXXMethodDecl 0x5643073b3960 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5643073b3c18 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5643073b3a10 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5643073b3a88 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5643073b3b08 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5643073b3cd0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5643073b3d08 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5643073b3d70 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5643073b3df8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5643073b4118 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5643073b3eb0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5643073b3f28 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5643073b3fa0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5643073b4020 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5643073b4230 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5643073bbba8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5643073bbba8
| | `-ParmVarDecl 0x5643073bbcb8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5643073bbd58 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5643073bbd58
| | `-ParmVarDecl 0x5643073bbe68 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5643075477b0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5643073b42a8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5643073b4348 <col:38> "" ""
|-CXXMethodDecl 0x5643073b43d8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5643073b4478 <col:44> "" ""
|-AccessSpecDecl 0x5643073b44e8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5643073b4510 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5643073b4610 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5643073b4660 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073b45f0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5643073b45d0 <col:27> 'int' 4
|-FieldDecl 0x5643073b4718 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5643073b48c8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5643073b4980 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5643073b5a10 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5643073b5a78 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5643073b5bc8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5643073b5b08 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5643073b5d78 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5643073b5c88 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5643073b5f58 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5643073b5e38 <col:20> col:23 'int'
| `-ParmVarDecl 0x5643073b5eb8 <col:25> col:28 'int'
|-CXXMethodDecl 0x5643073b6200 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5643073b6020 <col:23> col:26 'int'
| |-ParmVarDecl 0x5643073b60a0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5643073b6118 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5643073b62b8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5643073b6380 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5643073b63d0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5643073b6420 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5643073b6600 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5643073b64b0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5643073b6528 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5643073b68a8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5643073b66c8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5643073b6748 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5643073b67c0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5643073b6ac8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5643073b6978 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5643073b69f8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5643073b6e00 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5643073b6b88 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5643073b6c08 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5643073b6c80 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5643073b6d00 <col:57> col:60 'int'
|-CXXMethodDecl 0x5643073b6fe8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5643073b6ed0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5643073b6f50 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5643073b7138 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5643073b70a8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5643073b74b8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5643073b71f8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5643073b7278 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5643073b72f0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5643073b7370 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5643073b75d0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | union NotifierSignal::vmvalue
         0 |   class atomic_uint32_t * v1
         0 |   struct NotifierSignal::vmpair * vm
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class NotifierSignal
         0 |   union NotifierSignal::vmvalue _v
         0 |     class atomic_uint32_t * v1
         0 |     struct NotifierSignal::vmpair * vm
         8 |   uint32_t _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Discard
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Task _task
       112 |     struct TaskLink (base)
       112 |       struct TaskLink * _prev
       120 |       struct TaskLink * _next
       128 |       unsigned int _pass
       132 |     unsigned int _stride
       136 |     int _tickets
       140 |     union Task::Status _status
       140 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       140 |         int16_t home_thread_id
       142 |         uint8_t is_scheduled
       143 |         uint8_t is_strong_unscheduled
       140 |       uint32_t status
       144 |     TaskCallback _hook
       152 |     void * _thunk
       160 |     class RouterThread * _thread
       168 |     class Element * _owner
       176 |     union Task::Pending _pending_nextptr
       176 |       class Task * t
       176 |       uintptr_t x
       184 |   class NotifierSignal _signal
       184 |     union NotifierSignal::vmvalue _v
       184 |       class atomic_uint32_t * v1
       184 |       struct NotifierSignal::vmpair * vm
       192 |     uint32_t _mask
       200 |   Discard::counter_t _count
       208 |   unsigned int _burst
       212 |   _Bool _active
           | [sizeof=216, dsize=213, align=8,
           |  nvsize=213, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073c3c50 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643073c3d68 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x5643073c3e38 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x5643073c3e98 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x5643073c3f00 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x5643073c3f88 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x5643073c41f0 <col:16, line:46:5>
|   |-BinaryOperator 0x5643073c4138 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x5643073c4058 <col:9> 'TaskLink *' lvalue ->_prev 0x5643073c3e38
|   | | `-CXXThisExpr 0x5643073c4048 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x5643073c4120 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x5643073c4100 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x5643073c4098 <col:17> 'TaskLink *' lvalue ->_next 0x5643073c3e98
|   |     | `-CXXThisExpr 0x5643073c4088 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x5643073c40e8 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x5643073c40c8 <col:25> 'int' 0
|   `-BinaryOperator 0x5643073c41d0 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x5643073c4168 <col:9> 'unsigned int' lvalue ->_pass 0x5643073c3f00
|     | `-CXXThisExpr 0x5643073c4158 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x5643073c41b8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5643073c4198 <col:17> 'int' 0
|-CXXConstructorDecl 0x564307450728 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x564307450728
| `-ParmVarDecl 0x564307450838 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5643074508d8 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5643074508d8
| `-ParmVarDecl 0x5643074509e8 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x564307450bd8 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5643074513d8 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x5643074513d8
| `-ParmVarDecl 0x5643074514e8 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x564307451558 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x564307451558
  `-ParmVarDecl 0x564307451668 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307327318 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x564307327448 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x5643073274a8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x564307327508 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5643074578e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5643074579c0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564307457c78 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x564307457c78
| `-ParmVarDecl 0x564307457d88 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x564307457e28 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x564307457e28
  `-ParmVarDecl 0x564307457f38 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307327168 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564307327288 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x564307327318 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x564307327448 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x5643073274a8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x564307327508 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5643074578e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5643074579c0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x564307457c78 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x564307457c78
| | `-ParmVarDecl 0x564307457d88 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x564307457e28 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x564307457e28
|   `-ParmVarDecl 0x564307457f38 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x5643073275c8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x564307327628 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x5643073275c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x564307327448 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x564307327680 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x5643073275c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x5643073274a8 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x5643073276d8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x5643073275c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x564307327508 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x564307327730 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5643074577f8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564307458158 <col:11>
|-CXXConstructorDecl 0x564307457ac8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x564307457ac8
| `-ParmVarDecl 0x564307457bd8 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x564307457fd8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x564307457fd8
| `-ParmVarDecl 0x5643074580e8 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x5643075476c8 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430733ec60 prev 0x564307335aa0 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430733ed58 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x56430733edf8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x564307345bc0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564307345fa8 <col:11>
|-CXXConstructorDecl 0x564307345ca0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564307345d88 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x5643073466f0 <col:11>
|-CXXConstructorDecl 0x564307345e28 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564307345f38 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x564307347f48 <col:11>
|-CXXDestructorDecl 0x564307347258 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56430704de08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56430704df18 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56430704e7e0 <col:11>
|   `-ReturnStmt 0x56430704e7d0 <col:11>
|     `-UnaryOperator 0x56430704e7b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56430704e7a8 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x56430704df88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56430704e098 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5643073e0680 <col:11>
    `-ReturnStmt 0x5643073e0670 <col:11>
      `-UnaryOperator 0x5643073e0658 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5643073e0648 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307334c58 prev 0x564307334968 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564307334d50 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x564307334de0 <col:19, col:25> col:19 public
|-TypedefDecl 0x564307334e18 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x564306f99fe0 'int32_t' sugar
|   |-Typedef 0x564306eaa328 'int32_t'
|   `-TypedefType 0x564306e83510 '__int32_t' sugar
|     |-Typedef 0x564306e83128 '__int32_t'
|     `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307334e80 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x564306f9a1a0 'int64_t' sugar
|   |-Typedef 0x564306eaa390 'int64_t'
|   `-TypedefType 0x564306e83630 '__int64_t' sugar
|     |-Typedef 0x564306e83208 '__int64_t'
|     `-BuiltinType 0x564306e415a0 'long'
|-EnumDecl 0x564307334ed8 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x564307335050 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x564307335030 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x564307335008 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x564307334ff0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x564307334fc0 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x564307335148 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x564307335128 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x564307335100 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x5643073350e8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x5643073350c0 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x5643073350a0 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x564307335198 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x5643073352a0 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x5643073357f0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307335280 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x564307335260 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x564307335330 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335808 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307335310 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x5643073352f0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x5643073353c0 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335820 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073353a0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x564307335380 <col:25> 'int' 1000
| |-EnumConstantDecl 0x564307335450 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335838 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307335430 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x564307335410 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x5643073354e0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335850 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073354c0 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x5643073354a0 <col:25> 'int' 1000
| |-EnumConstantDecl 0x564307335570 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335868 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307335550 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x564307335530 <col:24> 'int' 1000
| |-EnumConstantDecl 0x564307335600 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335880 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073355e0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x5643073355c0 <col:26> 'int' EnumConstant 0x5643073352a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x5643073356d0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x564307335898 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073356b0 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x564307335690 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x564307335650 <col:27> 'int' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x564307335670 <col:44> 'int' EnumConstant 0x564307335570 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x5643073357a0 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x5643073358b0 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564307335780 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x564307335760 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x564307335720 <col:27> 'int' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x564307335740 <col:44> 'int' EnumConstant 0x564307335450 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x5643073358c8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x5643073359d0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x564307335a20 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073359b0 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x564307335990 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x564307335a48 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x564306f99c10 'uninitialized_type'
|   `-CXXRecord 0x564306f99b78 'uninitialized_type'
|-CXXRecordDecl 0x564307335aa0 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x564307335bb0 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307345fb8 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5643073460d8 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x564307346090 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x564307346020 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x564307346010 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x564307346050 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x5643073460c0 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x564307346070 <col:19> 'int' 0
|-CXXConstructorDecl 0x564307335df8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x564307335c70 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x564307335ce8 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5643073418f0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5643073418d0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5643073460f0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564307346240 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x5643073461c8 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x564307346158 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x564307346148 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564307346210 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5643073461f8 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x564307346188 <col:16> 'long' lvalue ParmVar 0x564307335c70 'sec' 'long'
|     `-ImplicitCastExpr 0x564307346228 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5643073461a8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307335ce8 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564307336058 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x564307335ec8 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x564307335f40 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564307341928 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564307341908 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307346258 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564307346390 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x564307346330 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x5643073462c0 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x5643073462b0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564307346360 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5643073462f0 <col:16> 'int' lvalue ParmVar 0x564307335ec8 'sec' 'int'
|     `-ImplicitCastExpr 0x564307346378 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x564307346310 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307335f40 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5643073362b8 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x564307336128 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x5643073361a0 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564307341960 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564307341940 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5643073463a8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5643073464f8 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x564307346480 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x564307346410 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x564307346400 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5643073464c8 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x5643073464b0 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x564307346440 <col:16> 'unsigned long' lvalue ParmVar 0x564307336128 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x5643073464e0 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x564307346460 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5643073361a0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x564307337450 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x564307336388 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x564307336400 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564307341998 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x564307341978 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307346510 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564307346660 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x5643073465e8 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x564307346578 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x564307346568 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564307346630 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x564307346618 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5643073465a8 <col:16> 'unsigned int' lvalue ParmVar 0x564307336388 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x564307346648 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x5643073465c8 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307336400 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5643073375b0 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x564307337520 <col:31> col:37 'double'
|-CXXConstructorDecl 0x564307337748 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x564307337688 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x564307337978 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x564307337880 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x564307337b28 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x564307337a68 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307346700 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x564307346678 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x564307337a68 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x564307346760 <col:19, line:214:5>
|-CXXConstructorDecl 0x564307337cf8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x564307337c38 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307346770 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564307346820 <col:53, line:219:5>
|   `-CStyleCastExpr 0x5643073467f8 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x5643073467c8 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x564307337c38 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x564307337ee8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x564307337e60 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x564307334a00 'Timestamp'
|   | `-CXXRecord 0x564307334c58 'Timestamp'
|   `-ParenType 0x564307337e00 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x564307337dd0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x564307334fa0 'Timestamp::seconds_type' sugar
|         |-Typedef 0x564307334e18 'seconds_type'
|         `-TypedefType 0x564306f99fe0 'int32_t' sugar
|           |-Typedef 0x564306eaa328 'int32_t'
|           `-TypedefType 0x564306e83510 '__int32_t' sugar
|             |-Typedef 0x564306e83128 '__int32_t'
|             `-BuiltinType 0x564306e41580 'int'
|-CXXConversionDecl 0x564307338028 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5643073380f8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x564307346928 <col:37, line:231:5>
|   `-ReturnStmt 0x564307346918 <line:227:9, col:23>
|     `-BinaryOperator 0x5643073468f8 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x5643073468c8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564307346878 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56430733edf8
|       |   `-MemberExpr 0x564307346848 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56430733fda8
|       |     `-CXXThisExpr 0x564307346838 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x5643073468e0 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x5643073468a8 <col:23> 'int' 0
|-CXXMethodDecl 0x5643073381b8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x564307338278 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x564307338338 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5643073383f8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x5643073384b8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x564307338628 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x564307338568 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x564307338770 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5643073386e0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307338838 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5643073388d8 <col:54> "" ""
|-CXXMethodDecl 0x564307338968 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x564307338a08 <col:54> "" ""
|-CXXMethodDecl 0x564307338a98 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x564307338b38 <col:54> "" ""
|-CXXMethodDecl 0x564307338c38 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x564307338d08 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x564307338e38 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x564307338f30 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x564307339068 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x564307346b40 <col:39, line:271:5>
|   `-ReturnStmt 0x564307346b30 <line:267:9, col:61>
|     `-CallExpr 0x564307346ad0 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x564307346ab8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564307346940 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5643073400d8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x564307346b00 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x5643073469a0 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56430733edf8
|       |   `-MemberExpr 0x564307346970 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56430733fda8
|       |     `-CXXThisExpr 0x564307346960 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564307346b18 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x564307346a40 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x564307346a10 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x5643073469d0 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x564307346a28 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x5643073469f0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335570 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x564307339128 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x564307346d00 <col:39, line:279:5>
|   `-ReturnStmt 0x564307346cf0 <line:275:9, col:61>
|     `-CallExpr 0x564307346c90 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x564307346c78 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564307346b58 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5643073400d8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x564307346cc0 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564307346bb8 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56430733edf8
|       |   `-MemberExpr 0x564307346b88 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56430733fda8
|       |     `-CXXThisExpr 0x564307346b78 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564307346cd8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x564307346c58 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x564307346c28 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x564307346be8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x564307346c40 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x564307346c08 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335450 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5643073391e8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x564307346e98 <col:39, line:287:5>
|   `-ReturnStmt 0x564307346e88 <line:283:9, col:53>
|     `-BinaryOperator 0x564307346e68 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x564307346e38 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x564307346d58 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56430733edf8
|       |   `-MemberExpr 0x564307346d28 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56430733fda8
|       |     `-CXXThisExpr 0x564307346d18 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x564307346e50 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x564307346e18 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564307346df8 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x564307346dc8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307346d88 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073352a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307346de0 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307346da8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5643073392d8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x564307348130 <col:40, line:293:5>
|   |-DeclStmt 0x564307346fe0 <line:291:9, col:48>
|   | `-VarDecl 0x564307346ec0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x564307346fc0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x564307346f68 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x564307346f38 <col:22> '<bound member function type>' ->subsec 0x564307338278
|   |     |   `-CXXThisExpr 0x564307346f28 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x564307346fa8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x564307346f88 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073356d0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564307348120 <line:292:9, col:70>
|     `-ExprWithCleanups 0x564307348108 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x5643073480d8 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5643073480c0 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5643073480a0 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x564307348070 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x564307347e08 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x564307347df0 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x564307346ff8 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x564307346ec0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x564307348010 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x564307347ff8 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x564307347fc8 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x564307347e20 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x564307347d90 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x564307347d78 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x564307347d28 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564307334ba8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x564307347cc8 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x564307347028 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x564307347018 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x564307347d10 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x564307347cf8 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5643073474e8 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x564307347050 <col:39> 'int' 0
|               |               `-BinaryOperator 0x5643073470e0 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x5643073470b0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x564307347070 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073356d0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x5643073470c8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x564307347090 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x564307346ec0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x564307348040 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x564307347dd8 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x564307347dc8 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x564307339398 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x564307348688 <col:40, line:302:5>
|   |-DeclStmt 0x564307348280 <line:297:9, col:48>
|   | `-VarDecl 0x564307348160 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x564307348260 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x564307348208 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x5643073481d8 <col:22> '<bound member function type>' ->subsec 0x564307338278
|   |     |   `-CXXThisExpr 0x5643073481c8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x564307348248 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x564307348228 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073357a0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564307348678 <line:298:9, col:70>
|     `-ExprWithCleanups 0x564307348660 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x564307348630 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564307348618 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x5643073485f8 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5643073485c8 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x5643073484f0 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x5643073484d8 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x564307348298 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x564307348160 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x564307348568 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x564307348550 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x564307348520 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x564307348508 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x564307348478 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x564307348460 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x564307348440 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564307334ba8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x5643073483e0 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x5643073482c8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x5643073482b8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x564307348428 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x564307348410 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x5643073483a0 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x5643073482f0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x564307348380 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x564307348350 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x564307348310 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073357a0 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x564307348368 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x564307348330 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x564307348160 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x564307348598 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x5643073484c0 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x5643073484b0 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x564307339458 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x564307348710 <col:40, line:306:5>
|   `-ReturnStmt 0x564307348700 <line:305:9, col:17>
|     `-CXXConstructExpr 0x5643073486d0 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x5643073486b8 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5643073486a8 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5643073395f8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x564307339508 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5643073397c8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5643073396d0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x5643073398b8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x564307339a28 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x564307339968 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x564307348858 <col:56, line:320:5>
|   `-ReturnStmt 0x564307348848 <line:319:9, col:32>
|     `-ExprWithCleanups 0x564307348830 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x564307348800 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5643073487e8 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5643073487a8 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x564307348778 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564307348738 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564307339968 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x564307348790 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x564307348758 <col:31> 'int' 0
|-CXXMethodDecl 0x564307339c68 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x564307339ae0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564307339b58 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307348a28 <col:72, line:326:5>
|   `-ReturnStmt 0x564307348a18 <line:325:9, col:51>
|     `-ExprWithCleanups 0x564307348a00 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x5643073489d0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5643073489b8 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x564307348978 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x564307348960 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564307348880 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564307339ae0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x564307348920 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x564307348908 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5643073488a0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56430733e550 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x564307348948 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5643073488c0 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307339b58 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307339e18 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x564307339d28 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5643073490f0 <col:56, line:337:5>
|   |-DeclStmt 0x564307348d28 <line:329:9, col:51>
|   | `-VarDecl 0x564307348a50 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x564307348d10 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x564307348ce0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564307348cc8 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x564307348cb0 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x564307348c80 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x564307348c68 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x564307348c50 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x564307348b40 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x564307348ee0 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x564307348d90 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56430733edf8
|   | | `-MemberExpr 0x564307348d60 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56430733fda8
|   | |   `-DeclRefExpr 0x564307348d40 <col:9> 'Timestamp' lvalue Var 0x564307348a50 't' 'Timestamp'
|   | `-BinaryOperator 0x564307348ec0 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x564307348e90 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x564307348dc0 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x564307339d28 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x564307348ea8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x564307348e70 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x564307348e50 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x564307348e20 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x564307348de0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x564307348e38 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x564307348e00 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335570 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5643073490d8 <line:336:9, col:16>
|     `-CXXConstructExpr 0x5643073490a8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x564307349090 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x564307349070 <col:16> 'Timestamp' lvalue Var 0x564307348a50 't' 'Timestamp'
|-CXXMethodDecl 0x564307339fe0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x564307339ed0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x564307339f48 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073492a8 <col:72, line:343:5>
|   `-ReturnStmt 0x564307349298 <line:342:9, col:51>
|     `-ExprWithCleanups 0x564307349280 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x564307349250 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564307349238 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5643073491f8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5643073491e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564307349128 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x564307339ed0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5643073491a0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x564307349188 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564307349148 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56430733e698 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5643073491c8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x564307349168 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307339f48 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430733a130 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56430733a0a0 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x5643073496f0 <col:56, line:354:5>
|   |-DeclStmt 0x564307349498 <line:346:9, col:51>
|   | `-VarDecl 0x5643073492d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x564307349480 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x564307349450 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564307349438 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x564307349420 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5643073493f0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5643073493d8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5643073493c0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x564307349390 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x564307349650 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x564307349500 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56430733edf8
|   | | `-MemberExpr 0x5643073494d0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56430733fda8
|   | |   `-DeclRefExpr 0x5643073494b0 <col:9> 'Timestamp' lvalue Var 0x5643073492d0 't' 'Timestamp'
|   | `-BinaryOperator 0x564307349630 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x564307349600 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x564307349530 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56430733a0a0 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x564307349618 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x5643073495e0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x5643073495c0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x564307349590 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x564307349550 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x5643073495a8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x564307349570 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335450 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5643073496d8 <line:353:9, col:16>
|     `-CXXConstructExpr 0x5643073496a8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x564307349690 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x564307349670 <col:16> 'Timestamp' lvalue Var 0x5643073492d0 't' 'Timestamp'
|-CXXMethodDecl 0x56430733a2f8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56430733a1e8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733a260 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073498a8 <col:72, line:360:5>
|   `-ReturnStmt 0x564307349898 <line:359:9, col:51>
|     `-ExprWithCleanups 0x564307349880 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x564307349850 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x564307349838 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5643073497f8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x5643073497e0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x564307349728 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56430733a1e8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x5643073497a0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x564307349788 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x564307349748 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56430733e7e0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x5643073497c8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x564307349768 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733a260 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430733a448 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56430733a3b8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x564307356218 <col:56, line:371:5>
|   |-DeclStmt 0x564307349a98 <line:363:9, col:51>
|   | `-VarDecl 0x5643073498d0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x564307349a80 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x564307349a50 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x564307349a38 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x564307349a20 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x5643073499f0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x5643073499d8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x5643073499c0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x564307349990 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x564307356178 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x564307349b00 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56430733edf8
|   | | `-MemberExpr 0x564307349ad0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56430733fda8
|   | |   `-DeclRefExpr 0x564307349ab0 <col:9> 'Timestamp' lvalue Var 0x5643073498d0 't' 'Timestamp'
|   | `-CallExpr 0x564307356118 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x564307356100 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x564307349b30 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x5643073400d8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x564307356148 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x564307349b50 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x56430733a3b8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x564307356160 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x5643073560e0 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x5643073560b0 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x564307349b70 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073352a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x5643073560c8 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x564307349b90 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x564307356200 <line:370:9, col:16>
|     `-CXXConstructExpr 0x5643073561d0 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x5643073561b8 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x564307356198 <col:16> 'Timestamp' lvalue Var 0x5643073498d0 't' 'Timestamp'
|-CXXMethodDecl 0x56430733a538 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x564307356358 <col:39, line:377:5>
|   `-ReturnStmt 0x564307356348 <line:376:9, col:30>
|     `-ExprWithCleanups 0x564307356330 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x564307356300 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5643073562e8 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5643073562a8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x564307356250 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x564307356290 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x564307356270 <col:29> 'int' 1
|-CXXMethodDecl 0x56430733a5f8 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x564307356438 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x5643073563f0 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x564307356380 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x564307356370 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x5643073563b0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x564307356420 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x5643073563d0 <col:19> 'int' 0
|-CXXMethodDecl 0x56430733a7f8 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56430733a6a8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733a720 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x5643073419d0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5643073419b0 <col:60> 'int' 0
| `-CompoundStmt 0x564307356630 <col:63, line:395:5>
|   `-BinaryOperator 0x564307356610 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x564307356490 <col:9, col:12> 'int64_t':'long' lvalue .x 0x56430733edf8
|     | `-MemberExpr 0x564307356460 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x56430733fda8
|     |   `-CXXThisExpr 0x564307356450 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x5643073565f0 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x564307356580 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x564307356520 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x564307356508 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x5643073564f0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x5643073564c0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56430733a6a8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x564307356568 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x564307356548 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x5643073565d8 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x5643073565c0 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x5643073565a0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733a720 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430733a9c8 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56430733a8b8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733a930 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307356788 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x564307356740 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x564307356658 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x564307356648 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x564307356770 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564307356688 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56430733a8b8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x564307356700 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x5643073566e8 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5643073566a8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56430733e698 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x564307356728 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x5643073566c8 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733a930 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430733ab98 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56430733aa88 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733ab00 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073568e0 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x564307356898 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x5643073567b0 <col:9> '<bound member function type>' ->assign 0x56430733a7f8
|     | `-CXXThisExpr 0x5643073567a0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x5643073568c8 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5643073567e0 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56430733aa88 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x564307356858 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x564307356840 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564307356800 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56430733e7e0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x564307356880 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x564307356820 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733ab00 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430733ad68 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56430733ac58 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733acd0 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x564307341a08 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x5643073419e8 <col:57> 'int' 0
| `-DeprecatedAttr 0x56430733ae18 <col:75> "" ""
|-CXXMethodDecl 0x56430733afa8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56430733ae98 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733af10 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430733b058 <col:74> "" ""
|-CXXMethodDecl 0x56430733b1e8 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56430733b0d8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56430733b150 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430733b298 <col:74> "" ""
|-CXXMethodDecl 0x56430733b328 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x56430733b3c8 <col:42> "" ""
|-CXXMethodDecl 0x56430733dc00 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x56430733dae0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56430733db60 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x56430733dcd0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x56430733dd90 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x56430733de30 <col:20>
| `-OptimizeNoneAttr 0x56430733de88 <col:30>
|-CXXMethodDecl 0x56430733ded0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x56430733df90 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x56430733e050 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56430733e110 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x56430733e1d0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56430733e290 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x56430733e350 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x56430733e410 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x56430733e550 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56430733e4c0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307356a28 <col:58, line:512:5>
|   `-ReturnStmt 0x564307356a18 <line:511:9, col:53>
|     `-BinaryOperator 0x5643073569f8 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x5643073569c8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x5643073568f8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733e4c0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x5643073569e0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x5643073569a8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564307356988 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x564307356958 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307356918 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307356970 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307356938 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335570 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56430733e698 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56430733e608 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307356b70 <col:58, line:516:5>
|   `-ReturnStmt 0x564307356b60 <line:515:9, col:53>
|     `-BinaryOperator 0x564307356b40 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x564307356b10 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564307356a40 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733e608 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564307356b28 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564307356af0 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564307356ad0 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x564307356aa0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307356a60 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307356ab8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307356a80 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335450 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56430733e7e0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56430733e750 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307356cb8 <col:58, line:520:5>
|   `-ReturnStmt 0x564307356ca8 <line:519:9, col:53>
|     `-BinaryOperator 0x564307356c88 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x564307356c58 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564307356b88 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733e750 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564307356c70 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564307356c38 <col:23, col:53> 'int'
|           `-BinaryOperator 0x564307356c18 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x564307356be8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307356ba8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073352a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307356c00 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307356bc8 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56430733e928 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56430733e898 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307356e00 <col:60, line:524:5>
|   `-ReturnStmt 0x564307356df0 <line:523:9, col:55>
|     `-BinaryOperator 0x564307356dd0 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x564307356da0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564307356cd0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733e898 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564307356db8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564307356d80 <col:25, col:55> 'int'
|           `-BinaryOperator 0x564307356d60 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x564307356d30 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307356cf0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307356d48 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307356d10 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335570 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56430733ea70 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56430733e9e0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307356f48 <col:60, line:528:5>
|   `-ReturnStmt 0x564307356f38 <line:527:9, col:55>
|     `-BinaryOperator 0x564307356f18 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x564307356ee8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564307356e18 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733e9e0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564307356f00 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564307356ec8 <col:25, col:55> 'int'
|           `-BinaryOperator 0x564307356ea8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x564307356e78 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307356e38 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307356e90 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307356e58 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335450 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56430733ebb8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56430733eb28 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307357090 <col:60, line:532:5>
|   `-ReturnStmt 0x564307357080 <line:531:9, col:55>
|     `-BinaryOperator 0x564307357060 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x564307357030 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x564307356f60 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430733eb28 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x564307357048 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x564307357010 <col:25, col:55> 'int'
|           `-BinaryOperator 0x564307356ff0 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x564307356fc0 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x564307356f80 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x5643073352a0 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x564307356fd8 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x564307356fa0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x564307335600 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x56430733ec60 prev 0x564307335aa0 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56430733ed58 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x56430733edf8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x564307345bc0 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564307345fa8 <col:11>
| |-CXXConstructorDecl 0x564307345ca0 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564307345d88 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x5643073466f0 <col:11>
| |-CXXConstructorDecl 0x564307345e28 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x564307345f38 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x564307347f48 <col:11>
| |-CXXDestructorDecl 0x564307347258 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56430704de08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56430704df18 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56430704e7e0 <col:11>
| |   `-ReturnStmt 0x56430704e7d0 <col:11>
| |     `-UnaryOperator 0x56430704e7b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56430704e7a8 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x56430704df88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x56430704e098 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5643073e0680 <col:11>
|     `-ReturnStmt 0x5643073e0670 <col:11>
|       `-UnaryOperator 0x5643073e0658 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5643073e0648 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x56430733ee60 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x56430733ef60 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56430733f160 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430733ef40 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56430733ef20 <col:21> 'int' 0
| |-EnumConstantDecl 0x56430733eff0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56430733f178 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430733efd0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x56430733efb0 <col:23> 'int' 1
| |-EnumConstantDecl 0x56430733f080 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56430733f190 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430733f060 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x56430733f040 <col:23> 'int' 2
| `-EnumConstantDecl 0x56430733f110 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x56430733f1a8 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56430733f0f0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x56430733f0d0 <col:27> 'int' 3
|-CXXMethodDecl 0x56430733f1e8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x56430733f2b0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x56430733f4b8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x56430733f360 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x56430733f3e0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x564307341a20 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x56430733f6c8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x56430733f578 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x56430733f5f0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x56430733f798 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x56430733f858 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x56430733f9c8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x56430733f908 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x56430733fa90 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56430733fb50 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x56430733fc10 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56430733fcd0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x56430733fd70 <line:670:3, col:10> col:3 private
|-FieldDecl 0x56430733fda8 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x56430733fe18 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x5643073570a8 <col:27, line:684:5>
|-CXXMethodDecl 0x56430733fed8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x5643073570b8 <col:27, line:696:5>
|-CXXMethodDecl 0x5643073400d8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56430733ff88 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x564307340000 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307357240 <col:66, line:700:5>
|   `-ReturnStmt 0x564307357230 <line:699:9, col:31>
|     `-CallExpr 0x5643073571d0 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x5643073571b8 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x564307357168 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5643071c2488 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x564307357200 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x564307357128 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x56430733ff88 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x564307357218 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x564307357148 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307340000 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307340448 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x564307340198 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x564307340210 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x564307340288 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x564307340300 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x564307357590 <col:64, line:707:5>
|   |-DeclStmt 0x5643073572d0 <line:704:9, col:24>
|   | `-VarDecl 0x564307357268 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x5643073574e0 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x5643073572e8 <col:9> 'int32_t':'int' lvalue ParmVar 0x564307340210 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x5643073574c8 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x564307357460 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x564307357448 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643073573c8 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5643071c7758 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x564307357498 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x564307357368 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x564307340288 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x5643073574b0 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x564307357388 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x564307340300 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x5643073573a8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x564307357268 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x564307357570 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x564307357500 <col:9> 'int32_t':'int' lvalue ParmVar 0x564307340198 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x564307357558 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x564307357540 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x564307357520 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x564307357268 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x5643073406e8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x564307340518 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x564307340590 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x564307340608 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x564307340988 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x5643073407b0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x564307340828 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x5643073408a0 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x564307340b18 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x564307340a50 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x564307340d18 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x564307340bd0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x564307340c48 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x564307340fe8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x564307340f28 parent 0x564306e41488 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564307340dd8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x564307340e50 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x564307341208 <line:718:5, col:72> col:24
| `-FunctionDecl 0x564307341148 parent 0x564306e41488 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564307341038 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x5643073410b0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x5643073413d0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x564307341318 parent 0x564306e41488 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x564307341258 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x564307341658 <line:720:5, col:73> col:30
| `-FunctionDecl 0x564307341598 parent 0x564306e41488 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x564307341448 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x5643073414c0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x564307341878 <line:721:5, col:73> col:30
| `-FunctionDecl 0x5643073417b8 parent 0x564306e41488 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x5643073416a8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x564307341720 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x564307347100 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x5643073471e8 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307347c58 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x564307347c10 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56430733fda8
| |     `-DeclRefExpr 0x564307347bf0 <col:7> 'const Timestamp' lvalue ParmVar 0x5643073471e8 '' 'const Timestamp &'
| `-CompoundStmt 0x564307347cb8 <col:7>
|-CXXConstructorDecl 0x564307347368 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x564307347478 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x56430733fda8 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x564307347f58 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x564307347f00 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56430733fda8
| |     `-CXXStaticCastExpr 0x564307347ed0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x564307347ea0 <col:7> 'Timestamp' lvalue ParmVar 0x564307347478 '' 'Timestamp &&'
| `-CompoundStmt 0x564307347fb8 <col:7>
|-CXXDestructorDecl 0x564307347528 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56430704dc58 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56430704dd68 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x56430704e858 <col:7>
|   |-CXXMemberCallExpr 0x56430704e7f8 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x56430704e738 <col:7> '<bound member function type>' .operator= 0x56430704de08
|   | | `-MemberExpr 0x56430704e648 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56430733fda8
|   | |   `-CXXThisExpr 0x56430704e638 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x56430704e708 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56430733fda8
|   |   `-DeclRefExpr 0x56430704e6e8 <col:7> 'const Timestamp' lvalue ParmVar 0x56430704dd68 '' 'const Timestamp &'
|   `-ReturnStmt 0x56430704e848 <col:7>
|     `-UnaryOperator 0x56430704e830 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56430704e820 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x56430704e108 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56430704e218 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x5643073e06f8 <col:7>
    |-CXXMemberCallExpr 0x5643073e0698 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x5643073e0600 <col:7> '<bound member function type>' .operator= 0x56430704df88
    | | `-MemberExpr 0x5643073e04d0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56430733fda8
    | |   `-CXXThisExpr 0x5643073e04c0 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x5643073e05d0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56430733fda8
    |   `-CXXStaticCastExpr 0x5643073e05a0 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5643073e0570 <col:7> 'Timestamp' lvalue ParmVar 0x56430704e218 '' 'Timestamp &&'
    `-ReturnStmt 0x5643073e06e8 <col:7>
      `-UnaryOperator 0x5643073e06d0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5643073e06c0 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643073e53f0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x5643073e55c8 prev 0x5643073e53f0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5643073e5658 <col:46, col:52> col:46 public
|-TypedefDecl 0x5643073e5680 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643073eb080 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x5643073eb030 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x5643073e5b30 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x5643073e5a30 'type'
|     `-TemplateSpecializationType 0x5643073e59c0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5643073e58a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x5643073e5880 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5643073e5860 <col:24> 'unsigned long' 16
|       `-RecordType 0x5643073e59a0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x5643073e58c0 'char_array'
|-TypedefDecl 0x5643073eb138 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x5643073eb100 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x5643073eb0e0 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5643073eb080 'type'
|     `-ElaboratedType 0x5643073eb030 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x5643073e5b30 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x5643073e5a30 'type'
|         `-TemplateSpecializationType 0x5643073e59c0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5643073e58a0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x5643073e5880 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5643073e5860 <col:24> 'unsigned long' 16
|           `-RecordType 0x5643073e59a0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x5643073e58c0 'char_array'
|-CXXMethodDecl 0x5643073eb2b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x5643073eb1c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5643073eb3a8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5643073eb488 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5643073eb488
|-CXXMethodDecl 0x5643073eb758 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5643073eb660 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x5643073eb998 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643073eb810 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643073eb888 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ebb68 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643073eba58 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643073ebad0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ebcc8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5643073ebd98 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5643073ebfe8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643073ebe58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5643073ebed0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ec248 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x5643073ec0b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x5643073ec130 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ec408 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5643073ec318 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ec5c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x5643073ec4d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ec680 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643073ec730 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5643073ec968 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5643073ec7e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643073ec858 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5643073ecc08 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5643073ecb10 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x5643073eccd0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x5643073ecd20 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5643073ecd70 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643073e3d08 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x5643073e3f18 prev 0x5643073e3d08 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5643073e5360 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x5643073e5310 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x5643073e52f0 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x5643073e51a0 'type'
|     `-SubstTemplateTypeParmType 0x5643073e4fc0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x56430710a610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56430710a5b8 'T'
|       `-RecordType 0x5643073e4b10 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x5643073e4a28 'sized_array_memory'
|-FieldDecl 0x5643073ecdc0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x5643073ece10 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5643073ece48 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643071422a8 'T'
|   `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|     `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073ecf08 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x5643073eced0 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|       `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073ecf98 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5643073ecf60 'const TimerSet::heap_element &'
|   `-QualType 0x5643073e3fb1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|         `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073ed028 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x5643073ecff0 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|       `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073ed0e8 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x5643073ed0b0 'const TimerSet::heap_element *'
|   `-QualType 0x5643073e3fb1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|         `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073edf50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x5643073edf00 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x5643073edee0 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x5643073ede18 'type'
|     `-LValueReferenceType 0x5643073edde0 'const TimerSet::heap_element &'
|       `-QualType 0x5643073edb81 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x5643073edb80 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x564307114ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564307114c88 'T'
|           `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|             `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073edfb8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5643073ecf60 'const TimerSet::heap_element &'
|   `-QualType 0x5643073e3fb1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|         `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073ee010 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643073ee078 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x5643073ecff0 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|       `-CXXRecord 0x5643073e2e80 'heap_element'
|-TypedefDecl 0x5643073ee0e0 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x5643073ed0b0 'const TimerSet::heap_element *'
|   `-QualType 0x5643073e3fb1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x5643073e3fb0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643073e2f10 'TimerSet::heap_element'
|         `-CXXRecord 0x5643073e2e80 'heap_element'
|-EnumDecl 0x5643073ee138 <line:134:5> col:5
| `-EnumConstantDecl 0x5643073ee230 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5643073ee210 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564307143988 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564307143960 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564307143940 <col:40> 'int' 1
|-CXXConstructorDecl 0x5643073ee2b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5643073ee548 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073ee370 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643073ee410 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x5643073ee808 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5643073ee6f0 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x5643073eeac8 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5643073ee9b0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5643073eee10 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5643073eecf0 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x5643073ef120 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x5643073ef000 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x5643073ef410 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073ef258 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643073ef2d0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5643073ef568 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5643073ef648 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073ef6a0 <col:30> Inherited
|-CXXMethodDecl 0x5643073ef6e8 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5643073ef798 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073ef7f0 <col:30> Inherited
|-CXXMethodDecl 0x5643073ef8b8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5643073ef968 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073ef9c0 <col:30> Inherited
|-CXXMethodDecl 0x5643073efa08 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5643073efab8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073efb10 <col:30> Inherited
|-CXXMethodDecl 0x5643073efb58 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5643073efc08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073efc60 <col:30> Inherited
|-CXXMethodDecl 0x5643073efca8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x5643073efd58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073efdb0 <col:30> Inherited
|-CXXMethodDecl 0x5643073efdd8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643073efe88 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643073eff38 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5643073f00f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073effe8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643073f0060 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5643073f0248 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5643073f01b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073f03f8 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x5643073f0300 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643073f04b0 <col:20>
| `-OptimizeNoneAttr 0x5643073f0508 <col:30>
|-CXXMethodDecl 0x5643073f0628 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x5643073f0530 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643073f06e0 <col:20>
| `-OptimizeNoneAttr 0x5643073f0738 <col:30>
|-CXXMethodDecl 0x5643073f07f0 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643073f0760 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073f0938 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643073f08a8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073f0a68 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5643073f0b98 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5643073f0c68 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x5643073f0d38 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x5643073f0e78 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643073f0de8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073f0fc0 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643073f0f30 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073f1108 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x5643073f1078 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643073f11c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5643073f12c0 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5643073f1230 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643073f1378 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5643073f1438 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x5643073f1538 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x5643073f16e8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5643073f15f8 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x5643073f1ed8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5643073f17a0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x5643073f1e38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x5643073f1d38 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x5643073f1fb8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643073f2108 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x5643073f2078 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5643073f21c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5643073f2408 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073f2280 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5643073f22f8 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5643073f2660 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x5643073f24d8 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5643073f28b8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x5643073f2728 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x5643073f27a0 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x5643073f2978 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5643073f2bd8 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x5643073f2ae0 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x5643073f2ca8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5643073f2ca8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643073f41d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x5643073f43a8 prev 0x5643073f41d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5643073f4438 <col:46, col:52> col:46 public
|-TypedefDecl 0x5643073f4460 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643073f6030 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x5643073f5fe0 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x5643073f4910 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x5643073f4810 'type'
|     `-TemplateSpecializationType 0x5643073f47a0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5643073f4680 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x5643073f4660 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5643073f4640 <col:24> 'unsigned long' 8
|       `-RecordType 0x5643073f4780 'char_array<8>'
|         `-ClassTemplateSpecialization 0x5643073f46a0 'char_array'
|-TypedefDecl 0x5643073f60e8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x5643073f60b0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x5643073f6090 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x5643073f6030 'type'
|     `-ElaboratedType 0x5643073f5fe0 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x5643073f4910 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x5643073f4810 'type'
|         `-TemplateSpecializationType 0x5643073f47a0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5643073f4680 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x5643073f4660 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5643073f4640 <col:24> 'unsigned long' 8
|           `-RecordType 0x5643073f4780 'char_array<8>'
|             `-ClassTemplateSpecialization 0x5643073f46a0 'char_array'
|-CXXMethodDecl 0x5643073f6268 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x5643073f6178 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x5643073f6358 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5643073f6438 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5643073f6438
|-CXXMethodDecl 0x5643073f6708 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5643073f6610 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x5643073f6948 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5643073f67c0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643073f6838 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f6b18 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5643073f6a08 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643073f6a80 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f6c78 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5643073f6d48 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x5643073f6f98 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5643073f6e08 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5643073f6e80 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f71f8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x5643073f7068 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x5643073f70e0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f73b8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5643073f72c8 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f7578 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x5643073f7480 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f7630 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643073f76e0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5643073f7918 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x5643073f7790 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643073f7808 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x5643073f7bb8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x5643073f7ac0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x5643073f7c80 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x5643073f7cd0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5643073f7d20 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643073f2df0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x5643073f2ff8 prev 0x5643073f2df0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5643073f4140 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5643073f40f0 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x5643073f40d0 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x5643073f3f80 'type'
|     `-SubstTemplateTypeParmType 0x5643073f3da0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56430710a610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56430710a5b8 'T'
|       `-RecordType 0x5643073f38f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5643073f3808 'sized_array_memory'
|-FieldDecl 0x5643073f7d70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5643073f7dc0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5643073f7df8 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|   |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643071422a8 'T'
|   `-PointerType 0x5643073a6e90 'Timer *'
|     `-RecordType 0x5643073a5fe0 'Timer'
|       `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f7eb8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x5643073f7e80 'Timer *&'
|   `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-PointerType 0x5643073a6e90 'Timer *'
|       `-RecordType 0x5643073a5fe0 'Timer'
|         `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f7f78 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x5643073f7f40 'Timer *const &'
|   `-QualType 0x5643073f3091 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-PointerType 0x5643073a6e90 'Timer *'
|         `-RecordType 0x5643073a5fe0 'Timer'
|           `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f8038 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x5643073f8000 'Timer **'
|   `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-PointerType 0x5643073a6e90 'Timer *'
|       `-RecordType 0x5643073a5fe0 'Timer'
|         `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f80f8 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x5643073f80c0 'Timer *const *'
|   `-QualType 0x5643073f3091 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-PointerType 0x5643073a6e90 'Timer *'
|         `-RecordType 0x5643073a5fe0 'Timer'
|           `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f8cd0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x5643073f8c80 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x5643073f8c60 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x5643073f8bf0 'type'
|     `-SubstTemplateTypeParmType 0x5643073f89b0 'Timer *' sugar
|       |-TemplateTypeParmType 0x564307115410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071153c0 'T'
|       `-PointerType 0x5643073a6e90 'Timer *'
|         `-RecordType 0x5643073a5fe0 'Timer'
|           `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f8d38 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x5643073f7f40 'Timer *const &'
|   `-QualType 0x5643073f3091 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-PointerType 0x5643073a6e90 'Timer *'
|         `-RecordType 0x5643073a5fe0 'Timer'
|           `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f8d90 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643073f8df8 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x5643073f8000 'Timer **'
|   `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-PointerType 0x5643073a6e90 'Timer *'
|       `-RecordType 0x5643073a5fe0 'Timer'
|         `-CXXRecord 0x564307329c78 'Timer'
|-TypedefDecl 0x5643073f8e60 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x5643073f80c0 'Timer *const *'
|   `-QualType 0x5643073f3091 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x5643073f3090 'Timer *' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-PointerType 0x5643073a6e90 'Timer *'
|         `-RecordType 0x5643073a5fe0 'Timer'
|           `-CXXRecord 0x564307329c78 'Timer'
|-EnumDecl 0x5643073f8eb8 <line:134:5> col:5
| `-EnumConstantDecl 0x5643073f8fb0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5643073f8f90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564307143988 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564307143960 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564307143940 <col:40> 'int' 1
|-CXXConstructorDecl 0x5643073f9038 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5643073f92c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073f90f0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643073f9190 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x5643073f9588 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5643073f9470 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x5643073f9848 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5643073f9730 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5643073f9b90 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5643073f9a70 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x5643073f9ea0 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x5643073f9d80 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x5643073fa190 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073f9fd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643073fa050 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5643073fa2e8 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5643073fa3c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073fa420 <col:30> Inherited
|-CXXMethodDecl 0x5643073fa468 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x5643073fa518 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073fa570 <col:30> Inherited
|-CXXMethodDecl 0x5643073fe680 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5643073fe730 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073fe788 <col:30> Inherited
|-CXXMethodDecl 0x5643073fe7d0 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5643073fe880 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073fe8d8 <col:30> Inherited
|-CXXMethodDecl 0x5643073fe920 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5643073fe9d0 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073fea28 <col:30> Inherited
|-CXXMethodDecl 0x5643073fea70 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5643073feb20 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643073feb78 <col:30> Inherited
|-CXXMethodDecl 0x5643073feba0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643073fec50 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643073fed00 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5643073feec0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x5643073fedb0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643073fee28 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5643073ff010 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5643073fef80 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073ff1b8 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x5643073ff0c8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643073ff270 <col:20>
| `-OptimizeNoneAttr 0x5643073ff2c8 <col:30>
|-CXXMethodDecl 0x5643073ff3e8 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x5643073ff2f0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643073ff4a0 <col:20>
| `-OptimizeNoneAttr 0x5643073ff4f8 <col:30>
|-CXXMethodDecl 0x5643073ff5b0 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5643073ff520 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073ff6f8 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643073ff668 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073ff828 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x5643073ff958 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x5643073ffa28 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x5643073ffaf8 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x5643073ffc38 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x5643073ffba8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073ffd80 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643073ffcf0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643073ffec8 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5643073ffe38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643073fff80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564307400080 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5643073ffff0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564307400138 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5643074001f8 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x5643074002f8 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x564307400478 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x5643074003b8 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x564307400c38 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564307400530 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x564307400b98 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x564307400a98 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x564307400d18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564307400e68 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x564307400dd8 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x564307400f20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x564307401168 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x564307400fe0 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x564307401058 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x564307401328 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x564307401238 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x564307401578 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x5643074013f0 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x564307401468 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x564307401638 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x564307401898 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x5643074017a0 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x564307401968 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x564307401968

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073c0540 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643073c0658 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x5643073c06e8 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x5643073c0770 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x5643073c0860 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5643073c0960 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x5643073c0a20 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x5643073c0ae0 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x5643073c0c08 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x5643073c0c08
| `-ParmVarDecl 0x5643073c0d18 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x564307402718 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x564307402718
  `-ParmVarDecl 0x564307402828 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073e2000 prev 0x56430732de28 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x5643073e20f8 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x5643073e2188 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5643073e2210 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x5643073e2308 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x564307402b90 <col:43, col:67>
|   `-ReturnStmt 0x564307402b80 <col:45, col:52>
|     `-CXXConstructExpr 0x564307402b50 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x564307402b20 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x5643073e3af0
|         `-CXXThisExpr 0x564307402b10 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5643073e23c8 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x5643073e25d0 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x5643073e2478 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x5643073e24f0 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x5643073e26c8 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x5643073e2790 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x564307402c10 <col:39, col:67>
|   `-ReturnStmt 0x564307402c00 <col:41, col:48>
|     `-ImplicitCastExpr 0x564307402be8 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x564307402bb8 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x5643073e3bd8
|         `-CXXThisExpr 0x564307402ba8 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5643073e2858 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x564307402c90 <col:35, col:59>
|   `-ReturnStmt 0x564307402c80 <col:37, col:44>
|     `-ImplicitCastExpr 0x564307402c68 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x564307402c38 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x5643073e3c40
|         `-CXXThisExpr 0x564307402c28 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5643073e29a0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x5643073e2910 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x5643073e2ae8 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5643073e2a58 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5643073e2ce8 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x5643073e2ba0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x5643073e2c18 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x5643073e2db8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5643073e2e58 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x5643073e2e80 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5643073e2f98 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x5643073e3038 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x5643073e3098 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x5643073e31c8 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x5643073e30f8 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x5643073e3038 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x564307402d68 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x564307402d10 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x564307402ce0 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x56430732b2b8
|   |       `-ImplicitCastExpr 0x564307402d30 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x564307402cc8 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x564307402ca8 <col:17> 'Timer *' lvalue ParmVar 0x5643073e30f8 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x5643073e3098 't' 'Timer *'
|   | `-ImplicitCastExpr 0x564307402e00 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x564307402dc0 <col:41> 'Timer *' lvalue ParmVar 0x5643073e30f8 't_' 'Timer *'
|   `-CompoundStmt 0x564307402e50 <col:45, line:44:2>
|-CXXRecordDecl 0x5643073e3290 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5643073e33a8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x5643073e35f8 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x5643073e3478 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x5643073e34f0 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x564307402f80 <col:71, line:49:2>
|     `-ReturnStmt 0x564307402f70 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x564307402f38 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x564307402f20 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564307402f00 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x5643073641f8 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x564307402e80 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x5643073e3038
|         | `-DeclRefExpr 0x564307402e60 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x5643073e3478 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x564307402ed0 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x5643073e3038
|           `-DeclRefExpr 0x564307402eb0 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x5643073e34f0 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x5643073e36c0 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5643073e37d8 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x5643073e39f8 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x5643073e3878 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x5643073e38f0 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x564307403188 <col:63, line:54:2>
|     `-BinaryOperator 0x564307403168 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x564307403018 <col:6, col:12> 'int' lvalue ->_schedpos1 0x56430732d2c8
|       | `-ImplicitCastExpr 0x564307403000 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x564307402fd0 <col:6, col:9> 'Timer *' lvalue ->t 0x5643073e3098
|       |     `-ImplicitCastExpr 0x564307402fb8 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x564307402f98 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x5643073e38f0 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x564307403150 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x564307403130 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x5643074030d8 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x5643074030b8 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x564307403088 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x564307403048 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x5643073e38f0 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x5643074030a0 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x564307403068 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x5643073e3878 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x564307403118 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x5643074030f8 <col:39> 'int' 1
|-FieldDecl 0x5643073e3af0 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x5643073e3b60 <col:44, col:53> aligned
|   `-ConstantExpr 0x5643073e3b40 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x5643073e3ac0 <col:52> 'int' 8
|-FieldDecl 0x5643073e3bd8 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x5643073e3c40 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x5643073e3ca8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x5643073f2d90 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x564307401a50 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x564307401ab0 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x564307401b10 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x564307401b70 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307401c60 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x564307401bd0 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x564307401d28 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x5643074035e0 <col:29, line:81:5>
|   `-IfStmt 0x5643074035b8 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x564307403270 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x564307403210 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x5643074031e0 <col:6, col:18> '<bound member function type>' .size 0x5643073efdd8
|     |     `-ImplicitCastExpr 0x564307403258 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x5643074031b0 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5643073f2d90
|     |         `-CXXThisExpr 0x5643074031a0 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x564307403460 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x564307403448 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x564307403428 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x56430704dc58 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x564307403298 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5643073e3af0
|     | | `-CXXThisExpr 0x564307403288 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x564307403410 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x5643074033e0 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x5643073e3038
|     |     `-CXXMemberCallExpr 0x5643074033b8 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x564307403388 <col:22, col:34> '<bound member function type>' .unchecked_at 0x5643073f0e78
|     |       | `-MemberExpr 0x5643074032d8 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x5643073f2d90
|     |       |   `-CXXThisExpr 0x5643074032c8 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x564307403368 <col:47> 'int' 0
|     `-ExprWithCleanups 0x5643074035a0 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x564307403568 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x564307403550 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564307403530 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56430704e108 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x5643074034a8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x5643073e3af0
|         | `-CXXThisExpr 0x564307403498 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x564307403518 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x5643074034e8 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x564307401e68 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x564307401dd8 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x564307401f30 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x564307401ff0 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x5643074020b0 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x5643074021a0 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x564307402208 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x564307402208
| `-ParmVarDecl 0x564307402318 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x5643074023b8 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x5643074023b8
| `-ParmVarDecl 0x5643074024c8 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x564307402568 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x564307402568
| `-ParmVarDecl 0x564307402678 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x564307402898 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x564307402898
| `-ParmVarDecl 0x5643074029a8 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x564307402a30 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x564307402a30

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564307439478 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x564307439688 prev 0x564307439478 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56430743a760 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x56430743a710 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x56430743a6f0 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x56430743a5a0 'type'
|     `-SubstTemplateTypeParmType 0x5643073f3da0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56430710a610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56430710a5b8 'T'
|       `-RecordType 0x5643073f38f0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5643073f3808 'sized_array_memory'
|-FieldDecl 0x56430743a860 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56430743a8b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56430743a8e8 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|   |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643071422a8 'T'
|   `-RecordType 0x56430742d4f0 'pollfd'
|     `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743a9a8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x56430743a970 'pollfd &'
|   `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x56430742d4f0 'pollfd'
|       `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743aa68 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x56430743aa30 'const pollfd &'
|   `-QualType 0x564307439721 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x56430742d4f0 'pollfd'
|         `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743aaf8 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x56430743aac0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x56430742d4f0 'pollfd'
|       `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743abb8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x56430743ab80 'const pollfd *'
|   `-QualType 0x564307439721 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x56430742d4f0 'pollfd'
|         `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743b790 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x56430743b740 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x56430743b720 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x56430743b6b0 'type'
|     `-SubstTemplateTypeParmType 0x56430743b470 'pollfd' sugar
|       |-TemplateTypeParmType 0x564307115410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071153c0 'T'
|       `-RecordType 0x56430742d4f0 'pollfd'
|         `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743b7f8 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x56430743aa30 'const pollfd &'
|   `-QualType 0x564307439721 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x56430742d4f0 'pollfd'
|         `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743b850 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x56430743b8b8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x56430743aac0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x56430742d4f0 'pollfd'
|       `-CXXRecord 0x56430742d460 'pollfd'
|-TypedefDecl 0x56430743b920 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x56430743ab80 'const pollfd *'
|   `-QualType 0x564307439721 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x564307439720 'pollfd' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x56430742d4f0 'pollfd'
|         `-CXXRecord 0x56430742d460 'pollfd'
|-EnumDecl 0x56430743b978 <line:134:5> col:5
| `-EnumConstantDecl 0x56430743ba70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56430743ba50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564307143988 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564307143960 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564307143940 <col:40> 'int' 1
|-CXXConstructorDecl 0x56430743baf8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56430743bd88 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56430743bbb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56430743bc50 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x56430743c048 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56430743bf30 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x56430743c308 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x56430743c1f0 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x56430743c650 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56430743c530 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x56430743c960 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x56430743c840 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x56430743cc50 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56430743ca98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56430743cb10 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56430743cda8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x56430743ce88 <col:20> Inherited
| `-OptimizeNoneAttr 0x56430743cee0 <col:30> Inherited
|-CXXMethodDecl 0x56430743cf28 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x56430743cfd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56430743d030 <col:30> Inherited
|-CXXMethodDecl 0x56430743d0f8 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56430743d1a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56430743d200 <col:30> Inherited
|-CXXMethodDecl 0x56430743d248 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56430743d2f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56430743d350 <col:30> Inherited
|-CXXMethodDecl 0x56430743d398 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56430743d448 <col:20> Inherited
| `-OptimizeNoneAttr 0x56430743d4a0 <col:30> Inherited
|-CXXMethodDecl 0x56430743d4e8 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56430743d598 <col:20> Inherited
| `-OptimizeNoneAttr 0x56430743d5f0 <col:30> Inherited
|-CXXMethodDecl 0x56430743d618 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56430743d6c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56430743d778 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56430743d938 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56430743d828 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56430743d8a0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56430743da88 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56430743d9f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430743dc38 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x56430743db40 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56430743dcf0 <col:20>
| `-OptimizeNoneAttr 0x56430743dd48 <col:30>
|-CXXMethodDecl 0x56430743de68 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x56430743dd70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56430743df20 <col:20>
| `-OptimizeNoneAttr 0x56430743df78 <col:30>
|-CXXMethodDecl 0x56430743e030 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x56430743dfa0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430743e178 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56430743e0e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430743e2a8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x56430743e3d8 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x56430743e4a8 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x56430743e578 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x56430743e6b8 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x56430743e628 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430743e800 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56430743e770 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430743e948 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x56430743e8b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56430743ea00 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56430743eb00 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56430743ea70 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56430743ebb8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56430743ec78 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x56430743ed78 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x56430743ef28 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x56430743ee38 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x56430743f6e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56430743efe0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x56430743f648 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x56430743f548 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x56430743f7c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56430743f918 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x56430743f888 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56430743f9d0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56430743fc18 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56430743fa90 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x56430743fb08 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56430743fdd8 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x56430743fce8 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x564307440028 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x56430743fea0 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x56430743ff18 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5643074400e8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x564307440368 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x564307440250 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x564307440438 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x564307440438

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564307441a20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x564307441bf8 prev 0x564307441a20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x564307441c88 <col:46, col:52> col:46 public
|-TypedefDecl 0x564307441cb0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307443880 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x564307443830 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x564307442160 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x564307442060 'type'
|     `-TemplateSpecializationType 0x564307441ff0 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x564307441ed0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x564307441eb0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x564307441e90 <col:24> 'unsigned long' 24
|       `-RecordType 0x564307441fd0 'char_array<24>'
|         `-ClassTemplateSpecialization 0x564307441ef0 'char_array'
|-TypedefDecl 0x564307443938 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x564307443900 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x5643074438e0 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x564307443880 'type'
|     `-ElaboratedType 0x564307443830 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x564307442160 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x564307442060 'type'
|         `-TemplateSpecializationType 0x564307441ff0 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x564307441ed0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x564307441eb0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x564307441e90 <col:24> 'unsigned long' 24
|           `-RecordType 0x564307441fd0 'char_array<24>'
|             `-ClassTemplateSpecialization 0x564307441ef0 'char_array'
|-CXXMethodDecl 0x564307443ab8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x5643074439c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x564307443ba8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x564307443c88 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x564307443c88
|-CXXMethodDecl 0x564307443f58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x564307443e60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x564307444198 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x564307444010 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564307444088 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x564307444368 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x564307444258 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643074442d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5643074444c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x564307444598 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5643074447e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x564307444658 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5643074446d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x564307444a48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x5643074448b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x564307444930 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x564307444c08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x564307444b18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x564307444dc8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x564307444cd0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x564307444e80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564307444f30 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564307445168 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x564307444fe0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564307445058 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x564307445408 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x564307445310 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x5643074454d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x564307445520 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x564307445570 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564307440580 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x564307440788 prev 0x564307440580 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x564307441990 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x564307441940 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x564307441920 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x5643074417d0 'type'
|     `-SubstTemplateTypeParmType 0x5643074415f0 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x56430710a610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56430710a5b8 'T'
|       `-RecordType 0x564307441140 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x564307441060 'sized_array_memory'
|-FieldDecl 0x5643074455c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x564307445610 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x564307445648 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643071422a8 'T'
|   `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x564307445708 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5643074456d0 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x5643074457c8 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x564307445790 'const SelectSet::SelectorInfo &'
|   `-QualType 0x564307440821 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x564307445858 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x564307445820 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x564307445918 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5643074458e0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x564307440821 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x564307446570 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x564307446520 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x564307446500 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x564307446438 'type'
|     `-LValueReferenceType 0x564307446400 'const SelectSet::SelectorInfo &'
|       `-QualType 0x5643074461a1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x5643074461a0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x564307114ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564307114c88 'T'
|           `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x5643074465d8 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x564307445790 'const SelectSet::SelectorInfo &'
|   `-QualType 0x564307440821 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x564307446630 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307446698 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x564307445820 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x564307438f50 'SelectorInfo'
|-TypedefDecl 0x564307446700 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5643074458e0 'const SelectSet::SelectorInfo *'
|   `-QualType 0x564307440821 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x564307440820 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x564307438fe0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x564307438f50 'SelectorInfo'
|-EnumDecl 0x564307446758 <line:134:5> col:5
| `-EnumConstantDecl 0x564307446850 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x564307446830 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564307143988 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564307143960 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564307143940 <col:40> 'int' 1
|-CXXConstructorDecl 0x5643074468d8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x564307446b68 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x564307446990 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564307446a30 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x564307446e28 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x564307446d10 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x5643074470e8 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x564307446fd0 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x564307447430 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x564307447310 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x564307447740 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x564307447620 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x564307447a30 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x564307447878 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643074478f0 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x564307447b88 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x564307447c68 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307447cc0 <col:30> Inherited
|-CXXMethodDecl 0x564307447d08 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x564307447db8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307447e10 <col:30> Inherited
|-CXXMethodDecl 0x564307447ed8 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x564307447f88 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307447fe0 <col:30> Inherited
|-CXXMethodDecl 0x564307448028 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5643074480d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307448130 <col:30> Inherited
|-CXXMethodDecl 0x564307448178 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x564307448228 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307448280 <col:30> Inherited
|-CXXMethodDecl 0x564307448320 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5643074483d0 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307448428 <col:30> Inherited
|-CXXMethodDecl 0x564307448450 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564307448500 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643074485b0 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564307448770 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x564307448660 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643074486d8 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5643074488c0 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x564307448830 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307448a68 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x564307448978 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564307448b20 <col:20>
| `-OptimizeNoneAttr 0x564307448b78 <col:30>
|-CXXMethodDecl 0x564307448c98 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x564307448ba0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564307448d50 <col:20>
| `-OptimizeNoneAttr 0x564307448da8 <col:30>
|-CXXMethodDecl 0x564307448e60 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x564307448dd0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307448fa8 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x564307448f18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643074490d8 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x564307449208 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5643074492d8 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5643074493a8 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5643074494e8 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x564307449458 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307449630 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643074495a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307449778 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x5643074496e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x564307449830 <col:48> Inherited "" ""
|-CXXMethodDecl 0x564307449930 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5643074498a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643074499e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x564307449aa8 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x564307449ba8 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x564307449d58 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x564307449c68 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x56430744a518 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x564307449e10 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x56430744a478 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x56430744a378 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x56430744a5f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56430744a748 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56430744a6b8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56430744a800 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56430744aa48 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56430744a8c0 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x56430744a938 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56430744ac08 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x56430744ab18 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x56430744ae58 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x56430744acd0 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x56430744ad48 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x56430744af18 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56430744b178 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56430744b080 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x56430744b248 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56430744b248

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430742e0f0 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56430742e208 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x56430742e298 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x564307438360 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x564307438450 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x564307438450
|-CXXMethodDecl 0x564307438550 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x5643074387f0 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x564307438608 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x564307438680 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x564307438700 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x564307438a60 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5643074388c0 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x564307438938 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x5643074389b8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x564307438bb8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x564307438b28 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x564307438c80 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x56430744c8f8 <col:34, line:50:5>
|   |-BinaryOperator 0x56430744c2c8 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x56430744c288 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x564307439408
|   | | `-CXXThisExpr 0x56430744c278 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x56430744c2b8 <col:23> 'bool' true
|   `-CallExpr 0x56430744c8d0 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x56430744c8b8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56430744c838 <col:2> 'void (long)' lvalue Function 0x56430744c738 'ignore_result' 'void (long)' (FunctionTemplate 0x5643071055b8 'ignore_result')
|     `-CallExpr 0x56430744c4e0 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x56430744c4c8 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56430744c448 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x564307406690 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x56430744c518 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x56430744c3f0 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x56430744c3d8 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x56430744c388 <col:22> 'int [2]' lvalue ->_wake_pipe 0x5643074393a8
|       |   |   `-CXXThisExpr 0x56430744c378 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x56430744c3b8 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x56430744c548 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x56430744c530 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x56430744c410 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x56430744c560 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x56430744c428 <col:41> 'int' 1
|-CXXMethodDecl 0x564307438dc0 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x564307438d30 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x564307438e88 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x564307438f28 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x564307438f50 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x564307439068 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x564307439108 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x564307439168 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x5643074391d0 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x564307439280 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x564307439108 'read' 'Element *'
|   | `-ImplicitCastExpr 0x56430744c958 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x56430744c918 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x564307439168 'write' 'Element *'
|   | `-ImplicitCastExpr 0x56430744c9d8 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x56430744c998 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x5643074391d0 'pollfd' 'int'
|   | `-UnaryOperator 0x56430744ca38 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x56430744ca18 <col:35> 'int' 1
|   `-CompoundStmt 0x56430744cab0 <line:64:2, line:65:2>
|-FieldDecl 0x5643074393a8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x564307439408 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x564307440520 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x56430744b330 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x56430744b568 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x56430744b398 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x56430744b410 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x56430744b488 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x56430744b750 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x56430744b638 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x56430744b6b8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x56430744b998 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x56430744b818 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x56430744b898 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x56430744bba8 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x56430744ba58 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x56430744bad0 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x56430744bcf8 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x56430744bc68 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x56430744bdc0 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x56430744be80 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x56430744bf48 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x56430744bf48
| `-ParmVarDecl 0x56430744c058 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x56430744c0f8 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x56430744c0f8
  `-ParmVarDecl 0x56430744c208 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073bf4a8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643073bf5c8 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x5643073bf658 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x5643073bf6e0 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x5643073bf7d0 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x5643073bf8d0 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x5643073bf990 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x5643073bfa50 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x5643073bfb38 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x5643073bfc58 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x5643073bfc58
| `-ParmVarDecl 0x5643073bfd68 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x564307451708 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x564307451708
  `-ParmVarDecl 0x564307451818 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307164de0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564307164ef8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x564307164f88 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x564307165058 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x564307165140 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x564307165358 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564307165200 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307165508 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x564307165410 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564307165650 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5643071655c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x564307165798 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564307165708 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643071658e0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x564307165850 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643071659a8 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x564307165af0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x564307165a60 <col:28> col:31 'int'
|-CXXMethodDecl 0x564307165bb8 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x564307165d00 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x564307165c70 <col:28> col:31 'int'
|-CXXMethodDecl 0x564307165e78 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564307165db8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307165fc0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x564307165f30 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307166088 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x564307166248 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564307166138 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5643071661b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307166498 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564307166308 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564307166380 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564307166548 <col:86> "" ""
|-CXXMethodDecl 0x5643071667b8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x564307166628 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5643071666a0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307166968 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564307166878 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564307166b18 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x564307166a20 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x564307166de8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564307166bd0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564307166c48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564307166cc0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643071670c8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x564307166eb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x564307166f28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564307166fa0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x564307167180 <col:115> "" ""
|-AccessSpecDecl 0x5643071671f0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x564307167228 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307167730 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x564307167730
| `-ParmVarDecl 0x564307167838 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5643071678d8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5643071678d8
| `-ParmVarDecl 0x5643071679e8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56430719d018 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56430738fe20 <col:7>
|-CXXConstructorDecl 0x56430719d0f0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56430719d0f0
| `-ParmVarDecl 0x56430719d208 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56430719d278 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56430719d278
| `-ParmVarDecl 0x56430719d388 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x564307392820 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073279e8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564307327b08 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x564307327ba8 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x564307327c08 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x564307450d08 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x564307450d08
| `-ParmVarDecl 0x564307450e18 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x564307450eb8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x564307450eb8
| `-ParmVarDecl 0x564307450fc8 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x564307451038 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5643074518b8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5643074518b8
| `-ParmVarDecl 0x5643074519c8 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x564307451a38 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x564307451a38
| `-ParmVarDecl 0x564307451b48 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x5643074581b8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x564307458290 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073c13a0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643073c14b8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x5643073c1548 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x5643073c15d0 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x5643073c1690 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x564306e41580 'int'
|-CXXMethodDecl 0x5643073c1758 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x5643073c17f8 <col:45> always_inline
|-CXXMethodDecl 0x5643073c1928 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x5643073c1860 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x5643073c19d0 <col:49> always_inline
|-CXXConstructorDecl 0x5643073c1ac8 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5643073c1ac8
| `-ParmVarDecl 0x5643073c1bd8 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x5643073c1c78 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5643073c1c78
| `-ParmVarDecl 0x5643073c1d88 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x564307451120 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x564307451120
|-CXXMethodDecl 0x564307451be8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x564307451be8
| `-ParmVarDecl 0x564307451cf8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x564307451d68 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x564307451d68
  `-ParmVarDecl 0x564307451e78 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430744cf20 prev 0x56430742e060 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x56430744d018 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x56430744d0a8 <col:22, col:28> col:22 public
|-EnumDecl 0x56430744d0d0 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x56430744d1e8 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x56430744d1c8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x56430744d1b0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x56430744d190 <col:32> 'int' 1
| `-EnumConstantDecl 0x56430744d290 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x56430744d270 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x56430744d258 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x56430744d238 <col:53> 'int' 1000
|-CXXMethodDecl 0x56430744d330 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x56430744d3f0 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56430744d4d8 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x564307451f38 <col:34, col:52>
|   `-ReturnStmt 0x564307451f28 <col:36, col:43>
|     `-MemberExpr 0x564307451ef8 <col:43> 'TimerSet' lvalue ->_timers 0x56430744f1a8
|       `-CXXThisExpr 0x564307451ee8 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x56430744d5c8 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x564307451fa0 <col:46, col:64>
|   `-ReturnStmt 0x564307451f90 <col:48, col:55>
|     `-MemberExpr 0x564307451f60 <col:55> 'const TimerSet' lvalue ->_timers 0x56430744f1a8
|       `-CXXThisExpr 0x564307451f50 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56430744d6b8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x564307452008 <col:36, col:55>
|   `-ReturnStmt 0x564307451ff8 <col:38, col:45>
|     `-MemberExpr 0x564307451fc8 <col:45> 'SelectSet' lvalue ->_selects 0x56430744f208
|       `-CXXThisExpr 0x564307451fb8 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x56430744d7a8 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x564307452070 <col:48, col:67>
|   `-ReturnStmt 0x564307452060 <col:50, col:57>
|     `-MemberExpr 0x564307452030 <col:57> 'const SelectSet' lvalue ->_selects 0x56430744f208
|       `-CXXThisExpr 0x564307452020 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56430744d868 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x56430744d958 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x56430744dac8 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x56430744da08 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x56430744db90 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x56430744dfd8 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x56430744dc40 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x56430744dec0 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x56430744e0a8 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x56430744e168 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x56430744e228 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x56430744e368 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x56430744e2d8 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x56430744e430 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x56430744e4f0 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x56430744e5b0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x56430744e670 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x56430744e7b0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56430744e720 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56430744e878 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x56430744e938 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x56430744e9d8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x56430744eaa0 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744eaf0 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744eb40 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744eb90 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744ebe0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744ec30 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744ec80 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744ecd0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744ed20 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56430744ed70 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x56430744edc0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x56430744eeb8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x56430744ee28 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x56430744f008 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x56430744ef78 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x56430744f0b0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x56430744f0e8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x56430744f148 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x56430744f1a8 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x56430744f208 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x56430744f288 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x56430744f2f8 <col:40, col:50> aligned
|   `-ConstantExpr 0x56430744f2d8 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x56430744f258 <col:48> 'int' 64
|-FieldDecl 0x56430744f368 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x56430744f3c8 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x56430744f4c0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x56430744f5d0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x56430744f630 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x56430744f6b0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x56430744f720 <col:36, col:46> aligned
|   `-ConstantExpr 0x56430744f700 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x56430744f680 <col:44> 'int' 64
|-FieldDecl 0x56430744f798 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x56430744f7f8 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x56430744f848 <line:170:3, col:9> col:3 public
|-FieldDecl 0x56430744f888 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x56430744f8f0 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x56430744f940 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x56430744fae8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x56430744f978 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x56430744f9f8 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x56430744fbe8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x56430744fbe8
|-CXXMethodDecl 0x56430744fcf0 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x56430744fdb8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x564307452168 <col:34, line:217:5>
|   `-ReturnStmt 0x564307452158 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x564307452140 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x564307452110 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x5643073c3f00
|         `-ImplicitCastExpr 0x5643074520f8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5643074520c8 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x5643073c3e98
|             `-MemberExpr 0x564307452098 <col:16> 'const TaskLink' lvalue ->_task_link 0x56430744f0e8
|               `-CXXThisExpr 0x564307452088 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56430744fe78 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x56430744ff38 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x564307452890 <col:39, line:226:5>
|   |-DeclStmt 0x5643074523b8 <line:223:9, col:68>
|   | `-VarDecl 0x564307452190 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x564307452370 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x564307452340 <col:24, col:38> '<bound member function type>' .compare_swap 0x56430716abf0
|   |     | `-MemberExpr 0x564307452208 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x56430744f368
|   |     |   `-CXXThisExpr 0x5643074521f8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x5643074522f8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x5643074522e0 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x5643074522b8 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x564307452298 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x5643074523a0 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x564307452320 <col:66> 'int' 0
|   |-CStyleCastExpr 0x564307452400 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5643074523d0 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x564307452190 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x564307452870 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x564307452840 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x564307452518 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5643074524e8 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5643074524d0 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x564307452428 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x564307452190 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x5643074524a8 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x564307452490 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x564307452468 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x564307452448 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x564307452578 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x564307452558 <col:60> 'int' 0
|       `-CallExpr 0x5643074527a0 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x564307452788 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x564307452768 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5643074527e0 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x564307452668 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5643074527f8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x564307452698 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x564307452810 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5643074526d8 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x564307452828 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x564307452750 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x564307452738 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5643074526f8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x564307450080 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x56430744fff0 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x564307450148 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x564307450208 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x564307450330 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x5643074503f0 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x5643074504b0 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x5643074505a0 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x564307450600 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x564307450690 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x564307450a58 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x564307450a58
| `-ParmVarDecl 0x564307450b68 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x564307451228 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x564307451228
  `-ParmVarDecl 0x564307451338 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643073c4210 prev 0x5643073a5ea0 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x5643073c4348 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x5643073c43d8 <col:33, col:39> col:33 public
|-EnumDecl 0x5643073c4400 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x5643073c4540 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x5643073c4520 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x5643073c4500 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x5643073c44c0 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x5643073c44e0 <col:26> 'int' 16
| `-EnumConstantDecl 0x5643073c4610 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x5643073c45f0 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x5643073c45d0 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x5643073c4590 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x5643073c45b0 <col:47> 'int' 31
|-EnumDecl 0x5643073c4660 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x5643073c47a0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x5643073c48c0 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073c4780 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x5643073c4760 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x5643073c4720 <col:26> 'int' 1
| |       `-IntegerLiteral 0x5643073c4740 <col:29> 'int' 15
| `-EnumConstantDecl 0x5643073c4870 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x5643073c48d8 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073c4850 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x5643073c4830 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x5643073c47f0 <col:51> 'int' 1
|         `-IntegerLiteral 0x5643073c4810 <col:54> 'int' 10
|-CXXConstructorDecl 0x5643073c4aa8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x5643073c4900 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x5643073c4980 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x5643073c4c38 <line:86:5, col:27> col:12 used Task 'void (Element *)' inline
| `-ParmVarDecl 0x5643073c4b70 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x5643073c4d30 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x5643073c4eb8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x564307328b48 <col:42, line:100:5>
|   `-ReturnStmt 0x564307328b38 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x564307328b20 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x564307328af0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x564307327870
|         `-CXXThisExpr 0x564307328ae0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5643073c4f80 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x564307328bc8 <col:36, line:105:5>
|   `-ReturnStmt 0x564307328bb8 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x564307328ba0 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x564307328b70 <col:16> 'void *const' lvalue ->_thunk 0x5643073278d8
|         `-CXXThisExpr 0x564307328b60 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5643073c5040 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x564307328c48 <col:37, line:110:5>
|   `-ReturnStmt 0x564307328c38 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x564307328c20 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x564307328bf0 <col:16> 'Element *const' lvalue ->_owner 0x564307327998
|         `-CXXThisExpr 0x564307328be0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5643073c5100 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x5643073c51c8 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x5643073c5288 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x5643073c5348 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x564307328d30 <col:35, line:137:5>
|   `-ReturnStmt 0x564307328d20 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x564307328ce8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x564307328cb8 <col:16, col:24> '<bound member function type>' ->router 0x5643073b86b0
|         `-ImplicitCastExpr 0x564307328d08 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x564307328ca0 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x564307328c70 <col:16> 'Element *const' lvalue ->_owner 0x564307327998
|               `-CXXThisExpr 0x564307328c60 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5643073c5408 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x5643073c5608 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5643073c54b8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x5643073c5530 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5643073c5818 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x5643073c56c8 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x5643073c5740 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x5643073c58e8 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x564307328e40 <col:35, line:181:5>
|   `-ReturnStmt 0x564307328e30 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x564307328e18 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x564307328e00 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x564307328dd0 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x5643073274a8
|           `-MemberExpr 0x564307328d88 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|             `-MemberExpr 0x564307328d58 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x5643073277f8
|               `-CXXThisExpr 0x564307328d48 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5643073264f0 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x564307328f58 <col:30, line:192:5>
|   `-BinaryOperator 0x564307328f38 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x564307328ee0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5643073274a8
|     | `-MemberExpr 0x564307328e98 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|     |   `-MemberExpr 0x564307328e68 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5643073277f8
|     |     `-CXXThisExpr 0x564307328e58 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x564307328f20 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x564307328f10 <col:32> 'bool' false
|-CXXMethodDecl 0x5643073265b0 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x5643073292a8 <col:30, line:206:5>
|   |-BinaryOperator 0x564307329050 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x564307328ff8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5643073274a8
|   | | `-MemberExpr 0x564307328fb0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|   | |   `-MemberExpr 0x564307328f80 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5643073277f8
|   | |     `-CXXThisExpr 0x564307328f70 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x564307329038 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x564307329028 <col:32> 'bool' true
|   |-CallExpr 0x5643073290f0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x5643073290d8 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5643073290b8 <col:9> 'void ()' lvalue Function 0x5643073bf060 'click_fence' 'void ()'
|   `-IfStmt 0x564307329290 <line:204:9, line:205:32>
|     |-BinaryOperator 0x5643073291d0 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x5643073291a0 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x564307329150 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x564307327c08
|     | |   `-MemberExpr 0x564307329120 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x564307327c80
|     | |     `-CXXThisExpr 0x564307329110 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x5643073291b8 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x564307329180 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x564307329250 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x564307329200 <col:13> '<bound member function type>' ->complete_schedule 0x564307328680
|       | `-CXXThisExpr 0x5643073291f0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x564307329278 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x564307329230 <col:31> 'int' 0
|-CXXMethodDecl 0x564307326670 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x5643073293d0 <col:35, line:240:5>
|   `-BinaryOperator 0x5643073293b0 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x564307329358 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5643073274a8
|     | `-MemberExpr 0x564307329310 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|     |   `-MemberExpr 0x5643073292e0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5643073277f8
|     |     `-CXXThisExpr 0x5643073292d0 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x564307329398 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x564307329388 <col:32> 'bool' true
|-CXXMethodDecl 0x564307326730 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x5643073295e8 <col:37, line:253:5>
|   |-BinaryOperator 0x5643073294c8 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x564307329470 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x5643073274a8
|   | | `-MemberExpr 0x564307329428 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|   | |   `-MemberExpr 0x5643073293f8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5643073277f8
|   | |     `-CXXThisExpr 0x5643073293e8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5643073294b0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5643073294a0 <col:32> 'bool' false
|   `-BinaryOperator 0x5643073295c8 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x564307329570 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x564307327508
|     | `-MemberExpr 0x564307329528 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|     |   `-MemberExpr 0x5643073294f8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5643073277f8
|     |     `-CXXThisExpr 0x5643073294e8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5643073295b0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5643073295a0 <col:41> 'bool' true
|-CXXMethodDecl 0x5643073267f0 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x564307329768 <col:37, line:264:5>
|   |-BinaryOperator 0x5643073296e8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x564307329690 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x564307327508
|   | | `-MemberExpr 0x564307329648 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x5643073275c8
|   | |   `-MemberExpr 0x564307329618 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x5643073277f8
|   | |     `-CXXThisExpr 0x564307329608 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5643073296d0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5643073296c0 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x564307329748 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x564307329718 <col:9> '<bound member function type>' ->reschedule 0x5643073265b0
|       `-CXXThisExpr 0x564307329708 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x564307326938 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x5643073268a8 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x564307326a08 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x564307326b50 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x564307326ac0 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x564307326ca0 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x564307326c10 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x564307326d68 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x564307326e28 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x564307326ec8 <col:53> "" ""
|-CXXMethodDecl 0x564307326f60 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x564307327000 <col:47> "" ""
|-AccessSpecDecl 0x564307327070 <line:303:3, col:10> col:3 private
|-FieldDecl 0x5643073270b0 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x564307327118 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x564307327168 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564307327288 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x564307327318 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x564307327448 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x5643073274a8 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x564307327508 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5643074578e8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5643074579c0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x564307457c78 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x564307457c78
| | | `-ParmVarDecl 0x564307457d88 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x564307457e28 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x564307457e28
| |   `-ParmVarDecl 0x564307457f38 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x5643073275c8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x564307327628 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x5643073275c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x564307327448 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x564307327680 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x5643073275c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x5643073274a8 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x5643073276d8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x5643073275c8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x564307327508 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x564307327730 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5643074577f8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564307458158 <col:11>
| |-CXXConstructorDecl 0x564307457ac8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x564307457ac8
| | `-ParmVarDecl 0x564307457bd8 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x564307457fd8 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x564307457fd8
| | `-ParmVarDecl 0x5643074580e8 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x5643075476c8 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x5643073277f8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x564307327870 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x5643073278d8 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x564307327938 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x564307327998 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5643073279e8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564307327b08 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x564307327ba8 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x564307327c08 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x564307450d08 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x564307450d08
| | `-ParmVarDecl 0x564307450e18 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x564307450eb8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x564307450eb8
| | `-ParmVarDecl 0x564307450fc8 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x564307451038 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5643074518b8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5643074518b8
| | `-ParmVarDecl 0x5643074519c8 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x564307451a38 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x564307451a38
| | `-ParmVarDecl 0x564307451b48 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x5643074581b8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x564307458290 <col:11>
|-FieldDecl 0x564307327c80 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x564307327dc8 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x564307327d08 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x564307327f78 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x564307327e88 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x564307328040 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x564307328100 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x5643073281c0 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x564307329878 <col:41, line:355:5>
|   `-ReturnStmt 0x564307329868 <line:354:9, col:38>
|     `-BinaryOperator 0x564307329848 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x564307329818 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x5643073297c8 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x564307327c08
|       |   `-MemberExpr 0x564307329798 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x564307327c80
|       |     `-CXXThisExpr 0x564307329788 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x564307329830 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5643073297f8 <col:38> 'int' 0
|-CXXMethodDecl 0x564307328280 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x5643073283c0 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x564307328330 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x564307328538 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x564307328478 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x564307328680 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x5643073285f0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x564307328748 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x564307328910 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x5643073287f8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x564307328878 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x564307328a10 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x564307328aa0 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NotifierSignal::vmpair
         0 |   class atomic_uint32_t * value
         8 |   uint32_t mask
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430745fa28 <../dummy_inc/click/notifier.hh:50:5, line:53:5> line:50:12 referenced struct vmpair definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430745fb48 <col:5, col:12> col:12 implicit struct vmpair
|-FieldDecl 0x56430745fbe8 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
|-FieldDecl 0x56430745fc48 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x564307469098 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x564307469098

Layout: <CGRecordLayout
  LLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  NonVirtualBaseLLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430745fcb0 <../dummy_inc/click/notifier.hh:54:5, line:57:5> line:54:11 referenced union vmvalue definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430745fdc8 <col:5, col:11> col:11 implicit union vmvalue
|-FieldDecl 0x56430745fe68 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
|-FieldDecl 0x56430745fef8 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
|-CXXConstructorDecl 0x564307467c30 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| `-CompoundStmt 0x564307468068 <col:11>
|-CXXConstructorDecl 0x564307467d38 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x564307467d38
| `-ParmVarDecl 0x564307467e48 <col:11> col:11 'const NotifierSignal::vmvalue &'
|-CXXConstructorDecl 0x564307467ee8 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x564307467ee8
| `-ParmVarDecl 0x564307467ff8 <col:11> col:11 'NotifierSignal::vmvalue &&'
`-CXXDestructorDecl 0x564307468d60 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.NotifierSignal::vmvalue" = type { %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430745d960 prev 0x5643073a6000 <../dummy_inc/click/notifier.hh:12:1, line:71:1> line:12:7 referenced class NotifierSignal definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56430745da58 <col:1, col:7> col:7 implicit referenced class NotifierSignal
|-AccessSpecDecl 0x56430745dae8 <line:13:3, col:9> col:3 public
|-TypedefDecl 0x56430745dc18 <line:14:5, col:61> col:36 referenced unspecified_bool_type 'bool (NotifierSignal::*)() const'
| `-MemberPointerType 0x56430745db90 'bool (NotifierSignal::*)() const'
|   |-RecordType 0x5643073a6090 'NotifierSignal'
|   | `-CXXRecord 0x56430745d960 'NotifierSignal'
|   `-ParenType 0x56430745db30 'bool () const' sugar
|     `-FunctionProtoType 0x564306eec990 'bool () const' const cdecl
|       `-BuiltinType 0x564306e41500 'bool'
|-CXXConstructorDecl 0x56430745dca8 <line:16:5, col:27> col:12 used NotifierSignal 'void ()' inline
|-CXXConstructorDecl 0x56430745dee8 <line:17:5, col:64> col:12 used NotifierSignal 'void (atomic_uint32_t *, uint32_t)' inline
| |-ParmVarDecl 0x56430745dd60 <col:27, col:44> col:44 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x56430745ddd8 <col:51, col:60> col:60 mask 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56430745e098 <line:18:5, col:50> col:12 used NotifierSignal 'void (const NotifierSignal &)' inline
| `-ParmVarDecl 0x56430745dfd8 <col:27, col:49> col:49 x 'const NotifierSignal &'
|-CXXDestructorDecl 0x56430745e190 <line:19:5, col:28> col:12 used ~NotifierSignal 'void () noexcept' inline
|-CXXMethodDecl 0x56430745e2b8 <line:21:5, col:46> col:34 idle_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56430745e378 <line:22:5, col:46> col:34 busy_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56430745e438 <line:23:5, col:53> col:34 overderived_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56430745e4f8 <line:24:5, col:55> col:34 used uninitialized_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56430745e5e8 <line:26:5, col:26> col:17 used active 'bool () const' inline
|-CXXConversionDecl 0x56430745e758 <line:27:5, col:45> col:12 operator bool (NotifierSignal::*)() const 'NotifierSignal::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56430745e8d8 <line:29:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x56430745e818 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x56430745e9a0 <line:31:5, col:24> col:17 idle 'bool () const' inline
|-CXXMethodDecl 0x56430745ea60 <line:32:5, col:24> col:17 busy 'bool () const' inline
|-CXXMethodDecl 0x56430745eb20 <line:33:5, col:31> col:17 overderived 'bool () const' inline
|-CXXMethodDecl 0x56430745ebe0 <line:34:5, col:31> col:17 used initialized 'bool () const' inline
|-FriendDecl 0x56430745ee98 <line:36:5, col:76> col:17
| `-FunctionDecl 0x56430745edd8 parent 0x564306e41488 <col:5, col:76> col:17 used operator== 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x56430745ec90 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x56430745ed08 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-FriendDecl 0x56430745f0b8 <line:37:5, col:76> col:17
| `-FunctionDecl 0x56430745eff8 parent 0x564306e41488 <col:5, col:76> col:17 operator!= 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x56430745eee8 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x56430745ef60 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-CXXMethodDecl 0x56430745f1f8 <line:39:5, col:54> col:21 operator= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x56430745f108 <col:31, col:53> col:53 x 'const NotifierSignal &'
|-CXXMethodDecl 0x56430745f340 <line:40:5, col:55> col:21 used operator+= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x56430745f2b0 <col:32, col:54> col:54 x 'const NotifierSignal &'
|-FriendDecl 0x56430745f608 <line:41:5, col:78> col:27
| `-FunctionDecl 0x56430745f548 parent 0x564306e41488 <col:5, col:78> col:27 operator+ 'NotifierSignal (NotifierSignal, const NotifierSignal &)'
|   |-ParmVarDecl 0x56430745f3f8 <col:37, col:52> col:52 a 'NotifierSignal' destroyed
|   `-ParmVarDecl 0x56430745f470 <col:55, col:77> col:77 b 'const NotifierSignal &'
|-CXXMethodDecl 0x56430745f718 <line:43:5, col:39> col:17 used swap 'void (NotifierSignal &)' inline
| `-ParmVarDecl 0x56430745f658 <col:22, col:38> col:38 x 'NotifierSignal &'
|-CXXMethodDecl 0x56430745f898 <line:45:5, col:36> col:12 unparse 'String (Router *) const'
| `-ParmVarDecl 0x56430745f7d0 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x56430745f960 <line:47:5, col:35> col:17 static_initialize 'void ()' static
|-AccessSpecDecl 0x56430745fa00 <line:49:3, col:10> col:3 private
|-CXXRecordDecl 0x56430745fa28 <line:50:5, line:53:5> line:50:12 referenced struct vmpair definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56430745fb48 <col:5, col:12> col:12 implicit struct vmpair
| |-FieldDecl 0x56430745fbe8 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
| |-FieldDecl 0x56430745fc48 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x564307469098 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x564307469098
|-CXXRecordDecl 0x56430745fcb0 <line:54:5, line:57:5> line:54:11 referenced union vmvalue definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56430745fdc8 <col:5, col:11> col:11 implicit union vmvalue
| |-FieldDecl 0x56430745fe68 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
| |-FieldDecl 0x56430745fef8 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
| |-CXXConstructorDecl 0x564307467c30 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x564307468068 <col:11>
| |-CXXConstructorDecl 0x564307467d38 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x564307467d38
| | `-ParmVarDecl 0x564307467e48 <col:11> col:11 'const NotifierSignal::vmvalue &'
| |-CXXConstructorDecl 0x564307467ee8 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x564307467ee8
| | `-ParmVarDecl 0x564307467ff8 <col:11> col:11 'NotifierSignal::vmvalue &&'
| `-CXXDestructorDecl 0x564307468d60 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial
|-FieldDecl 0x56430745ff70 <line:59:5, col:13> col:13 referenced _v 'NotifierSignal::vmvalue'
|-FieldDecl 0x56430745ffd0 <line:60:5, col:14> col:14 referenced _mask 'uint32_t':'unsigned int'
|-EnumDecl 0x564307460020 <line:62:5, line:65:5> line:62:5
| |-EnumConstantDecl 0x564307460120 <line:63:2, col:14> col:2 referenced true_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x564307460320 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307460100 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5643074600e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5643074601b0 <col:17, col:30> col:17 referenced false_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x564307460338 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307460190 <col:30> 'int' Int: 2
| |     `-IntegerLiteral 0x564307460170 <col:30> 'int' 2
| |-EnumConstantDecl 0x564307460240 <col:33, col:52> col:33 referenced overderived_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x564307460350 <col:52> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307460220 <col:52> 'int' Int: 4
| |     `-IntegerLiteral 0x564307460200 <col:52> 'int' 4
| `-EnumConstantDecl 0x5643074602d0 <line:64:2, col:23> col:2 referenced uninitialized_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
|   `-ImplicitCastExpr 0x564307460368 <col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643074602b0 <col:23> 'int' Int: 8
|       `-IntegerLiteral 0x564307460290 <col:23> 'int' 8
|-VarDecl 0x564307460390 <line:66:5, col:28> col:28 used static_value 'atomic_uint32_t' static
|-CXXMethodDecl 0x564307460498 <line:68:5, col:48> col:10 used hard_assign_vm 'void (const NotifierSignal &)'
| `-ParmVarDecl 0x564307460408 <col:25, col:47> col:47 x 'const NotifierSignal &'
|-CXXMethodDecl 0x564307460660 <line:69:5, col:63> col:10 hard_derive_one 'void (atomic_uint32_t *, uint32_t)'
| |-ParmVarDecl 0x564307460550 <col:26, col:43> col:43 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x5643074605c8 <col:50, col:59> col:59 mask 'uint32_t':'unsigned int'
`-CXXMethodDecl 0x564307460898 <line:70:5, col:61> col:17 used hard_equals 'bool (const NotifierSignal::vmpair *, const NotifierSignal::vmpair *)' static
  |-ParmVarDecl 0x564307460748 <col:29, col:43> col:43 a 'const NotifierSignal::vmpair *'
  `-ParmVarDecl 0x5643074607c0 <col:46, col:60> col:60 b 'const NotifierSignal::vmpair *'

Layout: <CGRecordLayout
  LLVMType:%class.NotifierSignal = type <{ %"union.NotifierSignal::vmvalue", i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.NotifierSignal.base = type <{ %"union.NotifierSignal::vmvalue", i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430747c3d8 <../elements/standard/discard.hh:54:1, line:86:1> line:54:7 class Discard definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56430747c538 <col:1, col:7> col:7 implicit referenced class Discard
|-AccessSpecDecl 0x56430747c5c8 <col:34, col:40> col:34 public
|-CXXConstructorDecl 0x56430747c650 <line:56:5, col:13> col:5 Discard 'void ()'
|-CXXMethodDecl 0x56430747c750 <line:58:5, col:56> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5643073a7a68 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56430747e038 <col:36, col:56>
|   `-ReturnStmt 0x56430747e028 <col:38, col:45>
|     `-ImplicitCastExpr 0x56430747e010 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56430747dff0 <col:45> 'const char [8]' lvalue "Discard"
|-CXXMethodDecl 0x56430747c818 <line:59:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5643073a7b30 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56430747e098 <col:36, col:56>
|   `-ReturnStmt 0x56430747e088 <col:38, col:45>
|     `-ImplicitCastExpr 0x56430747e070 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56430747e050 <col:45> 'const char []' lvalue Var 0x5643073a7d58 'PORTS_1_0' 'const char []'
|-CXXMethodDecl 0x56430747caf0 <line:61:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5643073a9300 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56430747c9a0 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x56430747ca18 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56430747cc48 <line:62:5, col:38> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x5643073a9550 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x56430747cbb0 <col:20, col:34> col:34 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56430747cd10 <line:63:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5643073a93d0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56430747ced8 <line:65:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x5643073a68d8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x56430747cdc8 <col:15> col:18 'int'
| `-ParmVarDecl 0x56430747ce40 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x56430747d028 <line:66:5, col:25> col:10 run_task 'bool (Task *)'
| |-Overrides: [ 0x5643073a6de8 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x56430747cf98 <col:19, col:24> col:25 'Task *'
|-AccessSpecDecl 0x56430747d0d0 <line:68:3, col:12> col:3 protected
|-FieldDecl 0x56430747d108 <line:70:5, col:10> col:10 _task 'Task'
|-FieldDecl 0x56430747d168 <line:71:5, col:20> col:20 _signal 'NotifierSignal'
|-TypedefDecl 0x56430747d1c8 <line:74:5, col:22> col:22 referenced counter_t 'uint64_t':'unsigned long'
| `-TypedefType 0x564306f9a0c0 'uint64_t' sugar
|   |-Typedef 0x564306eaa530 'uint64_t'
|   `-TypedefType 0x564306e836c0 '__uint64_t' sugar
|     |-Typedef 0x564306e83278 '__uint64_t'
|     `-BuiltinType 0x564306e41640 'unsigned long'
|-FieldDecl 0x56430747d250 <line:78:5, col:15> col:15 _count 'Discard::counter_t':'unsigned long'
|-FieldDecl 0x56430747d2b8 <line:80:5, col:14> col:14 _burst 'unsigned int'
|-FieldDecl 0x56430747d318 <line:81:5, col:10> col:10 _active 'bool'
|-EnumDecl 0x56430747d368 <line:83:5, col:45> col:5
| |-EnumConstantDecl 0x56430747d470 <col:12, col:29> col:12 h_reset_counts 'Discard::(anonymous enum at ../elements/standard/discard.hh:83:5)'
| | `-ImplicitCastExpr 0x56430747d550 <col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430747d450 <col:29> 'int' Int: 0
| |     `-IntegerLiteral 0x56430747d430 <col:29> 'int' 0
| `-EnumConstantDecl 0x56430747d500 <col:32, col:43> col:32 h_active 'Discard::(anonymous enum at ../elements/standard/discard.hh:83:5)'
|   `-ImplicitCastExpr 0x56430747d568 <col:43> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56430747d4e0 <col:43> 'int' Int: 1
|       `-IntegerLiteral 0x56430747d4c0 <col:43> 'int' 1
|-CXXMethodDecl 0x56430747d7b0 <line:84:5, col:79> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56430747d590 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x56430747d608 <col:46, col:54> col:55 'Element *'
| |-ParmVarDecl 0x56430747d688 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x56430747d700 <col:65, col:78> col:79 'ErrorHandler *'
|-CXXConstructorDecl 0x56430747d898 <line:54:7> col:7 implicit Discard 'void (const Discard &)' inline default_delete noexcept-unevaluated 0x56430747d898
| `-ParmVarDecl 0x56430747d9a8 <col:7> col:7 'const Discard &'
|-CXXConstructorDecl 0x56430747da48 <col:7> col:7 implicit Discard 'void (Discard &&)' inline default_delete noexcept-unevaluated 0x56430747da48
| `-ParmVarDecl 0x56430747db58 <col:7> col:7 'Discard &&'
|-CXXMethodDecl 0x56430747dbf8 <col:7> col:7 implicit operator= 'Discard &(const Discard &)' inline default_delete noexcept-unevaluated 0x56430747dbf8
| `-ParmVarDecl 0x56430747dd08 <col:7> col:7 'const Discard &'
|-CXXMethodDecl 0x56430747dd78 <col:7> col:7 implicit operator= 'Discard &(Discard &&)' inline default_delete noexcept-unevaluated 0x56430747dd78
| `-ParmVarDecl 0x56430747de88 <col:7> col:7 'Discard &&'
`-CXXDestructorDecl 0x56430747df10 <col:7> col:7 implicit ~Discard 'void ()' inline default noexcept-unevaluated 0x56430747df10
  `-Overrides: [ 0x5643073a6608 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Discard = type <{ %class.Element.base, [4 x i8], %class.Task, %class.NotifierSignal, i64, i32, i8, [3 x i8] }>
  NonVirtualBaseLLVMType:%class.Discard.base = type <{ %class.Element.base, [4 x i8], %class.Task, %class.NotifierSignal, i64, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643071791c0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5643071792d8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x564307179378 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5643071793d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x564307179438 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5643071794e8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643071797f0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x564307179908 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5643071799b0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x564307179a18 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x564307179aa8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56430717fb40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56430717ff78 <col:12>
|-CXXConstructorDecl 0x56430717fc48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56430717fd58 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5643071799b0 'data' 'const char *'
| | `-ImplicitCastExpr 0x564307182500 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5643071824d0 <col:12> 'const char *const' lvalue .data 0x5643071799b0
| |     `-DeclRefExpr 0x5643071824b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56430717fd58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564307179a18 'length' 'int'
| | `-ImplicitCastExpr 0x564307182590 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x564307182560 <col:12> 'const int' lvalue .length 0x564307179a18
| |     `-DeclRefExpr 0x564307182540 <col:12> 'const String::rep_t' lvalue ParmVar 0x56430717fd58 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x564307179aa8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x564307182620 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5643071825f0 <col:12> 'String::memo_t *const' lvalue .memo 0x564307179aa8
| |     `-DeclRefExpr 0x5643071825d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56430717fd58 '' 'const String::rep_t &'
| `-CompoundStmt 0x564307182678 <col:12>
|-CXXConstructorDecl 0x56430717fdf8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56430717fdf8
| `-ParmVarDecl 0x56430717ff08 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x564307185460 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x564307190e78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x564307190f88 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5643071914a0 <col:12>
|   |-BinaryOperator 0x5643071912b8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x564307191270 <col:12> 'const char *' lvalue ->data 0x5643071799b0
|   | | `-CXXThisExpr 0x564307191260 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5643071912a0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x564307191230 <col:12> 'const char *const' lvalue .data 0x5643071799b0
|   |     `-DeclRefExpr 0x564307191210 <col:12> 'const String::rep_t' lvalue ParmVar 0x564307190f88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564307191380 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x564307191338 <col:12> 'int' lvalue ->length 0x564307179a18
|   | | `-CXXThisExpr 0x564307191328 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564307191368 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5643071912f8 <col:12> 'const int' lvalue .length 0x564307179a18
|   |     `-DeclRefExpr 0x5643071912d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x564307190f88 '' 'const String::rep_t &'
|   |-BinaryOperator 0x564307191448 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x564307191400 <col:12> 'String::memo_t *' lvalue ->memo 0x564307179aa8
|   | | `-CXXThisExpr 0x5643071913f0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x564307191430 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5643071913c0 <col:12> 'String::memo_t *const' lvalue .memo 0x564307179aa8
|   |     `-DeclRefExpr 0x5643071913a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564307190f88 '' 'const String::rep_t &'
|   `-ReturnStmt 0x564307191490 <col:12>
|     `-UnaryOperator 0x564307191478 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564307191468 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x564307190ff8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564307190ff8
  `-ParmVarDecl 0x564307191108 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307170730 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564307170848 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5643071708d8 <col:16, col:22> col:16 public
|-TypedefDecl 0x564307170918 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x564306e41fd0 'const char *'
|   `-QualType 0x564306e41521 'const char' const
|     `-BuiltinType 0x564306e41520 'char'
|-TypedefDecl 0x5643071709a0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x564307170970 'String::const_iterator' sugar
|   |-Typedef 0x564307170918 'const_iterator'
|   `-PointerType 0x564306e41fd0 'const char *'
|     `-QualType 0x564306e41521 'const char' const
|       `-BuiltinType 0x564306e41520 'char'
|-TypedefDecl 0x564307170b10 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x564307170a80 'int (String::*)() const'
|   |-RecordType 0x5643071707c0 'String'
|   | `-CXXRecord 0x564307170730 'String'
|   `-ParenType 0x564307170a20 'int () const' sugar
|     `-FunctionProtoType 0x5643071455c0 'int () const' const cdecl
|       `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307170b78 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x564306f9a1a0 'int64_t' sugar
|   |-Typedef 0x564306eaa390 'int64_t'
|   `-TypedefType 0x564306e83630 '__int64_t' sugar
|     |-Typedef 0x564306e83208 '__int64_t'
|     `-BuiltinType 0x564306e415a0 'long'
|-TypedefDecl 0x564307170be0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x564306f9a0c0 'uint64_t' sugar
|   |-Typedef 0x564306eaa530 'uint64_t'
|   `-TypedefType 0x564306e836c0 '__uint64_t' sugar
|     |-Typedef 0x564306e83278 '__uint64_t'
|     `-BuiltinType 0x564306e41640 'unsigned long'
|-TypedefDecl 0x564307170c70 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x564307170c40 'String::intmax_t' sugar
|   |-Typedef 0x564307170b78 'intmax_t'
|   `-TypedefType 0x564306f9a1a0 'int64_t' sugar
|     |-Typedef 0x564306eaa390 'int64_t'
|     `-TypedefType 0x564306e83630 '__int64_t' sugar
|       |-Typedef 0x564306e83208 '__int64_t'
|       `-BuiltinType 0x564306e415a0 'long'
|-TypedefDecl 0x564307170d00 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x564307170cd0 'String::uintmax_t' sugar
|   |-Typedef 0x564307170be0 'uintmax_t'
|   `-TypedefType 0x564306f9a0c0 'uint64_t' sugar
|     |-Typedef 0x564306eaa530 'uint64_t'
|     `-TypedefType 0x564306e836c0 '__uint64_t' sugar
|       |-Typedef 0x564306e83278 '__uint64_t'
|       `-BuiltinType 0x564306e41640 'unsigned long'
|-CXXConstructorDecl 0x564307170dc0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x564307170f68 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x564307170ea8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x564307171118 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x564307171058 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x564307171270 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5643071711e0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x564307171488 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x564307171338 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5643071713b8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5643071716a8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x564307171558 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5643071715d8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5643071718c8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564307171778 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5643071717f8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x564307171ae8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x564307171998 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x564307171a18 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x564307171c78 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x564307171bb0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x564307171df8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x564307171d38 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x564307171f88 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x564307171ec0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5643071720e0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x564307172050 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x564307172238 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5643071721a8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x564307172390 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x564307172300 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x564307172518 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x564307172458 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5643071726a8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5643071725e0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x564307172838 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x564307172770 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5643071729c8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x564307172900 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x564307172ac0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x564307172be8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x564307172d68 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x564307172ca0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x564307172eb8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x564307172e28 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x564307172f70 <col:63> "" ""
|-CXXMethodDecl 0x5643071730b8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x564307172ff8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5643071732c8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x564307173178 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5643071731f8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5643071734e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x564307173390 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x564307173410 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5643071737c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5643071735a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x564307173628 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56430717f610 <col:55> 'int' 10
| `-ParmVarDecl 0x5643071736a0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56430717f630 <col:76> 'bool' true
|-CXXMethodDecl 0x564307173aa8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x564307173890 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x564307173910 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56430717f640 <col:56> 'int' 10
| `-ParmVarDecl 0x564307173988 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56430717f660 <col:77> 'bool' true
|-CXXMethodDecl 0x564307173bb0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x564307173c78 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x564307173d40 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x564307173de0 <col:20>
| `-OptimizeNoneAttr 0x564307173e38 <col:30>
|-CXXConversionDecl 0x564307173f28 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x564307173ff8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5643071740b8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5643071741a8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x564307174268 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5643071743e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x564307174320 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x564307174538 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5643071744a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x564307174628 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5643071746e8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x564307174938 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5643071747a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x564307174820 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x564307174b98 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x564307174a00 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x564307174a80 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x564307174c68 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x564307174e78 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x564307174d20 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x564307174da0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x564307175098 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x564307174f40 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x564307174fc0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x564307175228 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x564307175160 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x564307175318 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x564307175488 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5643071753c8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564307175698 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x564307175548 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5643071755c8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5643071758b0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x564307175758 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5643071757d0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x564307175a40 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x564307175970 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x564307175c60 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x564307175b00 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x564307175b80 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564307175db0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x564307175d20 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x564307175f88 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x564307175e70 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x564307175ef0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5643071760d8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x564307176048 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5643071762f0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x564307176190 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x564307176210 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56430717f670 <col:39> 'int' 0
|-CXXMethodDecl 0x564307176510 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5643071763b0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x564307176430 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56430717f690 <col:48> 'int' 0
|-CXXMethodDecl 0x5643071766f0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5643071765d0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x564307176650 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56430717f6b0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5643071767c0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x564307176880 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x564307176940 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x564307176a00 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x564307176ac0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x564307176c68 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x564307176b70 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x564307176de8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x564307176d20 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x564307176fc0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x564307176ea8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x564307177138 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x564307177078 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x564307177280 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5643071771f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5643071773d0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x564307177340 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5643071775a8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x564307177490 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x564307177510 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x564307177788 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x564307177670 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5643071776f0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5643071778d8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x564307177848 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x564307177ae8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x564307177998 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x564307177a18 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x564307177c48 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x564307177bb0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x564307177da0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x564307177d08 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x564307177e48 <col:57> "" ""
|-CXXMethodDecl 0x564307177f58 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x564307177ec8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5643071780a8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x564307178018 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x564307178228 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x564307178160 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5643071782f0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5643071783b0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x564307178470 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x564307178510 <col:49> "" ""
|-CXXMethodDecl 0x5643071785a0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x564307178660 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x564307178750 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x564307178818 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5643071788d8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x564307178998 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x564307178a90 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x564307178b58 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x564307178c20 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x564307178df8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x564307178cd8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x564307178d58 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x564307179020 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x564307178ec0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x564307178f40 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x564307179130 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x564307179198 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5643071791c0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5643071792d8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x564307179378 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5643071793d8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x564307179438 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5643071794e8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x564307179550 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x564307179788 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5643071797d8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564307179768 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x564307179678 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x564307179620 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x564307179660 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x564307179640 <col:32> 'int' 8
|-CXXRecordDecl 0x5643071797f0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x564307179908 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5643071799b0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x564307179a18 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x564307179aa8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56430717fb40 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56430717ff78 <col:12>
| |-CXXConstructorDecl 0x56430717fc48 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56430717fd58 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5643071799b0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x564307182500 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5643071824d0 <col:12> 'const char *const' lvalue .data 0x5643071799b0
| | |     `-DeclRefExpr 0x5643071824b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56430717fd58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564307179a18 'length' 'int'
| | | `-ImplicitCastExpr 0x564307182590 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x564307182560 <col:12> 'const int' lvalue .length 0x564307179a18
| | |     `-DeclRefExpr 0x564307182540 <col:12> 'const String::rep_t' lvalue ParmVar 0x56430717fd58 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x564307179aa8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x564307182620 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5643071825f0 <col:12> 'String::memo_t *const' lvalue .memo 0x564307179aa8
| | |     `-DeclRefExpr 0x5643071825d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56430717fd58 '' 'const String::rep_t &'
| | `-CompoundStmt 0x564307182678 <col:12>
| |-CXXConstructorDecl 0x56430717fdf8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56430717fdf8
| | `-ParmVarDecl 0x56430717ff08 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x564307185460 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x564307190e78 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564307190f88 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5643071914a0 <col:12>
| |   |-BinaryOperator 0x5643071912b8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x564307191270 <col:12> 'const char *' lvalue ->data 0x5643071799b0
| |   | | `-CXXThisExpr 0x564307191260 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5643071912a0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x564307191230 <col:12> 'const char *const' lvalue .data 0x5643071799b0
| |   |     `-DeclRefExpr 0x564307191210 <col:12> 'const String::rep_t' lvalue ParmVar 0x564307190f88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564307191380 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x564307191338 <col:12> 'int' lvalue ->length 0x564307179a18
| |   | | `-CXXThisExpr 0x564307191328 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564307191368 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5643071912f8 <col:12> 'const int' lvalue .length 0x564307179a18
| |   |     `-DeclRefExpr 0x5643071912d8 <col:12> 'const String::rep_t' lvalue ParmVar 0x564307190f88 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x564307191448 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x564307191400 <col:12> 'String::memo_t *' lvalue ->memo 0x564307179aa8
| |   | | `-CXXThisExpr 0x5643071913f0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x564307191430 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5643071913c0 <col:12> 'String::memo_t *const' lvalue .memo 0x564307179aa8
| |   |     `-DeclRefExpr 0x5643071913a0 <col:12> 'const String::rep_t' lvalue ParmVar 0x564307190f88 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x564307191490 <col:12>
| |     `-UnaryOperator 0x564307191478 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564307191468 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x564307190ff8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x564307190ff8
|   `-ParmVarDecl 0x564307191108 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x564307179b20 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x564307179d68 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x564307179b88 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x564307179c08 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x564307179c80 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56430717fb00 <col:79, line:261:5>
|   |-BinaryOperator 0x56430717f778 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56430717f710 <col:2, col:5> 'const char *' lvalue .data 0x5643071799b0
|   | | `-MemberExpr 0x56430717f6e0 <col:2> 'String::rep_t' lvalue ->_r 0x564307179b20
|   | |   `-CXXThisExpr 0x56430717f6d0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56430717f760 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56430717f740 <col:12> 'const char *' lvalue ParmVar 0x564307179b88 'data' 'const char *'
|   |-BinaryOperator 0x56430717f840 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56430717f7d8 <col:2, col:5> 'int' lvalue .length 0x564307179a18
|   | | `-MemberExpr 0x56430717f7a8 <col:2> 'String::rep_t' lvalue ->_r 0x564307179b20
|   | |   `-CXXThisExpr 0x56430717f798 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56430717f828 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56430717f808 <col:14> 'int' lvalue ParmVar 0x564307179c08 'length' 'int'
|   `-IfStmt 0x56430717fae8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56430717f960 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56430717f948 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56430717f928 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56430717f908 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56430717f8a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x564307179aa8
|     |       | `-MemberExpr 0x56430717f870 <col:7> 'String::rep_t' lvalue ->_r 0x564307179b20
|     |       |   `-CXXThisExpr 0x56430717f860 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56430717f8f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56430717f8d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x564307179c80 'memo' 'String::memo_t *'
|     `-CallExpr 0x56430717fac0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56430717faa8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56430717f9b0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x564307168798 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56430717fa18 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564307179378
|         `-ImplicitCastExpr 0x56430717fa00 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56430717f9e0 <col:27> 'String::memo_t *' lvalue ParmVar 0x564307179c80 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56430717a018 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x564307179e38 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x564307179eb8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x564307179f30 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x564307179b20 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56430717ff88 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x564307180118 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x564307180080 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56430717fff0 <col:2> '<bound member function type>' ->assign_memo 0x564307179d68
|     | `-ImplicitCastExpr 0x5643071800b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56430717ffe0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5643071800d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x564307180020 <col:14> 'const char *' lvalue ParmVar 0x564307179e38 'data' 'const char *'
|     |-ImplicitCastExpr 0x5643071800e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x564307180040 <col:20> 'int' lvalue ParmVar 0x564307179eb8 'length' 'int'
|     `-ImplicitCastExpr 0x564307180100 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x564307180060 <col:28> 'String::memo_t *' lvalue ParmVar 0x564307179f30 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56430717a1a8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56430717a0e8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x564307180370 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5643071802f0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x564307180140 <col:2> '<bound member function type>' ->assign_memo 0x564307179d68
|     | `-CXXThisExpr 0x564307180130 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x564307180328 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5643071801c0 <col:14, col:19> 'const char *' lvalue .data 0x5643071799b0
|     |   `-MemberExpr 0x564307180190 <col:14, col:16> 'String::rep_t' lvalue ._r 0x564307179b20
|     |     `-DeclRefExpr 0x564307180170 <col:14> 'const String' lvalue ParmVar 0x56430717a0e8 'x' 'const String &'
|     |-ImplicitCastExpr 0x564307180340 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x564307180240 <col:25, col:30> 'int' lvalue .length 0x564307179a18
|     |   `-MemberExpr 0x564307180210 <col:25, col:27> 'String::rep_t' lvalue ._r 0x564307179b20
|     |     `-DeclRefExpr 0x5643071801f0 <col:25> 'const String' lvalue ParmVar 0x56430717a0e8 'x' 'const String &'
|     `-ImplicitCastExpr 0x564307180358 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5643071802c0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x564307179aa8
|         `-MemberExpr 0x564307180290 <col:38, col:40> 'String::rep_t' lvalue ._r 0x564307179b20
|           `-DeclRefExpr 0x564307180270 <col:38> 'const String' lvalue ParmVar 0x56430717a0e8 'x' 'const String &'
|-CXXMethodDecl 0x56430717a270 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x564307180d30 <col:31, line:278:5>
|   `-IfStmt 0x564307180d18 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x564307180410 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5643071803f8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5643071803c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564307179aa8
|     |     `-MemberExpr 0x564307180398 <col:6> 'String::rep_t' lvalue ->_r 0x564307179b20
|     |       `-CXXThisExpr 0x564307180388 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x564307180cf0 <col:15, line:277:2>
|       |-ParenExpr 0x5643071808c0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x564307180890 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x564307180520 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x564307180508 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5643071804f0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5643071804b0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564307179378
|       |   |       `-ImplicitCastExpr 0x564307180498 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x564307180468 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x564307179aa8
|       |   |           `-MemberExpr 0x564307180438 <col:27> 'String::rep_t' lvalue ->_r 0x564307179b20
|       |   |             `-CXXThisExpr 0x564307180428 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x564307180580 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x564307180560 <col:54> 'int' 0
|       |   `-CallExpr 0x5643071807f0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5643071807d8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x564307180758 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x564307180830 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564307180668 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x564307180848 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x564307180698 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x564307180860 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5643071806d0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x564307180878 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x564307180740 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x564307180728 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5643071806f0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x564307180c10 <line:274:6, line:275:22>
|       | |-CallExpr 0x564307180ad0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x564307180ab8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x564307180a30 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x564307169be0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x564307180a00 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x564307179378
|       | |   `-ImplicitCastExpr 0x5643071809e8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5643071809b8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x564307179aa8
|       | |       `-MemberExpr 0x564307180988 <col:40> 'String::rep_t' lvalue ->_r 0x564307179b20
|       | |         `-CXXThisExpr 0x564307180978 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x564307180bd0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x564307180bb8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x564307180af8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56430717ea50 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x564307180bf8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x564307180b58 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x564307179aa8
|       |       `-MemberExpr 0x564307180b28 <col:15> 'String::rep_t' lvalue ->_r 0x564307179b20
|       |         `-CXXThisExpr 0x564307180b18 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x564307180cd0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x564307180c68 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x564307179aa8
|         | `-MemberExpr 0x564307180c38 <col:6> 'String::rep_t' lvalue ->_r 0x564307179b20
|         |   `-CXXThisExpr 0x564307180c28 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x564307180cb8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x564307180c98 <col:16> 'int' 0
|-CXXMethodDecl 0x56430717a508 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56430717a328 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56430717a3a8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56430717a420 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56430717a5e0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56430717a830 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56430717a698 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56430717a718 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56430717a790 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56430717aa18 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56430717a900 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56430717a980 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56430717ab18 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x564307180e08 <col:41, line:286:5>
|   `-ReturnStmt 0x564307180df8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x564307180dc8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x564307180d90 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x564307180d78 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x564307180d58 <col:46> 'int' 1
|-CXXMethodDecl 0x56430717adb8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56430717abd0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56430717ac50 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56430717acd0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56430717ea50 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56430717ae80 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56430717eb20 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56430717ecf0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56430717ebd8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56430717ec58 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56430717edb0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56430717ee78 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56430717ef78 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56430717eff0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56430717f068 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56430717f0d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56430717f1d0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56430717f220 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56430717f1b0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56430717f190 <col:22> 'int' 14
|-CXXMethodDecl 0x56430717f438 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56430717f250 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56430717f2d0 <col:38> col:41 'int'
| `-ParmVarDecl 0x56430717f350 <col:43> col:46 'int'
|-FriendDecl 0x56430717f540 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56430717f5d0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643074b5c60 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5643074b5e38 prev 0x5643074b5c60 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5643074b5ec8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5643074b5ef0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643074b7850 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5643074b7800 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5643074b77e0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5643074b6108 'type'
|     `-SubstTemplateTypeParmType 0x5643074b60d0 'String' sugar
|       |-TemplateTypeParmType 0x564307134fe0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x564307134f90 'T'
|       `-RecordType 0x5643071707c0 'String'
|         `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074b7908 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5643074b78d0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5643074b78b0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5643074b7850 'type'
|     `-ElaboratedType 0x5643074b7800 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5643074b77e0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5643074b6108 'type'
|         `-SubstTemplateTypeParmType 0x5643074b60d0 'String' sugar
|           |-TemplateTypeParmType 0x564307134fe0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564307134f90 'T'
|           `-RecordType 0x5643071707c0 'String'
|             `-CXXRecord 0x564307170730 'String'
|-CXXMethodDecl 0x5643074b7a88 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5643074b7998 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5643074b7b78 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5643074b7c58 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5643074b7c58
|-CXXMethodDecl 0x5643074b7f28 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5643074b7e30 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5643074b8168 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643074b7fe0 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643074b8058 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b8338 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643074b8228 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643074b82a0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b8498 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5643074b8568 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5643074b87b8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643074b8628 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5643074b86a0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b8a18 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5643074b8888 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5643074b8900 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b8bd8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5643074b8ae8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b8d98 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5643074b8ca0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b8e50 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643074b8f00 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5643074b9138 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5643074b8fb0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5643074b9028 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5643074b93d8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5643074b92e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5643074b94a0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5643074b94f0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5643074b9540 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643073a8f70 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5643074b4a08 prev 0x5643073a8f70 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5643074b5bd0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5643074b5b80 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5643074b5b60 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5643074b5a10 'type'
|     `-SubstTemplateTypeParmType 0x5643074b58a0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56430710ad90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56430710ad38 'F'
|       `-RecordType 0x5643074b5500 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5643074b5420 'typed_array_memory'
|-FieldDecl 0x5643074b9590 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5643074b95e0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5643074b9618 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|   |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643071422a8 'T'
|   `-RecordType 0x5643071707c0 'String'
|     `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074b96a8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5643074b9670 'String &'
|   `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x5643071707c0 'String'
|       `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074b9738 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5643074b9700 'const String &'
|   `-QualType 0x5643074b4aa1 'const String' const
|     `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643071707c0 'String'
|         `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074b97c8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5643074b9790 'String *'
|   `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x5643071707c0 'String'
|       `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074b9858 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5643074b9820 'const String *'
|   `-QualType 0x5643074b4aa1 'const String' const
|     `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643071707c0 'String'
|         `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074ba4b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5643074ba460 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5643074ba440 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5643074ba378 'type'
|     `-LValueReferenceType 0x5643074ba340 'const String &'
|       `-QualType 0x5643074ba0e1 'const String' const
|         `-SubstTemplateTypeParmType 0x5643074ba0e0 'String' sugar
|           |-TemplateTypeParmType 0x564307114ce0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x564307114c88 'T'
|           `-RecordType 0x5643071707c0 'String'
|             `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074ba518 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5643074b9700 'const String &'
|   `-QualType 0x5643074b4aa1 'const String' const
|     `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643071707c0 'String'
|         `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074ba570 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643074ba5d8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5643074b9790 'String *'
|   `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-RecordType 0x5643071707c0 'String'
|       `-CXXRecord 0x564307170730 'String'
|-TypedefDecl 0x5643074ba640 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5643074b9820 'const String *'
|   `-QualType 0x5643074b4aa1 'const String' const
|     `-SubstTemplateTypeParmType 0x5643074b4aa0 'String' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-RecordType 0x5643071707c0 'String'
|         `-CXXRecord 0x564307170730 'String'
|-EnumDecl 0x5643074ba698 <line:134:5> col:5
| `-EnumConstantDecl 0x5643074ba790 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5643074ba770 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564307143988 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564307143960 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564307143940 <col:40> 'int' 1
|-CXXConstructorDecl 0x5643074ba818 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5643074baaa8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643074ba8d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643074ba970 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5643074bad38 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5643074bac20 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5643074baff8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5643074baee0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5643074bb310 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5643074bb1f0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5643074bb620 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5643074bb500 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5643074bb910 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643074bb758 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643074bb7d0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643074bba38 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5643074bbae8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643074bbb40 <col:30> Inherited
|-CXXMethodDecl 0x5643074bbb88 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5643074bbc38 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643074bbc90 <col:30> Inherited
|-CXXMethodDecl 0x5643074bbd58 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643074bbe08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643074bbe60 <col:30> Inherited
|-CXXMethodDecl 0x5643074bbea8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643074bbf58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643074bbfb0 <col:30> Inherited
|-CXXMethodDecl 0x5643074bbff8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643074bc0a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643074bc100 <col:30> Inherited
|-CXXMethodDecl 0x5643074bc148 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5643074bc1f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643074bc250 <col:30> Inherited
|-CXXMethodDecl 0x5643074bc278 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643074bc328 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5643074bc3d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5643074bc598 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643074bc488 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643074bc500 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643074bdc30 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5643074bdba0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643074bddd8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5643074bdce8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643074bde90 <col:20>
| `-OptimizeNoneAttr 0x5643074bdee8 <col:30>
|-CXXMethodDecl 0x5643074be008 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5643074bdf10 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643074be0c0 <col:20>
| `-OptimizeNoneAttr 0x5643074be118 <col:30>
|-CXXMethodDecl 0x5643074be1d0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643074be140 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643074be318 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643074be288 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643074be448 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5643074be548 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5643074be618 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5643074be6e8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5643074be828 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643074be798 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643074be970 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643074be8e0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5643074beab8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5643074bea28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643074beb70 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5643074bec70 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5643074bebe0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5643074bed28 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5643074bede8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5643074beee8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5643074bf068 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5643074befa8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5643074bf7f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5643074bf120 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5643074bf758 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5643074bf658 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5643074bf8d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5643074bfa28 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5643074bf998 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643074bfae0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5643074bfd28 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5643074bfba0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5643074bfc18 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5643074bfeb8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5643074bfdf8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5643074c00c8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5643074bff80 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5643074bfff8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5643074c0188 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5643074c03e8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5643074c02f0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5643074c04b8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5643074c04b8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430747e0b0 prev 0x5643073a6140 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56430747e1a8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56430747e238 <col:22, col:28> col:22 public
|-EnumDecl 0x56430747e260 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56430747e378 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e358 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56430747e340 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56430747e320 <col:14> 'int' 999
| |-EnumConstantDecl 0x56430747e420 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e400 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56430747e3e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56430747e3c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x56430747e4b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e490 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56430747e470 <col:17> 'int' 0
| |-EnumConstantDecl 0x56430747e540 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e520 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56430747e500 <col:13> 'int' 1
| |-EnumConstantDecl 0x56430747e5d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e5b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56430747e590 <col:16> 'int' 2
| |-EnumConstantDecl 0x56430747e660 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e640 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56430747e620 <col:13> 'int' 3
| |-EnumConstantDecl 0x56430747e6f0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e6d0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56430747e6b0 <col:15> 'int' 4
| |-EnumConstantDecl 0x56430747e780 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e760 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56430747e740 <col:14> 'int' 5
| |-EnumConstantDecl 0x56430747e810 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56430747e7f0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56430747e7d0 <col:12> 'int' 6
| `-EnumConstantDecl 0x56430747e8a0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56430747e880 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56430747e860 <col:13> 'int' 7
|-VarDecl 0x56430747e910 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56430747e998 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56430747ea20 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56430747eaa8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56430747eb30 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56430747ebb8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56430747ec40 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56430747ecc8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56430747ed50 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56430747edd8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56430747ee60 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56430747ef60 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56430748adc8 '_nerrors' 'int'
| | `-IntegerLiteral 0x56430748b558 <line:128:13> 'int' 0
| `-CompoundStmt 0x56430748b5c8 <col:16, line:129:5>
|-CXXDestructorDecl 0x56430747f050 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56430748b5d8 <col:29, line:132:5>
|-CXXMethodDecl 0x56430747f208 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56430747f140 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56430747f2d0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56430747f3b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56430748b630 <col:44, line:161:5>
|   `-ReturnStmt 0x56430748b620 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56430748b608 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56430748b5e8 <col:9> 'ErrorHandler *' lvalue Var 0x56430748ae28 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56430747f528 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56430747f468 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56430747f5f0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56430748b690 <col:43, line:173:5>
|   `-ReturnStmt 0x56430748b680 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56430748b668 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56430748b648 <col:9> 'ErrorHandler *' lvalue Var 0x56430748aea0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56430747f6a8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56430747f728 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56430747f838 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56430747f7a8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56430747f988 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56430747f8f8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56430747fae0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56430747fa48 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56430747fc38 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56430747fba0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56430747fd90 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56430747fcf8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56430747ffa0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56430747fe48 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56430747fec8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x564307480178 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x564307480060 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5643074800e0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x564307480398 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564307480238 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5643074802b8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x564307486ff0 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x564307480458 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564307486f50 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5643074871d0 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5643074870b0 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x564307487130 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x564307487360 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x564307487290 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x564307487530 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x564307487418 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564307487490 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56430748b8e8 <col:57, line:234:5>
|   `-ReturnStmt 0x56430748b8d8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56430748b8c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56430748b868 <col:9, col:41> 'int'
|         |-MemberExpr 0x56430748b838 <col:9> '<bound member function type>' ->xmessage 0x564307487360
|         | `-CXXThisExpr 0x56430748b828 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56430748b8a8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56430748b890 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56430748b808 <col:18, col:40> 'String' (CXXTemporary 0x56430748b808)
|               `-CallExpr 0x56430748b7d0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56430748b7b8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56430748b730 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5643074895b8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56430748b750 <col:31> 'const String' lvalue ParmVar 0x564307487490 'str' 'const String &'
|                 `-DeclRefExpr 0x56430748b770 <col:36> 'const String' lvalue ParmVar 0x564307487418 'anno' 'const String &'
|-CXXMethodDecl 0x564307487870 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5643074875f0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x564307487670 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x564307487740 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56430748bb78 <col:68, line:243:5>
|   `-ReturnStmt 0x56430748bb68 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56430748bb50 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56430748baf0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56430748bac0 <col:9> '<bound member function type>' ->xmessage 0x564307487530
|         | `-CXXThisExpr 0x56430748bab0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56430748b988 <col:18> 'const String' lvalue ParmVar 0x5643074875f0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56430748bb38 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56430748bb20 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56430748ba90 <col:24, col:40> 'String' (CXXTemporary 0x56430748ba90)
|               `-CXXMemberCallExpr 0x56430748ba28 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56430748b9b8 <col:24> '<bound member function type>' ->vformat 0x564307488a50
|                 | `-CXXThisExpr 0x56430748b9a8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56430748ba58 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56430748b9e8 <col:32> 'const char *' lvalue ParmVar 0x564307487670 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56430748ba70 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56430748ba08 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564307487740 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564307487b10 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x564307487938 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5643074879b0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564307487a28 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56430748beb8 <col:23, line:254:5>
|   `-ReturnStmt 0x56430748bea8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56430748be90 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56430748be30 <col:9, col:71> 'int'
|         |-MemberExpr 0x56430748be00 <col:9> '<bound member function type>' ->xmessage 0x564307487530
|         | `-CXXThisExpr 0x56430748bdf0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56430748be78 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56430748be60 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56430748bdb0 <col:18, col:65> 'String' (CXXTemporary 0x56430748bdb0)
|         |     `-CallExpr 0x56430748bd48 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56430748bd30 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56430748bc18 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5643074895b8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56430748bc38 <col:31> 'const String' lvalue ParmVar 0x5643074879b0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56430748bd90 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56430748bd78 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56430748bd10 <col:37, col:64> 'String' (CXXTemporary 0x56430748bd10)
|         |             `-CallExpr 0x56430748bce0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56430748bcc8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56430748bc58 <col:37> 'String (const String &)' lvalue CXXMethod 0x564307489c08 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56430748bc78 <col:56> 'const String' lvalue ParmVar 0x564307487938 'landmark' 'const String &'
|         `-DeclRefExpr 0x56430748bdd0 <col:68> 'const String' lvalue ParmVar 0x564307487a28 'str' 'const String &'
|-CXXMethodDecl 0x564307487e90 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x564307487bd8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x564307487c50 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x564307487cd0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x564307487d48 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56430748c170 <col:34, line:267:5>
|   `-ReturnStmt 0x56430748c160 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56430748c148 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56430748c0e0 <col:9, col:51> 'int'
|         |-MemberExpr 0x56430748c0b0 <col:9> '<bound member function type>' ->xmessage 0x564307487b10
|         | `-CXXThisExpr 0x56430748c0a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56430748bf58 <col:18> 'const String' lvalue ParmVar 0x564307487bd8 'landmark' 'const String &'
|         |-DeclRefExpr 0x56430748bf78 <col:28> 'const String' lvalue ParmVar 0x564307487c50 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56430748c130 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56430748c118 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56430748c080 <col:34, col:50> 'String' (CXXTemporary 0x56430748c080)
|               `-CXXMemberCallExpr 0x56430748c018 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56430748bfa8 <col:34> '<bound member function type>' ->vformat 0x564307488a50
|                 | `-CXXThisExpr 0x56430748bf98 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56430748c048 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56430748bfd8 <col:42> 'const char *' lvalue ParmVar 0x564307487cd0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56430748c060 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56430748bff8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564307487d48 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564307487fa0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56430748c1f0 <col:25, line:288:5>
|   `-ReturnStmt 0x56430748c1e0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56430748c1c8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56430748c198 <col:9> 'const int' lvalue ->_nerrors 0x56430748adc8
|         `-CXXThisExpr 0x56430748c188 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5643074881b0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x564307488058 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5643074880d8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x564307488498 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x564307488278 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5643074882f8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x564307488370 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564307488630 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x564307488568 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x564307488878 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5643074886f0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x564307488768 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56430748c450 <col:58, line:357:5>
|   `-ReturnStmt 0x56430748c440 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56430748c428 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56430748c3f8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56430748c3e0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56430748c3c0 <col:9, col:29> 'String' (CXXTemporary 0x56430748c3c0)
|             `-CallExpr 0x56430748c350 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56430748c338 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56430748c2b8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x564307488498 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56430748c258 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56430748c388 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56430748c278 <col:21> 'const char *' lvalue ParmVar 0x5643074886f0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56430748c3a0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56430748c298 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x564307488768 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564307488a50 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x564307488940 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5643074889b8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x564307488ba8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x564307488b18 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x564307488d28 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x564307488c60 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x564307488fc0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x564307488de0 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x564307488e60 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x564307488ed8 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x564307489120 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x564307489090 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56430748c568 <col:37, line:441:5>
|   `-IfStmt 0x56430748c550 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56430748c4d8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56430748c4a8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56430748c468 <col:6> 'int' lvalue ParmVar 0x564307489090 'level' 'int'
|     | `-ImplicitCastExpr 0x56430748c4c0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56430748c488 <col:15> 'ErrorHandler::Level' EnumConstant 0x56430747e660 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56430748c538 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56430748c508 <col:8> 'int' lvalue ->_nerrors 0x56430748adc8
|         `-CXXThisExpr 0x56430748c4f8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5643074891e8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56430748c600 <col:26, line:448:5>
|   `-BinaryOperator 0x56430748c5e0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56430748c590 <col:2> 'int' lvalue ->_nerrors 0x56430748adc8
|     | `-CXXThisExpr 0x56430748c580 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56430748c5c0 <col:13> 'int' 0
|-CXXMethodDecl 0x5643074893b0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5643074892a0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x564307489318 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5643074895b8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x564307489470 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5643074894e8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x564307489868 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x564307489678 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5643074896f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x564307489778 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x564307489920 <col:59> 0 0
|-CXXMethodDecl 0x564307489ab8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x564307489998 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x564307489a18 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56430748cc70 <col:70, line:534:5>
|   |-DeclStmt 0x56430748c770 <line:528:2, col:20>
|   | |-VarDecl 0x56430748c628 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56430748c690 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56430748c6c8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56430748c730 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56430748c840 <line:529:2, col:23>
|   | `-VarDecl 0x56430748c7a0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56430748c828 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56430748c808 <col:18> 'const char *' lvalue ParmVar 0x564307489998 'begin' 'const char *'
|   |-DoStmt 0x56430748cc08 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56430748cb38 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56430748cb20 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56430748cb00 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56430748c858 <col:6> 'const char *' lvalue Var 0x56430748c7a0 'x' 'const char *'
|   | |     `-CallExpr 0x56430748ca50 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56430748ca38 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56430748c9f0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56430748b2a0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56430748cab8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56430748caa0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56430748c910 <col:20, col:27> 'String' (CXXTemporary 0x56430748c910)
|   | |       |     `-CXXTemporaryObjectExpr 0x56430748c8d8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56430748cad0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56430748c930 <col:30> 'const char *' lvalue Var 0x56430748c7a0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56430748cae8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56430748c950 <col:33> 'const char *' lvalue ParmVar 0x564307489a18 'end' 'const char *'
|   | |       |-UnaryOperator 0x56430748c990 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56430748c970 <col:39> 'String' lvalue Var 0x56430748c628 'name' 'String'
|   | |       |-UnaryOperator 0x56430748c9c8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56430748c9a8 <col:46> 'String' lvalue Var 0x56430748c6c8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56430748c9e0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56430748cbf0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56430748cbd8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56430748cbb8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56430748cb88 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|   |         `-ImplicitCastExpr 0x56430748cb70 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56430748cb50 <col:11> 'String' lvalue Var 0x56430748c628 'name' 'String'
|   `-ReturnStmt 0x56430748cc60 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56430748cc48 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56430748cc28 <col:9> 'const char *' lvalue Var 0x56430748c7a0 'x' 'const char *'
|-CXXMethodDecl 0x564307489c08 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x564307489b78 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56430748d278 <col:55, line:550:5>
|   `-IfStmt 0x56430748d250 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56430748ceb0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56430748ce98 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56430748ce80 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56430748ce60 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56430748ce30 <col:6> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|     | |       `-DeclRefExpr 0x56430748ccd0 <col:6> 'const String' lvalue ParmVar 0x564307489b78 'x' 'const String &'
|     | `-BinaryOperator 0x56430748ce10 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56430748cde0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56430748cd90 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56430748cd78 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56430748cd30 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56430718d760 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56430748ccf0 <col:11> 'const String' lvalue ParmVar 0x564307489b78 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56430748cd10 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56430748cdf8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56430748cdc8 <col:19> 'char' 123
|     |-ReturnStmt 0x56430748cf20 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56430748cef0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56430748ced0 <col:13> 'const String' lvalue ParmVar 0x564307489b78 'x' 'const String &'
|     `-IfStmt 0x56430748d228 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56430748cfb8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56430748cfa0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56430748cf80 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56430748cf50 <col:11> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |       `-DeclRefExpr 0x56430748cf30 <col:11> 'const String' lvalue ParmVar 0x564307489b78 'x' 'const String &'
|       |-ReturnStmt 0x56430748d140 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56430748d128 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56430748d0f8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56430748d0e0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56430748d0c0 <col:13, col:29> 'String' (CXXTemporary 0x56430748d0c0)
|       |         `-CallExpr 0x56430748d070 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56430748d058 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56430748cfd0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5643074893b0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56430748d0a0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56430748cff0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56430748d010 <col:28> 'const String' lvalue ParmVar 0x564307489b78 'x' 'const String &'
|       `-ReturnStmt 0x56430748d218 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56430748d200 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56430748d1d0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56430748d1b8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56430748d198 <col:13, col:20> 'String' (CXXTemporary 0x56430748d198)
|                 `-CXXTemporaryObjectExpr 0x56430748d160 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x564307489e08 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x564307489cc0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x564307489d38 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56430748b548 <col:71> 'bool' false
|-CXXRecordDecl 0x564307489eb8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56430748a1b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56430748a150 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56430748a0f0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56430748a0b0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5643071707c0 'String'
|       | `-CXXRecord 0x564307170730 'String'
|       |-BuiltinType 0x564306e41580 'int'
|       `-DecayedType 0x564307487710 '__va_list_tag *' sugar
|         |-TypedefType 0x5643074876e0 'va_list' sugar
|         | |-Typedef 0x564307062880 'va_list'
|         | `-TypedefType 0x564307062830 '__gnuc_va_list' sugar
|         |   |-Typedef 0x564306f9a458 '__gnuc_va_list'
|         |   `-TypedefType 0x564306f9a3c0 '__builtin_va_list' sugar
|         |     |-Typedef 0x564306e82d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x564306e82ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x564306e422d0 '__va_list_tag'
|         |         `-CXXRecord 0x564306e42238 '__va_list_tag'
|         `-PointerType 0x564307068120 '__va_list_tag *'
|           `-RecordType 0x564306e422d0 '__va_list_tag'
|             `-CXXRecord 0x564306e42238 '__va_list_tag'
|-EnumDecl 0x56430748a210 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56430748a310 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a870 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a2f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56430748a2d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x56430748a3a0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a888 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a380 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56430748a360 <col:21> 'int' 2
| |-EnumConstantDecl 0x56430748a430 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a8a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a410 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56430748a3f0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56430748a4c0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a8b8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a4a0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56430748a480 <col:17> 'int' 8
| |-EnumConstantDecl 0x56430748a550 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a8d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a530 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56430748a510 <col:22> 'int' 16
| |-EnumConstantDecl 0x56430748a5e0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a8e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a5c0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56430748a5a0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56430748a670 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a900 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a650 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56430748a630 <col:17> 'int' 64
| |-EnumConstantDecl 0x56430748a700 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a918 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a6e0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56430748a6c0 <col:14> 'int' 128
| |-EnumConstantDecl 0x56430748a790 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56430748a930 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430748a770 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56430748a750 <col:16> 'int' 256
| `-EnumConstantDecl 0x56430748a820 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56430748a948 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56430748a800 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56430748a7e0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56430748ab58 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56430748a970 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56430748aa10 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56430748ace0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56430748ac18 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56430748ad88 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56430748adc8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56430748ae28 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56430748aea0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56430748b2a0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56430748af18 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56430748af98 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56430748b018 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56430748b090 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56430748b108 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56430748b180 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56430748b3c8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56430748b3c8
| `-ParmVarDecl 0x56430748b4d8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56430748d5d8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56430748d5d8
  `-ParmVarDecl 0x56430748d6e8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643074cc2e8 prev 0x56430736ba18 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5643074cc3e0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5643074cc470 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5643074cc578 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5643074cc4a8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5643074cd950 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5643074cd930 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5643074cd4c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5643074cd9e0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5643074cd9a0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5643074cc4a8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5643074cd530 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5643074cda60 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5643074cda20 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5643074cd590 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5643074cdaa0 <col:54> 'bool' false
| `-CompoundStmt 0x5643074cdba8 <col:61, line:38:5>
|   `-BinaryOperator 0x5643074cdb88 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5643074cdb20 <col:9> 'const Element *' lvalue ->_context 0x5643074cd468
|     | `-CXXThisExpr 0x5643074cdb10 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5643074cdb70 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5643074cdb50 <col:20> 'int' 0
|-CXXConstructorDecl 0x5643074cc788 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5643074cc638 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5643074cc6b0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5643074cd988 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5643074cd968 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5643074cd468 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5643074cdc00 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5643074cdbc0 <col:20> 'const Element *' lvalue ParmVar 0x5643074cc638 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5643074cd4c8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5643074cdc80 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5643074cdc40 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5643074cc6b0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5643074cd530 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5643074cdd00 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5643074cdcc0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5643074cd590 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5643074cdd40 <col:73> 'bool' false
| `-CompoundStmt 0x5643074cddb8 <col:80, line:46:5>
|-CXXMethodDecl 0x5643074cc8b8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5643074cde30 <col:36, line:51:5>
|   `-ReturnStmt 0x5643074cde20 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5643074cde08 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5643074cddd8 <col:16> 'const Element *const' lvalue ->_context 0x5643074cd468
|         `-CXXThisExpr 0x5643074cddc8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5643074cc9a8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5643074cdeb0 <col:32, line:57:5>
|   `-ReturnStmt 0x5643074cdea0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5643074cde88 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5643074cde58 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5643074cd4c8
|         `-CXXThisExpr 0x5643074cde48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5643074cca68 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5643074ccbf0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5643074ccb20 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5643074ccd40 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5643074cccb0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5643074cce90 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5643074cce00 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5643074cd098 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5643074ccf48 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5643074ccfc0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5643074cd378 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5643074cd158 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5643074cd1d8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5643074cd250 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5643074cd430 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5643074cd468 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5643074cd4c8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5643074cd530 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5643074cd590 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5643074cd5e0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5643074cd5e0
| `-ParmVarDecl 0x5643074cd6f8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5643074cd798 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5643074cd798
| `-ParmVarDecl 0x5643074cd8a8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x564307549098 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643074ff580 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5643074ff758 prev 0x5643074ff580 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5643074ff7e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5643074ff810 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643075013e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x564307501390 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5643074ffcc0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5643074ffbc0 'type'
|     `-TemplateSpecializationType 0x5643074ffb50 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5643074ffa30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5643074ffa10 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5643074ff9f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5643074ffb30 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5643074ffa50 'char_array'
|-TypedefDecl 0x564307501498 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x564307501460 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x564307501440 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5643075013e0 'type'
|     `-ElaboratedType 0x564307501390 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5643074ffcc0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5643074ffbc0 'type'
|         `-TemplateSpecializationType 0x5643074ffb50 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5643074ffa30 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5643074ffa10 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5643074ff9f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5643074ffb30 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5643074ffa50 'char_array'
|-CXXMethodDecl 0x564307501618 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x564307501528 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x564307501708 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5643075017e8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x564307501ab8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5643075019c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x564307501cf8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564307501b70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564307501be8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564307501ec8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564307501db8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564307501e30 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564307502028 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5643075020f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x564307502348 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5643075021b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564307502230 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5643075025a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x564307502418 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x564307502490 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564307502768 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564307502678 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564307502928 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x564307502830 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5643075029e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x564307502a90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x564307502cc8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x564307502b40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x564307502bb8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x564307502f68 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x564307502e70 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x564307503030 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x564307503080 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5643075030d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643074f1878 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5643074f1a88 prev 0x5643074f1878 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5643074ff4f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5643074ff4a0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5643074ff480 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5643074ff330 'type'
|     `-SubstTemplateTypeParmType 0x5643074ff150 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56430710a610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56430710a5b8 'T'
|       `-RecordType 0x5643074f2380 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5643074f2298 'sized_array_memory'
|-FieldDecl 0x564307503120 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x564307503170 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5643075031a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|   |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5643071422a8 'T'
|   `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307503238 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x564307503200 'int &'
|   `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643075032f8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5643075032c0 'const int &'
|   `-QualType 0x5643074f1b21 'const int' const
|     `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307503388 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x564307503350 'int *'
|   `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307503418 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5643075033e0 'const int *'
|   `-QualType 0x5643074f1b21 'const int' const
|     `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307504000 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x564307503fb0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x564307503f90 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x564307503f20 'type'
|     `-SubstTemplateTypeParmType 0x564307503ce0 'int' sugar
|       |-TemplateTypeParmType 0x564307115410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071153c0 'T'
|       `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307504068 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5643075032c0 'const int &'
|   `-QualType 0x5643074f1b21 'const int' const
|     `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x5643075040c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307504128 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x564307503350 'int *'
|   `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|     |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5643071422a8 'T'
|     `-BuiltinType 0x564306e41580 'int'
|-TypedefDecl 0x564307504190 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5643075033e0 'const int *'
|   `-QualType 0x5643074f1b21 'const int' const
|     `-SubstTemplateTypeParmType 0x5643074f1b20 'int' sugar
|       |-TemplateTypeParmType 0x564307142300 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5643071422a8 'T'
|       `-BuiltinType 0x564306e41580 'int'
|-EnumDecl 0x5643075041e8 <line:134:5> col:5
| `-EnumConstantDecl 0x5643075042e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5643075042c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x564307143988 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x564307143960 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x564307143940 <col:40> 'int' 1
|-CXXConstructorDecl 0x564307504368 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5643075045b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564307504420 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643075044c0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x564307504878 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x564307504760 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x564307504b38 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x564307504a20 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x564307504e80 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x564307504d60 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x564307505190 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x564307505070 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x564307505480 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5643075052c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x564307505340 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5643075055a8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x564307505688 <col:20> Inherited
| `-OptimizeNoneAttr 0x5643075056e0 <col:30> Inherited
|-CXXMethodDecl 0x564307505728 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5643075057d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307505830 <col:30> Inherited
|-CXXMethodDecl 0x5643075058f8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5643075059a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307505a00 <col:30> Inherited
|-CXXMethodDecl 0x564307505a48 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564307505af8 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307505b50 <col:30> Inherited
|-CXXMethodDecl 0x564307505b98 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564307505c48 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307505ca0 <col:30> Inherited
|-CXXMethodDecl 0x564307505ce8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x564307505d98 <col:20> Inherited
| `-OptimizeNoneAttr 0x564307505df0 <col:30> Inherited
|-CXXMethodDecl 0x564307505e18 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564307505ec8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x564307505f78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x564307506138 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x564307506028 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5643075060a0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x564307506288 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5643075061f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307506438 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x564307506340 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5643075064f0 <col:20>
| `-OptimizeNoneAttr 0x564307506548 <col:30>
|-CXXMethodDecl 0x564307506668 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x564307506570 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x564307506720 <col:20>
| `-OptimizeNoneAttr 0x564307506778 <col:30>
|-CXXMethodDecl 0x564307506830 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5643075067a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307506978 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5643075068e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x564307506aa8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x564307506bd8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x564307506ca8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x564307506d78 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x564307506eb8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x564307506e28 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430750a5a0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56430750a510 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56430750a6e8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56430750a658 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56430750a7a0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56430750a8a0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56430750a810 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56430750a958 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56430750aa18 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56430750ab18 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56430750ac98 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56430750abd8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56430750b458 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56430750ad50 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56430750b3b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56430750b2b8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56430750b538 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56430750b688 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56430750b5f8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56430750b740 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56430750b988 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56430750b800 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56430750b878 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56430750bb48 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56430750ba58 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56430750bd98 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56430750bc10 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56430750bc88 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56430750be58 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56430750c0b8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56430750bfc0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56430750c188 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643074ef9e8 prev 0x5643074d5468 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5643074efae0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5643074efbd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56430751c360 <col:16, line:828:9>
|-CXXDestructorDecl 0x5643074efcc0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56430751c370 <col:25, line:830:9>
|-CXXMethodDecl 0x5643074efdc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5643074efe70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5643074eff18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5643074eff18
| `-ParmVarDecl 0x5643074f0028 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5643074f07e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5643074f07e8
  `-ParmVarDecl 0x5643074f08f8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5643074d5278 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5643074d53d8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5643074d5468 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5643074d5520 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5643074d5628 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5643074d5558 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56430750d748 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56430750d728 <col:31> 'int' 0
|-CXXConstructorDecl 0x5643074d5948 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5643074d57c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5643074d5838 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56430750d780 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56430750d760 <col:59> 'int' 0
|-CXXConstructorDecl 0x5643074d5b20 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5643074d5a10 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5643074d5a88 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56430750d7b8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56430750d798 <col:55> 'int' 0
|-CXXConstructorDecl 0x5643074d5ed8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5643074d5cc0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5643074d5d38 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5643074d5db0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56430750d7f0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56430750d7d0 <col:31> 'int' 0
|-CXXConstructorDecl 0x5643074d6098 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5643074d5fd8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5643074d6190 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5643074d6378 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5643074d6280 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5643074d6468 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56430750dba0 <col:24, line:291:5>
|   `-ReturnStmt 0x56430750db90 <line:290:9, col:79>
|     `-BinaryOperator 0x56430750db70 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56430750da48 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56430750d9a0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56430750d980 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56430750d878 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56430750d860 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56430750d848 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56430750d818 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5643074f1810
|       | |   |       `-CXXThisExpr 0x56430750d808 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56430750d968 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56430750d950 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56430750d918 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56430750d8e8 <col:28, col:35> '<bound member function type>' ->size 0x5643074bc278
|       | |           `-ImplicitCastExpr 0x56430750d938 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56430750d8d0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56430750d8a0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5643074f1810
|       | |                 `-CXXThisExpr 0x56430750d890 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56430750da30 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56430750da18 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56430750da00 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56430750d9d0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56430750c2d0
|       |         `-CXXThisExpr 0x56430750d9c0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56430750db50 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56430750db38 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56430750db20 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56430750dae0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56430750dac8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56430750da78 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56430750c380
|         |     |   `-CXXThisExpr 0x56430750da68 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56430750daa8 <col:73> 'int' 0
|         `-IntegerLiteral 0x56430750db00 <col:79> 'int' 0
|-CXXMethodDecl 0x5643074d6528 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56430750dd78 <col:32, line:296:5>
|   `-ReturnStmt 0x56430750dd68 <line:295:9, col:49>
|     `-BinaryOperator 0x56430750dd48 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56430750dc28 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56430750dc10 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56430750dbf8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56430750dbc8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56430750c2d0
|       |       `-CXXThisExpr 0x56430750dbb8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56430750dd28 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56430750dd10 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56430750dcf8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56430750dcb8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56430750dca0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56430750dc50 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56430750c380
|         |     |   `-CXXThisExpr 0x56430750dc40 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56430750dc80 <col:43> 'int' 0
|         `-IntegerLiteral 0x56430750dcd8 <col:49> 'int' 0
|-CXXMethodDecl 0x5643074d6618 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56430750df88 <col:19, line:306:5>
|   |-IfStmt 0x56430750dea8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56430750dde8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56430750ddd0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56430750dda0 <col:13> 'Vector<String> *' lvalue ->_conf 0x5643074f1810
|   | |     `-CXXThisExpr 0x56430750dd90 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56430750de88 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56430750de58 <col:13, col:20> '<bound member function type>' ->clear 0x5643074c0188
|   |     `-ImplicitCastExpr 0x56430750de40 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56430750de10 <col:13> 'Vector<String> *' lvalue ->_conf 0x5643074f1810
|   |         `-CXXThisExpr 0x56430750de00 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56430750df30 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56430750df00 <col:9, col:16> '<bound member function type>' .clear 0x56430750be58
|   |   `-MemberExpr 0x56430750ded0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56430750c270
|   |     `-CXXThisExpr 0x56430750dec0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56430750df78 <line:305:9, col:17>
|     `-UnaryOperator 0x56430750df60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56430750df50 <col:17> 'Args *' this
|-CXXMethodDecl 0x5643074d6898 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5643074d67a0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5643074d6a18 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5643074d6950 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5643074d6d98 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5643074d6ac0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5643074d6cf8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5643074d6b68 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5643074d6be0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56430750e2b0 <col:67, line:327:5>
|     |-WhileStmt 0x56430750e260 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56430750e078 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56430750dff0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564307471c60 0x564307363ee8 0x5643071ad4c8 0x5643071ad1a0 0x56430719d970 0x56430719d620 0x56430719cf10 0x56430716f880 0x5643070fcd50
|     | | |-DeclRefExpr 0x56430750dfb0 <col:16> 'Iter' lvalue ParmVar 0x5643074d6b68 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56430750dfd0 <col:25> 'Iter' lvalue ParmVar 0x5643074d6be0 'end' 'Iter'
|     | `-CompoundStmt 0x56430750e240 <col:30, line:325:9>
|     |   |-CallExpr 0x56430750e1e0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56430750e0c0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56430750e1b0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56430750e140 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|     |   |   `-DeclRefExpr 0x56430750e120 <col:24> 'Iter' lvalue ParmVar 0x5643074d6b68 'begin' 'Iter'
|     |   `-UnaryOperator 0x56430750e228 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56430750e208 <col:15> 'Iter' lvalue ParmVar 0x5643074d6b68 'begin' 'Iter'
|     `-ReturnStmt 0x56430750e2a0 <line:326:9, col:17>
|       `-UnaryOperator 0x56430750e288 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56430750e278 <col:17> 'Args *' this
|-CXXMethodDecl 0x5643074d6ea0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5643074d6e10 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5643074d6fe8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5643074d6f58 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5643074d70b0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56430750e390 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56430750e330 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56430750e2e0 <col:9> '<bound member function type>' ->reset_from 0x56430750c6f8
|   | | `-CXXThisExpr 0x56430750e2d0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56430750e310 <col:20> 'int' 0
|   `-ReturnStmt 0x56430750e380 <line:352:9, col:17>
|     `-UnaryOperator 0x56430750e368 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56430750e358 <col:17> 'Args *' this
|-VarDecl 0x5643074d7168 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5643074d71d0 <col:38> 'int' 1
|-VarDecl 0x5643074d7260 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5643074d72c8 <col:39> 'int' 2
|-VarDecl 0x5643074d7358 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5643074d73c0 <col:39> 'int' 4
|-VarDecl 0x5643074d7450 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5643074d74b8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5643074d7838 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5643074d7530 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5643074d7798 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5643074d75e0 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5643074d7688 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x56430750e4e8 <col:43, line:371:5>
| |   `-ReturnStmt 0x56430750e4d8 <line:370:9, col:34>
| |     `-CallExpr 0x56430750e4a0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56430750e3c0 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56430750e440 <col:21> 'const char *' lvalue ParmVar 0x5643074d75e0 'keyword' 'const char *'
| |       |-IntegerLiteral 0x56430750e460 <col:30> 'int' 0
| |       `-DeclRefExpr 0x56430750e480 <col:33> 'T' lvalue ParmVar 0x5643074d7688 'x' 'T &'
| |-CXXMethodDecl 0x564307549538 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
| | |-TemplateArgument type 'bool'
| | |-ParmVarDecl 0x564307549358 <col:16, col:28> col:28 keyword 'const char *'
| | `-ParmVarDecl 0x564307549428 <col:37, col:40> col:40 x 'bool &'
| `-CXXMethodDecl 0x5643075499d8 <col:5, line:371:5> line:369:11 used read 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5643075497f0 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5643075498c8 <col:37, col:40> col:40 x 'unsigned int &'
|-FunctionTemplateDecl 0x5643074d7b68 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5643074d78a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074d7ac8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5643074d7950 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d79f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56430750e638 <col:45, line:375:5>
|     `-ReturnStmt 0x56430750e628 <line:374:9, col:42>
|       `-CallExpr 0x56430750e5f0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750e510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750e590 <col:21> 'const char *' lvalue ParmVar 0x5643074d7950 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750e5b0 <col:30> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int'
|         `-DeclRefExpr 0x56430750e5d0 <col:41> 'T' lvalue ParmVar 0x5643074d79f8 'x' 'T &'
|-FunctionTemplateDecl 0x5643074d7e98 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5643074d7bd0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074d7df8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5643074d7c80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d7d28 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56430750e788 <col:45, line:379:5>
|     `-ReturnStmt 0x56430750e778 <line:378:9, col:43>
|       `-CallExpr 0x56430750e740 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750e660 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750e6e0 <col:21> 'const char *' lvalue ParmVar 0x5643074d7c80 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750e700 <col:30> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int'
|         `-DeclRefExpr 0x56430750e720 <col:42> 'T' lvalue ParmVar 0x5643074d7d28 'x' 'T &'
|-FunctionTemplateDecl 0x5643074d81c8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5643074d7f00 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074d8128 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5643074d7fb0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d8058 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x56430750e988 <col:46, line:383:5>
|     `-ReturnStmt 0x56430750e978 <line:382:9, col:55>
|       `-CallExpr 0x56430750e940 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750e7b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750e830 <col:21> 'const char *' lvalue ParmVar 0x5643074d7fb0 'keyword' 'const char *'
|         |-BinaryOperator 0x56430750e900 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56430750e8b0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56430750e890 <col:30> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56430750e8e8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56430750e8c8 <col:42> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56430750e920 <col:54> 'T' lvalue ParmVar 0x5643074d8058 'x' 'T &'
|-FunctionTemplateDecl 0x5643074d85c8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5643074d8230 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074d8528 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5643074d82e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d8360 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5643074d8408 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56430750eac8 <col:54, line:388:5>
|     |-CallExpr 0x56430750ea50 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56430750e9a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56430750e9e0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56430750e9f0 <col:30> 'const char *' lvalue ParmVar 0x5643074d82e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56430750ea10 <col:39> 'int' lvalue ParmVar 0x5643074d8360 'flags' 'int'
|     | `-DeclRefExpr 0x56430750ea30 <col:46> 'T' lvalue ParmVar 0x5643074d8408 'x' 'T &'
|     `-ReturnStmt 0x56430750eab8 <line:387:9, col:17>
|       `-UnaryOperator 0x56430750eaa0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56430750ea90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074d8a78 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5643074d8638 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5643074d86b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5643074d89d8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5643074d8778 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d8818 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5643074d88b8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56430750ec38 <col:74, line:403:5>
|     `-ReturnStmt 0x56430750ec28 <line:402:9, col:56>
|       `-CallExpr 0x56430750ebe8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750eaf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750eb68 <col:28> 'const char *' lvalue ParmVar 0x5643074d8778 'keyword' 'const char *'
|         |-IntegerLiteral 0x56430750eb88 <col:37> 'int' 0
|         |-DeclRefExpr 0x56430750eba8 <col:40> 'T' lvalue ParmVar 0x5643074d8818 'x' 'T &'
|         `-DeclRefExpr 0x56430750ebc8 <col:43> 'const V' lvalue ParmVar 0x5643074d88b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5643074d8ee8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5643074d8ae8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5643074d8b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5643074d8e48 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5643074d8c28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d8cc8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5643074d8d68 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56430750eda0 <col:76, line:407:5>
|     `-ReturnStmt 0x56430750ed90 <line:406:9, col:65>
|       `-CallExpr 0x56430750ed50 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750ec60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750ecd0 <col:28> 'const char *' lvalue ParmVar 0x5643074d8c28 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750ecf0 <col:37> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int'
|         |-DeclRefExpr 0x56430750ed10 <col:49> 'T' lvalue ParmVar 0x5643074d8cc8 'x' 'T &'
|         `-DeclRefExpr 0x56430750ed30 <col:52> 'const V' lvalue ParmVar 0x5643074d8d68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5643074dc890 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5643074d8f58 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5643074d8fd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5643074dc7f0 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5643074d9098 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074d9118 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5643074d91b8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5643074d9258 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56430750ef08 <col:85, line:412:5>
|     |-CallExpr 0x56430750ee88 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56430750edb8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56430750edf8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56430750ee08 <col:37> 'const char *' lvalue ParmVar 0x5643074d9098 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56430750ee28 <col:46> 'int' lvalue ParmVar 0x5643074d9118 'flags' 'int'
|     | |-DeclRefExpr 0x56430750ee48 <col:53> 'T' lvalue ParmVar 0x5643074d91b8 'x' 'T &'
|     | `-DeclRefExpr 0x56430750ee68 <col:56> 'const V' lvalue ParmVar 0x5643074d9258 'default_value' 'const V &'
|     `-ReturnStmt 0x56430750eef8 <line:411:9, col:17>
|       `-UnaryOperator 0x56430750eee0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56430750eed0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074dcd28 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5643074dc908 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074dc988 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074dcc88 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074dca48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074dcac0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dcb68 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56430750f088 <col:53, line:425:5>
|     `-ReturnStmt 0x56430750f078 <line:424:9, col:42>
|       `-CallExpr 0x56430750f038 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750ef38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750efb8 <col:21> 'const char *' lvalue ParmVar 0x5643074dca48 'keyword' 'const char *'
|         |-IntegerLiteral 0x56430750efd8 <col:30> 'int' 0
|         |-DeclRefExpr 0x56430750eff8 <col:33> 'P' lvalue ParmVar 0x5643074dcac0 'parser' 'P'
|         `-DeclRefExpr 0x56430750f018 <col:41> 'T' lvalue ParmVar 0x5643074dcb68 'x' 'T &'
|-FunctionTemplateDecl 0x5643074dd178 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5643074dcd98 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074dce18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074dd0d8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074dced8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074dcf50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dcff8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56430750f200 <col:55, line:429:5>
|     `-ReturnStmt 0x56430750f1f0 <line:428:9, col:50>
|       `-CallExpr 0x56430750f1b0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750f0b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750f130 <col:21> 'const char *' lvalue ParmVar 0x5643074dced8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750f150 <col:30> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int'
|         |-DeclRefExpr 0x56430750f170 <col:41> 'P' lvalue ParmVar 0x5643074dcf50 'parser' 'P'
|         `-DeclRefExpr 0x56430750f190 <col:49> 'T' lvalue ParmVar 0x5643074dcff8 'x' 'T &'
|-FunctionTemplateDecl 0x5643074dd5c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5643074dd1e8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074dd268 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074dd528 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074dd328 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074dd3a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dd448 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56430750f378 <col:55, line:433:5>
|     `-ReturnStmt 0x56430750f368 <line:432:9, col:51>
|       `-CallExpr 0x56430750f328 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750f228 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750f2a8 <col:21> 'const char *' lvalue ParmVar 0x5643074dd328 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750f2c8 <col:30> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int'
|         |-DeclRefExpr 0x56430750f2e8 <col:42> 'P' lvalue ParmVar 0x5643074dd3a0 'parser' 'P'
|         `-DeclRefExpr 0x56430750f308 <col:50> 'T' lvalue ParmVar 0x5643074dd448 'x' 'T &'
|-FunctionTemplateDecl 0x5643074dda18 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5643074dd638 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074dd6b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074dd978 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074dd778 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074dd7f0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dd898 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56430750f5a0 <col:56, line:437:5>
|     `-ReturnStmt 0x56430750f590 <line:436:9, col:63>
|       `-CallExpr 0x56430750f550 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750f3a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750f420 <col:21> 'const char *' lvalue ParmVar 0x5643074dd778 'keyword' 'const char *'
|         |-BinaryOperator 0x56430750f4f0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56430750f4a0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56430750f480 <col:30> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56430750f4d8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56430750f4b8 <col:42> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56430750f510 <col:54> 'P' lvalue ParmVar 0x5643074dd7f0 'parser' 'P'
|         `-DeclRefExpr 0x56430750f530 <col:62> 'T' lvalue ParmVar 0x5643074dd898 'x' 'T &'
|-FunctionTemplateDecl 0x5643074ddf48 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5643074dda88 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074ddb08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074ddea8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5643074ddbc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ddc48 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ddcc0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5643074ddd68 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56430750f708 <col:64, line:442:5>
|     |-CallExpr 0x56430750f688 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56430750f5b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56430750f5f8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56430750f608 <col:30> 'const char *' lvalue ParmVar 0x5643074ddbc8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56430750f628 <col:39> 'int' lvalue ParmVar 0x5643074ddc48 'flags' 'int'
|     | |-DeclRefExpr 0x56430750f648 <col:46> 'P' lvalue ParmVar 0x5643074ddcc0 'parser' 'P'
|     | `-DeclRefExpr 0x56430750f668 <col:54> 'T' lvalue ParmVar 0x5643074ddd68 'x' 'T &'
|     `-ReturnStmt 0x56430750f6f8 <line:441:9, col:17>
|       `-UnaryOperator 0x56430750f6e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56430750f6d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074de548 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5643074ddfc0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074de038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5643074de0b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5643074de4a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5643074de180 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074de1f8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5643074de298 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5643074de368 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56430750f8a0 <col:84, line:458:5>
|     `-ReturnStmt 0x56430750f890 <line:457:9, col:64>
|       `-CallExpr 0x56430750f848 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750f738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750f7a8 <col:28> 'const char *' lvalue ParmVar 0x5643074de180 'keyword' 'const char *'
|         |-IntegerLiteral 0x56430750f7c8 <col:37> 'int' 0
|         |-DeclRefExpr 0x56430750f7e8 <col:40> 'P' lvalue ParmVar 0x5643074de1f8 'parser' 'P'
|         |-DeclRefExpr 0x56430750f808 <col:48> 'T' lvalue ParmVar 0x5643074de298 'x' 'T &'
|         `-DeclRefExpr 0x56430750f828 <col:51> 'const V' lvalue ParmVar 0x5643074de368 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5643074deac8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5643074de5c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074de638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5643074de6b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5643074dea28 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5643074de780 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074de7f8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5643074de898 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5643074de938 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56430750fa30 <col:86, line:462:5>
|     `-ReturnStmt 0x56430750fa20 <line:461:9, col:73>
|       `-CallExpr 0x56430750f9d8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750f8c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750f938 <col:28> 'const char *' lvalue ParmVar 0x5643074de780 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750f958 <col:37> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int'
|         |-DeclRefExpr 0x56430750f978 <col:49> 'P' lvalue ParmVar 0x5643074de7f8 'parser' 'P'
|         |-DeclRefExpr 0x56430750f998 <col:57> 'T' lvalue ParmVar 0x5643074de898 'x' 'T &'
|         `-DeclRefExpr 0x56430750f9b8 <col:60> 'const V' lvalue ParmVar 0x5643074de938 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5643074df128 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5643074deb40 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074debb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5643074dec38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5643074df088 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5643074ded00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ded80 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5643074dedf8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dee98 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5643074def38 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56430750fbc0 <col:95, line:467:5>
|     |-CallExpr 0x56430750fb38 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56430750fa48 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56430750fa88 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56430750fa98 <col:37> 'const char *' lvalue ParmVar 0x5643074ded00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56430750fab8 <col:46> 'int' lvalue ParmVar 0x5643074ded80 'flags' 'int'
|     | |-DeclRefExpr 0x56430750fad8 <col:53> 'P' lvalue ParmVar 0x5643074dedf8 'parser' 'P'
|     | |-DeclRefExpr 0x56430750faf8 <col:61> 'T' lvalue ParmVar 0x5643074dee98 'x' 'T &'
|     | `-DeclRefExpr 0x56430750fb18 <col:64> 'const V' lvalue ParmVar 0x5643074def38 'default_value' 'const V &'
|     `-ReturnStmt 0x56430750fbb0 <line:466:9, col:17>
|       `-UnaryOperator 0x56430750fb98 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56430750fb88 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074df708 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5643074df1a8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074df228 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5643074df2a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5643074df668 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5643074df370 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074df3e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5643074df488 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5643074df528 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56430750fd68 <col:63, line:481:5>
|     `-ReturnStmt 0x56430750fd58 <line:480:9, col:47>
|       `-CallExpr 0x56430750fd10 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750fbf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750fc70 <col:21> 'const char *' lvalue ParmVar 0x5643074df370 'keyword' 'const char *'
|         |-IntegerLiteral 0x56430750fc90 <col:30> 'int' 0
|         |-DeclRefExpr 0x56430750fcb0 <col:33> 'P' lvalue ParmVar 0x5643074df3e8 'parser' 'P'
|         |-DeclRefExpr 0x56430750fcd0 <col:41> 'T1' lvalue ParmVar 0x5643074df488 'x1' 'T1 &'
|         `-DeclRefExpr 0x56430750fcf0 <col:45> 'T2' lvalue ParmVar 0x5643074df528 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5643074dfc88 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5643074df780 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074df7f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5643074df878 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5643074dfbe8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5643074df940 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074df9b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dfa58 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5643074dfaf8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56430750ff08 <col:65, line:485:5>
|     `-ReturnStmt 0x56430750fef8 <line:484:9, col:55>
|       `-CallExpr 0x56430750feb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750fd90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750fe10 <col:21> 'const char *' lvalue ParmVar 0x5643074df940 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750fe30 <col:30> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int'
|         |-DeclRefExpr 0x56430750fe50 <col:41> 'P' lvalue ParmVar 0x5643074df9b8 'parser' 'P'
|         |-DeclRefExpr 0x56430750fe70 <col:49> 'T1' lvalue ParmVar 0x5643074dfa58 'x1' 'T1 &'
|         `-DeclRefExpr 0x56430750fe90 <col:53> 'T2' lvalue ParmVar 0x5643074dfaf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5643074e0208 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5643074dfd00 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074dfd78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5643074dfdf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5643074e0168 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5643074dfec0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074dff38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5643074dffd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5643074e0078 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5643075100a8 <col:65, line:489:5>
|     `-ReturnStmt 0x564307510098 <line:488:9, col:56>
|       `-CallExpr 0x564307510050 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56430750ff30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56430750ffb0 <col:21> 'const char *' lvalue ParmVar 0x5643074dfec0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56430750ffd0 <col:30> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int'
|         |-DeclRefExpr 0x56430750fff0 <col:42> 'P' lvalue ParmVar 0x5643074dff38 'parser' 'P'
|         |-DeclRefExpr 0x564307510010 <col:50> 'T1' lvalue ParmVar 0x5643074dffd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x564307510030 <col:54> 'T2' lvalue ParmVar 0x5643074e0078 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5643074e0788 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5643074e0280 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e02f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5643074e0378 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5643074e06e8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5643074e0440 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e04b8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e0558 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5643074e05f8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5643075102f8 <col:66, line:493:5>
|     `-ReturnStmt 0x5643075102e8 <line:492:9, col:68>
|       `-CallExpr 0x5643075102a0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5643075100d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510150 <col:21> 'const char *' lvalue ParmVar 0x5643074e0440 'keyword' 'const char *'
|         |-BinaryOperator 0x564307510220 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5643075101d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5643075101b0 <col:30> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x564307510208 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5643075101e8 <col:42> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x564307510240 <col:54> 'P' lvalue ParmVar 0x5643074e04b8 'parser' 'P'
|         |-DeclRefExpr 0x564307510260 <col:62> 'T1' lvalue ParmVar 0x5643074e0558 'x1' 'T1 &'
|         `-DeclRefExpr 0x564307510280 <col:66> 'T2' lvalue ParmVar 0x5643074e05f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5643074e0de8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5643074e0800 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e0878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5643074e08f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5643074e0d48 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5643074e09c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e0a40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5643074e0ab8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e0b58 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5643074e0bf8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x564307510488 <col:74, line:498:5>
|     |-CallExpr 0x564307510400 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564307510310 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x564307510350 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x564307510360 <col:30> 'const char *' lvalue ParmVar 0x5643074e09c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564307510380 <col:39> 'int' lvalue ParmVar 0x5643074e0a40 'flags' 'int'
|     | |-DeclRefExpr 0x5643075103a0 <col:46> 'P' lvalue ParmVar 0x5643074e0ab8 'parser' 'P'
|     | |-DeclRefExpr 0x5643075103c0 <col:54> 'T1' lvalue ParmVar 0x5643074e0b58 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5643075103e0 <col:58> 'T2' lvalue ParmVar 0x5643074e0bf8 'x2' 'T2 &'
|     `-ReturnStmt 0x564307510478 <line:497:9, col:17>
|       `-UnaryOperator 0x564307510460 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564307510450 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074e1148 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5643074e0e68 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e10a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5643074e0f20 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e0f98 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5643075105d0 <col:52, line:509:5>
|     `-ReturnStmt 0x5643075105c0 <line:508:9, col:44>
|       `-CallExpr 0x564307510588 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5643075104b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510528 <col:26> 'const char *' lvalue ParmVar 0x5643074e0f20 'keyword' 'const char *'
|         |-IntegerLiteral 0x564307510548 <col:35> 'int' 0
|         `-DeclRefExpr 0x564307510568 <col:38> 'P' lvalue ParmVar 0x5643074e0f98 'parser' 'P'
|-FunctionTemplateDecl 0x5643074e1448 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5643074e11b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e13a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5643074e1260 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e12d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564307510710 <col:54, line:513:5>
|     `-ReturnStmt 0x564307510700 <line:512:9, col:52>
|       `-CallExpr 0x5643075106c8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5643075105f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510668 <col:26> 'const char *' lvalue ParmVar 0x5643074e1260 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307510688 <col:35> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int'
|         `-DeclRefExpr 0x5643075106a8 <col:46> 'P' lvalue ParmVar 0x5643074e12d8 'parser' 'P'
|-FunctionTemplateDecl 0x5643074e1748 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5643074e14b0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e16a8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5643074e1560 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e15d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x564307510850 <col:54, line:517:5>
|     `-ReturnStmt 0x564307510840 <line:516:9, col:53>
|       `-CallExpr 0x564307510808 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307510738 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5643075107a8 <col:26> 'const char *' lvalue ParmVar 0x5643074e1560 'keyword' 'const char *'
|         |-DeclRefExpr 0x5643075107c8 <col:35> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int'
|         `-DeclRefExpr 0x5643075107e8 <col:47> 'P' lvalue ParmVar 0x5643074e15d8 'parser' 'P'
|-FunctionTemplateDecl 0x5643074e1a48 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5643074e17b0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e19a8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5643074e1860 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e18d8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x564307510a40 <col:55, line:521:5>
|     `-ReturnStmt 0x564307510a30 <line:520:9, col:65>
|       `-CallExpr 0x5643075109f8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307510878 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5643075108e8 <col:26> 'const char *' lvalue ParmVar 0x5643074e1860 'keyword' 'const char *'
|         |-BinaryOperator 0x5643075109b8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x564307510968 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x564307510948 <col:35> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5643075109a0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x564307510980 <col:47> 'const int' lvalue Var 0x5643074d7260 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5643075109d8 <col:59> 'P' lvalue ParmVar 0x5643074e18d8 'parser' 'P'
|-FunctionTemplateDecl 0x5643074e1e18 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5643074e1ab0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e1d78 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5643074e1b60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e1be0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5643074e1c58 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x564307510b80 <col:63, line:526:5>
|     |-CallExpr 0x564307510b08 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564307510a58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x564307510a98 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x564307510aa8 <col:35> 'const char *' lvalue ParmVar 0x5643074e1b60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x564307510ac8 <col:44> 'int' lvalue ParmVar 0x5643074e1be0 'flags' 'int'
|     | `-DeclRefExpr 0x564307510ae8 <col:51> 'P' lvalue ParmVar 0x5643074e1c58 'parser' 'P'
|     `-ReturnStmt 0x564307510b70 <line:525:9, col:17>
|       `-UnaryOperator 0x564307510b58 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564307510b48 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074e2268 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5643074e1e88 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e1f08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e21c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074e1fc8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e2040 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e20e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x564307510cd8 <col:58, line:541:5>
|     `-ReturnStmt 0x564307510cc8 <line:540:9, col:39>
|       `-CallExpr 0x564307510c90 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307510bb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510c30 <col:21> 'const char *' lvalue ParmVar 0x5643074e1fc8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307510c50 <col:30> 'P' lvalue ParmVar 0x5643074e2040 'parser' 'P'
|         `-DeclRefExpr 0x564307510c70 <col:38> 'T' lvalue ParmVar 0x5643074e20e8 'x' 'T &'
|-FunctionTemplateDecl 0x5643074e26b8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5643074e22d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e2358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e2618 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074e2418 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e2490 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e2538 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564307510e10 <col:60, line:545:5>
|     `-ReturnStmt 0x564307510e00 <line:544:9, col:41>
|       `-CallExpr 0x564307510dc8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307510d00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510d68 <col:23> 'const char *' lvalue ParmVar 0x5643074e2418 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307510d88 <col:32> 'P' lvalue ParmVar 0x5643074e2490 'parser' 'P'
|         `-DeclRefExpr 0x564307510da8 <col:40> 'T' lvalue ParmVar 0x5643074e2538 'x' 'T &'
|-FunctionTemplateDecl 0x5643074e2b08 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5643074e2728 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e27a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e2a68 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074e2868 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e28e0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e2988 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x564307510f48 <col:60, line:549:5>
|     `-ReturnStmt 0x564307510f38 <line:548:9, col:41>
|       `-CallExpr 0x564307510f00 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307510e38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510ea0 <col:23> 'const char *' lvalue ParmVar 0x5643074e2868 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307510ec0 <col:32> 'P' lvalue ParmVar 0x5643074e28e0 'parser' 'P'
|         `-DeclRefExpr 0x564307510ee0 <col:40> 'T' lvalue ParmVar 0x5643074e2988 'x' 'T &'
|-FunctionTemplateDecl 0x5643074e2f58 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5643074e2b78 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e2bf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e2eb8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074e2cb8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e2d30 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e2dd8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x564307511080 <col:61, line:553:5>
|     `-ReturnStmt 0x564307511070 <line:552:9, col:42>
|       `-CallExpr 0x564307511038 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307510f70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307510fd8 <col:24> 'const char *' lvalue ParmVar 0x5643074e2cb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307510ff8 <col:33> 'P' lvalue ParmVar 0x5643074e2d30 'parser' 'P'
|         `-DeclRefExpr 0x564307511018 <col:41> 'T' lvalue ParmVar 0x5643074e2dd8 'x' 'T &'
|-FunctionTemplateDecl 0x5643074e3438 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5643074e2fc8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e3048 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e3398 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5643074e3108 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e3188 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5643074e3200 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e32a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5643075111f8 <col:69, line:557:5>
|     `-ReturnStmt 0x5643075111e8 <line:556:9, col:46>
|       `-CallExpr 0x5643075111a8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5643075110a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307511128 <col:21> 'const char *' lvalue ParmVar 0x5643074e3108 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307511148 <col:30> 'int' lvalue ParmVar 0x5643074e3188 'flags' 'int'
|         |-DeclRefExpr 0x564307511168 <col:37> 'P' lvalue ParmVar 0x5643074e3200 'parser' 'P'
|         `-DeclRefExpr 0x564307511188 <col:45> 'T' lvalue ParmVar 0x5643074e32a8 'x' 'T &'
|-FunctionTemplateDecl 0x5643074e3748 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5643074e34b0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e36a8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5643074e3560 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e35d8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x564307511338 <col:56, line:571:5>
|     `-ReturnStmt 0x564307511328 <line:570:9, col:48>
|       `-CallExpr 0x5643075112f0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307511220 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307511290 <col:30> 'const char *' lvalue ParmVar 0x5643074e3560 'keyword' 'const char *'
|         |-IntegerLiteral 0x5643075112b0 <col:39> 'int' 0
|         `-DeclRefExpr 0x5643075112d0 <col:42> 'P' lvalue ParmVar 0x5643074e35d8 'parser' 'P'
|-FunctionTemplateDecl 0x5643074e3ad8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5643074e37b0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074e3a38 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5643074e3860 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e38e0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5643074e3958 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564307511508 <col:67, line:576:5>
|     |-CallExpr 0x564307511490 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564307511350 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x564307511390 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5643075113a0 <col:39> 'const char *' lvalue ParmVar 0x5643074e3860 'keyword' 'const char *'
|     | |-BinaryOperator 0x564307511450 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564307511400 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5643075113c0 <col:48> 'int' lvalue ParmVar 0x5643074e38e0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564307511438 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564307511418 <col:56> 'const int' lvalue Var 0x5643074d7450 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x564307511470 <col:68> 'P' lvalue ParmVar 0x5643074e3958 'parser' 'P'
|     `-ReturnStmt 0x5643075114f8 <line:575:9, col:17>
|       `-UnaryOperator 0x5643075114e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5643075114d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074e3f28 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5643074e3b48 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e3bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e3e88 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5643074e3c88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e3d00 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e3da8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x564307511678 <col:62, line:592:5>
|     `-ReturnStmt 0x564307511668 <line:591:9, col:51>
|       `-CallExpr 0x564307511628 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307511538 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5643075115a8 <col:30> 'const char *' lvalue ParmVar 0x5643074e3c88 'keyword' 'const char *'
|         |-IntegerLiteral 0x5643075115c8 <col:39> 'int' 0
|         |-DeclRefExpr 0x5643075115e8 <col:42> 'P' lvalue ParmVar 0x5643074e3d00 'parser' 'P'
|         `-DeclRefExpr 0x564307511608 <col:50> 'T' lvalue ParmVar 0x5643074e3da8 'x' 'T &'
|-FunctionTemplateDecl 0x5643074e4408 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5643074e3f98 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e4018 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074e4368 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5643074e40d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e4158 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5643074e41d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5643074e4278 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x564307511870 <col:73, line:597:5>
|     |-CallExpr 0x5643075117f0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564307511690 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5643075116d0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5643075116e0 <col:39> 'const char *' lvalue ParmVar 0x5643074e40d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x564307511790 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x564307511740 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564307511700 <col:48> 'int' lvalue ParmVar 0x5643074e4158 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564307511778 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564307511758 <col:56> 'const int' lvalue Var 0x5643074d7450 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5643075117b0 <col:68> 'P' lvalue ParmVar 0x5643074e41d0 'parser' 'P'
|     | `-DeclRefExpr 0x5643075117d0 <col:76> 'T' lvalue ParmVar 0x5643074e4278 'x' 'T &'
|     `-ReturnStmt 0x564307511860 <line:596:9, col:17>
|       `-UnaryOperator 0x564307511848 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564307511838 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074ea868 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5643074e4480 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074e44f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074ea7c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5643074e45b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074e4630 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5643074ea6a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5643075119e0 <col:65, line:614:5>
|     `-ReturnStmt 0x5643075119d0 <line:613:9, col:46>
|       `-CallExpr 0x564307511990 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5643075118a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307511910 <col:25> 'const char *' lvalue ParmVar 0x5643074e45b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x564307511930 <col:34> 'int' 0
|         |-DeclRefExpr 0x564307511950 <col:37> 'P' lvalue ParmVar 0x5643074e4630 'parser' 'P'
|         `-DeclRefExpr 0x564307511970 <col:45> 'Vector<T>' lvalue ParmVar 0x5643074ea6a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5643074eac98 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5643074ea8d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074eabf8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5643074ea990 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074eaae0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564307511c00 <col:55, line:618:5>
|     `-ReturnStmt 0x564307511bf0 <line:617:9, col:55>
|       `-CallExpr 0x564307511bb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307511a08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307511a78 <col:25> 'const char *' lvalue ParmVar 0x5643074ea990 'keyword' 'const char *'
|         |-IntegerLiteral 0x564307511a98 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x564307511b70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564307511b90 <col:54> 'Vector<T>' lvalue ParmVar 0x5643074eaae0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5643074eb268 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5643074ead00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074ead78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074eb1c8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5643074eae38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074eaeb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5643074eaf30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5643074eb080 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564307511df8 <col:76, line:623:5>
|     |-CallExpr 0x564307511d78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x564307511c18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x564307511c58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x564307511c68 <col:34> 'const char *' lvalue ParmVar 0x5643074eae38 'keyword' 'const char *'
|     | |-BinaryOperator 0x564307511d18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x564307511cc8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x564307511c88 <col:43> 'int' lvalue ParmVar 0x5643074eaeb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x564307511d00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x564307511ce0 <col:51> 'const int' lvalue Var 0x5643074d7450 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x564307511d38 <col:63> 'P' lvalue ParmVar 0x5643074eaf30 'parser' 'P'
|     | `-DeclRefExpr 0x564307511d58 <col:71> 'Vector<T>' lvalue ParmVar 0x5643074eb080 'x' 'Vector<T> &'
|     `-ReturnStmt 0x564307511de8 <line:622:9, col:17>
|       `-UnaryOperator 0x564307511dd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x564307511dc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074eb7a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5643074eb2e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074eb358 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074eb708 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5643074eb418 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074eb498 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5643074eb5e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x564307512060 <col:66, line:627:5>
|     `-ReturnStmt 0x564307512050 <line:626:9, col:59>
|       `-CallExpr 0x564307512010 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x564307511e28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x564307511e98 <col:25> 'const char *' lvalue ParmVar 0x5643074eb418 'keyword' 'const char *'
|         |-DeclRefExpr 0x564307511eb8 <col:34> 'int' lvalue ParmVar 0x5643074eb498 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x564307511fd0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x564307511ff0 <col:58> 'Vector<T>' lvalue ParmVar 0x5643074eb5e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5643074eb838 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5643075120e0 <col:25, line:633:5>
|   `-ReturnStmt 0x5643075120d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5643075120b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564307512088 <col:16> 'const bool' lvalue ->_status 0x5643074f1678
|         `-CXXThisExpr 0x564307512078 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5643074eb9b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5643074eb8f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5643075121c8 <col:27, line:639:5>
|   |-BinaryOperator 0x564307512170 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5643075120f8 <col:9> 'bool' lvalue ParmVar 0x5643074eb8f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564307512158 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564307512128 <col:13> 'bool' lvalue ->_status 0x5643074f1678
|   |     `-CXXThisExpr 0x564307512118 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5643075121b8 <line:638:9, col:17>
|     `-UnaryOperator 0x5643075121a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564307512190 <col:17> 'Args *' this
|-CXXMethodDecl 0x5643074ebb38 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5643074eba78 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5643075122b8 <col:39, line:644:5>
|   |-BinaryOperator 0x564307512260 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5643075121e8 <col:9> 'bool' lvalue ParmVar 0x5643074eba78 'x' 'bool &'
|   | `-ImplicitCastExpr 0x564307512248 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x564307512218 <col:13> 'const bool' lvalue ->_status 0x5643074f1678
|   |     `-CXXThisExpr 0x564307512208 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5643075122a8 <line:643:9, col:17>
|     `-UnaryOperator 0x564307512290 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564307512280 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5643074ebc00 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x564307512360 <col:30, line:651:5>
|   `-ReturnStmt 0x564307512350 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x564307512338 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x564307512308 <col:16> 'bool' lvalue ->_read_status 0x5643074cd590
|         `-ImplicitCastExpr 0x5643075122e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5643075122d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5643074ebd48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5643074ebcb8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x564307512468 <col:32, line:658:5>
|   |-BinaryOperator 0x564307512410 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564307512378 <col:9> 'bool' lvalue ParmVar 0x5643074ebcb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5643075123f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5643075123c8 <col:13> 'bool' lvalue ->_read_status 0x5643074cd590
|   |     `-ImplicitCastExpr 0x5643075123a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x564307512398 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x564307512458 <line:657:9, col:17>
|     `-UnaryOperator 0x564307512440 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564307512430 <col:17> 'Args *' this
|-CXXMethodDecl 0x5643074ebe98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5643074ebe08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x564307514640 <col:44, line:663:5>
|   |-BinaryOperator 0x5643075145e8 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x564307512488 <col:9> 'bool' lvalue ParmVar 0x5643074ebe08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5643075145d0 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5643075124d8 <col:13> 'bool' lvalue ->_read_status 0x5643074cd590
|   |     `-ImplicitCastExpr 0x5643075124b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5643075124a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x564307514630 <line:662:9, col:17>
|     `-UnaryOperator 0x564307514618 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564307514608 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5643074ebf60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5643074ec028 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5643074ec0f0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5643074ec1b8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5643074ec4c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5643074ec258 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074ec428 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5643074ec338 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5643075149f0 <col:19, line:706:5>
|     `-IfStmt 0x5643075149c8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x564307514738 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5643075148f8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5643075148c8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x564307514888 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x564307514790 <col:42> '<bound member function type>' ->simple_slot 0x56430750d3b0
|       |     | `-CXXThisExpr 0x564307514780 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x564307514828 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5643075147e0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5643071b1f68
|       |     | `-DeclRefExpr 0x5643075147c0 <col:55> 'T' lvalue ParmVar 0x5643074ec338 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x564307514868 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5643075149b8 <line:705:13, col:34>
|         `-CallExpr 0x564307514990 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x564307514918 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x564307514970 <col:33> 'T' lvalue ParmVar 0x5643074ec338 'x' 'T &'
|-FunctionTemplateDecl 0x5643074ec798 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5643074ec528 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074ec6f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5643074ec608 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x564307514dd0 <col:31, line:717:5>
|     |-DeclStmt 0x564307514b30 <line:713:9, col:23>
|     | `-VarDecl 0x564307514a18 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x564307514b08 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x564307514a90 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x564307514ae8 <col:21> 'T' lvalue ParmVar 0x5643074ec608 'x' 'T &'
|     |-IfStmt 0x564307514d80 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x564307514c28 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x564307514d60 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564307514d00 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564307514c90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|     |   | `-DeclRefExpr 0x564307514c70 <col:14> 'T *' lvalue Var 0x564307514a18 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x564307514d40 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x564307514db8 <line:716:9, col:16>
|       `-DeclRefExpr 0x564307514d98 <col:16> 'T *' lvalue Var 0x564307514a18 's' 'T *'
|-FunctionTemplateDecl 0x5643074ecba8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5643074ec7f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5643074ec878 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5643074ecb08 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5643074ec958 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5643074ec9f8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5643075150e0 <col:37, line:726:5>
|     |-IfStmt 0x564307515070 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x564307515090 <line:723:13, col:26>
|     | | `-VarDecl 0x564307514e38 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x564307514f28 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x564307514eb0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x564307514f08 <col:25> 'T' lvalue ParmVar 0x5643074ec958 'x' 'T &'
|     | |-DeclRefExpr 0x564307514f50 <col:16> 'T *' lvalue Var 0x564307514e38 's' 'T *'
|     | `-BinaryOperator 0x564307515050 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x564307515000 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x564307514f90 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|     |   | `-DeclRefExpr 0x564307514f70 <col:14> 'T *' lvalue Var 0x564307514e38 's' 'T *'
|     |   `-DeclRefExpr 0x564307515030 <col:18> 'const V' lvalue ParmVar 0x5643074ec9f8 'value' 'const V &'
|     `-ReturnStmt 0x5643075150d0 <line:725:9, col:17>
|       `-UnaryOperator 0x5643075150b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5643075150a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5643074ecfa8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5643074ecc10 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5643074ecf08 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5643074eccc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ecd40 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ecde8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x564307515f00 <col:65, line:737:5>
|     |-DeclStmt 0x564307515178 <line:732:9, col:26>
|     | `-VarDecl 0x564307515110 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564307515ec8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x564307515ee8 <line:733:13, col:58>
|       | `-VarDecl 0x5643075151a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564307515380 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564307515350 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564307515338 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564307515318 <col:26, col:58> 'String' (CXXTemporary 0x564307515318)
|       |           `-CXXMemberCallExpr 0x5643075152a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564307515218 <col:26> '<bound member function type>' ->find 0x56430750c9c8
|       |             | `-CXXThisExpr 0x564307515208 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5643075152e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564307515248 <col:31> 'const char *' lvalue ParmVar 0x5643074eccc0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5643075152f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564307515268 <col:40> 'int' lvalue ParmVar 0x5643074ecd40 'flags' 'int'
|       |             `-DeclRefExpr 0x564307515288 <col:47> 'Args::Slot *' lvalue Var 0x564307515110 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564307515438 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564307515420 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564307515400 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5643075153d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |       `-ImplicitCastExpr 0x5643075153b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564307515398 <col:20> 'String' lvalue Var 0x5643075151a0 'str' 'String'
|       `-CompoundStmt 0x564307515ea8 <col:61, line:736:9>
|         |-DeclStmt 0x5643075158f0 <line:734:13, col:76>
|         | `-VarDecl 0x564307515488 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5643075158c0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564307515830 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564307515878 <col:60> 'T' lvalue ParmVar 0x5643074ecde8 'variable' 'T &'
|         |     `-UnaryOperator 0x5643075158a8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564307515898 <col:71> 'Args *' this
|         `-CallExpr 0x564307515e78 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x564307515918 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|           | `-CXXThisExpr 0x564307515908 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564307515e38 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564307515948 <col:23> 'T *' lvalue Var 0x564307515488 's' 'T *'
|           | `-CallExpr 0x564307515df8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564307515bd0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x564307515cd0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x564307515cf0 <col:86> 'String' lvalue Var 0x5643075151a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564307515da0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564307515d30 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|           |   | `-DeclRefExpr 0x564307515d10 <col:92> 'T *' lvalue Var 0x564307515488 's' 'T *'
|           |   `-UnaryOperator 0x564307515de0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564307515dd0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x564307515e58 <col:103> 'Args::Slot *' lvalue Var 0x564307515110 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5643074ed4f8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5643074ed018 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5643074ed098 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5643074ed458 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5643074ed158 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ed1d8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ed278 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5643074ed318 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x564307516da0 <col:88, line:745:5>
|     |-DeclStmt 0x564307515f98 <line:741:9, col:26>
|     | `-VarDecl 0x564307515f30 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5643075161b8 <line:742:9, col:55>
|     | `-VarDecl 0x564307515fc0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5643075161a0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564307516170 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564307516158 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564307516138 <col:22, col:54> 'String' (CXXTemporary 0x564307516138)
|     |           `-CXXMemberCallExpr 0x5643075160c8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564307516038 <col:22> '<bound member function type>' ->find 0x56430750c9c8
|     |             | `-CXXThisExpr 0x564307516028 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564307516100 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564307516068 <col:27> 'const char *' lvalue ParmVar 0x5643074ed158 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564307516118 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564307516088 <col:36> 'int' lvalue ParmVar 0x5643074ed1d8 'flags' 'int'
|     |             `-DeclRefExpr 0x5643075160a8 <col:43> 'Args::Slot *' lvalue Var 0x564307515f30 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564307516590 <line:743:9, col:72>
|     | `-VarDecl 0x564307516208 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564307516560 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5643075164d0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564307516518 <col:56> 'T' lvalue ParmVar 0x5643074ed278 'variable' 'T &'
|     |     `-UnaryOperator 0x564307516548 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564307516538 <col:67> 'Args *' this
|     `-CallExpr 0x564307516d70 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5643075165b8 <col:9> '<bound member function type>' ->postparse 0x56430750cbd8
|       | `-CXXThisExpr 0x5643075165a8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x564307516d30 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5643075165e8 <col:19> 'T *' lvalue Var 0x564307516208 's' 'T *'
|       | `-ParenExpr 0x564307516d10 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x564307516ce0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564307516cc8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564307516cb0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564307516c90 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x564307516c60 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |     |       `-ImplicitCastExpr 0x564307516c48 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x564307516608 <col:25> 'String' lvalue Var 0x564307515fc0 'str' 'String'
|       |     |-CallExpr 0x564307516ab8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x564307516890 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x564307516990 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5643075169b0 <col:89> 'String' lvalue Var 0x564307515fc0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x564307516a60 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5643075169f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|       |     | | `-DeclRefExpr 0x5643075169d0 <col:95> 'T *' lvalue Var 0x564307516208 's' 'T *'
|       |     | `-UnaryOperator 0x564307516aa0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564307516a90 <col:99> 'Args *' this
|       |     `-ParenExpr 0x564307516c28 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x564307516c08 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x564307516bd8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564307516b88 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x564307516b18 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|       |         | | `-DeclRefExpr 0x564307516af8 <col:109> 'T *' lvalue Var 0x564307516208 's' 'T *'
|       |         | `-DeclRefExpr 0x564307516bb8 <col:113> 'const V' lvalue ParmVar 0x5643074ed318 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564307516bf8 <col:120> 'bool' true
|       `-DeclRefExpr 0x564307516d50 <col:128> 'Args::Slot *' lvalue Var 0x564307515f30 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5643074eda28 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5643074ed570 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074ed5e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074ed988 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5643074ed6a8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ed728 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ed7a0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5643074ed848 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x564307517998 <col:75, line:754:5>
|     |-DeclStmt 0x564307516e48 <line:749:9, col:26>
|     | `-VarDecl 0x564307516de0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564307517960 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x564307517980 <line:750:13, col:58>
|       | `-VarDecl 0x564307516e70 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x564307517050 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564307517020 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564307517008 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564307516fe8 <col:26, col:58> 'String' (CXXTemporary 0x564307516fe8)
|       |           `-CXXMemberCallExpr 0x564307516f78 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564307516ee8 <col:26> '<bound member function type>' ->find 0x56430750c9c8
|       |             | `-CXXThisExpr 0x564307516ed8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564307516fb0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564307516f18 <col:31> 'const char *' lvalue ParmVar 0x5643074ed6a8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564307516fc8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564307516f38 <col:40> 'int' lvalue ParmVar 0x5643074ed728 'flags' 'int'
|       |             `-DeclRefExpr 0x564307516f58 <col:47> 'Args::Slot *' lvalue Var 0x564307516de0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564307517108 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5643075170f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5643075170d0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5643075170a0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |       `-ImplicitCastExpr 0x564307517088 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x564307517068 <col:20> 'String' lvalue Var 0x564307516e70 'str' 'String'
|       `-CompoundStmt 0x564307517940 <col:61, line:753:9>
|         |-DeclStmt 0x5643075174e0 <line:751:13, col:63>
|         | `-VarDecl 0x564307517158 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5643075174b0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564307517420 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564307517468 <col:47> 'T' lvalue ParmVar 0x5643074ed848 'variable' 'T &'
|         |     `-UnaryOperator 0x564307517498 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564307517488 <col:58> 'Args *' this
|         `-CallExpr 0x564307517910 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x564307517508 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|           | `-CXXThisExpr 0x5643075174f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5643075178d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x564307517538 <col:23> 'T *' lvalue Var 0x564307517158 's' 'T *'
|           | `-CallExpr 0x564307517890 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x564307517720 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564307517768 <col:56> 'P' lvalue ParmVar 0x5643074ed7a0 'parser' 'P'
|           |   |-DeclRefExpr 0x564307517788 <col:64> 'String' lvalue Var 0x564307516e70 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x564307517838 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5643075177c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|           |   | `-DeclRefExpr 0x5643075177a8 <col:70> 'T *' lvalue Var 0x564307517158 's' 'T *'
|           |   `-UnaryOperator 0x564307517878 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x564307517868 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5643075178f0 <col:81> 'Args::Slot *' lvalue Var 0x564307516de0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5643074ee088 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5643074edaa0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5643074edb18 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5643074edb98 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5643074edfe8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5643074edc60 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074edce0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5643074edd58 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5643074eddf8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5643074ede98 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x564307518728 <col:98, line:762:5>
|     |-DeclStmt 0x564307517a30 <line:758:9, col:26>
|     | `-VarDecl 0x5643075179c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564307517c50 <line:759:9, col:55>
|     | `-VarDecl 0x564307517a58 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x564307517c38 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x564307517c08 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x564307517bf0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x564307517bd0 <col:22, col:54> 'String' (CXXTemporary 0x564307517bd0)
|     |           `-CXXMemberCallExpr 0x564307517b60 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x564307517ad0 <col:22> '<bound member function type>' ->find 0x56430750c9c8
|     |             | `-CXXThisExpr 0x564307517ac0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x564307517b98 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564307517b00 <col:27> 'const char *' lvalue ParmVar 0x5643074edc60 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x564307517bb0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x564307517b20 <col:36> 'int' lvalue ParmVar 0x5643074edce0 'flags' 'int'
|     |             `-DeclRefExpr 0x564307517b40 <col:43> 'Args::Slot *' lvalue Var 0x5643075179c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x564307518070 <line:760:9, col:59>
|     | `-VarDecl 0x564307517ca8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x564307518040 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x564307517fb0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x564307517ff8 <col:43> 'T' lvalue ParmVar 0x5643074eddf8 'variable' 'T &'
|     |     `-UnaryOperator 0x564307518028 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x564307518018 <col:54> 'Args *' this
|     `-CallExpr 0x5643075186f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x564307518098 <col:9> '<bound member function type>' ->postparse 0x56430750cbd8
|       | `-CXXThisExpr 0x564307518088 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5643075186b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5643075180c8 <col:19> 'T *' lvalue Var 0x564307517ca8 's' 'T *'
|       | `-ParenExpr 0x564307518698 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x564307518668 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x564307518650 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x564307518638 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x564307518618 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5643075185e8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |     |       `-ImplicitCastExpr 0x5643075185d0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5643075180e8 <col:25> 'String' lvalue Var 0x564307517a58 'str' 'String'
|       |     |-CallExpr 0x564307518440 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5643075182d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x564307518318 <col:59> 'P' lvalue ParmVar 0x5643074edd58 'parser' 'P'
|       |     | |-DeclRefExpr 0x564307518338 <col:67> 'String' lvalue Var 0x564307517a58 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5643075183e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x564307518378 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|       |     | | `-DeclRefExpr 0x564307518358 <col:73> 'T *' lvalue Var 0x564307517ca8 's' 'T *'
|       |     | `-UnaryOperator 0x564307518428 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x564307518418 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5643075185b0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x564307518590 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x564307518560 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x564307518510 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5643075184a0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|       |         | | `-DeclRefExpr 0x564307518480 <col:87> 'T *' lvalue Var 0x564307517ca8 's' 'T *'
|       |         | `-DeclRefExpr 0x564307518540 <col:91> 'const V' lvalue ParmVar 0x5643074ede98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x564307518580 <col:98> 'bool' true
|       `-DeclRefExpr 0x5643075186d8 <col:106> 'Args::Slot *' lvalue Var 0x5643075179c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5643074ee6f8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5643074ee108 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074ee188 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5643074ee208 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5643074ee658 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5643074ee2d0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ee350 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ee3c8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5643074ee468 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5643074ee508 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x564307519708 <col:60, line:773:5>
|     |-DeclStmt 0x5643075187d0 <line:767:9, col:26>
|     | `-VarDecl 0x564307518768 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5643075196d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5643075196f0 <line:768:13, col:58>
|       | `-VarDecl 0x5643075187f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5643075189d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5643075189a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564307518990 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564307518970 <col:26, col:58> 'String' (CXXTemporary 0x564307518970)
|       |           `-CXXMemberCallExpr 0x564307518900 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564307518870 <col:26> '<bound member function type>' ->find 0x56430750c9c8
|       |             | `-CXXThisExpr 0x564307518860 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564307518938 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5643075188a0 <col:31> 'const char *' lvalue ParmVar 0x5643074ee2d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564307518950 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5643075188c0 <col:40> 'int' lvalue ParmVar 0x5643074ee350 'flags' 'int'
|       |             `-DeclRefExpr 0x5643075188e0 <col:47> 'Args::Slot *' lvalue Var 0x564307518768 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564307518a90 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564307518a78 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564307518a58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x564307518a28 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |       `-ImplicitCastExpr 0x564307518a10 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5643075189f0 <col:20> 'String' lvalue Var 0x5643075187f8 'str' 'String'
|       `-CompoundStmt 0x5643075196a8 <col:61, line:772:9>
|         |-DeclStmt 0x564307518dd0 <line:769:13, col:66>
|         | `-VarDecl 0x564307518ae8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x564307518da0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564307518d10 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x564307518d58 <col:49> 'T1' lvalue ParmVar 0x5643074ee468 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x564307518d88 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x564307518d78 <col:61> 'Args *' this
|         |-DeclStmt 0x564307519140 <line:770:13, col:66>
|         | `-VarDecl 0x564307518e58 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x564307519110 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x564307519080 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5643075190c8 <col:49> 'T2' lvalue ParmVar 0x5643074ee508 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5643075190f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5643075190e8 <col:61> 'Args *' this
|         `-CallExpr 0x564307519678 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x564307519168 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|           | `-CXXThisExpr 0x564307519158 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x564307519638 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5643075191d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x564307519198 <col:23> 'T1 *' lvalue Var 0x564307518ae8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5643075191b8 <col:29> 'T2 *' lvalue Var 0x564307518e58 's2' 'T2 *'
|           | `-CallExpr 0x5643075195f0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5643075193c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x564307519408 <col:63> 'P' lvalue ParmVar 0x5643074ee3c8 'parser' 'P'
|           |   |-DeclRefExpr 0x564307519428 <col:71> 'String' lvalue Var 0x5643075187f8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5643075194d8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564307519468 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|           |   | `-DeclRefExpr 0x564307519448 <col:77> 'T1 *' lvalue Var 0x564307518ae8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x564307519598 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x564307519528 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|           |   | `-DeclRefExpr 0x564307519508 <col:82> 'T2 *' lvalue Var 0x564307518e58 's2' 'T2 *'
|           |   `-UnaryOperator 0x5643075195d8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5643075195c8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x564307519658 <col:94> 'Args::Slot *' lvalue Var 0x564307518768 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5643074eeae8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5643074ee778 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074eea48 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5643074ee830 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ee8b0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ee928 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x564307519c20 <col:67, line:780:5>
|     |-DeclStmt 0x5643075197a0 <line:777:9, col:26>
|     | `-VarDecl 0x564307519738 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x564307519be8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x564307519c08 <line:778:13, col:58>
|       | `-VarDecl 0x5643075197c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5643075199a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x564307519978 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x564307519960 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x564307519940 <col:26, col:58> 'String' (CXXTemporary 0x564307519940)
|       |           `-CXXMemberCallExpr 0x5643075198d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x564307519840 <col:26> '<bound member function type>' ->find 0x56430750c9c8
|       |             | `-CXXThisExpr 0x564307519830 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x564307519908 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564307519870 <col:31> 'const char *' lvalue ParmVar 0x5643074ee830 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x564307519920 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x564307519890 <col:40> 'int' lvalue ParmVar 0x5643074ee8b0 'flags' 'int'
|       |             `-DeclRefExpr 0x5643075198b0 <col:47> 'Args::Slot *' lvalue Var 0x564307519738 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x564307519a60 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x564307519a48 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x564307519a28 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5643075199f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|       |       `-ImplicitCastExpr 0x5643075199e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5643075199c0 <col:20> 'String' lvalue Var 0x5643075197c8 'str' 'String'
|       `-CallExpr 0x564307519bb8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x564307519a88 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|         | `-CXXThisExpr 0x564307519a78 <col:13> 'Args *' implicit this
|         |-CallExpr 0x564307519b68 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x564307519ad8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x564307519ab8 <col:23> 'P' lvalue ParmVar 0x5643074ee928 'parser' 'P'
|         | |-DeclRefExpr 0x564307519b20 <col:36> 'String' lvalue Var 0x5643075197c8 'str' 'String'
|         | `-UnaryOperator 0x564307519b50 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x564307519b40 <col:42> 'Args *' this
|         `-DeclRefExpr 0x564307519b98 <col:49> 'Args::Slot *' lvalue Var 0x564307519738 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5643074eee88 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5643074eeb58 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5643074eede8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5643074eec10 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074eec90 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5643074eed08 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56430751a590 <col:71, line:792:5>
|     |-DeclStmt 0x564307519cb8 <line:784:9, col:26>
|     | `-VarDecl 0x564307519c50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x564307519d88 <line:785:9, col:29>
|     | `-VarDecl 0x564307519ce8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x564307519d70 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x564307519d50 <col:28> 'int' 1
|     |-WhileStmt 0x56430751a440 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56430751a460 <line:786:16, col:61>
|     | | `-VarDecl 0x564307519db0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x564307519f90 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x564307519f60 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x564307519f48 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x564307519f28 <col:29, col:61> 'String' (CXXTemporary 0x564307519f28)
|     | |           `-CXXMemberCallExpr 0x564307519eb8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x564307519e28 <col:29> '<bound member function type>' ->find 0x56430750c9c8
|     | |             | `-CXXThisExpr 0x564307519e18 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x564307519ef0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564307519e58 <col:34> 'const char *' lvalue ParmVar 0x5643074eec10 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x564307519f08 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x564307519e78 <col:43> 'int' lvalue ParmVar 0x5643074eec90 'flags' 'int'
|     | |             `-DeclRefExpr 0x564307519e98 <col:50> 'Args::Slot *' lvalue Var 0x564307519c50 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56430751a048 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56430751a030 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56430751a010 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x564307519fe0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|     | |       `-ImplicitCastExpr 0x564307519fc8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x564307519fa8 <col:23> 'String' lvalue Var 0x564307519db0 'str' 'String'
|     | `-CompoundStmt 0x56430751a418 <col:64, line:790:9>
|     |   |-CallExpr 0x56430751a1a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56430751a070 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|     |   | | `-CXXThisExpr 0x56430751a060 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56430751a150 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56430751a0c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56430751a0a0 <col:23> 'P' lvalue ParmVar 0x5643074eed08 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56430751a108 <col:36> 'String' lvalue Var 0x564307519db0 'str' 'String'
|     |   | | `-UnaryOperator 0x56430751a138 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56430751a128 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56430751a180 <col:49> 'Args::Slot *' lvalue Var 0x564307519c50 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56430751a338 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56430751a1d0 <col:13> 'int' lvalue Var 0x564307519ce8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56430751a320 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56430751a300 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56430751a268 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56430751a248 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56430751a230 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56430751a1f0 <col:28> 'int' lvalue Var 0x564307519ce8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56430751a210 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56430751a2e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56430751a2b8 <col:49> 'bool' lvalue ->_read_status 0x5643074cd590
|     |   |         `-ImplicitCastExpr 0x56430751a298 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56430751a288 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56430751a3e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56430751a358 <col:13> 'int' lvalue ParmVar 0x5643074eec90 'flags' 'int'
|     |     `-UnaryOperator 0x56430751a3d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56430751a3b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56430751a398 <col:23> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56430751a570 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56430751a4a8 <col:9> 'bool' lvalue ->_read_status 0x5643074cd590
|       | `-ImplicitCastExpr 0x56430751a488 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56430751a478 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56430751a550 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56430751a530 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56430751a518 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56430751a4d8 <col:25> 'int' lvalue Var 0x564307519ce8 'read_status' 'int'
|           `-IntegerLiteral 0x56430751a4f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5643074ef368 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5643074eeef8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074eef78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074ef2c8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5643074ef038 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ef0b8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ef130 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5643074ef1d8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56430751b520 <col:84, line:805:5>
|     |-DeclStmt 0x56430751a638 <line:796:9, col:26>
|     | `-VarDecl 0x56430751a5d0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56430751a708 <line:797:9, col:29>
|     | `-VarDecl 0x56430751a668 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56430751a6f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56430751a6d0 <col:28> 'int' 1
|     |-DeclStmt 0x56430751aa40 <line:798:9, col:71>
|     | `-VarDecl 0x56430751a758 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56430751aa10 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56430751a980 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56430751a9c8 <col:55> 'T' lvalue ParmVar 0x5643074ef1d8 'variable' 'T &'
|     |     `-UnaryOperator 0x56430751a9f8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56430751a9e8 <col:66> 'Args *' this
|     |-WhileStmt 0x56430751b3d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56430751b3f0 <line:799:16, col:61>
|     | | `-VarDecl 0x56430751aa68 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56430751ac48 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56430751ac18 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56430751ac00 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56430751abe0 <col:29, col:61> 'String' (CXXTemporary 0x56430751abe0)
|     | |           `-CXXMemberCallExpr 0x56430751ab70 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56430751aae0 <col:29> '<bound member function type>' ->find 0x56430750c9c8
|     | |             | `-CXXThisExpr 0x56430751aad0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56430751aba8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56430751ab10 <col:34> 'const char *' lvalue ParmVar 0x5643074ef038 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56430751abc0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56430751ab30 <col:43> 'int' lvalue ParmVar 0x5643074ef0b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x56430751ab50 <col:50> 'Args::Slot *' lvalue Var 0x56430751a5d0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56430751ad00 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56430751ace8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56430751acc8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56430751ac98 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|     | |       `-ImplicitCastExpr 0x56430751ac80 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56430751ac60 <col:23> 'String' lvalue Var 0x56430751aa68 'str' 'String'
|     | `-CompoundStmt 0x56430751b3a8 <col:64, line:803:9>
|     |   |-CallExpr 0x56430751b130 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56430751ad28 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|     |   | | `-CXXThisExpr 0x56430751ad18 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56430751b0f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56430751ad58 <col:23> 'T *' lvalue Var 0x56430751a758 's' 'T *'
|     |   | | `-CallExpr 0x56430751b0b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56430751af40 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56430751af88 <col:56> 'P' lvalue ParmVar 0x5643074ef130 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56430751afa8 <col:64> 'String' lvalue Var 0x56430751aa68 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56430751b058 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56430751afe8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|     |   | |   | `-DeclRefExpr 0x56430751afc8 <col:70> 'T *' lvalue Var 0x56430751a758 's' 'T *'
|     |   | |   `-UnaryOperator 0x56430751b098 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56430751b088 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56430751b110 <col:81> 'Args::Slot *' lvalue Var 0x56430751a5d0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56430751b2c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56430751b160 <col:13> 'int' lvalue Var 0x56430751a668 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56430751b2b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56430751b290 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56430751b1f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56430751b1d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56430751b1c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56430751b180 <col:28> 'int' lvalue Var 0x56430751a668 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56430751b1a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56430751b278 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56430751b248 <col:49> 'bool' lvalue ->_read_status 0x5643074cd590
|     |   |         `-ImplicitCastExpr 0x56430751b228 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56430751b218 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56430751b378 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56430751b2e8 <col:13> 'int' lvalue ParmVar 0x5643074ef0b8 'flags' 'int'
|     |     `-UnaryOperator 0x56430751b360 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56430751b348 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56430751b328 <col:23> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56430751b500 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56430751b438 <col:9> 'bool' lvalue ->_read_status 0x5643074cd590
|       | `-ImplicitCastExpr 0x56430751b418 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56430751b408 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56430751b4e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56430751b4c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56430751b4a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56430751b468 <col:25> 'int' lvalue Var 0x56430751a668 'read_status' 'int'
|           `-IntegerLiteral 0x56430751b488 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5643074ef948 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5643074ef3e0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5643074ef458 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5643074ef8a8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5643074ef518 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5643074ef598 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5643074ef610 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5643074ef760 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56430751c328 <col:87, line:821:5>
|     |-DeclStmt 0x56430751b5d0 <line:809:9, col:26>
|     | `-VarDecl 0x56430751b568 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56430751b6a0 <line:810:9, col:29>
|     | `-VarDecl 0x56430751b600 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56430751b688 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56430751b668 <col:28> 'int' 1
|     |-DeclStmt 0x56430751b8e8 <line:811:9, col:38>
|     | `-VarDecl 0x56430751b7d0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56430751b8c0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56430751b848 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56430751b8a0 <col:29> 'Vector<T>' lvalue ParmVar 0x5643074ef760 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56430751c1d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56430751c1f8 <line:812:16, col:61>
|     | | `-VarDecl 0x56430751b910 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56430751baf0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56430751bac0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56430751baa8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56430751ba88 <col:29, col:61> 'String' (CXXTemporary 0x56430751ba88)
|     | |           `-CXXMemberCallExpr 0x56430751ba18 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56430751b988 <col:29> '<bound member function type>' ->find 0x56430750c9c8
|     | |             | `-CXXThisExpr 0x56430751b978 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56430751ba50 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56430751b9b8 <col:34> 'const char *' lvalue ParmVar 0x5643074ef518 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56430751ba68 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56430751b9d8 <col:43> 'int' lvalue ParmVar 0x5643074ef598 'flags' 'int'
|     | |             `-DeclRefExpr 0x56430751b9f8 <col:50> 'Args::Slot *' lvalue Var 0x56430751b568 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56430751bba8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56430751bb90 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56430751bb70 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56430751bb40 <col:23> '<bound member function type>' .operator int (String::*)() const 0x564307173f28
|     | |       `-ImplicitCastExpr 0x56430751bb28 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56430751bb08 <col:23> 'String' lvalue Var 0x56430751b910 'str' 'String'
|     | `-CompoundStmt 0x56430751c1a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x56430751bc68 <line:813:13, col:23>
|     |   | `-VarDecl 0x56430751bbd0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56430751bc48 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56430751bde8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56430751bc90 <col:13> '<bound member function type>' ->postparse 0x56430750cbd8
|     |   | | `-CXXThisExpr 0x56430751bc80 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56430751bd90 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56430751bce0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56430751bcc0 <col:23> 'P' lvalue ParmVar 0x5643074ef610 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56430751bd28 <col:36> 'String' lvalue Var 0x56430751b910 'str' 'String'
|     |   | | |-DeclRefExpr 0x56430751bd48 <col:41> 'T' lvalue Var 0x56430751bbd0 'sx' 'T'
|     |   | | `-UnaryOperator 0x56430751bd78 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56430751bd68 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56430751bdc8 <col:53> 'Args::Slot *' lvalue Var 0x56430751b568 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56430751bf40 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56430751be78 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56430751be48 <col:17> 'bool' lvalue ->_read_status 0x5643074cd590
|     |   | |   `-ImplicitCastExpr 0x56430751be28 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56430751be18 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56430751bf18 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56430751beb0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56430751be90 <col:17> 'Vector<T> *' lvalue Var 0x56430751b7d0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56430751bef8 <col:30> 'T' lvalue Var 0x56430751bbd0 'sx' 'T'
|     |   |-BinaryOperator 0x56430751c0c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56430751bf58 <col:13> 'int' lvalue Var 0x56430751b600 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56430751c0a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56430751c088 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56430751bff0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56430751bfd0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56430751bfb8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56430751bf78 <col:28> 'int' lvalue Var 0x56430751b600 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56430751bf98 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56430751c070 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56430751c040 <col:49> 'bool' lvalue ->_read_status 0x5643074cd590
|     |   |         `-ImplicitCastExpr 0x56430751c020 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56430751c010 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56430751c170 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56430751c0e0 <col:13> 'int' lvalue ParmVar 0x5643074ef598 'flags' 'int'
|     |     `-UnaryOperator 0x56430751c158 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56430751c140 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56430751c120 <col:23> 'const int' lvalue Var 0x5643074d7168 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56430751c308 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56430751c240 <col:9> 'bool' lvalue ->_read_status 0x5643074cd590
|       | `-ImplicitCastExpr 0x56430751c220 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56430751c210 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56430751c2e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56430751c2c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56430751c2b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56430751c270 <col:25> 'int' lvalue Var 0x56430751b600 'read_status' 'int'
|           `-IntegerLiteral 0x56430751c290 <col:40> 'int' 1
|-AccessSpecDecl 0x5643074ef9c0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5643074ef9e8 prev 0x5643074d5468 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5643074efae0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5643074efbd0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56430751c360 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5643074efcc0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56430751c370 <col:25, line:830:9>
| |-CXXMethodDecl 0x5643074efdc0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5643074efe70 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5643074eff18 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5643074eff18
| | `-ParmVarDecl 0x5643074f0028 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5643074f07e8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5643074f07e8
|   `-ParmVarDecl 0x5643074f08f8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5643074f0098 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5643074f01f8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5643074f03f0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5643074f02a0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5643074f0318 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56430751c550 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5643074f06a8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56430751c3c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56430751c380 <col:20> 'void *' lvalue ParmVar 0x5643074f02a0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5643074f0710 '_slot' 'char *'
| | | `-CXXNewExpr 0x56430751c448 <col:32, col:45> 'char *' array Function 0x564306f97ba8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56430751c430 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56430751c400 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5643074f0318 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5643074f0770 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56430751c510 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56430751c4d0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5643074f0318 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56430751e8f0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5643074f04f0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5643074efcc0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56430751e978 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56430751e958 <line:840:13, col:22> 'void' array Function 0x564306f97f08 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56430751e940 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56430751e910 <col:22> 'char *' lvalue ->_slot 0x5643074f0710
| |         `-CXXThisExpr 0x56430751e900 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5643074f05f0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5643074efdc0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56430751eb68 <col:22, line:844:9>
| |   `-CallExpr 0x56430751ead0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56430751eab8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56430751ea98 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5643070a3988 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56430751eb08 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56430751e9e8 <col:20> 'void *' lvalue ->_ptr 0x5643074f06a8
| |     |   `-CXXThisExpr 0x56430751e9d8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56430751eb38 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56430751eb20 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56430751ea28 <col:26> 'char *' lvalue ->_slot 0x5643074f0710
| |     |     `-CXXThisExpr 0x56430751ea18 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56430751eb50 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56430751ea68 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5643074f0770
| |         `-CXXThisExpr 0x56430751ea58 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5643074f06a8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5643074f0710 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5643074f0770 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5643074f0968 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5643074f0968
| | `-ParmVarDecl 0x5643074f0a78 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5643074f0b18 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5643074f0b18
|   `-ParmVarDecl 0x5643074f0c28 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5643074f0dc8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5643074f0c98 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5643074f0d38 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5643074f1060 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5643074f1258 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5643074f1128 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5643074f13d8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56430751eba0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56430751eb80 <col:20> 'T *' lvalue ParmVar 0x5643074f1128 'ptr' 'T *'
|   | `-CompoundStmt 0x56430751ebf0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5643074f1328 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5643074efdc0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56430751eda0 <col:22, line:857:9>
|   |   `-CallExpr 0x56430751ed70 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56430751ec00 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56430715c0b8 0x5643071063e8
|   |     |-CXXOperatorCallExpr 0x56430751ed00 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56430751ec90 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x564307369068 0x564307368c88 0x5643073688b8 0x5643073684d8 0x5643073680f8 0x564307367d28
|   |     | `-MemberExpr 0x56430751ec60 <col:29> 'T *' lvalue ->_ptr 0x5643074f13d8
|   |     |   `-CXXThisExpr 0x56430751ec50 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56430751ed40 <col:35> 'T' lvalue ->_slot 0x5643074f1438
|   |       `-CXXThisExpr 0x56430751ed30 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5643074f13d8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5643074f1438 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5643074f14a0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5643074f15a0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5643074f15f0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643074f1580 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5643074f1560 <col:31> 'int' 48
|-FieldDecl 0x5643074f1618 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5643074f1678 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5643074f16d8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5643074f1810 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56430750c270 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56430750c2d0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56430750c380 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56430750c5a8 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56430750c4b0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56430750c6f8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56430750c668 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56430750c9c8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56430750c7b8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56430750c838 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56430750c8e0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56430750cbd8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56430750ca90 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56430750cb08 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56430750cca8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56430750cdf8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56430750cd60 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56430750d188 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56430750ceb8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56430750cf38 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56430750cfe0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56430750d098 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56430750d3b0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56430750d260 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56430750d2d8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56430750d6c8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56430750d460 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56430750d628 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56430750d538 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430737e9c8 prev 0x564307373bd0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430737eac0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56430737ebb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56430737ecd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56430737ee58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56430737efd8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56430737f158 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56430738ff88 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5643073907f8 <col:11>
|-CXXDestructorDecl 0x564307390060 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564307390198 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564307390198
| `-ParmVarDecl 0x5643073902a8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x564307390348 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564307390348
| `-ParmVarDecl 0x564307390458 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x564307393218 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x564307393328 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5643073935a8 <col:11>
|   `-ReturnStmt 0x564307393598 <col:11>
|     `-UnaryOperator 0x564307393580 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x564307393570 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x564307393398 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564307393398
  `-ParmVarDecl 0x5643073934a8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430737f1c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430737f2d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56430737f378 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56430737f3e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56430737f448 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56430737f4b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56430737f510 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56430737f5d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56430737f630 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56430737f690 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56430738fe98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56430737f378 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x564307390808 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x564307390860 <col:12>
|-CXXConstructorDecl 0x5643073904c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5643073904c8
| `-ParmVarDecl 0x5643073905d8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x564307390678 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564307390678
| `-ParmVarDecl 0x564307390788 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x564307392900 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430736d2e0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56430736d3f8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56430736d488 <col:16, col:22> col:16 public
|-EnumDecl 0x56430736d4b0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56430736d5b0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56430736d690 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430736d590 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56430736d570 <col:21> 'int' 28
| `-EnumConstantDecl 0x56430736d640 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56430736d6a8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56430736d620 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56430736d600 <col:22> 'int' 64
|-CXXMethodDecl 0x56430736d9e8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56430736d6d0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56430736d750 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56430736d7c8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56430736d840 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56430736daa8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56430736dca8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56430736db20 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56430736db98 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56430736dd58 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56430736deb8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56430736ddc8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56430736df60 <col:72> warn_unused_result ""
|-TypedefDecl 0x56430736e2c0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56430736e250 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56430736e1f0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56430736e1b0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x564306e414e0 'void'
|       |-PointerType 0x5643070ed680 'unsigned char *'
|       | `-BuiltinType 0x564306e415e0 'unsigned char'
|       |-TypedefType 0x564306ee9c50 'size_t' sugar
|       | |-Typedef 0x564306eb1be0 'size_t'
|       | `-BuiltinType 0x564306e41640 'unsigned long'
|       `-PointerType 0x564306e41ce0 'void *'
|         `-BuiltinType 0x564306e414e0 'void'
|-CXXMethodDecl 0x56430736e738 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56430736e330 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56430736e3a8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56430736e440 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56430736e4c0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x564307388e30 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x564307388e18 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x564307388de0 <col:58> 'int' 0
| |-ParmVarDecl 0x56430736e540 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x564307388e58 <col:76> 'int' 0
| |-ParmVarDecl 0x56430736e5c0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x564307388e78 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56430736e808 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56430736e888 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56430736e948 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56430736e9e8 <col:20>
| `-OptimizeNoneAttr 0x56430736ea40 <col:30>
|-CXXMethodDecl 0x56430736eab8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56430736eb58 <col:20>
| `-OptimizeNoneAttr 0x56430736ebb0 <col:30>
|-CXXMethodDecl 0x56430736ec28 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56430736ecc8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56430736ed78 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56430736ee18 <col:20>
| |-OptimizeNoneAttr 0x56430736ee70 <col:30>
| `-WarnUnusedResultAttr 0x56430736ee98 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56430736eef0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56430736ef90 <col:20>
| `-OptimizeNoneAttr 0x56430736efe8 <col:30>
|-CXXMethodDecl 0x56430736f038 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56430736f0d8 <col:20>
| `-OptimizeNoneAttr 0x56430736f130 <col:30>
|-CXXMethodDecl 0x56430736f178 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56430736f218 <col:20>
| `-OptimizeNoneAttr 0x56430736f270 <col:30>
|-CXXMethodDecl 0x56430736f2b8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56430736f378 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56430736f440 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56430736f508 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56430736f5c8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56430736f6e8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x564307388f40 <col:54, line:99:5>
|   `-ReturnStmt 0x564307388f30 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x564307388f18 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x564307388ee8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56430737f9c8
|         `-CXXThisExpr 0x564307388ed8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56430736f888 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56430736f798 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x564307388ff0 <col:67, line:103:5>
|   `-BinaryOperator 0x564307388fd0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564307388f68 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56430737f9c8
|     | `-CXXThisExpr 0x564307388f58 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564307388fb8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x564307388f98 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56430736f798 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56430736f980 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x564307389070 <col:33, line:107:5>
|   `-ReturnStmt 0x564307389060 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x564307389048 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x564307389018 <col:16> 'void *' lvalue ->_destructor_argument 0x56430737fa30
|         `-CXXThisExpr 0x564307389008 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56430736fa40 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5643073896a0 <col:25, line:113:5>
|   |-ParenExpr 0x5643073893e8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5643073893b8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x564307389128 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x564307389100 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5643073890c8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x564307389098 <col:24> '<bound member function type>' ->shared 0x56430736eab8
|   |   |       `-ImplicitCastExpr 0x5643073890e8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x564307389088 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x564307389188 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x564307389168 <col:42> 'int' 0
|   |   `-CallExpr 0x564307389318 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x564307389300 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5643073892e0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x564307389358 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5643073891f8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x564307389370 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x564307389220 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x564307389388 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x564307389258 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5643073893a0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5643073892c8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5643073892b0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x564307389278 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5643073895e8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x564307389418 <col:2> 'unsigned char *' lvalue ->_head 0x56430737f7d0
|   | | `-CXXThisExpr 0x564307389408 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5643073895d0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5643073895b0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x564307389458 <col:10> 'unsigned char *' lvalue ->_data 0x56430737f838
|   |     | `-CXXThisExpr 0x564307389448 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x564307389598 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x564307389578 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x564307389498 <col:18> 'unsigned char *' lvalue ->_tail 0x56430737f8a0
|   |         | `-CXXThisExpr 0x564307389488 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x564307389560 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x564307389540 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5643073894d8 <col:26> 'unsigned char *' lvalue ->_end 0x56430737f908
|   |             | `-CXXThisExpr 0x5643073894c8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x564307389528 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x564307389508 <col:33> 'int' 0
|   `-BinaryOperator 0x564307389680 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x564307389618 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56430737f9c8
|     | `-CXXThisExpr 0x564307389608 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x564307389668 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x564307389648 <col:16> 'int' 0
|-CXXMethodDecl 0x56430736fb80 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56430736faf0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56430736fc28 <col:20>
| |-OptimizeNoneAttr 0x56430736fc80 <col:30>
| `-WarnUnusedResultAttr 0x56430736fca8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56430736fd78 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56430736fce8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56430736fe20 <col:20>
| |-OptimizeNoneAttr 0x56430736fe78 <col:30>
| `-WarnUnusedResultAttr 0x56430736fea0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56430736ffd8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56430736fee0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564307370080 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x564307370180 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5643073700f0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564307370228 <col:20>
| `-OptimizeNoneAttr 0x564307370280 <col:30>
|-CXXMethodDecl 0x564307370348 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5643073702b8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5643073703f0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5643073704f0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x564307370460 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x564307370598 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x564307370698 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x564307370608 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564307370740 <col:20>
| `-OptimizeNoneAttr 0x564307370798 <col:30>
|-CXXMethodDecl 0x564307370928 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5643073707d8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x564307370850 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x564307388e98 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5643073709d8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x564307370bd8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564307370a50 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x564307370ac8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307370de8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x564307370c98 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x564307370d10 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307370ff8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x564307370ea8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x564307370f28 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x564307388ea8 <col:39> 'int' 0
|-CXXMethodDecl 0x5643073710c8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x564307371190 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x564307371258 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x564307371318 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5643073713e0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x564307371528 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x564307371498 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5643073716f8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5643073715e8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x564307371660 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5643073717c8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x564307371888 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x564307371928 <col:20>
| `-OptimizeNoneAttr 0x564307371980 <col:30>
|-CXXMethodDecl 0x5643073719d0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x564307371a70 <col:20>
| `-OptimizeNoneAttr 0x564307371ac8 <col:30>
|-CXXMethodDecl 0x564307371b18 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x564307371bd8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564307371ca0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x564307371d40 <col:20>
| `-OptimizeNoneAttr 0x564307371d98 <col:30>
|-CXXMethodDecl 0x564307371ee8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x564307371dd8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x564307371e50 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307372038 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x564307371fa8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307372110 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5643073721d0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x564307372270 <col:20>
| `-OptimizeNoneAttr 0x5643073722c8 <col:30>
|-CXXMethodDecl 0x564307372318 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5643073723b8 <col:20>
| `-OptimizeNoneAttr 0x564307372410 <col:30>
|-CXXMethodDecl 0x564307372460 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x564307372528 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5643073725c8 <col:20>
| `-OptimizeNoneAttr 0x564307372620 <col:30>
|-CXXMethodDecl 0x564307372668 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x564307372788 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5643073728f8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x564307372838 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5643073729e8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x564307372a88 <col:20>
| `-OptimizeNoneAttr 0x564307372ae0 <col:30>
|-CXXMethodDecl 0x564307372b30 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x564307372bf0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x564307372e28 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x564307372ca0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x564307372d18 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x564307372ed8 <col:20>
| `-OptimizeNoneAttr 0x564307372f30 <col:30>
|-CXXMethodDecl 0x564307372fd8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x564307373078 <col:20>
| `-OptimizeNoneAttr 0x5643073730d0 <col:30>
|-CXXMethodDecl 0x564307373120 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5643073731c0 <col:20>
| `-OptimizeNoneAttr 0x564307373218 <col:30>
|-CXXMethodDecl 0x564307373260 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x564307373300 <col:20>
| `-OptimizeNoneAttr 0x564307373358 <col:30>
|-CXXMethodDecl 0x564307373458 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x564307373390 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x564307373500 <col:20>
| `-OptimizeNoneAttr 0x564307373558 <col:30>
|-CXXMethodDecl 0x564307373718 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x564307373590 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x564307373608 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643073737c8 <col:20>
| `-OptimizeNoneAttr 0x564307373820 <col:30>
|-CXXMethodDecl 0x5643073738c8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5643073739e8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x564307373b08 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x564307373ba8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x564307373bd0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x564307373cf8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x564307373d98 <col:20>
| `-OptimizeNoneAttr 0x564307373df0 <col:30>
|-CXXMethodDecl 0x564307373e98 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x564307373f38 <col:20>
| `-OptimizeNoneAttr 0x564307373f90 <col:30>
|-AccessSpecDecl 0x564307373fb8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x564307373fe0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5643073740e0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x564307374130 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5643073740c0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5643073740a0 <col:14> 'int' 48
|-CXXMethodDecl 0x564307374198 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x564307374238 <col:20>
| `-OptimizeNoneAttr 0x564307374290 <col:30>
|-CXXMethodDecl 0x564307374308 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5643073743a8 <col:20>
| `-OptimizeNoneAttr 0x564307374400 <col:30>
|-CXXMethodDecl 0x5643073744c8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x564307374438 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x564307374668 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x564307374808 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x564307374718 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5643073748b0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5643073749b0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564307374d60 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307374990 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x564307374970 <col:9> 'int' 0
| |-EnumConstantDecl 0x564307374a40 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564307374d78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307374a20 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x564307374a00 <col:14> 'int' 1
| |-EnumConstantDecl 0x564307374ad0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564307374d90 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307374ab0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x564307374a90 <col:14> 'int' 2
| |-EnumConstantDecl 0x564307374b60 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564307374da8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307374b40 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x564307374b20 <col:14> 'int' 3
| |-EnumConstantDecl 0x564307374bf0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564307374dc0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307374bd0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x564307374bb0 <col:13> 'int' 4
| |-EnumConstantDecl 0x564307374c80 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x564307374dd8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307374c60 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x564307374c40 <col:13> 'int' 5
| `-EnumConstantDecl 0x564307374d10 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x564307374df0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564307374cf0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x564307374cd0 <col:14> 'int' 6
|-CXXMethodDecl 0x564307374e58 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x564307374ef8 <col:20>
| `-OptimizeNoneAttr 0x564307374f50 <col:30>
|-CXXMethodDecl 0x564307375048 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x564307374f88 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5643073750f0 <col:20>
| `-OptimizeNoneAttr 0x564307375148 <col:30>
|-CXXMethodDecl 0x5643073751b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5643073752e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x564307375458 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x564307375390 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x564307375520 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5643073755e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x564307375728 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x564307375698 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5643073757d0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5643073758d0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564307375ad0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073758b0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x564307375890 <col:23> 'int' 0
| |-EnumConstantDecl 0x564307375960 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564307375ae8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307375940 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x564307375920 <col:45> 'int' 4
| |-EnumConstantDecl 0x5643073759f0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x564307375b00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073759d0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5643073759b0 <col:24> 'int' 0
| `-EnumConstantDecl 0x564307375a80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x564307375b18 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564307375a60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x564307375a40 <col:47> 'int' 16
|-CXXMethodDecl 0x564307375b78 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x564307375ce8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x564307375c28 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x564307375d90 <col:20>
| `-OptimizeNoneAttr 0x564307375de8 <col:30>
|-CXXMethodDecl 0x564307375e38 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5643073897c0 <col:18, col:36>
|   `-ReturnStmt 0x5643073897b0 <col:20, col:33>
|     `-ImplicitCastExpr 0x564307389798 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x564307389778 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x564307389748 <col:27> '<bound member function type>' ->xanno 0x564307373e98
|           `-CXXThisExpr 0x564307389738 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x564307375f30 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5643073898d0 <col:30, col:48>
|   `-ReturnStmt 0x5643073898c0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5643073898a8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x564307389888 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x564307389858 <col:39> '<bound member function type>' ->xanno 0x564307373cf8
|           `-CXXThisExpr 0x564307389848 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x564307376018 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x564307389a68 <col:24, col:50>
|   `-ReturnStmt 0x564307389a58 <col:26, col:47>
|     `-UnaryOperator 0x564307389a40 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564307389a20 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x564307389a08 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5643073899b8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56430737ecd8
|         |   `-CXXMemberCallExpr 0x564307389998 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x564307389968 <col:34> '<bound member function type>' ->xanno 0x564307373e98
|         |       `-CXXThisExpr 0x564307389958 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5643073899e8 <col:46> 'int' 0
|-CXXMethodDecl 0x564307376120 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x564307389c38 <col:36, col:62>
|   `-ReturnStmt 0x564307389c28 <col:38, col:59>
|     `-UnaryOperator 0x564307389c10 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564307389bf0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x564307389bd8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564307389b50 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56430737ecd8
|         |   `-CXXMemberCallExpr 0x564307389b30 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564307389b00 <col:46> '<bound member function type>' ->xanno 0x564307373cf8
|         |       `-CXXThisExpr 0x564307389af0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564307389b80 <col:58> 'int' 0
|-CXXMethodDecl 0x564307376238 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x564307389dd0 <col:26, col:53>
|   `-ReturnStmt 0x564307389dc0 <col:28, col:50>
|     `-UnaryOperator 0x564307389da8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564307389d88 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x564307389d70 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564307389d20 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56430737efd8
|         |   `-CXXMemberCallExpr 0x564307389d00 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x564307389cd0 <col:36> '<bound member function type>' ->xanno 0x564307373e98
|         |       `-CXXThisExpr 0x564307389cc0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x564307389d50 <col:49> 'int' 0
|-CXXMethodDecl 0x564307376358 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x564307389fa8 <col:38, col:65>
|   `-ReturnStmt 0x564307389f98 <col:40, col:62>
|     `-UnaryOperator 0x564307389f80 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x564307389f60 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x564307389f48 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x564307389eb8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56430737efd8
|         |   `-CXXMemberCallExpr 0x564307389e98 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x564307389e68 <col:48> '<bound member function type>' ->xanno 0x564307373cf8
|         |       `-CXXThisExpr 0x564307389e58 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x564307389ee8 <col:61> 'int' 0
|-CXXMethodDecl 0x564307376508 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x564307376410 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56430738a678 <col:34, line:463:5>
|   |-ParenExpr 0x56430738a4c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56430738a490 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56430738a0f8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738a0c8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738a018 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738a000 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x564307389fc0 <col:23> 'int' lvalue ParmVar 0x564307376410 'i' 'int'
|   |   |   | `-IntegerLiteral 0x564307389fe0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738a0a8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738a078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738a038 <col:33> 'int' lvalue ParmVar 0x564307376410 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56430738a090 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56430738a058 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56430738a158 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738a138 <col:56> 'int' 0
|   |   `-CallExpr 0x56430738a3f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56430738a3d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738a3b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738a430 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738a248 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56430738a448 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738a278 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738a460 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738a2b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56430738a478 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738a3a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738a388 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738a348 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56430738a668 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56430738a650 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56430738a630 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56430738a600 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56430738a5b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56430737ecd8
|         |   `-CXXMemberCallExpr 0x56430738a590 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56430738a560 <col:9> '<bound member function type>' ->xanno 0x564307373cf8
|         |       `-CXXThisExpr 0x56430738a550 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56430738a618 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56430738a5e0 <col:21> 'int' lvalue ParmVar 0x564307376410 'i' 'int'
|-CXXMethodDecl 0x564307376758 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5643073765c8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x564307376640 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56430738ad08 <col:40, line:472:5>
|   |-ParenExpr 0x56430738ab20 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56430738aaf0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56430738a7d0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738a7a0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738a6f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738a6d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738a698 <col:23> 'int' lvalue ParmVar 0x5643073765c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738a6b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738a780 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738a750 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738a710 <col:33> 'int' lvalue ParmVar 0x5643073765c8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56430738a768 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56430738a730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56430738a830 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738a810 <col:56> 'int' 0
|   |   `-CallExpr 0x56430738aa50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56430738aa38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738aa18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738aa90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738a8a0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56430738aaa8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738a8d0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738aac0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738a908 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56430738aad8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738aa00 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738a9e8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738a9a8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56430738ace8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56430738ac90 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56430738ac60 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56430738ac10 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56430737ecd8
|     | |   `-CXXMemberCallExpr 0x56430738abf0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56430738abc0 <col:2> '<bound member function type>' ->xanno 0x564307373e98
|     | |       `-CXXThisExpr 0x56430738abb0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56430738ac78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56430738ac40 <col:14> 'int' lvalue ParmVar 0x5643073765c8 'i' 'int'
|     `-ImplicitCastExpr 0x56430738acd0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56430738acb0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x564307376640 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x564307376918 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x564307376820 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56430738b488 <col:36, line:485:5>
|   |-ParenExpr 0x56430738b1f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738b1c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738aea0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738ae70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738ad80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738ad68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738ad28 <col:23> 'int' lvalue ParmVar 0x564307376820 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738ad48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738ae50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738ae38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738ada0 <col:33> 'int' lvalue ParmVar 0x564307376820 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738ae18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738ae00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738adc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738ade0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56430738af00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738aee0 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738b120 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738b108 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738b0e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738b160 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738af70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56430738b178 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738afa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738b190 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738afe0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56430738b1a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738b0d0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738b0b8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738b078 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56430738b478 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56430738b460 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56430738b448 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56430738b418 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56430738b3b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56430738b388 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56430738b300 <col:61, col:70> 'char const[48]' lvalue ->c 0x56430737ebb0
|             |   `-CXXMemberCallExpr 0x56430738b2e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56430738b2b0 <col:61> '<bound member function type>' ->xanno 0x564307373cf8
|             |       `-CXXThisExpr 0x56430738b2a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56430738b3a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56430738b330 <col:74> 'int' lvalue ParmVar 0x564307376820 'i' 'int'
|-CXXMethodDecl 0x564307376b68 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5643073769d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564307376a50 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56430738bbd8 <col:42, line:500:5>
|   |-ParenExpr 0x56430738b970 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738b940 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738b620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738b5f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738b500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738b4e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738b4a8 <col:23> 'int' lvalue ParmVar 0x5643073769d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738b4c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738b5d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738b5b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738b520 <col:33> 'int' lvalue ParmVar 0x5643073769d8 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738b598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738b580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738b540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738b560 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56430738b680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738b660 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738b8a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738b888 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738b868 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738b8e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738b6f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56430738b8f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738b728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738b910 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738b760 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56430738b928 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738b850 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738b838 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738b7f8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56430738bbb8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56430738bb68 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56430738bb38 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56430738bae0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56430738bab0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56430738ba60 <col:48, col:57> 'char [48]' lvalue ->c 0x56430737ebb0
|     |     |   `-CXXMemberCallExpr 0x56430738ba40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56430738ba10 <col:48> '<bound member function type>' ->xanno 0x564307373e98
|     |     |       `-CXXThisExpr 0x56430738ba00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56430738bac8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56430738ba90 <col:61> 'int' lvalue ParmVar 0x5643073769d8 'i' 'int'
|     `-ImplicitCastExpr 0x56430738bba0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56430738bb80 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x564307376a50 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x564307376d28 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x564307376c30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56430738c338 <col:35, line:513:5>
|   |-ParenExpr 0x56430738c048 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738c018 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738bd70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738bd40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738bc50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738bc38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738bbf8 <col:23> 'int' lvalue ParmVar 0x564307376c30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738bc18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738bd20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738bd08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738bc70 <col:33> 'int' lvalue ParmVar 0x564307376c30 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738bce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738bcd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738bc90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738bcb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56430738bdd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738bdb0 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738bf78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738bf60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738bf40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738bfb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738be40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56430738bfd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738be78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738bfe8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738beb0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56430738c000 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738bf28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738bf10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738bed0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56430738c328 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56430738c310 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56430738c2f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56430738c2c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56430738c240 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56430738c210 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56430738c1c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56430737ebb0
|             |   `-CXXMemberCallExpr 0x56430738c1a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56430738c170 <col:60> '<bound member function type>' ->xanno 0x564307373cf8
|             |       `-CXXThisExpr 0x56430738c160 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56430738c228 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56430738c1f0 <col:73> 'int' lvalue ParmVar 0x564307376c30 'i' 'int'
|-CXXMethodDecl 0x564307376f78 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x564307376de8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564307376e60 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56430738ca58 <col:41, line:528:5>
|   |-ParenExpr 0x56430738c7e0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738c7b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738c4d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738c4a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738c3b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738c398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738c358 <col:23> 'int' lvalue ParmVar 0x564307376de8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738c378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738c480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738c468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738c3d0 <col:33> 'int' lvalue ParmVar 0x564307376de8 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738c448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738c430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738c3f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738c410 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56430738c530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738c510 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738c710 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738c6f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738c6d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738c750 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738c5a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56430738c768 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738c5d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738c780 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738c610 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56430738c798 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738c6c0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738c6a8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738c668 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56430738ca38 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56430738c9e8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56430738c9b8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56430738c960 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56430738c920 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56430738c8d0 <col:47, col:56> 'char [48]' lvalue ->c 0x56430737ebb0
|     |     |   `-CXXMemberCallExpr 0x56430738c8b0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56430738c880 <col:47> '<bound member function type>' ->xanno 0x564307373e98
|     |     |       `-CXXThisExpr 0x56430738c870 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56430738c938 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56430738c900 <col:60> 'int' lvalue ParmVar 0x564307376de8 'i' 'int'
|     `-ImplicitCastExpr 0x56430738ca20 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56430738ca00 <col:65> 'int16_t':'short' lvalue ParmVar 0x564307376e60 'x' 'int16_t':'short'
|-CXXMethodDecl 0x564307377138 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x564307377040 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56430738d128 <col:36, line:541:5>
|   |-ParenExpr 0x56430738cec8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738ce98 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738cbf0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738cbc0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738cad0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738cab8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738ca78 <col:23> 'int' lvalue ParmVar 0x564307377040 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738ca98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738cba0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738cb88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738caf0 <col:33> 'int' lvalue ParmVar 0x564307377040 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738cb68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738cb50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738cb10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738cb30 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56430738cc50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738cc30 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738cdf8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738cde0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738cdc0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738ce38 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738ccc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56430738ce50 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738ccf8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738ce68 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738cd30 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56430738ce80 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738cda8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738cd90 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738cd50 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56430738d118 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56430738d100 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56430738d0e8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56430738d0b8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56430738d060 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56430738d030 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56430738cfe0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56430737ebb0
|             |   `-CXXMemberCallExpr 0x56430738cfc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56430738cf90 <col:61> '<bound member function type>' ->xanno 0x564307373cf8
|             |       `-CXXThisExpr 0x56430738cf80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56430738d048 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56430738d010 <col:74> 'int' lvalue ParmVar 0x564307377040 'i' 'int'
|-CXXMethodDecl 0x564307377308 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5643073771f8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x564307377270 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5643073773b8 <col:20>
| `-OptimizeNoneAttr 0x564307377410 <col:30>
|-CXXMethodDecl 0x564307377548 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x564307377450 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56430738d7f8 <col:35, line:562:5>
|   |-ParenExpr 0x56430738d598 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738d568 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738d2c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738d290 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738d1a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738d188 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738d148 <col:23> 'int' lvalue ParmVar 0x564307377450 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738d168 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738d270 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738d258 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738d1c0 <col:33> 'int' lvalue ParmVar 0x564307377450 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738d238 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738d220 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738d1e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738d200 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56430738d320 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738d300 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738d4c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738d4b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738d490 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738d508 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738d390 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56430738d520 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738d3c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738d538 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738d400 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56430738d550 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738d478 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738d460 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738d420 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56430738d7e8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56430738d7d0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56430738d7b8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56430738d788 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56430738d730 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56430738d700 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56430738d6b0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56430737ebb0
|             |   `-CXXMemberCallExpr 0x56430738d690 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56430738d660 <col:60> '<bound member function type>' ->xanno 0x564307373cf8
|             |       `-CXXThisExpr 0x56430738d650 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56430738d718 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56430738d6e0 <col:73> 'int' lvalue ParmVar 0x564307377450 'i' 'int'
|-CXXMethodDecl 0x564307377758 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x564307377608 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564307377680 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56430738ded8 <col:41, line:577:5>
|   |-ParenExpr 0x56430738dc68 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738dc38 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738d990 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738d960 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738d870 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738d858 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738d818 <col:23> 'int' lvalue ParmVar 0x564307377608 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738d838 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738d940 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738d928 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738d890 <col:33> 'int' lvalue ParmVar 0x564307377608 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738d908 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738d8f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738d8b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738d8d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56430738d9f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738d9d0 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738db98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738db80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738db60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738dbd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738da60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56430738dbf0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738da98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738dc08 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738dad0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56430738dc20 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738db48 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738db30 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738daf0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56430738deb8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56430738de68 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56430738de38 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56430738ddd8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56430738dda8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56430738dd58 <col:47, col:56> 'char [48]' lvalue ->c 0x56430737ebb0
|     |     |   `-CXXMemberCallExpr 0x56430738dd38 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56430738dd08 <col:47> '<bound member function type>' ->xanno 0x564307373e98
|     |     |       `-CXXThisExpr 0x56430738dcf8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56430738ddc0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56430738dd88 <col:60> 'int' lvalue ParmVar 0x564307377608 'i' 'int'
|     `-ImplicitCastExpr 0x56430738dea0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56430738de80 <col:65> 'int32_t':'int' lvalue ParmVar 0x564307377680 'x' 'int32_t':'int'
|-CXXMethodDecl 0x564307377918 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x564307377820 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56430738e608 <col:36, line:591:5>
|   |-ParenExpr 0x56430738e348 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738e318 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738e070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738e040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738df50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738df38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738def8 <col:23> 'int' lvalue ParmVar 0x564307377820 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738df18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738e020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738e008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738df70 <col:33> 'int' lvalue ParmVar 0x564307377820 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738dfe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738dfd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738df90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738dfb0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56430738e0d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738e0b0 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738e278 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738e260 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738e240 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738e2b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738e140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56430738e2d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738e178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738e2e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738e1b0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56430738e300 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738e228 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738e210 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738e1d0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56430738e5f8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56430738e5e0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56430738e5c8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56430738e598 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56430738e510 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56430738e4e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56430738e490 <col:61, col:70> 'char const[48]' lvalue ->c 0x56430737ebb0
|             |   `-CXXMemberCallExpr 0x56430738e470 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56430738e440 <col:61> '<bound member function type>' ->xanno 0x564307373cf8
|             |       `-CXXThisExpr 0x56430738e430 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56430738e4f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56430738e4c0 <col:74> 'int' lvalue ParmVar 0x564307377820 'i' 'int'
|-CXXMethodDecl 0x564307377b68 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5643073779d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564307377a50 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56430738ece8 <col:42, line:606:5>
|   |-ParenExpr 0x56430738ea78 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56430738ea48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56430738e7a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738e770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738e680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738e668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738e628 <col:23> 'int' lvalue ParmVar 0x5643073779d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738e648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738e750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56430738e738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738e6a0 <col:33> 'int' lvalue ParmVar 0x5643073779d8 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738e718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738e700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738e6c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56430738e6e0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56430738e800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738e7e0 <col:60> 'int' 0
|   |   `-CallExpr 0x56430738e9a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56430738e990 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738e970 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738e9e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738e870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56430738ea00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738e8a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738ea18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738e8e0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56430738ea30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738e958 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738e940 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738e900 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56430738ecc8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56430738ec78 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56430738ec48 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56430738ebe8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56430738ebb8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56430738eb68 <col:48, col:57> 'char [48]' lvalue ->c 0x56430737ebb0
|     |     |   `-CXXMemberCallExpr 0x56430738eb48 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56430738eb18 <col:48> '<bound member function type>' ->xanno 0x564307373e98
|     |     |       `-CXXThisExpr 0x56430738eb08 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56430738ebd0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56430738eb98 <col:61> 'int' lvalue ParmVar 0x5643073779d8 'i' 'int'
|     `-ImplicitCastExpr 0x56430738ecb0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56430738ec90 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x564307377a50 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x564307377d00 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x564307377c30 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56430738f558 <col:33, line:620:5>
|   |-ParenExpr 0x56430738f2d0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56430738f2a0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56430738eef0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738eec0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738ed60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738ed48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738ed08 <col:23> 'int' lvalue ParmVar 0x564307377c30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738ed28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738eea0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56430738ee88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738ed80 <col:33> 'int' lvalue ParmVar 0x564307377c30 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738ee68 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738ee50 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738eda0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56430738ee28 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56430738ee10 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56430738edd8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56430738ef50 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738ef30 <col:79> 'int' 0
|   |   `-CallExpr 0x56430738f200 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56430738f1e8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738f1c8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738f240 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738f038 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56430738f258 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738f080 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738f270 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738f0b8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56430738f288 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738f1b0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738f198 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738f158 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56430738f548 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56430738f530 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56430738f518 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56430738f4e8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56430738f460 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56430738f430 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56430738f3e0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56430737ebb0
|             |   `-CXXMemberCallExpr 0x56430738f3c0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56430738f390 <col:67> '<bound member function type>' ->xanno 0x564307373cf8
|             |       `-CXXThisExpr 0x56430738f380 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56430738f448 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56430738f410 <col:80> 'int' lvalue ParmVar 0x564307377c30 'i' 'int'
|-CXXMethodDecl 0x564307377f18 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x564307377dc0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x564307377e40 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56430738fd80 <col:45, line:635:5>
|   |-ParenExpr 0x56430738fac8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56430738fa98 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56430738f760 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56430738f730 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56430738f5d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56430738f5b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56430738f578 <col:23> 'int' lvalue ParmVar 0x564307377dc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56430738f598 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56430738f710 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56430738f6f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56430738f5f0 <col:33> 'int' lvalue ParmVar 0x564307377dc0 'i' 'int'
|   |   |     `-BinaryOperator 0x56430738f6d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56430738f6c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56430738f610 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5643073740e0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56430738f698 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56430738f680 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56430738f648 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56430738f7c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56430738f7a0 <col:79> 'int' 0
|   |   `-CallExpr 0x56430738f9f8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56430738f9e0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56430738f9c0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x564306ee09b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56430738fa38 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738f830 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56430738fa50 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56430738f878 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56430738fa68 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56430738f8b0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56430738fa80 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56430738f9a8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56430738f990 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56430738f948 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56430738fd60 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56430738fcc8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56430738fc98 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56430738fc38 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56430738fc08 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56430738fbb8 <col:54, col:63> 'char [48]' lvalue ->c 0x56430737ebb0
|     |     |   `-CXXMemberCallExpr 0x56430738fb98 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56430738fb68 <col:54> '<bound member function type>' ->xanno 0x564307373e98
|     |     |       `-CXXThisExpr 0x56430738fb58 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56430738fc20 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56430738fbe8 <col:67> 'int' lvalue ParmVar 0x564307377dc0 'i' 'int'
|     `-CXXConstCastExpr 0x56430738fd30 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56430738fd18 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56430738fce0 <col:91> 'const void *' lvalue ParmVar 0x564307377e40 'x' 'const void *'
|-CXXMethodDecl 0x564307377fe8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56430738fe08 <col:34, line:640:5>
|   `-ReturnStmt 0x56430738fdf8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56430738fde0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56430738fdb0 <col:16> 'Packet *' lvalue ->_data_packet 0x56430737f768
|         `-CXXThisExpr 0x56430738fda0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x564307378128 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x564307378098 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x564307388ec8 <col:46> 'bool' true
|-CXXMethodDecl 0x5643073782a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5643073781e0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x564307378350 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x564307378b00 <line:660:22> "" ""
| |-EnumConstantDecl 0x564307378450 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378b70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307378430 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x564307378410 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56430736d5b0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5643073784e0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378b88 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073784c0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5643073784a0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56430736d640 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x564307378570 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378ba0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307378550 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x564307378530 <col:21> 'int' 0
| |-EnumConstantDecl 0x564307378600 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378bb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073785e0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5643073785c0 <col:19> 'int' 16
| |-EnumConstantDecl 0x564307378690 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378bd0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307378670 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x564307378650 <col:21> 'int' 16
| |-EnumConstantDecl 0x564307378720 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378be8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307378700 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5643073786e0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5643073787b0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378c00 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307378790 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x564307378770 <col:19> 'int' EnumConstant 0x564307378600 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564307378840 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378c18 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307378820 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x564307378800 <col:19> 'int' EnumConstant 0x564307378720 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x564307378910 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378c30 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073788f0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5643073788d0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564307378890 <col:23> 'int' EnumConstant 0x564307378840 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5643073788b0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5643073789e0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x564307378c48 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5643073789c0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5643073789a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x564307378960 <col:23> 'int' EnumConstant 0x564307378840 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x564307378980 <col:40> 'int' 4
| `-EnumConstantDecl 0x564307378ab0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x564307378c60 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x564307378a90 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x564307378a70 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x564307378a30 <col:23> 'int' EnumConstant 0x564307378840 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x564307378a50 <col:40> 'int' 8
|-CXXMethodDecl 0x564307378ca0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x564307378d40 <col:68> "" ""
|-CXXMethodDecl 0x564307378dd8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x564307378e78 <col:45> "" ""
|-CXXMethodDecl 0x564307378f10 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564307378fb0 <col:57> "" ""
|-CXXMethodDecl 0x564307379048 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5643073790e8 <col:45> "" ""
|-CXXMethodDecl 0x564307379180 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x564307379220 <col:57> "" ""
|-CXXMethodDecl 0x5643073792b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x564307379350 <col:51> "" ""
|-CXXMethodDecl 0x5643073793e0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x564307379480 <col:63> "" ""
|-CXXMethodDecl 0x564307379510 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5643073795b0 <col:53> "" ""
|-CXXMethodDecl 0x564307379640 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5643073796e0 <col:65> "" ""
|-CXXMethodDecl 0x5643073797f8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x564307379768 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5643073798a0 <col:61> "" ""
|-CXXMethodDecl 0x564307379a38 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x564307379928 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5643073799a0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x564307379ae8 <col:67> "" ""
|-CXXMethodDecl 0x564307379c00 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x564307379b70 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x564307379ca8 <col:63> "" ""
|-CXXMethodDecl 0x564307379e40 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x564307379d30 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x564307379da8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x564307379ef0 <col:69> "" ""
|-CXXMethodDecl 0x56430737a008 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x564307379f78 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56430737a0b0 <col:63> "" ""
|-CXXMethodDecl 0x56430737c788 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56430737c678 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56430737c6f0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430737c838 <col:69> "" ""
|-CXXMethodDecl 0x56430737c950 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56430737c8c0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56430737c9f8 <col:62> "" ""
|-CXXMethodDecl 0x56430737cb90 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56430737ca80 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56430737caf8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56430737cc40 <col:68> "" ""
|-CXXMethodDecl 0x56430737cd58 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56430737ccc8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56430737ce00 <col:63> "" ""
|-CXXMethodDecl 0x56430737cf98 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56430737ce88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56430737cf00 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56430737d048 <col:69> "" ""
|-CXXMethodDecl 0x56430737d0d8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56430737d178 <col:64> "" ""
|-CXXMethodDecl 0x56430737d208 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56430737d2a8 <col:52> "" ""
|-CXXMethodDecl 0x56430737d338 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56430737d3d8 <col:67> "" ""
|-CXXMethodDecl 0x56430737d468 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56430737d508 <col:55> "" ""
|-CXXMethodDecl 0x56430737d620 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56430737d590 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56430737d6c8 <col:58> "" ""
|-CXXMethodDecl 0x56430737d860 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56430737d750 <col:33> col:36 'int'
| |-ParmVarDecl 0x56430737d7c8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56430737d910 <col:62> "" ""
|-CXXMethodDecl 0x56430737da28 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56430737d998 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56430737dad0 <col:58> "" ""
|-CXXMethodDecl 0x56430737dc68 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56430737db58 <col:33> col:36 'int'
| |-ParmVarDecl 0x56430737dbd0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56430737dd18 <col:62> "" ""
|-CXXMethodDecl 0x56430737de30 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56430737dda0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56430737ded8 <col:60> "" ""
|-CXXMethodDecl 0x56430737e070 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56430737df60 <col:34> col:37 'int'
| |-ParmVarDecl 0x56430737dfd8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56430737e120 <col:64> "" ""
|-CXXMethodDecl 0x56430737e238 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56430737e1a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56430737e2e0 <col:58> "" ""
|-CXXMethodDecl 0x56430737e478 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56430737e368 <col:33> col:36 'int'
| |-ParmVarDecl 0x56430737e3e0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56430737e528 <col:62> "" ""
|-CXXMethodDecl 0x56430737e640 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56430737e5b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56430737e6e8 <col:59> "" ""
|-CXXMethodDecl 0x56430737e880 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56430737e770 <col:33> col:36 'int'
| |-ParmVarDecl 0x56430737e7e8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430737e930 <col:63> "" ""
|-AccessSpecDecl 0x56430737e9a0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56430737e9c8 prev 0x564307373bd0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56430737eac0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56430737ebb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56430737ecd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56430737ee58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56430737efd8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56430737f158 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56430738ff88 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5643073907f8 <col:11>
| |-CXXDestructorDecl 0x564307390060 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x564307390198 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x564307390198
| | `-ParmVarDecl 0x5643073902a8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x564307390348 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564307390348
| | `-ParmVarDecl 0x564307390458 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x564307393218 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x564307393328 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5643073935a8 <col:11>
| |   `-ReturnStmt 0x564307393598 <col:11>
| |     `-UnaryOperator 0x564307393580 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x564307393570 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x564307393398 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x564307393398
|   `-ParmVarDecl 0x5643073934a8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56430737f1c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56430737f2d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56430737f378 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56430737f3e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56430737f448 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56430737f4b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56430737f510 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56430737f5d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56430737f630 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56430737f690 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56430738fe98 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56430737f378 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x564307390808 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x564307390860 <col:12>
| |-CXXConstructorDecl 0x5643073904c8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5643073904c8
| | `-ParmVarDecl 0x5643073905d8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x564307390678 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x564307390678
| | `-ParmVarDecl 0x564307390788 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x564307392900 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56430737f708 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56430737f768 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56430737f7d0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56430737f838 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56430737f8a0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56430737f908 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56430737f968 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56430737f9c8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56430737fa30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56430737fab8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56430737f708 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56430738fe30 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56430737f968 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x564307390870 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5643073908d0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56430737fc58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56430737fb98 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56430737fd50 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56430737ff38 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56430737fe40 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x564307380208 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56430737fff0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x564307380068 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5643073800e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307380428 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5643073802d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x564307380350 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x564307388a08 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5643073804e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x564307380560 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5643073805d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x564307388b60 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564307388ad0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x564307388ca8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x564307388c18 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x564307388da0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430753d170 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430753d288 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x56430753d318 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x56430753d558 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x56430753d350 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x56430753d3d0 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x56430753d448 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56430753d770 <col:81> 'const ArgContext' lvalue Var 0x56430751edc8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x56430753d6b0 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x56430753d620 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x56430753d8c8 <col:35, line:1261:5>
|   `-ReturnStmt 0x56430753d8b8 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x56430753d8a0 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x56430753d870 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56430753d858 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x56430753d830 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x56430753d810 <col:16, col:24> 'String' (CXXTemporary 0x56430753d810)
|               `-CXXConstructExpr 0x56430753d7d8 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x56430753d7c0 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x56430753d7a0 <col:23> 'bool' lvalue ParmVar 0x56430753d620 'x' 'bool'
|-CXXConstructorDecl 0x56430754e518 <line:1257:7> col:7 implicit referenced constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56430754e618 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x56430754e618
| `-ParmVarDecl 0x56430754e728 <col:7> col:7 'const BoolArg &'
|-CXXConstructorDecl 0x56430754e7c8 <col:7> col:7 implicit constexpr BoolArg 'void (BoolArg &&)' inline default trivial noexcept-unevaluated 0x56430754e7c8
| `-ParmVarDecl 0x564307578140 <col:7> col:7 'BoolArg &&'
`-CXXDestructorDecl 0x5643075781e0 <col:7> col:7 implicit referenced ~BoolArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430732d378 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56430732d4a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x56430732df98 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307329c78 prev 0x5643073a5f50 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x564307329d70 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x564307329e00 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x564307329e60 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x564307329f08 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x56430732a028 <col:5, col:12> col:12 implicit struct do_nothing_t
|-CXXConstructorDecl 0x56430732a1c8 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x56430732a108 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x56430732a418 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x56430732a288 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x56430732a308 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x56430732a570 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x56430732a4e0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x56430732a6f8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x56430732a630 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x56430732a8a8 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x56430732a7e8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x56430732a9a0 <line:55:5, line:58:5> line:55:12 ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x56430732e170 <col:21, line:58:5>
|   `-IfStmt 0x56430732e158 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x56430732e0c0 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x56430732e090 <col:6> '<bound member function type>' ->scheduled 0x56430732b1f8
|     |   `-ImplicitCastExpr 0x56430732e0e0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x56430732e080 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x56430732e138 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x56430732e108 <col:6> '<bound member function type>' ->unschedule 0x56430732c820
|         `-CXXThisExpr 0x56430732e0f8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x56430732aaa0 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x56430732e310 <col:26, line:65:5>
|   |-BinaryOperator 0x56430732e230 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56430732e1c8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56430732d4a8
|   | | `-MemberExpr 0x56430732e198 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56430732d568
|   | |   `-CXXThisExpr 0x56430732e188 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56430732e218 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56430732e1f8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56430732d9c8 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56430732e2f0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x56430732e260 <col:2> 'void *' lvalue ->_thunk 0x56430732d5e8
|     | `-CXXThisExpr 0x56430732e250 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x56430732e2c8 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x56430732e290 <col:20> 'int' 1
|-CXXMethodDecl 0x56430732abe0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x56430732ab50 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x56430732e470 <col:52, line:71:5>
|   |-CStyleCastExpr 0x56430732e360 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56430732e330 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x56430732ab50 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x56430732e450 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x56430732e420 <col:2> '<bound member function type>' ->assign 0x56430732aaa0
|       `-CXXThisExpr 0x56430732e410 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x56430732adb0 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x56430732ac98 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x56430732ad18 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5643073de950 <col:58, line:79:5>
|   |-BinaryOperator 0x5643073de898 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5643073de830 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56430732d4a8
|   | | `-MemberExpr 0x56430732e4a0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56430732d568
|   | |   `-CXXThisExpr 0x56430732e490 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5643073de880 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5643073de860 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x56430732ac98 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x5643073de930 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5643073de8c8 <col:2> 'void *' lvalue ->_thunk 0x56430732d5e8
|     | `-CXXThisExpr 0x5643073de8b8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5643073de918 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x5643073de8f8 <col:11> 'void *' lvalue ParmVar 0x56430732ad18 'user_data' 'void *'
|-CXXMethodDecl 0x56430732af00 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x56430732ae70 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x5643073deae8 <col:35, line:87:5>
|   |-BinaryOperator 0x5643073dea18 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5643073de9b0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56430732d4a8
|   | | `-MemberExpr 0x5643073de980 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56430732d568
|   | |   `-CXXThisExpr 0x5643073de970 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5643073dea00 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5643073de9e0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56430732dba0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5643073deac8 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5643073dea48 <col:2> 'void *' lvalue ->_thunk 0x56430732d5e8
|     | `-CXXThisExpr 0x5643073dea38 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5643073deab0 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5643073dea98 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5643073dea78 <col:11> 'Element *' lvalue ParmVar 0x56430732ae70 'element' 'Element *'
|-CXXMethodDecl 0x56430732b048 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x56430732afb8 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x5643073dec80 <col:29, line:94:5>
|   |-BinaryOperator 0x5643073debb0 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5643073deb48 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56430732d4a8
|   | | `-MemberExpr 0x5643073deb18 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56430732d568
|   | |   `-CXXThisExpr 0x5643073deb08 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5643073deb98 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5643073deb78 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56430732dd78 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5643073dec60 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5643073debe0 <col:2> 'void *' lvalue ->_thunk 0x56430732d5e8
|     | `-CXXThisExpr 0x5643073debd0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x5643073dec48 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5643073dec30 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x5643073dec10 <col:11> 'Task *' lvalue ParmVar 0x56430732afb8 'task' 'Task *'
|-CXXMethodDecl 0x56430732b138 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5643073ded60 <col:37, line:100:5>
|   `-ReturnStmt 0x5643073ded50 <line:99:2, col:19>
|     `-BinaryOperator 0x5643073ded30 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x5643073ded00 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x5643073decb0 <col:9> 'Element *const' lvalue ->_owner 0x56430732d648
|       |   `-CXXThisExpr 0x5643073deca0 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x5643073ded18 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x5643073dece0 <col:19> 'int' 0
|-CXXMethodDecl 0x56430732b1f8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x5643073dee20 <col:35, line:105:5>
|   `-ReturnStmt 0x5643073dee10 <line:104:2, col:23>
|     `-BinaryOperator 0x5643073dedf0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x5643073dedd8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x5643073ded88 <col:9> 'const int' lvalue ->_schedpos1 0x56430732d2c8
|       |   `-CXXThisExpr 0x5643073ded78 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x5643073dedb8 <col:23> 'int' 0
|-CXXMethodDecl 0x56430732b2b8 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x5643073dee88 <col:51, line:118:5>
|   `-ReturnStmt 0x5643073dee78 <line:117:2, col:9>
|     `-MemberExpr 0x5643073dee48 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x56430732d328
|       `-CXXThisExpr 0x5643073dee38 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56430732b378 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x5643073df3e0 <col:37, line:136:5>
|   `-IfStmt 0x5643073df3b8 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x5643073def48 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x5643073def30 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x5643073def10 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x5643073deee0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x564307338028
|     |       `-MemberExpr 0x5643073deeb0 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x56430732d328
|     |         `-CXXThisExpr 0x5643073deea0 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x5643073df328 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x5643073df310 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x5643073df2e0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x5643073df2c8 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5643073df290 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5643073df278 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5643073df258 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x564307366800 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x5643073df1f8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x5643073df1e0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x5643073df108 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x5643073df0f0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x5643073df0d0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5643073664c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x5643073df070 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x5643073def70 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56430732d328
|     |         |     |   `-CXXThisExpr 0x5643073def60 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x5643073df0b8 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x5643073df0a0 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x5643073df050 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x5643073df038 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x5643073defd8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x564307359b20 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5643073df240 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x5643073df228 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x5643073df1c0 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x5643073df1a8 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x5643073df178 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5643071b5070 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x5643073df3a8 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5643073df378 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5643073df348 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56430732d328
|           `-CXXThisExpr 0x5643073df338 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x56430732b438 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x5643073df4c8 <col:35, line:141:5>
|   `-ReturnStmt 0x5643073df4b8 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5643073df480 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5643073df450 <col:9, col:17> '<bound member function type>' ->router 0x5643073b86b0
|         `-ImplicitCastExpr 0x5643073df4a0 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x5643073df438 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x5643073df408 <col:9> 'Element *const' lvalue ->_owner 0x56430732d648
|               `-CXXThisExpr 0x5643073df3f8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56430732b4f8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5643073df548 <col:37, line:146:5>
|   `-ReturnStmt 0x5643073df538 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x5643073df520 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5643073df4f0 <col:9> 'Element *const' lvalue ->_owner 0x56430732d648
|         `-CXXThisExpr 0x5643073df4e0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56430732b5b8 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x5643073df5c8 <col:41, line:151:5>
|   `-ReturnStmt 0x5643073df5b8 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x5643073df5a0 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5643073df570 <col:9> 'RouterThread *const' lvalue ->_thread 0x56430732d6a8
|         `-CXXThisExpr 0x5643073df560 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56430732b680 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x56430732b840 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56430732b730 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56430732b7a8 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56430732df88 <col:50> 'bool' false
|-CXXMethodDecl 0x56430732b9c8 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x56430732b900 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x56430732bb10 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56430732ba80 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56430732bc58 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56430732bbc8 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56430732bda0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56430732bd10 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x56430732bee8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56430732be58 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x56430732bfb0 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x5643073df730 <col:32, line:223:5>
|   `-ExprWithCleanups 0x5643073df718 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x5643073df6c0 <col:2, col:47> 'void'
|       |-MemberExpr 0x5643073df5f0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56430732bb10
|       | `-CXXThisExpr 0x5643073df5e0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073df700 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5643073df6e8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5643073df6a0 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5643073df688 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5643073df658 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5643071b5070 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x56430732c0f0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x56430732c060 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x56430732c238 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732c1a8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073df8b8 <col:56, line:241:5>
|   `-ExprWithCleanups 0x5643073df8a0 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5643073df848 <col:2, col:40> 'void'
|       |-MemberExpr 0x5643073df758 <col:2> '<bound member function type>' ->schedule_after 0x56430732c0f0
|       | `-CXXThisExpr 0x5643073df748 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073df888 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5643073df870 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5643073df808 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x5643073df7d8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5643073df798 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430732c1a8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x5643073df7f0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x5643073df7b8 <col:38> 'int' 0
|-CXXMethodDecl 0x56430732c380 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732c2f0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073dfb28 <col:58, line:249:5>
|   `-ExprWithCleanups 0x5643073dfb10 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x5643073dfab8 <col:2, col:49> 'void'
|       |-MemberExpr 0x5643073df8e0 <col:2> '<bound member function type>' ->schedule_after 0x56430732c0f0
|       | `-CXXThisExpr 0x5643073df8d0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073dfaf8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5643073dfae0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5643073dfa60 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5643073dfa48 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5643073df9b8 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x564307339e18 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5643073dfaa0 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5643073dfa88 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5643073df998 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430732c2f0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430732c4c8 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x56430732c438 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x5643073dfd08 <col:58, line:261:5>
|   `-ExprWithCleanups 0x5643073dfcf0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x5643073dfc98 <col:2, col:38> 'void'
|       |-MemberExpr 0x5643073dfb50 <col:2> '<bound member function type>' ->schedule_at_steady 0x56430732bb10
|       | `-CXXThisExpr 0x5643073dfb40 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073dfcd8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5643073dfcc0 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5643073dfc60 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5643073dfc48 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5643073dfc28 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5643073664c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5643073dfbf8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5643073dfbe0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5643073dfb90 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56430732d328
|             |     `-CXXThisExpr 0x5643073dfb80 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x5643073dfbc0 <col:33> 'const Timestamp' lvalue ParmVar 0x56430732c438 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x56430732c610 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732c580 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073dffe0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x5643073dffc8 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x5643073dff70 <col:2, col:79> 'void'
|       |-MemberExpr 0x5643073dfd30 <col:2> '<bound member function type>' ->schedule_at_steady 0x56430732bb10
|       | `-CXXThisExpr 0x5643073dfd20 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073dffb0 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5643073dff98 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x5643073dff30 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x5643073dfe68 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x5643073dfe50 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x5643073dfde0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x5643073dfdb0 <col:31, col:41> '<bound member function type>' .sec 0x5643071b6b68
|             | |     `-ImplicitCastExpr 0x5643073dfe00 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x5643073dfd80 <col:31> 'Timestamp' lvalue ->_expiry_s 0x56430732d328
|             | |         `-CXXThisExpr 0x5643073dfd70 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x5643073dfe38 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x5643073dfe18 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430732c580 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x5643073dfef8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x5643073dfec8 <col:60, col:70> '<bound member function type>' .subsec 0x5643071b7260
|                 `-ImplicitCastExpr 0x5643073dff18 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x5643073dfe98 <col:60> 'Timestamp' lvalue ->_expiry_s 0x56430732d328
|                     `-CXXThisExpr 0x5643073dfe88 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x56430732c758 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732c6c8 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x5643073e0318 <col:60, line:279:5>
|   `-ExprWithCleanups 0x5643073e0300 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x5643073e02a8 <col:2, col:65> 'void'
|       |-MemberExpr 0x5643073e0008 <col:2> '<bound member function type>' ->schedule_at_steady 0x56430732bb10
|       | `-CXXThisExpr 0x5643073dfff8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073e02e8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5643073e02d0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5643073e0270 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5643073e0258 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5643073e0238 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x5643073664c0 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x5643073e01d8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x5643073e01c0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5643073e0048 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56430732d328
|             |     `-CXXThisExpr 0x5643073e0038 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x5643073e0220 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x5643073e0208 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x5643073e0168 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x5643073e0150 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x5643073e0120 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x564307339e18 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x5643073e01a8 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x5643073e0190 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x5643073e0100 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x56430732c6c8 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56430732c820 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x56430732c8e0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x5643073e07e0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5643073e0370 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5643073e0340 <col:2> '<bound member function type>' ->unschedule 0x56430732c820
|   |   `-CXXThisExpr 0x5643073e0330 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x5643073e07c8 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5643073e0790 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5643073e0778 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5643073e0428 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56430704e108 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x5643073e03a0 <col:2> 'Timestamp' lvalue ->_expiry_s 0x56430732d328
|       | `-CXXThisExpr 0x5643073e0390 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5643073e0410 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x5643073e03e0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56430732c9a0 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x5643073e0b38 <col:42, line:310:5>
|   |-IfStmt 0x5643073e0980 <line:306:2, line:307:23>
|   | |-CallExpr 0x5643073e08b0 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5643073e0898 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x5643073e0838 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x564307357f90 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5643073e0970 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5643073e0958 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x5643073e0928 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x5643073e0910 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x5643073e08e0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x5643073e0b28 <line:309:2, col:33>
|     `-ExprWithCleanups 0x5643073e0b10 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x5643073e0ae0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x5643073e0ac8 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5643073e0a88 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5643073e0a70 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5643073e0a40 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56430733a130 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x5643073e0ab0 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x5643073e0a20 <col:30> 'int' 500
|-CXXMethodDecl 0x56430732cae0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732ca50 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430732cb88 <col:69> "" ""
|-CXXMethodDecl 0x56430732cc98 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732cc08 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430732cd40 <col:70> "" ""
|-CXXMethodDecl 0x56430732ce50 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732cdc0 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430732cef8 <col:71> "" ""
|-CXXMethodDecl 0x56430732d008 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56430732cf78 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56430732d0b0 <col:72> "" ""
|-EnumDecl 0x56430732d120 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x56430732d220 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x56430732d270 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56430732d200 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x56430732d1e0 <col:25> 'int' 1
|-AccessSpecDecl 0x56430732d288 <line:339:3, col:10> col:3 private
|-FieldDecl 0x56430732d2c8 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x56430732d328 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x56430732d378 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56430732d4a8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x56430732df98 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x56430732d568 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x56430732d5e8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56430732d648 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x56430732d6a8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x56430732d7f8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x56430732d708 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x56430732d9c8 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56430732d8b0 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x56430732d930 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x56430732dba0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56430732da88 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x56430732db08 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x56430732dd78 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56430732dc60 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x56430732dce0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x56430732df48 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5643073e58c0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x564307579f68 <line:167:18>
|-CXXRecordDecl 0x56430757a028 prev 0x5643073e58c0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x56430757a138 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class Notifier
         0 |   (Notifier vtable pointer)
         8 |   class NotifierSignal _signal
         8 |     union NotifierSignal::vmvalue _v
         8 |       class atomic_uint32_t * v1
         8 |       struct NotifierSignal::vmpair * vm
        16 |     uint32_t _mask
        24 |   enum Notifier::SearchOp _search_op
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x564307460948 <../dummy_inc/click/notifier.hh:73:1, line:130:1> line:73:7 referenced class Notifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x564307460a68 <col:1, col:7> col:7 implicit referenced class Notifier
|-AccessSpecDecl 0x564307460af8 <col:18, col:24> col:18 public
|-EnumDecl 0x564307460b20 <line:75:5, col:76> col:10 referenced SearchOp
| |-EnumConstantDecl 0x564307460c20 <col:21, col:35> col:21 referenced SEARCH_STOP 'Notifier::SearchOp'
| | `-ImplicitCastExpr 0x564307460d10 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x564307460c00 <col:35> 'int' Int: 0
| |     `-IntegerLiteral 0x564307460be0 <col:35> 'int' 0
| |-EnumConstantDecl 0x564307460c70 <col:38> col:38 SEARCH_CONTINUE 'Notifier::SearchOp'
| `-EnumConstantDecl 0x564307460cc0 <col:55> col:55 SEARCH_CONTINUE_WAKE 'Notifier::SearchOp'
|-TypedefDecl 0x564307460f58 <line:76:5, col:53> col:20 referenced callback_type 'void (*)(void *, Notifier *)'
| `-PointerType 0x564307460ef0 'void (*)(void *, Notifier *)'
|   `-ParenType 0x564307460e90 'void (void *, Notifier *)' sugar
|     `-FunctionProtoType 0x564307460e50 'void (void *, Notifier *)' cdecl
|       |-BuiltinType 0x564306e414e0 'void'
|       |-PointerType 0x564306e41ce0 'void *'
|       | `-BuiltinType 0x564306e414e0 'void'
|       `-PointerType 0x564307460db0 'Notifier *'
|         `-RecordType 0x5643074609e0 'Notifier'
|           `-CXXRecord 0x564307460948 'Notifier'
|-CXXConstructorDecl 0x564307461098 <line:78:5, col:46> col:12 Notifier 'void (Notifier::SearchOp)' inline
| `-ParmVarDecl 0x564307460fc0 <col:21, col:35> col:30 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x564307465e38 <col:35> 'Notifier::SearchOp' EnumConstant 0x564307460c20 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXConstructorDecl 0x5643074612a8 <line:79:5, col:76> col:12 Notifier 'void (const NotifierSignal &, Notifier::SearchOp)' inline
| |-ParmVarDecl 0x564307461158 <col:21, col:43> col:43 signal 'const NotifierSignal &'
| `-ParmVarDecl 0x5643074611d0 <col:51, col:65> col:60 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x564307465e58 <col:65> 'Notifier::SearchOp' EnumConstant 0x564307460c20 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x5643074613a8 <line:80:5, col:23> col:13 ~Notifier 'void () noexcept' virtual
|-CXXMethodDecl 0x5643074614d8 <line:83:5, line:85:5> line:83:17 initialized 'bool () const' inline
| `-CompoundStmt 0x564307465f18 <col:37, line:85:5>
|   `-ReturnStmt 0x564307465f08 <line:84:2, col:29>
|     `-CXXMemberCallExpr 0x564307465ee8 <col:9, col:29> 'bool'
|       `-MemberExpr 0x564307465eb8 <col:9, col:17> '<bound member function type>' .initialized 0x56430745ebe0
|         `-MemberExpr 0x564307465e88 <col:9> 'const NotifierSignal' lvalue ->_signal 0x564307465858
|           `-CXXThisExpr 0x564307465e78 <col:9> 'const Notifier *' implicit this
|-CXXMethodDecl 0x5643074616e0 <line:87:5, col:52> col:9 initialize 'int (const char *, Router *)'
| |-ParmVarDecl 0x564307461590 <col:20, col:32> col:32 name 'const char *'
| `-ParmVarDecl 0x564307461608 <col:38, col:46> col:46 router 'Router *'
|-CXXMethodDecl 0x5643074617d8 <line:89:5, col:43> col:34 signal 'const NotifierSignal &() const' inline
|-CXXMethodDecl 0x5643074618c8 <line:90:5, col:33> col:21 search_op 'Notifier::SearchOp () const' inline
|-CXXMethodDecl 0x564307461988 <line:92:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x564307461ac8 <line:94:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x564307461a38 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x564307461b90 <line:95:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x564307462a60 <line:96:5, col:23> col:17 sleep 'void ()' inline
|-CXXMethodDecl 0x564307462cd0 <line:98:5, col:71> col:17 used add_activate_callback 'int (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x564307462b30 <col:39, col:53> col:53 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x564307462bb0 <col:56, col:62> col:62 user_data 'void *'
|-CXXMethodDecl 0x564307462f28 <line:99:5, col:75> col:18 used remove_activate_callback 'void (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x564307462d90 <col:43, col:57> col:57 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x564307462e10 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x5643074630b0 <line:100:5, col:39> col:16 add_listener 'int (Task *)' inline
| `-ParmVarDecl 0x564307462fe8 <col:29, col:35> col:35 task 'Task *'
|-CXXMethodDecl 0x5643074631f8 <line:101:5, col:43> col:17 remove_listener 'void (Task *)' inline
| `-ParmVarDecl 0x564307463168 <col:33, col:39> col:39 task 'Task *'
|-CXXMethodDecl 0x564307463380 <line:102:5, col:59> col:16 add_dependent_signal 'int (NotifierSignal *)' inline
| `-ParmVarDecl 0x5643074632b0 <col:37, col:53> col:53 signal 'NotifierSignal *'
|-CXXMethodDecl 0x5643074634f8 <line:103:5, col:63> col:17 remove_dependent_signal 'void (NotifierSignal *)' inline
| `-ParmVarDecl 0x564307463438 <col:41, col:57> col:57 signal 'NotifierSignal *'
|-VarDecl 0x5643074635c0 <line:105:5, col:38> col:23 EMPTY_NOTIFIER 'const char []' static
|-VarDecl 0x564307463648 <line:106:5, col:37> col:23 FULL_NOTIFIER 'const char []' static
|-CXXMethodDecl 0x564307463818 <line:108:5, col:76> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x5643074636c0 <col:56, col:65> col:65 e 'Element *'
| `-ParmVarDecl 0x564307463740 <col:68, col:72> col:72 port 'int'
|-CXXMethodDecl 0x564307463ab8 <line:109:5, col:88> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x5643074638d8 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x564307463958 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x5643074639d0 <col:78, col:84> col:84 task 'Task *'
|-CXXMethodDecl 0x564307463d58 <line:110:5, col:106> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x564307463b80 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x564307463c00 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x564307463c78 <col:78, col:88> col:88 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x5643074640d8 <line:111:5, col:103> col:27 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x564307463e20 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x564307463ea0 <col:61, col:65> col:65 port 'int'
| |-ParmVarDecl 0x564307463f18 <col:71, col:85> col:85 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x564307463f98 <col:88, col:94> col:94 user_data 'void *'
|-CXXMethodDecl 0x5643074642c0 <line:113:5, col:77> col:34 used downstream_full_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x5643074641a8 <col:57, col:66> col:66 e 'Element *'
| `-ParmVarDecl 0x564307464228 <col:69, col:73> col:73 port 'int'
|-CXXMethodDecl 0x564307464518 <line:114:5, col:89> col:34 downstream_full_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x564307464380 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x564307464400 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x564307464478 <col:79, col:85> col:85 task 'Task *'
|-CXXMethodDecl 0x564307464778 <line:115:5, col:107> col:34 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x5643074645e0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x564307464660 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x5643074646d8 <col:79, col:89> col:89 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x564307464a60 <line:116:5, col:104> col:27 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x564307464840 <col:50, col:59> col:59 e 'Element *'
| |-ParmVarDecl 0x5643074648c0 <col:62, col:66> col:66 port 'int'
| |-ParmVarDecl 0x564307464938 <col:72, col:86> col:86 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5643074649b8 <col:89, col:95> col:95 user_data 'void *'
|-CXXMethodDecl 0x564307464d18 <line:118:5, col:109> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x564307464b30 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x564307464bb0 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x564307464c30 <col:78> col:81 'int'
| `-DeprecatedAttr 0x564307464dd0 <col:98> "" ""
|-CXXMethodDecl 0x5643074650b8 <line:119:5, col:121> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x564307464e50 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x564307464ed0 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x564307464f50 <col:78> col:81 'int'
| |-ParmVarDecl 0x564307464fc8 <col:83, col:92> col:93 'Notifier *'
| `-DeprecatedAttr 0x564307465178 <col:110> "" ""
|-CXXMethodDecl 0x564307465398 <line:120:5, col:110> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x5643074651f8 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x564307465278 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x5643074652f8 <col:79> col:82 'int'
| `-DeprecatedAttr 0x564307465450 <col:99> "" ""
|-CXXMethodDecl 0x5643074656f0 <line:121:5, col:122> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x5643074654d0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x564307465550 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x5643074655d0 <col:79> col:82 'int'
| |-ParmVarDecl 0x564307465648 <col:84, col:93> col:94 'Notifier *'
| `-DeprecatedAttr 0x5643074657b0 <col:111> "" ""
|-AccessSpecDecl 0x564307465820 <line:123:3, col:10> col:3 private
|-FieldDecl 0x564307465858 <line:125:5, col:20> col:20 referenced _signal 'NotifierSignal'
|-FieldDecl 0x5643074658b8 <line:126:5, col:14> col:14 referenced _search_op 'Notifier::SearchOp'
|-CXXMethodDecl 0x564307465a30 <line:128:5, col:61> col:17 used dependent_signal_callback 'void (void *, Notifier *)' static
| |-ParmVarDecl 0x564307465920 <col:43, col:48> col:49 'void *'
| `-ParmVarDecl 0x564307465998 <col:51, col:60> col:61 'Notifier *'
|-CXXConstructorDecl 0x564307465b08 <line:73:7> col:7 implicit Notifier 'void (const Notifier &)' inline default noexcept-unevaluated 0x564307465b08
| `-ParmVarDecl 0x564307465c18 <col:7> col:7 'const Notifier &'
`-CXXMethodDecl 0x564307465cb8 <col:7> col:7 implicit operator= 'Notifier &(const Notifier &)' inline default noexcept-unevaluated 0x564307465cb8
  `-ParmVarDecl 0x564307465dc8 <col:7> col:7 'const Notifier &'

Layout: <CGRecordLayout
  LLVMType:%class.Notifier = type <{ i32 (...)**, %class.NotifierSignal, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Notifier.base = type <{ i32 (...)**, %class.NotifierSignal, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56430753d908 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x56430753db68 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x564307599008 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x564307599108 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x564307599108
| `-ParmVarDecl 0x564307599218 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5643075992b8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5643075993c8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x564307599d00 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x564307599cd0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x564307599ca0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x564307599c70 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5643075993c8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x564307599d70 <col:19>
`-CXXDestructorDecl 0x564307599468 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430735ad10 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56430735ae28 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56430735aeb8 <col:16, col:22> col:16 public
|-EnumDecl 0x56430735aee0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56430735afe0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56430735b230 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430735afc0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56430735afa0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56430735b070 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56430735b248 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430735b050 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56430735b030 <col:24> 'int' 22
| |-EnumConstantDecl 0x56430735b100 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56430735b260 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430735b0e0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56430735b0c0 <col:24> 'int' 34
| |-EnumConstantDecl 0x56430735b190 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56430735b278 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56430735b170 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56430735b150 <col:25> 'int' 95
| `-EnumConstantDecl 0x56430735b1e0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56430735cbf0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56430735d028 <col:7>
|-CXXConstructorDecl 0x56430735ccf8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56430735ccf8
| `-ParmVarDecl 0x56430735ce08 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56430735cea8 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56430735cfb8 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5643075a32c0 <col:7>
`-CXXDestructorDecl 0x56430735f128 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56430735b2a8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56430735b408 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56430735b498 <col:32, col:38> col:32 public
|-TypedefDecl 0x56430735b4d0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x564306f99f00 'uint32_t' sugar
|   |-Typedef 0x564306eaa4c8 'uint32_t'
|   `-TypedefType 0x564306e835a0 '__uint32_t' sugar
|     |-Typedef 0x564306e83198 '__uint32_t'
|     `-BuiltinType 0x564306e41620 'unsigned int'
|-CXXConstructorDecl 0x56430735b618 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56430735b540 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56430735caf8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56430735d038 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56430735c3b0 'base' 'int'
| | `-ImplicitCastExpr 0x56430735cb98 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56430735cb58 <col:16> 'int' lvalue ParmVar 0x56430735b540 'b' 'int'
| `-CompoundStmt 0x56430735d0a8 <col:19, line:1046:5>
|-CXXMethodDecl 0x56430735bb10 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56430735b6e0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56430735b760 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56430735b7d8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56430735b858 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56430735b918 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56430735b998 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56430735bf68 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56430735bbe0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56430735bec8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56430735bc88 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x56430735bd28 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x56430735bda0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56430735cb18 <col:82> 'const ArgContext' lvalue Var 0x56430751edc8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56430735dfd8 <col:94, line:1067:5>
| |   |-DeclStmt 0x56430735d238 <line:1054:9, col:64>
| |   | `-VarDecl 0x56430735d0c8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x56430735d1f0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x56430735d458 <line:1055:9, col:91>
| |   | `-VarDecl 0x56430735d268 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x56430735d430 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x56430735d410 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x56430735d3c0 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x56430735d3a0 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x56430735d348 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x56430735d2f8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x56430735d328 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x56430735d388 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x56430735d368 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x56430735d3f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x56430735d5b8 <line:1056:9, col:27>
| |   | `-VarDecl 0x56430735d550 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x56430735da08 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x56430735d938 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x56430735d8b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x564307471c60 0x564307363ee8 0x5643071ad4c8 0x5643071ad1a0 0x56430719d970 0x56430719d620 0x56430719cf10 0x56430716f880 0x5643070fcd50
| |   | | |-CallExpr 0x56430735d7f0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x56430735d5e0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x56430735d690 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56430735d660 <col:19, col:23> '<bound member function type>' .begin 0x56430718cb78
| |   | | | |   `-DeclRefExpr 0x56430735d640 <col:19> 'const String' lvalue ParmVar 0x56430735bc88 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x56430735d700 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x56430735d6d0 <col:32, col:36> '<bound member function type>' .end 0x56430718cd90
| |   | | | |   `-DeclRefExpr 0x56430735d6b0 <col:32> 'const String' lvalue ParmVar 0x56430735bc88 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x56430735d720 <col:43> 'const bool' lvalue Var 0x56430735d0c8 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x56430735d788 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x56430735d768 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x56430735d7b0 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56430735d550 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x56430735d7d0 <col:73> 'const int' lvalue Var 0x56430735d268 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x56430735d890 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x56430735d860 <col:16, col:20> '<bound member function type>' .end 0x56430718cd90
| |   | |     `-DeclRefExpr 0x56430735d840 <col:16> 'const String' lvalue ParmVar 0x56430735bc88 'str' 'const String &'
| |   | `-BinaryOperator 0x56430735d9e8 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x56430735d980 <col:13> 'int' lvalue ->status 0x56430735c418
| |   |   | `-CXXThisExpr 0x56430735d970 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x56430735d9d0 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x56430735d9b0 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b070 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x56430735dc58 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x56430735db40 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x56430735db28 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x56430735db10 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x56430735da30 <col:13> 'int' lvalue ->status 0x56430735c418
| |   | | |     `-CXXThisExpr 0x56430735da20 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x56430735daf0 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x56430735dac0 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x56430735da70 <col:23> 'int' lvalue ->status 0x56430735c418
| |   | |   |   `-CXXThisExpr 0x56430735da60 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x56430735dad8 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x56430735daa0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x56430735dc38 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x56430735dbd8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x56430735db80 <col:13, col:18> '<bound member function type>' .error 0x5643074ccbf0
| |   |   | | `-DeclRefExpr 0x56430735db60 <col:13> 'const ArgContext' lvalue ParmVar 0x56430735bda0 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x56430735dc00 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x56430735dbb0 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x56430735dc28 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x56430735dc18 <col:20> 'bool' false
| |   |-DeclStmt 0x56430735de28 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x56430735ddd0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x56430735dd60 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x56430735df88 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x56430735de40 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x564307130d18
| |   | |-DeclRefExpr 0x56430735de88 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56430735d550 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x56430735df58 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x56430735ded0 <col:64> 'V' lvalue ParmVar 0x56430735bd28 'result' 'V &'
| |   `-ReturnStmt 0x56430735dfc8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x56430735dfb8 <col:16> 'bool' true
| `-CXXMethodDecl 0x5643075ab478 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5643075ab250 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5643075ab328 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5643075ab390 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5643075ad210 <col:94, line:1067:5>
|     |-DeclStmt 0x5643075abc88 <line:1054:9, col:64>
|     | `-VarDecl 0x5643075abaa8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5643075abc18 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5643075abbe8 <col:36, col:55> 'const bool' lvalue Var 0x56430711ff30 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5643075abe68 <line:1055:9, col:91>
|     | `-VarDecl 0x5643075abca0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5643075abde8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5643075abdd0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5643075abdb0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5643075abd90 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5643075abd70 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5643075abd38 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5643075abd18 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x56430735d328 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5643075abd58 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x56430735d368 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x56430735d3f0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5643075ac000 <line:1056:9, col:27>
|     | `-VarDecl 0x5643075abf98 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5643075ac490 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5643075ac438 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5643075ac2f0 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5643075ac2c0 <col:13> '<bound member function type>' ->parse 0x56430735bb10
|     | | | | `-CXXThisExpr 0x5643075ac2b0 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5643075ac150 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5643075ac120 <col:19, col:23> '<bound member function type>' .begin 0x56430718cb78
|     | | | |   `-DeclRefExpr 0x5643075ac100 <col:19> 'const String' lvalue ParmVar 0x5643075ab250 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5643075ac1c0 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5643075ac190 <col:32, col:36> '<bound member function type>' .end 0x56430718cd90
|     | | | |   `-DeclRefExpr 0x5643075ac170 <col:32> 'const String' lvalue ParmVar 0x5643075ab250 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5643075ac360 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5643075ac340 <col:43> 'const bool' lvalue Var 0x5643075abaa8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5643075ac248 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5643075ac230 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5643075ac210 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5643075ac378 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5643075ac270 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5643075abf98 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5643075ac3b0 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5643075ac390 <col:73> 'const int' lvalue Var 0x5643075abca0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5643075ac418 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5643075ac3e8 <col:16, col:20> '<bound member function type>' .end 0x56430718cd90
|     | |     `-DeclRefExpr 0x5643075ac3c8 <col:16> 'const String' lvalue ParmVar 0x5643075ab250 'str' 'const String &'
|     | `-BinaryOperator 0x5643075ac470 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56430735d980 <col:13> 'int' lvalue ->status 0x56430735c418
|     |   | `-CXXThisExpr 0x56430735d970 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5643075ac458 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56430735d9b0 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b070 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5643075ac608 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5643075ac528 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5643075ac510 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5643075ac4f8 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56430735da30 <col:13> 'int' lvalue ->status 0x56430735c418
|     | | |     `-CXXThisExpr 0x56430735da20 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5643075ac4d8 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5643075ac4a8 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56430735da70 <col:23> 'int' lvalue ->status 0x56430735c418
|     | |   |   `-CXXThisExpr 0x56430735da60 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5643075ac4c0 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56430735daa0 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5643075ac5e8 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5643075ac598 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5643075ac568 <col:13, col:18> '<bound member function type>' .error 0x5643074ccbf0
|     |   | | `-DeclRefExpr 0x5643075ac548 <col:13> 'const ArgContext' lvalue ParmVar 0x5643075ab390 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5643075ac5c0 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56430735dbb0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5643075ac5d8 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56430735dc18 <col:20> 'bool' false
|     |-DeclStmt 0x5643075acb48 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5643075acaf0 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5643075acaa0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5643075aca80 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x5643075aca10 'type'
|     |       `-ElaboratedType 0x5643075ac9c0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5643075ac9a0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x564307120088 'unsigned_type'
|     |           `-BuiltinType 0x564306e41620 'unsigned int'
|     |-CallExpr 0x5643075ad1a0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5643075ad188 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5643075ad108 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5643075acfe8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x564307130d18 'extract_integer')
|     | |-ImplicitCastExpr 0x5643075ad1e8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5643075ad1d0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5643075acba8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5643075abf98 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5643075acc78 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x5643075acc28 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x5643075ab328 'result' 'unsigned int &'
|     `-ReturnStmt 0x5643075ad200 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56430735dfb8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56430735c328 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56430735bfd8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56430735c288 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56430735c088 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56430735c128 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56430735c1a0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56430735cb38 <col:71> 'const ArgContext' lvalue Var 0x56430751edc8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56430735e748 <col:83, line:1083:5>
| |   |-DeclStmt 0x56430735e0a0 <line:1071:9, col:12>
| |   | `-VarDecl 0x56430735e038 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56430735e720 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56430735e330 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56430735e1b8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56430735e180 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56430735e0c8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56430735e120 <col:31> 'const String' lvalue ParmVar 0x56430735c088 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56430735e140 <col:36> 'V' lvalue Var 0x56430735e038 'x' 'V'
| |     | |   `-DeclRefExpr 0x56430735e160 <col:39> 'const ArgContext' lvalue ParmVar 0x56430735c1a0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56430735e310 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56430735e2f0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56430735e2d8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56430735e2c0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56430735e1e0 <col:17> 'int' lvalue ->status 0x56430735c418
| |     |     |     `-CXXThisExpr 0x56430735e1d0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56430735e2a0 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56430735e270 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56430735e220 <col:27> 'int' lvalue ->status 0x56430735c418
| |     |       |   `-CXXThisExpr 0x56430735e210 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56430735e288 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56430735e250 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56430735e360 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56430735e350 <col:20> 'bool' false
| |     `-IfStmt 0x56430735e6f8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56430735e400 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56430735e3d0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56430735e380 <col:18> 'int' lvalue ->status 0x56430735c418
| |       | |   `-CXXThisExpr 0x56430735e370 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56430735e3e8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56430735e3b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56430735e638 <col:42, line:1079:9>
| |       | |-CallExpr 0x56430735e5e0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56430735e430 <line:1076:13> '<bound member function type>' ->range_error 0x56430735ca28
| |       | | | `-CXXThisExpr 0x56430735e420 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56430735e460 <col:25> 'const ArgContext' lvalue ParmVar 0x56430735c1a0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56430735e540 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56430735e5b8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56430735e598 <col:43> 'V' lvalue Var 0x56430735e038 'x' 'V'
| |       | `-ReturnStmt 0x56430735e628 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56430735e618 <col:20> 'bool' false
| |       `-CompoundStmt 0x56430735e6d8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56430735e698 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56430735e658 <col:13> 'V' lvalue ParmVar 0x56430735c128 'result' 'V &'
| |         | `-DeclRefExpr 0x56430735e678 <col:22> 'V' lvalue Var 0x56430735e038 'x' 'V'
| |         `-ReturnStmt 0x56430735e6c8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56430735e6b8 <col:20> 'bool' true
| `-CXXMethodDecl 0x5643075aae38 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5643075aac10 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5643075aace8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x5643075aad50 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5643075aba88 <col:83, line:1083:5>
|     |-DeclStmt 0x5643075ab0c0 <line:1071:9, col:12>
|     | `-VarDecl 0x5643075ab058 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x5643075aba60 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5643075ab6f0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5643075ab618 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5643075ab5e0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5643075ab598 <col:14> '<bound member function type>' ->parse_saturating 0x5643075ab478
|       | |   | `-CXXThisExpr 0x5643075ab588 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5643075ab130 <col:31> 'const String' lvalue ParmVar 0x5643075aac10 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5643075ab150 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x5643075ab058 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x5643075ab170 <col:39> 'const ArgContext' lvalue ParmVar 0x5643075aad50 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5643075ab6d0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5643075ab6b0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5643075ab698 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5643075ab680 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x56430735e1e0 <col:17> 'int' lvalue ->status 0x56430735c418
|       |     |     `-CXXThisExpr 0x56430735e1d0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5643075ab660 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5643075ab630 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x56430735e220 <col:27> 'int' lvalue ->status 0x56430735c418
|       |       |   `-CXXThisExpr 0x56430735e210 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5643075ab648 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x56430735e250 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5643075ab710 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x56430735e350 <col:20> 'bool' false
|       `-IfStmt 0x5643075aba38 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5643075ab750 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5643075ab720 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x56430735e380 <col:18> 'int' lvalue ->status 0x56430735c418
|         | |   `-CXXThisExpr 0x56430735e370 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5643075ab738 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x56430735e3b0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56430735b100 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5643075ab970 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5643075ab8e0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x56430735e430 <line:1076:13> '<bound member function type>' ->range_error 0x56430735ca28
|         | | | `-CXXThisExpr 0x56430735e420 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5643075ab770 <col:25> 'const ArgContext' lvalue ParmVar 0x5643075aad50 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5643075ab948 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5643075ab918 <col:31, col:50> 'const bool' lvalue Var 0x56430711ff30 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5643075ab8b8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5643075ab8a0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5643075ab888 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5643075ab868 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x5643075ab058 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x5643075ab960 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x56430735e618 <col:20> 'bool' false
|         `-CompoundStmt 0x5643075aba18 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5643075ab9e8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5643075ab990 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x5643075aace8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x5643075ab9d0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5643075ab9b0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x5643075ab058 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x5643075aba08 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x56430735e6b8 <col:20> 'bool' true
|-FieldDecl 0x56430735c3b0 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x56430735c418 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56430735c468 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56430735c720 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56430735c4a8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56430735c528 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56430735c5a0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56430735c620 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56430735ca28 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56430735c7f0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56430735c868 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56430735c900 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56430735efa8 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56430735efa8
| `-ParmVarDecl 0x56430735f0b8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56430735f238 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56430735f348 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5643075a32d0 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5643075a32a0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5643075a3270 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5643075a3240 <col:7> 'IntArg' lvalue ParmVar 0x56430735f348 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56430735c3b0 'base' 'int'
| | `-ImplicitCastExpr 0x5643075a33c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5643075a3398 <col:7> 'int' xvalue .base 0x56430735c3b0
| |     `-CXXStaticCastExpr 0x5643075a3368 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5643075a3338 <col:7> 'IntArg' lvalue ParmVar 0x56430735f348 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x56430735c418 'status' 'int'
| | `-ImplicitCastExpr 0x5643075a3498 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5643075a3468 <col:7> 'int' xvalue .status 0x56430735c418
| |     `-CXXStaticCastExpr 0x5643075a3438 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5643075a3408 <col:7> 'IntArg' lvalue ParmVar 0x56430735f348 '' 'IntArg &&'
| `-CompoundStmt 0x5643075a34f0 <col:7>
`-CXXDestructorDecl 0x5643075a2430 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x564307537db0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x564307538008 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5643075a2358 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5643075a28d0 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5643075a28b0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5643075a2940 <col:19>
|-CXXConstructorDecl 0x5643075a2538 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x5643075a2538
| `-ParmVarDecl 0x5643075a2648 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x5643075a26e8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5643075a27f8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5643075a3500 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5643075a3220 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5643075a31f0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x5643075a31c0 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x5643075a27f8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x5643075a3570 <col:19>
`-CXXDestructorDecl 0x5643075a2980 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.12 = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg.12 = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
