
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765683d888 prev 0x557656835108 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55765683d980 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55765683da10 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55765683da88 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55765683db48 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55765683dc10 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55765683dd88 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55765683dcc0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55765683de30 <col:24>
| `-OptimizeNoneAttr 0x55765683de88 <col:34>
|-CXXMethodDecl 0x55765683ded0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55765683e188 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55765683df80 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55765683dff8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55765683e078 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55765683e240 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55765683e278 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55765683e2e0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55765683e368 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55765683e6a0 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55765683e420 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55765683e498 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55765683e510 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55765683e590 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55765683e7b0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x557656845098 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x557656845098
| `-ParmVarDecl 0x5576568451a8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x557656845248 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x557656845248
| `-ParmVarDecl 0x557656845358 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x557656909020 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656830b80 prev 0x557656830920 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656830c78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x557656830d08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x557656830d68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x557656830e58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x557656830f58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x557656831128 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x557656830fd8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x557656831050 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5576568312b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5576568311f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x557656831360 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x557656831498 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5576568313d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x557656831638 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x557656831578 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5576568317d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x557656831718 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x557656831880 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x557656831980 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x557656831a60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656831960 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x557656831940 <col:26> 'int' 1
| `-EnumConstantDecl 0x557656831a10 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x557656831a78 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576568319f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5576568319d0 <col:44> 'int' 2
|-CXXMethodDecl 0x557656831bc0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x557656831aa8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x557656831b28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x557656831d18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x557656831c88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x557656831f28 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x557656831dd8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x557656831e50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x557656831fd8 <col:20>
| `-OptimizeNoneAttr 0x557656832030 <col:30>
|-CXXMethodDecl 0x557656832138 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x557656832070 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5576568321e0 <col:20>
| `-OptimizeNoneAttr 0x557656832238 <col:30>
|-CXXMethodDecl 0x557656832288 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x557656832350 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x557656832410 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x557656832498 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x557656832520 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5576568325a8 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x557656832630 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5576568326c0 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x557656832780 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x557656832808 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x557656832890 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x557656832918 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5576568329a0 <line:66:5, col:36> col:23 used PULL_TO_PUSH 'const char []' static
|-VarDecl 0x557656832a28 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x557656832ab8 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x557656832b78 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x557656832c08 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x557656832d58 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x557656832cc0 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x557656832ee0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x557656832e18 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x557656833180 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x557656832f98 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x557656833018 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x557656833098 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x557656833238 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x557656833340 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5576568335d0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656833320 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x557656833300 <col:33> 'int' 0
| |-EnumConstantDecl 0x5576568333d0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5576568335e8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568333b0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x557656833390 <col:32> 'int' 20
| |-EnumConstantDecl 0x557656833460 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x557656833600 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656833440 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x557656833420 <col:38> 'int' 90
| |-EnumConstantDecl 0x5576568334f0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x557656833618 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568334d0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5576568334b0 <col:35> 'int' 100
| `-EnumConstantDecl 0x557656833580 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x557656833630 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656833560 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x557656833540 <col:32> 'int' 2000
|-CXXMethodDecl 0x557656833670 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x557656833980 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5576568337f0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x557656833868 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557656833a50 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x557656833bd0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x557656833b00 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557656833dd8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x557656833c88 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x557656833d00 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557656833ed8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x557656833f78 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x557656834040 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576568340d0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x557656834300 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568340b0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x557656834090 <col:36> 'int' EnumConstant 0x557656834040 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x557656834120 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x557656834170 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5576568341c0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x557656834210 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x557656834260 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5576568342b0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5576568343e8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x557656834328 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5576568344b0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x557656834570 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x557656834630 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5576568346f0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5576568347d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5576568348a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x557656834a20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x557656834950 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x557656834b48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x557656834d48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x557656834bf8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x557656834c78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x557656841568 <col:54, line:127:5>
|   |-ParenExpr 0x557656841418 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5576568413e8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5576568410d0 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5576568410a8 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x557656841090 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x557656841078 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x557656841048 <col:31> 'Router *' lvalue ->_router 0x55765683ef60
|   |   |         `-CXXThisExpr 0x557656841038 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x557656841130 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656841110 <col:48> 'int' 0
|   |   `-CallExpr 0x557656841348 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x557656841330 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656841310 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656841388 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576568411a0 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5576568413a0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576568411c0 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5576568413b8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576568411f8 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5576568413d0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576568412f8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576568412e0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656841298 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5576568414b0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x557656841448 <col:9> 'Router *' lvalue ->_router 0x55765683ef60
|   | | `-CXXThisExpr 0x557656841438 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x557656841498 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x557656841478 <col:19> 'Router *' lvalue ParmVar 0x557656834bf8 'r' 'Router *'
|   `-BinaryOperator 0x557656841548 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5576568414e0 <col:9> 'int' lvalue ->_eindex 0x55765683efc8
|     | `-CXXThisExpr 0x5576568414d0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x557656841530 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x557656841510 <col:19> 'int' lvalue ParmVar 0x557656834c78 'eindex' 'int'
|-CXXMethodDecl 0x557656834ed0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x557656834e08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x557656834fa0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x557656835068 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x557656835108 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x557656835358 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5576568351d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x557656835250 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x557656835408 <col:20>
| `-OptimizeNoneAttr 0x557656835460 <col:30>
|-CXXMethodDecl 0x557656835568 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5576568354a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x557656835610 <col:20>
| `-OptimizeNoneAttr 0x557656835668 <col:30>
|-CXXMethodDecl 0x557656835738 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5576568356a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5576568357e0 <col:20>
| `-OptimizeNoneAttr 0x557656835838 <col:30>
|-CXXMethodDecl 0x5576568359c8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x557656835870 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5576568358f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x557656835b58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x557656835a90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x557656835ca8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x557656835c18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x557656835df8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x557656835d68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x557656835f48 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x557656835eb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x557656836208 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x557656836000 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x557656836080 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x557656836128 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5576568362e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5576568363a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x557656836688 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x557656836520 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x557656836598 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5576568367b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x557656836990 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x557656836870 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5576568368f0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x557656836b78 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x557656836a58 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x557656836ad8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x557656836ee8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x557656836c38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x557656836cb0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x557656836d30 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x557656840b48 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x557656840b28 <col:106> 'int' 0
| `-ParmVarDecl 0x557656836da8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557656840b80 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557656840b60 <col:126> 'int' 0
|-CXXMethodDecl 0x557656837268 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557656836fb8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x557656837030 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5576568370b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x557656837128 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557656840bb8 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557656840b98 <col:114> 'int' 0
|-CXXMethodDecl 0x5576568375f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557656837340 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5576568373b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x557656837438 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x557656840bd0 <col:96> 'int' 0
| `-ParmVarDecl 0x5576568374b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557656840c10 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557656840bf0 <col:116> 'int' 0
|-CXXMethodDecl 0x557656837978 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5576568376c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x557656837740 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5576568377c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x557656840c48 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x557656840c28 <col:109> 'int' 0
| `-ParmVarDecl 0x557656837838 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557656840c80 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557656840c60 <col:129> 'int' 0
|-CXXMethodDecl 0x557656837cf8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557656837a48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x557656837ac0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x557656837b40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x557656837bb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557656840cb8 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557656840c98 <col:117> 'int' 0
|-CXXMethodDecl 0x557656838088 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x557656837dd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x557656837e48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x557656837ec8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x557656840cd0 <col:99> 'int' 0
| `-ParmVarDecl 0x557656837f40 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x557656840d10 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x557656840cf0 <col:119> 'int' 0
|-CXXMethodDecl 0x5576568384a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x557656838158 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5576568381d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x557656838250 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576568382d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x557656840d48 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x557656840d28 <col:108> 'int' 0
| `-ParmVarDecl 0x557656838350 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x557656840d80 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x557656840d60 <col:141> 'int' 0
|-CXXMethodDecl 0x5576568388c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x557656838580 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x557656838600 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x557656838678 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5576568386f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x557656838778 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x557656840d98 <col:121> 'int' 0
|-CXXMethodDecl 0x557656838cf8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5576568389a8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x557656838a28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x557656838aa0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x557656838b20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x557656840db8 <col:98> 'int' 0
| `-ParmVarDecl 0x557656838ba0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x557656840dd8 <col:123> 'int' 0
|-CXXMethodDecl 0x557656838fc0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x557656838dd0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x557656838e50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x557656838ed0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x557656840df8 <col:80> 'int' 0
|-EnumDecl 0x557656839078 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x557656839180 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557656839410 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656839160 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x557656839140 <col:42> 'int' 1
| |-EnumConstantDecl 0x557656839210 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557656839428 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568391f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5576568391d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5576568392a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557656839440 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656839280 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x557656839260 <col:44> 'int' 4
| |-EnumConstantDecl 0x557656839330 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x557656839458 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656839310 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5576568392f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5576568393c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x557656839470 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576568393a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x557656839380 <col:34> 'int' 6
|-CXXMethodDecl 0x557656839728 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x557656839498 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x557656839538 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5576568395b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x557656839630 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x557656840eb0 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x557656840e98 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x557656840e80 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x557656840e60 <col:98, col:105> 'String' (CXXTemporary 0x557656840e60)
|           `-CXXTemporaryObjectExpr 0x557656840e28 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5576568399c8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5576568397f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x557656839870 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5576568398e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x557656840f60 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x557656840f48 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x557656840f30 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x557656840f10 <col:94, col:101> 'String' (CXXTemporary 0x557656840f10)
| |         `-CXXTemporaryObjectExpr 0x557656840ed8 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x557656841750 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5576568416c8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x557656841698 <col:9> '<bound member function type>' ->add_task_handlers 0x557656839728
|     | `-CXXThisExpr 0x557656841688 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x557656841708 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x557656841608 <col:27> 'Task *' lvalue ParmVar 0x5576568397f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x557656841720 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x557656841628 <col:33> 'NotifierSignal *' lvalue ParmVar 0x557656839870 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x557656841738 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x557656841648 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5576568393c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x557656841668 <col:62> 'const String' lvalue ParmVar 0x5576568398e8 'prefix' 'const String &'
|-CXXMethodDecl 0x557656839bd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x557656839a90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x557656839b08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x557656841010 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x557656840ff8 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x557656840fe0 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x557656840fc0 <col:70, col:77> 'String' (CXXTemporary 0x557656840fc0)
| |         `-CXXTemporaryObjectExpr 0x557656840f88 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x557656841928 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5576568418a0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x557656841870 <col:9> '<bound member function type>' ->add_task_handlers 0x557656839728
|     | `-CXXThisExpr 0x557656841860 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5576568418e0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576568417e0 <col:27> 'Task *' lvalue ParmVar 0x557656839a90 'task' 'Task *'
|     |-ImplicitCastExpr 0x5576568418f8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x557656841800 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x557656841910 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x557656841820 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5576568393c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x557656841840 <col:57> 'const String' lvalue ParmVar 0x557656839b08 'prefix' 'const String &'
|-CXXMethodDecl 0x557656839eb8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x557656839ca0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x557656839d20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x557656839d98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55765683a168 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x557656839f88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683a008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683a088 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55765683a458 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55765683a238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683a2b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683a330 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55765683a708 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55765683a528 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683a5a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683a628 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55765683a9b8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55765683a7d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683a858 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683a8d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55765683ac68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55765683aa88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683ab08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683ab80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55765683af18 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55765683ad38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683adb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683ae38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55765683b1c8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55765683afe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683b068 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683b0e8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55765683b478 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55765683b298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683b318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683b398 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55765683b728 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55765683b548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683b5c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683b648 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55765683b990 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55765683b7f8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55765683b878 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55765683b8f0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55765683bc38 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55765683ba60 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55765683bae0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55765683bb58 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55765683bee8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55765683bd08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683bd88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683be08 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55765683c198 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55765683bfb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683c038 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683c0b0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55765683c448 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55765683c268 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683c2e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683c360 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55765683c6f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55765683c518 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683c598 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55765683c610 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55765683ca28 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55765683c7c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55765683c848 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55765683c8c0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55765683c938 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557656841028 <col:93> 'bool' false
|-CXXMethodDecl 0x55765683cc10 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55765683caf8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55765683cb78 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55765683cde8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55765683ccd0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55765683cd50 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55765683d0c8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55765683cea8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55765683cf20 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55765683cfa0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55765683d018 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55765683d3b8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55765683d198 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55765683d210 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55765683d290 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55765683d308 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55765683d5f0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55765683d490 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55765683d510 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55765683d7d8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55765683d6b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55765683d738 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55765683d888 prev 0x557656835108 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55765683d980 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55765683da10 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55765683da88 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55765683db48 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55765683dc10 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55765683dd88 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55765683dcc0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55765683de30 <col:24>
| | `-OptimizeNoneAttr 0x55765683de88 <col:34>
| |-CXXMethodDecl 0x55765683ded0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55765683e188 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55765683df80 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55765683dff8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55765683e078 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55765683e240 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55765683e278 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55765683e2e0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55765683e368 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55765683e6a0 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55765683e420 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55765683e498 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55765683e510 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55765683e590 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55765683e7b0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x557656845098 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x557656845098
| | `-ParmVarDecl 0x5576568451a8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x557656845248 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x557656845248
| | `-ParmVarDecl 0x557656845358 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x557656909020 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55765683e828 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55765683e8c8 <col:38> "" ""
|-CXXMethodDecl 0x55765683e958 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55765683e9f8 <col:44> "" ""
|-AccessSpecDecl 0x55765683ea68 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55765683ea90 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55765683eb90 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55765683ebe0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765683eb70 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55765683eb50 <col:27> 'int' 4
|-FieldDecl 0x55765683ec98 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55765683ee48 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55765683ef00 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55765683ef60 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55765683efc8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55765683f118 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55765683f058 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55765683f2c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55765683f1d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55765683f4a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55765683f388 <col:20> col:23 'int'
| `-ParmVarDecl 0x55765683f408 <col:25> col:28 'int'
|-CXXMethodDecl 0x55765683f750 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55765683f570 <col:23> col:26 'int'
| |-ParmVarDecl 0x55765683f5f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55765683f668 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55765683f808 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55765683f8d0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55765683f920 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55765683f970 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55765683fb50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55765683fa00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55765683fa78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55765683fdf8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55765683fc18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55765683fc98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55765683fd10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x557656840018 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55765683fec8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55765683ff48 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x557656840350 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5576568400d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x557656840158 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5576568401d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x557656840250 <col:57> col:60 'int'
|-CXXMethodDecl 0x557656840538 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x557656840420 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5576568404a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x557656840688 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5576568405f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x557656840a08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x557656840748 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5576568407c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x557656840840 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5576568408c0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x557656840ae8 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | union NotifierSignal::vmvalue
         0 |   class atomic_uint32_t * v1
         0 |   struct NotifierSignal::vmpair * vm
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class NotifierSignal
         0 |   union NotifierSignal::vmvalue _v
         0 |     class atomic_uint32_t * v1
         0 |     struct NotifierSignal::vmpair * vm
         8 |   uint32_t _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class DelayUnqueue
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class Packet * _p
       120 |   class Timestamp _delay
       120 |     union Timestamp::rep_t _t
       120 |       int64_t x
       128 |   class Task _task
       128 |     struct TaskLink (base)
       128 |       struct TaskLink * _prev
       136 |       struct TaskLink * _next
       144 |       unsigned int _pass
       148 |     unsigned int _stride
       152 |     int _tickets
       156 |     union Task::Status _status
       156 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       156 |         int16_t home_thread_id
       158 |         uint8_t is_scheduled
       159 |         uint8_t is_strong_unscheduled
       156 |       uint32_t status
       160 |     TaskCallback _hook
       168 |     void * _thunk
       176 |     class RouterThread * _thread
       184 |     class Element * _owner
       192 |     union Task::Pending _pending_nextptr
       192 |       class Task * t
       192 |       uintptr_t x
       200 |   class Timer _timer
       200 |     int _schedpos1
       208 |     class Timestamp _expiry_s
       208 |       union Timestamp::rep_t _t
       208 |         int64_t x
       216 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       216 |       TimerCallback callback
       224 |     void * _thunk
       232 |     class Element * _owner
       240 |     class RouterThread * _thread
       248 |   class NotifierSignal _signal
       248 |     union NotifierSignal::vmvalue _v
       248 |       class atomic_uint32_t * v1
       248 |       struct NotifierSignal::vmpair * vm
       256 |     uint32_t _mask
           | [sizeof=264, dsize=264, align=8,
           |  nvsize=264, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576564263d8 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576564264f8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x557656426588 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x557656426658 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x557656426740 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5576564275f8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5576564274a0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576564277a8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5576564276b0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5576564278f0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x557656427860 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x557656427a38 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5576564279a8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656427b80 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x557656427af0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656427c48 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x557656427dc8 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x557656427d00 <col:28> col:31 'int'
|-CXXMethodDecl 0x557656427e90 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x557656427fd8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x557656427f48 <col:28> col:31 'int'
|-CXXMethodDecl 0x557656428158 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x557656428090 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576564282a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x557656428210 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656428368 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5576564285a8 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x557656428418 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x557656428490 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576564287f8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x557656428668 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576564286e0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576564288a8 <col:86> "" ""
|-CXXMethodDecl 0x557656428b18 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x557656428988 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x557656428a00 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656428cc8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x557656428bd8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x557656428e78 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x557656428d80 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x557656429148 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x557656428f30 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x557656428fa8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x557656429020 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576564294b0 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x557656429210 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x557656429288 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x557656429300 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656429568 <col:115> "" ""
|-AccessSpecDecl 0x5576564295d8 <line:84:3, col:10> col:3 private
|-FieldDecl 0x557656429610 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656429ab8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x557656429ab8
| `-ParmVarDecl 0x557656429bc8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x557656429c68 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x557656429c68
| `-ParmVarDecl 0x557656429d78 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x557656471468 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x557656804a00 <col:7>
|-CXXConstructorDecl 0x557656471540 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x557656471540
| `-ParmVarDecl 0x557656471658 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5576564716c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5576564716c8
| `-ParmVarDecl 0x5576564717d8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x557656807370 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576567eb728 prev 0x5576567e2e50 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576567eb820 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5576567eb910 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5576567eb9c0 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5576567ebb48 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5576567ebcc8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5576567ebe48 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x557656804b68 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576568053d8 <col:11>
|-CXXDestructorDecl 0x557656804c40 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x557656804d78 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x557656804d78
| `-ParmVarDecl 0x557656804e88 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x557656804f28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x557656804f28
| `-ParmVarDecl 0x557656805038 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x557656807d68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x557656807e78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5576568080f8 <col:11>
|   `-ReturnStmt 0x5576568080e8 <col:11>
|     `-UnaryOperator 0x5576568080d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576568080c0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x557656807ee8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x557656807ee8
  `-ParmVarDecl 0x557656807ff8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576567ebeb0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576567ebfc8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5576567ec068 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5576567ec0d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5576567ec138 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5576567ec1a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5576567ec200 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5576567ec2c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5576567ec320 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5576567fc5d0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x557656804a78 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5576567ec068 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5576568053e8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x557656805440 <col:12>
|-CXXConstructorDecl 0x5576568050a8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5576568050a8
| `-ParmVarDecl 0x5576568051b8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x557656805258 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x557656805258
| `-ParmVarDecl 0x557656805368 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x557656807450 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576567dc5a0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576567dc6b8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5576567dc748 <col:16, col:22> col:16 public
|-EnumDecl 0x5576567dc770 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5576567dc870 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5576567dc950 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567dc850 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5576567dc830 <col:21> 'int' 28
| `-EnumConstantDecl 0x5576567dc900 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5576567dc968 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576567dc8e0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5576567dc8c0 <col:22> 'int' 64
|-CXXMethodDecl 0x5576567dcca8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5576567dc990 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576567dca10 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5576567dca88 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576567dcb00 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576567dcd68 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5576567dcf68 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5576567dcde0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5576567dce58 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576567dd018 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5576567dd178 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5576567dd088 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576567dd220 <col:72> warn_unused_result ""
|-TypedefDecl 0x5576567dd550 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5576567dd4e0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5576567dd480 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5576567dd440 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5576562062d0 'void'
|       |-PointerType 0x55765645c980 'unsigned char *'
|       | `-BuiltinType 0x5576562063d0 'unsigned char'
|       |-TypedefType 0x5576562aea80 'size_t' sugar
|       | |-Typedef 0x557656276b20 'size_t'
|       | `-BuiltinType 0x557656206430 'unsigned long'
|       `-PointerType 0x557656206ad0 'void *'
|         `-BuiltinType 0x5576562062d0 'void'
|-CXXMethodDecl 0x5576567dd9c8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5576567dd5c0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5576567dd638 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576567dd6d0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5576567dd750 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5576567fda60 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5576567fda48 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5576567fda10 <col:58> 'int' 0
| |-ParmVarDecl 0x5576567dd7d0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5576567fda88 <col:76> 'int' 0
| |-ParmVarDecl 0x5576567dd850 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5576567fdaa8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5576567dda98 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5576567ddb18 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5576567ddbd8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5576567ddc78 <col:20>
| `-OptimizeNoneAttr 0x5576567ddcd0 <col:30>
|-CXXMethodDecl 0x5576567ddd48 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5576567ddde8 <col:20>
| `-OptimizeNoneAttr 0x5576567dde40 <col:30>
|-CXXMethodDecl 0x5576567ddeb8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5576567ddf58 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5576567de008 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5576567de0a8 <col:20>
| |-OptimizeNoneAttr 0x5576567de100 <col:30>
| `-WarnUnusedResultAttr 0x5576567de128 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5576567de180 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5576567de220 <col:20>
| `-OptimizeNoneAttr 0x5576567de278 <col:30>
|-CXXMethodDecl 0x5576567de2c8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5576567de368 <col:20>
| `-OptimizeNoneAttr 0x5576567de3c0 <col:30>
|-CXXMethodDecl 0x5576567de408 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x5576567de4a8 <col:20>
| `-OptimizeNoneAttr 0x5576567de500 <col:30>
|-CXXMethodDecl 0x5576567de548 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5576567de608 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5576567de6d0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5576567de798 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5576567de858 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576567de978 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5576567fdb70 <col:54, line:99:5>
|   `-ReturnStmt 0x5576567fdb60 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5576567fdb48 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5576567fdb18 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5576567fc908
|         `-CXXThisExpr 0x5576567fdb08 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5576567deb18 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5576567dea28 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5576567fdc20 <col:67, line:103:5>
|   `-BinaryOperator 0x5576567fdc00 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5576567fdb98 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5576567fc908
|     | `-CXXThisExpr 0x5576567fdb88 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5576567fdbe8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5576567fdbc8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5576567dea28 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5576567dec10 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5576567fdca0 <col:33, line:107:5>
|   `-ReturnStmt 0x5576567fdc90 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5576567fdc78 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5576567fdc48 <col:16> 'void *' lvalue ->_destructor_argument 0x5576567fc970
|         `-CXXThisExpr 0x5576567fdc38 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5576567decd0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5576567fe2d0 <col:25, line:113:5>
|   |-ParenExpr 0x5576567fe018 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5576567fdfe8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5576567fdd58 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5576567fdd30 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5576567fdcf8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5576567fdcc8 <col:24> '<bound member function type>' ->shared 0x5576567ddd48
|   |   |       `-ImplicitCastExpr 0x5576567fdd18 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5576567fdcb8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5576567fddb8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576567fdd98 <col:42> 'int' 0
|   |   `-CallExpr 0x5576567fdf48 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5576567fdf30 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576567fdf10 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576567fdf88 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567fde28 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5576567fdfa0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567fde50 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576567fdfb8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576567fde88 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5576567fdfd0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576567fdef8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576567fdee0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576567fdea8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5576567fe218 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5576567fe048 <col:2> 'unsigned char *' lvalue ->_head 0x5576567fc710
|   | | `-CXXThisExpr 0x5576567fe038 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5576567fe200 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5576567fe1e0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5576567fe088 <col:10> 'unsigned char *' lvalue ->_data 0x5576567fc778
|   |     | `-CXXThisExpr 0x5576567fe078 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5576567fe1c8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5576567fe1a8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5576567fe0c8 <col:18> 'unsigned char *' lvalue ->_tail 0x5576567fc7e0
|   |         | `-CXXThisExpr 0x5576567fe0b8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5576567fe190 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5576567fe170 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5576567fe108 <col:26> 'unsigned char *' lvalue ->_end 0x5576567fc848
|   |             | `-CXXThisExpr 0x5576567fe0f8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5576567fe158 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5576567fe138 <col:33> 'int' 0
|   `-BinaryOperator 0x5576567fe2b0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5576567fe248 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5576567fc908
|     | `-CXXThisExpr 0x5576567fe238 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5576567fe298 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5576567fe278 <col:16> 'int' 0
|-CXXMethodDecl 0x5576567dee10 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5576567ded80 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567deeb8 <col:20>
| |-OptimizeNoneAttr 0x5576567def10 <col:30>
| `-WarnUnusedResultAttr 0x5576567def38 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5576567df008 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5576567def78 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567df0b0 <col:20>
| |-OptimizeNoneAttr 0x5576567df108 <col:30>
| `-WarnUnusedResultAttr 0x5576567df130 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5576567df268 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5576567df170 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576567df310 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5576567df410 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5576567df380 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567df4b8 <col:20>
| `-OptimizeNoneAttr 0x5576567df510 <col:30>
|-CXXMethodDecl 0x5576567df5d8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5576567df548 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576567df680 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5576567df780 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5576567df6f0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5576567df828 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5576567df928 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x5576567df898 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567df9d0 <col:20>
| `-OptimizeNoneAttr 0x5576567dfa28 <col:30>
|-CXXMethodDecl 0x5576567dfbb8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5576567dfa68 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5576567dfae0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5576567fdac8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5576567dfc68 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5576567dfe68 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5576567dfce0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5576567dfd58 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567e0078 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5576567dff28 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5576567dffa0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567e0288 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5576567e0138 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5576567e01b8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5576567fdad8 <col:39> 'int' 0
|-CXXMethodDecl 0x5576567e0358 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5576567e0420 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5576567e04e8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576567e05a8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576567e0670 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5576567e07b8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5576567e0728 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5576567e0988 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5576567e0878 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5576567e08f0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567e0a58 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5576567e0b18 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5576567e0bb8 <col:20>
| `-OptimizeNoneAttr 0x5576567e0c10 <col:30>
|-CXXMethodDecl 0x5576567e0c60 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5576567e0d00 <col:20>
| `-OptimizeNoneAttr 0x5576567e0d58 <col:30>
|-CXXMethodDecl 0x5576567e0da8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576567e0e68 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576567e0f30 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5576567e0fd0 <col:20>
| `-OptimizeNoneAttr 0x5576567e1028 <col:30>
|-CXXMethodDecl 0x5576567e1178 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5576567e1068 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5576567e10e0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567e12c8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5576567e1238 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567e1390 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5576567e1450 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5576567e14f0 <col:20>
| `-OptimizeNoneAttr 0x5576567e1548 <col:30>
|-CXXMethodDecl 0x5576567e1598 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5576567e1638 <col:20>
| `-OptimizeNoneAttr 0x5576567e1690 <col:30>
|-CXXMethodDecl 0x5576567e16e0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576567e17a8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5576567e1848 <col:20>
| `-OptimizeNoneAttr 0x5576567e18a0 <col:30>
|-CXXMethodDecl 0x5576567e18e8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5576567e1a08 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5576567e1b78 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5576567e1ab8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5576567e1c68 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5576567e1d08 <col:20>
| `-OptimizeNoneAttr 0x5576567e1d60 <col:30>
|-CXXMethodDecl 0x5576567e1db0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5576567e1e70 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5576567e20a8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5576567e1f20 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5576567e1f98 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567e2158 <col:20>
| `-OptimizeNoneAttr 0x5576567e21b0 <col:30>
|-CXXMethodDecl 0x5576567e2258 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5576567e22f8 <col:20>
| `-OptimizeNoneAttr 0x5576567e2350 <col:30>
|-CXXMethodDecl 0x5576567e23a0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5576567e2440 <col:20>
| `-OptimizeNoneAttr 0x5576567e2498 <col:30>
|-CXXMethodDecl 0x5576567e24e0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5576567e2580 <col:20>
| `-OptimizeNoneAttr 0x5576567e25d8 <col:30>
|-CXXMethodDecl 0x5576567e26d8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5576567e2610 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5576567e2780 <col:20>
| `-OptimizeNoneAttr 0x5576567e27d8 <col:30>
|-CXXMethodDecl 0x5576567e2998 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5576567e2810 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5576567e2888 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567e2a48 <col:20>
| `-OptimizeNoneAttr 0x5576567e2aa0 <col:30>
|-CXXMethodDecl 0x5576567e2b48 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5576567e2c68 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5576567e2d88 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5576567e2e28 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5576567e2e50 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5576567e2f78 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5576567e3018 <col:20>
| `-OptimizeNoneAttr 0x5576567e3070 <col:30>
|-CXXMethodDecl 0x5576567e3118 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5576567e31b8 <col:20>
| `-OptimizeNoneAttr 0x5576567e3210 <col:30>
|-AccessSpecDecl 0x5576567e3238 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5576567e3260 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5576567e3360 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5576567e33b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576567e3340 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5576567e3320 <col:14> 'int' 48
|-CXXMethodDecl 0x5576567e3418 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5576567e34b8 <col:20>
| `-OptimizeNoneAttr 0x5576567e3510 <col:30>
|-CXXMethodDecl 0x5576567e3588 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5576567e3628 <col:20>
| `-OptimizeNoneAttr 0x5576567e3680 <col:30>
|-CXXMethodDecl 0x5576567e3748 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5576567e36b8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5576567e38e8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5576567e3a88 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5576567e3998 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5576567e3b30 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5576567e3c30 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576567e3fe0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e3c10 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5576567e3bf0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5576567e3cc0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576567e3ff8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e3ca0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5576567e3c80 <col:14> 'int' 1
| |-EnumConstantDecl 0x5576567e3d50 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576567e4010 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e3d30 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5576567e3d10 <col:14> 'int' 2
| |-EnumConstantDecl 0x5576567e3de0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576567e4028 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e3dc0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5576567e3da0 <col:14> 'int' 3
| |-EnumConstantDecl 0x5576567e3e70 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576567e4040 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e3e50 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5576567e3e30 <col:13> 'int' 4
| |-EnumConstantDecl 0x5576567e3f00 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5576567e4058 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e3ee0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5576567e3ec0 <col:13> 'int' 5
| `-EnumConstantDecl 0x5576567e3f90 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5576567e4070 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576567e3f70 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5576567e3f50 <col:14> 'int' 6
|-CXXMethodDecl 0x5576567e40d8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5576567e4178 <col:20>
| `-OptimizeNoneAttr 0x5576567e41d0 <col:30>
|-CXXMethodDecl 0x5576567e42c8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5576567e4208 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5576567e4370 <col:20>
| `-OptimizeNoneAttr 0x5576567e43f0 <col:30>
|-CXXMethodDecl 0x5576567e4468 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5576567e4590 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5576567e4708 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5576567e4640 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5576567e47d0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5576567e4898 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5576567e49d8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5576567e4948 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5576567e4a80 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5576567e4b80 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5576567e4d80 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e4b60 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5576567e4b40 <col:23> 'int' 0
| |-EnumConstantDecl 0x5576567e4c10 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5576567e4d98 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e4bf0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5576567e4bd0 <col:45> 'int' 4
| |-EnumConstantDecl 0x5576567e4ca0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5576567e4db0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e4c80 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5576567e4c60 <col:24> 'int' 0
| `-EnumConstantDecl 0x5576567e4d30 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5576567e4dc8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576567e4d10 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5576567e4cf0 <col:47> 'int' 16
|-CXXMethodDecl 0x5576567e4e28 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5576567e4f98 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5576567e4ed8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5576567e5040 <col:20>
| `-OptimizeNoneAttr 0x5576567e5098 <col:30>
|-CXXMethodDecl 0x5576567e50e8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5576567fe3f0 <col:18, col:36>
|   `-ReturnStmt 0x5576567fe3e0 <col:20, col:33>
|     `-ImplicitCastExpr 0x5576567fe3c8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5576567fe3a8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5576567fe378 <col:27> '<bound member function type>' ->xanno 0x5576567e3118
|           `-CXXThisExpr 0x5576567fe368 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5576567e51e0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5576567fe500 <col:30, col:48>
|   `-ReturnStmt 0x5576567fe4f0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5576567fe4d8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5576567fe4b8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5576567fe488 <col:39> '<bound member function type>' ->xanno 0x5576567e2f78
|           `-CXXThisExpr 0x5576567fe478 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5576567e52c8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5576567fe698 <col:24, col:50>
|   `-ReturnStmt 0x5576567fe688 <col:26, col:47>
|     `-UnaryOperator 0x5576567fe670 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576567fe650 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576567fe638 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576567fe5e8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5576567eb9c0
|         |   `-CXXMemberCallExpr 0x5576567fe5c8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5576567fe598 <col:34> '<bound member function type>' ->xanno 0x5576567e3118
|         |       `-CXXThisExpr 0x5576567fe588 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5576567fe618 <col:46> 'int' 0
|-CXXMethodDecl 0x5576567e53b8 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5576567fe830 <col:36, col:62>
|   `-ReturnStmt 0x5576567fe820 <col:38, col:59>
|     `-UnaryOperator 0x5576567fe808 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576567fe7e8 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576567fe7d0 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576567fe780 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5576567eb9c0
|         |   `-CXXMemberCallExpr 0x5576567fe760 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5576567fe730 <col:46> '<bound member function type>' ->xanno 0x5576567e2f78
|         |       `-CXXThisExpr 0x5576567fe720 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5576567fe7b0 <col:58> 'int' 0
|-CXXMethodDecl 0x5576567e54d8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5576567fe9c8 <col:26, col:53>
|   `-ReturnStmt 0x5576567fe9b8 <col:28, col:50>
|     `-UnaryOperator 0x5576567fe9a0 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576567fe980 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5576567fe968 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576567fe918 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5576567ebcc8
|         |   `-CXXMemberCallExpr 0x5576567fe8f8 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5576567fe8c8 <col:36> '<bound member function type>' ->xanno 0x5576567e3118
|         |       `-CXXThisExpr 0x5576567fe8b8 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5576567fe948 <col:49> 'int' 0
|-CXXMethodDecl 0x5576567e55f8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5576567feb98 <col:38, col:65>
|   `-ReturnStmt 0x5576567feb88 <col:40, col:62>
|     `-UnaryOperator 0x5576567feb70 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5576567feb50 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5576567feb38 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576567feab0 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5576567ebcc8
|         |   `-CXXMemberCallExpr 0x5576567fea90 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5576567fea60 <col:48> '<bound member function type>' ->xanno 0x5576567e2f78
|         |       `-CXXThisExpr 0x5576567fea50 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5576567feae0 <col:61> 'int' 0
|-CXXMethodDecl 0x5576567e57a8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5576567e56b0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5576567ff268 <col:34, line:463:5>
|   |-ParenExpr 0x5576567ff0b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5576567ff080 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5576567fece8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576567fecb8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576567fec08 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576567febf0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576567febb0 <col:23> 'int' lvalue ParmVar 0x5576567e56b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576567febd0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576567fec98 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576567fec68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576567fec28 <col:33> 'int' lvalue ParmVar 0x5576567e56b0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5576567fec80 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5576567fec48 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5576567fed48 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576567fed28 <col:56> 'int' 0
|   |   `-CallExpr 0x5576567fefe0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5576567fefc8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576567fefa8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576567ff020 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567fee38 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5576567ff038 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567fee68 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576567ff050 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576567feea0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5576567ff068 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576567fef90 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576567fef78 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576567fef38 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5576567ff258 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5576567ff240 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5576567ff220 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5576567ff1f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5576567ff1a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5576567eb9c0
|         |   `-CXXMemberCallExpr 0x5576567ff180 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5576567ff150 <col:9> '<bound member function type>' ->xanno 0x5576567e2f78
|         |       `-CXXThisExpr 0x5576567ff140 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5576567ff208 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5576567ff1d0 <col:21> 'int' lvalue ParmVar 0x5576567e56b0 'i' 'int'
|-CXXMethodDecl 0x5576567e59f8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5576567e5868 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5576567e58e0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5576567ff8f8 <col:40, line:472:5>
|   |-ParenExpr 0x5576567ff710 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5576567ff6e0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5576567ff3c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576567ff390 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576567ff2e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576567ff2c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576567ff288 <col:23> 'int' lvalue ParmVar 0x5576567e5868 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576567ff2a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576567ff370 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576567ff340 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576567ff300 <col:33> 'int' lvalue ParmVar 0x5576567e5868 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5576567ff358 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5576567ff320 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5576567ff420 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576567ff400 <col:56> 'int' 0
|   |   `-CallExpr 0x5576567ff640 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5576567ff628 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576567ff608 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576567ff680 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567ff490 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5576567ff698 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567ff4c0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576567ff6b0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576567ff4f8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5576567ff6c8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576567ff5f0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576567ff5d8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576567ff598 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5576567ff8d8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5576567ff880 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5576567ff850 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5576567ff800 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5576567eb9c0
|     | |   `-CXXMemberCallExpr 0x5576567ff7e0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5576567ff7b0 <col:2> '<bound member function type>' ->xanno 0x5576567e3118
|     | |       `-CXXThisExpr 0x5576567ff7a0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5576567ff868 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5576567ff830 <col:14> 'int' lvalue ParmVar 0x5576567e5868 'i' 'int'
|     `-ImplicitCastExpr 0x5576567ff8c0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5576567ff8a0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5576567e58e0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5576567e5bb8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5576567e5ac0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x557656800078 <col:36, line:485:5>
|   |-ParenExpr 0x5576567ffde0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576567ffdb0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576567ffa90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576567ffa60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576567ff970 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576567ff958 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576567ff918 <col:23> 'int' lvalue ParmVar 0x5576567e5ac0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576567ff938 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576567ffa40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576567ffa28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576567ff990 <col:33> 'int' lvalue ParmVar 0x5576567e5ac0 'i' 'int'
|   |   |     `-BinaryOperator 0x5576567ffa08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576567ff9f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576567ff9b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576567ff9d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5576567ffaf0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576567ffad0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576567ffd10 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576567ffcf8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5576567ffcd8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576567ffd50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567ffb60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576567ffd68 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576567ffb98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576567ffd80 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576567ffbd0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5576567ffd98 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576567ffcc0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576567ffca8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576567ffc68 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x557656800068 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x557656800050 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x557656800038 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557656800008 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5576567fffa8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576567fff78 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5576567ffef0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5576567eb910
|             |   `-CXXMemberCallExpr 0x5576567ffed0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5576567ffea0 <col:61> '<bound member function type>' ->xanno 0x5576567e2f78
|             |       `-CXXThisExpr 0x5576567ffe90 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576567fff90 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5576567fff20 <col:74> 'int' lvalue ParmVar 0x5576567e5ac0 'i' 'int'
|-CXXMethodDecl 0x5576567e5e08 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5576567e5c78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576567e5cf0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5576568007c8 <col:42, line:500:5>
|   |-ParenExpr 0x557656800560 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x557656800530 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557656800210 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576568001e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5576568000f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576568000d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557656800098 <col:23> 'int' lvalue ParmVar 0x5576567e5c78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576568000b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576568001c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576568001a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656800110 <col:33> 'int' lvalue ParmVar 0x5576567e5c78 'i' 'int'
|   |   |     `-BinaryOperator 0x557656800188 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656800170 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656800130 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557656800150 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557656800270 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656800250 <col:60> 'int' 0
|   |   `-CallExpr 0x557656800490 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656800478 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656800458 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576568004d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576568002e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5576568004e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656800318 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656800500 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656800350 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x557656800518 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656800440 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656800428 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576568003e8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5576568007a8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x557656800758 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557656800728 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5576568006d0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576568006a0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557656800650 <col:48, col:57> 'char [48]' lvalue ->c 0x5576567eb910
|     |     |   `-CXXMemberCallExpr 0x557656800630 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557656800600 <col:48> '<bound member function type>' ->xanno 0x5576567e3118
|     |     |       `-CXXThisExpr 0x5576568005f0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576568006b8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557656800680 <col:61> 'int' lvalue ParmVar 0x5576567e5c78 'i' 'int'
|     `-ImplicitCastExpr 0x557656800790 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x557656800770 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5576567e5cf0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5576567e5fc8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5576567e5ed0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x557656800f28 <col:35, line:513:5>
|   |-ParenExpr 0x557656800c38 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x557656800c08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557656800960 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656800930 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656800840 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656800828 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576568007e8 <col:23> 'int' lvalue ParmVar 0x5576567e5ed0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557656800808 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656800910 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576568008f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656800860 <col:33> 'int' lvalue ParmVar 0x5576567e5ed0 'i' 'int'
|   |   |     `-BinaryOperator 0x5576568008d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576568008c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656800880 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576568008a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5576568009c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576568009a0 <col:60> 'int' 0
|   |   `-CallExpr 0x557656800b68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656800b50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656800b30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656800ba8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656800a30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557656800bc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656800a68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656800bd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656800aa0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x557656800bf0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656800b18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656800b00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656800ac0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x557656800f18 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x557656800f00 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x557656800ee8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557656800eb8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x557656800e30 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x557656800e00 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557656800db0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5576567eb910
|             |   `-CXXMemberCallExpr 0x557656800d90 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557656800d60 <col:60> '<bound member function type>' ->xanno 0x5576567e2f78
|             |       `-CXXThisExpr 0x557656800d50 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557656800e18 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557656800de0 <col:73> 'int' lvalue ParmVar 0x5576567e5ed0 'i' 'int'
|-CXXMethodDecl 0x5576567e6218 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5576567e6088 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576567e6100 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x557656801608 <col:41, line:528:5>
|   |-ParenExpr 0x557656801398 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x557656801368 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576568010c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656801090 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656800fa0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656800f88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557656800f48 <col:23> 'int' lvalue ParmVar 0x5576567e6088 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557656800f68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656801070 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557656801058 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656800fc0 <col:33> 'int' lvalue ParmVar 0x5576567e6088 'i' 'int'
|   |   |     `-BinaryOperator 0x557656801038 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656801020 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656800fe0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557656801000 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x557656801120 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656801100 <col:60> 'int' 0
|   |   `-CallExpr 0x5576568012c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5576568012b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656801290 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656801308 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656801190 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x557656801320 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576568011c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656801338 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656801200 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x557656801350 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656801278 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656801260 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656801220 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5576568015e8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x557656801598 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557656801568 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x557656801508 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576568014d8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557656801488 <col:47, col:56> 'char [48]' lvalue ->c 0x5576567eb910
|     |     |   `-CXXMemberCallExpr 0x557656801468 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557656801438 <col:47> '<bound member function type>' ->xanno 0x5576567e3118
|     |     |       `-CXXThisExpr 0x557656801428 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5576568014f0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576568014b8 <col:60> 'int' lvalue ParmVar 0x5576567e6088 'i' 'int'
|     `-ImplicitCastExpr 0x5576568015d0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5576568015b0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5576567e6100 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5576567e63d8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5576567e62e0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x557656801cd8 <col:36, line:541:5>
|   |-ParenExpr 0x557656801a78 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x557656801a48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5576568017a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656801770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656801680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656801668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557656801628 <col:23> 'int' lvalue ParmVar 0x5576567e62e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557656801648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656801750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557656801738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576568016a0 <col:33> 'int' lvalue ParmVar 0x5576567e62e0 'i' 'int'
|   |   |     `-BinaryOperator 0x557656801718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656801700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576568016c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5576568016e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x557656801800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5576568017e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5576568019a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656801990 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656801970 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576568019e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656801870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x557656801a00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576568018a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656801a18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5576568018e0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x557656801a30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656801958 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656801940 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656801900 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x557656801cc8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x557656801cb0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x557656801c98 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557656801c68 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x557656801c10 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x557656801be0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557656801b90 <col:61, col:70> 'char const[48]' lvalue ->c 0x5576567eb910
|             |   `-CXXMemberCallExpr 0x557656801b70 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557656801b40 <col:61> '<bound member function type>' ->xanno 0x5576567e2f78
|             |       `-CXXThisExpr 0x557656801b30 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557656801bf8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557656801bc0 <col:74> 'int' lvalue ParmVar 0x5576567e62e0 'i' 'int'
|-CXXMethodDecl 0x5576567e65a8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5576567e6498 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5576567e6510 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5576567e6658 <col:20>
| `-OptimizeNoneAttr 0x5576567e66b0 <col:30>
|-CXXMethodDecl 0x5576567e67e8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5576567e66f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5576568023a8 <col:35, line:562:5>
|   |-ParenExpr 0x557656802148 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x557656802118 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557656801e70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656801e40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656801d50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656801d38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557656801cf8 <col:23> 'int' lvalue ParmVar 0x5576567e66f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557656801d18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656801e20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557656801e08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656801d70 <col:33> 'int' lvalue ParmVar 0x5576567e66f0 'i' 'int'
|   |   |     `-BinaryOperator 0x557656801de8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656801dd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656801d90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557656801db0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x557656801ed0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656801eb0 <col:60> 'int' 0
|   |   `-CallExpr 0x557656802078 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656802060 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656802040 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5576568020b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656801f40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5576568020d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656801f78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576568020e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656801fb0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x557656802100 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656802028 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656802010 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656801fd0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x557656802398 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x557656802380 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x557656802368 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557656802338 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5576568022e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5576568022b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557656802260 <col:60, col:69> 'char const[48]' lvalue ->c 0x5576567eb910
|             |   `-CXXMemberCallExpr 0x557656802240 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557656802210 <col:60> '<bound member function type>' ->xanno 0x5576567e2f78
|             |       `-CXXThisExpr 0x557656802200 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576568022c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557656802290 <col:73> 'int' lvalue ParmVar 0x5576567e66f0 'i' 'int'
|-CXXMethodDecl 0x5576567e69f8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5576567e68a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576567e6920 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x557656802a88 <col:41, line:577:5>
|   |-ParenExpr 0x557656802818 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576568027e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557656802540 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656802510 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656802420 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656802408 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576568023c8 <col:23> 'int' lvalue ParmVar 0x5576567e68a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576568023e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576568024f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576568024d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656802440 <col:33> 'int' lvalue ParmVar 0x5576567e68a8 'i' 'int'
|   |   |     `-BinaryOperator 0x5576568024b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576568024a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656802460 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557656802480 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5576568025a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656802580 <col:60> 'int' 0
|   |   `-CallExpr 0x557656802748 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656802730 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656802710 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656802788 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656802610 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5576568027a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656802648 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576568027b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656802680 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5576568027d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5576568026f8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576568026e0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576568026a0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x557656802a68 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x557656802a18 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576568029e8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x557656802988 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557656802958 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557656802908 <col:47, col:56> 'char [48]' lvalue ->c 0x5576567eb910
|     |     |   `-CXXMemberCallExpr 0x5576568028e8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576568028b8 <col:47> '<bound member function type>' ->xanno 0x5576567e3118
|     |     |       `-CXXThisExpr 0x5576568028a8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557656802970 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557656802938 <col:60> 'int' lvalue ParmVar 0x5576567e68a8 'i' 'int'
|     `-ImplicitCastExpr 0x557656802a50 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x557656802a30 <col:65> 'int32_t':'int' lvalue ParmVar 0x5576567e6920 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5576567e6bb8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5576567e6ac0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5576568031b8 <col:36, line:591:5>
|   |-ParenExpr 0x557656802ef8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x557656802ec8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557656802c20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656802bf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656802b00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656802ae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557656802aa8 <col:23> 'int' lvalue ParmVar 0x5576567e6ac0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557656802ac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656802bd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x557656802bb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656802b20 <col:33> 'int' lvalue ParmVar 0x5576567e6ac0 'i' 'int'
|   |   |     `-BinaryOperator 0x557656802b98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656802b80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656802b40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557656802b60 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x557656802c80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656802c60 <col:60> 'int' 0
|   |   `-CallExpr 0x557656802e28 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656802e10 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656802df0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656802e68 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656802cf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x557656802e80 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656802d28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656802e98 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656802d60 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x557656802eb0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656802dd8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656802dc0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656802d80 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5576568031a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x557656803190 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x557656803178 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557656803148 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5576568030c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x557656803090 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557656803040 <col:61, col:70> 'char const[48]' lvalue ->c 0x5576567eb910
|             |   `-CXXMemberCallExpr 0x557656803020 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557656802ff0 <col:61> '<bound member function type>' ->xanno 0x5576567e2f78
|             |       `-CXXThisExpr 0x557656802fe0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5576568030a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557656803070 <col:74> 'int' lvalue ParmVar 0x5576567e6ac0 'i' 'int'
|-CXXMethodDecl 0x5576567e6e08 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5576567e6c78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576567e6cf0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x557656803898 <col:42, line:606:5>
|   |-ParenExpr 0x557656803628 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5576568035f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x557656803350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656803320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656803230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656803218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576568031d8 <col:23> 'int' lvalue ParmVar 0x5576567e6c78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576568031f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656803300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5576568032e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656803250 <col:33> 'int' lvalue ParmVar 0x5576567e6c78 'i' 'int'
|   |   |     `-BinaryOperator 0x5576568032c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5576568032b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656803270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x557656803290 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5576568033b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656803390 <col:60> 'int' 0
|   |   `-CallExpr 0x557656803558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x557656803540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656803520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656803598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656803420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5576568035b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656803458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5576568035c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656803490 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5576568035e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656803508 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5576568034f0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576568034b0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x557656803878 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x557656803828 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5576568037f8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x557656803798 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x557656803768 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x557656803718 <col:48, col:57> 'char [48]' lvalue ->c 0x5576567eb910
|     |     |   `-CXXMemberCallExpr 0x5576568036f8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5576568036c8 <col:48> '<bound member function type>' ->xanno 0x5576567e3118
|     |     |       `-CXXThisExpr 0x5576568036b8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557656803780 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x557656803748 <col:61> 'int' lvalue ParmVar 0x5576567e6c78 'i' 'int'
|     `-ImplicitCastExpr 0x557656803860 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x557656803840 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5576567e6cf0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5576567e6fa0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5576567e6ed0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x557656804108 <col:33, line:620:5>
|   |-ParenExpr 0x557656803e80 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x557656803e50 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x557656803aa0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x557656803a70 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656803910 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5576568038f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5576568038b8 <col:23> 'int' lvalue ParmVar 0x5576567e6ed0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5576568038d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x557656803a50 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x557656803a38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x557656803930 <col:33> 'int' lvalue ParmVar 0x5576567e6ed0 'i' 'int'
|   |   |     `-BinaryOperator 0x557656803a18 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656803a00 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x557656803950 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5576568039d8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5576568039c0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x557656803988 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x557656803b00 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656803ae0 <col:79> 'int' 0
|   |   `-CallExpr 0x557656803db0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x557656803d98 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656803d78 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656803df0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656803be8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x557656803e08 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656803c30 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656803e20 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656803c68 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x557656803e38 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656803d60 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656803d48 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x557656803d08 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5576568040f8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5576568040e0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5576568040c8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x557656804098 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x557656804010 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x557656803fe0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x557656803f90 <col:67, col:76> 'char const[48]' lvalue ->c 0x5576567eb910
|             |   `-CXXMemberCallExpr 0x557656803f70 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x557656803f40 <col:67> '<bound member function type>' ->xanno 0x5576567e2f78
|             |       `-CXXThisExpr 0x557656803f30 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x557656803ff8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x557656803fc0 <col:80> 'int' lvalue ParmVar 0x5576567e6ed0 'i' 'int'
|-CXXMethodDecl 0x5576567e71b8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5576567e7060 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5576567e70e0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x557656804960 <col:45, line:635:5>
|   |-ParenExpr 0x5576568046b0 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x557656804680 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x557656804310 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5576568042e0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x557656804180 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x557656804168 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x557656804128 <col:23> 'int' lvalue ParmVar 0x5576567e7060 'i' 'int'
|   |   |   | `-IntegerLiteral 0x557656804148 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5576568042c0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5576568042a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5576568041a0 <col:33> 'int' lvalue ParmVar 0x5576567e7060 'i' 'int'
|   |   |     `-BinaryOperator 0x557656804288 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x557656804270 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5576568041c0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5576567e3360 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x557656804248 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x557656804230 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5576568041f8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x557656804370 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x557656804350 <col:79> 'int' 0
|   |   `-CallExpr 0x5576568045e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x557656804590 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x557656804570 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x557656804620 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5576568043e0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x557656804638 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x557656804428 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x557656804650 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x557656804460 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x557656804668 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x557656804558 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x557656804540 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5576568044f8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x557656804940 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5576568048a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x557656804878 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x557656804820 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5576568047f0 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5576568047a0 <col:54, col:63> 'char [48]' lvalue ->c 0x5576567eb910
|     |     |   `-CXXMemberCallExpr 0x557656804780 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x557656804750 <col:54> '<bound member function type>' ->xanno 0x5576567e3118
|     |     |       `-CXXThisExpr 0x557656804740 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x557656804808 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5576568047d0 <col:67> 'int' lvalue ParmVar 0x5576567e7060 'i' 'int'
|     `-CXXConstCastExpr 0x557656804910 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5576568048f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5576568048c0 <col:91> 'const void *' lvalue ParmVar 0x5576567e70e0 'x' 'const void *'
|-CXXMethodDecl 0x5576567e7288 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5576568049e8 <col:34, line:640:5>
|   `-ReturnStmt 0x5576568049d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5576568049c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x557656804990 <col:16> 'Packet *' lvalue ->_data_packet 0x5576567fc6a8
|         `-CXXThisExpr 0x557656804980 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5576567e73c8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5576567e7338 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5576567fdaf8 <col:46> 'bool' true
|-CXXMethodDecl 0x5576567e7548 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5576567e7480 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5576567e75f0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5576567e7da0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5576567e76f0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7e10 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e76d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5576567e76b0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5576567dc870 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5576567e7780 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7e28 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7760 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5576567e7740 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5576567dc900 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5576567e7810 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7e40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e77f0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5576567e77d0 <col:21> 'int' 0
| |-EnumConstantDecl 0x5576567e78a0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7e58 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7880 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5576567e7860 <col:19> 'int' 16
| |-EnumConstantDecl 0x5576567e7930 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7e70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7910 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5576567e78f0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5576567e79c0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7e88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e79a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5576567e7980 <col:19> 'int' 32
| |-EnumConstantDecl 0x5576567e7a50 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7ea0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7a30 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5576567e7a10 <col:19> 'int' EnumConstant 0x5576567e78a0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5576567e7ae0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7eb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7ac0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5576567e7aa0 <col:19> 'int' EnumConstant 0x5576567e79c0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5576567e7bb0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7ed0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7b90 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5576567e7b70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5576567e7b30 <col:23> 'int' EnumConstant 0x5576567e7ae0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5576567e7b50 <col:40> 'int' 2
| |-EnumConstantDecl 0x5576567e7c80 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5576567e7ee8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567e7c60 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5576567e7c40 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5576567e7c00 <col:23> 'int' EnumConstant 0x5576567e7ae0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5576567e7c20 <col:40> 'int' 4
| `-EnumConstantDecl 0x5576567e7d50 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5576567e7f00 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576567e7d30 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5576567e7d10 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5576567e7cd0 <col:23> 'int' EnumConstant 0x5576567e7ae0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5576567e7cf0 <col:40> 'int' 8
|-CXXMethodDecl 0x5576567e7f40 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5576567e7fe0 <col:68> "" ""
|-CXXMethodDecl 0x5576567e8078 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5576567e8118 <col:45> "" ""
|-CXXMethodDecl 0x5576567e81b0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5576567e8250 <col:57> "" ""
|-CXXMethodDecl 0x5576567e82e8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5576567e8388 <col:45> "" ""
|-CXXMethodDecl 0x5576567e8420 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5576567e84c0 <col:57> "" ""
|-CXXMethodDecl 0x5576567e8550 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5576567e85f0 <col:51> "" ""
|-CXXMethodDecl 0x5576567e8680 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5576567e8720 <col:63> "" ""
|-CXXMethodDecl 0x5576567e87b0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5576567e8850 <col:53> "" ""
|-CXXMethodDecl 0x5576567e88e0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5576567e8980 <col:65> "" ""
|-CXXMethodDecl 0x5576567e8a98 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5576567e8a08 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5576567e8b40 <col:61> "" ""
|-CXXMethodDecl 0x5576567e8cd8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5576567e8bc8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5576567e8c40 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5576567e8d88 <col:67> "" ""
|-CXXMethodDecl 0x5576567e8ea0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5576567e8e10 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5576567e8f48 <col:63> "" ""
|-CXXMethodDecl 0x5576567e90e0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5576567e8fd0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576567e9048 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5576567e9190 <col:69> "" ""
|-CXXMethodDecl 0x5576567e92a8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5576567e9218 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5576567e9350 <col:63> "" ""
|-CXXMethodDecl 0x5576567e94e8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5576567e93d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576567e9450 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576567e9598 <col:69> "" ""
|-CXXMethodDecl 0x5576567e96b0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5576567e9620 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5576567e9758 <col:62> "" ""
|-CXXMethodDecl 0x5576567e98f0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5576567e97e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576567e9858 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5576567e99a0 <col:68> "" ""
|-CXXMethodDecl 0x5576567e9ab8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5576567e9a28 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5576567e9b60 <col:63> "" ""
|-CXXMethodDecl 0x5576567e9cf8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5576567e9be8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5576567e9c60 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5576567e9da8 <col:69> "" ""
|-CXXMethodDecl 0x5576567e9e38 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5576567e9ed8 <col:64> "" ""
|-CXXMethodDecl 0x5576567e9f68 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5576567ea008 <col:52> "" ""
|-CXXMethodDecl 0x5576567ea098 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5576567ea138 <col:67> "" ""
|-CXXMethodDecl 0x5576567ea1c8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5576567ea268 <col:55> "" ""
|-CXXMethodDecl 0x5576567ea380 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5576567ea2f0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5576567ea428 <col:58> "" ""
|-CXXMethodDecl 0x5576567ea5c0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5576567ea4b0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576567ea528 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5576567ea670 <col:62> "" ""
|-CXXMethodDecl 0x5576567ea788 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5576567ea6f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5576567ea830 <col:58> "" ""
|-CXXMethodDecl 0x5576567ea9c8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5576567ea8b8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576567ea930 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5576567eaa78 <col:62> "" ""
|-CXXMethodDecl 0x5576567eab90 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5576567eab00 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5576567eac38 <col:60> "" ""
|-CXXMethodDecl 0x5576567eadd0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5576567eacc0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5576567ead38 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5576567eae80 <col:64> "" ""
|-CXXMethodDecl 0x5576567eaf98 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5576567eaf08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5576567eb040 <col:58> "" ""
|-CXXMethodDecl 0x5576567eb1d8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5576567eb0c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576567eb140 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5576567eb288 <col:62> "" ""
|-CXXMethodDecl 0x5576567eb3a0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5576567eb310 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5576567eb448 <col:59> "" ""
|-CXXMethodDecl 0x5576567eb5e0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5576567eb4d0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5576567eb548 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576567eb690 <col:63> "" ""
|-AccessSpecDecl 0x5576567eb700 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5576567eb728 prev 0x5576567e2e50 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576567eb820 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5576567eb910 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5576567eb9c0 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5576567ebb48 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5576567ebcc8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5576567ebe48 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x557656804b68 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5576568053d8 <col:11>
| |-CXXDestructorDecl 0x557656804c40 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x557656804d78 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x557656804d78
| | `-ParmVarDecl 0x557656804e88 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x557656804f28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x557656804f28
| | `-ParmVarDecl 0x557656805038 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x557656807d68 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x557656807e78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5576568080f8 <col:11>
| |   `-ReturnStmt 0x5576568080e8 <col:11>
| |     `-UnaryOperator 0x5576568080d0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5576568080c0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x557656807ee8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x557656807ee8
|   `-ParmVarDecl 0x557656807ff8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5576567ebeb0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576567ebfc8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5576567ec068 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5576567ec0d0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5576567ec138 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5576567ec1a0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5576567ec200 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5576567ec2c0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5576567ec320 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5576567fc5d0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x557656804a78 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5576567ec068 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5576568053e8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x557656805440 <col:12>
| |-CXXConstructorDecl 0x5576568050a8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5576568050a8
| | `-ParmVarDecl 0x5576568051b8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x557656805258 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x557656805258
| | `-ParmVarDecl 0x557656805368 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x557656807450 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5576567fc648 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5576567fc6a8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5576567fc710 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5576567fc778 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5576567fc7e0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5576567fc848 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5576567fc8a8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5576567fc908 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5576567fc970 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5576567fc9f8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5576567fc648 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x557656804a10 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5576567fc8a8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x557656805450 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5576568054b0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5576567fcb98 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5576567fcad8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5576567fcc90 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5576567fce78 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5576567fcd80 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5576567fd148 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5576567fcf30 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5576567fcfa8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5576567fd020 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567fd368 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5576567fd218 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5576567fd290 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5576567fd638 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5576567fd428 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5576567fd4a0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5576567fd518 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5576567fd790 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5576567fd700 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567fd8d8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5576567fd848 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5576567fd9d0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656738f40 prev 0x55765661fa70 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656739038 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x5576567390d8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x55765673df48 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55765673e328 <col:11>
|-CXXConstructorDecl 0x55765673e020 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55765673e108 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55765673ea70 <col:11>
|-CXXConstructorDecl 0x55765673e1a8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55765673e2b8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x5576567406c8 <col:11>
|-CXXDestructorDecl 0x55765673f5d8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55765680b878 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55765680b988 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55765680c250 <col:11>
|   `-ReturnStmt 0x55765680c240 <col:11>
|     `-UnaryOperator 0x55765680c228 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55765680c218 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x55765680b9f8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55765680bb08 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x5576568674e0 <col:11>
    `-ReturnStmt 0x5576568674d0 <col:11>
      `-UnaryOperator 0x5576568674b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x5576568674a8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656726408 prev 0x557656726170 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656726500 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x557656726590 <col:19, col:25> col:19 public
|-TypedefDecl 0x5576567265c8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x55765635ee70 'int32_t' sugar
|   |-Typedef 0x55765626f268 'int32_t'
|   `-TypedefType 0x5576562483b0 '__int32_t' sugar
|     |-Typedef 0x557656247fc8 '__int32_t'
|     `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656726630 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x55765635f030 'int64_t' sugar
|   |-Typedef 0x55765626f2d0 'int64_t'
|   `-TypedefType 0x5576562484d0 '__int64_t' sugar
|     |-Typedef 0x5576562480a8 '__int64_t'
|     `-BuiltinType 0x557656206390 'long'
|-EnumDecl 0x557656726688 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x557656726800 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x5576567267e0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x5576567267b8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x5576567267a0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x557656726770 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x5576567268f8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x5576567268d8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x5576567268b0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x557656726898 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x557656726870 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x557656726850 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x557656726948 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x557656726a50 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f7c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656726a30 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x557656726a10 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x557656726ae0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f7d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656726ac0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x557656726aa0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x557656726b70 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f7f0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656726b50 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x557656726b30 <col:25> 'int' 1000
| |-EnumConstantDecl 0x557656726c00 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f808 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656726be0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x557656726bc0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x557656726c90 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f820 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656726c70 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x557656726c50 <col:25> 'int' 1000
| |-EnumConstantDecl 0x557656726d20 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f838 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656726d00 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x557656726ce0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x55765661f5d0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f850 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765661f5b0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x557656726d70 <col:26> 'int' EnumConstant 0x557656726a50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x55765661f6a0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x55765661f868 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765661f680 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x55765661f660 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x55765661f620 <col:27> 'int' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x55765661f640 <col:44> 'int' EnumConstant 0x557656726d20 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x55765661f770 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x55765661f880 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765661f750 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x55765661f730 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x55765661f6f0 <col:27> 'int' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x55765661f710 <col:44> 'int' EnumConstant 0x557656726c00 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x55765661f898 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x55765661f9a0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x55765661f9f0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765661f980 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x55765661f960 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x55765661fa18 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x55765635eaa0 'uninitialized_type'
|   `-CXXRecord 0x55765635ea08 'uninitialized_type'
|-CXXRecordDecl 0x55765661fa70 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x55765661fb58 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673e338 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55765673e458 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x55765673e410 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x55765673e3a0 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765673e390 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55765673e3d0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55765673e440 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55765673e3f0 <col:19> 'int' 0
|-CXXConstructorDecl 0x55765661fda8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x55765661fc18 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x55765661fc90 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55765673dde0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55765673ddc0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673e470 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55765673e5c0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x55765673e548 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x55765673e4d8 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765673e4c8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55765673e590 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55765673e578 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55765673e508 <col:16> 'long' lvalue ParmVar 0x55765661fc18 'sec' 'long'
|     `-ImplicitCastExpr 0x55765673e5a8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55765673e528 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55765661fc90 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656620008 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55765661fe78 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x55765661fef0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55765673de18 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55765673ddf8 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673e5d8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55765673e710 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x55765673e6b0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x55765673e640 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765673e630 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55765673e6e0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55765673e670 <col:16> 'int' lvalue ParmVar 0x55765661fe78 'sec' 'int'
|     `-ImplicitCastExpr 0x55765673e6f8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55765673e690 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55765661fef0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656620268 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x5576566200d8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x557656620150 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55765673de50 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55765673de30 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673e728 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55765673e878 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x55765673e800 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x55765673e790 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765673e780 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55765673e848 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55765673e830 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x55765673e7c0 <col:16> 'unsigned long' lvalue ParmVar 0x5576566200d8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x55765673e860 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55765673e7e0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656620150 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5576566204c8 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x557656620338 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x5576566203b0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55765673de88 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55765673de68 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673e890 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55765673e9e0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x55765673e968 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x55765673e8f8 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765673e8e8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55765673e9b0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x55765673e998 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55765673e928 <col:16> 'unsigned int' lvalue ParmVar 0x557656620338 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x55765673e9c8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x55765673e948 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576566203b0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x557656620628 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x557656620598 <col:31> col:37 'double'
|-CXXConstructorDecl 0x5576566207c8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x557656620700 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x5576566209f8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x557656620900 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x557656620ba8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x557656620ae8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673ea80 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x55765673e9f8 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x557656620ae8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x55765673eae0 <col:19, line:214:5>
|-CXXConstructorDecl 0x557656620dd8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x557656620ce8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x55765673eaf0 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55765673eba0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x55765673eb78 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x55765673eb48 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x557656620ce8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x557656620fc8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x557656620f40 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x55765657ed70 'Timestamp'
|   | `-CXXRecord 0x557656726408 'Timestamp'
|   `-ParenType 0x557656620ee0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x557656620eb0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x557656726750 'Timestamp::seconds_type' sugar
|         |-Typedef 0x5576567265c8 'seconds_type'
|         `-TypedefType 0x55765635ee70 'int32_t' sugar
|           |-Typedef 0x55765626f268 'int32_t'
|           `-TypedefType 0x5576562483b0 '__int32_t' sugar
|             |-Typedef 0x557656247fc8 '__int32_t'
|             `-BuiltinType 0x557656206370 'int'
|-CXXConversionDecl 0x557656621108 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5576566211d8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x55765673eca8 <col:37, line:231:5>
|   `-ReturnStmt 0x55765673ec98 <line:227:9, col:23>
|     `-BinaryOperator 0x55765673ec78 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x55765673ec48 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55765673ebf8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5576567390d8
|       |   `-MemberExpr 0x55765673ebc8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55765673a088
|       |     `-CXXThisExpr 0x55765673ebb8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55765673ec60 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x55765673ec28 <col:23> 'int' 0
|-CXXMethodDecl 0x557656621298 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x557656621358 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656621418 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x5576566214d8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656621598 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x557656621708 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x557656621648 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x557656621850 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x5576566217c0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656621918 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x5576566219b8 <col:54> "" ""
|-CXXMethodDecl 0x557656621a48 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x557656621ae8 <col:54> "" ""
|-CXXMethodDecl 0x557656621b78 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x557656621c18 <col:54> "" ""
|-CXXMethodDecl 0x557656621d18 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x557656621de8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x557656621f18 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x557656622010 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x557656622148 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55765673eec0 <col:39, line:271:5>
|   `-ReturnStmt 0x55765673eeb0 <line:267:9, col:61>
|     `-CallExpr 0x55765673ee50 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55765673ee38 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55765673ecc0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55765673a3b8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55765673ee80 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55765673ed20 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5576567390d8
|       |   `-MemberExpr 0x55765673ecf0 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55765673a088
|       |     `-CXXThisExpr 0x55765673ece0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55765673ee98 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55765673edc0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55765673ed90 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55765673ed50 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55765673eda8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55765673ed70 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726d20 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656622208 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55765673f080 <col:39, line:279:5>
|   `-ReturnStmt 0x55765673f070 <line:275:9, col:61>
|     `-CallExpr 0x55765673f010 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x55765673eff8 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55765673eed8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55765673a3b8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x55765673f040 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55765673ef38 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x5576567390d8
|       |   `-MemberExpr 0x55765673ef08 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x55765673a088
|       |     `-CXXThisExpr 0x55765673eef8 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55765673f058 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x55765673efd8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x55765673efa8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x55765673ef68 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x55765673efc0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x55765673ef88 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726c00 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5576566222c8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x55765673f218 <col:39, line:287:5>
|   `-ReturnStmt 0x55765673f208 <line:283:9, col:53>
|     `-BinaryOperator 0x55765673f1e8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x55765673f1b8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x55765673f0d8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x5576567390d8
|       |   `-MemberExpr 0x55765673f0a8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x55765673a088
|       |     `-CXXThisExpr 0x55765673f098 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x55765673f1d0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x55765673f198 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55765673f178 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55765673f148 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765673f108 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726a50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765673f160 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765673f128 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x5576566223b8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x5576567408b0 <col:40, line:293:5>
|   |-DeclStmt 0x55765673f360 <line:291:9, col:48>
|   | `-VarDecl 0x55765673f240 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x55765673f340 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x55765673f2e8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x55765673f2b8 <col:22> '<bound member function type>' ->subsec 0x557656621358
|   |     |   `-CXXThisExpr 0x55765673f2a8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x55765673f328 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x55765673f308 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f6a0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x5576567408a0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x557656740888 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x557656740858 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656740840 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x557656740820 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x5576567407f0 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x557656740588 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x557656740570 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x55765673f378 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x55765673f240 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x557656740790 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x557656740778 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x557656740748 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x5576567405a0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x557656740510 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x5576567404f8 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x5576567404a8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656726358 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x557656740448 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x55765673f3a8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x55765673f398 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x557656740490 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x557656740478 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x55765673f868 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x55765673f3d0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x55765673f460 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x55765673f430 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x55765673f3f0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f6a0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x55765673f448 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x55765673f410 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x55765673f240 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x5576567407c0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x557656740558 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x557656740548 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x557656622478 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x557656740e08 <col:40, line:302:5>
|   |-DeclStmt 0x557656740a00 <line:297:9, col:48>
|   | `-VarDecl 0x5576567408e0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x5576567409e0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x557656740988 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x557656740958 <col:22> '<bound member function type>' ->subsec 0x557656621358
|   |     |   `-CXXThisExpr 0x557656740948 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x5576567409c8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x5576567409a8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f770 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x557656740df8 <line:298:9, col:70>
|     `-ExprWithCleanups 0x557656740de0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x557656740db0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656740d98 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x557656740d78 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x557656740d48 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x557656740c70 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x557656740c58 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x557656740a18 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x5576567408e0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x557656740ce8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x557656740cd0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x557656740ca0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x557656740c88 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x557656740bf8 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x557656740be0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x557656740bc0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x557656726358 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x557656740b60 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x557656740a48 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x557656740a38 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x557656740ba8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x557656740b90 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x557656740b20 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x557656740a70 <col:39> 'int' 0
|               |               `-BinaryOperator 0x557656740b00 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x557656740ad0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x557656740a90 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f770 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x557656740ae8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x557656740ab0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x5576567408e0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x557656740d18 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x557656740c40 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x557656740c30 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x557656622538 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x557656740e90 <col:40, line:306:5>
|   `-ReturnStmt 0x557656740e80 <line:305:9, col:17>
|     `-CXXConstructExpr 0x557656740e50 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x557656740e38 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x557656740e28 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x5576566226d8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x5576566225e8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x5576566228a8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x5576566227b0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x557656622998 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x557656622b08 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x557656622a48 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x55765674b4a8 <col:56, line:320:5>
|   `-ReturnStmt 0x55765674b498 <line:319:9, col:32>
|     `-ExprWithCleanups 0x55765674b480 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x557656740f80 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656740f68 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656740f28 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x557656740ef8 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x557656740eb8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656622a48 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x557656740f10 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x557656740ed8 <col:31> 'int' 0
|-CXXMethodDecl 0x557656622d48 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656622bc0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656622c38 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674b678 <col:72, line:326:5>
|   `-ReturnStmt 0x55765674b668 <line:325:9, col:51>
|     `-ExprWithCleanups 0x55765674b650 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55765674b620 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55765674b608 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55765674b5c8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55765674b5b0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55765674b4d0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656622bc0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55765674b570 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55765674b558 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55765674b4f0 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656738830 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55765674b598 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55765674b510 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656622c38 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656622ef8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x557656622e08 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55765674bd40 <col:56, line:337:5>
|   |-DeclStmt 0x55765674b978 <line:329:9, col:51>
|   | `-VarDecl 0x55765674b6a0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55765674b960 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55765674b930 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55765674b918 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55765674b900 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55765674b8d0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55765674b8b8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55765674b8a0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55765674b790 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55765674bb30 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55765674b9e0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5576567390d8
|   | | `-MemberExpr 0x55765674b9b0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55765673a088
|   | |   `-DeclRefExpr 0x55765674b990 <col:9> 'Timestamp' lvalue Var 0x55765674b6a0 't' 'Timestamp'
|   | `-BinaryOperator 0x55765674bb10 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55765674bae0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55765674ba10 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656622e08 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55765674baf8 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55765674bac0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55765674baa0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55765674ba70 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55765674ba30 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55765674ba88 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55765674ba50 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726d20 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55765674bd28 <line:336:9, col:16>
|     `-CXXConstructExpr 0x55765674bcf8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55765674bce0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55765674bcc0 <col:16> 'Timestamp' lvalue Var 0x55765674b6a0 't' 'Timestamp'
|-CXXMethodDecl 0x5576566230c0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x557656622fb0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656623028 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674bef8 <col:72, line:343:5>
|   `-ReturnStmt 0x55765674bee8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x55765674bed0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55765674bea0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55765674be88 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55765674be48 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55765674be30 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55765674bd78 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656622fb0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55765674bdf0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55765674bdd8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55765674bd98 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656738978 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55765674be18 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55765674bdb8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656623028 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656623210 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x557656623180 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55765674c340 <col:56, line:354:5>
|   |-DeclStmt 0x55765674c0e8 <line:346:9, col:51>
|   | `-VarDecl 0x55765674bf20 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55765674c0d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55765674c0a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55765674c088 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55765674c070 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55765674c040 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55765674c028 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55765674c010 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55765674bfe0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55765674c2a0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55765674c150 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5576567390d8
|   | | `-MemberExpr 0x55765674c120 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55765673a088
|   | |   `-DeclRefExpr 0x55765674c100 <col:9> 'Timestamp' lvalue Var 0x55765674bf20 't' 'Timestamp'
|   | `-BinaryOperator 0x55765674c280 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x55765674c250 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55765674c180 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656623180 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55765674c268 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x55765674c230 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x55765674c210 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x55765674c1e0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x55765674c1a0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x55765674c1f8 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x55765674c1c0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726c00 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55765674c328 <line:353:9, col:16>
|     `-CXXConstructExpr 0x55765674c2f8 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55765674c2e0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55765674c2c0 <col:16> 'Timestamp' lvalue Var 0x55765674bf20 't' 'Timestamp'
|-CXXMethodDecl 0x5576566233d8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x5576566232c8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656623340 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674c4f8 <col:72, line:360:5>
|   `-ReturnStmt 0x55765674c4e8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x55765674c4d0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x55765674c4a0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55765674c488 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55765674c448 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x55765674c430 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x55765674c378 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5576566232c8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x55765674c3f0 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x55765674c3d8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55765674c398 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656738ac0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x55765674c418 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x55765674c3b8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656623340 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656736db0 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x557656623498 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x55765674c968 <col:56, line:371:5>
|   |-DeclStmt 0x55765674c6e8 <line:363:9, col:51>
|   | `-VarDecl 0x55765674c520 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x55765674c6d0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x55765674c6a0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x55765674c688 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x55765674c670 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x55765674c640 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x55765674c628 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x55765674c610 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x55765674c5e0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x55765674c8c8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x55765674c750 <col:9, col:14> 'int64_t':'long' lvalue .x 0x5576567390d8
|   | | `-MemberExpr 0x55765674c720 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x55765673a088
|   | |   `-DeclRefExpr 0x55765674c700 <col:9> 'Timestamp' lvalue Var 0x55765674c520 't' 'Timestamp'
|   | `-CallExpr 0x55765674c868 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x55765674c850 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x55765674c780 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x55765673a3b8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x55765674c898 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55765674c7a0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x557656623498 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x55765674c8b0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x55765674c830 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x55765674c800 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x55765674c7c0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726a50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x55765674c818 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x55765674c7e0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x55765674c950 <line:370:9, col:16>
|     `-CXXConstructExpr 0x55765674c920 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55765674c908 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x55765674c8e8 <col:16> 'Timestamp' lvalue Var 0x55765674c520 't' 'Timestamp'
|-CXXMethodDecl 0x557656736ea8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x55765674caa8 <col:39, line:377:5>
|   `-ReturnStmt 0x55765674ca98 <line:376:9, col:30>
|     `-ExprWithCleanups 0x55765674ca80 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x55765674ca50 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x55765674ca38 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x55765674c9f8 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x55765674c9a0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x55765674c9e0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x55765674c9c0 <col:29> 'int' 1
|-CXXMethodDecl 0x557656736f68 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x55765674cb88 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x55765674cb40 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x55765674cad0 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765674cac0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x55765674cb00 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x55765674cb70 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55765674cb20 <col:19> 'int' 0
|-CXXMethodDecl 0x557656737168 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656737018 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656737090 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55765673dec0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55765673dea0 <col:60> 'int' 0
| `-CompoundStmt 0x55765674cd80 <col:63, line:395:5>
|   `-BinaryOperator 0x55765674cd60 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x55765674cbe0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x5576567390d8
|     | `-MemberExpr 0x55765674cbb0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x55765673a088
|     |   `-CXXThisExpr 0x55765674cba0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x55765674cd40 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x55765674ccd0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x55765674cc70 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x55765674cc58 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x55765674cc40 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x55765674cc10 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656737018 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x55765674ccb8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x55765674cc98 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x55765674cd28 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x55765674cd10 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55765674ccf0 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656737090 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656737338 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656737228 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x5576567372a0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674ced8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x55765674ce90 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x55765674cda8 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765674cd98 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55765674cec0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55765674cdd8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x557656737228 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55765674ce50 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55765674ce38 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55765674cdf8 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656738978 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55765674ce78 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55765674ce18 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576567372a0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656737508 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5576567373f8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656737470 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d030 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x55765674cfe8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x55765674cf00 <col:9> '<bound member function type>' ->assign 0x557656737168
|     | `-CXXThisExpr 0x55765674cef0 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x55765674d018 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55765674cf30 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x5576567373f8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x55765674cfa8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x55765674cf90 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55765674cf50 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x557656738ac0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x55765674cfd0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55765674cf70 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656737470 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5576567376d8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x5576567375c8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656737640 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x55765673def8 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55765673ded8 <col:57> 'int' 0
| `-DeprecatedAttr 0x557656737788 <col:75> "" ""
|-CXXMethodDecl 0x557656737918 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656737808 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656737880 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576567379c8 <col:74> "" ""
|-CXXMethodDecl 0x557656737b58 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x557656737a48 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x557656737ac0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656737c08 <col:74> "" ""
|-CXXMethodDecl 0x557656737c98 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x557656737d38 <col:42> "" ""
|-CXXMethodDecl 0x557656737ee0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x557656737dc0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x557656737e40 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x557656737fb0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656738070 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x557656738110 <col:20>
| `-OptimizeNoneAttr 0x557656738168 <col:30>
|-CXXMethodDecl 0x5576567381b0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656738270 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x557656738330 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x5576567383f0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x5576567384b0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656738570 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x557656738630 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x5576567386f0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x557656738830 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5576567387a0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d178 <col:58, line:512:5>
|   `-ReturnStmt 0x55765674d168 <line:511:9, col:53>
|     `-BinaryOperator 0x55765674d148 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55765674d118 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d048 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576567387a0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55765674d130 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55765674d0f8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55765674d0d8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55765674d0a8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765674d068 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765674d0c0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765674d088 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726d20 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656738978 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x5576567388e8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d2c0 <col:58, line:516:5>
|   `-ReturnStmt 0x55765674d2b0 <line:515:9, col:53>
|     `-BinaryOperator 0x55765674d290 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55765674d260 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d190 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x5576567388e8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55765674d278 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55765674d240 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55765674d220 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55765674d1f0 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765674d1b0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765674d208 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765674d1d0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726c00 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656738ac0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656738a30 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d408 <col:58, line:520:5>
|   `-ReturnStmt 0x55765674d3f8 <line:519:9, col:53>
|     `-BinaryOperator 0x55765674d3d8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55765674d3a8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d2d8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656738a30 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55765674d3c0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55765674d388 <col:23, col:53> 'int'
|           `-BinaryOperator 0x55765674d368 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x55765674d338 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765674d2f8 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726a50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765674d350 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765674d318 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656738c08 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656738b78 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d550 <col:60, line:524:5>
|   `-ReturnStmt 0x55765674d540 <line:523:9, col:55>
|     `-BinaryOperator 0x55765674d520 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55765674d4f0 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d420 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656738b78 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55765674d508 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55765674d4d0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55765674d4b0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55765674d480 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765674d440 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765674d498 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765674d460 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726d20 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656738d50 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656738cc0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d698 <col:60, line:528:5>
|   `-ReturnStmt 0x55765674d688 <line:527:9, col:55>
|     `-BinaryOperator 0x55765674d668 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x55765674d638 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d568 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656738cc0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55765674d650 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55765674d618 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55765674d5f8 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x55765674d5c8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765674d588 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765674d5e0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765674d5a8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726c00 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x557656738e98 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x557656738e08 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d7e0 <col:60, line:532:5>
|   `-ReturnStmt 0x55765674d7d0 <line:531:9, col:55>
|     `-BinaryOperator 0x55765674d7b0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x55765674d780 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d6b0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656738e08 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x55765674d798 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x55765674d760 <col:25, col:55> 'int'
|           `-BinaryOperator 0x55765674d740 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x55765674d710 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x55765674d6d0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x557656726a50 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x55765674d728 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x55765674d6f0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x55765661f5d0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x557656738f40 prev 0x55765661fa70 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557656739038 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x5576567390d8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x55765673df48 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55765673e328 <col:11>
| |-CXXConstructorDecl 0x55765673e020 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55765673e108 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55765673ea70 <col:11>
| |-CXXConstructorDecl 0x55765673e1a8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55765673e2b8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x5576567406c8 <col:11>
| |-CXXDestructorDecl 0x55765673f5d8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55765680b878 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55765680b988 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x55765680c250 <col:11>
| |   `-ReturnStmt 0x55765680c240 <col:11>
| |     `-UnaryOperator 0x55765680c228 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55765680c218 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x55765680b9f8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x55765680bb08 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x5576568674e0 <col:11>
|     `-ReturnStmt 0x5576568674d0 <col:11>
|       `-UnaryOperator 0x5576568674b8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576568674a8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x557656739140 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x557656739240 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x557656739440 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656739220 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x557656739200 <col:21> 'int' 0
| |-EnumConstantDecl 0x5576567392d0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x557656739458 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576567392b0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x557656739290 <col:23> 'int' 1
| |-EnumConstantDecl 0x557656739360 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x557656739470 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x557656739340 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x557656739320 <col:23> 'int' 2
| `-EnumConstantDecl 0x5576567393f0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x557656739488 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576567393d0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x5576567393b0 <col:27> 'int' 3
|-CXXMethodDecl 0x5576567394c8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x557656739590 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x557656739798 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x557656739640 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x5576567396c0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x55765673df10 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x5576567399a8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x557656739858 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x5576567398d0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x557656739a78 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x557656739b38 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x557656739ca8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x557656739be8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x557656739d70 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656739e30 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x557656739ef0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x557656739fb0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x55765673a050 <line:670:3, col:10> col:3 private
|-FieldDecl 0x55765673a088 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x55765673a0f8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x55765674d7f8 <col:27, line:684:5>
|-CXXMethodDecl 0x55765673a1b8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x55765674d808 <col:27, line:696:5>
|-CXXMethodDecl 0x55765673a3b8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55765673a268 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55765673a2e0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674d990 <col:66, line:700:5>
|   `-ReturnStmt 0x55765674d980 <line:699:9, col:31>
|     `-CallExpr 0x55765674d920 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x55765674d908 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55765674d8b8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x5576565c38b8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x55765674d950 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x55765674d878 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x55765673a268 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x55765674d968 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x55765674d898 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x55765673a2e0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55765673a728 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x55765673a478 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x55765673a4f0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x55765673a568 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x55765673a5e0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x55765674dce0 <col:64, line:707:5>
|   |-DeclStmt 0x55765674da20 <line:704:9, col:24>
|   | `-VarDecl 0x55765674d9b8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x55765674dc30 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x55765674da38 <col:9> 'int32_t':'int' lvalue ParmVar 0x55765673a4f0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x55765674dc18 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x55765674dbb0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x55765674db98 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55765674db18 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x5576565c8bb8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x55765674dbe8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55765674dab8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x55765673a568 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x55765674dc00 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55765674dad8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x55765673a5e0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x55765674daf8 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x55765674d9b8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x55765674dcc0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x55765674dc50 <col:9> 'int32_t':'int' lvalue ParmVar 0x55765673a478 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x55765674dca8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x55765674dc90 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x55765674dc70 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x55765674d9b8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x55765673a9c8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x55765673a7f8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x55765673a870 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x55765673a8e8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x55765673ac68 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x55765673aa90 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x55765673ab08 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x55765673ab80 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x55765673d008 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x55765673ad30 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x55765673d208 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x55765673d0c0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x55765673d138 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x55765673d4d8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x55765673d418 parent 0x557656206278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55765673d2c8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x55765673d340 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55765673d6f8 <line:718:5, col:72> col:24
| `-FunctionDecl 0x55765673d638 parent 0x557656206278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55765673d528 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x55765673d5a0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x55765673d8c0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x55765673d808 parent 0x557656206278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x55765673d748 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x55765673db48 <line:720:5, col:73> col:30
| `-FunctionDecl 0x55765673da88 parent 0x557656206278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55765673d938 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55765673d9b0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x55765673dd68 <line:721:5, col:73> col:30
| `-FunctionDecl 0x55765673dca8 parent 0x557656206278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x55765673db98 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x55765673dc10 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x55765673f480 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55765673f568 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5576567403d8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x557656740390 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55765673a088
| |     `-DeclRefExpr 0x557656740370 <col:7> 'const Timestamp' lvalue ParmVar 0x55765673f568 '' 'const Timestamp &'
| `-CompoundStmt 0x557656740438 <col:7>
|-CXXConstructorDecl 0x55765673f6e8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55765673f7f8 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x55765673a088 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x5576567406d8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x557656740680 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55765673a088
| |     `-CXXStaticCastExpr 0x557656740650 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x557656740620 <col:7> 'Timestamp' lvalue ParmVar 0x55765673f7f8 '' 'Timestamp &&'
| `-CompoundStmt 0x557656740738 <col:7>
|-CXXDestructorDecl 0x55765673f8a8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55765680b6d0 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x55765680b7d8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x55765680c2c8 <col:7>
|   |-CXXMemberCallExpr 0x55765680c268 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x55765680c1a8 <col:7> '<bound member function type>' .operator= 0x55765680b878
|   | | `-MemberExpr 0x55765680c0b8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55765673a088
|   | |   `-CXXThisExpr 0x55765680c0a8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x55765680c178 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x55765673a088
|   |   `-DeclRefExpr 0x55765680c158 <col:7> 'const Timestamp' lvalue ParmVar 0x55765680b7d8 '' 'const Timestamp &'
|   `-ReturnStmt 0x55765680c2b8 <col:7>
|     `-UnaryOperator 0x55765680c2a0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55765680c290 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x55765680bb78 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55765680bc88 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x557656867558 <col:7>
    |-CXXMemberCallExpr 0x5576568674f8 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x557656867460 <col:7> '<bound member function type>' .operator= 0x55765680b9f8
    | | `-MemberExpr 0x557656867330 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x55765673a088
    | |   `-CXXThisExpr 0x557656867320 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x557656867430 <col:7> 'Timestamp::rep_t' xvalue ._t 0x55765673a088
    |   `-CXXStaticCastExpr 0x557656867400 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x5576568673d0 <col:7> 'Timestamp' lvalue ParmVar 0x55765680bc88 '' 'Timestamp &&'
    `-ReturnStmt 0x557656867548 <col:7>
      `-UnaryOperator 0x557656867530 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x557656867520 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765684f180 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55765684f298 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x55765684f368 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x55765684f3c8 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x55765684f430 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x55765684f4b8 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x55765684f720 <col:16, line:46:5>
|   |-BinaryOperator 0x55765684f668 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x55765684f588 <col:9> 'TaskLink *' lvalue ->_prev 0x55765684f368
|   | | `-CXXThisExpr 0x55765684f578 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x55765684f650 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x55765684f630 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x55765684f5c8 <col:17> 'TaskLink *' lvalue ->_next 0x55765684f3c8
|   |     | `-CXXThisExpr 0x55765684f5b8 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x55765684f618 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x55765684f5f8 <col:25> 'int' 0
|   `-BinaryOperator 0x55765684f700 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x55765684f698 <col:9> 'unsigned int' lvalue ->_pass 0x55765684f430
|     | `-CXXThisExpr 0x55765684f688 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x55765684f6e8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x55765684f6c8 <col:17> 'int' 0
|-CXXConstructorDecl 0x5576568ca508 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x5576568ca508
| `-ParmVarDecl 0x5576568ca618 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x5576568ca6b8 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x5576568ca6b8
| `-ParmVarDecl 0x5576568ca7c8 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x5576568ca9b8 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5576568cb1b8 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x5576568cb1b8
| `-ParmVarDecl 0x5576568cb2c8 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x5576568cb338 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x5576568cb338
  `-ParmVarDecl 0x5576568cb448 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656852ad8 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x557656852c08 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x557656852c68 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x557656852cc8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x5576568d16c8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x5576568d17a0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5576568d1a58 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5576568d1a58
| `-ParmVarDecl 0x5576568d1b68 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x5576568d1c08 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5576568d1c08
  `-ParmVarDecl 0x5576568d1d18 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656852930 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656852a48 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x557656852ad8 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x557656852c08 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x557656852c68 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x557656852cc8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x5576568d16c8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x5576568d17a0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5576568d1a58 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5576568d1a58
| | `-ParmVarDecl 0x5576568d1b68 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x5576568d1c08 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5576568d1c08
|   `-ParmVarDecl 0x5576568d1d18 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x557656852d88 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x557656852de8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x557656852d88 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x557656852c08 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x557656852e40 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x557656852d88 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x557656852c68 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x557656852e98 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x557656852d88 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x557656852cc8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x557656852ef0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5576568d15d8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576568d2fd8 <col:11>
|-CXXConstructorDecl 0x5576568d18a8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5576568d18a8
| `-ParmVarDecl 0x5576568d19b8 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x5576568d2e50 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5576568d2e50
| `-ParmVarDecl 0x5576568d2f68 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x557656908f40 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55765686c010 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x55765686c1e8 prev 0x55765686c010 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55765686c278 <col:46, col:52> col:46 public
|-TypedefDecl 0x55765686c2a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576568713d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x557656871380 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x55765686c750 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x55765686c650 'type'
|     `-TemplateSpecializationType 0x55765686c5e0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55765686c4c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x55765686c4a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55765686c480 <col:24> 'unsigned long' 16
|       `-RecordType 0x55765686c5c0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x55765686c4e0 'char_array'
|-TypedefDecl 0x557656871488 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x557656871450 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x557656871430 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x5576568713d0 'type'
|     `-ElaboratedType 0x557656871380 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x55765686c750 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x55765686c650 'type'
|         `-TemplateSpecializationType 0x55765686c5e0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55765686c4c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x55765686c4a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55765686c480 <col:24> 'unsigned long' 16
|           `-RecordType 0x55765686c5c0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x55765686c4e0 'char_array'
|-CXXMethodDecl 0x557656871608 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x557656871518 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x5576568716f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5576568717d8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5576568717d8
|-CXXMethodDecl 0x557656871aa8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x5576568719b0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x557656871ce8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x557656871b60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656871bd8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557656871eb8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x557656871da8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656871e20 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557656872018 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x5576568720e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x557656872338 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x5576568721a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x557656872220 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557656872598 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x557656872408 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x557656872480 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557656872758 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x557656872668 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557656872918 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x557656872820 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x5576568729d0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656872a80 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557656872cb8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x557656872b30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656872ba8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x557656872f58 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x557656872e60 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x557656873020 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x557656873070 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5576568730c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55765686ab68 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x55765686ad78 prev 0x55765686ab68 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55765686bf80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x55765686bf30 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x55765686bf10 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x55765686bdc0 'type'
|     `-SubstTemplateTypeParmType 0x55765686bbe0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x5576564ae4f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564ae498 'T'
|       `-RecordType 0x55765686b730 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x55765686b648 'sized_array_memory'
|-FieldDecl 0x557656873110 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x557656873160 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557656873198 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55765655f340 'T'
|   `-RecordType 0x557656869d70 'TimerSet::heap_element'
|     `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x557656873258 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x557656873220 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x557656869d70 'TimerSet::heap_element'
|       `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x5576568732e8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5576568732b0 'const TimerSet::heap_element &'
|   `-QualType 0x55765686ae11 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656869d70 'TimerSet::heap_element'
|         `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x557656873378 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x557656873340 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x557656869d70 'TimerSet::heap_element'
|       `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x557656873438 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x557656873400 'const TimerSet::heap_element *'
|   `-QualType 0x55765686ae11 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656869d70 'TimerSet::heap_element'
|         `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x557656874090 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x557656874040 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x557656874020 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x557656873f58 'type'
|     `-LValueReferenceType 0x557656873f20 'const TimerSet::heap_element &'
|       `-QualType 0x557656873cc1 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x557656873cc0 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x5576564b7ad0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5576564b7a78 'T'
|           `-RecordType 0x557656869d70 'TimerSet::heap_element'
|             `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x5576568740f8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x5576568732b0 'const TimerSet::heap_element &'
|   `-QualType 0x55765686ae11 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656869d70 'TimerSet::heap_element'
|         `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x557656874150 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576568741b8 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x557656873340 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x557656869d70 'TimerSet::heap_element'
|       `-CXXRecord 0x557656869ce0 'heap_element'
|-TypedefDecl 0x557656874220 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x557656873400 'const TimerSet::heap_element *'
|   `-QualType 0x55765686ae11 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x55765686ae10 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656869d70 'TimerSet::heap_element'
|         `-CXXRecord 0x557656869ce0 'heap_element'
|-EnumDecl 0x557656874278 <line:134:5> col:5
| `-EnumConstantDecl 0x557656874370 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557656874350 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656560558 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656560530 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656560510 <col:40> 'int' 1
|-CXXConstructorDecl 0x5576568743f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557656874688 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568744b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656874550 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x557656874948 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x557656874830 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x557656874c08 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x557656874af0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x557656874f50 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x557656874e30 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x557656875260 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x557656875140 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x557656875550 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x557656875398 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656875410 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x5576568756a8 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x557656875788 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568757e0 <col:30> Inherited
|-CXXMethodDecl 0x557656875828 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x5576568758d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656875930 <col:30> Inherited
|-CXXMethodDecl 0x5576568759f8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x557656875aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656875b00 <col:30> Inherited
|-CXXMethodDecl 0x557656875b48 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x557656875bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656875c50 <col:30> Inherited
|-CXXMethodDecl 0x557656875c98 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x557656875d48 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656875da0 <col:30> Inherited
|-CXXMethodDecl 0x557656875de8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x557656875e98 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656875ef0 <col:30> Inherited
|-CXXMethodDecl 0x557656875f18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557656875fc8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x557656876078 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x557656876238 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x557656876128 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568761a0 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x557656876388 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5576568762f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656876538 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x557656876440 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576568765f0 <col:20>
| `-OptimizeNoneAttr 0x557656876648 <col:30>
|-CXXMethodDecl 0x557656876768 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x557656876670 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656876820 <col:20>
| `-OptimizeNoneAttr 0x557656876878 <col:30>
|-CXXMethodDecl 0x557656876930 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576568768a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656876a78 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576568769e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656876ba8 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x557656876cd8 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x557656876da8 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x557656876e78 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x557656876fb8 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x557656876f28 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656877100 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557656877070 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656877248 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x5576568771b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557656877300 <col:48> Inherited "" ""
|-CXXMethodDecl 0x557656877400 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x557656877370 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576568774b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x557656877578 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x557656877678 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x557656877828 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x557656877738 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x557656877fe8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5576568778e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x557656877f48 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x557656877e48 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x5576568780c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656878218 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x557656878188 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x557656878310 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x557656878558 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568783d0 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x557656878448 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x557656878718 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x557656878628 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x557656878968 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x5576568787e0 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x557656878858 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x557656878a28 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x557656878c88 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x557656878b90 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x557656878d58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x557656878d58

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55765687a280 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x55765687a458 prev 0x55765687a280 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55765687a4e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55765687a510 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x55765687c0e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x55765687c090 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x55765687a9c0 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x55765687a8c0 'type'
|     `-TemplateSpecializationType 0x55765687a850 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55765687a730 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x55765687a710 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55765687a6f0 <col:24> 'unsigned long' 8
|       `-RecordType 0x55765687a830 'char_array<8>'
|         `-ClassTemplateSpecialization 0x55765687a750 'char_array'
|-TypedefDecl 0x55765687c198 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x55765687c160 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x55765687c140 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x55765687c0e0 'type'
|     `-ElaboratedType 0x55765687c090 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x55765687a9c0 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x55765687a8c0 'type'
|         `-TemplateSpecializationType 0x55765687a850 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55765687a730 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x55765687a710 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55765687a6f0 <col:24> 'unsigned long' 8
|           `-RecordType 0x55765687a830 'char_array<8>'
|             `-ClassTemplateSpecialization 0x55765687a750 'char_array'
|-CXXMethodDecl 0x55765687c318 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x55765687c228 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x55765687c408 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55765687c4e8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55765687c4e8
|-CXXMethodDecl 0x55765687c7b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55765687c6c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x55765687c9f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55765687c870 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55765687c8e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687cbc8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55765687cab8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55765687cb30 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687cd28 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55765687cdf8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x55765687d048 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55765687ceb8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55765687cf30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687d2a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x55765687d118 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x55765687d190 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687d468 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55765687d378 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687d628 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x55765687d530 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687d6e0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55765687d790 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55765687d9c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x55765687d840 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55765687d8b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x55765687dc68 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x55765687db70 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x55765687dd30 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x55765687dd80 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55765687ddd0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656878ea0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x5576568790a8 prev 0x557656878ea0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55765687a1f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x55765687a1a0 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x55765687a180 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x55765687a030 'type'
|     `-SubstTemplateTypeParmType 0x557656879e50 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5576564ae4f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564ae498 'T'
|       `-RecordType 0x5576568799a0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5576568798b8 'sized_array_memory'
|-FieldDecl 0x55765687de20 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x55765687de70 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55765687dea8 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|   |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55765655f340 'T'
|   `-PointerType 0x5576568316e0 'Timer *'
|     `-RecordType 0x557656830850 'Timer'
|       `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687df68 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x55765687df30 'Timer *&'
|   `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-PointerType 0x5576568316e0 'Timer *'
|       `-RecordType 0x557656830850 'Timer'
|         `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687e028 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x55765687dff0 'Timer *const &'
|   `-QualType 0x557656879141 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-PointerType 0x5576568316e0 'Timer *'
|         `-RecordType 0x557656830850 'Timer'
|           `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687e0e8 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x55765687e0b0 'Timer **'
|   `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-PointerType 0x5576568316e0 'Timer *'
|       `-RecordType 0x557656830850 'Timer'
|         `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687e1a8 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x55765687e170 'Timer *const *'
|   `-QualType 0x557656879141 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-PointerType 0x5576568316e0 'Timer *'
|         `-RecordType 0x557656830850 'Timer'
|           `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687ed80 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x55765687ed30 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x55765687ed10 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x55765687eca0 'type'
|     `-SubstTemplateTypeParmType 0x55765687ea60 'Timer *' sugar
|       |-TemplateTypeParmType 0x5576564b8200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564b81b0 'T'
|       `-PointerType 0x5576568316e0 'Timer *'
|         `-RecordType 0x557656830850 'Timer'
|           `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687ede8 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x55765687dff0 'Timer *const &'
|   `-QualType 0x557656879141 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-PointerType 0x5576568316e0 'Timer *'
|         `-RecordType 0x557656830850 'Timer'
|           `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687ee40 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x55765687eea8 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x55765687e0b0 'Timer **'
|   `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-PointerType 0x5576568316e0 'Timer *'
|       `-RecordType 0x557656830850 'Timer'
|         `-CXXRecord 0x557656855438 'Timer'
|-TypedefDecl 0x55765687ef10 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x55765687e170 'Timer *const *'
|   `-QualType 0x557656879141 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x557656879140 'Timer *' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-PointerType 0x5576568316e0 'Timer *'
|         `-RecordType 0x557656830850 'Timer'
|           `-CXXRecord 0x557656855438 'Timer'
|-EnumDecl 0x55765687ef68 <line:134:5> col:5
| `-EnumConstantDecl 0x55765687f060 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55765687f040 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656560558 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656560530 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656560510 <col:40> 'int' 1
|-CXXConstructorDecl 0x55765687f0e8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55765687f378 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x55765687f1a0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55765687f240 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x55765687f638 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x55765687f520 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x55765687f8f8 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x55765687f7e0 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x55765687fc40 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x55765687fb20 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x55765687ff50 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x55765687fe30 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x557656880240 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x557656880088 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656880100 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x557656880bd8 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x557656880cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656880d10 <col:30> Inherited
|-CXXMethodDecl 0x557656880d58 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x557656880e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656880e60 <col:30> Inherited
|-CXXMethodDecl 0x557656880f28 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x557656880fd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656881030 <col:30> Inherited
|-CXXMethodDecl 0x557656881078 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x557656881128 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656881180 <col:30> Inherited
|-CXXMethodDecl 0x5576568811c8 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x557656881278 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568812d0 <col:30> Inherited
|-CXXMethodDecl 0x557656881318 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x5576568813c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x557656881420 <col:30> Inherited
|-CXXMethodDecl 0x557656881448 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576568814f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576568815a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x557656881768 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x557656881658 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568816d0 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5576568818b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x557656881828 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656881a68 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x557656881970 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656881b20 <col:20>
| `-OptimizeNoneAttr 0x557656881b78 <col:30>
|-CXXMethodDecl 0x557656881c98 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x557656881ba0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x557656881d50 <col:20>
| `-OptimizeNoneAttr 0x557656881da8 <col:30>
|-CXXMethodDecl 0x557656881e60 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x557656881dd0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656881fa8 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x557656881f18 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568820d8 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x557656882208 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x5576568822d8 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x5576568823a8 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x5576568824e8 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x557656882458 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656882630 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576568825a0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x557656882778 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x5576568826e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x557656882830 <col:48> Inherited "" ""
|-CXXMethodDecl 0x557656882930 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5576568828a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576568829e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x557656882aa8 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x557656882ba8 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x557656882d28 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x557656882c68 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x5576568834e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x557656882de0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x557656883448 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x557656883348 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x5576568835c8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656883718 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x557656883688 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x5576568837d0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x557656883a18 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x557656883890 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x557656883908 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x557656883bd8 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x557656883ae8 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x557656883e28 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x557656883ca0 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x557656883d18 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x557656883ee8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x557656884148 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x557656884050 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x557656884218 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x557656884218

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765684ba70 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55765684bb88 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x55765684bc18 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x55765684bca0 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x55765684bd90 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x55765684be90 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x55765684bf50 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x55765684c010 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x55765684c138 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x55765684c138
| `-ParmVarDecl 0x55765684c248 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x557656884fc8 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x557656884fc8
  `-ParmVarDecl 0x5576568850d8 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656868e60 prev 0x557656864fe8 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x557656868f58 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x557656868fe8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x557656869070 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x557656869168 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x557656885440 <col:43, col:67>
|   `-ReturnStmt 0x557656885430 <col:45, col:52>
|     `-CXXConstructExpr 0x557656885400 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x5576568853d0 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x55765686a950
|         `-CXXThisExpr 0x5576568853c0 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x557656869228 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x557656869430 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x5576568692d8 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x557656869350 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x557656869528 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x5576568695f0 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x5576568854c0 <col:39, col:67>
|   `-ReturnStmt 0x5576568854b0 <col:41, col:48>
|     `-ImplicitCastExpr 0x557656885498 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x557656885468 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x55765686aa38
|         `-CXXThisExpr 0x557656885458 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x5576568696b8 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x557656885540 <col:35, col:59>
|   `-ReturnStmt 0x557656885530 <col:37, col:44>
|     `-ImplicitCastExpr 0x557656885518 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5576568854e8 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x55765686aaa0
|         `-CXXThisExpr 0x5576568854d8 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x557656869800 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x557656869770 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x557656869948 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5576568698b8 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x557656869b48 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x557656869a00 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x557656869a78 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x557656869c18 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x557656869cb8 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x557656869ce0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x557656869df8 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x557656869e98 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x557656869ef8 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x55765686a028 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x557656869f58 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x557656869e98 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x557656885618 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x5576568855c0 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x557656885590 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x557656856a78
|   |       `-ImplicitCastExpr 0x5576568855e0 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x557656885578 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x557656885558 <col:17> 'Timer *' lvalue ParmVar 0x557656869f58 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x557656869ef8 't' 'Timer *'
|   | `-ImplicitCastExpr 0x5576568856b0 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x557656885670 <col:41> 'Timer *' lvalue ParmVar 0x557656869f58 't_' 'Timer *'
|   `-CompoundStmt 0x557656885700 <col:45, line:44:2>
|-CXXRecordDecl 0x55765686a0f0 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55765686a208 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x55765686a458 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x55765686a2d8 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x55765686a350 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x557656885830 <col:71, line:49:2>
|     `-ReturnStmt 0x557656885820 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x5576568857e8 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x5576568857d0 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5576568857b0 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x55765675a978 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x557656885730 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x557656869e98
|         | `-DeclRefExpr 0x557656885710 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x55765686a2d8 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x557656885780 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x557656869e98
|           `-DeclRefExpr 0x557656885760 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x55765686a350 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x55765686a520 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55765686a638 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x55765686a858 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x55765686a6d8 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x55765686a750 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x557656885a38 <col:63, line:54:2>
|     `-BinaryOperator 0x557656885a18 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x5576568858c8 <col:6, col:12> 'int' lvalue ->_schedpos1 0x557656858a88
|       | `-ImplicitCastExpr 0x5576568858b0 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x557656885880 <col:6, col:9> 'Timer *' lvalue ->t 0x557656869ef8
|       |     `-ImplicitCastExpr 0x557656885868 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x557656885848 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x55765686a750 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x557656885a00 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x5576568859e0 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x557656885988 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x557656885968 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x557656885938 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x5576568858f8 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x55765686a750 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x557656885950 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x557656885918 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x55765686a6d8 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x5576568859c8 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x5576568859a8 <col:39> 'int' 1
|-FieldDecl 0x55765686a950 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x55765686a9c0 <col:44, col:53> aligned
|   `-ConstantExpr 0x55765686a9a0 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x55765686a920 <col:52> 'int' 8
|-FieldDecl 0x55765686aa38 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x55765686aaa0 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x55765686ab08 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x557656878e40 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x557656884300 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x557656884360 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x5576568843c0 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x557656884420 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656884510 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x557656884480 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x5576568845d8 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x557656885e90 <col:29, line:81:5>
|   `-IfStmt 0x557656885e68 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x557656885b20 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x557656885ac0 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x557656885a90 <col:6, col:18> '<bound member function type>' .size 0x557656875f18
|     |     `-ImplicitCastExpr 0x557656885b08 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x557656885a60 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x557656878e40
|     |         `-CXXThisExpr 0x557656885a50 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x557656885d10 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x557656885cf8 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x557656885cd8 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x55765680b6d0 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x557656885b48 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x55765686a950
|     | | `-CXXThisExpr 0x557656885b38 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x557656885cc0 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x557656885c90 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x557656869e98
|     |     `-CXXMemberCallExpr 0x557656885c68 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x557656885c38 <col:22, col:34> '<bound member function type>' .unchecked_at 0x557656876fb8
|     |       | `-MemberExpr 0x557656885b88 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x557656878e40
|     |       |   `-CXXThisExpr 0x557656885b78 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x557656885c18 <col:47> 'int' 0
|     `-ExprWithCleanups 0x557656885e50 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x557656885e18 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x557656885e00 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x557656885de0 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55765680bb78 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x557656885d58 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x55765686a950
|         | `-CXXThisExpr 0x557656885d48 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x557656885dc8 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x557656885d98 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x557656884718 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x557656884688 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x5576568847e0 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x5576568848a0 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x557656884960 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x557656884a50 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x557656884ab8 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x557656884ab8
| `-ParmVarDecl 0x557656884bc8 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x557656884c68 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x557656884c68
| `-ParmVarDecl 0x557656884d78 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x557656884e18 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x557656884e18
| `-ParmVarDecl 0x557656884f28 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x557656885148 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x557656885148
| `-ParmVarDecl 0x557656885258 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x5576568852e0 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x5576568852e0

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576568afb88 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x5576568afd98 prev 0x5576568afb88 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5576568b0e70 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x5576568b0e20 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x5576568b0e00 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x5576568b0cb0 'type'
|     `-SubstTemplateTypeParmType 0x557656879e50 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x5576564ae4f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564ae498 'T'
|       `-RecordType 0x5576568799a0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x5576568798b8 'sized_array_memory'
|-FieldDecl 0x5576568b0f70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x5576568b0fc0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5576568b0ff8 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|   |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55765655f340 'T'
|   `-RecordType 0x5576568a23b0 'pollfd'
|     `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b10b8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x5576568b1080 'pollfd &'
|   `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x5576568a23b0 'pollfd'
|       `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b1178 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x5576568b1140 'const pollfd &'
|   `-QualType 0x5576568afe31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568a23b0 'pollfd'
|         `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b1208 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x5576568b11d0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x5576568a23b0 'pollfd'
|       `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b12c8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x5576568b1290 'const pollfd *'
|   `-QualType 0x5576568afe31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568a23b0 'pollfd'
|         `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b1ea0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x5576568b1e50 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x5576568b1e30 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x5576568b1dc0 'type'
|     `-SubstTemplateTypeParmType 0x5576568b1b80 'pollfd' sugar
|       |-TemplateTypeParmType 0x5576564b8200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564b81b0 'T'
|       `-RecordType 0x5576568a23b0 'pollfd'
|         `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b1f08 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x5576568b1140 'const pollfd &'
|   `-QualType 0x5576568afe31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568a23b0 'pollfd'
|         `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b1f60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576568b1fc8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x5576568b11d0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x5576568a23b0 'pollfd'
|       `-CXXRecord 0x5576568a2320 'pollfd'
|-TypedefDecl 0x5576568b2030 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x5576568b1290 'const pollfd *'
|   `-QualType 0x5576568afe31 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x5576568afe30 'pollfd' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568a23b0 'pollfd'
|         `-CXXRecord 0x5576568a2320 'pollfd'
|-EnumDecl 0x5576568b2088 <line:134:5> col:5
| `-EnumConstantDecl 0x5576568b2180 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5576568b2160 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656560558 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656560530 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656560510 <col:40> 'int' 1
|-CXXConstructorDecl 0x5576568b2208 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5576568b2498 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568b22c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568b2360 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x5576568b2758 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5576568b2640 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x5576568b2a18 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5576568b2900 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5576568b2d60 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5576568b2c40 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x5576568b3070 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x5576568b2f50 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x5576568b3360 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568b31a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568b3220 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5576568b34b8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5576568b3598 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568b35f0 <col:30> Inherited
|-CXXMethodDecl 0x5576568b3638 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x5576568b36e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568b3740 <col:30> Inherited
|-CXXMethodDecl 0x5576568b3808 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5576568b38b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568b3910 <col:30> Inherited
|-CXXMethodDecl 0x5576568b3958 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5576568b3a08 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568b3a60 <col:30> Inherited
|-CXXMethodDecl 0x5576568b3aa8 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5576568b3b58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568b3bb0 <col:30> Inherited
|-CXXMethodDecl 0x5576568b3bf8 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x5576568b3ca8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568b3d00 <col:30> Inherited
|-CXXMethodDecl 0x5576568b3d28 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576568b3dd8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576568b3e88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5576568b4048 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568b3f38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568b3fb0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5576568b4198 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5576568b4108 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568b4348 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x5576568b4250 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576568b4400 <col:20>
| `-OptimizeNoneAttr 0x5576568b4458 <col:30>
|-CXXMethodDecl 0x5576568b4578 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x5576568b4480 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576568b4630 <col:20>
| `-OptimizeNoneAttr 0x5576568b4688 <col:30>
|-CXXMethodDecl 0x5576568b4740 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576568b46b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568b4888 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576568b47f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568b49b8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x5576568b4ae8 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x5576568b4bb8 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x5576568b4c88 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x5576568b4dc8 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576568b4d38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568b4f10 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576568b4e80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568b5058 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x5576568b4fc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576568b5110 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5576568b5210 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5576568b5180 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576568b52c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5576568b5388 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x5576568b5488 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x5576568b5638 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5576568b5548 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x5576568b5df8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5576568b56f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x5576568b5d58 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x5576568b5c58 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x5576568b5ed8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576568b6028 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x5576568b5f98 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5576568b60e0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5576568b6328 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568b61a0 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5576568b6218 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x5576568b64e8 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x5576568b63f8 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5576568b6768 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x5576568b65e0 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x5576568b6658 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x5576568b6828 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5576568b6a88 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x5576568b6990 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x5576568b6b58 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5576568b6b58

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576568b8040 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x5576568b8218 prev 0x5576568b8040 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5576568b82a8 <col:46, col:52> col:46 public
|-TypedefDecl 0x5576568b82d0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576568b9ea0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x5576568b9e50 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x5576568b8780 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x5576568b8680 'type'
|     `-TemplateSpecializationType 0x5576568b8610 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5576568b84f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x5576568b84d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5576568b84b0 <col:24> 'unsigned long' 24
|       `-RecordType 0x5576568b85f0 'char_array<24>'
|         `-ClassTemplateSpecialization 0x5576568b8510 'char_array'
|-TypedefDecl 0x5576568b9f58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x5576568b9f20 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x5576568b9f00 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x5576568b9ea0 'type'
|     `-ElaboratedType 0x5576568b9e50 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x5576568b8780 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x5576568b8680 'type'
|         `-TemplateSpecializationType 0x5576568b8610 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5576568b84f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x5576568b84d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5576568b84b0 <col:24> 'unsigned long' 24
|           `-RecordType 0x5576568b85f0 'char_array<24>'
|             `-ClassTemplateSpecialization 0x5576568b8510 'char_array'
|-CXXMethodDecl 0x5576568ba0d8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x5576568b9fe8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x5576568ba1c8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5576568ba2a8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5576568ba2a8
|-CXXMethodDecl 0x5576568ba578 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5576568ba480 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x5576568ba7b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5576568ba630 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576568ba6a8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568ba988 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5576568ba878 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576568ba8f0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568baae8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5576568babb8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x5576568bae08 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5576568bac78 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5576568bacf0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568bb068 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x5576568baed8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x5576568baf50 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568bb228 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5576568bb138 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568bb3e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x5576568bb2f0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568bb4a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576568bb550 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5576568bb788 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x5576568bb600 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576568bb678 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x5576568bba28 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x5576568bb930 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x5576568bbaf0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x5576568bbb40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5576568bbb90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576568b6ca0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x5576568b6ea8 prev 0x5576568b6ca0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5576568b7fb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x5576568b7f60 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x5576568b7f40 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x5576568b7df0 'type'
|     `-SubstTemplateTypeParmType 0x5576568b7c10 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x5576564ae4f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564ae498 'T'
|       `-RecordType 0x55765659fbd0 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x55765659fae8 'sized_array_memory'
|-FieldDecl 0x5576568bbbe0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x5576568bbc30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5576568bbc68 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55765655f340 'T'
|   `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bbd28 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5576568bbcf0 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bbde8 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5576568bbdb0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5576568b6f41 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bbe78 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x5576568bbe40 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bbf38 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5576568bbf00 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5576568b6f41 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bcb90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x5576568bcb40 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x5576568bcb20 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x5576568bca58 'type'
|     `-LValueReferenceType 0x5576568bca20 'const SelectSet::SelectorInfo &'
|       `-QualType 0x5576568bc7c1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x5576568bc7c0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x5576564b7ad0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5576564b7a78 'T'
|           `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bcbf8 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x5576568bbdb0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x5576568b6f41 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bcc50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576568bccb8 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x5576568bbe40 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x5576568af660 'SelectorInfo'
|-TypedefDecl 0x5576568bcd20 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x5576568bbf00 'const SelectSet::SelectorInfo *'
|   `-QualType 0x5576568b6f41 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x5576568b6f40 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x5576568af6f0 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x5576568af660 'SelectorInfo'
|-EnumDecl 0x5576568bcd78 <line:134:5> col:5
| `-EnumConstantDecl 0x5576568bce70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5576568bce50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656560558 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656560530 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656560510 <col:40> 'int' 1
|-CXXConstructorDecl 0x5576568bcef8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5576568bd188 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568bcfb0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568bd050 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x5576568bd448 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5576568bd330 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x5576568bd708 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5576568bd5f0 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5576568bda50 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5576568bd930 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x5576568bdd60 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x5576568bdc40 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x5576568be050 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568bde98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568bdf10 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5576568be1a8 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5576568be288 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568be2e0 <col:30> Inherited
|-CXXMethodDecl 0x5576568be328 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x5576568be3d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568be430 <col:30> Inherited
|-CXXMethodDecl 0x5576568be4f8 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5576568be5a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568be620 <col:30> Inherited
|-CXXMethodDecl 0x5576568be668 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5576568be718 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568be770 <col:30> Inherited
|-CXXMethodDecl 0x5576568be7b8 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5576568be868 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568be8c0 <col:30> Inherited
|-CXXMethodDecl 0x5576568be908 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x5576568be9b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576568bea10 <col:30> Inherited
|-CXXMethodDecl 0x5576568bea38 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576568beae8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576568beb98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5576568bed58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568bec48 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576568becc0 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5576568beea8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5576568bee18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568bf058 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x5576568bef60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576568bf110 <col:20>
| `-OptimizeNoneAttr 0x5576568bf168 <col:30>
|-CXXMethodDecl 0x5576568bf288 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x5576568bf190 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576568bf340 <col:20>
| `-OptimizeNoneAttr 0x5576568bf398 <col:30>
|-CXXMethodDecl 0x5576568bf450 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576568bf3c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568bf598 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576568bf508 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568bf6c8 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5576568bf7f8 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5576568bf8c8 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x5576568bf998 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x5576568bfad8 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576568bfa48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568bfc20 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576568bfb90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576568bfd68 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x5576568bfcd8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576568bfe20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5576568bff20 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5576568bfe90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576568bffd8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5576568c0098 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x5576568c0198 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x5576568c0348 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5576568c0258 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x5576568c0b08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5576568c0400 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x5576568c0a68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x5576568c0968 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x5576568c0be8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576568c0d38 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x5576568c0ca8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5576568c0df0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5576568c1038 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x5576568c0eb0 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5576568c0f28 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x5576568c11f8 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x5576568c1108 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5576568c1448 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x5576568c12c0 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x5576568c1338 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x5576568c1508 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x5576568c1768 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x5576568c1670 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x5576568c1838 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5576568c1838

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568ae840 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576568ae958 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x5576568ae9e8 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x5576568aea70 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x5576568aeb60 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x5576568aeb60
|-CXXMethodDecl 0x5576568aec60 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x5576568aef00 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5576568aed18 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x5576568aed90 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x5576568aee10 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x5576568af170 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x5576568aefd0 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x5576568af048 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x5576568af0c8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x5576568af2c8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x5576568af238 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x5576568af390 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x5576568c2ee8 <col:34, line:50:5>
|   |-BinaryOperator 0x5576568c28b8 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x5576568c2878 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x5576568afb18
|   | | `-CXXThisExpr 0x5576568c2868 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x5576568c28a8 <col:23> 'bool' true
|   `-CallExpr 0x5576568c2ec0 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x5576568c2ea8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x5576568c2e28 <col:2> 'void (long)' lvalue Function 0x5576568c2d28 'ignore_result' 'void (long)' (FunctionTemplate 0x5576564238e8 'ignore_result')
|     `-CallExpr 0x5576568c2ad0 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x5576568c2ab8 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5576568c2a38 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x55765688c528 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x5576568c2b08 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x5576568c29e0 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x5576568c29c8 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x5576568c2978 <col:22> 'int [2]' lvalue ->_wake_pipe 0x5576568afab8
|       |   |   `-CXXThisExpr 0x5576568c2968 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x5576568c29a8 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x5576568c2b38 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x5576568c2b20 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x5576568c2a00 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x5576568c2b50 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x5576568c2a18 <col:41> 'int' 1
|-CXXMethodDecl 0x5576568af4d0 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5576568af440 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5576568af598 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x5576568af638 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x5576568af660 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5576568af778 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x5576568af818 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x5576568af878 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x5576568af8e0 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x5576568af990 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x5576568af818 'read' 'Element *'
|   | `-ImplicitCastExpr 0x5576568c2f48 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5576568c2f08 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x5576568af878 'write' 'Element *'
|   | `-ImplicitCastExpr 0x5576568c2fc8 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x5576568c2f88 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x5576568af8e0 'pollfd' 'int'
|   | `-UnaryOperator 0x5576568c3028 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x5576568c3008 <col:35> 'int' 1
|   `-CompoundStmt 0x5576568c30a0 <line:64:2, line:65:2>
|-FieldDecl 0x5576568afab8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x5576568afb18 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x5576568b6c40 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x5576568c1920 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x5576568c1b58 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x5576568c1988 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x5576568c1a00 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x5576568c1a78 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x5576568c1d40 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x5576568c1c28 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x5576568c1ca8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x5576568c1f88 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x5576568c1e08 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x5576568c1e88 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x5576568c2198 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x5576568c2048 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x5576568c20c0 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x5576568c22e8 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x5576568c2258 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x5576568c23b0 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x5576568c2470 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x5576568c2538 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x5576568c2538
| `-ParmVarDecl 0x5576568c2648 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x5576568c26e8 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x5576568c26e8
  `-ParmVarDecl 0x5576568c27f8 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765684a9d8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55765684aaf8 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x55765684ab88 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x55765684ac10 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x55765684ad00 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x55765684ae00 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x55765684aec0 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x55765684af80 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x55765684b068 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x55765684b188 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x55765684b188
| `-ParmVarDecl 0x55765684b298 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x5576568cb4e8 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x5576568cb4e8
  `-ParmVarDecl 0x5576568cb5f8 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568531a8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576568532c8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x557656853368 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x5576568533c8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x5576568caae8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5576568caae8
| `-ParmVarDecl 0x5576568cabf8 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x5576568cac98 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5576568cac98
| `-ParmVarDecl 0x5576568cada8 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x5576568cae18 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5576568cb698 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5576568cb698
| `-ParmVarDecl 0x5576568cb7a8 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x5576568cb818 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5576568cb818
| `-ParmVarDecl 0x5576568cb928 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x5576568d3038 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x5576568d3110 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765684c8d0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55765684c9e8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x55765684ca78 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x55765684cb00 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x55765684cbc0 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x557656206370 'int'
|-CXXMethodDecl 0x55765684cc88 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x55765684cd28 <col:45> always_inline
|-CXXMethodDecl 0x55765684ce58 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x55765684cd90 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x55765684cf00 <col:49> always_inline
|-CXXConstructorDecl 0x55765684cff8 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x55765684cff8
| `-ParmVarDecl 0x55765684d108 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x55765684d1a8 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x55765684d1a8
| `-ParmVarDecl 0x55765684d2b8 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x5576568caf00 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x5576568caf00
|-CXXMethodDecl 0x5576568cb9c8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x5576568cb9c8
| `-ParmVarDecl 0x5576568cbad8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x5576568cbb48 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x5576568cbb48
  `-ParmVarDecl 0x5576568cbc58 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568c3510 prev 0x5576568ae7b0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5576568c3608 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x5576568c3698 <col:22, col:28> col:22 public
|-EnumDecl 0x5576568c36c0 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x5576568c37d8 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x5576568c37b8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x5576568c37a0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x5576568c3780 <col:32> 'int' 1
| `-EnumConstantDecl 0x5576568c3880 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x5576568c3860 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x5576568c3848 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x5576568c3828 <col:53> 'int' 1000
|-CXXMethodDecl 0x5576568c3920 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x5576568c39e0 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5576568c3ac8 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x5576568cbd18 <col:34, col:52>
|   `-ReturnStmt 0x5576568cbd08 <col:36, col:43>
|     `-MemberExpr 0x5576568cbcd8 <col:43> 'TimerSet' lvalue ->_timers 0x5576568c5798
|       `-CXXThisExpr 0x5576568cbcc8 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5576568c3bb8 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x5576568cbd80 <col:46, col:64>
|   `-ReturnStmt 0x5576568cbd70 <col:48, col:55>
|     `-MemberExpr 0x5576568cbd40 <col:55> 'const TimerSet' lvalue ->_timers 0x5576568c5798
|       `-CXXThisExpr 0x5576568cbd30 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5576568c3ca8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x5576568cbde8 <col:36, col:55>
|   `-ReturnStmt 0x5576568cbdd8 <col:38, col:45>
|     `-MemberExpr 0x5576568cbda8 <col:45> 'SelectSet' lvalue ->_selects 0x5576568c57f8
|       `-CXXThisExpr 0x5576568cbd98 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x5576568c3d98 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x5576568cbe50 <col:48, col:67>
|   `-ReturnStmt 0x5576568cbe40 <col:50, col:57>
|     `-MemberExpr 0x5576568cbe10 <col:57> 'const SelectSet' lvalue ->_selects 0x5576568c57f8
|       `-CXXThisExpr 0x5576568cbe00 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5576568c3e58 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5576568c3f48 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x5576568c40b8 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x5576568c3ff8 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x5576568c4180 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x5576568c45c8 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x5576568c4230 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x5576568c44b0 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x5576568c4698 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x5576568c4758 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x5576568c4818 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x5576568c4958 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x5576568c48c8 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x5576568c4a20 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x5576568c4ae0 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x5576568c4ba0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x5576568c4c60 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x5576568c4da0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x5576568c4d10 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x5576568c4e68 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x5576568c4f28 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x5576568c4fc8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x5576568c5090 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c50e0 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c5130 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c5180 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c51d0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c5220 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c5270 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c52c0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c5310 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x5576568c5360 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x5576568c53b0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x5576568c54a8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x5576568c5418 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x5576568c55f8 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x5576568c5568 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x5576568c56a0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x5576568c56d8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x5576568c5738 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x5576568c5798 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x5576568c57f8 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x5576568c5878 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x5576568c58e8 <col:40, col:50> aligned
|   `-ConstantExpr 0x5576568c58c8 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x5576568c5848 <col:48> 'int' 64
|-FieldDecl 0x5576568c5958 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x5576568c59b8 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x5576568c5ab0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x5576568c5bc0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x5576568c5c20 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x5576568c5ca0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x5576568c5d10 <col:36, col:46> aligned
|   `-ConstantExpr 0x5576568c5cf0 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x5576568c5c70 <col:44> 'int' 64
|-FieldDecl 0x5576568c5d88 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x5576568c5de8 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x5576568c5e38 <line:170:3, col:9> col:3 public
|-FieldDecl 0x5576568c5e78 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x5576568c5ee0 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x5576568c5f30 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x5576568c60d8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x5576568c5f68 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x5576568c5fe8 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x5576568c61d8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x5576568c61d8
|-CXXMethodDecl 0x5576568c62e0 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x5576568c63a8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x5576568cbf48 <col:34, line:217:5>
|   `-ReturnStmt 0x5576568cbf38 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x5576568cbf20 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x5576568cbef0 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x55765684f430
|         `-ImplicitCastExpr 0x5576568cbed8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x5576568cbea8 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x55765684f3c8
|             `-MemberExpr 0x5576568cbe78 <col:16> 'const TaskLink' lvalue ->_task_link 0x5576568c56d8
|               `-CXXThisExpr 0x5576568cbe68 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x5576568c6468 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x5576568c6528 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x5576568cc670 <col:39, line:226:5>
|   |-DeclStmt 0x5576568cc198 <line:223:9, col:68>
|   | `-VarDecl 0x5576568cbf70 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x5576568cc150 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x5576568cc120 <col:24, col:38> '<bound member function type>' .compare_swap 0x557656430e80
|   |     | `-MemberExpr 0x5576568cbfe8 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x5576568c5958
|   |     |   `-CXXThisExpr 0x5576568cbfd8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x5576568cc0d8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x5576568cc0c0 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x5576568cc098 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x5576568cc078 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x5576568cc180 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x5576568cc100 <col:66> 'int' 0
|   |-CStyleCastExpr 0x5576568cc1e0 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5576568cc1b0 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x5576568cbf70 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x5576568cc650 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x5576568cc620 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x5576568cc2f8 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x5576568cc2c8 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x5576568cc2b0 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x5576568cc208 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x5576568cbf70 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x5576568cc288 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x5576568cc270 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x5576568cc248 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x5576568cc228 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x5576568cc358 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x5576568cc338 <col:60> 'int' 0
|       `-CallExpr 0x5576568cc580 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x5576568cc568 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x5576568cc548 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x5576568cc5c0 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5576568cc448 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x5576568cc5d8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x5576568cc478 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x5576568cc5f0 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x5576568cc4b8 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x5576568cc608 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x5576568cc530 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x5576568cc518 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x5576568cc4d8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x5576568c9ec0 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x5576568c9e30 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x5576568c9f88 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x5576568ca048 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x5576568ca108 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x5576568ca1c8 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x5576568ca288 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x5576568ca380 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x5576568ca3e0 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x5576568ca470 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x5576568ca838 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x5576568ca838
| `-ParmVarDecl 0x5576568ca948 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x5576568cb008 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x5576568cb008
  `-ParmVarDecl 0x5576568cb118 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765684f740 prev 0x557656830710 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x55765684f878 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x55765684f908 <col:33, col:39> col:33 public
|-EnumDecl 0x55765684f930 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x55765684fa70 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x55765684fa50 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x55765684fa30 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x55765684f9f0 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x55765684fa10 <col:26> 'int' 16
| `-EnumConstantDecl 0x55765684fb40 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x55765684fb20 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x55765684fb00 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x55765684fac0 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x55765684fae0 <col:47> 'int' 31
|-EnumDecl 0x55765684fb90 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x55765684fcd0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x55765684fdf0 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765684fcb0 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x55765684fc90 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x55765684fc50 <col:26> 'int' 1
| |       `-IntegerLiteral 0x55765684fc70 <col:29> 'int' 15
| `-EnumConstantDecl 0x55765684fda0 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x55765684fe08 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765684fd80 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x55765684fd60 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x55765684fd20 <col:51> 'int' 1
|         `-IntegerLiteral 0x55765684fd40 <col:54> 'int' 10
|-CXXConstructorDecl 0x55765684ffd8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x55765684fe30 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x55765684feb0 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x557656850168 <line:86:5, col:27> col:12 used Task 'void (Element *)' inline
| `-ParmVarDecl 0x5576568500a0 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x557656850260 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x5576568503e8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x557656854308 <col:42, line:100:5>
|   `-ReturnStmt 0x5576568542f8 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x5576568542e0 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x5576568542b0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x557656853030
|         `-CXXThisExpr 0x5576568542a0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x5576568504b0 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x557656854388 <col:36, line:105:5>
|   `-ReturnStmt 0x557656854378 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x557656854360 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x557656854330 <col:16> 'void *const' lvalue ->_thunk 0x557656853098
|         `-CXXThisExpr 0x557656854320 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x557656850570 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x557656854408 <col:37, line:110:5>
|   `-ReturnStmt 0x5576568543f8 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x5576568543e0 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x5576568543b0 <col:16> 'Element *const' lvalue ->_owner 0x557656853158
|         `-CXXThisExpr 0x5576568543a0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x557656851410 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x5576568514d8 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x557656851598 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x557656851658 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x5576568544f0 <col:35, line:137:5>
|   `-ReturnStmt 0x5576568544e0 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x5576568544a8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x557656854478 <col:16, col:24> '<bound member function type>' ->router 0x557656841bd0
|         `-ImplicitCastExpr 0x5576568544c8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x557656854460 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x557656854430 <col:16> 'Element *const' lvalue ->_owner 0x557656853158
|               `-CXXThisExpr 0x557656854420 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x557656851718 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x557656851918 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x5576568517c8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x557656851840 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x557656851b28 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x5576568519d8 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x557656851a50 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x557656851bf8 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x557656854600 <col:35, line:181:5>
|   `-ReturnStmt 0x5576568545f0 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x5576568545d8 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x5576568545c0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x557656854590 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x557656852c68
|           `-MemberExpr 0x557656854548 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|             `-MemberExpr 0x557656854518 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x557656852fb8
|               `-CXXThisExpr 0x557656854508 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x557656851cb8 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x557656854718 <col:30, line:192:5>
|   `-BinaryOperator 0x5576568546f8 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x5576568546a0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x557656852c68
|     | `-MemberExpr 0x557656854658 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|     |   `-MemberExpr 0x557656854628 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x557656852fb8
|     |     `-CXXThisExpr 0x557656854618 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x5576568546e0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x5576568546d0 <col:32> 'bool' false
|-CXXMethodDecl 0x557656851d78 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x557656854a68 <col:30, line:206:5>
|   |-BinaryOperator 0x557656854810 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x5576568547b8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x557656852c68
|   | | `-MemberExpr 0x557656854770 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|   | |   `-MemberExpr 0x557656854740 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x557656852fb8
|   | |     `-CXXThisExpr 0x557656854730 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x5576568547f8 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x5576568547e8 <col:32> 'bool' true
|   |-CallExpr 0x5576568548b0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x557656854898 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x557656854878 <col:9> 'void ()' lvalue Function 0x55765684a590 'click_fence' 'void ()'
|   `-IfStmt 0x557656854a50 <line:204:9, line:205:32>
|     |-BinaryOperator 0x557656854990 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x557656854960 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x557656854910 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x5576568533c8
|     | |   `-MemberExpr 0x5576568548e0 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x557656853440
|     | |     `-CXXThisExpr 0x5576568548d0 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x557656854978 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x557656854940 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x557656854a10 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x5576568549c0 <col:13> '<bound member function type>' ->complete_schedule 0x557656853e40
|       | `-CXXThisExpr 0x5576568549b0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x557656854a38 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x5576568549f0 <col:31> 'int' 0
|-CXXMethodDecl 0x557656851e38 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x557656854b90 <col:35, line:240:5>
|   `-BinaryOperator 0x557656854b70 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x557656854b18 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x557656852c68
|     | `-MemberExpr 0x557656854ad0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|     |   `-MemberExpr 0x557656854aa0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x557656852fb8
|     |     `-CXXThisExpr 0x557656854a90 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x557656854b58 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x557656854b48 <col:32> 'bool' true
|-CXXMethodDecl 0x557656851ef8 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x557656854da8 <col:37, line:253:5>
|   |-BinaryOperator 0x557656854c88 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x557656854c30 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x557656852c68
|   | | `-MemberExpr 0x557656854be8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|   | |   `-MemberExpr 0x557656854bb8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x557656852fb8
|   | |     `-CXXThisExpr 0x557656854ba8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x557656854c70 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x557656854c60 <col:32> 'bool' false
|   `-BinaryOperator 0x557656854d88 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x557656854d30 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x557656852cc8
|     | `-MemberExpr 0x557656854ce8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|     |   `-MemberExpr 0x557656854cb8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x557656852fb8
|     |     `-CXXThisExpr 0x557656854ca8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x557656854d70 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x557656854d60 <col:41> 'bool' true
|-CXXMethodDecl 0x557656851fb8 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x557656854f28 <col:37, line:264:5>
|   |-BinaryOperator 0x557656854ea8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x557656854e50 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x557656852cc8
|   | | `-MemberExpr 0x557656854e08 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x557656852d88
|   | |   `-MemberExpr 0x557656854dd8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x557656852fb8
|   | |     `-CXXThisExpr 0x557656854dc8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x557656854e90 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x557656854e80 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x557656854f08 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x557656854ed8 <col:9> '<bound member function type>' ->reschedule 0x557656851d78
|       `-CXXThisExpr 0x557656854ec8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x557656852100 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x557656852070 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x5576568521d0 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x557656852318 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x557656852288 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x557656852468 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x5576568523d8 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x557656852530 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x5576568525f0 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x557656852690 <col:53> "" ""
|-CXXMethodDecl 0x557656852728 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x5576568527c8 <col:47> "" ""
|-AccessSpecDecl 0x557656852838 <line:303:3, col:10> col:3 private
|-FieldDecl 0x557656852878 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x5576568528e0 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x557656852930 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557656852a48 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x557656852ad8 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x557656852c08 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x557656852c68 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x557656852cc8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x5576568d16c8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x5576568d17a0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x5576568d1a58 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x5576568d1a58
| | | `-ParmVarDecl 0x5576568d1b68 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x5576568d1c08 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x5576568d1c08
| |   `-ParmVarDecl 0x5576568d1d18 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x557656852d88 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x557656852de8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x557656852d88 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x557656852c08 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x557656852e40 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x557656852d88 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x557656852c68 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x557656852e98 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x557656852d88 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x557656852cc8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x557656852ef0 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x5576568d15d8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5576568d2fd8 <col:11>
| |-CXXConstructorDecl 0x5576568d18a8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x5576568d18a8
| | `-ParmVarDecl 0x5576568d19b8 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x5576568d2e50 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x5576568d2e50
| | `-ParmVarDecl 0x5576568d2f68 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x557656908f40 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x557656852fb8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x557656853030 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x557656853098 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x5576568530f8 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x557656853158 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x5576568531a8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576568532c8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x557656853368 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x5576568533c8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x5576568caae8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5576568caae8
| | `-ParmVarDecl 0x5576568cabf8 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x5576568cac98 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5576568cac98
| | `-ParmVarDecl 0x5576568cada8 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x5576568cae18 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5576568cb698 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x5576568cb698
| | `-ParmVarDecl 0x5576568cb7a8 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x5576568cb818 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x5576568cb818
| | `-ParmVarDecl 0x5576568cb928 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x5576568d3038 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x5576568d3110 <col:11>
|-FieldDecl 0x557656853440 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x557656853588 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x5576568534c8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x557656853738 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x557656853648 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x557656853800 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x5576568538c0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x557656853980 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x557656855038 <col:41, line:355:5>
|   `-ReturnStmt 0x557656855028 <line:354:9, col:38>
|     `-BinaryOperator 0x557656855008 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x557656854fd8 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x557656854f88 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x5576568533c8
|       |   `-MemberExpr 0x557656854f58 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x557656853440
|       |     `-CXXThisExpr 0x557656854f48 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x557656854ff0 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x557656854fb8 <col:38> 'int' 0
|-CXXMethodDecl 0x557656853a40 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x557656853b80 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x557656853af0 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x557656853cf8 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x557656853c38 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x557656853e40 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x557656853db0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x557656853f08 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x5576568540d0 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x557656853fb8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x557656854038 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x5576568541d0 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x557656854260 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656858b38 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x557656858c68 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x557656865158 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656855438 prev 0x5576568307c0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656855530 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x5576568555c0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x557656855620 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x5576568556c8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5576568557e8 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x5576569089d8 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x5576569089d8
| |-CXXConstructorDecl 0x557656908ab0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x557656908ab0
| | `-ParmVarDecl 0x557656908b98 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x557656908c38 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x557656908c38
|   `-ParmVarDecl 0x557656908d48 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x557656855988 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x5576568558c8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x557656855bd8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x557656855a48 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x557656855ac8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x557656855d30 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x557656855ca0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x557656855eb8 <line:47:5, col:21> col:5 used Timer 'void (Task *)'
| `-ParmVarDecl 0x557656855df0 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x557656856068 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x557656855fa8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x557656856160 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x557656865330 <col:21, line:58:5>
|   `-IfStmt 0x557656865318 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x557656865280 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x557656865250 <col:6> '<bound member function type>' ->scheduled 0x5576568569b8
|     |   `-ImplicitCastExpr 0x5576568652a0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x557656865240 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x5576568652f8 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x5576568652c8 <col:6> '<bound member function type>' ->unschedule 0x557656857fe0
|         `-CXXThisExpr 0x5576568652b8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x557656856260 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x5576568654d0 <col:26, line:65:5>
|   |-BinaryOperator 0x5576568653f0 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x557656865388 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x557656858c68
|   | | `-MemberExpr 0x557656865358 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x557656858d28
|   | |   `-CXXThisExpr 0x557656865348 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576568653d8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5576568653b8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x557656859188 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x5576568654b0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x557656865420 <col:2> 'void *' lvalue ->_thunk 0x557656858da8
|     | `-CXXThisExpr 0x557656865410 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x557656865488 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x557656865450 <col:20> 'int' 1
|-CXXMethodDecl 0x5576568563a0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x557656856310 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x557656865630 <col:52, line:71:5>
|   |-CStyleCastExpr 0x557656865520 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x5576568654f0 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x557656856310 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x557656865610 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x5576568655e0 <col:2> '<bound member function type>' ->assign 0x557656856260
|       `-CXXThisExpr 0x5576568655d0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x557656856570 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x557656856458 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x5576568564d8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x5576568657b0 <col:58, line:79:5>
|   |-BinaryOperator 0x5576568656f8 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x557656865690 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x557656858c68
|   | | `-MemberExpr 0x557656865660 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x557656858d28
|   | |   `-CXXThisExpr 0x557656865650 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576568656e0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576568656c0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x557656856458 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x557656865790 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x557656865728 <col:2> 'void *' lvalue ->_thunk 0x557656858da8
|     | `-CXXThisExpr 0x557656865718 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x557656865778 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x557656865758 <col:11> 'void *' lvalue ParmVar 0x5576568564d8 'user_data' 'void *'
|-CXXMethodDecl 0x5576568566c0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x557656856630 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x557656865948 <col:35, line:87:5>
|   |-BinaryOperator 0x557656865878 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x557656865810 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x557656858c68
|   | | `-MemberExpr 0x5576568657e0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x557656858d28
|   | |   `-CXXThisExpr 0x5576568657d0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x557656865860 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x557656865840 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x557656859360 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x557656865928 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x5576568658a8 <col:2> 'void *' lvalue ->_thunk 0x557656858da8
|     | `-CXXThisExpr 0x557656865898 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x557656865910 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x5576568658f8 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x5576568658d8 <col:11> 'Element *' lvalue ParmVar 0x557656856630 'element' 'Element *'
|-CXXMethodDecl 0x557656856808 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x557656856778 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x557656865ae0 <col:29, line:94:5>
|   |-BinaryOperator 0x557656865a10 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x5576568659a8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x557656858c68
|   | | `-MemberExpr 0x557656865978 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x557656858d28
|   | |   `-CXXThisExpr 0x557656865968 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x5576568659f8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x5576568659d8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x557656864f38 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x557656865ac0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x557656865a40 <col:2> 'void *' lvalue ->_thunk 0x557656858da8
|     | `-CXXThisExpr 0x557656865a30 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x557656865aa8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x557656865a90 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x557656865a70 <col:11> 'Task *' lvalue ParmVar 0x557656856778 'task' 'Task *'
|-CXXMethodDecl 0x5576568568f8 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x557656865bc0 <col:37, line:100:5>
|   `-ReturnStmt 0x557656865bb0 <line:99:2, col:19>
|     `-BinaryOperator 0x557656865b90 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x557656865b60 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x557656865b10 <col:9> 'Element *const' lvalue ->_owner 0x557656858e08
|       |   `-CXXThisExpr 0x557656865b00 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x557656865b78 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x557656865b40 <col:19> 'int' 0
|-CXXMethodDecl 0x5576568569b8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x557656865c80 <col:35, line:105:5>
|   `-ReturnStmt 0x557656865c70 <line:104:2, col:23>
|     `-BinaryOperator 0x557656865c50 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x557656865c38 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x557656865be8 <col:9> 'const int' lvalue ->_schedpos1 0x557656858a88
|       |   `-CXXThisExpr 0x557656865bd8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x557656865c18 <col:23> 'int' 0
|-CXXMethodDecl 0x557656856a78 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x557656865ce8 <col:51, line:118:5>
|   `-ReturnStmt 0x557656865cd8 <line:117:2, col:9>
|     `-MemberExpr 0x557656865ca8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x557656858ae8
|       `-CXXThisExpr 0x557656865c98 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x557656856b38 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x557656866240 <col:37, line:136:5>
|   `-IfStmt 0x557656866218 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x557656865da8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x557656865d90 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x557656865d70 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x557656865d40 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x557656621108
|     |       `-MemberExpr 0x557656865d10 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x557656858ae8
|     |         `-CXXThisExpr 0x557656865d00 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x557656866188 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x557656866170 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x557656866140 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x557656866128 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x5576568660f0 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x5576568660d8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x5576568660b8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55765675cf00 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x557656866058 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x557656866040 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x557656865f68 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x557656865f50 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x557656865f30 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55765675cbb8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x557656865ed0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x557656865dd0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x557656858ae8
|     |         |     |   `-CXXThisExpr 0x557656865dc0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x557656865f18 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x557656865f00 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x557656865eb0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x557656865e98 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x557656865e38 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x5576565b0c70 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x5576568660a0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x557656866088 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x557656866020 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x557656866008 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x557656865fd8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x5576565b1940 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x557656866208 <line:135:6, col:13>
|       `-CXXConstructExpr 0x5576568661d8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x5576568661a8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x557656858ae8
|           `-CXXThisExpr 0x557656866198 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x557656856bf8 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x557656866328 <col:35, line:141:5>
|   `-ReturnStmt 0x557656866318 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x5576568662e0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x5576568662b0 <col:9, col:17> '<bound member function type>' ->router 0x557656841bd0
|         `-ImplicitCastExpr 0x557656866300 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x557656866298 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x557656866268 <col:9> 'Element *const' lvalue ->_owner 0x557656858e08
|               `-CXXThisExpr 0x557656866258 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x557656856cb8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x5576568663a8 <col:37, line:146:5>
|   `-ReturnStmt 0x557656866398 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x557656866380 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x557656866350 <col:9> 'Element *const' lvalue ->_owner 0x557656858e08
|         `-CXXThisExpr 0x557656866340 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x557656856d78 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x557656866428 <col:41, line:151:5>
|   `-ReturnStmt 0x557656866418 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x557656866400 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x5576568663d0 <col:9> 'RouterThread *const' lvalue ->_thread 0x557656858e68
|         `-CXXThisExpr 0x5576568663c0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x557656856e40 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x557656857000 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x557656856ef0 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x557656856f68 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557656865148 <col:50> 'bool' false
|-CXXMethodDecl 0x557656857188 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x5576568570c0 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x5576568572d0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x557656857240 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x557656857418 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x557656857388 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x557656857560 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5576568574d0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x5576568576a8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x557656857618 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x557656857770 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x557656866590 <col:32, line:223:5>
|   `-ExprWithCleanups 0x557656866578 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x557656866520 <col:2, col:47> 'void'
|       |-MemberExpr 0x557656866450 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576568572d0
|       | `-CXXThisExpr 0x557656866440 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557656866560 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557656866548 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x557656866500 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x5576568664e8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x5576568664b8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x5576565b1940 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x5576568578b0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x557656857820 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x5576568579f8 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656857968 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656866718 <col:56, line:241:5>
|   `-ExprWithCleanups 0x557656866700 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x5576568666a8 <col:2, col:40> 'void'
|       |-MemberExpr 0x5576568665b8 <col:2> '<bound member function type>' ->schedule_after 0x5576568578b0
|       | `-CXXThisExpr 0x5576568665a8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x5576568666e8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x5576568666d0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x557656866668 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x557656866638 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x5576568665f8 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656857968 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x557656866650 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x557656866618 <col:38> 'int' 0
|-CXXMethodDecl 0x557656857b40 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656857ab0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656866988 <col:58, line:249:5>
|   `-ExprWithCleanups 0x557656866970 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x557656866918 <col:2, col:49> 'void'
|       |-MemberExpr 0x557656866740 <col:2> '<bound member function type>' ->schedule_after 0x5576568578b0
|       | `-CXXThisExpr 0x557656866730 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557656866958 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557656866940 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x5576568668c0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x5576568668a8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x557656866818 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x557656622ef8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x557656866900 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x5576568668e8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x5576568667f8 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656857ab0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656857c88 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x557656857bf8 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x557656866b68 <col:58, line:261:5>
|   `-ExprWithCleanups 0x557656866b50 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x557656866af8 <col:2, col:38> 'void'
|       |-MemberExpr 0x5576568669b0 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576568572d0
|       | `-CXXThisExpr 0x5576568669a0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557656866b38 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557656866b20 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x557656866ac0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x557656866aa8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x557656866a88 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55765675cbb8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x557656866a58 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x557656866a40 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x5576568669f0 <col:21> 'Timestamp' lvalue ->_expiry_s 0x557656858ae8
|             |     `-CXXThisExpr 0x5576568669e0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x557656866a20 <col:33> 'const Timestamp' lvalue ParmVar 0x557656857bf8 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x557656857dd0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656857d40 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656866e40 <col:58, line:270:5>
|   `-ExprWithCleanups 0x557656866e28 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x557656866dd0 <col:2, col:79> 'void'
|       |-MemberExpr 0x557656866b90 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576568572d0
|       | `-CXXThisExpr 0x557656866b80 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557656866e10 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557656866df8 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x557656866d90 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x557656866cc8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x557656866cb0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x557656866c40 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x557656866c10 <col:31, col:41> '<bound member function type>' .sec 0x5576565b3438
|             | |     `-ImplicitCastExpr 0x557656866c60 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x557656866be0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x557656858ae8
|             | |         `-CXXThisExpr 0x557656866bd0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x557656866c98 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x557656866c78 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656857d40 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x557656866d58 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x557656866d28 <col:60, col:70> '<bound member function type>' .subsec 0x5576565b3b30
|                 `-ImplicitCastExpr 0x557656866d78 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x557656866cf8 <col:60> 'Timestamp' lvalue ->_expiry_s 0x557656858ae8
|                     `-CXXThisExpr 0x557656866ce8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x557656857f18 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656857e88 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x557656867178 <col:60, line:279:5>
|   `-ExprWithCleanups 0x557656867160 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x557656867108 <col:2, col:65> 'void'
|       |-MemberExpr 0x557656866e68 <col:2> '<bound member function type>' ->schedule_at_steady 0x5576568572d0
|       | `-CXXThisExpr 0x557656866e58 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557656867148 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x557656867130 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x5576568670d0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x5576568670b8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x557656867098 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x55765675cbb8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x557656867038 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x557656867020 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x557656866ea8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x557656858ae8
|             |     `-CXXThisExpr 0x557656866e98 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x557656867080 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x557656867068 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x557656866fc8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x557656866fb0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x557656866f80 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x557656622ef8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x557656867008 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x557656866ff0 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x557656866f60 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x557656857e88 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x557656857fe0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x5576568580a0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x557656867640 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x5576568671d0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x5576568671a0 <col:2> '<bound member function type>' ->unschedule 0x557656857fe0
|   |   `-CXXThisExpr 0x557656867190 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x557656867628 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x5576568675f0 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x5576568675d8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656867288 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x55765680bb78 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x557656867200 <col:2> 'Timestamp' lvalue ->_expiry_s 0x557656858ae8
|       | `-CXXThisExpr 0x5576568671f0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x557656867270 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x557656867240 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x557656858160 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x557656867998 <col:42, line:310:5>
|   |-IfStmt 0x5576568677e0 <line:306:2, line:307:23>
|   | |-CallExpr 0x557656867710 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x5576568676f8 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x557656867698 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x55765674e6e0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x5576568677d0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x5576568677b8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x557656867788 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x557656867770 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x557656867740 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x557656867988 <line:309:2, col:33>
|     `-ExprWithCleanups 0x557656867970 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x557656867940 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x557656867928 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x5576568678e8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x5576568678d0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x5576568678a0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x557656623210 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x557656867910 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x557656867880 <col:30> 'int' 500
|-CXXMethodDecl 0x5576568582a0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656858210 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656858348 <col:69> "" ""
|-CXXMethodDecl 0x557656858458 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x5576568583c8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656858500 <col:70> "" ""
|-CXXMethodDecl 0x557656858610 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656858580 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5576568586b8 <col:71> "" ""
|-CXXMethodDecl 0x5576568587c8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x557656858738 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x557656858870 <col:72> "" ""
|-EnumDecl 0x5576568588e0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x5576568589e0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x557656858a30 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576568589c0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x5576568589a0 <col:25> 'int' 1
|-AccessSpecDecl 0x557656858a48 <line:339:3, col:10> col:3 private
|-FieldDecl 0x557656858a88 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x557656858ae8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x557656858b38 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x557656858c68 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x557656865158 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x557656858d28 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x557656858da8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x557656858e08 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x557656858e68 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x557656858fb8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x557656858ec8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x557656859188 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x557656859070 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x5576568590f0 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x557656859360 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x557656859248 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x5576568592c8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x557656864f38 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x557656864e20 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x557656864ea0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x557656865108 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NotifierSignal::vmpair
         0 |   class atomic_uint32_t * value
         8 |   uint32_t mask
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568d8ed8 <../dummy_inc/click/notifier.hh:50:5, line:53:5> line:50:12 referenced struct vmpair definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576568d8ff8 <col:5, col:12> col:12 implicit struct vmpair
|-FieldDecl 0x5576568d9098 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
|-FieldDecl 0x5576568d90f8 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x5576568e3df8 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x5576568e3df8

Layout: <CGRecordLayout
  LLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  NonVirtualBaseLLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568d9160 <../dummy_inc/click/notifier.hh:54:5, line:57:5> line:54:11 referenced union vmvalue definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576568d9278 <col:5, col:11> col:11 implicit union vmvalue
|-FieldDecl 0x5576568d9318 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
|-FieldDecl 0x5576568d93a8 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
|-CXXConstructorDecl 0x5576568e2990 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5576568e2dc8 <col:11>
|-CXXConstructorDecl 0x5576568e2a98 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x5576568e2a98
| `-ParmVarDecl 0x5576568e2ba8 <col:11> col:11 'const NotifierSignal::vmvalue &'
|-CXXConstructorDecl 0x5576568e2c48 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x5576568e2c48
| `-ParmVarDecl 0x5576568e2d58 <col:11> col:11 'NotifierSignal::vmvalue &&'
`-CXXDestructorDecl 0x5576568e3ac0 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.NotifierSignal::vmvalue" = type { %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568d6e10 prev 0x557656830870 <../dummy_inc/click/notifier.hh:12:1, line:71:1> line:12:7 referenced class NotifierSignal definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5576568d6f08 <col:1, col:7> col:7 implicit referenced class NotifierSignal
|-AccessSpecDecl 0x5576568d6f98 <line:13:3, col:9> col:3 public
|-TypedefDecl 0x5576568d70c8 <line:14:5, col:61> col:36 referenced unspecified_bool_type 'bool (NotifierSignal::*)() const'
| `-MemberPointerType 0x5576568d7040 'bool (NotifierSignal::*)() const'
|   |-RecordType 0x557656830900 'NotifierSignal'
|   | `-CXXRecord 0x5576568d6e10 'NotifierSignal'
|   `-ParenType 0x5576568d6fe0 'bool () const' sugar
|     `-FunctionProtoType 0x5576562b17c0 'bool () const' const cdecl
|       `-BuiltinType 0x5576562062f0 'bool'
|-CXXConstructorDecl 0x5576568d7158 <line:16:5, col:27> col:12 used NotifierSignal 'void ()' inline
|-CXXConstructorDecl 0x5576568d7398 <line:17:5, col:64> col:12 used NotifierSignal 'void (atomic_uint32_t *, uint32_t)' inline
| |-ParmVarDecl 0x5576568d7210 <col:27, col:44> col:44 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x5576568d7288 <col:51, col:60> col:60 mask 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x5576568d7548 <line:18:5, col:50> col:12 used NotifierSignal 'void (const NotifierSignal &)' inline
| `-ParmVarDecl 0x5576568d7488 <col:27, col:49> col:49 x 'const NotifierSignal &'
|-CXXDestructorDecl 0x5576568d7640 <line:19:5, col:28> col:12 used ~NotifierSignal 'void () noexcept' inline
|-CXXMethodDecl 0x5576568d7768 <line:21:5, col:46> col:34 idle_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5576568d7828 <line:22:5, col:46> col:34 busy_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5576568d78e8 <line:23:5, col:53> col:34 overderived_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5576568d79a8 <line:24:5, col:55> col:34 used uninitialized_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x5576568d7a98 <line:26:5, col:26> col:17 used active 'bool () const' inline
|-CXXConversionDecl 0x5576568d7c08 <line:27:5, col:45> col:12 operator bool (NotifierSignal::*)() const 'NotifierSignal::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5576568d7d88 <line:29:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x5576568d7cc8 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x5576568d7e50 <line:31:5, col:24> col:17 idle 'bool () const' inline
|-CXXMethodDecl 0x5576568d7f10 <line:32:5, col:24> col:17 busy 'bool () const' inline
|-CXXMethodDecl 0x5576568d7fd0 <line:33:5, col:31> col:17 overderived 'bool () const' inline
|-CXXMethodDecl 0x5576568d8090 <line:34:5, col:31> col:17 used initialized 'bool () const' inline
|-FriendDecl 0x5576568d8348 <line:36:5, col:76> col:17
| `-FunctionDecl 0x5576568d8288 parent 0x557656206278 <col:5, col:76> col:17 used operator== 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x5576568d8140 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x5576568d81b8 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-FriendDecl 0x5576568d8568 <line:37:5, col:76> col:17
| `-FunctionDecl 0x5576568d84a8 parent 0x557656206278 <col:5, col:76> col:17 operator!= 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x5576568d8398 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x5576568d8410 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-CXXMethodDecl 0x5576568d86a8 <line:39:5, col:54> col:21 operator= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x5576568d85b8 <col:31, col:53> col:53 x 'const NotifierSignal &'
|-CXXMethodDecl 0x5576568d87f0 <line:40:5, col:55> col:21 used operator+= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x5576568d8760 <col:32, col:54> col:54 x 'const NotifierSignal &'
|-FriendDecl 0x5576568d8ab8 <line:41:5, col:78> col:27
| `-FunctionDecl 0x5576568d89f8 parent 0x557656206278 <col:5, col:78> col:27 operator+ 'NotifierSignal (NotifierSignal, const NotifierSignal &)'
|   |-ParmVarDecl 0x5576568d88a8 <col:37, col:52> col:52 a 'NotifierSignal' destroyed
|   `-ParmVarDecl 0x5576568d8920 <col:55, col:77> col:77 b 'const NotifierSignal &'
|-CXXMethodDecl 0x5576568d8bc8 <line:43:5, col:39> col:17 used swap 'void (NotifierSignal &)' inline
| `-ParmVarDecl 0x5576568d8b08 <col:22, col:38> col:38 x 'NotifierSignal &'
|-CXXMethodDecl 0x5576568d8d48 <line:45:5, col:36> col:12 unparse 'String (Router *) const'
| `-ParmVarDecl 0x5576568d8c80 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x5576568d8e10 <line:47:5, col:35> col:17 static_initialize 'void ()' static
|-AccessSpecDecl 0x5576568d8eb0 <line:49:3, col:10> col:3 private
|-CXXRecordDecl 0x5576568d8ed8 <line:50:5, line:53:5> line:50:12 referenced struct vmpair definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576568d8ff8 <col:5, col:12> col:12 implicit struct vmpair
| |-FieldDecl 0x5576568d9098 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
| |-FieldDecl 0x5576568d90f8 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x5576568e3df8 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x5576568e3df8
|-CXXRecordDecl 0x5576568d9160 <line:54:5, line:57:5> line:54:11 referenced union vmvalue definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5576568d9278 <col:5, col:11> col:11 implicit union vmvalue
| |-FieldDecl 0x5576568d9318 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
| |-FieldDecl 0x5576568d93a8 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
| |-CXXConstructorDecl 0x5576568e2990 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5576568e2dc8 <col:11>
| |-CXXConstructorDecl 0x5576568e2a98 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x5576568e2a98
| | `-ParmVarDecl 0x5576568e2ba8 <col:11> col:11 'const NotifierSignal::vmvalue &'
| |-CXXConstructorDecl 0x5576568e2c48 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x5576568e2c48
| | `-ParmVarDecl 0x5576568e2d58 <col:11> col:11 'NotifierSignal::vmvalue &&'
| `-CXXDestructorDecl 0x5576568e3ac0 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial
|-FieldDecl 0x5576568d9420 <line:59:5, col:13> col:13 referenced _v 'NotifierSignal::vmvalue'
|-FieldDecl 0x5576568d9480 <line:60:5, col:14> col:14 referenced _mask 'uint32_t':'unsigned int'
|-EnumDecl 0x5576568d94d0 <line:62:5, line:65:5> line:62:5
| |-EnumConstantDecl 0x5576568d95d0 <line:63:2, col:14> col:2 referenced true_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x5576568d97d0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568d95b0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5576568d9590 <col:14> 'int' 1
| |-EnumConstantDecl 0x5576568d9660 <col:17, col:30> col:17 referenced false_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x5576568d97e8 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568d9640 <col:30> 'int' Int: 2
| |     `-IntegerLiteral 0x5576568d9620 <col:30> 'int' 2
| |-EnumConstantDecl 0x5576568d96f0 <col:33, col:52> col:33 referenced overderived_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x5576568d9800 <col:52> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568d96d0 <col:52> 'int' Int: 4
| |     `-IntegerLiteral 0x5576568d96b0 <col:52> 'int' 4
| `-EnumConstantDecl 0x5576568d9780 <line:64:2, col:23> col:2 referenced uninitialized_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
|   `-ImplicitCastExpr 0x5576568d9818 <col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5576568d9760 <col:23> 'int' Int: 8
|       `-IntegerLiteral 0x5576568d9740 <col:23> 'int' 8
|-VarDecl 0x5576568d9840 <line:66:5, col:28> col:28 used static_value 'atomic_uint32_t' static
|-CXXMethodDecl 0x5576568d9948 <line:68:5, col:48> col:10 used hard_assign_vm 'void (const NotifierSignal &)'
| `-ParmVarDecl 0x5576568d98b8 <col:25, col:47> col:47 x 'const NotifierSignal &'
|-CXXMethodDecl 0x5576568d9b10 <line:69:5, col:63> col:10 hard_derive_one 'void (atomic_uint32_t *, uint32_t)'
| |-ParmVarDecl 0x5576568d9a00 <col:26, col:43> col:43 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x5576568d9a78 <col:50, col:59> col:59 mask 'uint32_t':'unsigned int'
`-CXXMethodDecl 0x5576568d9d48 <line:70:5, col:61> col:17 used hard_equals 'bool (const NotifierSignal::vmpair *, const NotifierSignal::vmpair *)' static
  |-ParmVarDecl 0x5576568d9bf8 <col:29, col:43> col:43 a 'const NotifierSignal::vmpair *'
  `-ParmVarDecl 0x5576568d9c70 <col:46, col:60> col:60 b 'const NotifierSignal::vmpair *'

Layout: <CGRecordLayout
  LLVMType:%class.NotifierSignal = type <{ %"union.NotifierSignal::vmvalue", i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.NotifierSignal.base = type <{ %"union.NotifierSignal::vmvalue", i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568fd098 <../elements/standard/delayunqueue.hh:35:1, line:58:1> line:35:7 class DelayUnqueue definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5576568fd1f8 <col:1, col:7> col:7 implicit referenced class DelayUnqueue
|-AccessSpecDecl 0x5576568fd288 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x5576568fd310 <line:37:5, col:18> col:5 DelayUnqueue 'void ()'
|-CXXMethodDecl 0x5576568fd410 <line:39:5, col:61> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x557656832288 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5576568fe7a0 <col:36, col:61>
|   `-ReturnStmt 0x5576568fe790 <col:38, col:45>
|     `-ImplicitCastExpr 0x5576568fe778 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5576568fe750 <col:45> 'const char [13]' lvalue "DelayUnqueue"
|-CXXMethodDecl 0x5576568fd4d8 <line:40:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x557656832350 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5576568fe800 <col:36, col:56>
|   `-ReturnStmt 0x5576568fe7f0 <col:38, col:45>
|     `-ImplicitCastExpr 0x5576568fe7d8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5576568fe7b8 <col:45> 'const char []' lvalue Var 0x5576568325a8 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5576568fd5a0 <line:41:5, col:59> col:17 processing 'const char *() const'
| |-Overrides: [ 0x5576568326c0 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x5576568fe860 <col:36, col:59>
|   `-ReturnStmt 0x5576568fe850 <col:38, col:45>
|     `-ImplicitCastExpr 0x5576568fe838 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5576568fe818 <col:45> 'const char []' lvalue Var 0x5576568329a0 'PULL_TO_PUSH' 'const char []'
|-CXXMethodDecl 0x5576568fd870 <line:43:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x557656833980 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5576568fd720 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5576568fd798 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5576568fd9c8 <line:44:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x557656833bd0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x5576568fd930 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x5576568fdb10 <line:45:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x5576568343e8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x5576568fda80 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x5576568fdbd8 <line:46:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x557656833a50 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5576568fdd18 <line:48:5, col:25> col:10 run_task 'bool (Task *)'
| |-Overrides: [ 0x557656831638 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x5576568fdc88 <col:19, col:24> col:25 'Task *'
|-AccessSpecDecl 0x5576568fddc0 <line:50:3, col:10> col:3 private
|-FieldDecl 0x5576568fddf8 <line:52:5, col:13> col:13 _p 'Packet *'
|-FieldDecl 0x5576568fde58 <line:53:5, col:15> col:15 _delay 'Timestamp'
|-FieldDecl 0x5576568fdeb8 <line:54:5, col:10> col:10 referenced _task 'Task'
|-FieldDecl 0x5576568fdf18 <line:55:5, col:11> col:11 _timer 'Timer'
|-FieldDecl 0x5576568fdf78 <line:56:5, col:20> col:20 _signal 'NotifierSignal'
|-CXXConstructorDecl 0x5576568fdff8 <line:35:7> col:7 implicit DelayUnqueue 'void (const DelayUnqueue &)' inline default_delete noexcept-unevaluated 0x5576568fdff8
| `-ParmVarDecl 0x5576568fe108 <col:7> col:7 'const DelayUnqueue &'
|-CXXConstructorDecl 0x5576568fe1a8 <col:7> col:7 implicit DelayUnqueue 'void (DelayUnqueue &&)' inline default_delete noexcept-unevaluated 0x5576568fe1a8
| `-ParmVarDecl 0x5576568fe2b8 <col:7> col:7 'DelayUnqueue &&'
|-CXXMethodDecl 0x5576568fe358 <col:7> col:7 implicit operator= 'DelayUnqueue &(const DelayUnqueue &)' inline default_delete noexcept-unevaluated 0x5576568fe358
| `-ParmVarDecl 0x5576568fe468 <col:7> col:7 'const DelayUnqueue &'
|-CXXMethodDecl 0x5576568fe4d8 <col:7> col:7 implicit operator= 'DelayUnqueue &(DelayUnqueue &&)' inline default_delete noexcept-unevaluated 0x5576568fe4d8
| `-ParmVarDecl 0x5576568fe5e8 <col:7> col:7 'DelayUnqueue &&'
`-CXXDestructorDecl 0x5576568fe670 <col:7> col:7 implicit ~DelayUnqueue 'void ()' inline default noexcept-unevaluated 0x5576568fe670
  `-Overrides: [ 0x557656830e58 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.DelayUnqueue = type { %class.Element.base, %class.Packet*, %class.Timestamp, %class.Task, %class.Timer, %class.NotifierSignal }
  NonVirtualBaseLLVMType:%class.DelayUnqueue = type { %class.Element.base, %class.Packet*, %class.Timestamp, %class.Task, %class.Timer, %class.NotifierSignal }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765644d760 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55765644fa00 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55765644faa0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55765644fb00 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55765644fb60 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55765644fc10 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765644ff20 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x557656450038 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5576564500e0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x557656450148 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5576564501d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x557656454410 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x557656454848 <col:12>
|-CXXConstructorDecl 0x557656454518 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x557656454628 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5576564500e0 'data' 'const char *'
| | `-ImplicitCastExpr 0x557656457500 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5576564574d0 <col:12> 'const char *const' lvalue .data 0x5576564500e0
| |     `-DeclRefExpr 0x5576564574b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656454628 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x557656450148 'length' 'int'
| | `-ImplicitCastExpr 0x557656457590 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x557656457560 <col:12> 'const int' lvalue .length 0x557656450148
| |     `-DeclRefExpr 0x557656457540 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656454628 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5576564501d8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x557656457620 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5576564575f0 <col:12> 'String::memo_t *const' lvalue .memo 0x5576564501d8
| |     `-DeclRefExpr 0x5576564575d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656454628 '' 'const String::rep_t &'
| `-CompoundStmt 0x557656457678 <col:12>
|-CXXConstructorDecl 0x5576564546c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5576564546c8
| `-ParmVarDecl 0x5576564547d8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55765645cc50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5576564685b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5576564686c8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x557656468be0 <col:12>
|   |-BinaryOperator 0x5576564689f8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5576564689b0 <col:12> 'const char *' lvalue ->data 0x5576564500e0
|   | | `-CXXThisExpr 0x5576564689a0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5576564689e0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x557656468970 <col:12> 'const char *const' lvalue .data 0x5576564500e0
|   |     `-DeclRefExpr 0x557656468950 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576564686c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x557656468ac0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x557656468a78 <col:12> 'int' lvalue ->length 0x557656450148
|   | | `-CXXThisExpr 0x557656468a68 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x557656468aa8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x557656468a38 <col:12> 'const int' lvalue .length 0x557656450148
|   |     `-DeclRefExpr 0x557656468a18 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576564686c8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x557656468b88 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x557656468b40 <col:12> 'String::memo_t *' lvalue ->memo 0x5576564501d8
|   | | `-CXXThisExpr 0x557656468b30 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x557656468b70 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x557656468b00 <col:12> 'String::memo_t *const' lvalue .memo 0x5576564501d8
|   |     `-DeclRefExpr 0x557656468ae0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576564686c8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x557656468bd0 <col:12>
|     `-UnaryOperator 0x557656468bb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x557656468ba8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x557656468738 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x557656468738
  `-ParmVarDecl 0x557656468848 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656443e80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656443f98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x557656444028 <col:16, col:22> col:16 public
|-TypedefDecl 0x557656444068 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x557656206dc0 'const char *'
|   `-QualType 0x557656206311 'const char' const
|     `-BuiltinType 0x557656206310 'char'
|-TypedefDecl 0x5576564440f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5576564440c0 'String::const_iterator' sugar
|   |-Typedef 0x557656444068 'const_iterator'
|   `-PointerType 0x557656206dc0 'const char *'
|     `-QualType 0x557656206311 'const char' const
|       `-BuiltinType 0x557656206310 'char'
|-TypedefDecl 0x557656444290 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x557656444200 'int (String::*)() const'
|   |-RecordType 0x557656443f10 'String'
|   | `-CXXRecord 0x557656443e80 'String'
|   `-ParenType 0x5576564441a0 'int () const' sugar
|     `-FunctionProtoType 0x557656444170 'int () const' const cdecl
|       `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576564442f8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55765635f030 'int64_t' sugar
|   |-Typedef 0x55765626f2d0 'int64_t'
|   `-TypedefType 0x5576562484d0 '__int64_t' sugar
|     |-Typedef 0x5576562480a8 '__int64_t'
|     `-BuiltinType 0x557656206390 'long'
|-TypedefDecl 0x557656444360 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55765635ef50 'uint64_t' sugar
|   |-Typedef 0x55765626f470 'uint64_t'
|   `-TypedefType 0x557656248560 '__uint64_t' sugar
|     |-Typedef 0x557656248118 '__uint64_t'
|     `-BuiltinType 0x557656206430 'unsigned long'
|-TypedefDecl 0x5576564443f0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5576564443c0 'String::intmax_t' sugar
|   |-Typedef 0x5576564442f8 'intmax_t'
|   `-TypedefType 0x55765635f030 'int64_t' sugar
|     |-Typedef 0x55765626f2d0 'int64_t'
|     `-TypedefType 0x5576562484d0 '__int64_t' sugar
|       |-Typedef 0x5576562480a8 '__int64_t'
|       `-BuiltinType 0x557656206390 'long'
|-TypedefDecl 0x557656444480 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x557656444450 'String::uintmax_t' sugar
|   |-Typedef 0x557656444360 'uintmax_t'
|   `-TypedefType 0x55765635ef50 'uint64_t' sugar
|     |-Typedef 0x55765626f470 'uint64_t'
|     `-TypedefType 0x557656248560 '__uint64_t' sugar
|       |-Typedef 0x557656248118 '__uint64_t'
|       `-BuiltinType 0x557656206430 'unsigned long'
|-CXXConstructorDecl 0x557656444540 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5576564446e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x557656444628 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x557656444898 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5576564447d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5576564449f0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x557656444960 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x557656444c70 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x557656444ab8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x557656444b38 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x557656444ec8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x557656444d70 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x557656444df0 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5576564450e8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x557656444f98 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x557656445018 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x557656445308 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5576564451b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x557656445238 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x557656445498 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5576564453d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x557656445618 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x557656445558 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5576564457a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5576564456e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x557656445900 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x557656445870 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x557656445a88 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5576564459c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x557656445c18 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x557656445b50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x557656445da8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x557656445ce0 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x557656445f38 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x557656445e70 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5576564460c8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x557656446000 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x557656446258 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x557656446190 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x557656446350 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x557656446478 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5576564465f8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x557656446530 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x557656446748 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5576564466b8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5576564467f0 <col:63> "" ""
|-CXXMethodDecl 0x557656446938 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x557656446878 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x557656446b48 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5576564469f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x557656446a78 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5576564471e8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x557656447090 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x557656447110 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5576564474c8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5576564472a8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x557656447328 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x557656453ee0 <col:55> 'int' 10
| `-ParmVarDecl 0x5576564473a0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557656453f00 <col:76> 'bool' true
|-CXXMethodDecl 0x5576564477a8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x557656447590 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x557656447610 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x557656453f10 <col:56> 'int' 10
| `-ParmVarDecl 0x557656447688 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x557656453f30 <col:77> 'bool' true
|-CXXMethodDecl 0x5576564478b0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x557656447978 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x557656447a40 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x557656447ae0 <col:20>
| `-OptimizeNoneAttr 0x557656447b38 <col:30>
|-CXXConversionDecl 0x557656447c28 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x557656447cf8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x557656447db8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x557656447ea8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x557656447f68 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5576564480e8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x557656448020 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x557656448238 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5576564481a8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x557656448328 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5576564483e8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x557656448638 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5576564484a0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x557656448520 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x557656448898 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x557656448700 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x557656448780 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x557656448968 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x557656448b78 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x557656448a20 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x557656448aa0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x557656448d98 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x557656448c40 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x557656448cc0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x557656448f28 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x557656448e60 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x557656449570 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5576564496e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x557656449620 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5576564498f8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5576564497a8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x557656449828 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x557656449b10 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5576564499b8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x557656449a30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x557656449ca0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x557656449bd0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x557656449ec0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x557656449d60 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x557656449de0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55765644a010 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x557656449f80 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55765644a1e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55765644a0d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55765644a150 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55765644a338 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55765644a2a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55765644a550 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55765644a3f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55765644a470 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x557656453f40 <col:39> 'int' 0
|-CXXMethodDecl 0x55765644a770 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55765644a610 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55765644a690 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x557656453f60 <col:48> 'int' 0
|-CXXMethodDecl 0x55765644a950 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55765644a830 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55765644a8b0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x557656453f80 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55765644aa20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55765644aae0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55765644aba0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55765644ac60 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55765644ad20 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55765644aec8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55765644add0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55765644b048 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55765644af80 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55765644b1c8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55765644b108 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55765644b348 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55765644b280 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55765644b490 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55765644b400 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55765644b970 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55765644b8e0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55765644bb48 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55765644ba30 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55765644bab0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55765644bd28 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55765644bc10 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55765644bc90 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55765644be78 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55765644bde8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55765644c088 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55765644bf38 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55765644bfb8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55765644c1e8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55765644c150 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55765644c340 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55765644c2a8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55765644c3e8 <col:57> "" ""
|-CXXMethodDecl 0x55765644c4f8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55765644c468 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55765644c648 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55765644c5b8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55765644c7c8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55765644c700 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55765644c890 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55765644c950 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55765644ca10 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55765644cab0 <col:49> "" ""
|-CXXMethodDecl 0x55765644cb40 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55765644cc00 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55765644ccf0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55765644cdb8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55765644ce78 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55765644cf38 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55765644d030 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55765644d0f8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55765644d1c0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55765644d398 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55765644d278 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55765644d2f8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55765644d5c0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55765644d460 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55765644d4e0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55765644d6d0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55765644d738 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55765644d760 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55765644fa00 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55765644faa0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55765644fb00 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55765644fb60 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55765644fc10 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55765644fc78 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55765644feb8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55765644ff08 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765644fe98 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55765644fda8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55765644fd50 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55765644fd90 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55765644fd70 <col:32> 'int' 8
|-CXXRecordDecl 0x55765644ff20 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x557656450038 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5576564500e0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x557656450148 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5576564501d8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x557656454410 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x557656454848 <col:12>
| |-CXXConstructorDecl 0x557656454518 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x557656454628 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5576564500e0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x557656457500 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5576564574d0 <col:12> 'const char *const' lvalue .data 0x5576564500e0
| | |     `-DeclRefExpr 0x5576564574b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656454628 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x557656450148 'length' 'int'
| | | `-ImplicitCastExpr 0x557656457590 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x557656457560 <col:12> 'const int' lvalue .length 0x557656450148
| | |     `-DeclRefExpr 0x557656457540 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656454628 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5576564501d8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x557656457620 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5576564575f0 <col:12> 'String::memo_t *const' lvalue .memo 0x5576564501d8
| | |     `-DeclRefExpr 0x5576564575d0 <col:12> 'const String::rep_t' lvalue ParmVar 0x557656454628 '' 'const String::rep_t &'
| | `-CompoundStmt 0x557656457678 <col:12>
| |-CXXConstructorDecl 0x5576564546c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5576564546c8
| | `-ParmVarDecl 0x5576564547d8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55765645cc50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5576564685b8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5576564686c8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x557656468be0 <col:12>
| |   |-BinaryOperator 0x5576564689f8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5576564689b0 <col:12> 'const char *' lvalue ->data 0x5576564500e0
| |   | | `-CXXThisExpr 0x5576564689a0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5576564689e0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x557656468970 <col:12> 'const char *const' lvalue .data 0x5576564500e0
| |   |     `-DeclRefExpr 0x557656468950 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576564686c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x557656468ac0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x557656468a78 <col:12> 'int' lvalue ->length 0x557656450148
| |   | | `-CXXThisExpr 0x557656468a68 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x557656468aa8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x557656468a38 <col:12> 'const int' lvalue .length 0x557656450148
| |   |     `-DeclRefExpr 0x557656468a18 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576564686c8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x557656468b88 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x557656468b40 <col:12> 'String::memo_t *' lvalue ->memo 0x5576564501d8
| |   | | `-CXXThisExpr 0x557656468b30 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x557656468b70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x557656468b00 <col:12> 'String::memo_t *const' lvalue .memo 0x5576564501d8
| |   |     `-DeclRefExpr 0x557656468ae0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5576564686c8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x557656468bd0 <col:12>
| |     `-UnaryOperator 0x557656468bb8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x557656468ba8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x557656468738 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x557656468738
|   `-ParmVarDecl 0x557656468848 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x557656450250 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x557656450498 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5576564502b8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x557656450338 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5576564503b0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5576564543d0 <col:79, line:261:5>
|   |-BinaryOperator 0x557656454048 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x557656453fe0 <col:2, col:5> 'const char *' lvalue .data 0x5576564500e0
|   | | `-MemberExpr 0x557656453fb0 <col:2> 'String::rep_t' lvalue ->_r 0x557656450250
|   | |   `-CXXThisExpr 0x557656453fa0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x557656454030 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x557656454010 <col:12> 'const char *' lvalue ParmVar 0x5576564502b8 'data' 'const char *'
|   |-BinaryOperator 0x557656454110 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5576564540a8 <col:2, col:5> 'int' lvalue .length 0x557656450148
|   | | `-MemberExpr 0x557656454078 <col:2> 'String::rep_t' lvalue ->_r 0x557656450250
|   | |   `-CXXThisExpr 0x557656454068 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5576564540f8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5576564540d8 <col:14> 'int' lvalue ParmVar 0x557656450338 'length' 'int'
|   `-IfStmt 0x5576564543b8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x557656454230 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x557656454218 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5576564541f8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5576564541d8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x557656454170 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5576564501d8
|     |       | `-MemberExpr 0x557656454140 <col:7> 'String::rep_t' lvalue ->_r 0x557656450250
|     |       |   `-CXXThisExpr 0x557656454130 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5576564541c0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576564541a0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5576564503b0 'memo' 'String::memo_t *'
|     `-CallExpr 0x557656454390 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x557656454378 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656454280 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55765642ab28 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5576564542e8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55765644faa0
|         `-ImplicitCastExpr 0x5576564542d0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5576564542b0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5576564503b0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x557656450748 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x557656450568 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5576564505e8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x557656450660 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x557656450250 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x557656454858 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5576564549e8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x557656454950 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5576564548c0 <col:2> '<bound member function type>' ->assign_memo 0x557656450498
|     | `-ImplicitCastExpr 0x557656454988 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5576564548b0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5576564549a0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5576564548f0 <col:14> 'const char *' lvalue ParmVar 0x557656450568 'data' 'const char *'
|     |-ImplicitCastExpr 0x5576564549b8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x557656454910 <col:20> 'int' lvalue ParmVar 0x5576564505e8 'length' 'int'
|     `-ImplicitCastExpr 0x5576564549d0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x557656454930 <col:28> 'String::memo_t *' lvalue ParmVar 0x557656450660 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5576564508d8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x557656450818 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x557656454c40 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x557656454bc0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x557656454a10 <col:2> '<bound member function type>' ->assign_memo 0x557656450498
|     | `-CXXThisExpr 0x557656454a00 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x557656454bf8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x557656454a90 <col:14, col:19> 'const char *' lvalue .data 0x5576564500e0
|     |   `-MemberExpr 0x557656454a60 <col:14, col:16> 'String::rep_t' lvalue ._r 0x557656450250
|     |     `-DeclRefExpr 0x557656454a40 <col:14> 'const String' lvalue ParmVar 0x557656450818 'x' 'const String &'
|     |-ImplicitCastExpr 0x557656454c10 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x557656454b10 <col:25, col:30> 'int' lvalue .length 0x557656450148
|     |   `-MemberExpr 0x557656454ae0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x557656450250
|     |     `-DeclRefExpr 0x557656454ac0 <col:25> 'const String' lvalue ParmVar 0x557656450818 'x' 'const String &'
|     `-ImplicitCastExpr 0x557656454c28 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x557656454b90 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5576564501d8
|         `-MemberExpr 0x557656454b60 <col:38, col:40> 'String::rep_t' lvalue ._r 0x557656450250
|           `-DeclRefExpr 0x557656454b40 <col:38> 'const String' lvalue ParmVar 0x557656450818 'x' 'const String &'
|-CXXMethodDecl 0x5576564509a0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x557656455d08 <col:31, line:278:5>
|   `-IfStmt 0x557656455cf0 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x557656454ce0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x557656454cc8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x557656454c98 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5576564501d8
|     |     `-MemberExpr 0x557656454c68 <col:6> 'String::rep_t' lvalue ->_r 0x557656450250
|     |       `-CXXThisExpr 0x557656454c58 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x557656455cc8 <col:15, line:277:2>
|       |-ParenExpr 0x557656455280 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x557656455250 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x557656454df0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x557656454dd8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x557656454dc0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x557656454d80 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55765644faa0
|       |   |       `-ImplicitCastExpr 0x557656454d68 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x557656454d38 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5576564501d8
|       |   |           `-MemberExpr 0x557656454d08 <col:27> 'String::rep_t' lvalue ->_r 0x557656450250
|       |   |             `-CXXThisExpr 0x557656454cf8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x557656454e50 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x557656454e30 <col:54> 'int' 0
|       |   `-CallExpr 0x5576564551b0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x557656455198 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x557656455120 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5576562a5890 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5576564551f0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x557656454f38 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x557656455208 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x557656454fe8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x557656455220 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x557656455020 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x557656455238 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x557656455108 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5576564550f0 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5576564550b8 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x557656455be8 <line:274:6, line:275:22>
|       | |-CallExpr 0x557656455490 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x557656455478 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5576564553f0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55765642fe70 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5576564553c0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55765644faa0
|       | |   `-ImplicitCastExpr 0x5576564553a8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x557656455378 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5576564501d8
|       | |       `-MemberExpr 0x557656455348 <col:40> 'String::rep_t' lvalue ->_r 0x557656450250
|       | |         `-CXXThisExpr 0x557656455338 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x557656455590 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x557656455578 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5576564554b8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x557656451678 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x557656455bd0 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x557656455518 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5576564501d8
|       |       `-MemberExpr 0x5576564554e8 <col:15> 'String::rep_t' lvalue ->_r 0x557656450250
|       |         `-CXXThisExpr 0x5576564554d8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x557656455ca8 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x557656455c40 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5576564501d8
|         | `-MemberExpr 0x557656455c10 <col:6> 'String::rep_t' lvalue ->_r 0x557656450250
|         |   `-CXXThisExpr 0x557656455c00 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x557656455c90 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x557656455c70 <col:16> 'int' 0
|-CXXMethodDecl 0x557656450c38 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x557656450a58 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x557656450ad8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x557656450b50 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x557656450d10 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x557656450f60 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x557656450dc8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x557656450e48 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x557656450ec0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x557656451148 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x557656451030 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5576564510b0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x557656451248 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x557656455e00 <col:41, line:286:5>
|   `-ReturnStmt 0x557656455df0 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x557656455dc0 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x557656455d88 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x557656455d70 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x557656455d50 <col:46> 'int' 1
|-CXXMethodDecl 0x5576564514e8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x557656451300 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x557656451380 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x557656451400 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x557656451678 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5576564515b0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x557656451748 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x557656451918 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x557656451800 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x557656451880 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5576564535c0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x557656453708 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x557656453848 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5576564538c0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x557656453938 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5576564539a0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x557656453aa0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x557656453af0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x557656453a80 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x557656453a60 <col:22> 'int' 14
|-CXXMethodDecl 0x557656453d08 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x557656453b20 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x557656453ba0 <col:38> col:41 'int'
| `-ParmVarDecl 0x557656453c20 <col:43> col:46 'int'
|-FriendDecl 0x557656453e10 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x557656453ea0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5576565a04b0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5576565a0688 prev 0x5576565a04b0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5576565a0718 <col:46, col:52> col:46 public
|-TypedefDecl 0x5576565a3e30 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576565a5790 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5576565a5740 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5576565a5720 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5576565a4048 'type'
|     `-SubstTemplateTypeParmType 0x5576565a4010 'String' sugar
|       |-TemplateTypeParmType 0x5576565537f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576565537a0 'T'
|       `-RecordType 0x557656443f10 'String'
|         `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a5848 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5576565a5810 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5576565a57f0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5576565a5790 'type'
|     `-ElaboratedType 0x5576565a5740 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5576565a5720 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5576565a4048 'type'
|         `-SubstTemplateTypeParmType 0x5576565a4010 'String' sugar
|           |-TemplateTypeParmType 0x5576565537f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5576565537a0 'T'
|           `-RecordType 0x557656443f10 'String'
|             `-CXXRecord 0x557656443e80 'String'
|-CXXMethodDecl 0x5576565a59c8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5576565a58d8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5576565a5ab8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5576565a5b98 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5576565a5b98
|-CXXMethodDecl 0x5576565a5e68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5576565a5d70 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5576565a60a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576565a5f20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576565a5f98 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a6278 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576565a6168 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576565a61e0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a63d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5576565a64a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5576565a66f8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576565a6568 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5576565a65e0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a6958 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5576565a67c8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5576565a6840 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a6b18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5576565a6a28 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a6cd8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5576565a6be0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a6d90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576565a6e40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5576565a7078 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5576565a6ef0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576565a6f68 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5576565a7318 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5576565a7220 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5576565a73e0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5576565a7430 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5576565a7480 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656580340 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55765659ef18 prev 0x557656580340 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5576565a0420 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5576565a03d0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5576565a03b0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5576565a0260 'type'
|     `-SubstTemplateTypeParmType 0x5576565a00f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5576564aeca0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5576564aec48 'F'
|       `-RecordType 0x55765659fd50 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55765659fc70 'typed_array_memory'
|-FieldDecl 0x5576565a74d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5576565a7520 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5576565a7558 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|   |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55765655f340 'T'
|   `-RecordType 0x557656443f10 'String'
|     `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a75e8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5576565a75b0 'String &'
|   `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x557656443f10 'String'
|       `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a7678 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5576565a7640 'const String &'
|   `-QualType 0x55765659efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656443f10 'String'
|         `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a7708 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5576565a76d0 'String *'
|   `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x557656443f10 'String'
|       `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a7798 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5576565a7760 'const String *'
|   `-QualType 0x55765659efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656443f10 'String'
|         `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a8420 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5576565a83d0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5576565a83b0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5576565a82e8 'type'
|     `-LValueReferenceType 0x5576565a82b0 'const String &'
|       `-QualType 0x5576565a8051 'const String' const
|         `-SubstTemplateTypeParmType 0x5576565a8050 'String' sugar
|           |-TemplateTypeParmType 0x5576564b7ad0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5576564b7a78 'T'
|           `-RecordType 0x557656443f10 'String'
|             `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a8488 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5576565a7640 'const String &'
|   `-QualType 0x55765659efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656443f10 'String'
|         `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a84e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576565a8548 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5576565a76d0 'String *'
|   `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-RecordType 0x557656443f10 'String'
|       `-CXXRecord 0x557656443e80 'String'
|-TypedefDecl 0x5576565a85b0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5576565a7760 'const String *'
|   `-QualType 0x55765659efb1 'const String' const
|     `-SubstTemplateTypeParmType 0x55765659efb0 'String' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-RecordType 0x557656443f10 'String'
|         `-CXXRecord 0x557656443e80 'String'
|-EnumDecl 0x5576565a8608 <line:134:5> col:5
| `-EnumConstantDecl 0x5576565a8700 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5576565a86e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656560558 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656560530 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656560510 <col:40> 'int' 1
|-CXXConstructorDecl 0x5576565a8788 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5576565a8a18 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576565a8840 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576565a88e0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5576565a8ca8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5576565a8b90 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5576565a8f68 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5576565a8e50 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5576565a9280 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5576565a9160 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5576565a9590 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5576565a9470 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5576565a9880 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576565a96c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576565a9740 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576565a99a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5576565a9a58 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576565a9ab0 <col:30> Inherited
|-CXXMethodDecl 0x5576565a9af8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5576565a9ba8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576565a9c00 <col:30> Inherited
|-CXXMethodDecl 0x5576565a9cc8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576565a9d78 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576565a9dd0 <col:30> Inherited
|-CXXMethodDecl 0x5576565a9e18 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576565a9ec8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576565a9f20 <col:30> Inherited
|-CXXMethodDecl 0x5576565a9f68 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576565aa018 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576565aa070 <col:30> Inherited
|-CXXMethodDecl 0x5576565aa0b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5576565aa168 <col:20> Inherited
| `-OptimizeNoneAttr 0x5576565aa1c0 <col:30> Inherited
|-CXXMethodDecl 0x5576565aa1e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576565aa298 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5576565aa348 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5576565aa508 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576565aa3f8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5576565aa470 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576565aa658 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5576565aa5c8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576565aa808 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5576565aa710 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576565aa8c0 <col:20>
| `-OptimizeNoneAttr 0x5576565aa918 <col:30>
|-CXXMethodDecl 0x5576565aaa38 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5576565aa940 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5576565aaaf0 <col:20>
| `-OptimizeNoneAttr 0x5576565aab48 <col:30>
|-CXXMethodDecl 0x5576565aac00 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576565aab70 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576565aad48 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576565aacb8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576565aae78 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5576565aafa8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5576565ab078 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5576565ab148 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5576565ab288 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5576565ab1f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576565ab3d0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5576565ab340 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5576565ab518 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5576565ab488 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576565ab5d0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5576565ab6d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5576565ab640 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5576565ab788 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5576565ab848 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5576565ab948 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5576565abac8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5576565aba08 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5576565ac2a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5576565abb80 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5576565ac208 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5576565ac108 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5576565ac388 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5576565ac4d8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5576565ac448 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576565ac590 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5576565ac7d8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5576565ac650 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5576565ac6c8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5576565ac968 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5576565ac8a8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5576565acb78 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5576565aca30 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5576565acaa8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5576565acc38 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5576565ace98 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5576565acda0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5576565acf68 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5576565acf68

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656494700 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656494818 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5576564948a8 <col:22, col:28> col:22 public
|-EnumDecl 0x5576564948d0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5576564949e8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5576564949c8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5576564949b0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x557656494990 <col:14> 'int' 999
| |-EnumConstantDecl 0x557656494a90 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494a70 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x557656494a58 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x557656494a38 <col:14> 'int' 1
| |-EnumConstantDecl 0x557656494b20 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494b00 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x557656494ae0 <col:17> 'int' 0
| |-EnumConstantDecl 0x557656494bb0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494b90 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x557656494b70 <col:13> 'int' 1
| |-EnumConstantDecl 0x557656494c40 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494c20 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x557656494c00 <col:16> 'int' 2
| |-EnumConstantDecl 0x557656494cd0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494cb0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x557656494c90 <col:13> 'int' 3
| |-EnumConstantDecl 0x557656494d60 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494d40 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x557656494d20 <col:15> 'int' 4
| |-EnumConstantDecl 0x557656494df0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494dd0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x557656494db0 <col:14> 'int' 5
| |-EnumConstantDecl 0x557656494e80 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x557656494e60 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x557656494e40 <col:12> 'int' 6
| `-EnumConstantDecl 0x557656494f10 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x557656494ef0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x557656494ed0 <col:13> 'int' 7
|-VarDecl 0x557656494fd8 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x557656495060 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5576564950e8 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x557656495170 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5576564951f8 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x557656495280 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x557656495330 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5576564953b8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x557656495440 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5576564954c8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x557656495550 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x557656495680 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55765649acc8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55765649b458 <line:128:13> 'int' 0
| `-CompoundStmt 0x55765649d200 <col:16, line:129:5>
|-CXXDestructorDecl 0x557656495770 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55765649d210 <col:29, line:132:5>
|-CXXMethodDecl 0x557656495928 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x557656495860 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5576564959f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x557656495ad8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55765649d268 <col:44, line:161:5>
|   `-ReturnStmt 0x55765649d258 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55765649d240 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55765649d220 <col:9> 'ErrorHandler *' lvalue Var 0x55765649ad28 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x557656495c48 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x557656495b88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x557656495d10 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55765649d2c8 <col:43, line:173:5>
|   `-ReturnStmt 0x55765649d2b8 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55765649d2a0 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55765649d280 <col:9> 'ErrorHandler *' lvalue Var 0x55765649ada0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x557656495dc8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x557656495e48 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x557656495f90 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x557656495ec8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5576564960e0 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x557656496050 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x557656496238 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5576564961a0 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x557656496390 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5576564962f8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5576564964e8 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x557656496450 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x557656496700 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576564965a0 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x557656496620 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5576564968d8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5576564967c0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x557656496840 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x557656496af8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x557656496998 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x557656496a18 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x557656496cd8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x557656496bb8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x557656496c38 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x557656496eb8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x557656496d98 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x557656496e18 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x557656497040 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x557656496f78 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x557656497210 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5576564970f8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x557656497170 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55765649d528 <col:57, line:234:5>
|   `-ReturnStmt 0x55765649d518 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55765649d500 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55765649d4a8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55765649d478 <col:9> '<bound member function type>' ->xmessage 0x557656497040
|         | `-CXXThisExpr 0x55765649d468 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55765649d4e8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55765649d4d0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55765649d448 <col:18, col:40> 'String' (CXXTemporary 0x55765649d448)
|               `-CallExpr 0x55765649d410 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55765649d3f8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55765649d368 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5576564994b0 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55765649d388 <col:31> 'const String' lvalue ParmVar 0x557656497170 'str' 'const String &'
|                 `-DeclRefExpr 0x55765649d3a8 <col:36> 'const String' lvalue ParmVar 0x5576564970f8 'anno' 'const String &'
|-CXXMethodDecl 0x5576564975c0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x557656497340 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5576564973c0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x557656497490 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55765649d7b8 <col:68, line:243:5>
|   `-ReturnStmt 0x55765649d7a8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55765649d790 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55765649d730 <col:9, col:41> 'int'
|         |-MemberExpr 0x55765649d700 <col:9> '<bound member function type>' ->xmessage 0x557656497210
|         | `-CXXThisExpr 0x55765649d6f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55765649d5c8 <col:18> 'const String' lvalue ParmVar 0x557656497340 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55765649d778 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55765649d760 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55765649d6d0 <col:24, col:40> 'String' (CXXTemporary 0x55765649d6d0)
|               `-CXXMemberCallExpr 0x55765649d668 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55765649d5f8 <col:24> '<bound member function type>' ->vformat 0x5576564987a0
|                 | `-CXXThisExpr 0x55765649d5e8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55765649d698 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55765649d628 <col:32> 'const char *' lvalue ParmVar 0x5576564973c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55765649d6b0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55765649d648 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x557656497490 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x557656497860 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x557656497688 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x557656497700 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x557656497778 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55765649daf8 <col:23, line:254:5>
|   `-ReturnStmt 0x55765649dae8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55765649dad0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55765649da70 <col:9, col:71> 'int'
|         |-MemberExpr 0x55765649da40 <col:9> '<bound member function type>' ->xmessage 0x557656497210
|         | `-CXXThisExpr 0x55765649da30 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55765649dab8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55765649daa0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55765649d9f0 <col:18, col:65> 'String' (CXXTemporary 0x55765649d9f0)
|         |     `-CallExpr 0x55765649d988 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55765649d970 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55765649d858 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5576564994b0 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55765649d878 <col:31> 'const String' lvalue ParmVar 0x557656497700 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55765649d9d0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55765649d9b8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55765649d950 <col:37, col:64> 'String' (CXXTemporary 0x55765649d950)
|         |             `-CallExpr 0x55765649d920 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55765649d908 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55765649d898 <col:37> 'String (const String &)' lvalue CXXMethod 0x557656499b08 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55765649d8b8 <col:56> 'const String' lvalue ParmVar 0x557656497688 'landmark' 'const String &'
|         `-DeclRefExpr 0x55765649da10 <col:68> 'const String' lvalue ParmVar 0x557656497778 'str' 'const String &'
|-CXXMethodDecl 0x557656497be0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x557656497928 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5576564979a0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x557656497a20 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x557656497a98 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55765649ddb0 <col:34, line:267:5>
|   `-ReturnStmt 0x55765649dda0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55765649dd88 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55765649dd20 <col:9, col:51> 'int'
|         |-MemberExpr 0x55765649dcf0 <col:9> '<bound member function type>' ->xmessage 0x557656497860
|         | `-CXXThisExpr 0x55765649dce0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55765649db98 <col:18> 'const String' lvalue ParmVar 0x557656497928 'landmark' 'const String &'
|         |-DeclRefExpr 0x55765649dbb8 <col:28> 'const String' lvalue ParmVar 0x5576564979a0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55765649dd70 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55765649dd58 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55765649dcc0 <col:34, col:50> 'String' (CXXTemporary 0x55765649dcc0)
|               `-CXXMemberCallExpr 0x55765649dc58 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55765649dbe8 <col:34> '<bound member function type>' ->vformat 0x5576564987a0
|                 | `-CXXThisExpr 0x55765649dbd8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55765649dc88 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55765649dc18 <col:42> 'const char *' lvalue ParmVar 0x557656497a20 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55765649dca0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55765649dc38 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x557656497a98 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x557656497cf0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55765649de30 <col:25, line:288:5>
|   `-ReturnStmt 0x55765649de20 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55765649de08 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55765649ddd8 <col:9> 'const int' lvalue ->_nerrors 0x55765649acc8
|         `-CXXThisExpr 0x55765649ddc8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x557656497f00 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x557656497da8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x557656497e28 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5576564981e8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x557656497fc8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x557656498048 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5576564980c0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x557656498380 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5576564982b8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5576564985c8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x557656498440 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5576564984b8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55765649e090 <col:58, line:357:5>
|   `-ReturnStmt 0x55765649e080 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55765649e068 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55765649e038 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55765649e020 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55765649e000 <col:9, col:29> 'String' (CXXTemporary 0x55765649e000)
|             `-CallExpr 0x55765649df90 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55765649df78 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55765649def8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5576564981e8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55765649de98 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55765649dfc8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55765649deb8 <col:21> 'const char *' lvalue ParmVar 0x557656498440 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55765649dfe0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55765649ded8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5576564984b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576564987a0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x557656498690 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x557656498708 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5576564988f8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x557656498868 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x557656498a78 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5576564989b0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x557656498d10 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x557656498b30 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x557656498bb0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x557656498c28 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x557656498e70 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x557656498de0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55765649e1a8 <col:37, line:441:5>
|   `-IfStmt 0x55765649e190 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55765649e118 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55765649e0e8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55765649e0a8 <col:6> 'int' lvalue ParmVar 0x557656498de0 'level' 'int'
|     | `-ImplicitCastExpr 0x55765649e100 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55765649e0c8 <col:15> 'ErrorHandler::Level' EnumConstant 0x557656494cd0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55765649e178 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55765649e148 <col:8> 'int' lvalue ->_nerrors 0x55765649acc8
|         `-CXXThisExpr 0x55765649e138 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x557656498f38 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55765649e240 <col:26, line:448:5>
|   `-BinaryOperator 0x55765649e220 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55765649e1d0 <col:2> 'int' lvalue ->_nerrors 0x55765649acc8
|     | `-CXXThisExpr 0x55765649e1c0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55765649e200 <col:13> 'int' 0
|-CXXMethodDecl 0x557656499100 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x557656498ff0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x557656499068 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5576564994b0 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5576564991c0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x557656499238 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x557656499768 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x557656499570 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5576564995f0 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x557656499670 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x557656499820 <col:59> 0 0
|-CXXMethodDecl 0x5576564999b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x557656499898 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x557656499918 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55765649e8b0 <col:70, line:534:5>
|   |-DeclStmt 0x55765649e3b0 <line:528:2, col:20>
|   | |-VarDecl 0x55765649e268 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55765649e2d0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55765649e308 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55765649e370 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55765649e480 <line:529:2, col:23>
|   | `-VarDecl 0x55765649e3e0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55765649e468 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55765649e448 <col:18> 'const char *' lvalue ParmVar 0x557656499898 'begin' 'const char *'
|   |-DoStmt 0x55765649e848 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55765649e778 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55765649e760 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55765649e740 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55765649e498 <col:6> 'const char *' lvalue Var 0x55765649e3e0 'x' 'const char *'
|   | |     `-CallExpr 0x55765649e690 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55765649e678 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55765649e630 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55765649b1a0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55765649e6f8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55765649e6e0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55765649e550 <col:20, col:27> 'String' (CXXTemporary 0x55765649e550)
|   | |       |     `-CXXTemporaryObjectExpr 0x55765649e518 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55765649e710 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55765649e570 <col:30> 'const char *' lvalue Var 0x55765649e3e0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55765649e728 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55765649e590 <col:33> 'const char *' lvalue ParmVar 0x557656499918 'end' 'const char *'
|   | |       |-UnaryOperator 0x55765649e5d0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55765649e5b0 <col:39> 'String' lvalue Var 0x55765649e268 'name' 'String'
|   | |       |-UnaryOperator 0x55765649e608 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55765649e5e8 <col:46> 'String' lvalue Var 0x55765649e308 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55765649e620 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55765649e830 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55765649e818 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55765649e7f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55765649e7c8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|   |         `-ImplicitCastExpr 0x55765649e7b0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55765649e790 <col:11> 'String' lvalue Var 0x55765649e268 'name' 'String'
|   `-ReturnStmt 0x55765649e8a0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55765649e888 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55765649e868 <col:9> 'const char *' lvalue Var 0x55765649e3e0 'x' 'const char *'
|-CXXMethodDecl 0x557656499b08 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x557656499a78 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55765649eeb8 <col:55, line:550:5>
|   `-IfStmt 0x55765649ee90 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55765649eaf0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55765649ead8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55765649eac0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55765649eaa0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55765649ea70 <col:6> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|     | |       `-DeclRefExpr 0x55765649e910 <col:6> 'const String' lvalue ParmVar 0x557656499a78 'x' 'const String &'
|     | `-BinaryOperator 0x55765649ea50 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55765649ea20 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55765649e9d0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55765649e9b8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55765649e970 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x557656462ba0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55765649e930 <col:11> 'const String' lvalue ParmVar 0x557656499a78 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55765649e950 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55765649ea38 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55765649ea08 <col:19> 'char' 123
|     |-ReturnStmt 0x55765649eb60 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55765649eb30 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55765649eb10 <col:13> 'const String' lvalue ParmVar 0x557656499a78 'x' 'const String &'
|     `-IfStmt 0x55765649ee68 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55765649ebf8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55765649ebe0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55765649ebc0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55765649eb90 <col:11> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |       `-DeclRefExpr 0x55765649eb70 <col:11> 'const String' lvalue ParmVar 0x557656499a78 'x' 'const String &'
|       |-ReturnStmt 0x55765649ed80 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55765649ed68 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55765649ed38 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55765649ed20 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55765649ed00 <col:13, col:29> 'String' (CXXTemporary 0x55765649ed00)
|       |         `-CallExpr 0x55765649ecb0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55765649ec98 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55765649ec10 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x557656499100 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55765649ece0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55765649ec30 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55765649ec50 <col:28> 'const String' lvalue ParmVar 0x557656499a78 'x' 'const String &'
|       `-ReturnStmt 0x55765649ee58 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55765649ee40 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55765649ee10 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55765649edf8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55765649edd8 <col:13, col:20> 'String' (CXXTemporary 0x55765649edd8)
|                 `-CXXTemporaryObjectExpr 0x55765649eda0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x557656499d08 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x557656499bc0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x557656499c38 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55765649b448 <col:71> 'bool' false
|-CXXRecordDecl 0x557656499db8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55765649a0b8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55765649a050 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x557656499ff0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x557656499fb0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x557656443f10 'String'
|       | `-CXXRecord 0x557656443e80 'String'
|       |-BuiltinType 0x557656206370 'int'
|       `-DecayedType 0x557656497460 '__va_list_tag *' sugar
|         |-TypedefType 0x557656497430 'va_list' sugar
|         | |-Typedef 0x55765647abb0 'va_list'
|         | `-TypedefType 0x55765647ab60 '__gnuc_va_list' sugar
|         |   |-Typedef 0x557656475f38 '__gnuc_va_list'
|         |   `-TypedefType 0x557656475ea0 '__builtin_va_list' sugar
|         |     |-Typedef 0x557656247bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x557656247b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5576562070c0 '__va_list_tag'
|         |         `-CXXRecord 0x557656207028 '__va_list_tag'
|         `-PointerType 0x557656480730 '__va_list_tag *'
|           `-RecordType 0x5576562070c0 '__va_list_tag'
|             `-CXXRecord 0x557656207028 '__va_list_tag'
|-EnumDecl 0x55765649a110 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55765649a210 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a770 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a1f0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55765649a1d0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55765649a2a0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a788 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a280 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55765649a260 <col:21> 'int' 2
| |-EnumConstantDecl 0x55765649a330 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a7a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a310 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55765649a2f0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55765649a3c0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a7b8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a3a0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55765649a380 <col:17> 'int' 8
| |-EnumConstantDecl 0x55765649a450 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a7d0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a430 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55765649a410 <col:22> 'int' 16
| |-EnumConstantDecl 0x55765649a4e0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a7e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a4c0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55765649a4a0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55765649a570 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a800 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a550 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55765649a530 <col:17> 'int' 64
| |-EnumConstantDecl 0x55765649a600 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a818 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a5e0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55765649a5c0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55765649a690 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55765649a830 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55765649a670 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55765649a650 <col:16> 'int' 256
| `-EnumConstantDecl 0x55765649a720 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55765649a848 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765649a700 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55765649a6e0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55765649aa58 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55765649a870 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55765649a910 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55765649abe0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55765649ab18 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55765649ac88 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55765649acc8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55765649ad28 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55765649ada0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55765649b1a0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55765649ae18 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55765649ae98 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55765649af18 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55765649af90 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55765649b008 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55765649b080 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55765649b2c8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55765649b2c8
| `-ParmVarDecl 0x55765649b3d8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5576564a4b48 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5576564a4b48
  `-ParmVarDecl 0x5576564a4c58 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576567635f0 prev 0x557656762138 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576567636e8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x557656763778 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x557656763888 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5576567637b0 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x557656764c60 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x557656764c40 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5576567647d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x557656764cf0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x557656764cb0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5576567637b0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x557656764840 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x557656764d70 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x557656764d30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5576567648a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x557656764db0 <col:54> 'bool' false
| `-CompoundStmt 0x557656764eb8 <col:61, line:38:5>
|   `-BinaryOperator 0x557656764e98 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x557656764e30 <col:9> 'const Element *' lvalue ->_context 0x557656764778
|     | `-CXXThisExpr 0x557656764e20 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x557656764e80 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x557656764e60 <col:20> 'int' 0
|-CXXConstructorDecl 0x557656763a98 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x557656763948 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5576567639c0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x557656764c98 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x557656764c78 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x557656764778 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x557656764f10 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x557656764ed0 <col:20> 'const Element *' lvalue ParmVar 0x557656763948 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5576567647d8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x557656764f90 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x557656764f50 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5576567639c0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x557656764840 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x557656765010 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x557656764fd0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5576567648a0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x557656765050 <col:73> 'bool' false
| `-CompoundStmt 0x5576567650c8 <col:80, line:46:5>
|-CXXMethodDecl 0x557656763bc8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x557656765140 <col:36, line:51:5>
|   `-ReturnStmt 0x557656765130 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x557656765118 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5576567650e8 <col:16> 'const Element *const' lvalue ->_context 0x557656764778
|         `-CXXThisExpr 0x5576567650d8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x557656763cb8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5576567651c0 <col:32, line:57:5>
|   `-ReturnStmt 0x5576567651b0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x557656765198 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x557656765168 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5576567647d8
|         `-CXXThisExpr 0x557656765158 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x557656763d78 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x557656763f00 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x557656763e30 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x557656764050 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x557656763fc0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5576567641a0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x557656764110 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5576567643a8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x557656764258 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5576567642d0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x557656764688 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x557656764468 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5576567644e8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x557656764560 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x557656764740 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x557656764778 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5576567647d8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x557656764840 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5576567648a0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5576567648f0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5576567648f0
| `-ParmVarDecl 0x557656764a08 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x557656764aa8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x557656764aa8
| `-ParmVarDecl 0x557656764bb8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55765690ad58 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55765678c700 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55765678c8d8 prev 0x55765678c700 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55765678c968 <col:46, col:52> col:46 public
|-TypedefDecl 0x55765678c990 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656791780 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x557656791730 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55765678ce40 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55765678cd40 'type'
|     `-TemplateSpecializationType 0x55765678ccd0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55765678cbb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55765678cb90 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55765678cb70 <col:24> 'unsigned long' 4
|       `-RecordType 0x55765678ccb0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55765678cbd0 'char_array'
|-TypedefDecl 0x557656791838 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x557656791800 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5576567917e0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x557656791780 'type'
|     `-ElaboratedType 0x557656791730 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55765678ce40 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55765678cd40 'type'
|         `-TemplateSpecializationType 0x55765678ccd0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55765678cbb0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55765678cb90 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55765678cb70 <col:24> 'unsigned long' 4
|           `-RecordType 0x55765678ccb0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55765678cbd0 'char_array'
|-CXXMethodDecl 0x5576567919b8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5576567918c8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x557656791aa8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x557656791b88 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x557656791e58 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x557656791d60 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x557656792098 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656791f10 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656791f88 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656792268 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656792158 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5576567921d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5576567923c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x557656792498 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5576567926e8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656792558 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5576567925d0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656792948 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5576567927b8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x557656792830 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656792b08 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x557656792a18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656792cc8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x557656792bd0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656792d80 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x557656792e30 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x557656793068 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x557656792ee0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x557656792f58 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x557656793308 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x557656793210 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5576567933d0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x557656793420 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x557656793470 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55765678b108 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55765678b318 prev 0x55765678b108 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55765678c670 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55765678c620 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55765678c600 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55765678c4b0 'type'
|     `-SubstTemplateTypeParmType 0x55765678c2d0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5576564ae4f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564ae498 'T'
|       `-RecordType 0x55765678be20 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55765678bd38 'sized_array_memory'
|-FieldDecl 0x5576567934c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x557656793510 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x557656793548 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|   |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55765655f340 'T'
|   `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576567935d8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5576567935a0 'int &'
|   `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656793698 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x557656793660 'const int &'
|   `-QualType 0x55765678b3b1 'const int' const
|     `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656793728 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5576567936f0 'int *'
|   `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576567937b8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x557656793780 'const int *'
|   `-QualType 0x55765678b3b1 'const int' const
|     `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576567943a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x557656794350 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x557656794330 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5576567942c0 'type'
|     `-SubstTemplateTypeParmType 0x557656794080 'int' sugar
|       |-TemplateTypeParmType 0x5576564b8200 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5576564b81b0 'T'
|       `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656794408 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x557656793660 'const int &'
|   `-QualType 0x55765678b3b1 'const int' const
|     `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656794460 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x5576567944c8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5576567936f0 'int *'
|   `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|     |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55765655f340 'T'
|     `-BuiltinType 0x557656206370 'int'
|-TypedefDecl 0x557656794530 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x557656793780 'const int *'
|   `-QualType 0x55765678b3b1 'const int' const
|     `-SubstTemplateTypeParmType 0x55765678b3b0 'int' sugar
|       |-TemplateTypeParmType 0x55765655f390 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55765655f340 'T'
|       `-BuiltinType 0x557656206370 'int'
|-EnumDecl 0x557656798c70 <line:134:5> col:5
| `-EnumConstantDecl 0x557656798d60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x557656798d40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x557656560558 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x557656560530 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x557656560510 <col:40> 'int' 1
|-CXXConstructorDecl 0x557656798de8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x557656799038 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557656798ea0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656798f40 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5576567992f8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5576567991e0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5576567995b8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5576567994a0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x557656799900 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5576567997e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x557656799c10 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x557656799af0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x557656799f00 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x557656799d48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x557656799dc0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55765679a028 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55765679a108 <col:20> Inherited
| `-OptimizeNoneAttr 0x55765679a160 <col:30> Inherited
|-CXXMethodDecl 0x55765679a1a8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55765679a258 <col:20> Inherited
| `-OptimizeNoneAttr 0x55765679a2b0 <col:30> Inherited
|-CXXMethodDecl 0x55765679a378 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55765679a428 <col:20> Inherited
| `-OptimizeNoneAttr 0x55765679a480 <col:30> Inherited
|-CXXMethodDecl 0x55765679a4c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55765679a578 <col:20> Inherited
| `-OptimizeNoneAttr 0x55765679a5d0 <col:30> Inherited
|-CXXMethodDecl 0x55765679a618 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55765679a6c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55765679a720 <col:30> Inherited
|-CXXMethodDecl 0x55765679a768 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55765679a818 <col:20> Inherited
| `-OptimizeNoneAttr 0x55765679a870 <col:30> Inherited
|-CXXMethodDecl 0x55765679a898 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55765679a948 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55765679a9f8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55765679abb8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55765679aaa8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55765679ab20 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55765679ad08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55765679ac78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55765679aeb8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55765679adc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55765679af70 <col:20>
| `-OptimizeNoneAttr 0x55765679afc8 <col:30>
|-CXXMethodDecl 0x55765679b0e8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55765679aff0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55765679b1a0 <col:20>
| `-OptimizeNoneAttr 0x55765679b1f8 <col:30>
|-CXXMethodDecl 0x55765679b2b0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55765679b220 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55765679b3f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55765679b368 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55765679b528 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55765679b658 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55765679b728 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55765679b7f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55765679b938 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55765679b8a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55765679ba80 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55765679b9f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55765679bbc8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55765679bb38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55765679bc80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55765679bd80 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55765679bcf0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55765679be38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55765679bef8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55765679bff8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55765679c178 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55765679c0b8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55765679c938 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55765679c230 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55765679c898 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55765679c798 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55765679ca18 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55765679cb68 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55765679cad8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55765679cc20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55765679ce68 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55765679cce0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55765679cd58 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55765679d028 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55765679cf38 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55765679d278 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55765679d0f0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55765679d168 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55765679d338 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55765679d598 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55765679d4a0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55765679d668 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576567818a8 prev 0x55765676a048 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x557656789370 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x557656789460 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5576567ad690 <col:16, line:828:9>
|-CXXDestructorDecl 0x557656789550 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5576567ad6a0 <col:25, line:830:9>
|-CXXMethodDecl 0x557656789650 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x557656789700 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5576567897a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5576567897a8
| `-ParmVarDecl 0x5576567898b8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55765678a078 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55765678a078
  `-ParmVarDecl 0x55765678a188 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x557656769e58 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x557656769fb8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55765676a048 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55765676a100 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55765676a208 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55765676a138 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55765679eca8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55765679ec88 <col:31> 'int' 0
|-CXXConstructorDecl 0x55765676a528 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55765676a3a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55765676a418 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55765679ece0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55765679ecc0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55765676a700 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55765676a5f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55765676a668 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55765679ed18 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55765679ecf8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55765676aab8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55765676a8a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55765676a918 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55765676a990 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55765679ed50 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55765679ed30 <col:31> 'int' 0
|-CXXConstructorDecl 0x55765676ac78 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55765676abb8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55765676ad70 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55765676af58 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55765676ae60 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55765676b048 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55765679f140 <col:24, line:291:5>
|   `-ReturnStmt 0x55765679f130 <line:290:9, col:79>
|     `-BinaryOperator 0x55765679f110 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55765679efa8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55765679ef00 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55765679eee0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55765679edd8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55765679edc0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55765679eda8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55765679ed78 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55765678b0a0
|       | |   |       `-CXXThisExpr 0x55765679ed68 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55765679eec8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55765679eeb0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55765679ee78 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55765679ee48 <col:28, col:35> '<bound member function type>' ->size 0x5576565aa1e8
|       | |           `-ImplicitCastExpr 0x55765679ee98 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55765679ee30 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55765679ee00 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55765678b0a0
|       | |                 `-CXXThisExpr 0x55765679edf0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55765679ef90 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55765679ef78 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55765679ef60 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55765679ef30 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55765679d7b0
|       |         `-CXXThisExpr 0x55765679ef20 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55765679f0f0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55765679f0d8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55765679f0c0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55765679f080 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55765679f068 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55765679efd8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55765679d8d8
|         |     |   `-CXXThisExpr 0x55765679efc8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55765679f008 <col:73> 'int' 0
|         `-IntegerLiteral 0x55765679f0a0 <col:79> 'int' 0
|-CXXMethodDecl 0x55765676b108 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55765679f318 <col:32, line:296:5>
|   `-ReturnStmt 0x55765679f308 <line:295:9, col:49>
|     `-BinaryOperator 0x55765679f2e8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55765679f1c8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55765679f1b0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55765679f198 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55765679f168 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55765679d7b0
|       |       `-CXXThisExpr 0x55765679f158 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55765679f2c8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55765679f2b0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55765679f298 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55765679f258 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55765679f240 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55765679f1f0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55765679d8d8
|         |     |   `-CXXThisExpr 0x55765679f1e0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55765679f220 <col:43> 'int' 0
|         `-IntegerLiteral 0x55765679f278 <col:49> 'int' 0
|-CXXMethodDecl 0x55765676b1f8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55765679f528 <col:19, line:306:5>
|   |-IfStmt 0x55765679f448 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55765679f388 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55765679f370 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55765679f340 <col:13> 'Vector<String> *' lvalue ->_conf 0x55765678b0a0
|   | |     `-CXXThisExpr 0x55765679f330 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55765679f428 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55765679f3f8 <col:13, col:20> '<bound member function type>' ->clear 0x5576565acc38
|   |     `-ImplicitCastExpr 0x55765679f3e0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55765679f3b0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55765678b0a0
|   |         `-CXXThisExpr 0x55765679f3a0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55765679f4d0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55765679f4a0 <col:9, col:16> '<bound member function type>' .clear 0x55765679d338
|   |   `-MemberExpr 0x55765679f470 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55765679d750
|   |     `-CXXThisExpr 0x55765679f460 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55765679f518 <line:305:9, col:17>
|     `-UnaryOperator 0x55765679f500 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55765679f4f0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55765676b4f0 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55765676b380 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55765676b668 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55765676b5a8 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55765676b9e8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55765676b710 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55765676b948 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55765676b7b8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55765676b830 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55765679f838 <col:67, line:327:5>
|     |-WhileStmt 0x55765679f7e8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55765679f600 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55765679f590 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55765675a668 0x557656547510 0x557656471dc0 0x557656471a70 0x557656471360 0x557656432300
|     | | |-DeclRefExpr 0x55765679f550 <col:16> 'Iter' lvalue ParmVar 0x55765676b7b8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55765679f570 <col:25> 'Iter' lvalue ParmVar 0x55765676b830 'end' 'Iter'
|     | `-CompoundStmt 0x55765679f7c8 <col:30, line:325:9>
|     |   |-CallExpr 0x55765679f768 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55765679f648 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55765679f738 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55765679f6c8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|     |   |   `-DeclRefExpr 0x55765679f6a8 <col:24> 'Iter' lvalue ParmVar 0x55765676b7b8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55765679f7b0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55765679f790 <col:15> 'Iter' lvalue ParmVar 0x55765676b7b8 'begin' 'Iter'
|     `-ReturnStmt 0x55765679f828 <line:326:9, col:17>
|       `-UnaryOperator 0x55765679f810 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55765679f800 <col:17> 'Args *' this
|-CXXMethodDecl 0x55765676baf0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55765676ba60 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55765676bc38 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55765676bba8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55765676bd00 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55765679f918 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55765679f8b8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55765679f868 <col:9> '<bound member function type>' ->reset_from 0x55765679dc58
|   | | `-CXXThisExpr 0x55765679f858 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55765679f898 <col:20> 'int' 0
|   `-ReturnStmt 0x55765679f908 <line:352:9, col:17>
|     `-UnaryOperator 0x55765679f8f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55765679f8e0 <col:17> 'Args *' this
|-VarDecl 0x55765676bdb8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55765676be20 <col:38> 'int' 1
|-VarDecl 0x55765676beb0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55765676bf18 <col:39> 'int' 2
|-VarDecl 0x55765676bfa8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55765676c010 <col:39> 'int' 4
|-VarDecl 0x55765676c0a0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55765676c108 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55765676c488 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55765676c180 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765676c3e8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55765676c230 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676c2d8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55765679fa70 <col:43, line:371:5>
|     `-ReturnStmt 0x55765679fa60 <line:370:9, col:34>
|       `-CallExpr 0x55765679fa28 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55765679f948 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55765679f9c8 <col:21> 'const char *' lvalue ParmVar 0x55765676c230 'keyword' 'const char *'
|         |-IntegerLiteral 0x55765679f9e8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55765679fa08 <col:33> 'T' lvalue ParmVar 0x55765676c2d8 'x' 'T &'
|-FunctionTemplateDecl 0x55765676c7b8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55765676c4f0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765676c718 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55765676c5a0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676c648 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55765679fbc0 <col:45, line:375:5>
|     `-ReturnStmt 0x55765679fbb0 <line:374:9, col:42>
|       `-CallExpr 0x55765679fb78 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55765679fa98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55765679fb18 <col:21> 'const char *' lvalue ParmVar 0x55765676c5a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55765679fb38 <col:30> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55765679fb58 <col:41> 'T' lvalue ParmVar 0x55765676c648 'x' 'T &'
|-FunctionTemplateDecl 0x55765676cae8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55765676c820 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765676ca48 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55765676c8d0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676c978 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55765679fd10 <col:45, line:379:5>
|     `-ReturnStmt 0x55765679fd00 <line:378:9, col:43>
|       `-CallExpr 0x55765679fcc8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55765679fbe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55765679fc68 <col:21> 'const char *' lvalue ParmVar 0x55765676c8d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55765679fc88 <col:30> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int'
|         `-DeclRefExpr 0x55765679fca8 <col:42> 'T' lvalue ParmVar 0x55765676c978 'x' 'T &'
|-FunctionTemplateDecl 0x55765676ce18 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55765676cb50 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55765676cd78 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55765676cc00 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55765676cca8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55765679ff10 <col:46, line:383:5>
| |   `-ReturnStmt 0x55765679ff00 <line:382:9, col:55>
| |     `-CallExpr 0x55765679fec8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55765679fd38 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55765679fdb8 <col:21> 'const char *' lvalue ParmVar 0x55765676cc00 'keyword' 'const char *'
| |       |-BinaryOperator 0x55765679fe88 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55765679fe38 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55765679fe18 <col:30> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55765679fe70 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55765679fe50 <col:42> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55765679fea8 <col:54> 'T' lvalue ParmVar 0x55765676cca8 'x' 'T &'
| `-CXXMethodDecl 0x55765690b1e8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, Timestamp &)'
|   |-TemplateArgument type 'Timestamp'
|   |-ParmVarDecl 0x55765690b000 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55765690b0d8 <col:40, col:43> col:43 x 'Timestamp &'
|-FunctionTemplateDecl 0x55765676d218 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55765676ce80 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765676d178 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55765676cf30 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676cfb0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55765676d058 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5576567a0050 <col:54, line:388:5>
|     |-CallExpr 0x55765679ffd8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55765679ff28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55765679ff68 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55765679ff78 <col:30> 'const char *' lvalue ParmVar 0x55765676cf30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55765679ff98 <col:39> 'int' lvalue ParmVar 0x55765676cfb0 'flags' 'int'
|     | `-DeclRefExpr 0x55765679ffb8 <col:46> 'T' lvalue ParmVar 0x55765676d058 'x' 'T &'
|     `-ReturnStmt 0x5576567a0040 <line:387:9, col:17>
|       `-UnaryOperator 0x5576567a0028 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a0018 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55765676d6c8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55765676d288 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55765676d308 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55765676d628 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55765676d3c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676d468 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55765676d508 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576567a01c0 <col:74, line:403:5>
|     `-ReturnStmt 0x5576567a01b0 <line:402:9, col:56>
|       `-CallExpr 0x5576567a0170 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a0080 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a00f0 <col:28> 'const char *' lvalue ParmVar 0x55765676d3c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a0110 <col:37> 'int' 0
|         |-DeclRefExpr 0x5576567a0130 <col:40> 'T' lvalue ParmVar 0x55765676d468 'x' 'T &'
|         `-DeclRefExpr 0x5576567a0150 <col:43> 'const V' lvalue ParmVar 0x55765676d508 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55765676db38 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55765676d738 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55765676d7b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55765676da98 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55765676d878 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676d918 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55765676d9b8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576567a0328 <col:76, line:407:5>
|     `-ReturnStmt 0x5576567a0318 <line:406:9, col:65>
|       `-CallExpr 0x5576567a02d8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a01e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a0258 <col:28> 'const char *' lvalue ParmVar 0x55765676d878 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a0278 <col:37> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int'
|         |-DeclRefExpr 0x5576567a0298 <col:49> 'T' lvalue ParmVar 0x55765676d918 'x' 'T &'
|         `-DeclRefExpr 0x5576567a02b8 <col:52> 'const V' lvalue ParmVar 0x55765676d9b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55765676e088 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55765676dba8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55765676dc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55765676dfe8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55765676dce8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676dd68 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55765676de08 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55765676dea8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576567a0490 <col:85, line:412:5>
|     |-CallExpr 0x5576567a0410 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a0340 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5576567a0380 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5576567a0390 <col:37> 'const char *' lvalue ParmVar 0x55765676dce8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576567a03b0 <col:46> 'int' lvalue ParmVar 0x55765676dd68 'flags' 'int'
|     | |-DeclRefExpr 0x5576567a03d0 <col:53> 'T' lvalue ParmVar 0x55765676de08 'x' 'T &'
|     | `-DeclRefExpr 0x5576567a03f0 <col:56> 'const V' lvalue ParmVar 0x55765676dea8 'default_value' 'const V &'
|     `-ReturnStmt 0x5576567a0480 <line:411:9, col:17>
|       `-UnaryOperator 0x5576567a0468 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a0458 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55765676e518 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55765676e100 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765676e178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55765676e478 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55765676e238 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676e2b0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55765676e358 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5576567a0610 <col:53, line:425:5>
|     `-ReturnStmt 0x5576567a0600 <line:424:9, col:42>
|       `-CallExpr 0x5576567a05c0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a04c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a0540 <col:21> 'const char *' lvalue ParmVar 0x55765676e238 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a0560 <col:30> 'int' 0
|         |-DeclRefExpr 0x5576567a0580 <col:33> 'P' lvalue ParmVar 0x55765676e2b0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a05a0 <col:41> 'T' lvalue ParmVar 0x55765676e358 'x' 'T &'
|-FunctionTemplateDecl 0x55765676e968 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55765676e588 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765676e608 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55765676e8c8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55765676e6c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676e740 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55765676e7e8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5576567a0788 <col:55, line:429:5>
|     `-ReturnStmt 0x5576567a0778 <line:428:9, col:50>
|       `-CallExpr 0x5576567a0738 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a0638 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a06b8 <col:21> 'const char *' lvalue ParmVar 0x55765676e6c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a06d8 <col:30> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5576567a06f8 <col:41> 'P' lvalue ParmVar 0x55765676e740 'parser' 'P'
|         `-DeclRefExpr 0x5576567a0718 <col:49> 'T' lvalue ParmVar 0x55765676e7e8 'x' 'T &'
|-FunctionTemplateDecl 0x55765676edb8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55765676e9d8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765676ea58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55765676ed18 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55765676eb18 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676eb90 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55765676ec38 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5576567a0900 <col:55, line:433:5>
|     `-ReturnStmt 0x5576567a08f0 <line:432:9, col:51>
|       `-CallExpr 0x5576567a08b0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a07b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a0830 <col:21> 'const char *' lvalue ParmVar 0x55765676eb18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a0850 <col:30> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int'
|         |-DeclRefExpr 0x5576567a0870 <col:42> 'P' lvalue ParmVar 0x55765676eb90 'parser' 'P'
|         `-DeclRefExpr 0x5576567a0890 <col:50> 'T' lvalue ParmVar 0x55765676ec38 'x' 'T &'
|-FunctionTemplateDecl 0x55765676f208 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55765676ee28 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765676eea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55765676f168 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55765676ef68 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676efe0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55765676f088 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5576567a0b28 <col:56, line:437:5>
|     `-ReturnStmt 0x5576567a0b18 <line:436:9, col:63>
|       `-CallExpr 0x5576567a0ad8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a0928 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a09a8 <col:21> 'const char *' lvalue ParmVar 0x55765676ef68 'keyword' 'const char *'
|         |-BinaryOperator 0x5576567a0a78 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5576567a0a28 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576567a0a08 <col:30> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576567a0a60 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576567a0a40 <col:42> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5576567a0a98 <col:54> 'P' lvalue ParmVar 0x55765676efe0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a0ab8 <col:62> 'T' lvalue ParmVar 0x55765676f088 'x' 'T &'
|-FunctionTemplateDecl 0x55765676fb28 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55765676f278 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765676f2f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55765676fa88 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55765676f3b8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676f438 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55765676f8a0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55765676f948 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5576567a1058 <col:64, line:442:5>
|     |-CallExpr 0x5576567a0c10 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a0b40 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5576567a0b80 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5576567a0b90 <col:30> 'const char *' lvalue ParmVar 0x55765676f3b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576567a0bb0 <col:39> 'int' lvalue ParmVar 0x55765676f438 'flags' 'int'
|     | |-DeclRefExpr 0x5576567a0bd0 <col:46> 'P' lvalue ParmVar 0x55765676f8a0 'parser' 'P'
|     | `-DeclRefExpr 0x5576567a0bf0 <col:54> 'T' lvalue ParmVar 0x55765676f948 'x' 'T &'
|     `-ReturnStmt 0x5576567a1048 <line:441:9, col:17>
|       `-UnaryOperator 0x5576567a1030 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a0c58 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656770128 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55765676fba0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765676fc18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55765676fc98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656770088 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55765676fd60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765676fdd8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55765676fe78 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55765676ff48 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576567a11f0 <col:84, line:458:5>
|     `-ReturnStmt 0x5576567a11e0 <line:457:9, col:64>
|       `-CallExpr 0x5576567a1198 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a10f8 <col:28> 'const char *' lvalue ParmVar 0x55765676fd60 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a1118 <col:37> 'int' 0
|         |-DeclRefExpr 0x5576567a1138 <col:40> 'P' lvalue ParmVar 0x55765676fdd8 'parser' 'P'
|         |-DeclRefExpr 0x5576567a1158 <col:48> 'T' lvalue ParmVar 0x55765676fe78 'x' 'T &'
|         `-DeclRefExpr 0x5576567a1178 <col:51> 'const V' lvalue ParmVar 0x55765676ff48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5576567706a8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5576567701a0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656770218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557656770298 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656770608 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x557656770360 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576567703d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x557656770478 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x557656770518 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576567a1380 <col:86, line:462:5>
|     `-ReturnStmt 0x5576567a1370 <line:461:9, col:73>
|       `-CallExpr 0x5576567a1328 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a1288 <col:28> 'const char *' lvalue ParmVar 0x557656770360 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a12a8 <col:37> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int'
|         |-DeclRefExpr 0x5576567a12c8 <col:49> 'P' lvalue ParmVar 0x5576567703d8 'parser' 'P'
|         |-DeclRefExpr 0x5576567a12e8 <col:57> 'T' lvalue ParmVar 0x557656770478 'x' 'T &'
|         `-DeclRefExpr 0x5576567a1308 <col:60> 'const V' lvalue ParmVar 0x557656770518 'default_value' 'const V &'
|-FunctionTemplateDecl 0x557656770d08 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x557656770720 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656770798 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x557656770818 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x557656770c68 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5576567708e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656770960 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5576567709d8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x557656770a78 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x557656770b18 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5576567a1510 <col:95, line:467:5>
|     |-CallExpr 0x5576567a1488 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a1398 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5576567a13d8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5576567a13e8 <col:37> 'const char *' lvalue ParmVar 0x5576567708e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576567a1408 <col:46> 'int' lvalue ParmVar 0x557656770960 'flags' 'int'
|     | |-DeclRefExpr 0x5576567a1428 <col:53> 'P' lvalue ParmVar 0x5576567709d8 'parser' 'P'
|     | |-DeclRefExpr 0x5576567a1448 <col:61> 'T' lvalue ParmVar 0x557656770a78 'x' 'T &'
|     | `-DeclRefExpr 0x5576567a1468 <col:64> 'const V' lvalue ParmVar 0x557656770b18 'default_value' 'const V &'
|     `-ReturnStmt 0x5576567a1500 <line:466:9, col:17>
|       `-UnaryOperator 0x5576567a14e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a14d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5576567712e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x557656770d88 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656770e08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656770e88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656771248 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656770f50 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656770fc8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x557656771068 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656771108 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576567a16b8 <col:63, line:481:5>
|     `-ReturnStmt 0x5576567a16a8 <line:480:9, col:47>
|       `-CallExpr 0x5576567a1660 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1540 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a15c0 <col:21> 'const char *' lvalue ParmVar 0x557656770f50 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a15e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x5576567a1600 <col:33> 'P' lvalue ParmVar 0x557656770fc8 'parser' 'P'
|         |-DeclRefExpr 0x5576567a1620 <col:41> 'T1' lvalue ParmVar 0x557656771068 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576567a1640 <col:45> 'T2' lvalue ParmVar 0x557656771108 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656771868 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x557656771360 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576567713d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656771458 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576567717c8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656771520 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656771598 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557656771638 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576567716d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576567a1858 <col:65, line:485:5>
|     `-ReturnStmt 0x5576567a1848 <line:484:9, col:55>
|       `-CallExpr 0x5576567a1800 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a16e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a1760 <col:21> 'const char *' lvalue ParmVar 0x557656771520 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a1780 <col:30> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5576567a17a0 <col:41> 'P' lvalue ParmVar 0x557656771598 'parser' 'P'
|         |-DeclRefExpr 0x5576567a17c0 <col:49> 'T1' lvalue ParmVar 0x557656771638 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576567a17e0 <col:53> 'T2' lvalue ParmVar 0x5576567716d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656771de8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5576567718e0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656771958 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576567719d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656771d48 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656771aa0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656771b18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x557656771bb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x557656771c58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576567a19f8 <col:65, line:489:5>
|     `-ReturnStmt 0x5576567a19e8 <line:488:9, col:56>
|       `-CallExpr 0x5576567a19a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1880 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a1900 <col:21> 'const char *' lvalue ParmVar 0x557656771aa0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a1920 <col:30> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int'
|         |-DeclRefExpr 0x5576567a1940 <col:42> 'P' lvalue ParmVar 0x557656771b18 'parser' 'P'
|         |-DeclRefExpr 0x5576567a1960 <col:50> 'T1' lvalue ParmVar 0x557656771bb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576567a1980 <col:54> 'T2' lvalue ParmVar 0x557656771c58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x557656772368 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x557656771e60 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656771ed8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x557656771f58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5576567722c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656772020 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656772098 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x557656772138 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576567721d8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576567a1c48 <col:66, line:493:5>
|     `-ReturnStmt 0x5576567a1c38 <line:492:9, col:68>
|       `-CallExpr 0x5576567a1bf0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1a20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a1aa0 <col:21> 'const char *' lvalue ParmVar 0x557656772020 'keyword' 'const char *'
|         |-BinaryOperator 0x5576567a1b70 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5576567a1b20 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576567a1b00 <col:30> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576567a1b58 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576567a1b38 <col:42> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5576567a1b90 <col:54> 'P' lvalue ParmVar 0x557656772098 'parser' 'P'
|         |-DeclRefExpr 0x5576567a1bb0 <col:62> 'T1' lvalue ParmVar 0x557656772138 'x1' 'T1 &'
|         `-DeclRefExpr 0x5576567a1bd0 <col:66> 'T2' lvalue ParmVar 0x5576567721d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5576567729c8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5576567723e0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656772458 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576567724d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656772928 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5576567725a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656772620 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x557656772698 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x557656772738 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5576567727d8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5576567a1dd8 <col:74, line:498:5>
|     |-CallExpr 0x5576567a1d50 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a1c60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5576567a1ca0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5576567a1cb0 <col:30> 'const char *' lvalue ParmVar 0x5576567725a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576567a1cd0 <col:39> 'int' lvalue ParmVar 0x557656772620 'flags' 'int'
|     | |-DeclRefExpr 0x5576567a1cf0 <col:46> 'P' lvalue ParmVar 0x557656772698 'parser' 'P'
|     | |-DeclRefExpr 0x5576567a1d10 <col:54> 'T1' lvalue ParmVar 0x557656772738 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5576567a1d30 <col:58> 'T2' lvalue ParmVar 0x5576567727d8 'x2' 'T2 &'
|     `-ReturnStmt 0x5576567a1dc8 <line:497:9, col:17>
|       `-UnaryOperator 0x5576567a1db0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a1da0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656772d28 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x557656772a48 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656772c88 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656772b00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656772b78 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5576567a1f20 <col:52, line:509:5>
|     `-ReturnStmt 0x5576567a1f10 <line:508:9, col:44>
|       `-CallExpr 0x5576567a1ed8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1e08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a1e78 <col:26> 'const char *' lvalue ParmVar 0x557656772b00 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a1e98 <col:35> 'int' 0
|         `-DeclRefExpr 0x5576567a1eb8 <col:38> 'P' lvalue ParmVar 0x557656772b78 'parser' 'P'
|-FunctionTemplateDecl 0x557656773028 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x557656772d90 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656772f88 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656772e40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656772eb8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5576567a2060 <col:54, line:513:5>
|     `-ReturnStmt 0x5576567a2050 <line:512:9, col:52>
|       `-CallExpr 0x5576567a2018 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a1f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a1fb8 <col:26> 'const char *' lvalue ParmVar 0x557656772e40 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a1fd8 <col:35> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5576567a1ff8 <col:46> 'P' lvalue ParmVar 0x557656772eb8 'parser' 'P'
|-FunctionTemplateDecl 0x557656773328 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x557656773090 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656773288 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656773140 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576567731b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5576567a21a0 <col:54, line:517:5>
|     `-ReturnStmt 0x5576567a2190 <line:516:9, col:53>
|       `-CallExpr 0x5576567a2158 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a2088 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a20f8 <col:26> 'const char *' lvalue ParmVar 0x557656773140 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a2118 <col:35> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int'
|         `-DeclRefExpr 0x5576567a2138 <col:47> 'P' lvalue ParmVar 0x5576567731b8 'parser' 'P'
|-FunctionTemplateDecl 0x557656773628 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x557656773390 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656773588 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656773440 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576567734b8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5576567a2390 <col:55, line:521:5>
|     `-ReturnStmt 0x5576567a2380 <line:520:9, col:65>
|       `-CallExpr 0x5576567a2348 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a21c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a2238 <col:26> 'const char *' lvalue ParmVar 0x557656773440 'keyword' 'const char *'
|         |-BinaryOperator 0x5576567a2308 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5576567a22b8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5576567a2298 <col:35> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5576567a22f0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5576567a22d0 <col:47> 'const int' lvalue Var 0x55765676beb0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5576567a2328 <col:59> 'P' lvalue ParmVar 0x5576567734b8 'parser' 'P'
|-FunctionTemplateDecl 0x557656775db8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x557656773690 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656775d18 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x557656773740 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576567737c0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x557656773838 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5576567a24d0 <col:63, line:526:5>
|     |-CallExpr 0x5576567a2458 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a23a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5576567a23e8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5576567a23f8 <col:35> 'const char *' lvalue ParmVar 0x557656773740 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5576567a2418 <col:44> 'int' lvalue ParmVar 0x5576567737c0 'flags' 'int'
|     | `-DeclRefExpr 0x5576567a2438 <col:51> 'P' lvalue ParmVar 0x557656773838 'parser' 'P'
|     `-ReturnStmt 0x5576567a24c0 <line:525:9, col:17>
|       `-UnaryOperator 0x5576567a24a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a2498 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656776208 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x557656775e28 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656775ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656776168 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656775f68 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656775fe0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x557656776088 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5576567a2628 <col:58, line:541:5>
|     `-ReturnStmt 0x5576567a2618 <line:540:9, col:39>
|       `-CallExpr 0x5576567a25e0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a2500 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a2580 <col:21> 'const char *' lvalue ParmVar 0x557656775f68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a25a0 <col:30> 'P' lvalue ParmVar 0x557656775fe0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a25c0 <col:38> 'T' lvalue ParmVar 0x557656776088 'x' 'T &'
|-FunctionTemplateDecl 0x557656776658 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x557656776278 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5576567762f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576567765b8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5576567763b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656776430 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5576567764d8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5576567a2760 <col:60, line:545:5>
|     `-ReturnStmt 0x5576567a2750 <line:544:9, col:41>
|       `-CallExpr 0x5576567a2718 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a2650 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a26b8 <col:23> 'const char *' lvalue ParmVar 0x5576567763b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a26d8 <col:32> 'P' lvalue ParmVar 0x557656776430 'parser' 'P'
|         `-DeclRefExpr 0x5576567a26f8 <col:40> 'T' lvalue ParmVar 0x5576567764d8 'x' 'T &'
|-FunctionTemplateDecl 0x557656776aa8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5576567766c8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656776748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656776a08 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656776808 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656776880 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x557656776928 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5576567a2898 <col:60, line:549:5>
|     `-ReturnStmt 0x5576567a2888 <line:548:9, col:41>
|       `-CallExpr 0x5576567a2850 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a2788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a27f0 <col:23> 'const char *' lvalue ParmVar 0x557656776808 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a2810 <col:32> 'P' lvalue ParmVar 0x557656776880 'parser' 'P'
|         `-DeclRefExpr 0x5576567a2830 <col:40> 'T' lvalue ParmVar 0x557656776928 'x' 'T &'
|-FunctionTemplateDecl 0x557656776ef8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x557656776b18 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656776b98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656776e58 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656776c58 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656776cd0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x557656776d78 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5576567a29d0 <col:61, line:553:5>
|     `-ReturnStmt 0x5576567a29c0 <line:552:9, col:42>
|       `-CallExpr 0x5576567a2988 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a28c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a2928 <col:24> 'const char *' lvalue ParmVar 0x557656776c58 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a2948 <col:33> 'P' lvalue ParmVar 0x557656776cd0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a2968 <col:41> 'T' lvalue ParmVar 0x557656776d78 'x' 'T &'
|-FunctionTemplateDecl 0x5576567773d8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x557656776f68 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656776fe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656777338 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5576567770a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656777128 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5576567771a0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x557656777248 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5576567a2b48 <col:69, line:557:5>
|     `-ReturnStmt 0x5576567a2b38 <line:556:9, col:46>
|       `-CallExpr 0x5576567a2af8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a29f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a2a78 <col:21> 'const char *' lvalue ParmVar 0x5576567770a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a2a98 <col:30> 'int' lvalue ParmVar 0x557656777128 'flags' 'int'
|         |-DeclRefExpr 0x5576567a2ab8 <col:37> 'P' lvalue ParmVar 0x5576567771a0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a2ad8 <col:45> 'T' lvalue ParmVar 0x557656777248 'x' 'T &'
|-FunctionTemplateDecl 0x5576567776e8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x557656777450 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656777648 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x557656777500 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656777578 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5576567a2c88 <col:56, line:571:5>
|     `-ReturnStmt 0x5576567a2c78 <line:570:9, col:48>
|       `-CallExpr 0x5576567a2c40 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a2b70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a2be0 <col:30> 'const char *' lvalue ParmVar 0x557656777500 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a2c00 <col:39> 'int' 0
|         `-DeclRefExpr 0x5576567a2c20 <col:42> 'P' lvalue ParmVar 0x557656777578 'parser' 'P'
|-FunctionTemplateDecl 0x557656777a78 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x557656777750 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5576567779d8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x557656777800 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656777880 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5576567778f8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5576567a2e58 <col:67, line:576:5>
|     |-CallExpr 0x5576567a2de0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a2ca0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5576567a2ce0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5576567a2cf0 <col:39> 'const char *' lvalue ParmVar 0x557656777800 'keyword' 'const char *'
|     | |-BinaryOperator 0x5576567a2da0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5576567a2d50 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5576567a2d10 <col:48> 'int' lvalue ParmVar 0x557656777880 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5576567a2d88 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5576567a2d68 <col:56> 'const int' lvalue Var 0x55765676c0a0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5576567a2dc0 <col:68> 'P' lvalue ParmVar 0x5576567778f8 'parser' 'P'
|     `-ReturnStmt 0x5576567a2e48 <line:575:9, col:17>
|       `-UnaryOperator 0x5576567a2e30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a2e20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656777ec8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x557656777ae8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656777b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656777e28 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x557656777c28 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656777ca0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x557656777d48 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5576567a2fc8 <col:62, line:592:5>
|     `-ReturnStmt 0x5576567a2fb8 <line:591:9, col:51>
|       `-CallExpr 0x5576567a2f78 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a2e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a2ef8 <col:30> 'const char *' lvalue ParmVar 0x557656777c28 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a2f18 <col:39> 'int' 0
|         |-DeclRefExpr 0x5576567a2f38 <col:42> 'P' lvalue ParmVar 0x557656777ca0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a2f58 <col:50> 'T' lvalue ParmVar 0x557656777d48 'x' 'T &'
|-FunctionTemplateDecl 0x5576567783a8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x557656777f38 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656777fb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656778308 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656778078 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576567780f8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x557656778170 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x557656778218 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5576567a31c0 <col:73, line:597:5>
|     |-CallExpr 0x5576567a3140 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a2fe0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5576567a3020 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5576567a3030 <col:39> 'const char *' lvalue ParmVar 0x557656778078 'keyword' 'const char *'
|     | |-BinaryOperator 0x5576567a30e0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5576567a3090 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5576567a3050 <col:48> 'int' lvalue ParmVar 0x5576567780f8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5576567a30c8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5576567a30a8 <col:56> 'const int' lvalue Var 0x55765676c0a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5576567a3100 <col:68> 'P' lvalue ParmVar 0x557656778170 'parser' 'P'
|     | `-DeclRefExpr 0x5576567a3120 <col:76> 'T' lvalue ParmVar 0x557656778218 'x' 'T &'
|     `-ReturnStmt 0x5576567a31b0 <line:596:9, col:17>
|       `-UnaryOperator 0x5576567a3198 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a3188 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656778958 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x557656778420 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656778498 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576567788b8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x557656778558 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5576567785d0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x557656778790 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576567a3330 <col:65, line:614:5>
|     `-ReturnStmt 0x5576567a3320 <line:613:9, col:46>
|       `-CallExpr 0x5576567a32e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a31f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a3260 <col:25> 'const char *' lvalue ParmVar 0x557656778558 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a3280 <col:34> 'int' 0
|         |-DeclRefExpr 0x5576567a32a0 <col:37> 'P' lvalue ParmVar 0x5576567785d0 'parser' 'P'
|         `-DeclRefExpr 0x5576567a32c0 <col:45> 'Vector<T>' lvalue ParmVar 0x557656778790 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x557656778d88 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5576567789c8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x557656778ce8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x557656778a80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656778bd0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576567a3550 <col:55, line:618:5>
|     `-ReturnStmt 0x5576567a3540 <line:617:9, col:55>
|       `-CallExpr 0x5576567a3500 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a3358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a33c8 <col:25> 'const char *' lvalue ParmVar 0x557656778a80 'keyword' 'const char *'
|         |-IntegerLiteral 0x5576567a33e8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5576567a34c0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5576567a34e0 <col:54> 'Vector<T>' lvalue ParmVar 0x557656778bd0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x557656779358 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x557656778df0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656778e68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576567792b8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x557656778f28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656778fa8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656779020 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x557656779170 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576567a3748 <col:76, line:623:5>
|     |-CallExpr 0x5576567a36c8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5576567a3568 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5576567a35a8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5576567a35b8 <col:34> 'const char *' lvalue ParmVar 0x557656778f28 'keyword' 'const char *'
|     | |-BinaryOperator 0x5576567a3668 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5576567a3618 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5576567a35d8 <col:43> 'int' lvalue ParmVar 0x557656778fa8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5576567a3650 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5576567a3630 <col:51> 'const int' lvalue Var 0x55765676c0a0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5576567a3688 <col:63> 'P' lvalue ParmVar 0x557656779020 'parser' 'P'
|     | `-DeclRefExpr 0x5576567a36a8 <col:71> 'Vector<T>' lvalue ParmVar 0x557656779170 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5576567a3738 <line:622:9, col:17>
|       `-UnaryOperator 0x5576567a3720 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a3710 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x557656779898 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5576567793d0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656779448 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5576567797f8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x557656779508 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656779588 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5576567796d0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5576567a39b0 <col:66, line:627:5>
|     `-ReturnStmt 0x5576567a39a0 <line:626:9, col:59>
|       `-CallExpr 0x5576567a3960 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5576567a3778 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5576567a37e8 <col:25> 'const char *' lvalue ParmVar 0x557656779508 'keyword' 'const char *'
|         |-DeclRefExpr 0x5576567a3808 <col:34> 'int' lvalue ParmVar 0x557656779588 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5576567a3920 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5576567a3940 <col:58> 'Vector<T>' lvalue ParmVar 0x5576567796d0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x557656779928 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5576567a3a30 <col:25, line:633:5>
|   `-ReturnStmt 0x5576567a3a20 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5576567a3a08 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5576567a39d8 <col:16> 'const bool' lvalue ->_status 0x55765678af08
|         `-CXXThisExpr 0x5576567a39c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x557656779ad8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x557656779a10 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5576567a3b18 <col:27, line:639:5>
|   |-BinaryOperator 0x5576567a3ac0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576567a3a48 <col:9> 'bool' lvalue ParmVar 0x557656779a10 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576567a3aa8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576567a3a78 <col:13> 'bool' lvalue ->_status 0x55765678af08
|   |     `-CXXThisExpr 0x5576567a3a68 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5576567a3b08 <line:638:9, col:17>
|     `-UnaryOperator 0x5576567a3af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576567a3ae0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55765677da00 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x557656779b98 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5576567a3c08 <col:39, line:644:5>
|   |-BinaryOperator 0x5576567a3bb0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576567a3b38 <col:9> 'bool' lvalue ParmVar 0x557656779b98 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576567a3b98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576567a3b68 <col:13> 'const bool' lvalue ->_status 0x55765678af08
|   |     `-CXXThisExpr 0x5576567a3b58 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5576567a3bf8 <line:643:9, col:17>
|     `-UnaryOperator 0x5576567a3be0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576567a3bd0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55765677dac8 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5576567a3cb0 <col:30, line:651:5>
|   `-ReturnStmt 0x5576567a3ca0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5576567a3c88 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5576567a3c58 <col:16> 'bool' lvalue ->_read_status 0x5576567648a0
|         `-ImplicitCastExpr 0x5576567a3c38 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5576567a3c28 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55765677dc10 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55765677db80 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5576567a3db8 <col:32, line:658:5>
|   |-BinaryOperator 0x5576567a3d60 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576567a3cc8 <col:9> 'bool' lvalue ParmVar 0x55765677db80 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576567a3d48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576567a3d18 <col:13> 'bool' lvalue ->_read_status 0x5576567648a0
|   |     `-ImplicitCastExpr 0x5576567a3cf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5576567a3ce8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5576567a3da8 <line:657:9, col:17>
|     `-UnaryOperator 0x5576567a3d90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576567a3d80 <col:17> 'Args *' this
|-CXXMethodDecl 0x55765677dd60 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55765677dcd0 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5576567a3ec8 <col:44, line:663:5>
|   |-BinaryOperator 0x5576567a3e70 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5576567a3dd8 <col:9> 'bool' lvalue ParmVar 0x55765677dcd0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5576567a3e58 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5576567a3e28 <col:13> 'bool' lvalue ->_read_status 0x5576567648a0
|   |     `-ImplicitCastExpr 0x5576567a3e08 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5576567a3df8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5576567a3eb8 <line:662:9, col:17>
|     `-UnaryOperator 0x5576567a3ea0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5576567a3e90 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55765677de28 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55765677def0 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55765677dfb8 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55765677e080 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55765677e388 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55765677e120 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765677e2e8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55765677e1f8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5576567a4220 <col:19, line:706:5>
|     `-IfStmt 0x5576567a41f8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5576567a3fc8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5576567a4128 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5576567a40f8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5576567a40b8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5576567a4020 <col:42> '<bound member function type>' ->simple_slot 0x55765679e910
|       |     | `-CXXThisExpr 0x5576567a4010 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x5576567a4070 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x5576567a4050 <col:55> 'T' lvalue ParmVar 0x55765677e1f8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5576567a4098 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5576567a41e8 <line:705:13, col:34>
|         `-CallExpr 0x5576567a41c0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5576567a4148 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5576567a41a0 <col:33> 'T' lvalue ParmVar 0x55765677e1f8 'x' 'T &'
|-FunctionTemplateDecl 0x55765677e658 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55765677e3e8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765677e5b8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55765677e4c8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5576567a4600 <col:31, line:717:5>
|     |-DeclStmt 0x5576567a4360 <line:713:9, col:23>
|     | `-VarDecl 0x5576567a4248 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5576567a4338 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5576567a42c0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5576567a4318 <col:21> 'T' lvalue ParmVar 0x55765677e4c8 'x' 'T &'
|     |-IfStmt 0x5576567a45b0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5576567a4458 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5576567a4590 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5576567a4530 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5576567a44c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|     |   | `-DeclRefExpr 0x5576567a44a0 <col:14> 'T *' lvalue Var 0x5576567a4248 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5576567a4570 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5576567a45e8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5576567a45c8 <col:16> 'T *' lvalue Var 0x5576567a4248 's' 'T *'
|-FunctionTemplateDecl 0x55765677ea68 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55765677e6b8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55765677e738 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55765677e9c8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55765677e818 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55765677e8b8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5576567a4910 <col:37, line:726:5>
|     |-IfStmt 0x5576567a48a0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5576567a48c0 <line:723:13, col:26>
|     | | `-VarDecl 0x5576567a4668 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5576567a4758 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5576567a46e0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5576567a4738 <col:25> 'T' lvalue ParmVar 0x55765677e818 'x' 'T &'
|     | |-DeclRefExpr 0x5576567a4780 <col:16> 'T *' lvalue Var 0x5576567a4668 's' 'T *'
|     | `-BinaryOperator 0x5576567a4880 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5576567a4830 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5576567a47c0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|     |   | `-DeclRefExpr 0x5576567a47a0 <col:14> 'T *' lvalue Var 0x5576567a4668 's' 'T *'
|     |   `-DeclRefExpr 0x5576567a4860 <col:18> 'const V' lvalue ParmVar 0x55765677e8b8 'value' 'const V &'
|     `-ReturnStmt 0x5576567a4900 <line:725:9, col:17>
|       `-UnaryOperator 0x5576567a48e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5576567a48d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55765677ee68 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55765677ead0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55765677edc8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55765677eb80 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765677ec00 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55765677eca8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5576567a5730 <col:65, line:737:5>
|     |-DeclStmt 0x5576567a49a8 <line:732:9, col:26>
|     | `-VarDecl 0x5576567a4940 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576567a56f8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5576567a5718 <line:733:13, col:58>
|       | `-VarDecl 0x5576567a49d0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576567a4bb0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576567a4b80 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576567a4b68 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576567a4b48 <col:26, col:58> 'String' (CXXTemporary 0x5576567a4b48)
|       |           `-CXXMemberCallExpr 0x5576567a4ad8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576567a4a48 <col:26> '<bound member function type>' ->find 0x55765679df28
|       |             | `-CXXThisExpr 0x5576567a4a38 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576567a4b10 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567a4a78 <col:31> 'const char *' lvalue ParmVar 0x55765677eb80 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576567a4b28 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567a4a98 <col:40> 'int' lvalue ParmVar 0x55765677ec00 'flags' 'int'
|       |             `-DeclRefExpr 0x5576567a4ab8 <col:47> 'Args::Slot *' lvalue Var 0x5576567a4940 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576567a4c68 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576567a4c50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576567a4c30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576567a4c00 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |       `-ImplicitCastExpr 0x5576567a4be8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576567a4bc8 <col:20> 'String' lvalue Var 0x5576567a49d0 'str' 'String'
|       `-CompoundStmt 0x5576567a56d8 <col:61, line:736:9>
|         |-DeclStmt 0x5576567a5120 <line:734:13, col:76>
|         | `-VarDecl 0x5576567a4cb8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5576567a50f0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576567a5060 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576567a50a8 <col:60> 'T' lvalue ParmVar 0x55765677eca8 'variable' 'T &'
|         |     `-UnaryOperator 0x5576567a50d8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576567a50c8 <col:71> 'Args *' this
|         `-CallExpr 0x5576567a56a8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5576567a5148 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|           | `-CXXThisExpr 0x5576567a5138 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5576567a5668 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5576567a5178 <col:23> 'T *' lvalue Var 0x5576567a4cb8 's' 'T *'
|           | `-CallExpr 0x5576567a5628 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5576567a5400 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5576567a5500 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5576567a5520 <col:86> 'String' lvalue Var 0x5576567a49d0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5576567a55d0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576567a5560 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|           |   | `-DeclRefExpr 0x5576567a5540 <col:92> 'T *' lvalue Var 0x5576567a4cb8 's' 'T *'
|           |   `-UnaryOperator 0x5576567a5610 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5576567a5600 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5576567a5688 <col:103> 'Args::Slot *' lvalue Var 0x5576567a4940 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55765677f3b8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55765677eed8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55765677ef58 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55765677f318 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55765677f018 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765677f098 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55765677f138 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55765677f1d8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5576567a65d0 <col:88, line:745:5>
|     |-DeclStmt 0x5576567a57c8 <line:741:9, col:26>
|     | `-VarDecl 0x5576567a5760 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576567a59e8 <line:742:9, col:55>
|     | `-VarDecl 0x5576567a57f0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5576567a59d0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5576567a59a0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5576567a5988 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5576567a5968 <col:22, col:54> 'String' (CXXTemporary 0x5576567a5968)
|     |           `-CXXMemberCallExpr 0x5576567a58f8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5576567a5868 <col:22> '<bound member function type>' ->find 0x55765679df28
|     |             | `-CXXThisExpr 0x5576567a5858 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5576567a5930 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576567a5898 <col:27> 'const char *' lvalue ParmVar 0x55765677f018 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5576567a5948 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576567a58b8 <col:36> 'int' lvalue ParmVar 0x55765677f098 'flags' 'int'
|     |             `-DeclRefExpr 0x5576567a58d8 <col:43> 'Args::Slot *' lvalue Var 0x5576567a5760 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5576567a5dc0 <line:743:9, col:72>
|     | `-VarDecl 0x5576567a5a38 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5576567a5d90 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5576567a5d00 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5576567a5d48 <col:56> 'T' lvalue ParmVar 0x55765677f138 'variable' 'T &'
|     |     `-UnaryOperator 0x5576567a5d78 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5576567a5d68 <col:67> 'Args *' this
|     `-CallExpr 0x5576567a65a0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5576567a5de8 <col:9> '<bound member function type>' ->postparse 0x55765679e138
|       | `-CXXThisExpr 0x5576567a5dd8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5576567a6560 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5576567a5e18 <col:19> 'T *' lvalue Var 0x5576567a5a38 's' 'T *'
|       | `-ParenExpr 0x5576567a6540 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5576567a6510 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5576567a64f8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5576567a64e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5576567a64c0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5576567a6490 <col:25> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |     |       `-ImplicitCastExpr 0x5576567a6478 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5576567a5e38 <col:25> 'String' lvalue Var 0x5576567a57f0 'str' 'String'
|       |     |-CallExpr 0x5576567a62e8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5576567a60c0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5576567a61c0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5576567a61e0 <col:89> 'String' lvalue Var 0x5576567a57f0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5576567a6290 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5576567a6220 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|       |     | | `-DeclRefExpr 0x5576567a6200 <col:95> 'T *' lvalue Var 0x5576567a5a38 's' 'T *'
|       |     | `-UnaryOperator 0x5576567a62d0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5576567a62c0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5576567a6458 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5576567a6438 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5576567a6408 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5576567a63b8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5576567a6348 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|       |         | | `-DeclRefExpr 0x5576567a6328 <col:109> 'T *' lvalue Var 0x5576567a5a38 's' 'T *'
|       |         | `-DeclRefExpr 0x5576567a63e8 <col:113> 'const V' lvalue ParmVar 0x55765677f1d8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5576567a6428 <col:120> 'bool' true
|       `-DeclRefExpr 0x5576567a6580 <col:128> 'Args::Slot *' lvalue Var 0x5576567a5760 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55765677f8e8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55765677f430 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55765677f4a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55765677f848 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55765677f568 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765677f5e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55765677f660 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55765677f708 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5576567a71c8 <col:75, line:754:5>
|     |-DeclStmt 0x5576567a6678 <line:749:9, col:26>
|     | `-VarDecl 0x5576567a6610 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576567a7190 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5576567a71b0 <line:750:13, col:58>
|       | `-VarDecl 0x5576567a66a0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576567a6880 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576567a6850 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576567a6838 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576567a6818 <col:26, col:58> 'String' (CXXTemporary 0x5576567a6818)
|       |           `-CXXMemberCallExpr 0x5576567a67a8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576567a6718 <col:26> '<bound member function type>' ->find 0x55765679df28
|       |             | `-CXXThisExpr 0x5576567a6708 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576567a67e0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567a6748 <col:31> 'const char *' lvalue ParmVar 0x55765677f568 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576567a67f8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567a6768 <col:40> 'int' lvalue ParmVar 0x55765677f5e8 'flags' 'int'
|       |             `-DeclRefExpr 0x5576567a6788 <col:47> 'Args::Slot *' lvalue Var 0x5576567a6610 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576567a6938 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576567a6920 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576567a6900 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576567a68d0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |       `-ImplicitCastExpr 0x5576567a68b8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576567a6898 <col:20> 'String' lvalue Var 0x5576567a66a0 'str' 'String'
|       `-CompoundStmt 0x5576567a7170 <col:61, line:753:9>
|         |-DeclStmt 0x5576567a6d10 <line:751:13, col:63>
|         | `-VarDecl 0x5576567a6988 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5576567a6ce0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576567a6c50 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576567a6c98 <col:47> 'T' lvalue ParmVar 0x55765677f708 'variable' 'T &'
|         |     `-UnaryOperator 0x5576567a6cc8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576567a6cb8 <col:58> 'Args *' this
|         `-CallExpr 0x5576567a7140 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5576567a6d38 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|           | `-CXXThisExpr 0x5576567a6d28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5576567a7100 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5576567a6d68 <col:23> 'T *' lvalue Var 0x5576567a6988 's' 'T *'
|           | `-CallExpr 0x5576567a70c0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5576567a6f50 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5576567a6f98 <col:56> 'P' lvalue ParmVar 0x55765677f660 'parser' 'P'
|           |   |-DeclRefExpr 0x5576567a6fb8 <col:64> 'String' lvalue Var 0x5576567a66a0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5576567a7068 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576567a6ff8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|           |   | `-DeclRefExpr 0x5576567a6fd8 <col:70> 'T *' lvalue Var 0x5576567a6988 's' 'T *'
|           |   `-UnaryOperator 0x5576567a70a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5576567a7098 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5576567a7120 <col:81> 'Args::Slot *' lvalue Var 0x5576567a6610 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55765677ff48 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55765677f960 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55765677f9d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55765677fa58 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55765677fea8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55765677fb20 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55765677fba0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55765677fc18 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55765677fcb8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55765677fd58 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5576567a7f58 <col:98, line:762:5>
|     |-DeclStmt 0x5576567a7260 <line:758:9, col:26>
|     | `-VarDecl 0x5576567a71f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576567a7480 <line:759:9, col:55>
|     | `-VarDecl 0x5576567a7288 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5576567a7468 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5576567a7438 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5576567a7420 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5576567a7400 <col:22, col:54> 'String' (CXXTemporary 0x5576567a7400)
|     |           `-CXXMemberCallExpr 0x5576567a7390 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5576567a7300 <col:22> '<bound member function type>' ->find 0x55765679df28
|     |             | `-CXXThisExpr 0x5576567a72f0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5576567a73c8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576567a7330 <col:27> 'const char *' lvalue ParmVar 0x55765677fb20 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5576567a73e0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5576567a7350 <col:36> 'int' lvalue ParmVar 0x55765677fba0 'flags' 'int'
|     |             `-DeclRefExpr 0x5576567a7370 <col:43> 'Args::Slot *' lvalue Var 0x5576567a71f8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5576567a78a0 <line:760:9, col:59>
|     | `-VarDecl 0x5576567a74d8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5576567a7870 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5576567a77e0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5576567a7828 <col:43> 'T' lvalue ParmVar 0x55765677fcb8 'variable' 'T &'
|     |     `-UnaryOperator 0x5576567a7858 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5576567a7848 <col:54> 'Args *' this
|     `-CallExpr 0x5576567a7f28 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5576567a78c8 <col:9> '<bound member function type>' ->postparse 0x55765679e138
|       | `-CXXThisExpr 0x5576567a78b8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5576567a7ee8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5576567a78f8 <col:19> 'T *' lvalue Var 0x5576567a74d8 's' 'T *'
|       | `-ParenExpr 0x5576567a7ec8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5576567a7e98 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5576567a7e80 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5576567a7e68 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5576567a7e48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5576567a7e18 <col:25> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |     |       `-ImplicitCastExpr 0x5576567a7e00 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5576567a7918 <col:25> 'String' lvalue Var 0x5576567a7288 'str' 'String'
|       |     |-CallExpr 0x5576567a7c70 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5576567a7b00 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5576567a7b48 <col:59> 'P' lvalue ParmVar 0x55765677fc18 'parser' 'P'
|       |     | |-DeclRefExpr 0x5576567a7b68 <col:67> 'String' lvalue Var 0x5576567a7288 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5576567a7c18 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5576567a7ba8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|       |     | | `-DeclRefExpr 0x5576567a7b88 <col:73> 'T *' lvalue Var 0x5576567a74d8 's' 'T *'
|       |     | `-UnaryOperator 0x5576567a7c58 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5576567a7c48 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5576567a7de0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5576567a7dc0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5576567a7d90 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5576567a7d40 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5576567a7cd0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|       |         | | `-DeclRefExpr 0x5576567a7cb0 <col:87> 'T *' lvalue Var 0x5576567a74d8 's' 'T *'
|       |         | `-DeclRefExpr 0x5576567a7d70 <col:91> 'const V' lvalue ParmVar 0x55765677fd58 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5576567a7db0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5576567a7f08 <col:106> 'Args::Slot *' lvalue Var 0x5576567a71f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576567805b8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55765677ffc8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656780048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5576567800c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x557656780518 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x557656780190 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656780210 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x557656780288 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x557656780328 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5576567803c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5576567a8f38 <col:60, line:773:5>
|     |-DeclStmt 0x5576567a8000 <line:767:9, col:26>
|     | `-VarDecl 0x5576567a7f98 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576567a8f00 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5576567a8f20 <line:768:13, col:58>
|       | `-VarDecl 0x5576567a8028 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576567a8208 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576567a81d8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576567a81c0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576567a81a0 <col:26, col:58> 'String' (CXXTemporary 0x5576567a81a0)
|       |           `-CXXMemberCallExpr 0x5576567a8130 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576567a80a0 <col:26> '<bound member function type>' ->find 0x55765679df28
|       |             | `-CXXThisExpr 0x5576567a8090 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576567a8168 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567a80d0 <col:31> 'const char *' lvalue ParmVar 0x557656780190 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576567a8180 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567a80f0 <col:40> 'int' lvalue ParmVar 0x557656780210 'flags' 'int'
|       |             `-DeclRefExpr 0x5576567a8110 <col:47> 'Args::Slot *' lvalue Var 0x5576567a7f98 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576567a82c0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576567a82a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576567a8288 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576567a8258 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |       `-ImplicitCastExpr 0x5576567a8240 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576567a8220 <col:20> 'String' lvalue Var 0x5576567a8028 'str' 'String'
|       `-CompoundStmt 0x5576567a8ed8 <col:61, line:772:9>
|         |-DeclStmt 0x5576567a8600 <line:769:13, col:66>
|         | `-VarDecl 0x5576567a8318 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5576567a85d0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576567a8540 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576567a8588 <col:49> 'T1' lvalue ParmVar 0x557656780328 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5576567a85b8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576567a85a8 <col:61> 'Args *' this
|         |-DeclStmt 0x5576567a8970 <line:770:13, col:66>
|         | `-VarDecl 0x5576567a8688 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5576567a8940 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5576567a88b0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5576567a88f8 <col:49> 'T2' lvalue ParmVar 0x5576567803c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5576567a8928 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5576567a8918 <col:61> 'Args *' this
|         `-CallExpr 0x5576567a8ea8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5576567a8998 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|           | `-CXXThisExpr 0x5576567a8988 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5576567a8e68 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5576567a8a08 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5576567a89c8 <col:23> 'T1 *' lvalue Var 0x5576567a8318 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5576567a89e8 <col:29> 'T2 *' lvalue Var 0x5576567a8688 's2' 'T2 *'
|           | `-CallExpr 0x5576567a8e20 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5576567a8bf0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5576567a8c38 <col:63> 'P' lvalue ParmVar 0x557656780288 'parser' 'P'
|           |   |-DeclRefExpr 0x5576567a8c58 <col:71> 'String' lvalue Var 0x5576567a8028 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5576567a8d08 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576567a8c98 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|           |   | `-DeclRefExpr 0x5576567a8c78 <col:77> 'T1 *' lvalue Var 0x5576567a8318 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5576567a8dc8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5576567a8d58 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|           |   | `-DeclRefExpr 0x5576567a8d38 <col:82> 'T2 *' lvalue Var 0x5576567a8688 's2' 'T2 *'
|           |   `-UnaryOperator 0x5576567a8e08 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5576567a8df8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5576567a8e88 <col:94> 'Args::Slot *' lvalue Var 0x5576567a7f98 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5576567809a8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x557656780638 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656780908 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5576567806f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656780770 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5576567807e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5576567aaf48 <col:67, line:780:5>
|     |-DeclStmt 0x5576567a8fd0 <line:777:9, col:26>
|     | `-VarDecl 0x5576567a8f68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5576567aaf10 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5576567aaf30 <line:778:13, col:58>
|       | `-VarDecl 0x5576567aaaf0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5576567aacd0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5576567aaca0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5576567aac88 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5576567aac68 <col:26, col:58> 'String' (CXXTemporary 0x5576567aac68)
|       |           `-CXXMemberCallExpr 0x5576567aabf8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5576567aab68 <col:26> '<bound member function type>' ->find 0x55765679df28
|       |             | `-CXXThisExpr 0x5576567aab58 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5576567aac30 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567aab98 <col:31> 'const char *' lvalue ParmVar 0x5576567806f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5576567aac48 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5576567aabb8 <col:40> 'int' lvalue ParmVar 0x557656780770 'flags' 'int'
|       |             `-DeclRefExpr 0x5576567aabd8 <col:47> 'Args::Slot *' lvalue Var 0x5576567a8f68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5576567aad88 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5576567aad70 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5576567aad50 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5576567aad20 <col:20> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|       |       `-ImplicitCastExpr 0x5576567aad08 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5576567aace8 <col:20> 'String' lvalue Var 0x5576567aaaf0 'str' 'String'
|       `-CallExpr 0x5576567aaee0 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5576567aadb0 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|         | `-CXXThisExpr 0x5576567aada0 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5576567aae90 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5576567aae00 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5576567aade0 <col:23> 'P' lvalue ParmVar 0x5576567807e8 'parser' 'P'
|         | |-DeclRefExpr 0x5576567aae48 <col:36> 'String' lvalue Var 0x5576567aaaf0 'str' 'String'
|         | `-UnaryOperator 0x5576567aae78 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5576567aae68 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5576567aaec0 <col:49> 'Args::Slot *' lvalue Var 0x5576567a8f68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x557656780d48 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x557656780a18 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x557656780ca8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x557656780ad0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656780b50 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x557656780bc8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5576567ab8b8 <col:71, line:792:5>
|     |-DeclStmt 0x5576567aafe0 <line:784:9, col:26>
|     | `-VarDecl 0x5576567aaf78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576567ab0b0 <line:785:9, col:29>
|     | `-VarDecl 0x5576567ab010 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576567ab098 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576567ab078 <col:28> 'int' 1
|     |-WhileStmt 0x5576567ab768 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5576567ab788 <line:786:16, col:61>
|     | | `-VarDecl 0x5576567ab0d8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5576567ab2b8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5576567ab288 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576567ab270 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576567ab250 <col:29, col:61> 'String' (CXXTemporary 0x5576567ab250)
|     | |           `-CXXMemberCallExpr 0x5576567ab1e0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576567ab150 <col:29> '<bound member function type>' ->find 0x55765679df28
|     | |             | `-CXXThisExpr 0x5576567ab140 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5576567ab218 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576567ab180 <col:34> 'const char *' lvalue ParmVar 0x557656780ad0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576567ab230 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576567ab1a0 <col:43> 'int' lvalue ParmVar 0x557656780b50 'flags' 'int'
|     | |             `-DeclRefExpr 0x5576567ab1c0 <col:50> 'Args::Slot *' lvalue Var 0x5576567aaf78 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576567ab370 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576567ab358 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576567ab338 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576567ab308 <col:23> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|     | |       `-ImplicitCastExpr 0x5576567ab2f0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5576567ab2d0 <col:23> 'String' lvalue Var 0x5576567ab0d8 'str' 'String'
|     | `-CompoundStmt 0x5576567ab740 <col:64, line:790:9>
|     |   |-CallExpr 0x5576567ab4c8 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5576567ab398 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|     |   | | `-CXXThisExpr 0x5576567ab388 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5576567ab478 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5576567ab3e8 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5576567ab3c8 <col:23> 'P' lvalue ParmVar 0x557656780bc8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5576567ab430 <col:36> 'String' lvalue Var 0x5576567ab0d8 'str' 'String'
|     |   | | `-UnaryOperator 0x5576567ab460 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5576567ab450 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5576567ab4a8 <col:49> 'Args::Slot *' lvalue Var 0x5576567aaf78 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5576567ab660 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5576567ab4f8 <col:13> 'int' lvalue Var 0x5576567ab010 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576567ab648 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576567ab628 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5576567ab590 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576567ab570 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576567ab558 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576567ab518 <col:28> 'int' lvalue Var 0x5576567ab010 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576567ab538 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5576567ab610 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5576567ab5e0 <col:49> 'bool' lvalue ->_read_status 0x5576567648a0
|     |   |         `-ImplicitCastExpr 0x5576567ab5c0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5576567ab5b0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5576567ab710 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576567ab680 <col:13> 'int' lvalue ParmVar 0x557656780b50 'flags' 'int'
|     |     `-UnaryOperator 0x5576567ab6f8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5576567ab6e0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576567ab6c0 <col:23> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5576567ab898 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5576567ab7d0 <col:9> 'bool' lvalue ->_read_status 0x5576567648a0
|       | `-ImplicitCastExpr 0x5576567ab7b0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5576567ab7a0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576567ab878 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576567ab858 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576567ab840 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5576567ab800 <col:25> 'int' lvalue Var 0x5576567ab010 'read_status' 'int'
|           `-IntegerLiteral 0x5576567ab820 <col:40> 'int' 1
|-FunctionTemplateDecl 0x557656781228 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x557656780db8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656780e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656781188 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x557656780ef8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656780f78 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x557656780ff0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x557656781098 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5576567ac850 <col:84, line:805:5>
|     |-DeclStmt 0x5576567ab960 <line:796:9, col:26>
|     | `-VarDecl 0x5576567ab8f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576567aba30 <line:797:9, col:29>
|     | `-VarDecl 0x5576567ab990 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576567aba18 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576567ab9f8 <col:28> 'int' 1
|     |-DeclStmt 0x5576567abd70 <line:798:9, col:71>
|     | `-VarDecl 0x5576567aba88 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5576567abd40 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5576567abcb0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5576567abcf8 <col:55> 'T' lvalue ParmVar 0x557656781098 'variable' 'T &'
|     |     `-UnaryOperator 0x5576567abd28 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5576567abd18 <col:66> 'Args *' this
|     |-WhileStmt 0x5576567ac700 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5576567ac720 <line:799:16, col:61>
|     | | `-VarDecl 0x5576567abd98 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5576567abf78 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5576567abf48 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576567abf30 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576567abf10 <col:29, col:61> 'String' (CXXTemporary 0x5576567abf10)
|     | |           `-CXXMemberCallExpr 0x5576567abea0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576567abe10 <col:29> '<bound member function type>' ->find 0x55765679df28
|     | |             | `-CXXThisExpr 0x5576567abe00 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5576567abed8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576567abe40 <col:34> 'const char *' lvalue ParmVar 0x557656780ef8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576567abef0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576567abe60 <col:43> 'int' lvalue ParmVar 0x557656780f78 'flags' 'int'
|     | |             `-DeclRefExpr 0x5576567abe80 <col:50> 'Args::Slot *' lvalue Var 0x5576567ab8f8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576567ac030 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576567ac018 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576567abff8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576567abfc8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|     | |       `-ImplicitCastExpr 0x5576567abfb0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5576567abf90 <col:23> 'String' lvalue Var 0x5576567abd98 'str' 'String'
|     | `-CompoundStmt 0x5576567ac6d8 <col:64, line:803:9>
|     |   |-CallExpr 0x5576567ac460 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5576567ac058 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|     |   | | `-CXXThisExpr 0x5576567ac048 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5576567ac420 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5576567ac088 <col:23> 'T *' lvalue Var 0x5576567aba88 's' 'T *'
|     |   | | `-CallExpr 0x5576567ac3e0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5576567ac270 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5576567ac2b8 <col:56> 'P' lvalue ParmVar 0x557656780ff0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5576567ac2d8 <col:64> 'String' lvalue Var 0x5576567abd98 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5576567ac388 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5576567ac318 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|     |   | |   | `-DeclRefExpr 0x5576567ac2f8 <col:70> 'T *' lvalue Var 0x5576567aba88 's' 'T *'
|     |   | |   `-UnaryOperator 0x5576567ac3c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5576567ac3b8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5576567ac440 <col:81> 'Args::Slot *' lvalue Var 0x5576567ab8f8 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5576567ac5f8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5576567ac490 <col:13> 'int' lvalue Var 0x5576567ab990 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576567ac5e0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576567ac5c0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5576567ac528 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576567ac508 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576567ac4f0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576567ac4b0 <col:28> 'int' lvalue Var 0x5576567ab990 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576567ac4d0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5576567ac5a8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5576567ac578 <col:49> 'bool' lvalue ->_read_status 0x5576567648a0
|     |   |         `-ImplicitCastExpr 0x5576567ac558 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5576567ac548 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5576567ac6a8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576567ac618 <col:13> 'int' lvalue ParmVar 0x557656780f78 'flags' 'int'
|     |     `-UnaryOperator 0x5576567ac690 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5576567ac678 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576567ac658 <col:23> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5576567ac830 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5576567ac768 <col:9> 'bool' lvalue ->_read_status 0x5576567648a0
|       | `-ImplicitCastExpr 0x5576567ac748 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5576567ac738 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576567ac810 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576567ac7f0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576567ac7d8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5576567ac798 <col:25> 'int' lvalue Var 0x5576567ab990 'read_status' 'int'
|           `-IntegerLiteral 0x5576567ac7b8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x557656781808 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5576567812a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x557656781318 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x557656781768 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5576567813d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x557656781458 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5576567814d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x557656781620 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5576567ad658 <col:87, line:821:5>
|     |-DeclStmt 0x5576567ac900 <line:809:9, col:26>
|     | `-VarDecl 0x5576567ac898 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5576567ac9d0 <line:810:9, col:29>
|     | `-VarDecl 0x5576567ac930 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5576567ac9b8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5576567ac998 <col:28> 'int' 1
|     |-DeclStmt 0x5576567acc18 <line:811:9, col:38>
|     | `-VarDecl 0x5576567acb00 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5576567acbf0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5576567acb78 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5576567acbd0 <col:29> 'Vector<T>' lvalue ParmVar 0x557656781620 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5576567ad508 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5576567ad528 <line:812:16, col:61>
|     | | `-VarDecl 0x5576567acc40 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5576567ace20 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5576567acdf0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5576567acdd8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5576567acdb8 <col:29, col:61> 'String' (CXXTemporary 0x5576567acdb8)
|     | |           `-CXXMemberCallExpr 0x5576567acd48 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5576567accb8 <col:29> '<bound member function type>' ->find 0x55765679df28
|     | |             | `-CXXThisExpr 0x5576567acca8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5576567acd80 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576567acce8 <col:34> 'const char *' lvalue ParmVar 0x5576567813d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5576567acd98 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5576567acd08 <col:43> 'int' lvalue ParmVar 0x557656781458 'flags' 'int'
|     | |             `-DeclRefExpr 0x5576567acd28 <col:50> 'Args::Slot *' lvalue Var 0x5576567ac898 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5576567aced8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5576567acec0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5576567acea0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5576567ace70 <col:23> '<bound member function type>' .operator int (String::*)() const 0x557656447c28
|     | |       `-ImplicitCastExpr 0x5576567ace58 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5576567ace38 <col:23> 'String' lvalue Var 0x5576567acc40 'str' 'String'
|     | `-CompoundStmt 0x5576567ad4d0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5576567acf98 <line:813:13, col:23>
|     |   | `-VarDecl 0x5576567acf00 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5576567acf78 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5576567ad118 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5576567acfc0 <col:13> '<bound member function type>' ->postparse 0x55765679e138
|     |   | | `-CXXThisExpr 0x5576567acfb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5576567ad0c0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5576567ad010 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5576567acff0 <col:23> 'P' lvalue ParmVar 0x5576567814d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5576567ad058 <col:36> 'String' lvalue Var 0x5576567acc40 'str' 'String'
|     |   | | |-DeclRefExpr 0x5576567ad078 <col:41> 'T' lvalue Var 0x5576567acf00 'sx' 'T'
|     |   | | `-UnaryOperator 0x5576567ad0a8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5576567ad098 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5576567ad0f8 <col:53> 'Args::Slot *' lvalue Var 0x5576567ac898 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5576567ad270 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5576567ad1a8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5576567ad178 <col:17> 'bool' lvalue ->_read_status 0x5576567648a0
|     |   | |   `-ImplicitCastExpr 0x5576567ad158 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5576567ad148 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5576567ad248 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5576567ad1e0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5576567ad1c0 <col:17> 'Vector<T> *' lvalue Var 0x5576567acb00 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5576567ad228 <col:30> 'T' lvalue Var 0x5576567acf00 'sx' 'T'
|     |   |-BinaryOperator 0x5576567ad3f0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5576567ad288 <col:13> 'int' lvalue Var 0x5576567ac930 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5576567ad3d8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5576567ad3b8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5576567ad320 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5576567ad300 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5576567ad2e8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5576567ad2a8 <col:28> 'int' lvalue Var 0x5576567ac930 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5576567ad2c8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5576567ad3a0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5576567ad370 <col:49> 'bool' lvalue ->_read_status 0x5576567648a0
|     |   |         `-ImplicitCastExpr 0x5576567ad350 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5576567ad340 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5576567ad4a0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5576567ad410 <col:13> 'int' lvalue ParmVar 0x557656781458 'flags' 'int'
|     |     `-UnaryOperator 0x5576567ad488 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5576567ad470 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5576567ad450 <col:23> 'const int' lvalue Var 0x55765676bdb8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5576567ad638 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5576567ad570 <col:9> 'bool' lvalue ->_read_status 0x5576567648a0
|       | `-ImplicitCastExpr 0x5576567ad550 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5576567ad540 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5576567ad618 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5576567ad5f8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5576567ad5e0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5576567ad5a0 <col:25> 'int' lvalue Var 0x5576567ac930 'read_status' 'int'
|           `-IntegerLiteral 0x5576567ad5c0 <col:40> 'int' 1
|-AccessSpecDecl 0x557656781880 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5576567818a8 prev 0x55765676a048 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x557656789370 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x557656789460 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5576567ad690 <col:16, line:828:9>
| |-CXXDestructorDecl 0x557656789550 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5576567ad6a0 <col:25, line:830:9>
| |-CXXMethodDecl 0x557656789650 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x557656789700 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5576567897a8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5576567897a8
| | `-ParmVarDecl 0x5576567898b8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55765678a078 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55765678a078
|   `-ParmVarDecl 0x55765678a188 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x557656789928 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x557656789a88 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x557656789c80 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x557656789b30 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x557656789ba8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5576567ad880 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x557656789f38 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5576567ad6f0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5576567ad6b0 <col:20> 'void *' lvalue ParmVar 0x557656789b30 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x557656789fa0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5576567ad778 <col:32, col:45> 'char *' array Function 0x55765635ca38 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5576567ad760 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5576567ad730 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x557656789ba8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55765678a000 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5576567ad840 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5576567ad800 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x557656789ba8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5576567ad900 <col:61, line:838:9>
| |-CXXDestructorDecl 0x557656789d80 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x557656789550 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5576567ad988 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5576567ad968 <line:840:13, col:22> 'void' array Function 0x55765635cd98 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5576567ad950 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5576567ad920 <col:22> 'char *' lvalue ->_slot 0x557656789fa0
| |         `-CXXThisExpr 0x5576567ad910 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x557656789e80 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x557656789650 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5576567adb78 <col:22, line:844:9>
| |   `-CallExpr 0x5576567adae0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5576567adac8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5576567adaa8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x557656433458 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5576567adb18 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5576567ad9f8 <col:20> 'void *' lvalue ->_ptr 0x557656789f38
| |     |   `-CXXThisExpr 0x5576567ad9e8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5576567adb48 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5576567adb30 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5576567ada38 <col:26> 'char *' lvalue ->_slot 0x557656789fa0
| |     |     `-CXXThisExpr 0x5576567ada28 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5576567adb60 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5576567ada78 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55765678a000
| |         `-CXXThisExpr 0x5576567ada68 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x557656789f38 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x557656789fa0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55765678a000 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55765678a1f8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55765678a1f8
| | `-ParmVarDecl 0x55765678a308 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55765678a3a8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55765678a3a8
|   `-ParmVarDecl 0x55765678a4b8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55765678a658 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55765678a528 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55765678a5c8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55765678a8f0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55765678aae8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55765678a9b8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55765678ac68 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5576567adbb0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5576567adb90 <col:20> 'T *' lvalue ParmVar 0x55765678a9b8 'ptr' 'T *'
|   | `-CompoundStmt 0x5576567adc00 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55765678abb8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x557656789650 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5576567addb0 <col:22, line:857:9>
|   |   `-CallExpr 0x5576567add80 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5576567adc10 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x557656575e88 0x557656424718
|   |     |-CXXOperatorCallExpr 0x5576567add10 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5576567adca0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55765675f798 0x55765675f388 0x55765675efb8 0x55765675ebd8 0x55765675e7f8 0x55765675e428
|   |     | `-MemberExpr 0x5576567adc70 <col:29> 'T *' lvalue ->_ptr 0x55765678ac68
|   |     |   `-CXXThisExpr 0x5576567adc60 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5576567add50 <col:35> 'T' lvalue ->_slot 0x55765678acc8
|   |       `-CXXThisExpr 0x5576567add40 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55765678ac68 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55765678acc8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55765678ad30 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55765678ae30 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55765678ae80 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55765678ae10 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55765678adf0 <col:31> 'int' 48
|-FieldDecl 0x55765678aea8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55765678af08 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55765678af68 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55765678b0a0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55765679d750 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55765679d7b0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55765679d8d8 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55765679db08 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55765679da10 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55765679dc58 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55765679dbc8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55765679df28 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55765679dd18 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55765679dd98 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55765679de40 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55765679e138 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55765679dff0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55765679e068 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55765679e208 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55765679e358 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55765679e2c0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55765679e6e8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55765679e418 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55765679e498 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55765679e540 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55765679e5f8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55765679e910 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55765679e7c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55765679e838 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55765679ec28 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55765679e9c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55765679eb88 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55765679ea98 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55765686c4e0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x557656956598 <line:167:18>
|-CXXRecordDecl 0x557656956658 prev 0x55765686c4e0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x557656956768 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Timestamp>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Timestamp * _ptr
        24 |   class Timestamp _slot
        24 |     union Timestamp::rep_t _t
        24 |       int64_t x
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | class Notifier
         0 |   (Notifier vtable pointer)
         8 |   class NotifierSignal _signal
         8 |     union NotifierSignal::vmvalue _v
         8 |       class atomic_uint32_t * v1
         8 |       struct NotifierSignal::vmpair * vm
        16 |     uint32_t _mask
        24 |   enum Notifier::SearchOp _search_op
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576568d9df8 <../dummy_inc/click/notifier.hh:73:1, line:130:1> line:73:7 referenced class Notifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x5576568d9f18 <col:1, col:7> col:7 implicit referenced class Notifier
|-AccessSpecDecl 0x5576568d9fa8 <col:18, col:24> col:18 public
|-EnumDecl 0x5576568d9fd0 <line:75:5, col:76> col:10 referenced SearchOp
| |-EnumConstantDecl 0x5576568da0d0 <col:21, col:35> col:21 referenced SEARCH_STOP 'Notifier::SearchOp'
| | `-ImplicitCastExpr 0x5576568da1c0 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5576568da0b0 <col:35> 'int' Int: 0
| |     `-IntegerLiteral 0x5576568da090 <col:35> 'int' 0
| |-EnumConstantDecl 0x5576568da120 <col:38> col:38 SEARCH_CONTINUE 'Notifier::SearchOp'
| `-EnumConstantDecl 0x5576568da170 <col:55> col:55 SEARCH_CONTINUE_WAKE 'Notifier::SearchOp'
|-TypedefDecl 0x5576568da408 <line:76:5, col:53> col:20 referenced callback_type 'void (*)(void *, Notifier *)'
| `-PointerType 0x5576568da3a0 'void (*)(void *, Notifier *)'
|   `-ParenType 0x5576568da340 'void (void *, Notifier *)' sugar
|     `-FunctionProtoType 0x5576568da300 'void (void *, Notifier *)' cdecl
|       |-BuiltinType 0x5576562062d0 'void'
|       |-PointerType 0x557656206ad0 'void *'
|       | `-BuiltinType 0x5576562062d0 'void'
|       `-PointerType 0x5576568da260 'Notifier *'
|         `-RecordType 0x5576568d9e90 'Notifier'
|           `-CXXRecord 0x5576568d9df8 'Notifier'
|-CXXConstructorDecl 0x5576568da548 <line:78:5, col:46> col:12 Notifier 'void (Notifier::SearchOp)' inline
| `-ParmVarDecl 0x5576568da470 <col:21, col:35> col:30 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x5576568e0b98 <col:35> 'Notifier::SearchOp' EnumConstant 0x5576568da0d0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXConstructorDecl 0x5576568da758 <line:79:5, col:76> col:12 Notifier 'void (const NotifierSignal &, Notifier::SearchOp)' inline
| |-ParmVarDecl 0x5576568da608 <col:21, col:43> col:43 signal 'const NotifierSignal &'
| `-ParmVarDecl 0x5576568da680 <col:51, col:65> col:60 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x5576568e0bb8 <col:65> 'Notifier::SearchOp' EnumConstant 0x5576568da0d0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x5576568da858 <line:80:5, col:23> col:13 ~Notifier 'void () noexcept' virtual
|-CXXMethodDecl 0x5576568da988 <line:83:5, line:85:5> line:83:17 initialized 'bool () const' inline
| `-CompoundStmt 0x5576568e0c78 <col:37, line:85:5>
|   `-ReturnStmt 0x5576568e0c68 <line:84:2, col:29>
|     `-CXXMemberCallExpr 0x5576568e0c48 <col:9, col:29> 'bool'
|       `-MemberExpr 0x5576568e0c18 <col:9, col:17> '<bound member function type>' .initialized 0x5576568d8090
|         `-MemberExpr 0x5576568e0be8 <col:9> 'const NotifierSignal' lvalue ->_signal 0x5576568e05b8
|           `-CXXThisExpr 0x5576568e0bd8 <col:9> 'const Notifier *' implicit this
|-CXXMethodDecl 0x5576568dab90 <line:87:5, col:52> col:9 initialize 'int (const char *, Router *)'
| |-ParmVarDecl 0x5576568daa40 <col:20, col:32> col:32 name 'const char *'
| `-ParmVarDecl 0x5576568daab8 <col:38, col:46> col:46 router 'Router *'
|-CXXMethodDecl 0x5576568dac88 <line:89:5, col:43> col:34 signal 'const NotifierSignal &() const' inline
|-CXXMethodDecl 0x5576568dad78 <line:90:5, col:33> col:21 search_op 'Notifier::SearchOp () const' inline
|-CXXMethodDecl 0x5576568dd4f0 <line:92:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x5576568dd630 <line:94:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x5576568dd5a0 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x5576568dd6f8 <line:95:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x5576568dd7b8 <line:96:5, col:23> col:17 sleep 'void ()' inline
|-CXXMethodDecl 0x5576568dda30 <line:98:5, col:71> col:17 used add_activate_callback 'int (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x5576568dd890 <col:39, col:53> col:53 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5576568dd910 <col:56, col:62> col:62 user_data 'void *'
|-CXXMethodDecl 0x5576568ddc88 <line:99:5, col:75> col:18 used remove_activate_callback 'void (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x5576568ddaf0 <col:43, col:57> col:57 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5576568ddb70 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x5576568dde10 <line:100:5, col:39> col:16 add_listener 'int (Task *)' inline
| `-ParmVarDecl 0x5576568ddd48 <col:29, col:35> col:35 task 'Task *'
|-CXXMethodDecl 0x5576568ddf58 <line:101:5, col:43> col:17 remove_listener 'void (Task *)' inline
| `-ParmVarDecl 0x5576568ddec8 <col:33, col:39> col:39 task 'Task *'
|-CXXMethodDecl 0x5576568de0e0 <line:102:5, col:59> col:16 add_dependent_signal 'int (NotifierSignal *)' inline
| `-ParmVarDecl 0x5576568de010 <col:37, col:53> col:53 signal 'NotifierSignal *'
|-CXXMethodDecl 0x5576568de258 <line:103:5, col:63> col:17 remove_dependent_signal 'void (NotifierSignal *)' inline
| `-ParmVarDecl 0x5576568de198 <col:41, col:57> col:57 signal 'NotifierSignal *'
|-VarDecl 0x5576568de320 <line:105:5, col:38> col:23 EMPTY_NOTIFIER 'const char []' static
|-VarDecl 0x5576568de3a8 <line:106:5, col:37> col:23 FULL_NOTIFIER 'const char []' static
|-CXXMethodDecl 0x5576568de578 <line:108:5, col:76> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x5576568de420 <col:56, col:65> col:65 e 'Element *'
| `-ParmVarDecl 0x5576568de4a0 <col:68, col:72> col:72 port 'int'
|-CXXMethodDecl 0x5576568de818 <line:109:5, col:88> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x5576568de638 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5576568de6b8 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x5576568de730 <col:78, col:84> col:84 task 'Task *'
|-CXXMethodDecl 0x5576568deab8 <line:110:5, col:106> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x5576568de8e0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5576568de960 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x5576568de9d8 <col:78, col:88> col:88 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x5576568dee38 <line:111:5, col:103> col:27 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x5576568deb80 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x5576568dec00 <col:61, col:65> col:65 port 'int'
| |-ParmVarDecl 0x5576568dec78 <col:71, col:85> col:85 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5576568decf8 <col:88, col:94> col:94 user_data 'void *'
|-CXXMethodDecl 0x5576568df020 <line:113:5, col:77> col:34 used downstream_full_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x5576568def08 <col:57, col:66> col:66 e 'Element *'
| `-ParmVarDecl 0x5576568def88 <col:69, col:73> col:73 port 'int'
|-CXXMethodDecl 0x5576568df278 <line:114:5, col:89> col:34 downstream_full_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x5576568df0e0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5576568df160 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x5576568df1d8 <col:79, col:85> col:85 task 'Task *'
|-CXXMethodDecl 0x5576568df4d8 <line:115:5, col:107> col:34 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x5576568df340 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5576568df3c0 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x5576568df438 <col:79, col:89> col:89 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x5576568df7c0 <line:116:5, col:104> col:27 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x5576568df5a0 <col:50, col:59> col:59 e 'Element *'
| |-ParmVarDecl 0x5576568df620 <col:62, col:66> col:66 port 'int'
| |-ParmVarDecl 0x5576568df698 <col:72, col:86> col:86 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x5576568df718 <col:89, col:95> col:95 user_data 'void *'
|-CXXMethodDecl 0x5576568dfa78 <line:118:5, col:109> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x5576568df890 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5576568df910 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x5576568df990 <col:78> col:81 'int'
| `-DeprecatedAttr 0x5576568dfb30 <col:98> "" ""
|-CXXMethodDecl 0x5576568dfe18 <line:119:5, col:121> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x5576568dfbb0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x5576568dfc30 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x5576568dfcb0 <col:78> col:81 'int'
| |-ParmVarDecl 0x5576568dfd28 <col:83, col:92> col:93 'Notifier *'
| `-DeprecatedAttr 0x5576568dfed8 <col:110> "" ""
|-CXXMethodDecl 0x5576568e00f8 <line:120:5, col:110> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x5576568dff58 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5576568dffd8 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x5576568e0058 <col:79> col:82 'int'
| `-DeprecatedAttr 0x5576568e01b0 <col:99> "" ""
|-CXXMethodDecl 0x5576568e0450 <line:121:5, col:122> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x5576568e0230 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x5576568e02b0 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x5576568e0330 <col:79> col:82 'int'
| |-ParmVarDecl 0x5576568e03a8 <col:84, col:93> col:94 'Notifier *'
| `-DeprecatedAttr 0x5576568e0510 <col:111> "" ""
|-AccessSpecDecl 0x5576568e0580 <line:123:3, col:10> col:3 private
|-FieldDecl 0x5576568e05b8 <line:125:5, col:20> col:20 referenced _signal 'NotifierSignal'
|-FieldDecl 0x5576568e0618 <line:126:5, col:14> col:14 referenced _search_op 'Notifier::SearchOp'
|-CXXMethodDecl 0x5576568e0790 <line:128:5, col:61> col:17 used dependent_signal_callback 'void (void *, Notifier *)' static
| |-ParmVarDecl 0x5576568e0680 <col:43, col:48> col:49 'void *'
| `-ParmVarDecl 0x5576568e06f8 <col:51, col:60> col:61 'Notifier *'
|-CXXConstructorDecl 0x5576568e0868 <line:73:7> col:7 implicit Notifier 'void (const Notifier &)' inline default noexcept-unevaluated 0x5576568e0868
| `-ParmVarDecl 0x5576568e0978 <col:7> col:7 'const Notifier &'
`-CXXMethodDecl 0x5576568e0a18 <col:7> col:7 implicit operator= 'Notifier &(const Notifier &)' inline default noexcept-unevaluated 0x5576568e0a18
  `-ParmVarDecl 0x5576568e0b28 <col:7> col:7 'const Notifier &'

Layout: <CGRecordLayout
  LLVMType:%class.Notifier = type <{ i32 (...)**, %class.NotifierSignal, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Notifier.base = type <{ i32 (...)**, %class.NotifierSignal, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55765635ea08 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55765635eb28 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x55765673ff50 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x557656740030 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x557656740030
| `-ParmVarDecl 0x557656740118 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x5576567401b8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x5576567401b8
| `-ParmVarDecl 0x5576567402c8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x55765674b7c0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class TimestampArg
         0 |   _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class Timestamp>
         0 |   class TimestampArg (base)
         0 |     _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5576567624c0 <../dummy_inc/click/timestamp.hh:1525:1, line:1534:1> line:1525:7 referenced class TimestampArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5576567625d8 <col:1, col:7> col:7 implicit referenced class TimestampArg
|-AccessSpecDecl 0x557656762668 <col:22, col:28> col:22 public
|-CXXConstructorDecl 0x557656762778 <line:1526:5, line:1528:5> line:1526:5 used TimestampArg 'void (bool)'
| |-ParmVarDecl 0x5576567626a0 <col:18, col:35> col:23 used is_signed 'bool' cinit
| | `-CXXBoolLiteralExpr 0x557656762b68 <col:35> 'bool' false
| |-CXXCtorInitializer Field 0x557656762b00 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x557656762bd8 <line:1527:21> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x557656762b98 <col:21> 'bool' lvalue ParmVar 0x5576567626a0 'is_signed' 'bool'
| `-CompoundStmt 0x557656762c20 <col:32, line:1528:5>
|-CXXMethodDecl 0x557656762a38 <line:1529:5, line:1532:5> line:1529:10 used parse 'bool (const String &, Timestamp &, const ArgContext &)'
| |-ParmVarDecl 0x557656762838 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x5576567628b0 <col:35, col:46> col:46 used value 'Timestamp &'
| |-ParmVarDecl 0x557656762958 <col:53, col:78> col:71 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x557656762b78 <col:78> 'const ArgContext' lvalue Var 0x557656762200 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x557656762e30 <col:90, line:1532:5>
|   |-CStyleCastExpr 0x557656762c60 <line:1530:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x557656762c30 <col:16> 'const ArgContext' lvalue ParmVar 0x557656762958 'args' 'const ArgContext &'
|   `-ReturnStmt 0x557656762e20 <line:1531:9, col:46>
|     `-CallExpr 0x557656762dd0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x557656762db8 <col:16> 'bool (*)(const String &, Timestamp *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x557656762d70 <col:16> 'bool (const String &, Timestamp *, bool)' lvalue Function 0x557656762408 'cp_time' 'bool (const String &, Timestamp *, bool)'
|       |-DeclRefExpr 0x557656762cd8 <col:24> 'const String' lvalue ParmVar 0x557656762838 'str' 'const String &'
|       |-UnaryOperator 0x557656762d18 <col:29, col:30> 'Timestamp *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x557656762cf8 <col:30> 'Timestamp' lvalue ParmVar 0x5576567628b0 'value' 'Timestamp &'
|       `-ImplicitCastExpr 0x557656762e08 <col:37> 'bool' <LValueToRValue>
|         `-MemberExpr 0x557656762d40 <col:37> 'bool' lvalue ->is_signed 0x557656762b00
|           `-CXXThisExpr 0x557656762d30 <col:37> 'TimestampArg *' implicit this
|-FieldDecl 0x557656762b00 <line:1533:5, col:10> col:10 referenced is_signed 'bool'
|-CXXDestructorDecl 0x55765695c1f0 <line:1525:7> col:7 implicit ~TimestampArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55765695c328 <col:7> col:7 implicit constexpr TimestampArg 'void (const TimestampArg &)' inline default trivial noexcept-unevaluated 0x55765695c328
| `-ParmVarDecl 0x55765695c438 <col:7> col:7 'const TimestampArg &'
`-CXXConstructorDecl 0x55765695c4d8 <col:7> col:7 implicit used constexpr TimestampArg 'void (TimestampArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x55765695c5e8 <col:7> col:7 used 'TimestampArg &&'
  |-CXXCtorInitializer Field 0x557656762b00 'is_signed' 'bool'
  | `-ImplicitCastExpr 0x55765695d3b0 <col:7> 'bool' <LValueToRValue>
  |   `-MemberExpr 0x55765695d380 <col:7> 'bool' xvalue .is_signed 0x557656762b00
  |     `-CXXStaticCastExpr 0x55765695d350 <col:7> 'TimestampArg' xvalue static_cast<class TimestampArg &&> <NoOp>
  |       `-DeclRefExpr 0x55765695d320 <col:7> 'TimestampArg' lvalue ParmVar 0x55765695c5e8 '' 'TimestampArg &&'
  `-CompoundStmt 0x55765695d3f8 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.TimestampArg = type { i8 }
  NonVirtualBaseLLVMType:%class.TimestampArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x557656762e78 <../dummy_inc/click/timestamp.hh:1536:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'TimestampArg'
|-TemplateArgument type 'Timestamp'
|-CXXRecordDecl 0x5576567630d8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55765695c118 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x55765695c9f0 <col:19> 'TimestampArg' 'void (bool)'
| |   `-CXXDefaultArgExpr 0x55765695c9d0 <<invalid sloc>> 'bool'
| `-CompoundStmt 0x55765695ca60 <col:19>
|-CXXConstructorDecl 0x55765695c658 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Timestamp> &)' inline default trivial noexcept-unevaluated 0x55765695c658
| `-ParmVarDecl 0x55765695c768 <col:19> col:19 'const DefaultArg<Timestamp> &'
|-CXXConstructorDecl 0x55765695c808 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Timestamp> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55765695c918 <col:19> col:19 used 'DefaultArg<Timestamp> &&'
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x55765695d408 <col:19> 'TimestampArg' 'void (TimestampArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55765695d300 <col:19> 'TimestampArg' xvalue <UncheckedDerivedToBase (TimestampArg)>
| |     `-CXXStaticCastExpr 0x55765695d2d0 <col:19> 'DefaultArg<Timestamp>' xvalue static_cast<struct DefaultArg<class Timestamp> &&> <NoOp>
| |       `-DeclRefExpr 0x55765695d2a0 <col:19> 'DefaultArg<Timestamp>' lvalue ParmVar 0x55765695c918 '' 'DefaultArg<Timestamp> &&'
| `-CompoundStmt 0x55765695d478 <col:19>
`-CXXDestructorDecl 0x55765695caa0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  IsZeroInitializable:1
  BitFields:[
]>
