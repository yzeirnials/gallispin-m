
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd24c5ff8 prev 0x560dd24bd798 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd24c60f0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x560dd24c6180 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x560dd24c61f8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x560dd24c62b8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x560dd24c6380 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x560dd24c64f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x560dd24c6430 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x560dd24c65a0 <col:24>
| `-OptimizeNoneAttr 0x560dd24c65f8 <col:34>
|-CXXMethodDecl 0x560dd24c6640 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x560dd24c68f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x560dd24c66f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x560dd24c6768 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x560dd24c67e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x560dd24c69b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x560dd24c69e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x560dd24c6a50 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x560dd24c6ad8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x560dd24c6df8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x560dd24c6b90 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x560dd24c6c08 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x560dd24c6c80 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x560dd24c6d00 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x560dd24c6f10 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x560dd24cd878 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x560dd24cd878
| `-ParmVarDecl 0x560dd24cd988 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x560dd24cda28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x560dd24cda28
| `-ParmVarDecl 0x560dd24cdb38 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x560dd2599520 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd24b9010 prev 0x560dd24b8d90 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560dd24b9108 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x560dd24b9198 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x560dd24b91f8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x560dd24b92e8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x560dd24b93e8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x560dd24b95b8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x560dd24b9468 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x560dd24b94e0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x560dd24b9748 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x560dd24b9680 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x560dd24b97f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x560dd24b9928 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x560dd24b9860 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x560dd24b9ac8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x560dd24b9a08 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x560dd24b9c68 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x560dd24b9ba8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x560dd24b9d10 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x560dd24b9e10 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x560dd24b9ef0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24b9df0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x560dd24b9dd0 <col:26> 'int' 1
| `-EnumConstantDecl 0x560dd24b9ea0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x560dd24b9f08 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd24b9e80 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x560dd24b9e60 <col:44> 'int' 2
|-CXXMethodDecl 0x560dd24ba050 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x560dd24b9f38 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x560dd24b9fb8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x560dd24ba1a8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x560dd24ba118 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x560dd24ba3e8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x560dd24ba268 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x560dd24ba2e0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x560dd24ba498 <col:20>
| `-OptimizeNoneAttr 0x560dd24ba4f0 <col:30>
|-CXXMethodDecl 0x560dd24ba5f8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x560dd24ba530 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x560dd24ba6a0 <col:20>
| `-OptimizeNoneAttr 0x560dd24ba6f8 <col:30>
|-CXXMethodDecl 0x560dd24ba748 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x560dd24ba810 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x560dd24ba928 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x560dd24ba9b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x560dd24baa38 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x560dd24baac0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x560dd24bab48 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x560dd24babd8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x560dd24bac98 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x560dd24bad20 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x560dd24bada8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x560dd24bae30 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x560dd24baeb8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x560dd24baf40 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x560dd24bafd0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x560dd24bb090 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x560dd24bb120 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x560dd24bb270 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x560dd24bb1d8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x560dd24bb400 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x560dd24bb330 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x560dd24bb6b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x560dd24bb4b8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x560dd24bb538 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x560dd24bb5b8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x560dd24bb768 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x560dd24bb870 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560dd24bbb00 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24bb850 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x560dd24bb830 <col:33> 'int' 0
| |-EnumConstantDecl 0x560dd24bb900 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560dd24bbb18 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24bb8e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x560dd24bb8c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x560dd24bb990 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560dd24bbb30 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24bb970 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x560dd24bb950 <col:38> 'int' 90
| |-EnumConstantDecl 0x560dd24bba20 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x560dd24bbb48 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24bba00 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x560dd24bb9e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x560dd24bbab0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x560dd24bbb60 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd24bba90 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x560dd24bba70 <col:32> 'int' 2000
|-CXXMethodDecl 0x560dd24bbba0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x560dd24bbfe0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x560dd24bbe50 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x560dd24bbec8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24bc0b0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x560dd24bc230 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x560dd24bc160 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24bc438 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x560dd24bc2e8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x560dd24bc360 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24bc538 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x560dd24bc5d8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x560dd24bc6a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x560dd24bc730 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x560dd24bc960 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24bc710 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x560dd24bc6f0 <col:36> 'int' EnumConstant 0x560dd24bc6a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x560dd24bc780 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560dd24bc7d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560dd24bc820 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560dd24bc870 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x560dd24bc8c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x560dd24bc910 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x560dd24bca48 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x560dd24bc988 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x560dd24bcb10 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x560dd24bcbd0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x560dd24bcc90 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x560dd24bcd50 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x560dd24bce68 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x560dd24bcf30 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x560dd24bd0b0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x560dd24bcfe0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x560dd24bd1d8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x560dd24bd3d8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x560dd24bd288 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x560dd24bd308 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x560dd24c9d18 <col:54, line:127:5>
|   |-ParenExpr 0x560dd24c9bc8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x560dd24c9b98 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x560dd24c9888 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x560dd24c9860 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x560dd24c9848 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x560dd24c9830 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x560dd24c9800 <col:31> 'Router *' lvalue ->_router 0x560dd24c76e0
|   |   |         `-CXXThisExpr 0x560dd24c97f0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x560dd24c98e8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd24c98c8 <col:48> 'int' 0
|   |   `-CallExpr 0x560dd24c9af8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x560dd24c9ae0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd24c9ac0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd24c9b38 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd24c9958 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x560dd24c9b50 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd24c9978 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x560dd24c9b68 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd24c99b0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x560dd24c9b80 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd24c9aa8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd24c9a90 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd24c9a48 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x560dd24c9c60 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x560dd24c9bf8 <col:9> 'Router *' lvalue ->_router 0x560dd24c76e0
|   | | `-CXXThisExpr 0x560dd24c9be8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x560dd24c9c48 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x560dd24c9c28 <col:19> 'Router *' lvalue ParmVar 0x560dd24bd288 'r' 'Router *'
|   `-BinaryOperator 0x560dd24c9cf8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x560dd24c9c90 <col:9> 'int' lvalue ->_eindex 0x560dd24c7748
|     | `-CXXThisExpr 0x560dd24c9c80 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x560dd24c9ce0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x560dd24c9cc0 <col:19> 'int' lvalue ParmVar 0x560dd24bd308 'eindex' 'int'
|-CXXMethodDecl 0x560dd24bd560 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x560dd24bd498 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x560dd24bd630 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x560dd24bd6f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x560dd24bd798 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x560dd24bd9e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x560dd24bd860 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x560dd24bd8e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x560dd24bda98 <col:20>
| `-OptimizeNoneAttr 0x560dd24bdaf0 <col:30>
|-CXXMethodDecl 0x560dd24bdbf8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x560dd24bdb30 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x560dd24bdca0 <col:20>
| `-OptimizeNoneAttr 0x560dd24bdcf8 <col:30>
|-CXXMethodDecl 0x560dd24bddc8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x560dd24bdd38 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x560dd24bde70 <col:20>
| `-OptimizeNoneAttr 0x560dd24bdec8 <col:30>
|-CXXMethodDecl 0x560dd24be058 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x560dd24bdf00 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x560dd24bdf80 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x560dd24be1e8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x560dd24be120 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x560dd24be338 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x560dd24be2a8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x560dd24be488 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x560dd24be3f8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x560dd24be5d8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x560dd24be548 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x560dd24be898 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x560dd24be690 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x560dd24be710 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x560dd24be7b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x560dd24be970 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x560dd24bea30 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x560dd24bed00 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x560dd24bebb0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x560dd24bec28 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24bee28 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x560dd24bf000 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x560dd24beee0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x560dd24bef60 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x560dd24bf1e8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x560dd24bf0c8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x560dd24bf148 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x560dd24bf558 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x560dd24bf2a8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x560dd24bf320 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x560dd24bf3a0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560dd24c9300 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd24c92e0 <col:106> 'int' 0
| `-ParmVarDecl 0x560dd24bf418 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560dd24c9338 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560dd24c9318 <col:126> 'int' 0
|-CXXMethodDecl 0x560dd24bf8f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560dd24bf628 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x560dd24bf6c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x560dd24bf740 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x560dd24bf7b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560dd24c9370 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560dd24c9350 <col:114> 'int' 0
|-CXXMethodDecl 0x560dd24bfc88 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560dd24bf9d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x560dd24bfa48 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x560dd24bfac8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x560dd24c9388 <col:96> 'int' 0
| `-ParmVarDecl 0x560dd24bfb40 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560dd24c93c8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560dd24c93a8 <col:116> 'int' 0
|-CXXMethodDecl 0x560dd24c0008 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x560dd24bfd58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x560dd24bfdd0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24bfe50 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560dd24c9400 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd24c93e0 <col:109> 'int' 0
| `-ParmVarDecl 0x560dd24bfec8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560dd24c9438 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560dd24c9418 <col:129> 'int' 0
|-CXXMethodDecl 0x560dd24c0388 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560dd24c00d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x560dd24c0150 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24c01d0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x560dd24c0248 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560dd24c9470 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560dd24c9450 <col:117> 'int' 0
|-CXXMethodDecl 0x560dd24c0718 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x560dd24c0460 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c04d8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24c0558 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x560dd24c9488 <col:99> 'int' 0
| `-ParmVarDecl 0x560dd24c05d0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x560dd24c94c8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x560dd24c94a8 <col:119> 'int' 0
|-CXXMethodDecl 0x560dd24c0b38 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x560dd24c07e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x560dd24c0868 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x560dd24c08e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24c0960 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x560dd24c9500 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd24c94e0 <col:108> 'int' 0
| `-ParmVarDecl 0x560dd24c09e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x560dd24c9538 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x560dd24c9518 <col:141> 'int' 0
|-CXXMethodDecl 0x560dd24c0f58 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x560dd24c0c10 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x560dd24c0c90 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x560dd24c0d08 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24c0d88 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x560dd24c0e08 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x560dd24c9550 <col:121> 'int' 0
|-CXXMethodDecl 0x560dd24c1388 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x560dd24c1038 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x560dd24c10b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x560dd24c1130 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24c11b0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x560dd24c9570 <col:98> 'int' 0
| `-ParmVarDecl 0x560dd24c1230 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x560dd24c9590 <col:123> 'int' 0
|-CXXMethodDecl 0x560dd24c1650 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x560dd24c1460 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x560dd24c14e0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x560dd24c1560 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x560dd24c95b0 <col:80> 'int' 0
|-EnumDecl 0x560dd24c1708 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x560dd24c1810 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560dd24c1aa0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24c17f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x560dd24c17d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x560dd24c18a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560dd24c1ab8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24c1880 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x560dd24c1860 <col:40> 'int' 2
| |-EnumConstantDecl 0x560dd24c1930 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560dd24c1ad0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24c1910 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x560dd24c18f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x560dd24c19c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x560dd24c1ae8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24c19a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x560dd24c1980 <col:36> 'int' 7
| `-EnumConstantDecl 0x560dd24c1a50 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x560dd24c1b00 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd24c1a30 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x560dd24c1a10 <col:34> 'int' 6
|-CXXMethodDecl 0x560dd24c1db8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x560dd24c1b28 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x560dd24c1bc8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x560dd24c1c48 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x560dd24c1cc0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x560dd24c9668 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x560dd24c9650 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x560dd24c9638 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x560dd24c9618 <col:98, col:105> 'String' (CXXTemporary 0x560dd24c9618)
|           `-CXXTemporaryObjectExpr 0x560dd24c95e0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x560dd24c2058 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x560dd24c1e88 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x560dd24c1f00 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x560dd24c1f78 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x560dd24c9718 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x560dd24c9700 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x560dd24c96e8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x560dd24c96c8 <col:94, col:101> 'String' (CXXTemporary 0x560dd24c96c8)
| |         `-CXXTemporaryObjectExpr 0x560dd24c9690 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x560dd24c9f00 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x560dd24c9e78 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x560dd24c9e48 <col:9> '<bound member function type>' ->add_task_handlers 0x560dd24c1db8
|     | `-CXXThisExpr 0x560dd24c9e38 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x560dd24c9eb8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x560dd24c9db8 <col:27> 'Task *' lvalue ParmVar 0x560dd24c1e88 'task' 'Task *'
|     |-ImplicitCastExpr 0x560dd24c9ed0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x560dd24c9dd8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x560dd24c1f00 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x560dd24c9ee8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x560dd24c9df8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x560dd24c1a50 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x560dd24c9e18 <col:62> 'const String' lvalue ParmVar 0x560dd24c1f78 'prefix' 'const String &'
|-CXXMethodDecl 0x560dd24c2268 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x560dd24c2120 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x560dd24c2198 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x560dd24c97c8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x560dd24c97b0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x560dd24c9798 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x560dd24c9778 <col:70, col:77> 'String' (CXXTemporary 0x560dd24c9778)
| |         `-CXXTemporaryObjectExpr 0x560dd24c9740 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x560dd24ca0d8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x560dd24ca050 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x560dd24ca020 <col:9> '<bound member function type>' ->add_task_handlers 0x560dd24c1db8
|     | `-CXXThisExpr 0x560dd24ca010 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x560dd24ca090 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x560dd24c9f90 <col:27> 'Task *' lvalue ParmVar 0x560dd24c2120 'task' 'Task *'
|     |-ImplicitCastExpr 0x560dd24ca0a8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x560dd24c9fb0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x560dd24ca0c0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x560dd24c9fd0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x560dd24c1a50 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x560dd24c9ff0 <col:57> 'const String' lvalue ParmVar 0x560dd24c2198 'prefix' 'const String &'
|-CXXMethodDecl 0x560dd24c2548 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x560dd24c2330 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c23b0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c2428 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x560dd24c27f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x560dd24c2618 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c2698 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c2718 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x560dd24c2ae8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x560dd24c28c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c2948 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c29c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x560dd24c2d98 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x560dd24c2bb8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c2c38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c2cb8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x560dd24c3048 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x560dd24c2e68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c2ee8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c2f68 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x560dd24c32f8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x560dd24c3118 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c3198 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c3210 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x560dd24c35a8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x560dd24c33c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c3448 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c34c8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x560dd24c38b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x560dd24c36d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c3750 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c37d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x560dd24c3b98 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x560dd24c3988 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c3a08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c3ab0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x560dd24c3e78 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x560dd24c3c68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c3ce8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c3d90 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x560dd24c40e0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x560dd24c3f48 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x560dd24c3fc8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x560dd24c4040 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x560dd24c4388 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x560dd24c41b0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x560dd24c4230 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x560dd24c42a8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x560dd24c4638 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x560dd24c4458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c44d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c4558 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x560dd24c48e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x560dd24c4708 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c4788 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c4800 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x560dd24c4b98 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x560dd24c49b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c4a38 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c4ab0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x560dd24c4e68 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x560dd24c4c68 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c4ce8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x560dd24c4d88 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x560dd24c5198 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x560dd24c4f38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x560dd24c4fb8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x560dd24c5030 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x560dd24c50a8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560dd24c97e0 <col:93> 'bool' false
|-CXXMethodDecl 0x560dd24c5380 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560dd24c5268 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x560dd24c52e8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x560dd24c5558 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560dd24c5440 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x560dd24c54c0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x560dd24c5838 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x560dd24c5618 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x560dd24c5690 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x560dd24c5710 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x560dd24c5788 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24c5b28 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x560dd24c5908 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x560dd24c5980 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x560dd24c5a00 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x560dd24c5a78 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24c5d60 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x560dd24c5c00 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x560dd24c5c80 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x560dd24c5f48 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x560dd24c5e28 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x560dd24c5ea8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x560dd24c5ff8 prev 0x560dd24bd798 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560dd24c60f0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x560dd24c6180 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x560dd24c61f8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x560dd24c62b8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x560dd24c6380 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x560dd24c64f8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x560dd24c6430 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x560dd24c65a0 <col:24>
| | `-OptimizeNoneAttr 0x560dd24c65f8 <col:34>
| |-CXXMethodDecl 0x560dd24c6640 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x560dd24c68f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x560dd24c66f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x560dd24c6768 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x560dd24c67e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x560dd24c69b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x560dd24c69e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x560dd24c6a50 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x560dd24c6ad8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x560dd24c6df8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x560dd24c6b90 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x560dd24c6c08 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x560dd24c6c80 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x560dd24c6d00 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x560dd24c6f10 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x560dd24cd878 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x560dd24cd878
| | `-ParmVarDecl 0x560dd24cd988 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x560dd24cda28 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x560dd24cda28
| | `-ParmVarDecl 0x560dd24cdb38 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x560dd2599520 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x560dd24c6f88 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x560dd24c7028 <col:38> "" ""
|-CXXMethodDecl 0x560dd24c70b8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x560dd24c7158 <col:44> "" ""
|-AccessSpecDecl 0x560dd24c71c8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x560dd24c71f0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x560dd24c72f0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x560dd24c7340 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd24c72d0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x560dd24c72b0 <col:27> 'int' 4
|-FieldDecl 0x560dd24c73f8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x560dd24c75a8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x560dd24c7660 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x560dd24c76e0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x560dd24c7748 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x560dd24c7898 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x560dd24c77d8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x560dd24c7a48 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x560dd24c7958 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x560dd24c7c28 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x560dd24c7b08 <col:20> col:23 'int'
| `-ParmVarDecl 0x560dd24c7b88 <col:25> col:28 'int'
|-CXXMethodDecl 0x560dd24c7ed0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x560dd24c7cf0 <col:23> col:26 'int'
| |-ParmVarDecl 0x560dd24c7d70 <col:28> col:31 'int'
| `-ParmVarDecl 0x560dd24c7de8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x560dd24c7f88 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x560dd24c8050 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x560dd24c80a0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x560dd24c80f0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x560dd24c82d0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x560dd24c8180 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x560dd24c81f8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24c8578 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x560dd24c8398 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x560dd24c8418 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x560dd24c8490 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24c8798 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x560dd24c8648 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x560dd24c86c8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x560dd24c8ad0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x560dd24c8858 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x560dd24c88d8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x560dd24c8950 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x560dd24c89d0 <col:57> col:60 'int'
|-CXXMethodDecl 0x560dd24c8cb8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x560dd24c8ba0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x560dd24c8c20 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x560dd24c8e08 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x560dd24c8d78 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x560dd24c9188 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x560dd24c8ec8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x560dd24c8f48 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x560dd24c8fc0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x560dd24c9040 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x560dd24c92a0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class PaintSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint8_t _anno
           | [sizeof=112, dsize=109, align=8,
           |  nvsize=109, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd24d09e8 <../elements/standard/paintswitch.hh:31:1, line:47:1> line:31:7 class PaintSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x560dd24d0b48 <col:1, col:7> col:7 implicit referenced class PaintSwitch
|-AccessSpecDecl 0x560dd24d0bd8 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x560dd24d0c60 <line:33:5, col:17> col:5 PaintSwitch 'void ()'
|-CXXMethodDecl 0x560dd24d0d60 <line:35:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x560dd24ba748 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x560dd24d1ca0 <col:36, col:60>
|   `-ReturnStmt 0x560dd24d1c90 <col:38, col:45>
|     `-ImplicitCastExpr 0x560dd24d1c78 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x560dd24d1c50 <col:45> 'const char [12]' lvalue "PaintSwitch"
|-CXXMethodDecl 0x560dd24d0e28 <line:36:5, col:52> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x560dd24ba810 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x560dd24d1d00 <col:36, col:52>
|   `-ReturnStmt 0x560dd24d1cf0 <col:38, col:45>
|     `-ImplicitCastExpr 0x560dd24d1cd8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x560dd24d1cb8 <col:45> 'const char [4]' lvalue "1/-"
|-CXXMethodDecl 0x560dd24d0ef0 <line:37:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x560dd24babd8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x560dd24d1d60 <col:36, col:51>
|   `-ReturnStmt 0x560dd24d1d50 <col:38, col:45>
|     `-ImplicitCastExpr 0x560dd24d1d38 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x560dd24d1d18 <col:45> 'const char []' lvalue Var 0x560dd24bad20 'PUSH' 'const char []'
|-CXXMethodDecl 0x560dd24d11c0 <line:39:5, col:59> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x560dd24bbfe0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x560dd24d1070 <col:19, col:35> col:35 conf 'Vector<String> &'
| `-ParmVarDecl 0x560dd24d10e8 <col:41, col:55> col:55 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd24d1398 <line:41:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x560dd24b95b8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x560dd24d1288 <col:15> col:18 'int'
| `-ParmVarDecl 0x560dd24d1300 <col:20, col:27> col:28 'Packet *'
|-AccessSpecDecl 0x560dd24d1448 <line:43:3, col:10> col:3 private
|-FieldDecl 0x560dd24d1480 <line:45:5, col:13> col:13 _anno 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x560dd24d14f8 <line:31:7> col:7 implicit PaintSwitch 'void (const PaintSwitch &)' inline default_delete noexcept-unevaluated 0x560dd24d14f8
| `-ParmVarDecl 0x560dd24d1608 <col:7> col:7 'const PaintSwitch &'
|-CXXConstructorDecl 0x560dd24d16a8 <col:7> col:7 implicit PaintSwitch 'void (PaintSwitch &&)' inline default_delete noexcept-unevaluated 0x560dd24d16a8
| `-ParmVarDecl 0x560dd24d17b8 <col:7> col:7 'PaintSwitch &&'
|-CXXMethodDecl 0x560dd24d1858 <col:7> col:7 implicit operator= 'PaintSwitch &(const PaintSwitch &)' inline default_delete noexcept-unevaluated 0x560dd24d1858
| `-ParmVarDecl 0x560dd24d1968 <col:7> col:7 'const PaintSwitch &'
|-CXXMethodDecl 0x560dd24d19d8 <col:7> col:7 implicit operator= 'PaintSwitch &(PaintSwitch &&)' inline default_delete noexcept-unevaluated 0x560dd24d19d8
| `-ParmVarDecl 0x560dd24d1ae8 <col:7> col:7 'PaintSwitch &&'
`-CXXDestructorDecl 0x560dd24d1b70 <col:7> col:7 implicit ~PaintSwitch 'void ()' inline default noexcept-unevaluated 0x560dd24d1b70
  `-Overrides: [ 0x560dd24b92e8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.PaintSwitch = type { %class.Element.base, i8, [3 x i8] }
  NonVirtualBaseLLVMType:%class.PaintSwitch.base = type { %class.Element.base, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2288fd0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x560dd22890e8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x560dd2289188 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x560dd22891e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x560dd2289248 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x560dd22892f8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2289600 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd2289718 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x560dd22897c0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x560dd2289828 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x560dd22898b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x560dd228f950 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560dd228fd88 <col:12>
|-CXXConstructorDecl 0x560dd228fa58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x560dd228fb68 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560dd22897c0 'data' 'const char *'
| | `-ImplicitCastExpr 0x560dd2292310 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x560dd22922e0 <col:12> 'const char *const' lvalue .data 0x560dd22897c0
| |     `-DeclRefExpr 0x560dd22922c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd228fb68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560dd2289828 'length' 'int'
| | `-ImplicitCastExpr 0x560dd22923a0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x560dd2292370 <col:12> 'const int' lvalue .length 0x560dd2289828
| |     `-DeclRefExpr 0x560dd2292350 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd228fb68 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x560dd22898b8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x560dd2292430 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x560dd2292400 <col:12> 'String::memo_t *const' lvalue .memo 0x560dd22898b8
| |     `-DeclRefExpr 0x560dd22923e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd228fb68 '' 'const String::rep_t &'
| `-CompoundStmt 0x560dd2292488 <col:12>
|-CXXConstructorDecl 0x560dd228fc08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560dd228fc08
| `-ParmVarDecl 0x560dd228fd18 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x560dd2295270 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x560dd22a0c88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x560dd22a0d98 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x560dd22a12b0 <col:12>
|   |-BinaryOperator 0x560dd22a10c8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x560dd22a1080 <col:12> 'const char *' lvalue ->data 0x560dd22897c0
|   | | `-CXXThisExpr 0x560dd22a1070 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x560dd22a10b0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x560dd22a1040 <col:12> 'const char *const' lvalue .data 0x560dd22897c0
|   |     `-DeclRefExpr 0x560dd22a1020 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd22a0d98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x560dd22a1190 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x560dd22a1148 <col:12> 'int' lvalue ->length 0x560dd2289828
|   | | `-CXXThisExpr 0x560dd22a1138 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x560dd22a1178 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x560dd22a1108 <col:12> 'const int' lvalue .length 0x560dd2289828
|   |     `-DeclRefExpr 0x560dd22a10e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd22a0d98 '' 'const String::rep_t &'
|   |-BinaryOperator 0x560dd22a1258 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x560dd22a1210 <col:12> 'String::memo_t *' lvalue ->memo 0x560dd22898b8
|   | | `-CXXThisExpr 0x560dd22a1200 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x560dd22a1240 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x560dd22a11d0 <col:12> 'String::memo_t *const' lvalue .memo 0x560dd22898b8
|   |     `-DeclRefExpr 0x560dd22a11b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd22a0d98 '' 'const String::rep_t &'
|   `-ReturnStmt 0x560dd22a12a0 <col:12>
|     `-UnaryOperator 0x560dd22a1288 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd22a1278 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x560dd22a0e08 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560dd22a0e08
  `-ParmVarDecl 0x560dd22a0f18 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2280540 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560dd2280658 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x560dd22806e8 <col:16, col:22> col:16 public
|-TypedefDecl 0x560dd2280728 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x560dd1f53dc0 'const char *'
|   `-QualType 0x560dd1f53311 'const char' const
|     `-BuiltinType 0x560dd1f53310 'char'
|-TypedefDecl 0x560dd22807b0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x560dd2280780 'String::const_iterator' sugar
|   |-Typedef 0x560dd2280728 'const_iterator'
|   `-PointerType 0x560dd1f53dc0 'const char *'
|     `-QualType 0x560dd1f53311 'const char' const
|       `-BuiltinType 0x560dd1f53310 'char'
|-TypedefDecl 0x560dd2280920 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x560dd2280890 'int (String::*)() const'
|   |-RecordType 0x560dd22805d0 'String'
|   | `-CXXRecord 0x560dd2280540 'String'
|   `-ParenType 0x560dd2280830 'int () const' sugar
|     `-FunctionProtoType 0x560dd22543c0 'int () const' const cdecl
|       `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd2280988 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x560dd20a8720 'int64_t' sugar
|   |-Typedef 0x560dd1fbc2d0 'int64_t'
|   `-TypedefType 0x560dd1f954d0 '__int64_t' sugar
|     |-Typedef 0x560dd1f950a8 '__int64_t'
|     `-BuiltinType 0x560dd1f53390 'long'
|-TypedefDecl 0x560dd22809f0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x560dd20a8640 'uint64_t' sugar
|   |-Typedef 0x560dd1fbc470 'uint64_t'
|   `-TypedefType 0x560dd1f95560 '__uint64_t' sugar
|     |-Typedef 0x560dd1f95118 '__uint64_t'
|     `-BuiltinType 0x560dd1f53430 'unsigned long'
|-TypedefDecl 0x560dd2280a80 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x560dd2280a50 'String::intmax_t' sugar
|   |-Typedef 0x560dd2280988 'intmax_t'
|   `-TypedefType 0x560dd20a8720 'int64_t' sugar
|     |-Typedef 0x560dd1fbc2d0 'int64_t'
|     `-TypedefType 0x560dd1f954d0 '__int64_t' sugar
|       |-Typedef 0x560dd1f950a8 '__int64_t'
|       `-BuiltinType 0x560dd1f53390 'long'
|-TypedefDecl 0x560dd2280b10 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x560dd2280ae0 'String::uintmax_t' sugar
|   |-Typedef 0x560dd22809f0 'uintmax_t'
|   `-TypedefType 0x560dd20a8640 'uint64_t' sugar
|     |-Typedef 0x560dd1fbc470 'uint64_t'
|     `-TypedefType 0x560dd1f95560 '__uint64_t' sugar
|       |-Typedef 0x560dd1f95118 '__uint64_t'
|       `-BuiltinType 0x560dd1f53430 'unsigned long'
|-CXXConstructorDecl 0x560dd2280bd0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x560dd2280d78 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x560dd2280cb8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x560dd2280f28 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x560dd2280e68 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x560dd2281080 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x560dd2280ff0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x560dd2281298 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x560dd2281148 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x560dd22811c8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x560dd22814b8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x560dd2281368 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x560dd22813e8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x560dd22816d8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x560dd2281588 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x560dd2281608 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x560dd22818f8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x560dd22817a8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x560dd2281828 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x560dd2281a88 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x560dd22819c0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x560dd2281c08 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x560dd2281b48 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x560dd2281d98 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x560dd2281cd0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x560dd2281ef0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x560dd2281e60 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x560dd2282048 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x560dd2281fb8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x560dd22821a0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x560dd2282110 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x560dd2282328 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x560dd2282268 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x560dd22824b8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x560dd22823f0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x560dd2282648 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x560dd2282580 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x560dd22827d8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x560dd2282710 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x560dd22828d0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x560dd22829f8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x560dd2282b78 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x560dd2282ab0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x560dd2282cc8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x560dd2282c38 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x560dd2282d80 <col:63> "" ""
|-CXXMethodDecl 0x560dd2282ec8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x560dd2282e08 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x560dd22830d8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x560dd2282f88 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x560dd2283008 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x560dd22832f8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x560dd22831a0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x560dd2283220 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x560dd22835d8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x560dd22833b8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x560dd2283438 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x560dd228f420 <col:55> 'int' 10
| `-ParmVarDecl 0x560dd22834b0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560dd228f440 <col:76> 'bool' true
|-CXXMethodDecl 0x560dd22838b8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x560dd22836a0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x560dd2283720 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x560dd228f450 <col:56> 'int' 10
| `-ParmVarDecl 0x560dd2283798 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560dd228f470 <col:77> 'bool' true
|-CXXMethodDecl 0x560dd22839c0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x560dd2283a88 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x560dd2283b50 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x560dd2283bf0 <col:20>
| `-OptimizeNoneAttr 0x560dd2283c48 <col:30>
|-CXXConversionDecl 0x560dd2283d38 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x560dd2283e08 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x560dd2283ec8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x560dd2283fb8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x560dd2284078 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x560dd22841f8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x560dd2284130 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x560dd2284348 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x560dd22842b8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x560dd2284438 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x560dd22844f8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x560dd2284748 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x560dd22845b0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x560dd2284630 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x560dd22849a8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x560dd2284810 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x560dd2284890 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x560dd2284a78 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd2284c88 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x560dd2284b30 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x560dd2284bb0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x560dd2284ea8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x560dd2284d50 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x560dd2284dd0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x560dd2285038 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x560dd2284f70 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x560dd2285128 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x560dd2285298 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x560dd22851d8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560dd22854a8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x560dd2285358 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x560dd22853d8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x560dd22856c0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x560dd2285568 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x560dd22855e0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x560dd2285850 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x560dd2285780 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560dd2285a70 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x560dd2285910 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x560dd2285990 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x560dd2285bc0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x560dd2285b30 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x560dd2285d98 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x560dd2285c80 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x560dd2285d00 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x560dd2285ee8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x560dd2285e58 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x560dd2286100 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x560dd2285fa0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x560dd2286020 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x560dd228f480 <col:39> 'int' 0
|-CXXMethodDecl 0x560dd2286320 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x560dd22861c0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x560dd2286240 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x560dd228f4a0 <col:48> 'int' 0
|-CXXMethodDecl 0x560dd2286500 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x560dd22863e0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x560dd2286460 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x560dd228f4c0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x560dd22865d0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x560dd2286690 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x560dd2286750 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x560dd2286810 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x560dd22868d0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x560dd2286a78 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x560dd2286980 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x560dd2286bf8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x560dd2286b30 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x560dd2286dd0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x560dd2286cb8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x560dd2286f48 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x560dd2286e88 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x560dd2287090 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x560dd2287000 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x560dd22871e0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x560dd2287150 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x560dd22873b8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x560dd22872a0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x560dd2287320 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x560dd2287598 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x560dd2287480 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x560dd2287500 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x560dd22876e8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x560dd2287658 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x560dd22878f8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x560dd22877a8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x560dd2287828 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x560dd2287a58 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x560dd22879c0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x560dd2287bb0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x560dd2287b18 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x560dd2287c58 <col:57> "" ""
|-CXXMethodDecl 0x560dd2287d68 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x560dd2287cd8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x560dd2287eb8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x560dd2287e28 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x560dd2288038 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x560dd2287f70 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x560dd2288100 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x560dd22881c0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x560dd2288280 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x560dd2288320 <col:49> "" ""
|-CXXMethodDecl 0x560dd22883b0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x560dd2288470 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x560dd2288560 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x560dd2288628 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x560dd22886e8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x560dd22887a8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x560dd22888a0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x560dd2288968 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x560dd2288a30 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x560dd2288c08 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x560dd2288ae8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x560dd2288b68 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x560dd2288e30 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x560dd2288cd0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x560dd2288d50 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x560dd2288f40 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x560dd2288fa8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x560dd2288fd0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x560dd22890e8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x560dd2289188 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x560dd22891e8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x560dd2289248 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x560dd22892f8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x560dd2289360 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x560dd2289598 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x560dd22895e8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd2289578 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x560dd2289488 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x560dd2289430 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x560dd2289470 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x560dd2289450 <col:32> 'int' 8
|-CXXRecordDecl 0x560dd2289600 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560dd2289718 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x560dd22897c0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x560dd2289828 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x560dd22898b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x560dd228f950 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x560dd228fd88 <col:12>
| |-CXXConstructorDecl 0x560dd228fa58 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560dd228fb68 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560dd22897c0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x560dd2292310 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x560dd22922e0 <col:12> 'const char *const' lvalue .data 0x560dd22897c0
| | |     `-DeclRefExpr 0x560dd22922c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd228fb68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560dd2289828 'length' 'int'
| | | `-ImplicitCastExpr 0x560dd22923a0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x560dd2292370 <col:12> 'const int' lvalue .length 0x560dd2289828
| | |     `-DeclRefExpr 0x560dd2292350 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd228fb68 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x560dd22898b8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x560dd2292430 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x560dd2292400 <col:12> 'String::memo_t *const' lvalue .memo 0x560dd22898b8
| | |     `-DeclRefExpr 0x560dd22923e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd228fb68 '' 'const String::rep_t &'
| | `-CompoundStmt 0x560dd2292488 <col:12>
| |-CXXConstructorDecl 0x560dd228fc08 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560dd228fc08
| | `-ParmVarDecl 0x560dd228fd18 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x560dd2295270 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x560dd22a0c88 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560dd22a0d98 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x560dd22a12b0 <col:12>
| |   |-BinaryOperator 0x560dd22a10c8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x560dd22a1080 <col:12> 'const char *' lvalue ->data 0x560dd22897c0
| |   | | `-CXXThisExpr 0x560dd22a1070 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x560dd22a10b0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x560dd22a1040 <col:12> 'const char *const' lvalue .data 0x560dd22897c0
| |   |     `-DeclRefExpr 0x560dd22a1020 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd22a0d98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x560dd22a1190 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x560dd22a1148 <col:12> 'int' lvalue ->length 0x560dd2289828
| |   | | `-CXXThisExpr 0x560dd22a1138 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x560dd22a1178 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x560dd22a1108 <col:12> 'const int' lvalue .length 0x560dd2289828
| |   |     `-DeclRefExpr 0x560dd22a10e8 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd22a0d98 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x560dd22a1258 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x560dd22a1210 <col:12> 'String::memo_t *' lvalue ->memo 0x560dd22898b8
| |   | | `-CXXThisExpr 0x560dd22a1200 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x560dd22a1240 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x560dd22a11d0 <col:12> 'String::memo_t *const' lvalue .memo 0x560dd22898b8
| |   |     `-DeclRefExpr 0x560dd22a11b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x560dd22a0d98 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x560dd22a12a0 <col:12>
| |     `-UnaryOperator 0x560dd22a1288 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x560dd22a1278 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x560dd22a0e08 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x560dd22a0e08
|   `-ParmVarDecl 0x560dd22a0f18 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x560dd2289930 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x560dd2289b78 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x560dd2289998 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x560dd2289a18 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x560dd2289a90 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x560dd228f910 <col:79, line:261:5>
|   |-BinaryOperator 0x560dd228f588 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x560dd228f520 <col:2, col:5> 'const char *' lvalue .data 0x560dd22897c0
|   | | `-MemberExpr 0x560dd228f4f0 <col:2> 'String::rep_t' lvalue ->_r 0x560dd2289930
|   | |   `-CXXThisExpr 0x560dd228f4e0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x560dd228f570 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x560dd228f550 <col:12> 'const char *' lvalue ParmVar 0x560dd2289998 'data' 'const char *'
|   |-BinaryOperator 0x560dd228f650 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x560dd228f5e8 <col:2, col:5> 'int' lvalue .length 0x560dd2289828
|   | | `-MemberExpr 0x560dd228f5b8 <col:2> 'String::rep_t' lvalue ->_r 0x560dd2289930
|   | |   `-CXXThisExpr 0x560dd228f5a8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x560dd228f638 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x560dd228f618 <col:14> 'int' lvalue ParmVar 0x560dd2289a18 'length' 'int'
|   `-IfStmt 0x560dd228f8f8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x560dd228f770 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x560dd228f758 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x560dd228f738 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x560dd228f718 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x560dd228f6b0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|     |       | `-MemberExpr 0x560dd228f680 <col:7> 'String::rep_t' lvalue ->_r 0x560dd2289930
|     |       |   `-CXXThisExpr 0x560dd228f670 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x560dd228f700 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x560dd228f6e0 <col:17> 'String::memo_t *' lvalue ParmVar 0x560dd2289a90 'memo' 'String::memo_t *'
|     `-CallExpr 0x560dd228f8d0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x560dd228f8b8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x560dd228f7c0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x560dd22785a8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x560dd228f828 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x560dd2289188
|         `-ImplicitCastExpr 0x560dd228f810 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x560dd228f7f0 <col:27> 'String::memo_t *' lvalue ParmVar 0x560dd2289a90 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x560dd2289e28 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x560dd2289c48 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x560dd2289cc8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x560dd2289d40 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x560dd2289930 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x560dd228fd98 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x560dd228ff28 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x560dd228fe90 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x560dd228fe00 <col:2> '<bound member function type>' ->assign_memo 0x560dd2289b78
|     | `-ImplicitCastExpr 0x560dd228fec8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x560dd228fdf0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x560dd228fee0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x560dd228fe30 <col:14> 'const char *' lvalue ParmVar 0x560dd2289c48 'data' 'const char *'
|     |-ImplicitCastExpr 0x560dd228fef8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x560dd228fe50 <col:20> 'int' lvalue ParmVar 0x560dd2289cc8 'length' 'int'
|     `-ImplicitCastExpr 0x560dd228ff10 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x560dd228fe70 <col:28> 'String::memo_t *' lvalue ParmVar 0x560dd2289d40 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x560dd2289fb8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x560dd2289ef8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x560dd2290180 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x560dd2290100 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x560dd228ff50 <col:2> '<bound member function type>' ->assign_memo 0x560dd2289b78
|     | `-CXXThisExpr 0x560dd228ff40 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x560dd2290138 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x560dd228ffd0 <col:14, col:19> 'const char *' lvalue .data 0x560dd22897c0
|     |   `-MemberExpr 0x560dd228ffa0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x560dd2289930
|     |     `-DeclRefExpr 0x560dd228ff80 <col:14> 'const String' lvalue ParmVar 0x560dd2289ef8 'x' 'const String &'
|     |-ImplicitCastExpr 0x560dd2290150 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x560dd2290050 <col:25, col:30> 'int' lvalue .length 0x560dd2289828
|     |   `-MemberExpr 0x560dd2290020 <col:25, col:27> 'String::rep_t' lvalue ._r 0x560dd2289930
|     |     `-DeclRefExpr 0x560dd2290000 <col:25> 'const String' lvalue ParmVar 0x560dd2289ef8 'x' 'const String &'
|     `-ImplicitCastExpr 0x560dd2290168 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x560dd22900d0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|         `-MemberExpr 0x560dd22900a0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x560dd2289930
|           `-DeclRefExpr 0x560dd2290080 <col:38> 'const String' lvalue ParmVar 0x560dd2289ef8 'x' 'const String &'
|-CXXMethodDecl 0x560dd228a080 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x560dd2290b40 <col:31, line:278:5>
|   `-IfStmt 0x560dd2290b28 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x560dd2290220 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x560dd2290208 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x560dd22901d8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|     |     `-MemberExpr 0x560dd22901a8 <col:6> 'String::rep_t' lvalue ->_r 0x560dd2289930
|     |       `-CXXThisExpr 0x560dd2290198 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x560dd2290b00 <col:15, line:277:2>
|       |-ParenExpr 0x560dd22906d0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x560dd22906a0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x560dd2290330 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x560dd2290318 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x560dd2290300 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x560dd22902c0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x560dd2289188
|       |   |       `-ImplicitCastExpr 0x560dd22902a8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x560dd2290278 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|       |   |           `-MemberExpr 0x560dd2290248 <col:27> 'String::rep_t' lvalue ->_r 0x560dd2289930
|       |   |             `-CXXThisExpr 0x560dd2290238 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x560dd2290390 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x560dd2290370 <col:54> 'int' 0
|       |   `-CallExpr 0x560dd2290600 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x560dd22905e8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x560dd2290568 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x560dd2290640 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x560dd2290478 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x560dd2290658 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x560dd22904a8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x560dd2290670 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x560dd22904e0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x560dd2290688 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x560dd2290550 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x560dd2290538 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x560dd2290500 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x560dd2290a20 <line:274:6, line:275:22>
|       | |-CallExpr 0x560dd22908e0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x560dd22908c8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x560dd2290840 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x560dd22799f0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x560dd2290810 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x560dd2289188
|       | |   `-ImplicitCastExpr 0x560dd22907f8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x560dd22907c8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|       | |       `-MemberExpr 0x560dd2290798 <col:40> 'String::rep_t' lvalue ->_r 0x560dd2289930
|       | |         `-CXXThisExpr 0x560dd2290788 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x560dd22909e0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x560dd22909c8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x560dd2290908 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x560dd228e860 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x560dd2290a08 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x560dd2290968 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|       |       `-MemberExpr 0x560dd2290938 <col:15> 'String::rep_t' lvalue ->_r 0x560dd2289930
|       |         `-CXXThisExpr 0x560dd2290928 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x560dd2290ae0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x560dd2290a78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x560dd22898b8
|         | `-MemberExpr 0x560dd2290a48 <col:6> 'String::rep_t' lvalue ->_r 0x560dd2289930
|         |   `-CXXThisExpr 0x560dd2290a38 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x560dd2290ac8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x560dd2290aa8 <col:16> 'int' 0
|-CXXMethodDecl 0x560dd228a318 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x560dd228a138 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x560dd228a1b8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x560dd228a230 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x560dd228a3f0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x560dd228a640 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x560dd228a4a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x560dd228a528 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x560dd228a5a0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x560dd228a828 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x560dd228a710 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x560dd228a790 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x560dd228a928 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x560dd2290c18 <col:41, line:286:5>
|   `-ReturnStmt 0x560dd2290c08 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x560dd2290bd8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x560dd2290ba0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x560dd2290b88 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x560dd2290b68 <col:46> 'int' 1
|-CXXMethodDecl 0x560dd228abc8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x560dd228a9e0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x560dd228aa60 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x560dd228aae0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x560dd228e860 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x560dd228ac90 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x560dd228e930 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x560dd228eb00 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x560dd228e9e8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x560dd228ea68 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x560dd228ebc0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x560dd228ec88 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x560dd228ed88 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x560dd228ee00 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x560dd228ee78 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x560dd228eee0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x560dd228efe0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x560dd228f030 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd228efc0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x560dd228efa0 <col:22> 'int' 14
|-CXXMethodDecl 0x560dd228f248 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x560dd228f060 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x560dd228f0e0 <col:38> col:41 'int'
| `-ParmVarDecl 0x560dd228f160 <col:43> col:46 'int'
|-FriendDecl 0x560dd228f350 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x560dd228f3e0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560dd2351180 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x560dd2351358 prev 0x560dd2351180 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x560dd23513e8 <col:46, col:52> col:46 public
|-TypedefDecl 0x560dd2351410 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd2352d70 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x560dd2352d20 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x560dd2352d00 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x560dd2351628 'type'
|     `-SubstTemplateTypeParmType 0x560dd23515f0 'String' sugar
|       |-TemplateTypeParmType 0x560dd2243de0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd2243d90 'T'
|       `-RecordType 0x560dd22805d0 'String'
|         `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2352e28 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x560dd2352df0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x560dd2352dd0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x560dd2352d70 'type'
|     `-ElaboratedType 0x560dd2352d20 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x560dd2352d00 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x560dd2351628 'type'
|         `-SubstTemplateTypeParmType 0x560dd23515f0 'String' sugar
|           |-TemplateTypeParmType 0x560dd2243de0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560dd2243d90 'T'
|           `-RecordType 0x560dd22805d0 'String'
|             `-CXXRecord 0x560dd2280540 'String'
|-CXXMethodDecl 0x560dd2352fa8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x560dd2352eb8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x560dd2353098 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x560dd2353178 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x560dd2353178
|-CXXMethodDecl 0x560dd2353448 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x560dd2353350 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x560dd2353688 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560dd2353500 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560dd2353578 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd2353858 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560dd2353748 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560dd23537c0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd24ffba0 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x560dd24ffc70 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x560dd24ffeb8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560dd24ffd30 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x560dd24ffda8 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd2500118 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x560dd24fff88 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x560dd2500000 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd25002d8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x560dd25001e8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd2500498 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x560dd25003a0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd2500550 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560dd2500600 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x560dd2500838 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x560dd25006b0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560dd2500728 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x560dd2500ad8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x560dd25009e0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x560dd2500ba0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x560dd2500bf0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x560dd2500c40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560dd24bbc50 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x560dd234fbe8 prev 0x560dd24bbc50 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x560dd23510f0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x560dd23510a0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x560dd2351080 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x560dd2350f30 'type'
|     `-SubstTemplateTypeParmType 0x560dd2350dc0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x560dd2219b90 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x560dd2219b38 'F'
|       `-RecordType 0x560dd2350a20 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x560dd2350940 'typed_array_memory'
|-FieldDecl 0x560dd2500c90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x560dd2500ce0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x560dd2500d18 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|   |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x560dd22510a8 'T'
|   `-RecordType 0x560dd22805d0 'String'
|     `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2500da8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x560dd2500d70 'String &'
|   `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|     |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560dd22510a8 'T'
|     `-RecordType 0x560dd22805d0 'String'
|       `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2500e38 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x560dd2500e00 'const String &'
|   `-QualType 0x560dd234fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-RecordType 0x560dd22805d0 'String'
|         `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2500ec8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x560dd2500e90 'String *'
|   `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|     |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560dd22510a8 'T'
|     `-RecordType 0x560dd22805d0 'String'
|       `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2500f58 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x560dd2500f20 'const String *'
|   `-QualType 0x560dd234fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-RecordType 0x560dd22805d0 'String'
|         `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2501bb0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x560dd2501b60 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x560dd2501b40 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x560dd2501a78 'type'
|     `-LValueReferenceType 0x560dd2501a40 'const String &'
|       `-QualType 0x560dd25017e1 'const String' const
|         `-SubstTemplateTypeParmType 0x560dd25017e0 'String' sugar
|           |-TemplateTypeParmType 0x560dd2223ae0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x560dd2223a88 'T'
|           `-RecordType 0x560dd22805d0 'String'
|             `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2501c18 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x560dd2500e00 'const String &'
|   `-QualType 0x560dd234fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-RecordType 0x560dd22805d0 'String'
|         `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2501c70 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd2501cd8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x560dd2500e90 'String *'
|   `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|     |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560dd22510a8 'T'
|     `-RecordType 0x560dd22805d0 'String'
|       `-CXXRecord 0x560dd2280540 'String'
|-TypedefDecl 0x560dd2501d40 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x560dd2500f20 'const String *'
|   `-QualType 0x560dd234fc81 'const String' const
|     `-SubstTemplateTypeParmType 0x560dd234fc80 'String' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-RecordType 0x560dd22805d0 'String'
|         `-CXXRecord 0x560dd2280540 'String'
|-EnumDecl 0x560dd2501d98 <line:134:5> col:5
| `-EnumConstantDecl 0x560dd2501e90 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x560dd2501e70 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x560dd2252788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x560dd2252760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560dd2252740 <col:40> 'int' 1
|-CXXConstructorDecl 0x560dd2501f18 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x560dd25021a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2501fd0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560dd2502070 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x560dd2502438 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x560dd2502320 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x560dd25026f8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x560dd25025e0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x560dd2502a10 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x560dd25028f0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x560dd2502d20 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x560dd2502c00 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x560dd2503010 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2502e58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560dd2502ed0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560dd2503138 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560dd25031e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2503240 <col:30> Inherited
|-CXXMethodDecl 0x560dd2503288 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x560dd2503338 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2503390 <col:30> Inherited
|-CXXMethodDecl 0x560dd2503458 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560dd2503508 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2503560 <col:30> Inherited
|-CXXMethodDecl 0x560dd25035a8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560dd2503658 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd25036b0 <col:30> Inherited
|-CXXMethodDecl 0x560dd25036f8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560dd25037a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2503800 <col:30> Inherited
|-CXXMethodDecl 0x560dd2503848 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x560dd25038f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2503950 <col:30> Inherited
|-CXXMethodDecl 0x560dd2503978 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560dd2503a28 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560dd2503ad8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x560dd2503c98 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2503b88 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560dd2503c00 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560dd2503de8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x560dd2503d58 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2503f98 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x560dd2503ea0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560dd2504050 <col:20>
| `-OptimizeNoneAttr 0x560dd25040a8 <col:30>
|-CXXMethodDecl 0x560dd25041c8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x560dd25040d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560dd2504280 <col:20>
| `-OptimizeNoneAttr 0x560dd25042d8 <col:30>
|-CXXMethodDecl 0x560dd2504390 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560dd2504300 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd25044d8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560dd2504448 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2504608 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x560dd2504708 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x560dd25047d8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x560dd25048a8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x560dd25049e8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x560dd2504958 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2504b30 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560dd2504aa0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2504c78 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x560dd2504be8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560dd2504d30 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560dd2504e30 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x560dd2504da0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560dd2504ee8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x560dd2504fa8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x560dd25050a8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x560dd2505228 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560dd2505168 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x560dd25059e8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560dd25052e0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x560dd2505948 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x560dd2505848 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x560dd2505ac8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560dd2505c18 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x560dd2505b88 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560dd2505cd0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x560dd2505f18 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2505d90 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560dd2505e08 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x560dd25060a8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x560dd2505fe8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560dd25062b8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x560dd2506170 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x560dd25061e8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x560dd2506378 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560dd25065d8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x560dd25064e0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x560dd25066a8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x560dd25066a8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2587ae8 prev 0x560dd2435948 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560dd2587be0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x560dd2587c70 <col:22, col:28> col:22 public
|-EnumDecl 0x560dd2587c98 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x560dd2587db8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2587d98 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x560dd2587d80 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x560dd2587d60 <col:14> 'int' 999
| |-EnumConstantDecl 0x560dd2587e60 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2587e40 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x560dd2587e28 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x560dd2587e08 <col:14> 'int' 1
| |-EnumConstantDecl 0x560dd2587ef0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2587ed0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x560dd2587eb0 <col:17> 'int' 0
| |-EnumConstantDecl 0x560dd2587f80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2587f60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x560dd2587f40 <col:13> 'int' 1
| |-EnumConstantDecl 0x560dd2588010 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2587ff0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x560dd2587fd0 <col:16> 'int' 2
| |-EnumConstantDecl 0x560dd25880a0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2588080 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x560dd2588060 <col:13> 'int' 3
| |-EnumConstantDecl 0x560dd2588130 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2588110 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x560dd25880f0 <col:15> 'int' 4
| |-EnumConstantDecl 0x560dd25881c0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd25881a0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x560dd2588180 <col:14> 'int' 5
| |-EnumConstantDecl 0x560dd2588250 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x560dd2588230 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x560dd2588210 <col:12> 'int' 6
| `-EnumConstantDecl 0x560dd25882e0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x560dd25882c0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x560dd25882a0 <col:13> 'int' 7
|-VarDecl 0x560dd2588350 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x560dd25883d8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x560dd2588460 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x560dd25884e8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x560dd2588570 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x560dd25885f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x560dd2588680 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x560dd2588708 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x560dd2588790 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x560dd2588818 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x560dd25888a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x560dd25889a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x560dd258dc98 '_nerrors' 'int'
| | `-IntegerLiteral 0x560dd258e428 <line:128:13> 'int' 0
| `-CompoundStmt 0x560dd258e498 <col:16, line:129:5>
|-CXXDestructorDecl 0x560dd2588a90 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x560dd258e4a8 <col:29, line:132:5>
|-CXXMethodDecl 0x560dd2588c48 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x560dd2588b80 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd2588d10 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x560dd2588df8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x560dd258e500 <col:44, line:161:5>
|   `-ReturnStmt 0x560dd258e4f0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x560dd258e4d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x560dd258e4b8 <col:9> 'ErrorHandler *' lvalue Var 0x560dd258dcf8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x560dd2588f38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x560dd2588ea8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x560dd2589000 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x560dd258e560 <col:43, line:173:5>
|   `-ReturnStmt 0x560dd258e550 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x560dd258e538 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x560dd258e518 <col:9> 'ErrorHandler *' lvalue Var 0x560dd258dd70 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x560dd25890b8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x560dd2589138 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x560dd2589248 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x560dd25891b8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x560dd2589398 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x560dd2589308 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560dd25894f0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x560dd2589458 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x560dd2589648 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x560dd25895b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x560dd25897a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x560dd2589708 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x560dd25899b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x560dd2589858 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x560dd25898d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x560dd2589b88 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x560dd2589a70 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x560dd2589af0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x560dd2589da8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x560dd2589c48 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x560dd2589cc8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x560dd2589f88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x560dd2589e68 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x560dd2589ee8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x560dd258a168 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x560dd258a048 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x560dd258a0c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x560dd258a2f0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x560dd258a228 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x560dd258a4c0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x560dd258a3a8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x560dd258a420 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x560dd258e7b8 <col:57, line:234:5>
|   `-ReturnStmt 0x560dd258e7a8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x560dd258e790 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x560dd258e738 <col:9, col:41> 'int'
|         |-MemberExpr 0x560dd258e708 <col:9> '<bound member function type>' ->xmessage 0x560dd258a2f0
|         | `-CXXThisExpr 0x560dd258e6f8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x560dd258e778 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x560dd258e760 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x560dd258e6d8 <col:18, col:40> 'String' (CXXTemporary 0x560dd258e6d8)
|               `-CallExpr 0x560dd258e6a0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x560dd258e688 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x560dd258e600 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x560dd258c4b8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x560dd258e620 <col:31> 'const String' lvalue ParmVar 0x560dd258a420 'str' 'const String &'
|                 `-DeclRefExpr 0x560dd258e640 <col:36> 'const String' lvalue ParmVar 0x560dd258a3a8 'anno' 'const String &'
|-CXXMethodDecl 0x560dd258a7a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x560dd258a580 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x560dd258a600 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x560dd258a678 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560dd258ea48 <col:68, line:243:5>
|   `-ReturnStmt 0x560dd258ea38 <line:242:2, col:41>
|     `-ExprWithCleanups 0x560dd258ea20 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x560dd258e9c0 <col:9, col:41> 'int'
|         |-MemberExpr 0x560dd258e990 <col:9> '<bound member function type>' ->xmessage 0x560dd258a4c0
|         | `-CXXThisExpr 0x560dd258e980 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x560dd258e858 <col:18> 'const String' lvalue ParmVar 0x560dd258a580 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x560dd258ea08 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x560dd258e9f0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x560dd258e960 <col:24, col:40> 'String' (CXXTemporary 0x560dd258e960)
|               `-CXXMemberCallExpr 0x560dd258e8f8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x560dd258e888 <col:24> '<bound member function type>' ->vformat 0x560dd258b980
|                 | `-CXXThisExpr 0x560dd258e878 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x560dd258e928 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x560dd258e8b8 <col:32> 'const char *' lvalue ParmVar 0x560dd258a600 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x560dd258e940 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x560dd258e8d8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x560dd258a678 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560dd258aa40 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x560dd258a868 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x560dd258a8e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x560dd258a958 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x560dd258ed88 <col:23, line:254:5>
|   `-ReturnStmt 0x560dd258ed78 <line:253:2, col:71>
|     `-ExprWithCleanups 0x560dd258ed60 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x560dd258ed00 <col:9, col:71> 'int'
|         |-MemberExpr 0x560dd258ecd0 <col:9> '<bound member function type>' ->xmessage 0x560dd258a4c0
|         | `-CXXThisExpr 0x560dd258ecc0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x560dd258ed48 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x560dd258ed30 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x560dd258ec80 <col:18, col:65> 'String' (CXXTemporary 0x560dd258ec80)
|         |     `-CallExpr 0x560dd258ec18 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x560dd258ec00 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x560dd258eae8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x560dd258c4b8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x560dd258eb08 <col:31> 'const String' lvalue ParmVar 0x560dd258a8e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x560dd258ec60 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x560dd258ec48 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x560dd258ebe0 <col:37, col:64> 'String' (CXXTemporary 0x560dd258ebe0)
|         |             `-CallExpr 0x560dd258ebb0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x560dd258eb98 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x560dd258eb28 <col:37> 'String (const String &)' lvalue CXXMethod 0x560dd258cb08 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x560dd258eb48 <col:56> 'const String' lvalue ParmVar 0x560dd258a868 'landmark' 'const String &'
|         `-DeclRefExpr 0x560dd258eca0 <col:68> 'const String' lvalue ParmVar 0x560dd258a958 'str' 'const String &'
|-CXXMethodDecl 0x560dd258adc0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x560dd258ab08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x560dd258ab80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x560dd258ac00 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x560dd258ac78 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560dd258f040 <col:34, line:267:5>
|   `-ReturnStmt 0x560dd258f030 <line:266:2, col:51>
|     `-ExprWithCleanups 0x560dd258f018 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x560dd258efb0 <col:9, col:51> 'int'
|         |-MemberExpr 0x560dd258ef80 <col:9> '<bound member function type>' ->xmessage 0x560dd258aa40
|         | `-CXXThisExpr 0x560dd258ef70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x560dd258ee28 <col:18> 'const String' lvalue ParmVar 0x560dd258ab08 'landmark' 'const String &'
|         |-DeclRefExpr 0x560dd258ee48 <col:28> 'const String' lvalue ParmVar 0x560dd258ab80 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x560dd258f000 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x560dd258efe8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x560dd258ef50 <col:34, col:50> 'String' (CXXTemporary 0x560dd258ef50)
|               `-CXXMemberCallExpr 0x560dd258eee8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x560dd258ee78 <col:34> '<bound member function type>' ->vformat 0x560dd258b980
|                 | `-CXXThisExpr 0x560dd258ee68 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x560dd258ef18 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x560dd258eea8 <col:42> 'const char *' lvalue ParmVar 0x560dd258ac00 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x560dd258ef30 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x560dd258eec8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x560dd258ac78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560dd258aed0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x560dd258f0c0 <col:25, line:288:5>
|   `-ReturnStmt 0x560dd258f0b0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x560dd258f098 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x560dd258f068 <col:9> 'const int' lvalue ->_nerrors 0x560dd258dc98
|         `-CXXThisExpr 0x560dd258f058 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x560dd258b0e0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x560dd258af88 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x560dd258b008 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x560dd258b3c8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x560dd258b1a8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x560dd258b228 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x560dd258b2a0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560dd258b560 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x560dd258b498 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x560dd258b7a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x560dd258b620 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x560dd258b698 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x560dd258f320 <col:58, line:357:5>
|   `-ReturnStmt 0x560dd258f310 <line:356:2, col:29>
|     `-ExprWithCleanups 0x560dd258f2f8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x560dd258f2c8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x560dd258f2b0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x560dd258f290 <col:9, col:29> 'String' (CXXTemporary 0x560dd258f290)
|             `-CallExpr 0x560dd258f220 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x560dd258f208 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x560dd258f188 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x560dd258b3c8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x560dd258f128 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x560dd258f258 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x560dd258f148 <col:21> 'const char *' lvalue ParmVar 0x560dd258b620 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x560dd258f270 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x560dd258f168 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x560dd258b698 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560dd258b980 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x560dd258b870 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x560dd258b8e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x560dd258bad8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x560dd258ba48 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x560dd258bc20 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x560dd258bb90 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x560dd258bec0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x560dd258bcd8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x560dd258bd58 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x560dd258bdd0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x560dd258c020 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x560dd258bf90 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x560dd258f438 <col:37, line:441:5>
|   `-IfStmt 0x560dd258f420 <line:439:2, line:440:8>
|     |-BinaryOperator 0x560dd258f3a8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x560dd258f378 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x560dd258f338 <col:6> 'int' lvalue ParmVar 0x560dd258bf90 'level' 'int'
|     | `-ImplicitCastExpr 0x560dd258f390 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x560dd258f358 <col:15> 'ErrorHandler::Level' EnumConstant 0x560dd25880a0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x560dd258f408 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x560dd258f3d8 <col:8> 'int' lvalue ->_nerrors 0x560dd258dc98
|         `-CXXThisExpr 0x560dd258f3c8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x560dd258c0e8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x560dd258f4d0 <col:26, line:448:5>
|   `-BinaryOperator 0x560dd258f4b0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x560dd258f460 <col:2> 'int' lvalue ->_nerrors 0x560dd258dc98
|     | `-CXXThisExpr 0x560dd258f450 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x560dd258f490 <col:13> 'int' 0
|-CXXMethodDecl 0x560dd258c2b0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x560dd258c1a0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x560dd258c218 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x560dd258c4b8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x560dd258c370 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x560dd258c3e8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x560dd258c768 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x560dd258c578 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x560dd258c5f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x560dd258c678 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x560dd258c820 <col:59> 0 0
|-CXXMethodDecl 0x560dd258c9b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x560dd258c898 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x560dd258c918 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x560dd258fb40 <col:70, line:534:5>
|   |-DeclStmt 0x560dd258f640 <line:528:2, col:20>
|   | |-VarDecl 0x560dd258f4f8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x560dd258f560 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x560dd258f598 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x560dd258f600 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x560dd258f710 <line:529:2, col:23>
|   | `-VarDecl 0x560dd258f670 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x560dd258f6f8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x560dd258f6d8 <col:18> 'const char *' lvalue ParmVar 0x560dd258c898 'begin' 'const char *'
|   |-DoStmt 0x560dd258fad8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x560dd258fa08 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x560dd258f9f0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x560dd258f9d0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x560dd258f728 <col:6> 'const char *' lvalue Var 0x560dd258f670 'x' 'const char *'
|   | |     `-CallExpr 0x560dd258f920 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x560dd258f908 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x560dd258f8c0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x560dd258e170 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x560dd258f988 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x560dd258f970 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x560dd258f7e0 <col:20, col:27> 'String' (CXXTemporary 0x560dd258f7e0)
|   | |       |     `-CXXTemporaryObjectExpr 0x560dd258f7a8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x560dd258f9a0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x560dd258f800 <col:30> 'const char *' lvalue Var 0x560dd258f670 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x560dd258f9b8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x560dd258f820 <col:33> 'const char *' lvalue ParmVar 0x560dd258c918 'end' 'const char *'
|   | |       |-UnaryOperator 0x560dd258f860 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x560dd258f840 <col:39> 'String' lvalue Var 0x560dd258f4f8 'name' 'String'
|   | |       |-UnaryOperator 0x560dd258f898 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x560dd258f878 <col:46> 'String' lvalue Var 0x560dd258f598 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x560dd258f8b0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x560dd258fac0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x560dd258faa8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x560dd258fa88 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x560dd258fa58 <col:11> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|   |         `-ImplicitCastExpr 0x560dd258fa40 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x560dd258fa20 <col:11> 'String' lvalue Var 0x560dd258f4f8 'name' 'String'
|   `-ReturnStmt 0x560dd258fb30 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x560dd258fb18 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x560dd258faf8 <col:9> 'const char *' lvalue Var 0x560dd258f670 'x' 'const char *'
|-CXXMethodDecl 0x560dd258cb08 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x560dd258ca78 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x560dd2590148 <col:55, line:550:5>
|   `-IfStmt 0x560dd2590120 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x560dd258fd80 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x560dd258fd68 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560dd258fd50 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560dd258fd30 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560dd258fd00 <col:6> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|     | |       `-DeclRefExpr 0x560dd258fba0 <col:6> 'const String' lvalue ParmVar 0x560dd258ca78 'x' 'const String &'
|     | `-BinaryOperator 0x560dd258fce0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x560dd258fcb0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x560dd258fc60 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x560dd258fc48 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x560dd258fc00 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x560dd229d570 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x560dd258fbc0 <col:11> 'const String' lvalue ParmVar 0x560dd258ca78 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x560dd258fbe0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x560dd258fcc8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x560dd258fc98 <col:19> 'char' 123
|     |-ReturnStmt 0x560dd258fdf0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x560dd258fdc0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x560dd258fda0 <col:13> 'const String' lvalue ParmVar 0x560dd258ca78 'x' 'const String &'
|     `-IfStmt 0x560dd25900f8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x560dd258fe88 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560dd258fe70 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560dd258fe50 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560dd258fe20 <col:11> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |       `-DeclRefExpr 0x560dd258fe00 <col:11> 'const String' lvalue ParmVar 0x560dd258ca78 'x' 'const String &'
|       |-ReturnStmt 0x560dd2590010 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x560dd258fff8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x560dd258ffc8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x560dd258ffb0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x560dd258ff90 <col:13, col:29> 'String' (CXXTemporary 0x560dd258ff90)
|       |         `-CallExpr 0x560dd258ff40 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x560dd258ff28 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x560dd258fea0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x560dd258c2b0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x560dd258ff70 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x560dd258fec0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x560dd258fee0 <col:28> 'const String' lvalue ParmVar 0x560dd258ca78 'x' 'const String &'
|       `-ReturnStmt 0x560dd25900e8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x560dd25900d0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x560dd25900a0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x560dd2590088 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x560dd2590068 <col:13, col:20> 'String' (CXXTemporary 0x560dd2590068)
|                 `-CXXTemporaryObjectExpr 0x560dd2590030 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x560dd258ccd0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x560dd258cbc0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x560dd258cc38 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560dd258e418 <col:71> 'bool' false
|-CXXRecordDecl 0x560dd258cd80 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x560dd258d078 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x560dd258d010 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x560dd258cfb0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x560dd258cf70 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x560dd22805d0 'String'
|       | `-CXXRecord 0x560dd2280540 'String'
|       |-BuiltinType 0x560dd1f53370 'int'
|       `-DecayedType 0x560dd2436990 '__va_list_tag *' sugar
|         |-TypedefType 0x560dd2436960 'va_list' sugar
|         | |-Typedef 0x560dd2171680 'va_list'
|         | `-TypedefType 0x560dd2171630 '__gnuc_va_list' sugar
|         |   |-Typedef 0x560dd20a89d8 '__gnuc_va_list'
|         |   `-TypedefType 0x560dd20a8940 '__builtin_va_list' sugar
|         |     |-Typedef 0x560dd1f94bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x560dd1f94b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x560dd1f540c0 '__va_list_tag'
|         |         `-CXXRecord 0x560dd1f54028 '__va_list_tag'
|         `-PointerType 0x560dd2176f20 '__va_list_tag *'
|           `-RecordType 0x560dd1f540c0 '__va_list_tag'
|             `-CXXRecord 0x560dd1f54028 '__va_list_tag'
|-EnumDecl 0x560dd258d0d0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x560dd258d1d0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d740 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d1b0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x560dd258d190 <col:16> 'int' 1
| |-EnumConstantDecl 0x560dd258d260 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d758 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d240 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x560dd258d220 <col:21> 'int' 2
| |-EnumConstantDecl 0x560dd258d2f0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d770 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d2d0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x560dd258d2b0 <col:22> 'int' 4
| |-EnumConstantDecl 0x560dd258d380 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d788 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d360 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x560dd258d340 <col:17> 'int' 8
| |-EnumConstantDecl 0x560dd258d410 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d7a0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d3f0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x560dd258d3d0 <col:22> 'int' 16
| |-EnumConstantDecl 0x560dd258d4b0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d7b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d490 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x560dd258d470 <col:19> 'int' 32
| |-EnumConstantDecl 0x560dd258d540 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d7d0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d520 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x560dd258d500 <col:17> 'int' 64
| |-EnumConstantDecl 0x560dd258d5d0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d7e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d5b0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x560dd258d590 <col:14> 'int' 128
| |-EnumConstantDecl 0x560dd258d660 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x560dd258d800 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd258d640 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x560dd258d620 <col:16> 'int' 256
| `-EnumConstantDecl 0x560dd258d6f0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x560dd258d818 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd258d6d0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x560dd258d6b0 <col:12> 'int' 1024
|-CXXMethodDecl 0x560dd258da28 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x560dd258d840 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x560dd258d8e0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x560dd258dbb0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x560dd258dae8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x560dd258dc58 <line:580:3, col:10> col:3 private
|-FieldDecl 0x560dd258dc98 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x560dd258dcf8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x560dd258dd70 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x560dd258e170 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x560dd258dde8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x560dd258de68 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x560dd258dee8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x560dd258df60 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x560dd258dfd8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x560dd258e050 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x560dd258e298 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x560dd258e298
| `-ParmVarDecl 0x560dd258e3a8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x560dd25904a8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x560dd25904a8
  `-ParmVarDecl 0x560dd25905b8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd24359d8 prev 0x560dd2479ae8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd2435ad0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x560dd2435b60 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x560dd2435c98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x560dd2435b98 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560dd24370c0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd24370a0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x560dd2436c38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560dd2437150 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560dd2437110 <col:17> 'ErrorHandler *' lvalue ParmVar 0x560dd2435b98 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560dd2436ca0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560dd24371d0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd2437190 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x560dd2436d00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560dd2437210 <col:54> 'bool' false
| `-CompoundStmt 0x560dd2437318 <col:61, line:38:5>
|   `-BinaryOperator 0x560dd24372f8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x560dd2437290 <col:9> 'const Element *' lvalue ->_context 0x560dd2436bd8
|     | `-CXXThisExpr 0x560dd2437280 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x560dd24372e0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x560dd24372c0 <col:20> 'int' 0
|-CXXConstructorDecl 0x560dd2435ea8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd2435d58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x560dd2435dd0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x560dd24370f8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd24370d8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x560dd2436bd8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x560dd2437370 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x560dd2437330 <col:20> 'const Element *' lvalue ParmVar 0x560dd2435d58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x560dd2436c38 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x560dd24373f0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x560dd24373b0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x560dd2435dd0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x560dd2436ca0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x560dd2437470 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x560dd2437430 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x560dd2436d00 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x560dd24374b0 <col:73> 'bool' false
| `-CompoundStmt 0x560dd2437528 <col:80, line:46:5>
|-CXXMethodDecl 0x560dd2435fd8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x560dd24375a0 <col:36, line:51:5>
|   `-ReturnStmt 0x560dd2437590 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x560dd2437578 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x560dd2437548 <col:16> 'const Element *const' lvalue ->_context 0x560dd2436bd8
|         `-CXXThisExpr 0x560dd2437538 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x560dd24360c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x560dd2437620 <col:32, line:57:5>
|   `-ReturnStmt 0x560dd2437610 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x560dd24375f8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x560dd24375c8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x560dd2436c38
|         `-CXXThisExpr 0x560dd24375b8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x560dd2436188 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x560dd2436310 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x560dd2436240 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x560dd2436460 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x560dd24363d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560dd24365b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x560dd2436520 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x560dd24367b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x560dd2436668 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x560dd24366e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x560dd2436ae8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x560dd2436878 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x560dd24368f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x560dd24369c0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x560dd2436ba0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x560dd2436bd8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x560dd2436c38 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x560dd2436ca0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x560dd2436d00 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x560dd2436d50 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x560dd2436d50
| `-ParmVarDecl 0x560dd2436e68 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x560dd2436f08 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x560dd2436f08
| `-ParmVarDecl 0x560dd2437018 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x560dd2599d70 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560dd2544290 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x560dd2544468 prev 0x560dd2544290 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x560dd25444f8 <col:46, col:52> col:46 public
|-TypedefDecl 0x560dd2544520 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd25460f0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x560dd25460a0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x560dd25449d0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x560dd25448d0 'type'
|     `-TemplateSpecializationType 0x560dd2544860 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x560dd2544740 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x560dd2544720 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x560dd2544700 <col:24> 'unsigned long' 4
|       `-RecordType 0x560dd2544840 'char_array<4>'
|         `-ClassTemplateSpecialization 0x560dd2544760 'char_array'
|-TypedefDecl 0x560dd25461a8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x560dd2546170 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x560dd2546150 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x560dd25460f0 'type'
|     `-ElaboratedType 0x560dd25460a0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x560dd25449d0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x560dd25448d0 'type'
|         `-TemplateSpecializationType 0x560dd2544860 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x560dd2544740 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x560dd2544720 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x560dd2544700 <col:24> 'unsigned long' 4
|           `-RecordType 0x560dd2544840 'char_array<4>'
|             `-ClassTemplateSpecialization 0x560dd2544760 'char_array'
|-CXXMethodDecl 0x560dd2546328 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x560dd2546238 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x560dd2546418 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x560dd25464f8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x560dd25467c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x560dd25466d0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x560dd2546a08 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560dd2546880 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560dd25468f8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd2546bd8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560dd2546ac8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560dd2546b40 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd2546d38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x560dd2546e08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x560dd2547058 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560dd2546ec8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x560dd2546f40 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd25472b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x560dd2547128 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x560dd25471a0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd2547478 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x560dd2547388 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd2547638 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x560dd2547540 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd25476f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560dd25477a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x560dd254ee28 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x560dd2547850 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x560dd254ed10 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x560dd254f0c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x560dd254efd0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x560dd254f190 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x560dd254f1e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x560dd254f230 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x560dd2542c98 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x560dd2542ea8 prev 0x560dd2542c98 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x560dd2544200 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x560dd25441b0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x560dd2544190 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x560dd2544040 'type'
|     `-SubstTemplateTypeParmType 0x560dd2543e60 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x560dd2219410 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22193b8 'T'
|       `-RecordType 0x560dd25439b0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x560dd25438c8 'sized_array_memory'
|-FieldDecl 0x560dd254f280 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x560dd254f2d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x560dd254f308 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|   |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x560dd22510a8 'T'
|   `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd254f398 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x560dd254f360 'int &'
|   `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|     |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560dd22510a8 'T'
|     `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd254f458 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x560dd254f420 'const int &'
|   `-QualType 0x560dd2542f41 'const int' const
|     `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd254f4e8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x560dd254f4b0 'int *'
|   `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|     |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560dd22510a8 'T'
|     `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd254f578 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x560dd254f540 'const int *'
|   `-QualType 0x560dd2542f41 'const int' const
|     `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd2550160 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x560dd2550110 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x560dd25500f0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x560dd2550080 'type'
|     `-SubstTemplateTypeParmType 0x560dd254fe40 'int' sugar
|       |-TemplateTypeParmType 0x560dd2224210 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22241c0 'T'
|       `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd25501c8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x560dd254f420 'const int &'
|   `-QualType 0x560dd2542f41 'const int' const
|     `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd2550220 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd2550288 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x560dd254f4b0 'int *'
|   `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|     |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x560dd22510a8 'T'
|     `-BuiltinType 0x560dd1f53370 'int'
|-TypedefDecl 0x560dd25502f0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x560dd254f540 'const int *'
|   `-QualType 0x560dd2542f41 'const int' const
|     `-SubstTemplateTypeParmType 0x560dd2542f40 'int' sugar
|       |-TemplateTypeParmType 0x560dd2251100 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x560dd22510a8 'T'
|       `-BuiltinType 0x560dd1f53370 'int'
|-EnumDecl 0x560dd2550348 <line:134:5> col:5
| `-EnumConstantDecl 0x560dd2550440 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x560dd2550420 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x560dd2252788 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x560dd2252760 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x560dd2252740 <col:40> 'int' 1
|-CXXConstructorDecl 0x560dd25504c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x560dd2550718 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2550580 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560dd2550620 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x560dd25509d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x560dd25508c0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x560dd2550c98 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x560dd2550b80 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x560dd2550fe0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x560dd2550ec0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x560dd25512f0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x560dd25511d0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x560dd25515e0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2551428 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560dd25514a0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560dd2551708 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x560dd25517e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2551840 <col:30> Inherited
|-CXXMethodDecl 0x560dd2551888 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x560dd2551938 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2551990 <col:30> Inherited
|-CXXMethodDecl 0x560dd2551a58 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560dd2551b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2551b60 <col:30> Inherited
|-CXXMethodDecl 0x560dd2551ba8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560dd2551c58 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2551cb0 <col:30> Inherited
|-CXXMethodDecl 0x560dd2551cf8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560dd2551da8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2551e00 <col:30> Inherited
|-CXXMethodDecl 0x560dd2551e48 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x560dd2551ef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x560dd2551f50 <col:30> Inherited
|-CXXMethodDecl 0x560dd2551f78 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560dd2552028 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x560dd25520d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x560dd2552298 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd2552188 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x560dd2552200 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560dd25523e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x560dd2552358 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2552598 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x560dd25524a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560dd2552650 <col:20>
| `-OptimizeNoneAttr 0x560dd25526a8 <col:30>
|-CXXMethodDecl 0x560dd25527c8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x560dd25526d0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x560dd2552880 <col:20>
| `-OptimizeNoneAttr 0x560dd25528d8 <col:30>
|-CXXMethodDecl 0x560dd2552990 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x560dd2552900 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2552ad8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560dd2552a48 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2552c08 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x560dd2552d38 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x560dd2552e08 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x560dd2552ed8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x560dd2553018 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x560dd2552f88 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd2553160 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x560dd25530d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x560dd25532a8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x560dd2553218 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560dd2553360 <col:48> Inherited "" ""
|-CXXMethodDecl 0x560dd2553460 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x560dd25533d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x560dd2553518 <col:60> Inherited "" ""
|-CXXMethodDecl 0x560dd25535d8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x560dd25536d8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x560dd2553858 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x560dd2553798 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x560dd2554018 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x560dd2553910 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x560dd2553f78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x560dd2553e78 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x560dd25540f8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x560dd2554248 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x560dd25541b8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560dd2554300 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x560dd2554548 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x560dd25543c0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x560dd2554438 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x560dd2554708 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x560dd2554618 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x560dd2554958 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x560dd25547d0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x560dd2554848 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x560dd2554a18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x560dd2554c78 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x560dd2554b80 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x560dd2554d48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2540e08 prev 0x560dd2522a08 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560dd2540f00 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x560dd2540ff0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x560dd2566b70 <col:16, line:828:9>
|-CXXDestructorDecl 0x560dd25410e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x560dd2566b80 <col:25, line:830:9>
|-CXXMethodDecl 0x560dd25411e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x560dd2541290 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x560dd2541338 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x560dd2541338
| `-ParmVarDecl 0x560dd2541448 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x560dd2541c08 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x560dd2541c08
  `-ParmVarDecl 0x560dd2541d18 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2522818 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x560dd2522978 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x560dd2522a08 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x560dd2522ac0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x560dd2522bc8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x560dd2522af8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560dd2556308 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560dd25562e8 <col:31> 'int' 0
|-CXXConstructorDecl 0x560dd2522ee8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x560dd2522d60 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x560dd2522dd8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560dd2556340 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560dd2556320 <col:59> 'int' 0
|-CXXConstructorDecl 0x560dd25230c0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd2522fb0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x560dd2523028 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560dd2556378 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560dd2556358 <col:55> 'int' 0
|-CXXConstructorDecl 0x560dd2523478 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x560dd2523260 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x560dd25232d8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x560dd2523350 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x560dd25563b0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x560dd2556390 <col:31> 'int' 0
|-CXXConstructorDecl 0x560dd2523638 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x560dd2523578 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x560dd2523730 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x560dd2523918 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x560dd2523820 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x560dd2523a08 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x560dd2556760 <col:24, line:291:5>
|   `-ReturnStmt 0x560dd2556750 <line:290:9, col:79>
|     `-BinaryOperator 0x560dd2556730 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x560dd2556608 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x560dd2556560 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x560dd2556540 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x560dd2556438 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x560dd2556420 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x560dd2556408 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x560dd25563d8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x560dd2542c30
|       | |   |       `-CXXThisExpr 0x560dd25563c8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x560dd2556528 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x560dd2556510 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x560dd25564d8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x560dd25564a8 <col:28, col:35> '<bound member function type>' ->size 0x560dd2503978
|       | |           `-ImplicitCastExpr 0x560dd25564f8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x560dd2556490 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x560dd2556460 <col:28> 'Vector<String> *const' lvalue ->_conf 0x560dd2542c30
|       | |                 `-CXXThisExpr 0x560dd2556450 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x560dd25565f0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x560dd25565d8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x560dd25565c0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x560dd2556590 <col:47> 'Args::Slot *const' lvalue ->_slots 0x560dd2554e90
|       |         `-CXXThisExpr 0x560dd2556580 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x560dd2556710 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x560dd25566f8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x560dd25566e0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x560dd25566a0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x560dd2556688 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x560dd2556638 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x560dd2554f40
|         |     |   `-CXXThisExpr 0x560dd2556628 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x560dd2556668 <col:73> 'int' 0
|         `-IntegerLiteral 0x560dd25566c0 <col:79> 'int' 0
|-CXXMethodDecl 0x560dd2523ac8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x560dd2556938 <col:32, line:296:5>
|   `-ReturnStmt 0x560dd2556928 <line:295:9, col:49>
|     `-BinaryOperator 0x560dd2556908 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x560dd25567e8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x560dd25567d0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x560dd25567b8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x560dd2556788 <col:17> 'Args::Slot *const' lvalue ->_slots 0x560dd2554e90
|       |       `-CXXThisExpr 0x560dd2556778 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x560dd25568e8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x560dd25568d0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x560dd25568b8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x560dd2556878 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x560dd2556860 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x560dd2556810 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x560dd2554f40
|         |     |   `-CXXThisExpr 0x560dd2556800 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x560dd2556840 <col:43> 'int' 0
|         `-IntegerLiteral 0x560dd2556898 <col:49> 'int' 0
|-CXXMethodDecl 0x560dd2523bb8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x560dd2556b48 <col:19, line:306:5>
|   |-IfStmt 0x560dd2556a68 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x560dd25569a8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x560dd2556990 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x560dd2556960 <col:13> 'Vector<String> *' lvalue ->_conf 0x560dd2542c30
|   | |     `-CXXThisExpr 0x560dd2556950 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x560dd2556a48 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x560dd2556a18 <col:13, col:20> '<bound member function type>' ->clear 0x560dd2506378
|   |     `-ImplicitCastExpr 0x560dd2556a00 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x560dd25569d0 <col:13> 'Vector<String> *' lvalue ->_conf 0x560dd2542c30
|   |         `-CXXThisExpr 0x560dd25569c0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x560dd2556af0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x560dd2556ac0 <col:9, col:16> '<bound member function type>' .clear 0x560dd2554a18
|   |   `-MemberExpr 0x560dd2556a90 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x560dd2554e30
|   |     `-CXXThisExpr 0x560dd2556a80 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x560dd2556b38 <line:305:9, col:17>
|     `-UnaryOperator 0x560dd2556b20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd2556b10 <col:17> 'Args *' this
|-CXXMethodDecl 0x560dd2523e38 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x560dd2523d40 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x560dd2523fb8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x560dd2523ef0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x560dd2524338 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x560dd2524060 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x560dd2524298 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x560dd2524108 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x560dd2524180 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x560dd25587e0 <col:67, line:327:5>
|     |-WhileStmt 0x560dd2558790 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x560dd2556c30 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x560dd2556bb0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x560dd2471fb8 0x560dd22bc2c8 0x560dd22bbfa0 0x560dd22ad780 0x560dd22ad430 0x560dd22acd20 0x560dd227f690 0x560dd220bb50
|     | | |-DeclRefExpr 0x560dd2556b70 <col:16> 'Iter' lvalue ParmVar 0x560dd2524108 'begin' 'Iter'
|     | | `-DeclRefExpr 0x560dd2556b90 <col:25> 'Iter' lvalue ParmVar 0x560dd2524180 'end' 'Iter'
|     | `-CompoundStmt 0x560dd2558770 <col:30, line:325:9>
|     |   |-CallExpr 0x560dd2558710 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x560dd2556c78 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x560dd25586e0 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x560dd2558670 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|     |   |   `-DeclRefExpr 0x560dd2556cd8 <col:24> 'Iter' lvalue ParmVar 0x560dd2524108 'begin' 'Iter'
|     |   `-UnaryOperator 0x560dd2558758 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x560dd2558738 <col:15> 'Iter' lvalue ParmVar 0x560dd2524108 'begin' 'Iter'
|     `-ReturnStmt 0x560dd25587d0 <line:326:9, col:17>
|       `-UnaryOperator 0x560dd25587b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd25587a8 <col:17> 'Args *' this
|-CXXMethodDecl 0x560dd2524440 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x560dd25243b0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x560dd2524588 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x560dd25244f8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x560dd2524650 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x560dd25588c0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x560dd2558860 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x560dd2558810 <col:9> '<bound member function type>' ->reset_from 0x560dd25552b8
|   | | `-CXXThisExpr 0x560dd2558800 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x560dd2558840 <col:20> 'int' 0
|   `-ReturnStmt 0x560dd25588b0 <line:352:9, col:17>
|     `-UnaryOperator 0x560dd2558898 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd2558888 <col:17> 'Args *' this
|-VarDecl 0x560dd2524708 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x560dd2524770 <col:38> 'int' 1
|-VarDecl 0x560dd2524800 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x560dd2524868 <col:39> 'int' 2
|-VarDecl 0x560dd25248f8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x560dd2524960 <col:39> 'int' 4
|-VarDecl 0x560dd25249f0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x560dd2524a58 <col:39> 'int' 8
|-FunctionTemplateDecl 0x560dd2524dd8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x560dd2524ad0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd2524d38 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560dd2524b80 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2524c28 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x560dd2558a18 <col:43, line:371:5>
|     `-ReturnStmt 0x560dd2558a08 <line:370:9, col:34>
|       `-CallExpr 0x560dd25589d0 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd25588f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2558970 <col:21> 'const char *' lvalue ParmVar 0x560dd2524b80 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd2558990 <col:30> 'int' 0
|         `-DeclRefExpr 0x560dd25589b0 <col:33> 'T' lvalue ParmVar 0x560dd2524c28 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2525108 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x560dd2524e40 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd2525068 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560dd2524ef0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2524f98 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x560dd2558b68 <col:45, line:375:5>
|     `-ReturnStmt 0x560dd2558b58 <line:374:9, col:42>
|       `-CallExpr 0x560dd2558b20 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2558a40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2558ac0 <col:21> 'const char *' lvalue ParmVar 0x560dd2524ef0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd2558ae0 <col:30> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int'
|         `-DeclRefExpr 0x560dd2558b00 <col:41> 'T' lvalue ParmVar 0x560dd2524f98 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2525438 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x560dd2525170 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd2525398 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560dd2525220 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25252c8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x560dd2558cb8 <col:45, line:379:5>
|     `-ReturnStmt 0x560dd2558ca8 <line:378:9, col:43>
|       `-CallExpr 0x560dd2558c70 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2558b90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2558c10 <col:21> 'const char *' lvalue ParmVar 0x560dd2525220 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd2558c30 <col:30> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int'
|         `-DeclRefExpr 0x560dd2558c50 <col:42> 'T' lvalue ParmVar 0x560dd25252c8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2525768 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x560dd25254a0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd25256c8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x560dd2525550 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25255f8 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x560dd2558eb8 <col:46, line:383:5>
|     `-ReturnStmt 0x560dd2558ea8 <line:382:9, col:55>
|       `-CallExpr 0x560dd2558e70 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2558ce0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2558d60 <col:21> 'const char *' lvalue ParmVar 0x560dd2525550 'keyword' 'const char *'
|         |-BinaryOperator 0x560dd2558e30 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x560dd2558de0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560dd2558dc0 <col:30> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560dd2558e18 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560dd2558df8 <col:42> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x560dd2558e50 <col:54> 'T' lvalue ParmVar 0x560dd25255f8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2525b68 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x560dd25257d0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd2525ac8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x560dd2525880 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2525900 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560dd25259a8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x560dd2558ff8 <col:54, line:388:5>
|     |-CallExpr 0x560dd2558f80 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd2558ed0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560dd2558f10 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560dd2558f20 <col:30> 'const char *' lvalue ParmVar 0x560dd2525880 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560dd2558f40 <col:39> 'int' lvalue ParmVar 0x560dd2525900 'flags' 'int'
|     | `-DeclRefExpr 0x560dd2558f60 <col:46> 'T' lvalue ParmVar 0x560dd25259a8 'x' 'T &'
|     `-ReturnStmt 0x560dd2558fe8 <line:387:9, col:17>
|       `-UnaryOperator 0x560dd2558fd0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd2558fc0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2526018 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x560dd2525bd8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560dd2525c58 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560dd2525f78 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x560dd2525d18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2525db8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x560dd2525e58 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x560dd2559168 <col:74, line:403:5>
|     `-ReturnStmt 0x560dd2559158 <line:402:9, col:56>
|       `-CallExpr 0x560dd2559118 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2559028 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2559098 <col:28> 'const char *' lvalue ParmVar 0x560dd2525d18 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd25590b8 <col:37> 'int' 0
|         |-DeclRefExpr 0x560dd25590d8 <col:40> 'T' lvalue ParmVar 0x560dd2525db8 'x' 'T &'
|         `-DeclRefExpr 0x560dd25590f8 <col:43> 'const V' lvalue ParmVar 0x560dd2525e58 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560dd2526488 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x560dd2526088 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560dd2526108 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560dd25263e8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x560dd25261c8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2526268 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x560dd2526308 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x560dd25592d0 <col:76, line:407:5>
|     `-ReturnStmt 0x560dd25592c0 <line:406:9, col:65>
|       `-CallExpr 0x560dd2559280 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2559190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2559200 <col:28> 'const char *' lvalue ParmVar 0x560dd25261c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd2559220 <col:37> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int'
|         |-DeclRefExpr 0x560dd2559240 <col:49> 'T' lvalue ParmVar 0x560dd2526268 'x' 'T &'
|         `-DeclRefExpr 0x560dd2559260 <col:52> 'const V' lvalue ParmVar 0x560dd2526308 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560dd25269d8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x560dd25264f8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560dd2526578 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560dd2526938 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x560dd2526638 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25266b8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2526758 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x560dd25267f8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x560dd2559438 <col:85, line:412:5>
|     |-CallExpr 0x560dd25593b8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd25592e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x560dd2559328 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x560dd2559338 <col:37> 'const char *' lvalue ParmVar 0x560dd2526638 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560dd2559358 <col:46> 'int' lvalue ParmVar 0x560dd25266b8 'flags' 'int'
|     | |-DeclRefExpr 0x560dd2559378 <col:53> 'T' lvalue ParmVar 0x560dd2526758 'x' 'T &'
|     | `-DeclRefExpr 0x560dd2559398 <col:56> 'const V' lvalue ParmVar 0x560dd25267f8 'default_value' 'const V &'
|     `-ReturnStmt 0x560dd2559428 <line:411:9, col:17>
|       `-UnaryOperator 0x560dd2559410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd2559400 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2526e68 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x560dd2526a50 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2526ac8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2526dc8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd2526b88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2526c00 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2526ca8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x560dd25595b8 <col:53, line:425:5>
|     `-ReturnStmt 0x560dd25595a8 <line:424:9, col:42>
|       `-CallExpr 0x560dd2559568 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2559468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd25594e8 <col:21> 'const char *' lvalue ParmVar 0x560dd2526b88 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd2559508 <col:30> 'int' 0
|         |-DeclRefExpr 0x560dd2559528 <col:33> 'P' lvalue ParmVar 0x560dd2526c00 'parser' 'P'
|         `-DeclRefExpr 0x560dd2559548 <col:41> 'T' lvalue ParmVar 0x560dd2526ca8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd25272b8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x560dd2526ed8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2526f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2527218 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd2527018 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2527090 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2527138 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x560dd2559730 <col:55, line:429:5>
|     `-ReturnStmt 0x560dd2559720 <line:428:9, col:50>
|       `-CallExpr 0x560dd25596e0 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd25595e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2559660 <col:21> 'const char *' lvalue ParmVar 0x560dd2527018 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd2559680 <col:30> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int'
|         |-DeclRefExpr 0x560dd25596a0 <col:41> 'P' lvalue ParmVar 0x560dd2527090 'parser' 'P'
|         `-DeclRefExpr 0x560dd25596c0 <col:49> 'T' lvalue ParmVar 0x560dd2527138 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2527708 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x560dd2527328 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd25273a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x560dd2527668 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x560dd2527468 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x560dd25274e0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x560dd2527588 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x560dd25598a8 <col:55, line:433:5>
| |   `-ReturnStmt 0x560dd2559898 <line:432:9, col:51>
| |     `-CallExpr 0x560dd2559858 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x560dd2559758 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x560dd25597d8 <col:21> 'const char *' lvalue ParmVar 0x560dd2527468 'keyword' 'const char *'
| |       |-DeclRefExpr 0x560dd25597f8 <col:30> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int'
| |       |-DeclRefExpr 0x560dd2559818 <col:42> 'P' lvalue ParmVar 0x560dd25274e0 'parser' 'P'
| |       `-DeclRefExpr 0x560dd2559838 <col:50> 'T' lvalue ParmVar 0x560dd2527588 'x' 'T &'
| `-CXXMethodDecl 0x560dd259a808 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x560dd259a570 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x560dd259a618 <col:39, col:41> col:41 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x560dd259a6e8 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x560dd2527b58 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x560dd2527778 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd25277f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2527ab8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd25278b8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2527930 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25279d8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x560dd2559ad0 <col:56, line:437:5>
|     `-ReturnStmt 0x560dd2559ac0 <line:436:9, col:63>
|       `-CallExpr 0x560dd2559a80 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd25598d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2559950 <col:21> 'const char *' lvalue ParmVar 0x560dd25278b8 'keyword' 'const char *'
|         |-BinaryOperator 0x560dd2559a20 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x560dd25599d0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560dd25599b0 <col:30> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560dd2559a08 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560dd25599e8 <col:42> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x560dd2559a40 <col:54> 'P' lvalue ParmVar 0x560dd2527930 'parser' 'P'
|         `-DeclRefExpr 0x560dd2559a60 <col:62> 'T' lvalue ParmVar 0x560dd25279d8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2528088 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x560dd2527bc8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2527c48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2527fe8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560dd2527d08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2527d88 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2527e00 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2527ea8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x560dd2559c38 <col:64, line:442:5>
|     |-CallExpr 0x560dd2559bb8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd2559ae8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560dd2559b28 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560dd2559b38 <col:30> 'const char *' lvalue ParmVar 0x560dd2527d08 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560dd2559b58 <col:39> 'int' lvalue ParmVar 0x560dd2527d88 'flags' 'int'
|     | |-DeclRefExpr 0x560dd2559b78 <col:46> 'P' lvalue ParmVar 0x560dd2527e00 'parser' 'P'
|     | `-DeclRefExpr 0x560dd2559b98 <col:54> 'T' lvalue ParmVar 0x560dd2527ea8 'x' 'T &'
|     `-ReturnStmt 0x560dd2559c28 <line:441:9, col:17>
|       `-UnaryOperator 0x560dd2559c10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd2559c00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2528688 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x560dd2528100 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2528178 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560dd25281f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560dd25285e8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560dd25282c0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2528338 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25283d8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x560dd25284a8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x560dd2559dd0 <col:84, line:458:5>
|     `-ReturnStmt 0x560dd2559dc0 <line:457:9, col:64>
|       `-CallExpr 0x560dd2559d78 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2559c68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2559cd8 <col:28> 'const char *' lvalue ParmVar 0x560dd25282c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd2559cf8 <col:37> 'int' 0
|         |-DeclRefExpr 0x560dd2559d18 <col:40> 'P' lvalue ParmVar 0x560dd2528338 'parser' 'P'
|         |-DeclRefExpr 0x560dd2559d38 <col:48> 'T' lvalue ParmVar 0x560dd25283d8 'x' 'T &'
|         `-DeclRefExpr 0x560dd2559d58 <col:51> 'const V' lvalue ParmVar 0x560dd25284a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560dd2528c08 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x560dd2528700 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2528778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560dd25287f8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560dd2528b68 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x560dd25288c0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2528938 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25289d8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x560dd2528a78 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x560dd2559f60 <col:86, line:462:5>
|     `-ReturnStmt 0x560dd2559f50 <line:461:9, col:73>
|       `-CallExpr 0x560dd2559f08 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd2559df8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd2559e68 <col:28> 'const char *' lvalue ParmVar 0x560dd25288c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd2559e88 <col:37> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int'
|         |-DeclRefExpr 0x560dd2559ea8 <col:49> 'P' lvalue ParmVar 0x560dd2528938 'parser' 'P'
|         |-DeclRefExpr 0x560dd2559ec8 <col:57> 'T' lvalue ParmVar 0x560dd25289d8 'x' 'T &'
|         `-DeclRefExpr 0x560dd2559ee8 <col:60> 'const V' lvalue ParmVar 0x560dd2528a78 'default_value' 'const V &'
|-FunctionTemplateDecl 0x560dd2529268 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x560dd2528c80 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2528cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x560dd2528d78 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560dd25291c8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x560dd2528e40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2528ec0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2528f38 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2528fd8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x560dd2529078 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x560dd255a0f0 <col:95, line:467:5>
|     |-CallExpr 0x560dd255a068 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd2559f78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x560dd2559fb8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x560dd2559fc8 <col:37> 'const char *' lvalue ParmVar 0x560dd2528e40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560dd2559fe8 <col:46> 'int' lvalue ParmVar 0x560dd2528ec0 'flags' 'int'
|     | |-DeclRefExpr 0x560dd255a008 <col:53> 'P' lvalue ParmVar 0x560dd2528f38 'parser' 'P'
|     | |-DeclRefExpr 0x560dd255a028 <col:61> 'T' lvalue ParmVar 0x560dd2528fd8 'x' 'T &'
|     | `-DeclRefExpr 0x560dd255a048 <col:64> 'const V' lvalue ParmVar 0x560dd2529078 'default_value' 'const V &'
|     `-ReturnStmt 0x560dd255a0e0 <line:466:9, col:17>
|       `-UnaryOperator 0x560dd255a0c8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255a0b8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2529848 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x560dd25292e8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2529368 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560dd25293e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560dd25297a8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560dd25294b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2529528 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25295c8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560dd2529668 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x560dd255a298 <col:63, line:481:5>
|     `-ReturnStmt 0x560dd255a288 <line:480:9, col:47>
|       `-CallExpr 0x560dd255a240 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255a120 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255a1a0 <col:21> 'const char *' lvalue ParmVar 0x560dd25294b0 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd255a1c0 <col:30> 'int' 0
|         |-DeclRefExpr 0x560dd255a1e0 <col:33> 'P' lvalue ParmVar 0x560dd2529528 'parser' 'P'
|         |-DeclRefExpr 0x560dd255a200 <col:41> 'T1' lvalue ParmVar 0x560dd25295c8 'x1' 'T1 &'
|         `-DeclRefExpr 0x560dd255a220 <col:45> 'T2' lvalue ParmVar 0x560dd2529668 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560dd2529dc8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x560dd25298c0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2529938 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560dd25299b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560dd2529d28 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560dd2529a80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2529af8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2529b98 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560dd2529c38 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x560dd255a438 <col:65, line:485:5>
|     `-ReturnStmt 0x560dd255a428 <line:484:9, col:55>
|       `-CallExpr 0x560dd255a3e0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255a2c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255a340 <col:21> 'const char *' lvalue ParmVar 0x560dd2529a80 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255a360 <col:30> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int'
|         |-DeclRefExpr 0x560dd255a380 <col:41> 'P' lvalue ParmVar 0x560dd2529af8 'parser' 'P'
|         |-DeclRefExpr 0x560dd255a3a0 <col:49> 'T1' lvalue ParmVar 0x560dd2529b98 'x1' 'T1 &'
|         `-DeclRefExpr 0x560dd255a3c0 <col:53> 'T2' lvalue ParmVar 0x560dd2529c38 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560dd252a348 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x560dd2529e40 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2529eb8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560dd2529f38 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560dd252a2a8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560dd252a000 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd252a078 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x560dd252a118 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560dd252a1b8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x560dd255a5d8 <col:65, line:489:5>
|     `-ReturnStmt 0x560dd255a5c8 <line:488:9, col:56>
|       `-CallExpr 0x560dd255a580 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255a460 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255a4e0 <col:21> 'const char *' lvalue ParmVar 0x560dd252a000 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255a500 <col:30> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int'
|         |-DeclRefExpr 0x560dd255a520 <col:42> 'P' lvalue ParmVar 0x560dd252a078 'parser' 'P'
|         |-DeclRefExpr 0x560dd255a540 <col:50> 'T1' lvalue ParmVar 0x560dd252a118 'x1' 'T1 &'
|         `-DeclRefExpr 0x560dd255a560 <col:54> 'T2' lvalue ParmVar 0x560dd252a1b8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560dd252fdf8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x560dd252a3c0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd252a438 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560dd252a4b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560dd252fd58 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560dd252a580 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd252a5f8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x560dd252a698 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560dd252a738 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x560dd255a828 <col:66, line:493:5>
|     `-ReturnStmt 0x560dd255a818 <line:492:9, col:68>
|       `-CallExpr 0x560dd255a7d0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255a600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255a680 <col:21> 'const char *' lvalue ParmVar 0x560dd252a580 'keyword' 'const char *'
|         |-BinaryOperator 0x560dd255a750 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x560dd255a700 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560dd255a6e0 <col:30> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560dd255a738 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560dd255a718 <col:42> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x560dd255a770 <col:54> 'P' lvalue ParmVar 0x560dd252a5f8 'parser' 'P'
|         |-DeclRefExpr 0x560dd255a790 <col:62> 'T1' lvalue ParmVar 0x560dd252a698 'x1' 'T1 &'
|         `-DeclRefExpr 0x560dd255a7b0 <col:66> 'T2' lvalue ParmVar 0x560dd252a738 'x2' 'T2 &'
|-FunctionTemplateDecl 0x560dd2530458 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x560dd252fe70 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd252fee8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560dd252ff68 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560dd25303b8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560dd2530030 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25300b0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2530128 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25301c8 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x560dd2530268 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x560dd255a9b8 <col:74, line:498:5>
|     |-CallExpr 0x560dd255a930 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd255a840 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x560dd255a880 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x560dd255a890 <col:30> 'const char *' lvalue ParmVar 0x560dd2530030 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560dd255a8b0 <col:39> 'int' lvalue ParmVar 0x560dd25300b0 'flags' 'int'
|     | |-DeclRefExpr 0x560dd255a8d0 <col:46> 'P' lvalue ParmVar 0x560dd2530128 'parser' 'P'
|     | |-DeclRefExpr 0x560dd255a8f0 <col:54> 'T1' lvalue ParmVar 0x560dd25301c8 'x1' 'T1 &'
|     | `-DeclRefExpr 0x560dd255a910 <col:58> 'T2' lvalue ParmVar 0x560dd2530268 'x2' 'T2 &'
|     `-ReturnStmt 0x560dd255a9a8 <line:497:9, col:17>
|       `-UnaryOperator 0x560dd255a990 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255a980 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd25307b8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x560dd25304d8 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd2530718 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560dd2530590 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2530608 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x560dd255ab00 <col:52, line:509:5>
|     `-ReturnStmt 0x560dd255aaf0 <line:508:9, col:44>
|       `-CallExpr 0x560dd255aab8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255a9e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255aa58 <col:26> 'const char *' lvalue ParmVar 0x560dd2530590 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd255aa78 <col:35> 'int' 0
|         `-DeclRefExpr 0x560dd255aa98 <col:38> 'P' lvalue ParmVar 0x560dd2530608 'parser' 'P'
|-FunctionTemplateDecl 0x560dd2530ab8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x560dd2530820 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd2530a18 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560dd25308d0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2530948 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x560dd255ac40 <col:54, line:513:5>
|     `-ReturnStmt 0x560dd255ac30 <line:512:9, col:52>
|       `-CallExpr 0x560dd255abf8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255ab28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255ab98 <col:26> 'const char *' lvalue ParmVar 0x560dd25308d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255abb8 <col:35> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int'
|         `-DeclRefExpr 0x560dd255abd8 <col:46> 'P' lvalue ParmVar 0x560dd2530948 'parser' 'P'
|-FunctionTemplateDecl 0x560dd2530db8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x560dd2530b20 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd2530d18 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560dd2530bd0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2530c48 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x560dd255ad80 <col:54, line:517:5>
|     `-ReturnStmt 0x560dd255ad70 <line:516:9, col:53>
|       `-CallExpr 0x560dd255ad38 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255ac68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255acd8 <col:26> 'const char *' lvalue ParmVar 0x560dd2530bd0 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255acf8 <col:35> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int'
|         `-DeclRefExpr 0x560dd255ad18 <col:47> 'P' lvalue ParmVar 0x560dd2530c48 'parser' 'P'
|-FunctionTemplateDecl 0x560dd25310b8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x560dd2530e20 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd2531018 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560dd2530ed0 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2530f48 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x560dd255af70 <col:55, line:521:5>
|     `-ReturnStmt 0x560dd255af60 <line:520:9, col:65>
|       `-CallExpr 0x560dd255af28 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255ada8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255ae18 <col:26> 'const char *' lvalue ParmVar 0x560dd2530ed0 'keyword' 'const char *'
|         |-BinaryOperator 0x560dd255aee8 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x560dd255ae98 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x560dd255ae78 <col:35> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x560dd255aed0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x560dd255aeb0 <col:47> 'const int' lvalue Var 0x560dd2524800 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x560dd255af08 <col:59> 'P' lvalue ParmVar 0x560dd2530f48 'parser' 'P'
|-FunctionTemplateDecl 0x560dd2531488 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x560dd2531120 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd25313e8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x560dd25311d0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2531250 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x560dd25312c8 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x560dd255b0b0 <col:63, line:526:5>
|     |-CallExpr 0x560dd255b038 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd255af88 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x560dd255afc8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x560dd255afd8 <col:35> 'const char *' lvalue ParmVar 0x560dd25311d0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x560dd255aff8 <col:44> 'int' lvalue ParmVar 0x560dd2531250 'flags' 'int'
|     | `-DeclRefExpr 0x560dd255b018 <col:51> 'P' lvalue ParmVar 0x560dd25312c8 'parser' 'P'
|     `-ReturnStmt 0x560dd255b0a0 <line:525:9, col:17>
|       `-UnaryOperator 0x560dd255b088 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255b078 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd25318d8 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x560dd25314f8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2531578 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2531838 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd2531638 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25316b0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2531758 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x560dd255b208 <col:58, line:541:5>
|     `-ReturnStmt 0x560dd255b1f8 <line:540:9, col:39>
|       `-CallExpr 0x560dd255b1c0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255b0e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255b160 <col:21> 'const char *' lvalue ParmVar 0x560dd2531638 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255b180 <col:30> 'P' lvalue ParmVar 0x560dd25316b0 'parser' 'P'
|         `-DeclRefExpr 0x560dd255b1a0 <col:38> 'T' lvalue ParmVar 0x560dd2531758 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2531d28 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x560dd2531948 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd25319c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2531c88 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd2531a88 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2531b00 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2531ba8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x560dd255b340 <col:60, line:545:5>
|     `-ReturnStmt 0x560dd255b330 <line:544:9, col:41>
|       `-CallExpr 0x560dd255b2f8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255b230 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255b298 <col:23> 'const char *' lvalue ParmVar 0x560dd2531a88 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255b2b8 <col:32> 'P' lvalue ParmVar 0x560dd2531b00 'parser' 'P'
|         `-DeclRefExpr 0x560dd255b2d8 <col:40> 'T' lvalue ParmVar 0x560dd2531ba8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2532178 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x560dd2531d98 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2531e18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd25320d8 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd2531ed8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2531f50 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2531ff8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x560dd255b478 <col:60, line:549:5>
|     `-ReturnStmt 0x560dd255b468 <line:548:9, col:41>
|       `-CallExpr 0x560dd255b430 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255b368 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255b3d0 <col:23> 'const char *' lvalue ParmVar 0x560dd2531ed8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255b3f0 <col:32> 'P' lvalue ParmVar 0x560dd2531f50 'parser' 'P'
|         `-DeclRefExpr 0x560dd255b410 <col:40> 'T' lvalue ParmVar 0x560dd2531ff8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd25325c8 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x560dd25321e8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2532268 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2532528 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd2532328 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25323a0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2532448 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x560dd255b5b0 <col:61, line:553:5>
|     `-ReturnStmt 0x560dd255b5a0 <line:552:9, col:42>
|       `-CallExpr 0x560dd255b568 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255b4a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255b508 <col:24> 'const char *' lvalue ParmVar 0x560dd2532328 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255b528 <col:33> 'P' lvalue ParmVar 0x560dd25323a0 'parser' 'P'
|         `-DeclRefExpr 0x560dd255b548 <col:41> 'T' lvalue ParmVar 0x560dd2532448 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2532aa8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x560dd2532638 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd25326b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2532a08 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560dd2532778 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25327f8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2532870 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2532918 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x560dd255b728 <col:69, line:557:5>
|     `-ReturnStmt 0x560dd255b718 <line:556:9, col:46>
|       `-CallExpr 0x560dd255b6d8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255b5d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255b658 <col:21> 'const char *' lvalue ParmVar 0x560dd2532778 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255b678 <col:30> 'int' lvalue ParmVar 0x560dd25327f8 'flags' 'int'
|         |-DeclRefExpr 0x560dd255b698 <col:37> 'P' lvalue ParmVar 0x560dd2532870 'parser' 'P'
|         `-DeclRefExpr 0x560dd255b6b8 <col:45> 'T' lvalue ParmVar 0x560dd2532918 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2532db8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x560dd2532b20 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd2532d18 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x560dd2532bd0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2532c48 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x560dd255b868 <col:56, line:571:5>
|     `-ReturnStmt 0x560dd255b858 <line:570:9, col:48>
|       `-CallExpr 0x560dd255b820 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255b750 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255b7c0 <col:30> 'const char *' lvalue ParmVar 0x560dd2532bd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd255b7e0 <col:39> 'int' 0
|         `-DeclRefExpr 0x560dd255b800 <col:42> 'P' lvalue ParmVar 0x560dd2532c48 'parser' 'P'
|-FunctionTemplateDecl 0x560dd2533148 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x560dd2532e20 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd25330a8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x560dd2532ed0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2532f50 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2532fc8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x560dd255ba38 <col:67, line:576:5>
|     |-CallExpr 0x560dd255b9c0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd255b880 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x560dd255b8c0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x560dd255b8d0 <col:39> 'const char *' lvalue ParmVar 0x560dd2532ed0 'keyword' 'const char *'
|     | |-BinaryOperator 0x560dd255b980 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x560dd255b930 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560dd255b8f0 <col:48> 'int' lvalue ParmVar 0x560dd2532f50 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560dd255b968 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560dd255b948 <col:56> 'const int' lvalue Var 0x560dd25249f0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x560dd255b9a0 <col:68> 'P' lvalue ParmVar 0x560dd2532fc8 'parser' 'P'
|     `-ReturnStmt 0x560dd255ba28 <line:575:9, col:17>
|       `-UnaryOperator 0x560dd255ba10 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255ba00 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2533598 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x560dd25331b8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2533238 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd25334f8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x560dd25332f8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2533370 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2533418 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x560dd255bba8 <col:62, line:592:5>
|     `-ReturnStmt 0x560dd255bb98 <line:591:9, col:51>
|       `-CallExpr 0x560dd255bb58 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255ba68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255bad8 <col:30> 'const char *' lvalue ParmVar 0x560dd25332f8 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd255baf8 <col:39> 'int' 0
|         |-DeclRefExpr 0x560dd255bb18 <col:42> 'P' lvalue ParmVar 0x560dd2533370 'parser' 'P'
|         `-DeclRefExpr 0x560dd255bb38 <col:50> 'T' lvalue ParmVar 0x560dd2533418 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2533a78 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x560dd2533608 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2533688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd25339d8 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x560dd2533748 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25337c8 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2533840 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25338e8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x560dd255bda0 <col:73, line:597:5>
|     |-CallExpr 0x560dd255bd20 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd255bbc0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x560dd255bc00 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x560dd255bc10 <col:39> 'const char *' lvalue ParmVar 0x560dd2533748 'keyword' 'const char *'
|     | |-BinaryOperator 0x560dd255bcc0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x560dd255bc70 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560dd255bc30 <col:48> 'int' lvalue ParmVar 0x560dd25337c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560dd255bca8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560dd255bc88 <col:56> 'const int' lvalue Var 0x560dd25249f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x560dd255bce0 <col:68> 'P' lvalue ParmVar 0x560dd2533840 'parser' 'P'
|     | `-DeclRefExpr 0x560dd255bd00 <col:76> 'T' lvalue ParmVar 0x560dd25338e8 'x' 'T &'
|     `-ReturnStmt 0x560dd255bd90 <line:596:9, col:17>
|       `-UnaryOperator 0x560dd255bd78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255bd68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2534028 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x560dd2533af0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2533b68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2533f88 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x560dd2533c28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2533ca0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2533e60 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560dd255bf10 <col:65, line:614:5>
|     `-ReturnStmt 0x560dd255bf00 <line:613:9, col:46>
|       `-CallExpr 0x560dd255bec0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255bdd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255be40 <col:25> 'const char *' lvalue ParmVar 0x560dd2533c28 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd255be60 <col:34> 'int' 0
|         |-DeclRefExpr 0x560dd255be80 <col:37> 'P' lvalue ParmVar 0x560dd2533ca0 'parser' 'P'
|         `-DeclRefExpr 0x560dd255bea0 <col:45> 'Vector<T>' lvalue ParmVar 0x560dd2533e60 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x560dd2534458 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x560dd2534098 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd25343b8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x560dd2534150 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25342a0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560dd255c130 <col:55, line:618:5>
|     `-ReturnStmt 0x560dd255c120 <line:617:9, col:55>
|       `-CallExpr 0x560dd255c0e0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255bf38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255bfa8 <col:25> 'const char *' lvalue ParmVar 0x560dd2534150 'keyword' 'const char *'
|         |-IntegerLiteral 0x560dd255bfc8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x560dd255c0a0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x560dd255c0c0 <col:54> 'Vector<T>' lvalue ParmVar 0x560dd25342a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x560dd2534a28 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x560dd25344c0 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2534538 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2534988 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x560dd25345f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2534678 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560dd25346f0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2534840 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560dd255c328 <col:76, line:623:5>
|     |-CallExpr 0x560dd255c2a8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x560dd255c148 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x560dd255c188 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x560dd255c198 <col:34> 'const char *' lvalue ParmVar 0x560dd25345f8 'keyword' 'const char *'
|     | |-BinaryOperator 0x560dd255c248 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x560dd255c1f8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x560dd255c1b8 <col:43> 'int' lvalue ParmVar 0x560dd2534678 'flags' 'int'
|     | | `-ImplicitCastExpr 0x560dd255c230 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x560dd255c210 <col:51> 'const int' lvalue Var 0x560dd25249f0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x560dd255c268 <col:63> 'P' lvalue ParmVar 0x560dd25346f0 'parser' 'P'
|     | `-DeclRefExpr 0x560dd255c288 <col:71> 'Vector<T>' lvalue ParmVar 0x560dd2534840 'x' 'Vector<T> &'
|     `-ReturnStmt 0x560dd255c318 <line:622:9, col:17>
|       `-UnaryOperator 0x560dd255c300 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255c2f0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2534f68 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x560dd2534aa0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2534b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2534ec8 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x560dd2534bd8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2534c58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2534da0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x560dd255c590 <col:66, line:627:5>
|     `-ReturnStmt 0x560dd255c580 <line:626:9, col:59>
|       `-CallExpr 0x560dd255c540 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x560dd255c358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x560dd255c3c8 <col:25> 'const char *' lvalue ParmVar 0x560dd2534bd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x560dd255c3e8 <col:34> 'int' lvalue ParmVar 0x560dd2534c58 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x560dd255c500 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x560dd255c520 <col:58> 'Vector<T>' lvalue ParmVar 0x560dd2534da0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x560dd2534ff8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x560dd255c610 <col:25, line:633:5>
|   `-ReturnStmt 0x560dd255c600 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x560dd255c5e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x560dd255c5b8 <col:16> 'const bool' lvalue ->_status 0x560dd2542a98
|         `-CXXThisExpr 0x560dd255c5a8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x560dd2535178 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x560dd25350b0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x560dd255c6f8 <col:27, line:639:5>
|   |-BinaryOperator 0x560dd255c6a0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560dd255c628 <col:9> 'bool' lvalue ParmVar 0x560dd25350b0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560dd255c688 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560dd255c658 <col:13> 'bool' lvalue ->_status 0x560dd2542a98
|   |     `-CXXThisExpr 0x560dd255c648 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x560dd255c6e8 <line:638:9, col:17>
|     `-UnaryOperator 0x560dd255c6d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd255c6c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x560dd25352f8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x560dd2535238 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x560dd255c7e8 <col:39, line:644:5>
|   |-BinaryOperator 0x560dd255c790 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560dd255c718 <col:9> 'bool' lvalue ParmVar 0x560dd2535238 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560dd255c778 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560dd255c748 <col:13> 'const bool' lvalue ->_status 0x560dd2542a98
|   |     `-CXXThisExpr 0x560dd255c738 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x560dd255c7d8 <line:643:9, col:17>
|     `-UnaryOperator 0x560dd255c7c0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd255c7b0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x560dd25353c0 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x560dd255c890 <col:30, line:651:5>
|   `-ReturnStmt 0x560dd255c880 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x560dd255c868 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x560dd255c838 <col:16> 'bool' lvalue ->_read_status 0x560dd2436d00
|         `-ImplicitCastExpr 0x560dd255c818 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x560dd255c808 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x560dd2535508 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x560dd2535478 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x560dd255c998 <col:32, line:658:5>
|   |-BinaryOperator 0x560dd255c940 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560dd255c8a8 <col:9> 'bool' lvalue ParmVar 0x560dd2535478 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560dd255c928 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560dd255c8f8 <col:13> 'bool' lvalue ->_read_status 0x560dd2436d00
|   |     `-ImplicitCastExpr 0x560dd255c8d8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x560dd255c8c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x560dd255c988 <line:657:9, col:17>
|     `-UnaryOperator 0x560dd255c970 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd255c960 <col:17> 'Args *' this
|-CXXMethodDecl 0x560dd2535658 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x560dd25355c8 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x560dd255caa8 <col:44, line:663:5>
|   |-BinaryOperator 0x560dd255ca50 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x560dd255c9b8 <col:9> 'bool' lvalue ParmVar 0x560dd25355c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x560dd255ca38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x560dd255ca08 <col:13> 'bool' lvalue ->_read_status 0x560dd2436d00
|   |     `-ImplicitCastExpr 0x560dd255c9e8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x560dd255c9d8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x560dd255ca98 <line:662:9, col:17>
|     `-UnaryOperator 0x560dd255ca80 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd255ca70 <col:17> 'const Args *' this
|-CXXMethodDecl 0x560dd2535720 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x560dd25357e8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x560dd25358b0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x560dd2535978 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x560dd2535c88 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x560dd2535a18 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd2535be8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x560dd2535af8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x560dd255ce60 <col:19, line:706:5>
|     `-IfStmt 0x560dd255ce38 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x560dd255cba8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x560dd255cd68 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x560dd255cd38 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x560dd255ccf8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x560dd255cc00 <col:42> '<bound member function type>' ->simple_slot 0x560dd2555f70
|       |     | `-CXXThisExpr 0x560dd255cbf0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x560dd255cc98 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x560dd255cc50 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x560dd22c0d68
|       |     | `-DeclRefExpr 0x560dd255cc30 <col:55> 'T' lvalue ParmVar 0x560dd2535af8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x560dd255ccd8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x560dd255ce28 <line:705:13, col:34>
|         `-CallExpr 0x560dd255ce00 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x560dd255cd88 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x560dd255cde0 <col:33> 'T' lvalue ParmVar 0x560dd2535af8 'x' 'T &'
|-FunctionTemplateDecl 0x560dd2535f58 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x560dd2535ce8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd2535eb8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x560dd2535dc8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x560dd255d240 <col:31, line:717:5>
|     |-DeclStmt 0x560dd255cfa0 <line:713:9, col:23>
|     | `-VarDecl 0x560dd255ce88 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x560dd255cf78 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x560dd255cf00 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x560dd255cf58 <col:21> 'T' lvalue ParmVar 0x560dd2535dc8 'x' 'T &'
|     |-IfStmt 0x560dd255d1f0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x560dd255d098 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x560dd255d1d0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x560dd255d170 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x560dd255d100 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|     |   | `-DeclRefExpr 0x560dd255d0e0 <col:14> 'T *' lvalue Var 0x560dd255ce88 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x560dd255d1b0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x560dd255d228 <line:716:9, col:16>
|       `-DeclRefExpr 0x560dd255d208 <col:16> 'T *' lvalue Var 0x560dd255ce88 's' 'T *'
|-FunctionTemplateDecl 0x560dd2536368 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x560dd2535fb8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560dd2536038 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560dd25362c8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x560dd2536118 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x560dd25361b8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x560dd255d550 <col:37, line:726:5>
|     |-IfStmt 0x560dd255d4e0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x560dd255d500 <line:723:13, col:26>
|     | | `-VarDecl 0x560dd255d2a8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x560dd255d398 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x560dd255d320 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x560dd255d378 <col:25> 'T' lvalue ParmVar 0x560dd2536118 'x' 'T &'
|     | |-DeclRefExpr 0x560dd255d3c0 <col:16> 'T *' lvalue Var 0x560dd255d2a8 's' 'T *'
|     | `-BinaryOperator 0x560dd255d4c0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x560dd255d470 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x560dd255d400 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|     |   | `-DeclRefExpr 0x560dd255d3e0 <col:14> 'T *' lvalue Var 0x560dd255d2a8 's' 'T *'
|     |   `-DeclRefExpr 0x560dd255d4a0 <col:18> 'const V' lvalue ParmVar 0x560dd25361b8 'value' 'const V &'
|     `-ReturnStmt 0x560dd255d540 <line:725:9, col:17>
|       `-UnaryOperator 0x560dd255d528 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x560dd255d518 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x560dd2536768 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x560dd25363d0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x560dd25366c8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x560dd2536480 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2536500 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560dd25365a8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x560dd255e370 <col:65, line:737:5>
|     |-DeclStmt 0x560dd255d5e8 <line:732:9, col:26>
|     | `-VarDecl 0x560dd255d580 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560dd255e338 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x560dd255e358 <line:733:13, col:58>
|       | `-VarDecl 0x560dd255d610 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560dd255d7f0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560dd255d7c0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560dd255d7a8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560dd255d788 <col:26, col:58> 'String' (CXXTemporary 0x560dd255d788)
|       |           `-CXXMemberCallExpr 0x560dd255d718 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560dd255d688 <col:26> '<bound member function type>' ->find 0x560dd2555588
|       |             | `-CXXThisExpr 0x560dd255d678 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560dd255d750 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd255d6b8 <col:31> 'const char *' lvalue ParmVar 0x560dd2536480 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560dd255d768 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd255d6d8 <col:40> 'int' lvalue ParmVar 0x560dd2536500 'flags' 'int'
|       |             `-DeclRefExpr 0x560dd255d6f8 <col:47> 'Args::Slot *' lvalue Var 0x560dd255d580 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560dd255d8a8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560dd255d890 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560dd255d870 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560dd255d840 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |       `-ImplicitCastExpr 0x560dd255d828 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560dd255d808 <col:20> 'String' lvalue Var 0x560dd255d610 'str' 'String'
|       `-CompoundStmt 0x560dd255e318 <col:61, line:736:9>
|         |-DeclStmt 0x560dd255dd60 <line:734:13, col:76>
|         | `-VarDecl 0x560dd255d8f8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x560dd255dd30 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560dd255dca0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560dd255dce8 <col:60> 'T' lvalue ParmVar 0x560dd25365a8 'variable' 'T &'
|         |     `-UnaryOperator 0x560dd255dd18 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560dd255dd08 <col:71> 'Args *' this
|         `-CallExpr 0x560dd255e2e8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x560dd255dd88 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|           | `-CXXThisExpr 0x560dd255dd78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560dd255e2a8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x560dd255ddb8 <col:23> 'T *' lvalue Var 0x560dd255d8f8 's' 'T *'
|           | `-CallExpr 0x560dd255e268 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560dd255e040 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x560dd255e140 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x560dd255e160 <col:86> 'String' lvalue Var 0x560dd255d610 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560dd255e210 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560dd255e1a0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|           |   | `-DeclRefExpr 0x560dd255e180 <col:92> 'T *' lvalue Var 0x560dd255d8f8 's' 'T *'
|           |   `-UnaryOperator 0x560dd255e250 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560dd255e240 <col:96> 'Args *' this
|           `-DeclRefExpr 0x560dd255e2c8 <col:103> 'Args::Slot *' lvalue Var 0x560dd255d580 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560dd2536cb8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x560dd25367d8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560dd2536858 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x560dd2536c18 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x560dd2536918 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2536998 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2536a38 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x560dd2536ad8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x560dd255f210 <col:88, line:745:5>
|     |-DeclStmt 0x560dd255e408 <line:741:9, col:26>
|     | `-VarDecl 0x560dd255e3a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560dd255e628 <line:742:9, col:55>
|     | `-VarDecl 0x560dd255e430 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x560dd255e610 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x560dd255e5e0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x560dd255e5c8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x560dd255e5a8 <col:22, col:54> 'String' (CXXTemporary 0x560dd255e5a8)
|     |           `-CXXMemberCallExpr 0x560dd255e538 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x560dd255e4a8 <col:22> '<bound member function type>' ->find 0x560dd2555588
|     |             | `-CXXThisExpr 0x560dd255e498 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x560dd255e570 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560dd255e4d8 <col:27> 'const char *' lvalue ParmVar 0x560dd2536918 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x560dd255e588 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560dd255e4f8 <col:36> 'int' lvalue ParmVar 0x560dd2536998 'flags' 'int'
|     |             `-DeclRefExpr 0x560dd255e518 <col:43> 'Args::Slot *' lvalue Var 0x560dd255e3a0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x560dd255ea00 <line:743:9, col:72>
|     | `-VarDecl 0x560dd255e678 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560dd255e9d0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560dd255e940 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x560dd255e988 <col:56> 'T' lvalue ParmVar 0x560dd2536a38 'variable' 'T &'
|     |     `-UnaryOperator 0x560dd255e9b8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560dd255e9a8 <col:67> 'Args *' this
|     `-CallExpr 0x560dd255f1e0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x560dd255ea28 <col:9> '<bound member function type>' ->postparse 0x560dd2555798
|       | `-CXXThisExpr 0x560dd255ea18 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x560dd255f1a0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x560dd255ea58 <col:19> 'T *' lvalue Var 0x560dd255e678 's' 'T *'
|       | `-ParenExpr 0x560dd255f180 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x560dd255f150 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x560dd255f138 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x560dd255f120 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x560dd255f100 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x560dd255f0d0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |     |       `-ImplicitCastExpr 0x560dd255f0b8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x560dd255ea78 <col:25> 'String' lvalue Var 0x560dd255e430 'str' 'String'
|       |     |-CallExpr 0x560dd255ef28 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x560dd255ed00 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x560dd255ee00 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x560dd255ee20 <col:89> 'String' lvalue Var 0x560dd255e430 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x560dd255eed0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x560dd255ee60 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|       |     | | `-DeclRefExpr 0x560dd255ee40 <col:95> 'T *' lvalue Var 0x560dd255e678 's' 'T *'
|       |     | `-UnaryOperator 0x560dd255ef10 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x560dd255ef00 <col:99> 'Args *' this
|       |     `-ParenExpr 0x560dd255f098 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x560dd255f078 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x560dd255f048 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x560dd255eff8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x560dd255ef88 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|       |         | | `-DeclRefExpr 0x560dd255ef68 <col:109> 'T *' lvalue Var 0x560dd255e678 's' 'T *'
|       |         | `-DeclRefExpr 0x560dd255f028 <col:113> 'const V' lvalue ParmVar 0x560dd2536ad8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x560dd255f068 <col:120> 'bool' true
|       `-DeclRefExpr 0x560dd255f1c0 <col:128> 'Args::Slot *' lvalue Var 0x560dd255e3a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560dd25371e8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x560dd2536d30 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2536da8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2537148 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x560dd2536e68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2536ee8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2536f60 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2537008 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x560dd255fe08 <col:75, line:754:5>
|     |-DeclStmt 0x560dd255f2b8 <line:749:9, col:26>
|     | `-VarDecl 0x560dd255f250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560dd255fdd0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x560dd255fdf0 <line:750:13, col:58>
|       | `-VarDecl 0x560dd255f2e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560dd255f4c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560dd255f490 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560dd255f478 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560dd255f458 <col:26, col:58> 'String' (CXXTemporary 0x560dd255f458)
|       |           `-CXXMemberCallExpr 0x560dd255f3e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560dd255f358 <col:26> '<bound member function type>' ->find 0x560dd2555588
|       |             | `-CXXThisExpr 0x560dd255f348 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560dd255f420 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd255f388 <col:31> 'const char *' lvalue ParmVar 0x560dd2536e68 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560dd255f438 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd255f3a8 <col:40> 'int' lvalue ParmVar 0x560dd2536ee8 'flags' 'int'
|       |             `-DeclRefExpr 0x560dd255f3c8 <col:47> 'Args::Slot *' lvalue Var 0x560dd255f250 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560dd255f578 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560dd255f560 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560dd255f540 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560dd255f510 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |       `-ImplicitCastExpr 0x560dd255f4f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560dd255f4d8 <col:20> 'String' lvalue Var 0x560dd255f2e0 'str' 'String'
|       `-CompoundStmt 0x560dd255fdb0 <col:61, line:753:9>
|         |-DeclStmt 0x560dd255f950 <line:751:13, col:63>
|         | `-VarDecl 0x560dd255f5c8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x560dd255f920 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560dd255f890 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560dd255f8d8 <col:47> 'T' lvalue ParmVar 0x560dd2537008 'variable' 'T &'
|         |     `-UnaryOperator 0x560dd255f908 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560dd255f8f8 <col:58> 'Args *' this
|         `-CallExpr 0x560dd255fd80 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x560dd255f978 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|           | `-CXXThisExpr 0x560dd255f968 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560dd255fd40 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x560dd255f9a8 <col:23> 'T *' lvalue Var 0x560dd255f5c8 's' 'T *'
|           | `-CallExpr 0x560dd255fd00 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560dd255fb90 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x560dd255fbd8 <col:56> 'P' lvalue ParmVar 0x560dd2536f60 'parser' 'P'
|           |   |-DeclRefExpr 0x560dd255fbf8 <col:64> 'String' lvalue Var 0x560dd255f2e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560dd255fca8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560dd255fc38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|           |   | `-DeclRefExpr 0x560dd255fc18 <col:70> 'T *' lvalue Var 0x560dd255f5c8 's' 'T *'
|           |   `-UnaryOperator 0x560dd255fce8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560dd255fcd8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x560dd255fd60 <col:81> 'Args::Slot *' lvalue Var 0x560dd255f250 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560dd2537848 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x560dd2537260 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x560dd25372d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x560dd2537358 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x560dd25377a8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x560dd2537420 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25374a0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2537518 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25375b8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x560dd2537658 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x560dd2562f38 <col:98, line:762:5>
|     |-DeclStmt 0x560dd255fea0 <line:758:9, col:26>
|     | `-VarDecl 0x560dd255fe38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560dd25600c0 <line:759:9, col:55>
|     | `-VarDecl 0x560dd255fec8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x560dd25600a8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x560dd2560078 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x560dd2560060 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x560dd2560040 <col:22, col:54> 'String' (CXXTemporary 0x560dd2560040)
|     |           `-CXXMemberCallExpr 0x560dd255ffd0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x560dd255ff40 <col:22> '<bound member function type>' ->find 0x560dd2555588
|     |             | `-CXXThisExpr 0x560dd255ff30 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x560dd2560008 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560dd255ff70 <col:27> 'const char *' lvalue ParmVar 0x560dd2537420 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x560dd2560020 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x560dd255ff90 <col:36> 'int' lvalue ParmVar 0x560dd25374a0 'flags' 'int'
|     |             `-DeclRefExpr 0x560dd255ffb0 <col:43> 'Args::Slot *' lvalue Var 0x560dd255fe38 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x560dd25604e0 <line:760:9, col:59>
|     | `-VarDecl 0x560dd2560118 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560dd25604b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560dd2560420 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x560dd2560468 <col:43> 'T' lvalue ParmVar 0x560dd25375b8 'variable' 'T &'
|     |     `-UnaryOperator 0x560dd2560498 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560dd2560488 <col:54> 'Args *' this
|     `-CallExpr 0x560dd2562f08 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x560dd2560508 <col:9> '<bound member function type>' ->postparse 0x560dd2555798
|       | `-CXXThisExpr 0x560dd25604f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x560dd2562ec8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x560dd2560538 <col:19> 'T *' lvalue Var 0x560dd2560118 's' 'T *'
|       | `-ParenExpr 0x560dd2562ea8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x560dd2562e78 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x560dd2562e60 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x560dd2562e48 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x560dd2562e28 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x560dd2562df8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |     |       `-ImplicitCastExpr 0x560dd2562de0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x560dd2560558 <col:25> 'String' lvalue Var 0x560dd255fec8 'str' 'String'
|       |     |-CallExpr 0x560dd2562c50 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x560dd2562ae0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x560dd2562b28 <col:59> 'P' lvalue ParmVar 0x560dd2537518 'parser' 'P'
|       |     | |-DeclRefExpr 0x560dd2562b48 <col:67> 'String' lvalue Var 0x560dd255fec8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x560dd2562bf8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x560dd2562b88 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|       |     | | `-DeclRefExpr 0x560dd2562b68 <col:73> 'T *' lvalue Var 0x560dd2560118 's' 'T *'
|       |     | `-UnaryOperator 0x560dd2562c38 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x560dd2562c28 <col:77> 'Args *' this
|       |     `-ParenExpr 0x560dd2562dc0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x560dd2562da0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x560dd2562d70 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x560dd2562d20 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x560dd2562cb0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|       |         | | `-DeclRefExpr 0x560dd2562c90 <col:87> 'T *' lvalue Var 0x560dd2560118 's' 'T *'
|       |         | `-DeclRefExpr 0x560dd2562d50 <col:91> 'const V' lvalue ParmVar 0x560dd2537658 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x560dd2562d90 <col:98> 'bool' true
|       `-DeclRefExpr 0x560dd2562ee8 <col:106> 'Args::Slot *' lvalue Var 0x560dd255fe38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560dd253fb18 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x560dd25378c8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2537948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x560dd25379c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x560dd253fa78 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x560dd2537a90 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd2537b10 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2537b88 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2537c28 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x560dd253f920 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x560dd2563f18 <col:60, line:773:5>
|     |-DeclStmt 0x560dd2562fe0 <line:767:9, col:26>
|     | `-VarDecl 0x560dd2562f78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560dd2563ee0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x560dd2563f00 <line:768:13, col:58>
|       | `-VarDecl 0x560dd2563008 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560dd25631e8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560dd25631b8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560dd25631a0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560dd2563180 <col:26, col:58> 'String' (CXXTemporary 0x560dd2563180)
|       |           `-CXXMemberCallExpr 0x560dd2563110 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560dd2563080 <col:26> '<bound member function type>' ->find 0x560dd2555588
|       |             | `-CXXThisExpr 0x560dd2563070 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560dd2563148 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd25630b0 <col:31> 'const char *' lvalue ParmVar 0x560dd2537a90 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560dd2563160 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd25630d0 <col:40> 'int' lvalue ParmVar 0x560dd2537b10 'flags' 'int'
|       |             `-DeclRefExpr 0x560dd25630f0 <col:47> 'Args::Slot *' lvalue Var 0x560dd2562f78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560dd25632a0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560dd2563288 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560dd2563268 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560dd2563238 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |       `-ImplicitCastExpr 0x560dd2563220 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560dd2563200 <col:20> 'String' lvalue Var 0x560dd2563008 'str' 'String'
|       `-CompoundStmt 0x560dd2563eb8 <col:61, line:772:9>
|         |-DeclStmt 0x560dd25635e0 <line:769:13, col:66>
|         | `-VarDecl 0x560dd25632f8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x560dd25635b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560dd2563520 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560dd2563568 <col:49> 'T1' lvalue ParmVar 0x560dd2537c28 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x560dd2563598 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560dd2563588 <col:61> 'Args *' this
|         |-DeclStmt 0x560dd2563950 <line:770:13, col:66>
|         | `-VarDecl 0x560dd2563668 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x560dd2563920 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x560dd2563890 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x560dd25638d8 <col:49> 'T2' lvalue ParmVar 0x560dd253f920 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x560dd2563908 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x560dd25638f8 <col:61> 'Args *' this
|         `-CallExpr 0x560dd2563e88 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x560dd2563978 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|           | `-CXXThisExpr 0x560dd2563968 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x560dd2563e48 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x560dd25639e8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x560dd25639a8 <col:23> 'T1 *' lvalue Var 0x560dd25632f8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x560dd25639c8 <col:29> 'T2 *' lvalue Var 0x560dd2563668 's2' 'T2 *'
|           | `-CallExpr 0x560dd2563e00 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x560dd2563bd0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x560dd2563c18 <col:63> 'P' lvalue ParmVar 0x560dd2537b88 'parser' 'P'
|           |   |-DeclRefExpr 0x560dd2563c38 <col:71> 'String' lvalue Var 0x560dd2563008 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x560dd2563ce8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560dd2563c78 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|           |   | `-DeclRefExpr 0x560dd2563c58 <col:77> 'T1 *' lvalue Var 0x560dd25632f8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x560dd2563da8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x560dd2563d38 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|           |   | `-DeclRefExpr 0x560dd2563d18 <col:82> 'T2 *' lvalue Var 0x560dd2563668 's2' 'T2 *'
|           |   `-UnaryOperator 0x560dd2563de8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x560dd2563dd8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x560dd2563e68 <col:94> 'Args::Slot *' lvalue Var 0x560dd2562f78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560dd253ff08 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x560dd253fb98 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd253fe68 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x560dd253fc50 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd253fcd0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x560dd253fd48 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x560dd2564430 <col:67, line:780:5>
|     |-DeclStmt 0x560dd2563fb0 <line:777:9, col:26>
|     | `-VarDecl 0x560dd2563f48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x560dd25643f8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x560dd2564418 <line:778:13, col:58>
|       | `-VarDecl 0x560dd2563fd8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x560dd25641b8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x560dd2564188 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x560dd2564170 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x560dd2564150 <col:26, col:58> 'String' (CXXTemporary 0x560dd2564150)
|       |           `-CXXMemberCallExpr 0x560dd25640e0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x560dd2564050 <col:26> '<bound member function type>' ->find 0x560dd2555588
|       |             | `-CXXThisExpr 0x560dd2564040 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x560dd2564118 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd2564080 <col:31> 'const char *' lvalue ParmVar 0x560dd253fc50 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x560dd2564130 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x560dd25640a0 <col:40> 'int' lvalue ParmVar 0x560dd253fcd0 'flags' 'int'
|       |             `-DeclRefExpr 0x560dd25640c0 <col:47> 'Args::Slot *' lvalue Var 0x560dd2563f48 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x560dd2564270 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x560dd2564258 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x560dd2564238 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x560dd2564208 <col:20> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|       |       `-ImplicitCastExpr 0x560dd25641f0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x560dd25641d0 <col:20> 'String' lvalue Var 0x560dd2563fd8 'str' 'String'
|       `-CallExpr 0x560dd25643c8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x560dd2564298 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|         | `-CXXThisExpr 0x560dd2564288 <col:13> 'Args *' implicit this
|         |-CallExpr 0x560dd2564378 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x560dd25642e8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x560dd25642c8 <col:23> 'P' lvalue ParmVar 0x560dd253fd48 'parser' 'P'
|         | |-DeclRefExpr 0x560dd2564330 <col:36> 'String' lvalue Var 0x560dd2563fd8 'str' 'String'
|         | `-UnaryOperator 0x560dd2564360 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x560dd2564350 <col:42> 'Args *' this
|         `-DeclRefExpr 0x560dd25643a8 <col:49> 'Args::Slot *' lvalue Var 0x560dd2563f48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x560dd25402a8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x560dd253ff78 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x560dd2540208 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x560dd2540030 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25400b0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2540128 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x560dd2564da0 <col:71, line:792:5>
|     |-DeclStmt 0x560dd25644c8 <line:784:9, col:26>
|     | `-VarDecl 0x560dd2564460 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560dd2564598 <line:785:9, col:29>
|     | `-VarDecl 0x560dd25644f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560dd2564580 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560dd2564560 <col:28> 'int' 1
|     |-WhileStmt 0x560dd2564c50 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x560dd2564c70 <line:786:16, col:61>
|     | | `-VarDecl 0x560dd25645c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560dd25647a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560dd2564770 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560dd2564758 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560dd2564738 <col:29, col:61> 'String' (CXXTemporary 0x560dd2564738)
|     | |           `-CXXMemberCallExpr 0x560dd25646c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560dd2564638 <col:29> '<bound member function type>' ->find 0x560dd2555588
|     | |             | `-CXXThisExpr 0x560dd2564628 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560dd2564700 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560dd2564668 <col:34> 'const char *' lvalue ParmVar 0x560dd2540030 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560dd2564718 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560dd2564688 <col:43> 'int' lvalue ParmVar 0x560dd25400b0 'flags' 'int'
|     | |             `-DeclRefExpr 0x560dd25646a8 <col:50> 'Args::Slot *' lvalue Var 0x560dd2564460 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560dd2564858 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560dd2564840 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560dd2564820 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560dd25647f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|     | |       `-ImplicitCastExpr 0x560dd25647d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560dd25647b8 <col:23> 'String' lvalue Var 0x560dd25645c0 'str' 'String'
|     | `-CompoundStmt 0x560dd2564c28 <col:64, line:790:9>
|     |   |-CallExpr 0x560dd25649b0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x560dd2564880 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|     |   | | `-CXXThisExpr 0x560dd2564870 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x560dd2564960 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x560dd25648d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x560dd25648b0 <col:23> 'P' lvalue ParmVar 0x560dd2540128 'parser' 'P'
|     |   | | |-DeclRefExpr 0x560dd2564918 <col:36> 'String' lvalue Var 0x560dd25645c0 'str' 'String'
|     |   | | `-UnaryOperator 0x560dd2564948 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x560dd2564938 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x560dd2564990 <col:49> 'Args::Slot *' lvalue Var 0x560dd2564460 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x560dd2564b48 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560dd25649e0 <col:13> 'int' lvalue Var 0x560dd25644f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560dd2564b30 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560dd2564b10 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560dd2564a78 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560dd2564a58 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560dd2564a40 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560dd2564a00 <col:28> 'int' lvalue Var 0x560dd25644f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560dd2564a20 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560dd2564af8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560dd2564ac8 <col:49> 'bool' lvalue ->_read_status 0x560dd2436d00
|     |   |         `-ImplicitCastExpr 0x560dd2564aa8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560dd2564a98 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560dd2564bf8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560dd2564b68 <col:13> 'int' lvalue ParmVar 0x560dd25400b0 'flags' 'int'
|     |     `-UnaryOperator 0x560dd2564be0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560dd2564bc8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560dd2564ba8 <col:23> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560dd2564d80 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560dd2564cb8 <col:9> 'bool' lvalue ->_read_status 0x560dd2436d00
|       | `-ImplicitCastExpr 0x560dd2564c98 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560dd2564c88 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560dd2564d60 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560dd2564d40 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560dd2564d28 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560dd2564ce8 <col:25> 'int' lvalue Var 0x560dd25644f8 'read_status' 'int'
|           `-IntegerLiteral 0x560dd2564d08 <col:40> 'int' 1
|-FunctionTemplateDecl 0x560dd2540788 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x560dd2540318 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2540398 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd25406e8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x560dd2540458 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25404d8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2540550 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x560dd25405f8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x560dd2565d30 <col:84, line:805:5>
|     |-DeclStmt 0x560dd2564e48 <line:796:9, col:26>
|     | `-VarDecl 0x560dd2564de0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560dd2564f18 <line:797:9, col:29>
|     | `-VarDecl 0x560dd2564e78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560dd2564f00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560dd2564ee0 <col:28> 'int' 1
|     |-DeclStmt 0x560dd2565250 <line:798:9, col:71>
|     | `-VarDecl 0x560dd2564f68 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x560dd2565220 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x560dd2565190 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x560dd25651d8 <col:55> 'T' lvalue ParmVar 0x560dd25405f8 'variable' 'T &'
|     |     `-UnaryOperator 0x560dd2565208 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x560dd25651f8 <col:66> 'Args *' this
|     |-WhileStmt 0x560dd2565be0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x560dd2565c00 <line:799:16, col:61>
|     | | `-VarDecl 0x560dd2565278 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560dd2565458 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560dd2565428 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560dd2565410 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560dd25653f0 <col:29, col:61> 'String' (CXXTemporary 0x560dd25653f0)
|     | |           `-CXXMemberCallExpr 0x560dd2565380 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560dd25652f0 <col:29> '<bound member function type>' ->find 0x560dd2555588
|     | |             | `-CXXThisExpr 0x560dd25652e0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560dd25653b8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560dd2565320 <col:34> 'const char *' lvalue ParmVar 0x560dd2540458 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560dd25653d0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560dd2565340 <col:43> 'int' lvalue ParmVar 0x560dd25404d8 'flags' 'int'
|     | |             `-DeclRefExpr 0x560dd2565360 <col:50> 'Args::Slot *' lvalue Var 0x560dd2564de0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560dd2565510 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560dd25654f8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560dd25654d8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560dd25654a8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|     | |       `-ImplicitCastExpr 0x560dd2565490 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560dd2565470 <col:23> 'String' lvalue Var 0x560dd2565278 'str' 'String'
|     | `-CompoundStmt 0x560dd2565bb8 <col:64, line:803:9>
|     |   |-CallExpr 0x560dd2565940 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x560dd2565538 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|     |   | | `-CXXThisExpr 0x560dd2565528 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x560dd2565900 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x560dd2565568 <col:23> 'T *' lvalue Var 0x560dd2564f68 's' 'T *'
|     |   | | `-CallExpr 0x560dd25658c0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x560dd2565750 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x560dd2565798 <col:56> 'P' lvalue ParmVar 0x560dd2540550 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x560dd25657b8 <col:64> 'String' lvalue Var 0x560dd2565278 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x560dd2565868 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x560dd25657f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|     |   | |   | `-DeclRefExpr 0x560dd25657d8 <col:70> 'T *' lvalue Var 0x560dd2564f68 's' 'T *'
|     |   | |   `-UnaryOperator 0x560dd25658a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x560dd2565898 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x560dd2565920 <col:81> 'Args::Slot *' lvalue Var 0x560dd2564de0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x560dd2565ad8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560dd2565970 <col:13> 'int' lvalue Var 0x560dd2564e78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560dd2565ac0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560dd2565aa0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560dd2565a08 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560dd25659e8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560dd25659d0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560dd2565990 <col:28> 'int' lvalue Var 0x560dd2564e78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560dd25659b0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560dd2565a88 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560dd2565a58 <col:49> 'bool' lvalue ->_read_status 0x560dd2436d00
|     |   |         `-ImplicitCastExpr 0x560dd2565a38 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560dd2565a28 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560dd2565b88 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560dd2565af8 <col:13> 'int' lvalue ParmVar 0x560dd25404d8 'flags' 'int'
|     |     `-UnaryOperator 0x560dd2565b70 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560dd2565b58 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560dd2565b38 <col:23> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560dd2565d10 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560dd2565c48 <col:9> 'bool' lvalue ->_read_status 0x560dd2436d00
|       | `-ImplicitCastExpr 0x560dd2565c28 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560dd2565c18 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560dd2565cf0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560dd2565cd0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560dd2565cb8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560dd2565c78 <col:25> 'int' lvalue Var 0x560dd2564e78 'read_status' 'int'
|           `-IntegerLiteral 0x560dd2565c98 <col:40> 'int' 1
|-FunctionTemplateDecl 0x560dd2540d68 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x560dd2540800 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x560dd2540878 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x560dd2540cc8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x560dd2540938 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x560dd25409b8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x560dd2540a30 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x560dd2540b80 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x560dd2566b38 <col:87, line:821:5>
|     |-DeclStmt 0x560dd2565de0 <line:809:9, col:26>
|     | `-VarDecl 0x560dd2565d78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x560dd2565eb0 <line:810:9, col:29>
|     | `-VarDecl 0x560dd2565e10 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x560dd2565e98 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x560dd2565e78 <col:28> 'int' 1
|     |-DeclStmt 0x560dd25660f8 <line:811:9, col:38>
|     | `-VarDecl 0x560dd2565fe0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x560dd25660d0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x560dd2566058 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x560dd25660b0 <col:29> 'Vector<T>' lvalue ParmVar 0x560dd2540b80 'variable' 'Vector<T> &'
|     |-WhileStmt 0x560dd25669e8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x560dd2566a08 <line:812:16, col:61>
|     | | `-VarDecl 0x560dd2566120 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x560dd2566300 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x560dd25662d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x560dd25662b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x560dd2566298 <col:29, col:61> 'String' (CXXTemporary 0x560dd2566298)
|     | |           `-CXXMemberCallExpr 0x560dd2566228 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x560dd2566198 <col:29> '<bound member function type>' ->find 0x560dd2555588
|     | |             | `-CXXThisExpr 0x560dd2566188 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x560dd2566260 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560dd25661c8 <col:34> 'const char *' lvalue ParmVar 0x560dd2540938 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x560dd2566278 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x560dd25661e8 <col:43> 'int' lvalue ParmVar 0x560dd25409b8 'flags' 'int'
|     | |             `-DeclRefExpr 0x560dd2566208 <col:50> 'Args::Slot *' lvalue Var 0x560dd2565d78 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x560dd25663b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x560dd25663a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x560dd2566380 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x560dd2566350 <col:23> '<bound member function type>' .operator int (String::*)() const 0x560dd2283d38
|     | |       `-ImplicitCastExpr 0x560dd2566338 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x560dd2566318 <col:23> 'String' lvalue Var 0x560dd2566120 'str' 'String'
|     | `-CompoundStmt 0x560dd25669b0 <col:64, line:819:9>
|     |   |-DeclStmt 0x560dd2566478 <line:813:13, col:23>
|     |   | `-VarDecl 0x560dd25663e0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x560dd2566458 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x560dd25665f8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x560dd25664a0 <col:13> '<bound member function type>' ->postparse 0x560dd2555798
|     |   | | `-CXXThisExpr 0x560dd2566490 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x560dd25665a0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x560dd25664f0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x560dd25664d0 <col:23> 'P' lvalue ParmVar 0x560dd2540a30 'parser' 'P'
|     |   | | |-DeclRefExpr 0x560dd2566538 <col:36> 'String' lvalue Var 0x560dd2566120 'str' 'String'
|     |   | | |-DeclRefExpr 0x560dd2566558 <col:41> 'T' lvalue Var 0x560dd25663e0 'sx' 'T'
|     |   | | `-UnaryOperator 0x560dd2566588 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x560dd2566578 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x560dd25665d8 <col:53> 'Args::Slot *' lvalue Var 0x560dd2565d78 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x560dd2566750 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x560dd2566688 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x560dd2566658 <col:17> 'bool' lvalue ->_read_status 0x560dd2436d00
|     |   | |   `-ImplicitCastExpr 0x560dd2566638 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x560dd2566628 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x560dd2566728 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x560dd25666c0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x560dd25666a0 <col:17> 'Vector<T> *' lvalue Var 0x560dd2565fe0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x560dd2566708 <col:30> 'T' lvalue Var 0x560dd25663e0 'sx' 'T'
|     |   |-BinaryOperator 0x560dd25668d0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x560dd2566768 <col:13> 'int' lvalue Var 0x560dd2565e10 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x560dd25668b8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x560dd2566898 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x560dd2566800 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x560dd25667e0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x560dd25667c8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x560dd2566788 <col:28> 'int' lvalue Var 0x560dd2565e10 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x560dd25667a8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x560dd2566880 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x560dd2566850 <col:49> 'bool' lvalue ->_read_status 0x560dd2436d00
|     |   |         `-ImplicitCastExpr 0x560dd2566830 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x560dd2566820 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x560dd2566980 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x560dd25668f0 <col:13> 'int' lvalue ParmVar 0x560dd25409b8 'flags' 'int'
|     |     `-UnaryOperator 0x560dd2566968 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x560dd2566950 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x560dd2566930 <col:23> 'const int' lvalue Var 0x560dd2524708 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x560dd2566b18 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x560dd2566a50 <col:9> 'bool' lvalue ->_read_status 0x560dd2436d00
|       | `-ImplicitCastExpr 0x560dd2566a30 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x560dd2566a20 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x560dd2566af8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x560dd2566ad8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x560dd2566ac0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x560dd2566a80 <col:25> 'int' lvalue Var 0x560dd2565e10 'read_status' 'int'
|           `-IntegerLiteral 0x560dd2566aa0 <col:40> 'int' 1
|-AccessSpecDecl 0x560dd2540de0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x560dd2540e08 prev 0x560dd2522a08 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x560dd2540f00 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x560dd2540ff0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x560dd2566b70 <col:16, line:828:9>
| |-CXXDestructorDecl 0x560dd25410e0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x560dd2566b80 <col:25, line:830:9>
| |-CXXMethodDecl 0x560dd25411e0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x560dd2541290 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x560dd2541338 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x560dd2541338
| | `-ParmVarDecl 0x560dd2541448 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x560dd2541c08 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x560dd2541c08
|   `-ParmVarDecl 0x560dd2541d18 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x560dd25414b8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x560dd2541618 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x560dd2541810 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x560dd25416c0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x560dd2541738 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x560dd2566d60 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x560dd2541ac8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x560dd2566bd0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x560dd2566b90 <col:20> 'void *' lvalue ParmVar 0x560dd25416c0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x560dd2541b30 '_slot' 'char *'
| | | `-CXXNewExpr 0x560dd2566c58 <col:32, col:45> 'char *' array Function 0x560dd20a6128 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x560dd2566c40 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x560dd2566c10 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x560dd2541738 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x560dd2541b90 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x560dd2566d20 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x560dd2566ce0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x560dd2541738 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x560dd2566de0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x560dd2541910 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x560dd25410e0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x560dd2566e68 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x560dd2566e48 <line:840:13, col:22> 'void' array Function 0x560dd20a6488 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x560dd2566e30 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x560dd2566e00 <col:22> 'char *' lvalue ->_slot 0x560dd2541b30
| |         `-CXXThisExpr 0x560dd2566df0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x560dd2541a10 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x560dd25411e0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x560dd2567058 <col:22, line:844:9>
| |   `-CallExpr 0x560dd2566fc0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x560dd2566fa8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x560dd2566f88 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x560dd21b2788 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x560dd2566ff8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x560dd2566ed8 <col:20> 'void *' lvalue ->_ptr 0x560dd2541ac8
| |     |   `-CXXThisExpr 0x560dd2566ec8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x560dd2567028 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x560dd2567010 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x560dd2566f18 <col:26> 'char *' lvalue ->_slot 0x560dd2541b30
| |     |     `-CXXThisExpr 0x560dd2566f08 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x560dd2567040 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x560dd2566f58 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x560dd2541b90
| |         `-CXXThisExpr 0x560dd2566f48 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x560dd2541ac8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x560dd2541b30 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x560dd2541b90 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x560dd2541d88 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x560dd2541d88
| | `-ParmVarDecl 0x560dd2541e98 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x560dd2541f38 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x560dd2541f38
|   `-ParmVarDecl 0x560dd2542048 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x560dd25421e8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x560dd25420b8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x560dd2542158 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x560dd2542480 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x560dd2542678 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x560dd2542548 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x560dd25427f8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x560dd2567090 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x560dd2567070 <col:20> 'T *' lvalue ParmVar 0x560dd2542548 'ptr' 'T *'
|   | `-CompoundStmt 0x560dd25670e0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x560dd2542748 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x560dd25411e0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x560dd2567290 <col:22, line:857:9>
|   |   `-CallExpr 0x560dd2567260 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x560dd25670f0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x560dd226aeb8 0x560dd22151e8
|   |     |-CXXOperatorCallExpr 0x560dd25671f0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x560dd2567180 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x560dd2477138 0x560dd2476d58 0x560dd2476988 0x560dd24765a8 0x560dd24761c8 0x560dd2475df8
|   |     | `-MemberExpr 0x560dd2567150 <col:29> 'T *' lvalue ->_ptr 0x560dd25427f8
|   |     |   `-CXXThisExpr 0x560dd2567140 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x560dd2567230 <col:35> 'T' lvalue ->_slot 0x560dd2542858
|   |       `-CXXThisExpr 0x560dd2567220 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x560dd25427f8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x560dd2542858 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x560dd25428c0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x560dd25429c0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x560dd2542a10 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd25429a0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x560dd2542980 <col:31> 'int' 48
|-FieldDecl 0x560dd2542a38 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x560dd2542a98 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x560dd2542af8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x560dd2542c30 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x560dd2554e30 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x560dd2554e90 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x560dd2554f40 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x560dd2555168 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x560dd2555070 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x560dd25552b8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x560dd2555228 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x560dd2555588 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x560dd2555378 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x560dd25553f8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x560dd25554a0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x560dd2555798 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x560dd2555650 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x560dd25556c8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x560dd2555868 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x560dd25559b8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x560dd2555920 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x560dd2555d48 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x560dd2555a78 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x560dd2555af8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x560dd2555ba0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x560dd2555c58 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x560dd2555f70 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x560dd2555e20 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x560dd2555e98 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x560dd2556288 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x560dd2556020 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x560dd25561e8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x560dd25560f8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2581c40 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd2581d58 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x560dd2581de8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x560dd2581ef8 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x560dd2581e28 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x560dd2582248 'size' 'int'
| | `-ImplicitCastExpr 0x560dd2582310 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x560dd25822d0 <col:16> 'int' lvalue ParmVar 0x560dd2581e28 's' 'int'
| `-CompoundStmt 0x560dd2582358 <col:19, line:1297:5>
|-CXXMethodDecl 0x560dd2582150 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x560dd2581fb8 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x560dd2582038 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x560dd25820b0 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x560dd25822b0 <col:73> 'const ArgContext' lvalue Var 0x560dd25672b8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x560dd2582208 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x560dd2582248 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x560dd2599ff8 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x560dd2599ff8
| `-ParmVarDecl 0x560dd259a108 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x560dd259a1a8 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x560dd259a2b8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x560dd2582248 'size' 'int'
| | `-ImplicitCastExpr 0x560dd259aab8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x560dd259aa70 <col:7> 'int' xvalue .size 0x560dd2582248
| |     `-CXXStaticCastExpr 0x560dd259aa40 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x560dd259aa10 <col:7> 'AnnoArg' lvalue ParmVar 0x560dd259a2b8 '' 'AnnoArg &&'
| `-CompoundStmt 0x560dd259ab00 <col:7>
`-CXXDestructorDecl 0x560dd259a358 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd2273be0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd2273cf8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x560dd2273d88 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x560dd2273e58 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x560dd2273f40 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd2274158 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560dd2274000 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2274308 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x560dd2274210 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x560dd2274450 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x560dd22743c0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x560dd2274598 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560dd2274508 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd22746e0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x560dd2274650 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd22747a8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x560dd22748f0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x560dd2274860 <col:28> col:31 'int'
|-CXXMethodDecl 0x560dd22749b8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x560dd2274b00 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x560dd2274a70 <col:28> col:31 'int'
|-CXXMethodDecl 0x560dd2274c78 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x560dd2274bb8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2274dc0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x560dd2274d30 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2274e88 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x560dd2275048 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560dd2274f38 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560dd2274fb0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2275298 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560dd2275108 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560dd2275180 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560dd2275348 <col:86> "" ""
|-CXXMethodDecl 0x560dd22755b8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x560dd2275428 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x560dd22754a0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2275768 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x560dd2275678 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x560dd2275918 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x560dd2275820 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x560dd2275be8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x560dd22759d0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x560dd2275a48 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560dd2275ac0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2275ec8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x560dd2275cb0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x560dd2275d28 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560dd2275da0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560dd2275f80 <col:115> "" ""
|-AccessSpecDecl 0x560dd2275ff0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x560dd2276028 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2277540 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x560dd2277540
| `-ParmVarDecl 0x560dd2277648 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x560dd22776e8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x560dd22776e8
| `-ParmVarDecl 0x560dd22777f8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x560dd22ace28 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560dd24a00f0 <col:7>
|-CXXConstructorDecl 0x560dd22acf00 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x560dd22acf00
| `-ParmVarDecl 0x560dd22ad018 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x560dd22ad088 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x560dd22ad088
| `-ParmVarDecl 0x560dd22ad198 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x560dd24a5500 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd248ec58 prev 0x560dd2481ca0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd248ed50 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x560dd248ee40 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x560dd248ef68 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x560dd248f0e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x560dd248f268 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x560dd248f3e8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x560dd24a0258 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x560dd24a0ac8 <col:11>
|-CXXDestructorDecl 0x560dd24a0330 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x560dd24a0468 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x560dd24a0468
| `-ParmVarDecl 0x560dd24a0578 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x560dd24a0618 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560dd24a0618
| `-ParmVarDecl 0x560dd24a0728 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x560dd24a5ef8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x560dd24a6008 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x560dd24a6288 <col:11>
|   `-ReturnStmt 0x560dd24a6278 <col:11>
|     `-UnaryOperator 0x560dd24a6260 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x560dd24a6250 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x560dd24a6078 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560dd24a6078
  `-ParmVarDecl 0x560dd24a6188 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd248f450 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x560dd248f568 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x560dd248f608 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x560dd248f670 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x560dd248f6d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x560dd248f740 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x560dd248f7a0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x560dd248f860 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x560dd248f8c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x560dd248f920 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x560dd24a0168 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x560dd248f608 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x560dd24a0ad8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x560dd24a0b30 <col:12>
|-CXXConstructorDecl 0x560dd24a0798 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x560dd24a0798
| `-ParmVarDecl 0x560dd24a08a8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x560dd24a0948 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x560dd24a0948
| `-ParmVarDecl 0x560dd24a0a58 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x560dd24a55e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x560dd247b3b0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x560dd247b4c8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x560dd247b558 <col:16, col:22> col:16 public
|-EnumDecl 0x560dd247b580 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x560dd247b680 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x560dd247b760 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd247b660 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x560dd247b640 <col:21> 'int' 28
| `-EnumConstantDecl 0x560dd247b710 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x560dd247b778 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd247b6f0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x560dd247b6d0 <col:22> 'int' 64
|-CXXMethodDecl 0x560dd247bab8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x560dd247b7a0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560dd247b820 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x560dd247b898 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560dd247b910 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560dd247bb78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x560dd247bd78 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x560dd247bbf0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x560dd247bc68 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560dd247be28 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x560dd247bf88 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x560dd247be98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560dd247c030 <col:72> warn_unused_result ""
|-TypedefDecl 0x560dd247c390 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x560dd247c320 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x560dd247c2c0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x560dd247c280 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x560dd1f532d0 'void'
|       |-PointerType 0x560dd21fc480 'unsigned char *'
|       | `-BuiltinType 0x560dd1f533d0 'unsigned char'
|       |-TypedefType 0x560dd1ff8170 'size_t' sugar
|       | |-Typedef 0x560dd1fc3b20 'size_t'
|       | `-BuiltinType 0x560dd1f53430 'unsigned long'
|       `-PointerType 0x560dd1f53ad0 'void *'
|         `-BuiltinType 0x560dd1f532d0 'void'
|-CXXMethodDecl 0x560dd247c808 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x560dd247c400 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x560dd247c478 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560dd247c510 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x560dd247c590 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x560dd2499100 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x560dd24990e8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x560dd24990b0 <col:58> 'int' 0
| |-ParmVarDecl 0x560dd247c610 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x560dd2499128 <col:76> 'int' 0
| |-ParmVarDecl 0x560dd247c690 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x560dd2499148 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x560dd247c8d8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x560dd247c958 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x560dd247ca18 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x560dd247cab8 <col:20>
| `-OptimizeNoneAttr 0x560dd247cb10 <col:30>
|-CXXMethodDecl 0x560dd247cb88 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x560dd247cc28 <col:20>
| `-OptimizeNoneAttr 0x560dd247cc80 <col:30>
|-CXXMethodDecl 0x560dd247ccf8 <line:76:5, col:55> col:13 used clone 'Packet *()'
| `-WarnUnusedResultAttr 0x560dd247cd98 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x560dd247ce48 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x560dd247cee8 <col:20>
| |-OptimizeNoneAttr 0x560dd247cf40 <col:30>
| `-WarnUnusedResultAttr 0x560dd247cf68 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x560dd247cfc0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x560dd247d060 <col:20>
| `-OptimizeNoneAttr 0x560dd247d0b8 <col:30>
|-CXXMethodDecl 0x560dd247d108 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x560dd247d1a8 <col:20>
| `-OptimizeNoneAttr 0x560dd247d200 <col:30>
|-CXXMethodDecl 0x560dd247d248 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x560dd247d2e8 <col:20>
| `-OptimizeNoneAttr 0x560dd247d340 <col:30>
|-CXXMethodDecl 0x560dd247d388 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd247d448 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd247d510 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x560dd247d5d8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x560dd247d698 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd247d7b8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x560dd2499210 <col:54, line:99:5>
|   `-ReturnStmt 0x560dd2499200 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x560dd24991e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x560dd24991b8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x560dd248fc58
|         `-CXXThisExpr 0x560dd24991a8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x560dd247d958 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x560dd247d868 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x560dd24992c0 <col:67, line:103:5>
|   `-BinaryOperator 0x560dd24992a0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x560dd2499238 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x560dd248fc58
|     | `-CXXThisExpr 0x560dd2499228 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x560dd2499288 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x560dd2499268 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x560dd247d868 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x560dd247da50 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x560dd2499340 <col:33, line:107:5>
|   `-ReturnStmt 0x560dd2499330 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x560dd2499318 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x560dd24992e8 <col:16> 'void *' lvalue ->_destructor_argument 0x560dd248fcc0
|         `-CXXThisExpr 0x560dd24992d8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x560dd247db10 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x560dd2499970 <col:25, line:113:5>
|   |-ParenExpr 0x560dd24996b8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x560dd2499688 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x560dd24993f8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x560dd24993d0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x560dd2499398 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x560dd2499368 <col:24> '<bound member function type>' ->shared 0x560dd247cb88
|   |   |       `-ImplicitCastExpr 0x560dd24993b8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x560dd2499358 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x560dd2499458 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd2499438 <col:42> 'int' 0
|   |   `-CallExpr 0x560dd24995e8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x560dd24995d0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd24995b0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd2499628 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd24994c8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x560dd2499640 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd24994f0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd2499658 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd2499528 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x560dd2499670 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd2499598 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd2499580 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd2499548 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x560dd24998b8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x560dd24996e8 <col:2> 'unsigned char *' lvalue ->_head 0x560dd248fa60
|   | | `-CXXThisExpr 0x560dd24996d8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x560dd24998a0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x560dd2499880 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x560dd2499728 <col:10> 'unsigned char *' lvalue ->_data 0x560dd248fac8
|   |     | `-CXXThisExpr 0x560dd2499718 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x560dd2499868 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x560dd2499848 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x560dd2499768 <col:18> 'unsigned char *' lvalue ->_tail 0x560dd248fb30
|   |         | `-CXXThisExpr 0x560dd2499758 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x560dd2499830 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x560dd2499810 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x560dd24997a8 <col:26> 'unsigned char *' lvalue ->_end 0x560dd248fb98
|   |             | `-CXXThisExpr 0x560dd2499798 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x560dd24997f8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x560dd24997d8 <col:33> 'int' 0
|   `-BinaryOperator 0x560dd2499950 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x560dd24998e8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x560dd248fc58
|     | `-CXXThisExpr 0x560dd24998d8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x560dd2499938 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x560dd2499918 <col:16> 'int' 0
|-CXXMethodDecl 0x560dd247dc50 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x560dd247dbc0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd247dcf8 <col:20>
| |-OptimizeNoneAttr 0x560dd247dd50 <col:30>
| `-WarnUnusedResultAttr 0x560dd247dd78 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x560dd247de48 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x560dd247ddb8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd247def0 <col:20>
| |-OptimizeNoneAttr 0x560dd247df48 <col:30>
| `-WarnUnusedResultAttr 0x560dd247df70 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x560dd247e0a8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x560dd247dfb0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560dd247e150 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x560dd247e250 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x560dd247e1c0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd247e2f8 <col:20>
| `-OptimizeNoneAttr 0x560dd247e350 <col:30>
|-CXXMethodDecl 0x560dd247e418 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x560dd247e388 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560dd247e4c0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x560dd247e5c0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x560dd247e530 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x560dd247e668 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x560dd247e768 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x560dd247e6d8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd247e810 <col:20>
| `-OptimizeNoneAttr 0x560dd247e868 <col:30>
|-CXXMethodDecl 0x560dd247e9f8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x560dd247e8a8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x560dd247e920 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x560dd2499168 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x560dd247eaa8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x560dd247eca8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x560dd247eb20 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x560dd247eb98 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd247eeb8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x560dd247ed68 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560dd247ede0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd247f0c8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x560dd247ef78 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x560dd247eff8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x560dd2499178 <col:39> 'int' 0
|-CXXMethodDecl 0x560dd247f198 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x560dd247f260 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x560dd247f328 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x560dd247f3e8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd247f4b0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x560dd247f5f8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x560dd247f568 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x560dd247f7c8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x560dd247f6b8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x560dd247f730 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd247f898 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x560dd247f958 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x560dd247f9f8 <col:20>
| `-OptimizeNoneAttr 0x560dd247fa50 <col:30>
|-CXXMethodDecl 0x560dd247faa0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x560dd247fb40 <col:20>
| `-OptimizeNoneAttr 0x560dd247fb98 <col:30>
|-CXXMethodDecl 0x560dd247fbe8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x560dd247fca8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd247fd70 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x560dd247fe10 <col:20>
| `-OptimizeNoneAttr 0x560dd247fe68 <col:30>
|-CXXMethodDecl 0x560dd247ffb8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x560dd247fea8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x560dd247ff20 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2480108 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x560dd2480078 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd24801e0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x560dd24802a0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x560dd2480340 <col:20>
| `-OptimizeNoneAttr 0x560dd2480398 <col:30>
|-CXXMethodDecl 0x560dd24803e8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x560dd2480488 <col:20>
| `-OptimizeNoneAttr 0x560dd24804e0 <col:30>
|-CXXMethodDecl 0x560dd2480530 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x560dd24805f8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x560dd2480698 <col:20>
| `-OptimizeNoneAttr 0x560dd24806f0 <col:30>
|-CXXMethodDecl 0x560dd2480738 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x560dd2480858 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x560dd24809c8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x560dd2480908 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x560dd2480ab8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x560dd2480b58 <col:20>
| `-OptimizeNoneAttr 0x560dd2480bb0 <col:30>
|-CXXMethodDecl 0x560dd2480c00 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x560dd2480cc0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x560dd2480ef8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x560dd2480d70 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x560dd2480de8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd2480fa8 <col:20>
| `-OptimizeNoneAttr 0x560dd2481000 <col:30>
|-CXXMethodDecl 0x560dd24810a8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x560dd2481148 <col:20>
| `-OptimizeNoneAttr 0x560dd24811a0 <col:30>
|-CXXMethodDecl 0x560dd24811f0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x560dd2481290 <col:20>
| `-OptimizeNoneAttr 0x560dd24812e8 <col:30>
|-CXXMethodDecl 0x560dd2481330 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x560dd24813d0 <col:20>
| `-OptimizeNoneAttr 0x560dd2481428 <col:30>
|-CXXMethodDecl 0x560dd2481528 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x560dd2481460 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x560dd24815d0 <col:20>
| `-OptimizeNoneAttr 0x560dd2481628 <col:30>
|-CXXMethodDecl 0x560dd24817e8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x560dd2481660 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x560dd24816d8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd2481898 <col:20>
| `-OptimizeNoneAttr 0x560dd24818f0 <col:30>
|-CXXMethodDecl 0x560dd2481998 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x560dd2481ab8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x560dd2481bd8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x560dd2481c78 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x560dd2481ca0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x560dd2481dc8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x560dd2481e68 <col:20>
| `-OptimizeNoneAttr 0x560dd2481ec0 <col:30>
|-CXXMethodDecl 0x560dd2481f68 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x560dd2482008 <col:20>
| `-OptimizeNoneAttr 0x560dd2482060 <col:30>
|-AccessSpecDecl 0x560dd2482088 <line:344:3, col:9> col:3 public
|-EnumDecl 0x560dd24820b0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x560dd24821b0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x560dd2482200 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd2482190 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x560dd2482170 <col:14> 'int' 48
|-CXXMethodDecl 0x560dd2482268 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x560dd2482308 <col:20>
| `-OptimizeNoneAttr 0x560dd2482360 <col:30>
|-CXXMethodDecl 0x560dd24823d8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x560dd2482478 <col:20>
| `-OptimizeNoneAttr 0x560dd24824d0 <col:30>
|-CXXMethodDecl 0x560dd2482598 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x560dd2482508 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x560dd2482738 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x560dd24828d8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x560dd24827e8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x560dd2482980 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x560dd2482a80 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560dd2482e30 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2482a60 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x560dd2482a40 <col:9> 'int' 0
| |-EnumConstantDecl 0x560dd2482b10 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560dd2482e48 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2482af0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x560dd2482ad0 <col:14> 'int' 1
| |-EnumConstantDecl 0x560dd2482ba0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560dd2482e60 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2482b80 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x560dd2482b60 <col:14> 'int' 2
| |-EnumConstantDecl 0x560dd2482c30 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560dd2482e78 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2482c10 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x560dd2482bf0 <col:14> 'int' 3
| |-EnumConstantDecl 0x560dd2482cc0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560dd2482e90 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2482ca0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x560dd2482c80 <col:13> 'int' 4
| |-EnumConstantDecl 0x560dd2482d50 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x560dd2482ea8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2482d30 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x560dd2482d10 <col:13> 'int' 5
| `-EnumConstantDecl 0x560dd2482de0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x560dd2482ec0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd2482dc0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x560dd2482da0 <col:14> 'int' 6
|-CXXMethodDecl 0x560dd2482f28 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x560dd2482fc8 <col:20>
| `-OptimizeNoneAttr 0x560dd2483020 <col:30>
|-CXXMethodDecl 0x560dd2483118 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x560dd2483058 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x560dd24831c0 <col:20>
| `-OptimizeNoneAttr 0x560dd2483218 <col:30>
|-CXXMethodDecl 0x560dd2483288 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x560dd24833b0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x560dd2483528 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x560dd2483460 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x560dd24835f0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x560dd24836b8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x560dd24837f8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x560dd2483768 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x560dd24838a0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x560dd24839a0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560dd2483ba0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2483980 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x560dd2483960 <col:23> 'int' 0
| |-EnumConstantDecl 0x560dd2483a30 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560dd2483bb8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2483a10 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x560dd24839f0 <col:45> 'int' 4
| |-EnumConstantDecl 0x560dd2483ac0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x560dd2483bd0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2483aa0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x560dd2483a80 <col:24> 'int' 0
| `-EnumConstantDecl 0x560dd2483b50 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x560dd2483be8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd2483b30 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x560dd2483b10 <col:47> 'int' 16
|-CXXMethodDecl 0x560dd2483c48 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x560dd2483db8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x560dd2483cf8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x560dd2483e60 <col:20>
| `-OptimizeNoneAttr 0x560dd2483eb8 <col:30>
|-CXXMethodDecl 0x560dd2483f08 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x560dd2499a90 <col:18, col:36>
|   `-ReturnStmt 0x560dd2499a80 <col:20, col:33>
|     `-ImplicitCastExpr 0x560dd2499a68 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x560dd2499a48 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x560dd2499a18 <col:27> '<bound member function type>' ->xanno 0x560dd2481f68
|           `-CXXThisExpr 0x560dd2499a08 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x560dd2484000 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x560dd2499ba0 <col:30, col:48>
|   `-ReturnStmt 0x560dd2499b90 <col:32, col:45>
|     `-ImplicitCastExpr 0x560dd2499b78 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x560dd2499b58 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x560dd2499b28 <col:39> '<bound member function type>' ->xanno 0x560dd2481dc8
|           `-CXXThisExpr 0x560dd2499b18 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x560dd24840e8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x560dd2499d38 <col:24, col:50>
|   `-ReturnStmt 0x560dd2499d28 <col:26, col:47>
|     `-UnaryOperator 0x560dd2499d10 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560dd2499cf0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x560dd2499cd8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560dd2499c88 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x560dd248ef68
|         |   `-CXXMemberCallExpr 0x560dd2499c68 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x560dd2499c38 <col:34> '<bound member function type>' ->xanno 0x560dd2481f68
|         |       `-CXXThisExpr 0x560dd2499c28 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x560dd2499cb8 <col:46> 'int' 0
|-CXXMethodDecl 0x560dd24841f0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x560dd2499f08 <col:36, col:62>
|   `-ReturnStmt 0x560dd2499ef8 <col:38, col:59>
|     `-UnaryOperator 0x560dd2499ee0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560dd2499ec0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x560dd2499ea8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560dd2499e20 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x560dd248ef68
|         |   `-CXXMemberCallExpr 0x560dd2499e00 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560dd2499dd0 <col:46> '<bound member function type>' ->xanno 0x560dd2481dc8
|         |       `-CXXThisExpr 0x560dd2499dc0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x560dd2499e50 <col:58> 'int' 0
|-CXXMethodDecl 0x560dd2484308 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x560dd249a0a0 <col:26, col:53>
|   `-ReturnStmt 0x560dd249a090 <col:28, col:50>
|     `-UnaryOperator 0x560dd249a078 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560dd249a058 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x560dd249a040 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560dd2499ff0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x560dd248f268
|         |   `-CXXMemberCallExpr 0x560dd2499fd0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x560dd2499fa0 <col:36> '<bound member function type>' ->xanno 0x560dd2481f68
|         |       `-CXXThisExpr 0x560dd2499f90 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x560dd249a020 <col:49> 'int' 0
|-CXXMethodDecl 0x560dd2484428 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x560dd249a278 <col:38, col:65>
|   `-ReturnStmt 0x560dd249a268 <col:40, col:62>
|     `-UnaryOperator 0x560dd249a250 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x560dd249a230 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x560dd249a218 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560dd249a188 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x560dd248f268
|         |   `-CXXMemberCallExpr 0x560dd249a168 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560dd249a138 <col:48> '<bound member function type>' ->xanno 0x560dd2481dc8
|         |       `-CXXThisExpr 0x560dd249a128 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x560dd249a1b8 <col:61> 'int' 0
|-CXXMethodDecl 0x560dd24845d8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x560dd24844e0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x560dd249a948 <col:34, line:463:5>
|   |-ParenExpr 0x560dd249a790 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x560dd249a760 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249a3c8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249a398 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249a2e8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249a2d0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249a290 <col:23> 'int' lvalue ParmVar 0x560dd24844e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249a2b0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249a378 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249a348 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249a308 <col:33> 'int' lvalue ParmVar 0x560dd24844e0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x560dd249a360 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x560dd249a328 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x560dd249a428 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249a408 <col:56> 'int' 0
|   |   `-CallExpr 0x560dd249a6c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x560dd249a6a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249a688 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249a700 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249a518 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x560dd249a718 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249a548 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249a730 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249a580 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x560dd249a748 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249a670 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249a658 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249a618 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x560dd249a938 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x560dd249a920 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x560dd249a900 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x560dd249a8d0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x560dd249a880 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x560dd248ef68
|         |   `-CXXMemberCallExpr 0x560dd249a860 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x560dd249a830 <col:9> '<bound member function type>' ->xanno 0x560dd2481dc8
|         |       `-CXXThisExpr 0x560dd249a820 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x560dd249a8e8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x560dd249a8b0 <col:21> 'int' lvalue ParmVar 0x560dd24844e0 'i' 'int'
|-CXXMethodDecl 0x560dd2484828 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x560dd2484698 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x560dd2484710 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x560dd249afd8 <col:40, line:472:5>
|   |-ParenExpr 0x560dd249adf0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x560dd249adc0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249aaa0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249aa70 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249a9c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249a9a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249a968 <col:23> 'int' lvalue ParmVar 0x560dd2484698 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249a988 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249aa50 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249aa20 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249a9e0 <col:33> 'int' lvalue ParmVar 0x560dd2484698 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x560dd249aa38 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x560dd249aa00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x560dd249ab00 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249aae0 <col:56> 'int' 0
|   |   `-CallExpr 0x560dd249ad20 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x560dd249ad08 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249ace8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249ad60 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249ab70 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x560dd249ad78 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249aba0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249ad90 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249abd8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x560dd249ada8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249acd0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249acb8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249ac78 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x560dd249afb8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x560dd249af60 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x560dd249af30 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x560dd249aee0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x560dd248ef68
|     | |   `-CXXMemberCallExpr 0x560dd249aec0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x560dd249ae90 <col:2> '<bound member function type>' ->xanno 0x560dd2481f68
|     | |       `-CXXThisExpr 0x560dd249ae80 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x560dd249af48 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x560dd249af10 <col:14> 'int' lvalue ParmVar 0x560dd2484698 'i' 'int'
|     `-ImplicitCastExpr 0x560dd249afa0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x560dd249af80 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x560dd2484710 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x560dd24849e8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x560dd24848f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560dd249b758 <col:36, line:485:5>
|   |-ParenExpr 0x560dd249b4c0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249b490 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249b170 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249b140 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249b050 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249b038 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249aff8 <col:23> 'int' lvalue ParmVar 0x560dd24848f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249b018 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249b120 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249b108 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249b070 <col:33> 'int' lvalue ParmVar 0x560dd24848f0 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249b0e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249b0d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249b090 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249b0b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560dd249b1d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249b1b0 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249b3f0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249b3d8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249b3b8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249b430 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249b240 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560dd249b448 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249b278 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249b460 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249b2b0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x560dd249b478 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249b3a0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249b388 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249b348 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x560dd249b748 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x560dd249b730 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x560dd249b718 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560dd249b6e8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x560dd249b688 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x560dd249b658 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560dd249b5d0 <col:61, col:70> 'char const[48]' lvalue ->c 0x560dd248ee40
|             |   `-CXXMemberCallExpr 0x560dd249b5b0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560dd249b580 <col:61> '<bound member function type>' ->xanno 0x560dd2481dc8
|             |       `-CXXThisExpr 0x560dd249b570 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560dd249b670 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560dd249b600 <col:74> 'int' lvalue ParmVar 0x560dd24848f0 'i' 'int'
|-CXXMethodDecl 0x560dd2484c38 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x560dd2484aa8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560dd2484b20 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x560dd249bea8 <col:42, line:500:5>
|   |-ParenExpr 0x560dd249bc40 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249bc10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249b8f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249b8c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249b7d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249b7b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249b778 <col:23> 'int' lvalue ParmVar 0x560dd2484aa8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249b798 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249b8a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249b888 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249b7f0 <col:33> 'int' lvalue ParmVar 0x560dd2484aa8 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249b868 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249b850 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249b810 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249b830 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560dd249b950 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249b930 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249bb70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249bb58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249bb38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249bbb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249b9c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560dd249bbc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249b9f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249bbe0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249ba30 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x560dd249bbf8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249bb20 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249bb08 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249bac8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x560dd249be88 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x560dd249be38 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560dd249be08 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x560dd249bdb0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560dd249bd80 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560dd249bd30 <col:48, col:57> 'char [48]' lvalue ->c 0x560dd248ee40
|     |     |   `-CXXMemberCallExpr 0x560dd249bd10 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560dd249bce0 <col:48> '<bound member function type>' ->xanno 0x560dd2481f68
|     |     |       `-CXXThisExpr 0x560dd249bcd0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560dd249bd98 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560dd249bd60 <col:61> 'int' lvalue ParmVar 0x560dd2484aa8 'i' 'int'
|     `-ImplicitCastExpr 0x560dd249be70 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x560dd249be50 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x560dd2484b20 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x560dd2484df8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x560dd2484d00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x560dd249c608 <col:35, line:513:5>
|   |-ParenExpr 0x560dd249c318 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249c2e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249c040 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249c010 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249bf20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249bf08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249bec8 <col:23> 'int' lvalue ParmVar 0x560dd2484d00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249bee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249bff0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249bfd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249bf40 <col:33> 'int' lvalue ParmVar 0x560dd2484d00 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249bfb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249bfa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249bf60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249bf80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560dd249c0a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249c080 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249c248 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249c230 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249c210 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249c288 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249c110 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560dd249c2a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249c148 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249c2b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249c180 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x560dd249c2d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249c1f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249c1e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249c1a0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x560dd249c5f8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x560dd249c5e0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x560dd249c5c8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560dd249c598 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x560dd249c510 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x560dd249c4e0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560dd249c490 <col:60, col:69> 'char const[48]' lvalue ->c 0x560dd248ee40
|             |   `-CXXMemberCallExpr 0x560dd249c470 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560dd249c440 <col:60> '<bound member function type>' ->xanno 0x560dd2481dc8
|             |       `-CXXThisExpr 0x560dd249c430 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560dd249c4f8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560dd249c4c0 <col:73> 'int' lvalue ParmVar 0x560dd2484d00 'i' 'int'
|-CXXMethodDecl 0x560dd2485048 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x560dd2484eb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560dd2484f30 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x560dd249cd28 <col:41, line:528:5>
|   |-ParenExpr 0x560dd249cab0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249ca80 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249c7a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249c770 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249c680 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249c668 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249c628 <col:23> 'int' lvalue ParmVar 0x560dd2484eb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249c648 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249c750 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249c738 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249c6a0 <col:33> 'int' lvalue ParmVar 0x560dd2484eb8 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249c718 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249c700 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249c6c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249c6e0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x560dd249c800 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249c7e0 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249c9e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249c9c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249c9a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249ca20 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249c870 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x560dd249ca38 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249c8a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249ca50 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249c8e0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x560dd249ca68 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249c990 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249c978 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249c938 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x560dd249cd08 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x560dd249ccb8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560dd249cc88 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x560dd249cc30 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560dd249cbf0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560dd249cba0 <col:47, col:56> 'char [48]' lvalue ->c 0x560dd248ee40
|     |     |   `-CXXMemberCallExpr 0x560dd249cb80 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560dd249cb50 <col:47> '<bound member function type>' ->xanno 0x560dd2481f68
|     |     |       `-CXXThisExpr 0x560dd249cb40 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560dd249cc08 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560dd249cbd0 <col:60> 'int' lvalue ParmVar 0x560dd2484eb8 'i' 'int'
|     `-ImplicitCastExpr 0x560dd249ccf0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x560dd249ccd0 <col:65> 'int16_t':'short' lvalue ParmVar 0x560dd2484f30 'x' 'int16_t':'short'
|-CXXMethodDecl 0x560dd2485208 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x560dd2485110 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560dd249d3f8 <col:36, line:541:5>
|   |-ParenExpr 0x560dd249d198 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249d168 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249cec0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249ce90 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249cda0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249cd88 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249cd48 <col:23> 'int' lvalue ParmVar 0x560dd2485110 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249cd68 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249ce70 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249ce58 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249cdc0 <col:33> 'int' lvalue ParmVar 0x560dd2485110 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249ce38 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249ce20 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249cde0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249ce00 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x560dd249cf20 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249cf00 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249d0c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249d0b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249d090 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249d108 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249cf90 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x560dd249d120 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249cfc8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249d138 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249d000 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x560dd249d150 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249d078 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249d060 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249d020 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x560dd249d3e8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x560dd249d3d0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x560dd249d3b8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560dd249d388 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x560dd249d330 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x560dd249d300 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560dd249d2b0 <col:61, col:70> 'char const[48]' lvalue ->c 0x560dd248ee40
|             |   `-CXXMemberCallExpr 0x560dd249d290 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560dd249d260 <col:61> '<bound member function type>' ->xanno 0x560dd2481dc8
|             |       `-CXXThisExpr 0x560dd249d250 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560dd249d318 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560dd249d2e0 <col:74> 'int' lvalue ParmVar 0x560dd2485110 'i' 'int'
|-CXXMethodDecl 0x560dd24853d8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x560dd24852c8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x560dd2485340 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x560dd2485488 <col:20>
| `-OptimizeNoneAttr 0x560dd24854e0 <col:30>
|-CXXMethodDecl 0x560dd2485618 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x560dd2485520 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x560dd249dac8 <col:35, line:562:5>
|   |-ParenExpr 0x560dd249d868 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249d838 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249d590 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249d560 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249d470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249d458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249d418 <col:23> 'int' lvalue ParmVar 0x560dd2485520 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249d438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249d540 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249d528 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249d490 <col:33> 'int' lvalue ParmVar 0x560dd2485520 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249d508 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249d4f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249d4b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249d4d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x560dd249d5f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249d5d0 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249d798 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249d780 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249d760 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249d7d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249d660 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x560dd249d7f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249d698 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249d808 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249d6d0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x560dd249d820 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249d748 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249d730 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249d6f0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x560dd249dab8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x560dd249daa0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x560dd249da88 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560dd249da58 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x560dd249da00 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x560dd249d9d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560dd249d980 <col:60, col:69> 'char const[48]' lvalue ->c 0x560dd248ee40
|             |   `-CXXMemberCallExpr 0x560dd249d960 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560dd249d930 <col:60> '<bound member function type>' ->xanno 0x560dd2481dc8
|             |       `-CXXThisExpr 0x560dd249d920 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560dd249d9e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560dd249d9b0 <col:73> 'int' lvalue ParmVar 0x560dd2485520 'i' 'int'
|-CXXMethodDecl 0x560dd2485828 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x560dd24856d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560dd2485750 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x560dd249e1a8 <col:41, line:577:5>
|   |-ParenExpr 0x560dd249df38 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249df08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249dc60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249dc30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249db40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249db28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249dae8 <col:23> 'int' lvalue ParmVar 0x560dd24856d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249db08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249dc10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249dbf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249db60 <col:33> 'int' lvalue ParmVar 0x560dd24856d8 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249dbd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249dbc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249db80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249dba0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x560dd249dcc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249dca0 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249de68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249de50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249de30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249dea8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249dd30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x560dd249dec0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249dd68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249ded8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249dda0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x560dd249def0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249de18 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249de00 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249ddc0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x560dd249e188 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x560dd249e138 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560dd249e108 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x560dd249e0a8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560dd249e078 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560dd249e028 <col:47, col:56> 'char [48]' lvalue ->c 0x560dd248ee40
|     |     |   `-CXXMemberCallExpr 0x560dd249e008 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560dd249dfd8 <col:47> '<bound member function type>' ->xanno 0x560dd2481f68
|     |     |       `-CXXThisExpr 0x560dd249dfc8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560dd249e090 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560dd249e058 <col:60> 'int' lvalue ParmVar 0x560dd24856d8 'i' 'int'
|     `-ImplicitCastExpr 0x560dd249e170 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x560dd249e150 <col:65> 'int32_t':'int' lvalue ParmVar 0x560dd2485750 'x' 'int32_t':'int'
|-CXXMethodDecl 0x560dd24859e8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x560dd24858f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x560dd249e8d8 <col:36, line:591:5>
|   |-ParenExpr 0x560dd249e618 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249e5e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249e340 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249e310 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249e220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249e208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249e1c8 <col:23> 'int' lvalue ParmVar 0x560dd24858f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249e1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249e2f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249e2d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249e240 <col:33> 'int' lvalue ParmVar 0x560dd24858f0 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249e2b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249e2a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249e260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249e280 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x560dd249e3a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249e380 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249e548 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249e530 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249e510 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249e588 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249e410 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x560dd249e5a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249e448 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249e5b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249e480 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x560dd249e5d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249e4f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249e4e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249e4a0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x560dd249e8c8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x560dd249e8b0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x560dd249e898 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560dd249e868 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x560dd249e7e0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x560dd249e7b0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560dd249e760 <col:61, col:70> 'char const[48]' lvalue ->c 0x560dd248ee40
|             |   `-CXXMemberCallExpr 0x560dd249e740 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560dd249e710 <col:61> '<bound member function type>' ->xanno 0x560dd2481dc8
|             |       `-CXXThisExpr 0x560dd249e700 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560dd249e7c8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560dd249e790 <col:74> 'int' lvalue ParmVar 0x560dd24858f0 'i' 'int'
|-CXXMethodDecl 0x560dd2485c38 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x560dd2485aa8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560dd2485b20 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x560dd249efb8 <col:42, line:606:5>
|   |-ParenExpr 0x560dd249ed48 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x560dd249ed18 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249ea70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249ea40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249e950 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249e938 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249e8f8 <col:23> 'int' lvalue ParmVar 0x560dd2485aa8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249e918 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249ea20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x560dd249ea08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249e970 <col:33> 'int' lvalue ParmVar 0x560dd2485aa8 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249e9e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249e9d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249e990 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x560dd249e9b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x560dd249ead0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249eab0 <col:60> 'int' 0
|   |   `-CallExpr 0x560dd249ec78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x560dd249ec60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249ec40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249ecb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249eb40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x560dd249ecd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249eb78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249ece8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249ebb0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x560dd249ed00 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249ec28 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249ec10 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249ebd0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x560dd249ef98 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x560dd249ef48 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560dd249ef18 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x560dd249eeb8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560dd249ee88 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560dd249ee38 <col:48, col:57> 'char [48]' lvalue ->c 0x560dd248ee40
|     |     |   `-CXXMemberCallExpr 0x560dd249ee18 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560dd249ede8 <col:48> '<bound member function type>' ->xanno 0x560dd2481f68
|     |     |       `-CXXThisExpr 0x560dd249edd8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560dd249eea0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560dd249ee68 <col:61> 'int' lvalue ParmVar 0x560dd2485aa8 'i' 'int'
|     `-ImplicitCastExpr 0x560dd249ef80 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x560dd249ef60 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x560dd2485b20 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x560dd2485dd0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x560dd2485d00 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x560dd249f828 <col:33, line:620:5>
|   |-ParenExpr 0x560dd249f5a0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x560dd249f570 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249f1c0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249f190 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249f030 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249f018 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249efd8 <col:23> 'int' lvalue ParmVar 0x560dd2485d00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249eff8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249f170 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x560dd249f158 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249f050 <col:33> 'int' lvalue ParmVar 0x560dd2485d00 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249f138 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249f120 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249f070 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x560dd249f0f8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x560dd249f0e0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x560dd249f0a8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x560dd249f220 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249f200 <col:79> 'int' 0
|   |   `-CallExpr 0x560dd249f4d0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x560dd249f4b8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249f498 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249f510 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249f308 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x560dd249f528 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249f350 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249f540 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249f388 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x560dd249f558 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249f480 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249f468 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249f428 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x560dd249f818 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x560dd249f800 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x560dd249f7e8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x560dd249f7b8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x560dd249f730 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x560dd249f700 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x560dd249f6b0 <col:67, col:76> 'char const[48]' lvalue ->c 0x560dd248ee40
|             |   `-CXXMemberCallExpr 0x560dd249f690 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x560dd249f660 <col:67> '<bound member function type>' ->xanno 0x560dd2481dc8
|             |       `-CXXThisExpr 0x560dd249f650 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x560dd249f718 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x560dd249f6e0 <col:80> 'int' lvalue ParmVar 0x560dd2485d00 'i' 'int'
|-CXXMethodDecl 0x560dd2485fe8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x560dd2485e90 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x560dd2485f10 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x560dd24a0050 <col:45, line:635:5>
|   |-ParenExpr 0x560dd249fd98 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x560dd249fd68 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x560dd249fa30 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x560dd249fa00 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x560dd249f8a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x560dd249f888 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x560dd249f848 <col:23> 'int' lvalue ParmVar 0x560dd2485e90 'i' 'int'
|   |   |   | `-IntegerLiteral 0x560dd249f868 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x560dd249f9e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x560dd249f9c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x560dd249f8c0 <col:33> 'int' lvalue ParmVar 0x560dd2485e90 'i' 'int'
|   |   |     `-BinaryOperator 0x560dd249f9a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x560dd249f990 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x560dd249f8e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x560dd24821b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x560dd249f968 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x560dd249f950 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x560dd249f918 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x560dd249fa90 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x560dd249fa70 <col:79> 'int' 0
|   |   `-CallExpr 0x560dd249fcc8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x560dd249fcb0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x560dd249fc90 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x560dd1feef80 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x560dd249fd08 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249fb00 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x560dd249fd20 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x560dd249fb48 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x560dd249fd38 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x560dd249fb80 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x560dd249fd50 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x560dd249fc78 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x560dd249fc60 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x560dd249fc18 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x560dd24a0030 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x560dd249ff98 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x560dd249ff68 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x560dd249ff08 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x560dd249fed8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x560dd249fe88 <col:54, col:63> 'char [48]' lvalue ->c 0x560dd248ee40
|     |     |   `-CXXMemberCallExpr 0x560dd249fe68 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x560dd249fe38 <col:54> '<bound member function type>' ->xanno 0x560dd2481f68
|     |     |       `-CXXThisExpr 0x560dd249fe28 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x560dd249fef0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x560dd249feb8 <col:67> 'int' lvalue ParmVar 0x560dd2485e90 'i' 'int'
|     `-CXXConstCastExpr 0x560dd24a0000 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x560dd249ffe8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x560dd249ffb0 <col:91> 'const void *' lvalue ParmVar 0x560dd2485f10 'x' 'const void *'
|-CXXMethodDecl 0x560dd24860b8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x560dd24a00d8 <col:34, line:640:5>
|   `-ReturnStmt 0x560dd24a00c8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x560dd24a00b0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x560dd24a0080 <col:16> 'Packet *' lvalue ->_data_packet 0x560dd248f9f8
|         `-CXXThisExpr 0x560dd24a0070 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x560dd24861f8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x560dd2486168 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x560dd2499198 <col:46> 'bool' true
|-CXXMethodDecl 0x560dd2486378 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x560dd24862b0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x560dd2486420 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x560dd2486bd0 <line:660:22> "" ""
| |-EnumConstantDecl 0x560dd2486520 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486c40 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2486500 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x560dd24864e0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x560dd247b680 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x560dd24865b0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486c58 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2486590 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x560dd2486570 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x560dd247b710 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x560dd2486640 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486c70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2486620 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x560dd2486600 <col:21> 'int' 0
| |-EnumConstantDecl 0x560dd24866d0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486c88 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24866b0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x560dd2486690 <col:19> 'int' 16
| |-EnumConstantDecl 0x560dd2486760 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486ca0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2486740 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x560dd2486720 <col:21> 'int' 16
| |-EnumConstantDecl 0x560dd24867f0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486cb8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24867d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x560dd24867b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x560dd2486880 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486cd0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2486860 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x560dd2486840 <col:19> 'int' EnumConstant 0x560dd24866d0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x560dd2486910 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486ce8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24868f0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x560dd24868d0 <col:19> 'int' EnumConstant 0x560dd24867f0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x560dd24869e0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486d00 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd24869c0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x560dd24869a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x560dd2486960 <col:23> 'int' EnumConstant 0x560dd2486910 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x560dd2486980 <col:40> 'int' 2
| |-EnumConstantDecl 0x560dd2486ab0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x560dd2486d18 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x560dd2486a90 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x560dd2486a70 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x560dd2486a30 <col:23> 'int' EnumConstant 0x560dd2486910 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x560dd2486a50 <col:40> 'int' 4
| `-EnumConstantDecl 0x560dd2486b80 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x560dd2486d30 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x560dd2486b60 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x560dd2486b40 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x560dd2486b00 <col:23> 'int' EnumConstant 0x560dd2486910 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x560dd2486b20 <col:40> 'int' 8
|-CXXMethodDecl 0x560dd2486d70 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x560dd2486e10 <col:68> "" ""
|-CXXMethodDecl 0x560dd2486ea8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x560dd2486f48 <col:45> "" ""
|-CXXMethodDecl 0x560dd2486fe0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x560dd2487080 <col:57> "" ""
|-CXXMethodDecl 0x560dd2487118 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x560dd24871b8 <col:45> "" ""
|-CXXMethodDecl 0x560dd2487250 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x560dd24872f0 <col:57> "" ""
|-CXXMethodDecl 0x560dd2487380 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x560dd2487420 <col:51> "" ""
|-CXXMethodDecl 0x560dd24874b0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x560dd2487550 <col:63> "" ""
|-CXXMethodDecl 0x560dd24875e0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x560dd2487680 <col:53> "" ""
|-CXXMethodDecl 0x560dd2487710 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x560dd24877b0 <col:65> "" ""
|-CXXMethodDecl 0x560dd24878c8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x560dd2487838 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x560dd2487970 <col:61> "" ""
|-CXXMethodDecl 0x560dd2487b08 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x560dd24879f8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x560dd2487a70 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x560dd2487bb8 <col:67> "" ""
|-CXXMethodDecl 0x560dd2487cd0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x560dd2487c40 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560dd2487d78 <col:63> "" ""
|-CXXMethodDecl 0x560dd2487f10 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x560dd2487e00 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560dd2487e78 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x560dd2487fc0 <col:69> "" ""
|-CXXMethodDecl 0x560dd24880d8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x560dd2488048 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560dd2488180 <col:63> "" ""
|-CXXMethodDecl 0x560dd248ca18 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x560dd248c908 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560dd248c980 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560dd248cac8 <col:69> "" ""
|-CXXMethodDecl 0x560dd248cbe0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x560dd248cb50 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x560dd248cc88 <col:62> "" ""
|-CXXMethodDecl 0x560dd248ce20 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x560dd248cd10 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560dd248cd88 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x560dd248ced0 <col:68> "" ""
|-CXXMethodDecl 0x560dd248cfe8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x560dd248cf58 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x560dd248d090 <col:63> "" ""
|-CXXMethodDecl 0x560dd248d228 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x560dd248d118 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x560dd248d190 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x560dd248d2d8 <col:69> "" ""
|-CXXMethodDecl 0x560dd248d368 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x560dd248d408 <col:64> "" ""
|-CXXMethodDecl 0x560dd248d498 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x560dd248d538 <col:52> "" ""
|-CXXMethodDecl 0x560dd248d5c8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x560dd248d668 <col:67> "" ""
|-CXXMethodDecl 0x560dd248d6f8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x560dd248d798 <col:55> "" ""
|-CXXMethodDecl 0x560dd248d8b0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x560dd248d820 <col:32> col:35 'int'
| `-DeprecatedAttr 0x560dd248d958 <col:58> "" ""
|-CXXMethodDecl 0x560dd248daf0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x560dd248d9e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x560dd248da58 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x560dd248dba0 <col:62> "" ""
|-CXXMethodDecl 0x560dd248dcb8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x560dd248dc28 <col:32> col:35 'int'
| `-DeprecatedAttr 0x560dd248dd60 <col:58> "" ""
|-CXXMethodDecl 0x560dd248def8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x560dd248dde8 <col:33> col:36 'int'
| |-ParmVarDecl 0x560dd248de60 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x560dd248dfa8 <col:62> "" ""
|-CXXMethodDecl 0x560dd248e0c0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x560dd248e030 <col:34> col:37 'int'
| `-DeprecatedAttr 0x560dd248e168 <col:60> "" ""
|-CXXMethodDecl 0x560dd248e300 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x560dd248e1f0 <col:34> col:37 'int'
| |-ParmVarDecl 0x560dd248e268 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x560dd248e3b0 <col:64> "" ""
|-CXXMethodDecl 0x560dd248e4c8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x560dd248e438 <col:32> col:35 'int'
| `-DeprecatedAttr 0x560dd248e570 <col:58> "" ""
|-CXXMethodDecl 0x560dd248e708 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x560dd248e5f8 <col:33> col:36 'int'
| |-ParmVarDecl 0x560dd248e670 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x560dd248e7b8 <col:62> "" ""
|-CXXMethodDecl 0x560dd248e8d0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x560dd248e840 <col:33> col:36 'int'
| `-DeprecatedAttr 0x560dd248e978 <col:59> "" ""
|-CXXMethodDecl 0x560dd248eb10 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x560dd248ea00 <col:33> col:36 'int'
| |-ParmVarDecl 0x560dd248ea78 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x560dd248ebc0 <col:63> "" ""
|-AccessSpecDecl 0x560dd248ec30 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x560dd248ec58 prev 0x560dd2481ca0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560dd248ed50 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x560dd248ee40 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x560dd248ef68 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x560dd248f0e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x560dd248f268 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x560dd248f3e8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x560dd24a0258 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x560dd24a0ac8 <col:11>
| |-CXXDestructorDecl 0x560dd24a0330 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x560dd24a0468 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x560dd24a0468
| | `-ParmVarDecl 0x560dd24a0578 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x560dd24a0618 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560dd24a0618
| | `-ParmVarDecl 0x560dd24a0728 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x560dd24a5ef8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x560dd24a6008 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x560dd24a6288 <col:11>
| |   `-ReturnStmt 0x560dd24a6278 <col:11>
| |     `-UnaryOperator 0x560dd24a6260 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x560dd24a6250 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x560dd24a6078 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x560dd24a6078
|   `-ParmVarDecl 0x560dd24a6188 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x560dd248f450 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x560dd248f568 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x560dd248f608 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x560dd248f670 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x560dd248f6d8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x560dd248f740 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x560dd248f7a0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x560dd248f860 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x560dd248f8c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x560dd248f920 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x560dd24a0168 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x560dd248f608 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x560dd24a0ad8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x560dd24a0b30 <col:12>
| |-CXXConstructorDecl 0x560dd24a0798 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x560dd24a0798
| | `-ParmVarDecl 0x560dd24a08a8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x560dd24a0948 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x560dd24a0948
| | `-ParmVarDecl 0x560dd24a0a58 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x560dd24a55e0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x560dd248f998 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x560dd248f9f8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x560dd248fa60 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x560dd248fac8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x560dd248fb30 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x560dd248fb98 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x560dd248fbf8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x560dd248fc58 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x560dd248fcc0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x560dd248fd48 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x560dd248f998 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x560dd24a0100 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x560dd248fbf8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x560dd24a0b40 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x560dd24a0ba0 <col:21, line:755:5>
|-CXXConstructorDecl 0x560dd248fee8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x560dd248fe28 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x560dd248ffe0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x560dd24901c8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x560dd24900d0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x560dd2490498 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x560dd2490280 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x560dd24902f8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x560dd2490370 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd24906b8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x560dd2490568 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x560dd24905e0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x560dd2498cd8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x560dd2490778 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x560dd24907f0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x560dd2490868 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x560dd2498e30 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x560dd2498da0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x560dd2498f78 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x560dd2498ee8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x560dd2499070 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]
