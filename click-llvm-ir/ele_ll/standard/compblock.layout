
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fddea28 prev 0x55633fdd61c8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fddeb20 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55633fddebb0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55633fddec28 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55633fddece8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55633fddedb0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55633fddef28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55633fddee60 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55633fddefd0 <col:24>
| `-OptimizeNoneAttr 0x55633fddf028 <col:34>
|-CXXMethodDecl 0x55633fddf070 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55633fddf328 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55633fddf120 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55633fddf198 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55633fddf218 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55633fddf3e0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55633fddf418 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55633fddf480 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55633fddf508 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55633fddf828 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55633fddf5c0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55633fddf638 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55633fddf6b0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55633fddf730 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55633fddf940 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55633fde72b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55633fde72b8
| `-ParmVarDecl 0x55633fde73c8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55633fde7468 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55633fde7468
| `-ParmVarDecl 0x55633fde7578 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55633febaff0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fdd1a40 prev 0x55633fdd17c0 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55633fdd1b38 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55633fdd1bc8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55633fdd1c28 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55633fdd1d18 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55633fdd1e18 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55633fdd1fe8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55633fdd1e98 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55633fdd1f10 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55633fdd2178 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55633fdd20b0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55633fdd2220 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55633fdd2358 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55633fdd2290 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55633fdd24f8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55633fdd2438 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55633fdd2698 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55633fdd25d8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55633fdd2740 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55633fdd2840 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55633fdd2920 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdd2820 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55633fdd2800 <col:26> 'int' 1
| `-EnumConstantDecl 0x55633fdd28d0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55633fdd2938 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fdd28b0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55633fdd2890 <col:44> 'int' 2
|-CXXMethodDecl 0x55633fdd2a80 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55633fdd2968 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55633fdd29e8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55633fdd2bd8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55633fdd2b48 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55633fdd2e18 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55633fdd2c98 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55633fdd2d10 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55633fdd2ec8 <col:20>
| `-OptimizeNoneAttr 0x55633fdd2f20 <col:30>
|-CXXMethodDecl 0x55633fdd3028 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55633fdd2f60 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55633fdd30d0 <col:20>
| `-OptimizeNoneAttr 0x55633fdd3128 <col:30>
|-CXXMethodDecl 0x55633fdd3178 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55633fdd3240 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55633fdd3358 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55633fdd33e0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55633fdd3468 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55633fdd34f0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55633fdd3578 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55633fdd3608 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55633fdd36c8 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55633fdd3750 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55633fdd37d8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55633fdd3860 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55633fdd38e8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55633fdd3970 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55633fdd3a00 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55633fdd3ac0 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55633fdd3b50 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55633fdd3ca0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55633fdd3c08 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55633fdd3e30 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55633fdd3d60 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55633fdd40e0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55633fdd3ee8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55633fdd3f68 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55633fdd3fe8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55633fdd4198 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55633fdd42a0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55633fdd4530 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdd4280 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55633fdd4260 <col:33> 'int' 0
| |-EnumConstantDecl 0x55633fdd4330 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55633fdd4548 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdd4310 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55633fdd42f0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55633fdd43c0 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55633fdd4560 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdd43a0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55633fdd4380 <col:38> 'int' 90
| |-EnumConstantDecl 0x55633fdd4450 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55633fdd4578 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdd4430 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55633fdd4410 <col:35> 'int' 100
| `-EnumConstantDecl 0x55633fdd44e0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55633fdd4590 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fdd44c0 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55633fdd44a0 <col:32> 'int' 2000
|-CXXMethodDecl 0x55633fdd45d0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55633fdd4a10 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55633fdd4880 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55633fdd48f8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdd4ae0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55633fdd4c60 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55633fdd4b90 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdd4e68 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55633fdd4d18 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55633fdd4d90 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdd4f68 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55633fdd5008 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55633fdd50d0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55633fdd5160 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55633fdd5390 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdd5140 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55633fdd5120 <col:36> 'int' EnumConstant 0x55633fdd50d0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55633fdd51b0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55633fdd5200 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55633fdd5250 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55633fdd52a0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55633fdd52f0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55633fdd5340 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55633fdd5478 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55633fdd53b8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55633fdd5540 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55633fdd5600 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55633fdd56c0 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55633fdd5780 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55633fdd5898 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55633fdd5960 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55633fdd5ae0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55633fdd5a10 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55633fdd5c08 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55633fdd5e08 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55633fdd5cb8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55633fdd5d38 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55633fde3758 <col:54, line:127:5>
|   |-ParenExpr 0x55633fde3608 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55633fde35d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55633fde32c8 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55633fde32a0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55633fde3288 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55633fde3270 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55633fde3240 <col:31> 'Router *' lvalue ->_router 0x55633fde1120
|   |   |         `-CXXThisExpr 0x55633fde3230 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55633fde3328 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fde3308 <col:48> 'int' 0
|   |   `-CallExpr 0x55633fde3538 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55633fde3520 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fde3500 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fde3578 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fde3398 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55633fde3590 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fde33b8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55633fde35a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fde33f0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55633fde35c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fde34e8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fde34d0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fde3488 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55633fde36a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55633fde3638 <col:9> 'Router *' lvalue ->_router 0x55633fde1120
|   | | `-CXXThisExpr 0x55633fde3628 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55633fde3688 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55633fde3668 <col:19> 'Router *' lvalue ParmVar 0x55633fdd5cb8 'r' 'Router *'
|   `-BinaryOperator 0x55633fde3738 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55633fde36d0 <col:9> 'int' lvalue ->_eindex 0x55633fde1188
|     | `-CXXThisExpr 0x55633fde36c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55633fde3720 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55633fde3700 <col:19> 'int' lvalue ParmVar 0x55633fdd5d38 'eindex' 'int'
|-CXXMethodDecl 0x55633fdd5f90 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55633fdd5ec8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55633fdd6060 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55633fdd6128 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55633fdd61c8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55633fdd6418 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55633fdd6290 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55633fdd6310 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55633fdd64c8 <col:20>
| `-OptimizeNoneAttr 0x55633fdd6520 <col:30>
|-CXXMethodDecl 0x55633fdd6628 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55633fdd6560 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55633fdd66d0 <col:20>
| `-OptimizeNoneAttr 0x55633fdd6728 <col:30>
|-CXXMethodDecl 0x55633fdd67f8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55633fdd6768 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55633fdd68a0 <col:20>
| `-OptimizeNoneAttr 0x55633fdd68f8 <col:30>
|-CXXMethodDecl 0x55633fdd6a88 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55633fdd6930 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55633fdd69b0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55633fdd6c18 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55633fdd6b50 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55633fdd6d68 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55633fdd6cd8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55633fdd6eb8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55633fdd6e28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55633fdd7008 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55633fdd6f78 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55633fdd72c8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55633fdd70c0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55633fdd7140 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55633fdd71e8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55633fdd73a0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55633fdd7460 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55633fdd7730 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55633fdd75e0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55633fdd7658 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdd7858 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55633fdd7a30 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55633fdd7910 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55633fdd7990 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55633fdd7c18 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55633fdd7af8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55633fdd7b78 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55633fdd7f88 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55633fdd7cd8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55633fdd7d50 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55633fdd7dd0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55633fde2d40 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fde2d20 <col:106> 'int' 0
| `-ParmVarDecl 0x55633fdd7e48 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55633fde2d78 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55633fde2d58 <col:126> 'int' 0
|-CXXMethodDecl 0x55633fdd8328 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55633fdd8058 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55633fdd80f0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55633fdd8170 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55633fdd81e8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55633fde2db0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55633fde2d90 <col:114> 'int' 0
|-CXXMethodDecl 0x55633fdd86b8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55633fdd8400 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55633fdd8478 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55633fdd84f8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55633fde2dc8 <col:96> 'int' 0
| `-ParmVarDecl 0x55633fdd8570 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55633fde2e08 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55633fde2de8 <col:116> 'int' 0
|-CXXMethodDecl 0x55633fdd8a38 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55633fdd8788 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55633fdd8800 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fdd8880 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55633fde2e40 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fde2e20 <col:109> 'int' 0
| `-ParmVarDecl 0x55633fdd88f8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55633fde2e78 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55633fde2e58 <col:129> 'int' 0
|-CXXMethodDecl 0x55633fdd8db8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55633fdd8b08 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55633fdd8b80 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fdd8c00 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55633fdd8c78 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55633fde2eb0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55633fde2e90 <col:117> 'int' 0
|-CXXMethodDecl 0x55633fdd9148 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55633fdd8e90 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fdd8f08 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fdd8f88 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55633fde2ec8 <col:99> 'int' 0
| `-ParmVarDecl 0x55633fdd9000 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55633fde2f08 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55633fde2ee8 <col:119> 'int' 0
|-CXXMethodDecl 0x55633fdd9568 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55633fdd9218 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55633fdd9298 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55633fdd9310 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fdd9390 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55633fde2f40 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fde2f20 <col:108> 'int' 0
| `-ParmVarDecl 0x55633fdd9410 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55633fde2f78 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55633fde2f58 <col:141> 'int' 0
|-CXXMethodDecl 0x55633fdd9988 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55633fdd9640 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55633fdd96c0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55633fdd9738 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fdd97b8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55633fdd9838 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55633fde2f90 <col:121> 'int' 0
|-CXXMethodDecl 0x55633fdd9db8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55633fdd9a68 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55633fdd9ae8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55633fdd9b60 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fdd9be0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55633fde2fb0 <col:98> 'int' 0
| `-ParmVarDecl 0x55633fdd9c60 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55633fde2fd0 <col:123> 'int' 0
|-CXXMethodDecl 0x55633fdda080 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55633fdd9e90 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55633fdd9f10 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55633fdd9f90 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55633fde2ff0 <col:80> 'int' 0
|-EnumDecl 0x55633fdda138 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55633fdda240 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55633fdda4d0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdda220 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55633fdda200 <col:42> 'int' 1
| |-EnumConstantDecl 0x55633fdda2d0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55633fdda4e8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdda2b0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55633fdda290 <col:40> 'int' 2
| |-EnumConstantDecl 0x55633fdda360 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55633fdda500 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdda340 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55633fdda320 <col:44> 'int' 4
| |-EnumConstantDecl 0x55633fdda3f0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55633fdda518 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdda3d0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55633fdda3b0 <col:36> 'int' 7
| `-EnumConstantDecl 0x55633fdda480 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55633fdda530 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fdda460 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55633fdda440 <col:34> 'int' 6
|-CXXMethodDecl 0x55633fdda7e8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55633fdda558 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55633fdda5f8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55633fdda678 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55633fdda6f0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55633fde30a8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55633fde3090 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55633fde3078 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55633fde3058 <col:98, col:105> 'String' (CXXTemporary 0x55633fde3058)
|           `-CXXTemporaryObjectExpr 0x55633fde3020 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55633fddaa88 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55633fdda8b8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55633fdda930 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55633fdda9a8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55633fde3158 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55633fde3140 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55633fde3128 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55633fde3108 <col:94, col:101> 'String' (CXXTemporary 0x55633fde3108)
| |         `-CXXTemporaryObjectExpr 0x55633fde30d0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55633fde3940 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55633fde38b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55633fde3888 <col:9> '<bound member function type>' ->add_task_handlers 0x55633fdda7e8
|     | `-CXXThisExpr 0x55633fde3878 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55633fde38f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55633fde37f8 <col:27> 'Task *' lvalue ParmVar 0x55633fdda8b8 'task' 'Task *'
|     |-ImplicitCastExpr 0x55633fde3910 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55633fde3818 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55633fdda930 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55633fde3928 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55633fde3838 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55633fdda480 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55633fde3858 <col:62> 'const String' lvalue ParmVar 0x55633fdda9a8 'prefix' 'const String &'
|-CXXMethodDecl 0x55633fddac98 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55633fddab50 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55633fddabc8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55633fde3208 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55633fde31f0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55633fde31d8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55633fde31b8 <col:70, col:77> 'String' (CXXTemporary 0x55633fde31b8)
| |         `-CXXTemporaryObjectExpr 0x55633fde3180 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55633fde3b18 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55633fde3a90 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55633fde3a60 <col:9> '<bound member function type>' ->add_task_handlers 0x55633fdda7e8
|     | `-CXXThisExpr 0x55633fde3a50 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55633fde3ad0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55633fde39d0 <col:27> 'Task *' lvalue ParmVar 0x55633fddab50 'task' 'Task *'
|     |-ImplicitCastExpr 0x55633fde3ae8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55633fde39f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55633fde3b00 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55633fde3a10 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55633fdda480 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55633fde3a30 <col:57> 'const String' lvalue ParmVar 0x55633fddabc8 'prefix' 'const String &'
|-CXXMethodDecl 0x55633fddaf78 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55633fddad60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddade0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddae58 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55633fddb228 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55633fddb048 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddb0c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddb148 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55633fddb518 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55633fddb2f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddb378 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddb3f0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55633fddb7c8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55633fddb5e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddb668 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddb6e8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55633fddba78 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55633fddb898 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddb918 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddb998 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55633fddbd28 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55633fddbb48 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddbbc8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddbc40 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55633fddbfd8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55633fddbdf8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddbe78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddbef8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55633fddc2e8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55633fddc100 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddc180 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddc200 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55633fddc5c8 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55633fddc3b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddc438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddc4e0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55633fddc8a8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55633fddc698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddc718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddc7c0 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55633fddcb10 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55633fddc978 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55633fddc9f8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55633fddca70 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55633fddcdb8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55633fddcbe0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55633fddcc60 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55633fddccd8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55633fddd068 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55633fddce88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddcf08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddcf88 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55633fddd318 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55633fddd138 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddd1b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddd230 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55633fddd5c8 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55633fddd3e8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddd468 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddd4e0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55633fddd898 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55633fddd698 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddd718 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55633fddd7b8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55633fdddbc8 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55633fddd968 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55633fddd9e8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55633fddda60 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55633fdddad8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55633fde3220 <col:93> 'bool' false
|-CXXMethodDecl 0x55633fddddb0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55633fdddc98 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55633fdddd18 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55633fdddf88 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55633fddde70 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55633fdddef0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55633fdde268 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55633fdde048 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55633fdde0c0 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55633fdde140 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55633fdde1b8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdde558 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55633fdde338 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55633fdde3b0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55633fdde430 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55633fdde4a8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdde790 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55633fdde630 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55633fdde6b0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55633fdde978 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55633fdde858 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55633fdde8d8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55633fddea28 prev 0x55633fdd61c8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55633fddeb20 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55633fddebb0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55633fddec28 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55633fddece8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55633fddedb0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55633fddef28 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55633fddee60 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55633fddefd0 <col:24>
| | `-OptimizeNoneAttr 0x55633fddf028 <col:34>
| |-CXXMethodDecl 0x55633fddf070 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55633fddf328 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55633fddf120 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55633fddf198 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55633fddf218 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55633fddf3e0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55633fddf418 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55633fddf480 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55633fddf508 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55633fddf828 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55633fddf5c0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55633fddf638 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55633fddf6b0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55633fddf730 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55633fddf940 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55633fde72b8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55633fde72b8
| | `-ParmVarDecl 0x55633fde73c8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55633fde7468 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55633fde7468
| | `-ParmVarDecl 0x55633fde7578 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55633febaff0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55633fddf9b8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55633fddfa58 <col:38> "" ""
|-CXXMethodDecl 0x55633fddfae8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55633fddfb88 <col:44> "" ""
|-AccessSpecDecl 0x55633fddfbf8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55633fddfc20 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55633fddfd20 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55633fddfd70 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fddfd00 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55633fddfce0 <col:27> 'int' 4
|-FieldDecl 0x55633fddfe28 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55633fddffd8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55633fde0090 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55633fde1120 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55633fde1188 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55633fde12d8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55633fde1218 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55633fde1488 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55633fde1398 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55633fde1668 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55633fde1548 <col:20> col:23 'int'
| `-ParmVarDecl 0x55633fde15c8 <col:25> col:28 'int'
|-CXXMethodDecl 0x55633fde1910 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55633fde1730 <col:23> col:26 'int'
| |-ParmVarDecl 0x55633fde17b0 <col:28> col:31 'int'
| `-ParmVarDecl 0x55633fde1828 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55633fde19c8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55633fde1a90 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55633fde1ae0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55633fde1b30 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55633fde1d10 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55633fde1bc0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55633fde1c38 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fde1fb8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55633fde1dd8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55633fde1e58 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55633fde1ed0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55633fde21d8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55633fde2088 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55633fde2108 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55633fde2510 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55633fde2298 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55633fde2318 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55633fde2390 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55633fde2410 <col:57> col:60 'int'
|-CXXMethodDecl 0x55633fde26f8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55633fde25e0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55633fde2660 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55633fde2848 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55633fde27b8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55633fde2bc8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55633fde2908 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55633fde2988 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55633fde2a00 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55633fde2a80 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55633fde2ce0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class CompareBlock
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _fwd_weight
       112 |   int _rev_weight
       116 |   int _thresh
       120 |   int _bad
           | [sizeof=128, dsize=124, align=8,
           |  nvsize=124, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fdea428 <../elements/standard/compblock.hh:36:1, line:64:1> line:36:7 class CompareBlock definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55633fdea588 <col:1, col:7> col:7 implicit referenced class CompareBlock
|-AccessSpecDecl 0x55633fdea618 <col:39, col:45> col:39 public
|-CXXConstructorDecl 0x55633fdea6a0 <line:38:3, col:16> col:3 CompareBlock 'void ()'
|-CXXMethodDecl 0x55633fdea7a0 <line:40:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55633fdd3178 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55633fdec680 <col:34, col:59>
|   `-ReturnStmt 0x55633fdec670 <col:36, col:43>
|     `-ImplicitCastExpr 0x55633fdec658 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55633fdec630 <col:43> 'const char [13]' lvalue "CompareBlock"
|-CXXMethodDecl 0x55633fdea868 <line:41:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55633fdd3240 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55633fdec6e0 <col:34, col:50>
|   `-ReturnStmt 0x55633fdec6d0 <col:36, col:43>
|     `-ImplicitCastExpr 0x55633fdec6b8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55633fdec698 <col:43> 'const char [4]' lvalue "1/2"
|-CXXMethodDecl 0x55633fdea928 <line:42:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55633fdd4ae0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55633fdeac00 <line:44:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55633fdd4a10 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55633fdeaab0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55633fdeab28 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdeadd8 <line:45:3, col:31> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55633fdd1fe8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55633fdeacc8 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x55633fdead40 <col:23, col:30> col:31 'Packet *'
|-AccessSpecDecl 0x55633fdeae88 <line:47:2, col:9> col:2 private
|-FieldDecl 0x55633fdeaec8 <line:49:3, col:7> col:7 _fwd_weight 'int'
|-FieldDecl 0x55633fdeaf30 <line:50:3, col:7> col:7 _rev_weight 'int'
|-FieldDecl 0x55633fdeaf98 <line:51:3, col:7> col:7 _thresh 'int'
|-FieldDecl 0x55633fdeb000 <line:52:3, col:7> col:7 _bad 'int'
|-CXXMethodDecl 0x55633fdeb280 <line:54:3, line:55:64> line:54:14 rev_weight_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55633fdeb060 <line:55:6, col:20> col:20 conf 'const String &'
| |-ParmVarDecl 0x55633fdeb0d8 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x55633fdeb158 <col:38, col:43> col:44 'void *'
| `-ParmVarDecl 0x55633fdeb1d0 <col:46, col:60> col:60 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdeb570 <line:56:3, line:57:64> line:56:14 fwd_weight_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55633fdeb350 <line:57:6, col:20> col:20 conf 'const String &'
| |-ParmVarDecl 0x55633fdeb3c8 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x55633fdeb448 <col:38, col:43> col:44 'void *'
| `-ParmVarDecl 0x55633fdeb4c0 <col:46, col:60> col:60 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdeb860 <line:58:3, line:59:64> line:58:14 thresh_write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55633fdeb640 <line:59:6, col:20> col:20 conf 'const String &'
| |-ParmVarDecl 0x55633fdeb6b8 <col:26, col:35> col:35 e 'Element *'
| |-ParmVarDecl 0x55633fdeb738 <col:38, col:43> col:44 'void *'
| `-ParmVarDecl 0x55633fdeb7b0 <col:46, col:60> col:60 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdeba48 <line:61:3, col:59> col:17 rev_weight_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55633fdeb930 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55633fdeb9b0 <col:53, col:58> col:59 'void *'
|-CXXMethodDecl 0x55633fdebc20 <line:62:3, col:59> col:17 fwd_weight_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55633fdebb08 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55633fdebb88 <col:53, col:58> col:59 'void *'
|-CXXMethodDecl 0x55633fdebdf8 <line:63:3, col:55> col:17 thresh_read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55633fdebce0 <col:37, col:46> col:46 e 'Element *'
| `-ParmVarDecl 0x55633fdebd60 <col:49, col:54> col:55 'void *'
|-CXXConstructorDecl 0x55633fdebed8 <line:36:7> col:7 implicit CompareBlock 'void (const CompareBlock &)' inline default_delete noexcept-unevaluated 0x55633fdebed8
| `-ParmVarDecl 0x55633fdebfe8 <col:7> col:7 'const CompareBlock &'
|-CXXConstructorDecl 0x55633fdec088 <col:7> col:7 implicit CompareBlock 'void (CompareBlock &&)' inline default_delete noexcept-unevaluated 0x55633fdec088
| `-ParmVarDecl 0x55633fdec198 <col:7> col:7 'CompareBlock &&'
|-CXXMethodDecl 0x55633fdec238 <col:7> col:7 implicit operator= 'CompareBlock &(const CompareBlock &)' inline default_delete noexcept-unevaluated 0x55633fdec238
| `-ParmVarDecl 0x55633fdec348 <col:7> col:7 'const CompareBlock &'
|-CXXMethodDecl 0x55633fdec3b8 <col:7> col:7 implicit operator= 'CompareBlock &(CompareBlock &&)' inline default_delete noexcept-unevaluated 0x55633fdec3b8
| `-ParmVarDecl 0x55633fdec4c8 <col:7> col:7 'CompareBlock &&'
`-CXXDestructorDecl 0x55633fdec550 <col:7> col:7 implicit ~CompareBlock 'void ()' inline default noexcept-unevaluated 0x55633fdec550
  `-Overrides: [ 0x55633fdd1d18 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.CompareBlock = type { %class.Element.base, i32, i32, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.CompareBlock.base = type { %class.Element.base, i32, i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fba58e0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55633fba59f8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55633fba5a98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55633fba5af8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55633fba5b58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55633fba5c08 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fba5f10 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fba6028 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55633fba60d0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55633fba6138 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55633fba61c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55633fbac260 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55633fbac698 <col:12>
|-CXXConstructorDecl 0x55633fbac368 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55633fbac478 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55633fba60d0 'data' 'const char *'
| | `-ImplicitCastExpr 0x55633fbaec20 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55633fbaebf0 <col:12> 'const char *const' lvalue .data 0x55633fba60d0
| |     `-DeclRefExpr 0x55633fbaebd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbac478 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55633fba6138 'length' 'int'
| | `-ImplicitCastExpr 0x55633fbaecb0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55633fbaec80 <col:12> 'const int' lvalue .length 0x55633fba6138
| |     `-DeclRefExpr 0x55633fbaec60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbac478 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55633fba61c8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55633fbaed40 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55633fbaed10 <col:12> 'String::memo_t *const' lvalue .memo 0x55633fba61c8
| |     `-DeclRefExpr 0x55633fbaecf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbac478 '' 'const String::rep_t &'
| `-CompoundStmt 0x55633fbaed98 <col:12>
|-CXXConstructorDecl 0x55633fbac518 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55633fbac518
| `-ParmVarDecl 0x55633fbac628 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55633fbb1b80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55633fbbd598 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55633fbbd6a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55633fbbdbc0 <col:12>
|   |-BinaryOperator 0x55633fbbd9d8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55633fbbd990 <col:12> 'const char *' lvalue ->data 0x55633fba60d0
|   | | `-CXXThisExpr 0x55633fbbd980 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55633fbbd9c0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55633fbbd950 <col:12> 'const char *const' lvalue .data 0x55633fba60d0
|   |     `-DeclRefExpr 0x55633fbbd930 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbbd6a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55633fbbdaa0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55633fbbda58 <col:12> 'int' lvalue ->length 0x55633fba6138
|   | | `-CXXThisExpr 0x55633fbbda48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55633fbbda88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55633fbbda18 <col:12> 'const int' lvalue .length 0x55633fba6138
|   |     `-DeclRefExpr 0x55633fbbd9f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbbd6a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55633fbbdb68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55633fbbdb20 <col:12> 'String::memo_t *' lvalue ->memo 0x55633fba61c8
|   | | `-CXXThisExpr 0x55633fbbdb10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55633fbbdb50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55633fbbdae0 <col:12> 'String::memo_t *const' lvalue .memo 0x55633fba61c8
|   |     `-DeclRefExpr 0x55633fbbdac0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbbd6a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55633fbbdbb0 <col:12>
|     `-UnaryOperator 0x55633fbbdb98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fbbdb88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55633fbbd718 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55633fbbd718
  `-ParmVarDecl 0x55633fbbd828 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fb9ce50 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55633fb9cf68 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55633fb9cff8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55633fb9d038 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55633f870dc0 'const char *'
|   `-QualType 0x55633f870311 'const char' const
|     `-BuiltinType 0x55633f870310 'char'
|-TypedefDecl 0x55633fb9d0c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55633fb9d090 'String::const_iterator' sugar
|   |-Typedef 0x55633fb9d038 'const_iterator'
|   `-PointerType 0x55633f870dc0 'const char *'
|     `-QualType 0x55633f870311 'const char' const
|       `-BuiltinType 0x55633f870310 'char'
|-TypedefDecl 0x55633fb9d230 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55633fb9d1a0 'int (String::*)() const'
|   |-RecordType 0x55633fb9cee0 'String'
|   | `-CXXRecord 0x55633fb9ce50 'String'
|   `-ParenType 0x55633fb9d140 'int () const' sugar
|     `-FunctionProtoType 0x55633fb70cd0 'int () const' const cdecl
|       `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fb9d298 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55633f9c58b0 'int64_t' sugar
|   |-Typedef 0x55633f8d92d0 'int64_t'
|   `-TypedefType 0x55633f8b24d0 '__int64_t' sugar
|     |-Typedef 0x55633f8b20a8 '__int64_t'
|     `-BuiltinType 0x55633f870390 'long'
|-TypedefDecl 0x55633fb9d300 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55633f9c57d0 'uint64_t' sugar
|   |-Typedef 0x55633f8d9470 'uint64_t'
|   `-TypedefType 0x55633f8b2560 '__uint64_t' sugar
|     |-Typedef 0x55633f8b2118 '__uint64_t'
|     `-BuiltinType 0x55633f870430 'unsigned long'
|-TypedefDecl 0x55633fb9d390 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55633fb9d360 'String::intmax_t' sugar
|   |-Typedef 0x55633fb9d298 'intmax_t'
|   `-TypedefType 0x55633f9c58b0 'int64_t' sugar
|     |-Typedef 0x55633f8d92d0 'int64_t'
|     `-TypedefType 0x55633f8b24d0 '__int64_t' sugar
|       |-Typedef 0x55633f8b20a8 '__int64_t'
|       `-BuiltinType 0x55633f870390 'long'
|-TypedefDecl 0x55633fb9d420 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55633fb9d3f0 'String::uintmax_t' sugar
|   |-Typedef 0x55633fb9d300 'uintmax_t'
|   `-TypedefType 0x55633f9c57d0 'uint64_t' sugar
|     |-Typedef 0x55633f8d9470 'uint64_t'
|     `-TypedefType 0x55633f8b2560 '__uint64_t' sugar
|       |-Typedef 0x55633f8b2118 '__uint64_t'
|       `-BuiltinType 0x55633f870430 'unsigned long'
|-CXXConstructorDecl 0x55633fb9d4e0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55633fb9d688 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55633fb9d5c8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55633fb9d838 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55633fb9d778 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55633fb9d990 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55633fb9d900 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55633fb9dba8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55633fb9da58 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55633fb9dad8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55633fb9ddc8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55633fb9dc78 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55633fb9dcf8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55633fb9dfe8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55633fb9de98 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55633fb9df18 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55633fb9e208 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55633fb9e0b8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55633fb9e138 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55633fb9e398 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55633fb9e2d0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55633fb9e518 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55633fb9e458 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55633fb9e6a8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55633fb9e5e0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55633fb9e800 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55633fb9e770 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55633fb9e958 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55633fb9e8c8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55633fb9eab0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55633fb9ea20 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55633fb9ec38 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55633fb9eb78 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55633fb9edc8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55633fb9ed00 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55633fb9ef58 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55633fb9ee90 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55633fb9f0e8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55633fb9f020 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55633fb9f1e0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55633fb9f308 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55633fb9f488 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55633fb9f3c0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55633fb9f5d8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55633fb9f548 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55633fb9f690 <col:63> "" ""
|-CXXMethodDecl 0x55633fb9f7d8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55633fb9f718 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55633fb9f9e8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55633fb9f898 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55633fb9f918 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55633fb9fc08 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55633fb9fab0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55633fb9fb30 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55633fb9fee8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55633fb9fcc8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55633fb9fd48 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55633fbabd30 <col:55> 'int' 10
| `-ParmVarDecl 0x55633fb9fdc0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55633fbabd50 <col:76> 'bool' true
|-CXXMethodDecl 0x55633fba01c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55633fb9ffb0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55633fba0030 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55633fbabd60 <col:56> 'int' 10
| `-ParmVarDecl 0x55633fba00a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55633fbabd80 <col:77> 'bool' true
|-CXXMethodDecl 0x55633fba02d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55633fba0398 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55633fba0460 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55633fba0500 <col:20>
| `-OptimizeNoneAttr 0x55633fba0558 <col:30>
|-CXXConversionDecl 0x55633fba0648 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55633fba0718 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55633fba07d8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55633fba08c8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55633fba0988 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55633fba0b08 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55633fba0a40 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55633fba0c58 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55633fba0bc8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55633fba0d48 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55633fba0e08 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55633fba1058 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55633fba0ec0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55633fba0f40 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55633fba12b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55633fba1120 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55633fba11a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55633fba1388 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fba1598 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55633fba1440 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55633fba14c0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55633fba17b8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55633fba1660 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55633fba16e0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55633fba1948 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55633fba1880 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55633fba1a38 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55633fba1ba8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55633fba1ae8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55633fba1db8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55633fba1c68 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55633fba1ce8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55633fba1fd0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55633fba1e78 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55633fba1ef0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55633fba2160 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55633fba2090 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55633fba2380 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55633fba2220 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55633fba22a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55633fba24d0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55633fba2440 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55633fba26a8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55633fba2590 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55633fba2610 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55633fba27f8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55633fba2768 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55633fba2a10 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55633fba28b0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55633fba2930 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55633fbabd90 <col:39> 'int' 0
|-CXXMethodDecl 0x55633fba2c30 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55633fba2ad0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55633fba2b50 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55633fbabdb0 <col:48> 'int' 0
|-CXXMethodDecl 0x55633fba2e10 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55633fba2cf0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55633fba2d70 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55633fbabdd0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55633fba2ee0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55633fba2fa0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55633fba3060 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55633fba3120 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55633fba31e0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55633fba3388 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55633fba3290 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55633fba3508 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55633fba3440 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55633fba36e0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55633fba35c8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55633fba3858 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55633fba3798 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55633fba39a0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55633fba3910 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55633fba3af0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55633fba3a60 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55633fba3cc8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55633fba3bb0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55633fba3c30 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55633fba3ea8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55633fba3d90 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55633fba3e10 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55633fba3ff8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55633fba3f68 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55633fba4208 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55633fba40b8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55633fba4138 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55633fba4368 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55633fba42d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55633fba44c0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55633fba4428 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55633fba4568 <col:57> "" ""
|-CXXMethodDecl 0x55633fba4678 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55633fba45e8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55633fba47c8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55633fba4738 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55633fba4948 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55633fba4880 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55633fba4a10 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55633fba4ad0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55633fba4b90 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55633fba4c30 <col:49> "" ""
|-CXXMethodDecl 0x55633fba4cc0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55633fba4d80 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55633fba4e70 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55633fba4f38 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55633fba4ff8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55633fba50b8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55633fba51b0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55633fba5278 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55633fba5340 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55633fba5518 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55633fba53f8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55633fba5478 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55633fba5740 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55633fba55e0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55633fba5660 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55633fba5850 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55633fba58b8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55633fba58e0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55633fba59f8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55633fba5a98 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55633fba5af8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55633fba5b58 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55633fba5c08 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55633fba5c70 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55633fba5ea8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55633fba5ef8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fba5e88 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55633fba5d98 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55633fba5d40 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55633fba5d80 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55633fba5d60 <col:32> 'int' 8
|-CXXRecordDecl 0x55633fba5f10 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55633fba6028 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55633fba60d0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55633fba6138 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55633fba61c8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55633fbac260 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55633fbac698 <col:12>
| |-CXXConstructorDecl 0x55633fbac368 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55633fbac478 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55633fba60d0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55633fbaec20 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55633fbaebf0 <col:12> 'const char *const' lvalue .data 0x55633fba60d0
| | |     `-DeclRefExpr 0x55633fbaebd0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbac478 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55633fba6138 'length' 'int'
| | | `-ImplicitCastExpr 0x55633fbaecb0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55633fbaec80 <col:12> 'const int' lvalue .length 0x55633fba6138
| | |     `-DeclRefExpr 0x55633fbaec60 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbac478 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55633fba61c8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55633fbaed40 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55633fbaed10 <col:12> 'String::memo_t *const' lvalue .memo 0x55633fba61c8
| | |     `-DeclRefExpr 0x55633fbaecf0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbac478 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55633fbaed98 <col:12>
| |-CXXConstructorDecl 0x55633fbac518 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55633fbac518
| | `-ParmVarDecl 0x55633fbac628 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55633fbb1b80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55633fbbd598 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55633fbbd6a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55633fbbdbc0 <col:12>
| |   |-BinaryOperator 0x55633fbbd9d8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55633fbbd990 <col:12> 'const char *' lvalue ->data 0x55633fba60d0
| |   | | `-CXXThisExpr 0x55633fbbd980 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55633fbbd9c0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55633fbbd950 <col:12> 'const char *const' lvalue .data 0x55633fba60d0
| |   |     `-DeclRefExpr 0x55633fbbd930 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbbd6a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55633fbbdaa0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55633fbbda58 <col:12> 'int' lvalue ->length 0x55633fba6138
| |   | | `-CXXThisExpr 0x55633fbbda48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55633fbbda88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55633fbbda18 <col:12> 'const int' lvalue .length 0x55633fba6138
| |   |     `-DeclRefExpr 0x55633fbbd9f8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbbd6a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55633fbbdb68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55633fbbdb20 <col:12> 'String::memo_t *' lvalue ->memo 0x55633fba61c8
| |   | | `-CXXThisExpr 0x55633fbbdb10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55633fbbdb50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55633fbbdae0 <col:12> 'String::memo_t *const' lvalue .memo 0x55633fba61c8
| |   |     `-DeclRefExpr 0x55633fbbdac0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55633fbbd6a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55633fbbdbb0 <col:12>
| |     `-UnaryOperator 0x55633fbbdb98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55633fbbdb88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55633fbbd718 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55633fbbd718
|   `-ParmVarDecl 0x55633fbbd828 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55633fba6240 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55633fba6488 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55633fba62a8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55633fba6328 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55633fba63a0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55633fbac220 <col:79, line:261:5>
|   |-BinaryOperator 0x55633fbabe98 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55633fbabe30 <col:2, col:5> 'const char *' lvalue .data 0x55633fba60d0
|   | | `-MemberExpr 0x55633fbabe00 <col:2> 'String::rep_t' lvalue ->_r 0x55633fba6240
|   | |   `-CXXThisExpr 0x55633fbabdf0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55633fbabe80 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55633fbabe60 <col:12> 'const char *' lvalue ParmVar 0x55633fba62a8 'data' 'const char *'
|   |-BinaryOperator 0x55633fbabf60 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55633fbabef8 <col:2, col:5> 'int' lvalue .length 0x55633fba6138
|   | | `-MemberExpr 0x55633fbabec8 <col:2> 'String::rep_t' lvalue ->_r 0x55633fba6240
|   | |   `-CXXThisExpr 0x55633fbabeb8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55633fbabf48 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55633fbabf28 <col:14> 'int' lvalue ParmVar 0x55633fba6328 'length' 'int'
|   `-IfStmt 0x55633fbac208 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55633fbac080 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55633fbac068 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55633fbac048 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55633fbac028 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55633fbabfc0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|     |       | `-MemberExpr 0x55633fbabf90 <col:7> 'String::rep_t' lvalue ->_r 0x55633fba6240
|     |       |   `-CXXThisExpr 0x55633fbabf80 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55633fbac010 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55633fbabff0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55633fba63a0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55633fbac1e0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55633fbac1c8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55633fbac0d0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55633fb94eb8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55633fbac138 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55633fba5a98
|         `-ImplicitCastExpr 0x55633fbac120 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55633fbac100 <col:27> 'String::memo_t *' lvalue ParmVar 0x55633fba63a0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55633fba6738 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55633fba6558 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55633fba65d8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55633fba6650 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55633fba6240 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55633fbac6a8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55633fbac838 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55633fbac7a0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55633fbac710 <col:2> '<bound member function type>' ->assign_memo 0x55633fba6488
|     | `-ImplicitCastExpr 0x55633fbac7d8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55633fbac700 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55633fbac7f0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55633fbac740 <col:14> 'const char *' lvalue ParmVar 0x55633fba6558 'data' 'const char *'
|     |-ImplicitCastExpr 0x55633fbac808 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55633fbac760 <col:20> 'int' lvalue ParmVar 0x55633fba65d8 'length' 'int'
|     `-ImplicitCastExpr 0x55633fbac820 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55633fbac780 <col:28> 'String::memo_t *' lvalue ParmVar 0x55633fba6650 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55633fba68c8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55633fba6808 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55633fbaca90 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55633fbaca10 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55633fbac860 <col:2> '<bound member function type>' ->assign_memo 0x55633fba6488
|     | `-CXXThisExpr 0x55633fbac850 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55633fbaca48 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55633fbac8e0 <col:14, col:19> 'const char *' lvalue .data 0x55633fba60d0
|     |   `-MemberExpr 0x55633fbac8b0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55633fba6240
|     |     `-DeclRefExpr 0x55633fbac890 <col:14> 'const String' lvalue ParmVar 0x55633fba6808 'x' 'const String &'
|     |-ImplicitCastExpr 0x55633fbaca60 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55633fbac960 <col:25, col:30> 'int' lvalue .length 0x55633fba6138
|     |   `-MemberExpr 0x55633fbac930 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55633fba6240
|     |     `-DeclRefExpr 0x55633fbac910 <col:25> 'const String' lvalue ParmVar 0x55633fba6808 'x' 'const String &'
|     `-ImplicitCastExpr 0x55633fbaca78 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55633fbac9e0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|         `-MemberExpr 0x55633fbac9b0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55633fba6240
|           `-DeclRefExpr 0x55633fbac990 <col:38> 'const String' lvalue ParmVar 0x55633fba6808 'x' 'const String &'
|-CXXMethodDecl 0x55633fba6990 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55633fbad450 <col:31, line:278:5>
|   `-IfStmt 0x55633fbad438 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55633fbacb30 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55633fbacb18 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55633fbacae8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|     |     `-MemberExpr 0x55633fbacab8 <col:6> 'String::rep_t' lvalue ->_r 0x55633fba6240
|     |       `-CXXThisExpr 0x55633fbacaa8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55633fbad410 <col:15, line:277:2>
|       |-ParenExpr 0x55633fbacfe0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55633fbacfb0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55633fbacc40 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55633fbacc28 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55633fbacc10 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55633fbacbd0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55633fba5a98
|       |   |       `-ImplicitCastExpr 0x55633fbacbb8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55633fbacb88 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|       |   |           `-MemberExpr 0x55633fbacb58 <col:27> 'String::rep_t' lvalue ->_r 0x55633fba6240
|       |   |             `-CXXThisExpr 0x55633fbacb48 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55633fbacca0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55633fbacc80 <col:54> 'int' 0
|       |   `-CallExpr 0x55633fbacf10 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55633fbacef8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55633fbace78 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55633fbacf50 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55633fbacd88 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55633fbacf68 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55633fbacdb8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55633fbacf80 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55633fbacdf0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55633fbacf98 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55633fbace60 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55633fbace48 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55633fbace10 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55633fbad330 <line:274:6, line:275:22>
|       | |-CallExpr 0x55633fbad1f0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55633fbad1d8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55633fbad150 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55633fb96300 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55633fbad120 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55633fba5a98
|       | |   `-ImplicitCastExpr 0x55633fbad108 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55633fbad0d8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|       | |       `-MemberExpr 0x55633fbad0a8 <col:40> 'String::rep_t' lvalue ->_r 0x55633fba6240
|       | |         `-CXXThisExpr 0x55633fbad098 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55633fbad2f0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55633fbad2d8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55633fbad218 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55633fbab170 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55633fbad318 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55633fbad278 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|       |       `-MemberExpr 0x55633fbad248 <col:15> 'String::rep_t' lvalue ->_r 0x55633fba6240
|       |         `-CXXThisExpr 0x55633fbad238 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55633fbad3f0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55633fbad388 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55633fba61c8
|         | `-MemberExpr 0x55633fbad358 <col:6> 'String::rep_t' lvalue ->_r 0x55633fba6240
|         |   `-CXXThisExpr 0x55633fbad348 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55633fbad3d8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55633fbad3b8 <col:16> 'int' 0
|-CXXMethodDecl 0x55633fba6c28 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55633fba6a48 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55633fba6ac8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55633fba6b40 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55633fba6d00 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55633fba6f50 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55633fba6db8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55633fba6e38 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55633fba6eb0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55633fba7138 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55633fba7020 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55633fba70a0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55633fba7238 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55633fbad528 <col:41, line:286:5>
|   `-ReturnStmt 0x55633fbad518 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55633fbad4e8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55633fbad4b0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55633fbad498 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55633fbad478 <col:46> 'int' 1
|-CXXMethodDecl 0x55633fba74d8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55633fba72f0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55633fba7370 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55633fba73f0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55633fbab170 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55633fba75a0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55633fbab240 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55633fbab410 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55633fbab2f8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55633fbab378 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55633fbab4d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55633fbab598 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55633fbab698 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55633fbab710 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55633fbab788 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55633fbab7f0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55633fbab8f0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55633fbab940 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fbab8d0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55633fbab8b0 <col:22> 'int' 14
|-CXXMethodDecl 0x55633fbabb58 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55633fbab970 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55633fbab9f0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55633fbaba70 <col:43> col:46 'int'
|-FriendDecl 0x55633fbabc60 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55633fbabcf0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55633fe3aae0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55633fe3acb8 prev 0x55633fe3aae0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55633fe3ad48 <col:46, col:52> col:46 public
|-TypedefDecl 0x55633fe3ad70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe3c700 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55633fe3c6b0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55633fe3c690 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55633fe3af88 'type'
|     `-SubstTemplateTypeParmType 0x55633fe3af50 'String' sugar
|       |-TemplateTypeParmType 0x55633fb606f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb606a0 'T'
|       `-RecordType 0x55633fb9cee0 'String'
|         `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3c7b8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55633fe3c780 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55633fe3c760 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55633fe3c700 'type'
|     `-ElaboratedType 0x55633fe3c6b0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55633fe3c690 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55633fe3af88 'type'
|         `-SubstTemplateTypeParmType 0x55633fe3af50 'String' sugar
|           |-TemplateTypeParmType 0x55633fb606f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55633fb606a0 'T'
|           `-RecordType 0x55633fb9cee0 'String'
|             `-CXXRecord 0x55633fb9ce50 'String'
|-CXXMethodDecl 0x55633fe3c938 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55633fe3c848 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55633fe3ca28 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55633fe3cb08 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55633fe3cb08
|-CXXMethodDecl 0x55633fe3cdd8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55633fe3cce0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55633fe3d018 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55633fe3ce90 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55633fe3cf08 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3d1e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55633fe3d0d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55633fe3d150 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3d348 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55633fe3d418 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55633fe3d668 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55633fe3d4d8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55633fe3d550 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3d8c8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55633fe3d738 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55633fe3d7b0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3da88 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55633fe3d998 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3dc48 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55633fe3db50 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3dd00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55633fe3ddb0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55633fe3dfe8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55633fe3de60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55633fe3ded8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55633fe3e288 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55633fe3e190 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55633fe3e350 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55633fe3e3a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55633fe3e3f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55633fdd4680 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55633fe39548 prev 0x55633fdd4680 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55633fe3aa50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55633fe3aa00 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55633fe3a9e0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55633fe3a890 'type'
|     `-SubstTemplateTypeParmType 0x55633fe3a720 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55633fb364a0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55633fb36448 'F'
|       `-RecordType 0x55633fe3a380 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55633fe3a2a0 'typed_array_memory'
|-FieldDecl 0x55633fe3e440 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55633fe3e490 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55633fe3e4c8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|   |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|   `-RecordType 0x55633fb9cee0 'String'
|     `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3e558 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55633fe3e520 'String &'
|   `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|     |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|     `-RecordType 0x55633fb9cee0 'String'
|       `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3e5e8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55633fe3e5b0 'const String &'
|   `-QualType 0x55633fe395e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-RecordType 0x55633fb9cee0 'String'
|         `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3e678 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55633fe3e640 'String *'
|   `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|     |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|     `-RecordType 0x55633fb9cee0 'String'
|       `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3e708 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55633fe3e6d0 'const String *'
|   `-QualType 0x55633fe395e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-RecordType 0x55633fb9cee0 'String'
|         `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3f360 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55633fe3f310 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55633fe3f2f0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55633fe3f228 'type'
|     `-LValueReferenceType 0x55633fe3f1f0 'const String &'
|       `-QualType 0x55633fe3ef91 'const String' const
|         `-SubstTemplateTypeParmType 0x55633fe3ef90 'String' sugar
|           |-TemplateTypeParmType 0x55633fb403f0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55633fb40398 'T'
|           `-RecordType 0x55633fb9cee0 'String'
|             `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3f3c8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55633fe3e5b0 'const String &'
|   `-QualType 0x55633fe395e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-RecordType 0x55633fb9cee0 'String'
|         `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3f420 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe3f488 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55633fe3e640 'String *'
|   `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|     |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|     `-RecordType 0x55633fb9cee0 'String'
|       `-CXXRecord 0x55633fb9ce50 'String'
|-TypedefDecl 0x55633fe3f4f0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55633fe3e6d0 'const String *'
|   `-QualType 0x55633fe395e1 'const String' const
|     `-SubstTemplateTypeParmType 0x55633fe395e0 'String' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-RecordType 0x55633fb9cee0 'String'
|         `-CXXRecord 0x55633fb9ce50 'String'
|-EnumDecl 0x55633fe3f548 <line:134:5> col:5
| `-EnumConstantDecl 0x55633fe3f640 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55633fe3f620 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55633fb6f098 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55633fb6f070 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55633fb6f050 <col:40> 'int' 1
|-CXXConstructorDecl 0x55633fe3f6c8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55633fe3f958 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe3f780 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55633fe3f820 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55633fe3fbe8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55633fe3fad0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55633fe3fea8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55633fe3fd90 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55633fe401c0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55633fe400a0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55633fe404d0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55633fe403b0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55633fe407c0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe40608 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55633fe40680 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55633fe408e8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55633fe40998 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe409f0 <col:30> Inherited
|-CXXMethodDecl 0x55633fe40a38 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55633fe40ae8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe40b40 <col:30> Inherited
|-CXXMethodDecl 0x55633fe40c08 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55633fe40cb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe40d10 <col:30> Inherited
|-CXXMethodDecl 0x55633fe40d58 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55633fe40e08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe40e60 <col:30> Inherited
|-CXXMethodDecl 0x55633fe40ea8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55633fe40f58 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe40fb0 <col:30> Inherited
|-CXXMethodDecl 0x55633fe40ff8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55633fe410a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe41100 <col:30> Inherited
|-CXXMethodDecl 0x55633fe41128 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55633fe411d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55633fe41288 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55633fe41448 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe41338 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55633fe413b0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55633fe41598 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55633fe41508 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe41748 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55633fe41650 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55633fe41800 <col:20>
| `-OptimizeNoneAttr 0x55633fe41858 <col:30>
|-CXXMethodDecl 0x55633fe41978 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55633fe41880 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55633fe41a30 <col:20>
| `-OptimizeNoneAttr 0x55633fe41a88 <col:30>
|-CXXMethodDecl 0x55633fe41b40 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55633fe41ab0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe41c88 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55633fe41bf8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe41db8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55633fe41eb8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55633fe41f88 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55633fe42058 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55633fe42198 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55633fe42108 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe422e0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55633fe42250 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe42428 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55633fe42398 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55633fe424e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55633fe425e0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55633fe42550 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55633fe42698 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55633fe42758 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55633fe42858 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55633fe429d8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55633fe42918 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55633fe43198 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55633fe42a90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55633fe430f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55633fe42ff8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55633fe43278 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55633fe433c8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55633fe43338 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55633fe43480 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55633fe436c8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe43540 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55633fe435b8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55633fe43878 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55633fe437b0 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55633fe43a88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55633fe43940 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55633fe439b8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55633fe43b48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55633fe43da8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55633fe43cb0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55633fe43e78 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55633fe43e78

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fdec6f8 prev 0x55633fdd1850 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55633fdec7f0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55633fdec880 <col:22, col:28> col:22 public
|-EnumDecl 0x55633fdec8a8 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55633fdec9c8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdec9a8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55633fdec990 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55633fdec970 <col:14> 'int' 999
| |-EnumConstantDecl 0x55633fdeca70 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdeca50 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55633fdeca38 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55633fdeca18 <col:14> 'int' 1
| |-EnumConstantDecl 0x55633fdecb00 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdecae0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55633fdecac0 <col:17> 'int' 0
| |-EnumConstantDecl 0x55633fdecb90 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdecb70 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55633fdecb50 <col:13> 'int' 1
| |-EnumConstantDecl 0x55633fdecc20 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdecc00 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55633fdecbe0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55633fdeccb0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdecc90 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55633fdecc70 <col:13> 'int' 3
| |-EnumConstantDecl 0x55633fdecd40 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdecd20 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55633fdecd00 <col:15> 'int' 4
| |-EnumConstantDecl 0x55633fdecdd0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdecdb0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55633fdecd90 <col:14> 'int' 5
| |-EnumConstantDecl 0x55633fdece60 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55633fdece40 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55633fdece20 <col:12> 'int' 6
| `-EnumConstantDecl 0x55633fdecef0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55633fdeced0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55633fdeceb0 <col:13> 'int' 7
|-VarDecl 0x55633fdecf60 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55633fdecfe8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55633fded070 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55633fded0f8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55633fded180 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55633fded208 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55633fded290 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55633fded318 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55633fded3a0 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55633fded428 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55633fded4b0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55633fded5b0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55633fdf46b8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55633fdf4e48 <line:128:13> 'int' 0
| `-CompoundStmt 0x55633fdf4eb8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55633fded6a0 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55633fdf4ec8 <col:29, line:132:5>
|-CXXMethodDecl 0x55633fded858 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55633fded790 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fded920 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55633fdeda08 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55633fdf4f20 <col:44, line:161:5>
|   `-ReturnStmt 0x55633fdf4f10 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55633fdf4ef8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdf4ed8 <col:9> 'ErrorHandler *' lvalue Var 0x55633fdf4718 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdedb78 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55633fdedab8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55633fdedc40 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55633fdf4f80 <col:43, line:173:5>
|   `-ReturnStmt 0x55633fdf4f70 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55633fdf4f58 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdf4f38 <col:9> 'ErrorHandler *' lvalue Var 0x55633fdf4790 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55633fdedcf8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55633fdedd78 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55633fdede88 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55633fdeddf8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55633fdedfd8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55633fdedf48 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55633fdee130 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55633fdee098 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55633fdee288 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55633fdee1f0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55633fdee3e0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55633fdee348 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55633fdee5f0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55633fdee498 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55633fdee518 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55633fdee7c8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55633fdee6b0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55633fdee730 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55633fdee9e8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55633fdee888 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55633fdee908 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55633fdeebc8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55633fdeeaa8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55633fdeeb28 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55633fdeeda8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55633fdeec88 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55633fdeed08 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55633fdeef30 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55633fdeee68 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55633fdef100 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55633fdeefe8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55633fdef060 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55633fdf51d8 <col:57, line:234:5>
|   `-ReturnStmt 0x55633fdf51c8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55633fdf51b0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55633fdf5158 <col:9, col:41> 'int'
|         |-MemberExpr 0x55633fdf5128 <col:9> '<bound member function type>' ->xmessage 0x55633fdeef30
|         | `-CXXThisExpr 0x55633fdf5118 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55633fdf5198 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55633fdf5180 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55633fdf50f8 <col:18, col:40> 'String' (CXXTemporary 0x55633fdf50f8)
|               `-CallExpr 0x55633fdf50c0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55633fdf50a8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55633fdf5020 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55633fdf2ea8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55633fdf5040 <col:31> 'const String' lvalue ParmVar 0x55633fdef060 'str' 'const String &'
|                 `-DeclRefExpr 0x55633fdf5060 <col:36> 'const String' lvalue ParmVar 0x55633fdeefe8 'anno' 'const String &'
|-CXXMethodDecl 0x55633fdef440 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55633fdef1c0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55633fdef240 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55633fdef310 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55633fdf5468 <col:68, line:243:5>
|   `-ReturnStmt 0x55633fdf5458 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55633fdf5440 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55633fdf53e0 <col:9, col:41> 'int'
|         |-MemberExpr 0x55633fdf53b0 <col:9> '<bound member function type>' ->xmessage 0x55633fdef100
|         | `-CXXThisExpr 0x55633fdf53a0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55633fdf5278 <col:18> 'const String' lvalue ParmVar 0x55633fdef1c0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55633fdf5428 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55633fdf5410 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55633fdf5380 <col:24, col:40> 'String' (CXXTemporary 0x55633fdf5380)
|               `-CXXMemberCallExpr 0x55633fdf5318 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55633fdf52a8 <col:24> '<bound member function type>' ->vformat 0x55633fdf0620
|                 | `-CXXThisExpr 0x55633fdf5298 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55633fdf5348 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55633fdf52d8 <col:32> 'const char *' lvalue ParmVar 0x55633fdef240 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55633fdf5360 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55633fdf52f8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55633fdef310 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55633fdef6e0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55633fdef508 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55633fdef580 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55633fdef5f8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55633fdf57a8 <col:23, line:254:5>
|   `-ReturnStmt 0x55633fdf5798 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55633fdf5780 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55633fdf5720 <col:9, col:71> 'int'
|         |-MemberExpr 0x55633fdf56f0 <col:9> '<bound member function type>' ->xmessage 0x55633fdef100
|         | `-CXXThisExpr 0x55633fdf56e0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55633fdf5768 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55633fdf5750 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55633fdf56a0 <col:18, col:65> 'String' (CXXTemporary 0x55633fdf56a0)
|         |     `-CallExpr 0x55633fdf5638 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55633fdf5620 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55633fdf5508 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55633fdf2ea8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55633fdf5528 <col:31> 'const String' lvalue ParmVar 0x55633fdef580 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55633fdf5680 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55633fdf5668 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55633fdf5600 <col:37, col:64> 'String' (CXXTemporary 0x55633fdf5600)
|         |             `-CallExpr 0x55633fdf55d0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55633fdf55b8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55633fdf5548 <col:37> 'String (const String &)' lvalue CXXMethod 0x55633fdf34f8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55633fdf5568 <col:56> 'const String' lvalue ParmVar 0x55633fdef508 'landmark' 'const String &'
|         `-DeclRefExpr 0x55633fdf56c0 <col:68> 'const String' lvalue ParmVar 0x55633fdef5f8 'str' 'const String &'
|-CXXMethodDecl 0x55633fdefa60 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55633fdef7a8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55633fdef820 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55633fdef8a0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55633fdef918 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55633fdf5a60 <col:34, line:267:5>
|   `-ReturnStmt 0x55633fdf5a50 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55633fdf5a38 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55633fdf59d0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55633fdf59a0 <col:9> '<bound member function type>' ->xmessage 0x55633fdef6e0
|         | `-CXXThisExpr 0x55633fdf5990 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55633fdf5848 <col:18> 'const String' lvalue ParmVar 0x55633fdef7a8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55633fdf5868 <col:28> 'const String' lvalue ParmVar 0x55633fdef820 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55633fdf5a20 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55633fdf5a08 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55633fdf5970 <col:34, col:50> 'String' (CXXTemporary 0x55633fdf5970)
|               `-CXXMemberCallExpr 0x55633fdf5908 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55633fdf5898 <col:34> '<bound member function type>' ->vformat 0x55633fdf0620
|                 | `-CXXThisExpr 0x55633fdf5888 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55633fdf5938 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55633fdf58c8 <col:42> 'const char *' lvalue ParmVar 0x55633fdef8a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55633fdf5950 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55633fdf58e8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55633fdef918 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55633fdefb70 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55633fdf5ae0 <col:25, line:288:5>
|   `-ReturnStmt 0x55633fdf5ad0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55633fdf5ab8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55633fdf5a88 <col:9> 'const int' lvalue ->_nerrors 0x55633fdf46b8
|         `-CXXThisExpr 0x55633fdf5a78 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55633fdefd80 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55633fdefc28 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55633fdefca8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55633fdf0068 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55633fdefe48 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55633fdefec8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55633fdeff40 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55633fdf0200 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55633fdf0138 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55633fdf0448 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55633fdf02c0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55633fdf0338 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55633fdf5d40 <col:58, line:357:5>
|   `-ReturnStmt 0x55633fdf5d30 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55633fdf5d18 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55633fdf5ce8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55633fdf5cd0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55633fdf5cb0 <col:9, col:29> 'String' (CXXTemporary 0x55633fdf5cb0)
|             `-CallExpr 0x55633fdf5c40 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55633fdf5c28 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55633fdf5ba8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55633fdf0068 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55633fdf5b48 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55633fdf5c78 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55633fdf5b68 <col:21> 'const char *' lvalue ParmVar 0x55633fdf02c0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55633fdf5c90 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55633fdf5b88 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55633fdf0338 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55633fdf0620 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55633fdf0510 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55633fdf0588 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55633fdf0778 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55633fdf06e8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55633fdf08f8 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55633fdf0830 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55633fdf0b90 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55633fdf09b0 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55633fdf0a30 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55633fdf0aa8 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55633fdf0cf0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55633fdf0c60 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55633fdf5e58 <col:37, line:441:5>
|   `-IfStmt 0x55633fdf5e40 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55633fdf5dc8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55633fdf5d98 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55633fdf5d58 <col:6> 'int' lvalue ParmVar 0x55633fdf0c60 'level' 'int'
|     | `-ImplicitCastExpr 0x55633fdf5db0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55633fdf5d78 <col:15> 'ErrorHandler::Level' EnumConstant 0x55633fdeccb0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55633fdf5e28 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55633fdf5df8 <col:8> 'int' lvalue ->_nerrors 0x55633fdf46b8
|         `-CXXThisExpr 0x55633fdf5de8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55633fdf0db8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55633fdf5ef0 <col:26, line:448:5>
|   `-BinaryOperator 0x55633fdf5ed0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55633fdf5e80 <col:2> 'int' lvalue ->_nerrors 0x55633fdf46b8
|     | `-CXXThisExpr 0x55633fdf5e70 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55633fdf5eb0 <col:13> 'int' 0
|-CXXMethodDecl 0x55633fdf0f80 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55633fdf0e70 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55633fdf0ee8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55633fdf2ea8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55633fdf1040 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55633fdf10b8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55633fdf3158 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55633fdf2f68 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55633fdf2fe8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55633fdf3068 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55633fdf3210 <col:59> 0 0
|-CXXMethodDecl 0x55633fdf33a8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55633fdf3288 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55633fdf3308 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55633fdf6560 <col:70, line:534:5>
|   |-DeclStmt 0x55633fdf6060 <line:528:2, col:20>
|   | |-VarDecl 0x55633fdf5f18 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55633fdf5f80 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55633fdf5fb8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55633fdf6020 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55633fdf6130 <line:529:2, col:23>
|   | `-VarDecl 0x55633fdf6090 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55633fdf6118 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55633fdf60f8 <col:18> 'const char *' lvalue ParmVar 0x55633fdf3288 'begin' 'const char *'
|   |-DoStmt 0x55633fdf64f8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55633fdf6428 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55633fdf6410 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55633fdf63f0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55633fdf6148 <col:6> 'const char *' lvalue Var 0x55633fdf6090 'x' 'const char *'
|   | |     `-CallExpr 0x55633fdf6340 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55633fdf6328 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55633fdf62e0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55633fdf4b90 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55633fdf63a8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55633fdf6390 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55633fdf6200 <col:20, col:27> 'String' (CXXTemporary 0x55633fdf6200)
|   | |       |     `-CXXTemporaryObjectExpr 0x55633fdf61c8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55633fdf63c0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55633fdf6220 <col:30> 'const char *' lvalue Var 0x55633fdf6090 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55633fdf63d8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55633fdf6240 <col:33> 'const char *' lvalue ParmVar 0x55633fdf3308 'end' 'const char *'
|   | |       |-UnaryOperator 0x55633fdf6280 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55633fdf6260 <col:39> 'String' lvalue Var 0x55633fdf5f18 'name' 'String'
|   | |       |-UnaryOperator 0x55633fdf62b8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55633fdf6298 <col:46> 'String' lvalue Var 0x55633fdf5fb8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55633fdf62d0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55633fdf64e0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55633fdf64c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55633fdf64a8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55633fdf6478 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|   |         `-ImplicitCastExpr 0x55633fdf6460 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55633fdf6440 <col:11> 'String' lvalue Var 0x55633fdf5f18 'name' 'String'
|   `-ReturnStmt 0x55633fdf6550 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55633fdf6538 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdf6518 <col:9> 'const char *' lvalue Var 0x55633fdf6090 'x' 'const char *'
|-CXXMethodDecl 0x55633fdf34f8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55633fdf3468 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55633fdf6b68 <col:55, line:550:5>
|   `-IfStmt 0x55633fdf6b40 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55633fdf67a0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55633fdf6788 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55633fdf6770 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55633fdf6750 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55633fdf6720 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|     | |       `-DeclRefExpr 0x55633fdf65c0 <col:6> 'const String' lvalue ParmVar 0x55633fdf3468 'x' 'const String &'
|     | `-BinaryOperator 0x55633fdf6700 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55633fdf66d0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55633fdf6680 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55633fdf6668 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55633fdf6620 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55633fbb9e80 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55633fdf65e0 <col:11> 'const String' lvalue ParmVar 0x55633fdf3468 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55633fdf6600 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55633fdf66e8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55633fdf66b8 <col:19> 'char' 123
|     |-ReturnStmt 0x55633fdf6810 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55633fdf67e0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55633fdf67c0 <col:13> 'const String' lvalue ParmVar 0x55633fdf3468 'x' 'const String &'
|     `-IfStmt 0x55633fdf6b18 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55633fdf68a8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55633fdf6890 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55633fdf6870 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55633fdf6840 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |       `-DeclRefExpr 0x55633fdf6820 <col:11> 'const String' lvalue ParmVar 0x55633fdf3468 'x' 'const String &'
|       |-ReturnStmt 0x55633fdf6a30 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55633fdf6a18 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55633fdf69e8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55633fdf69d0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55633fdf69b0 <col:13, col:29> 'String' (CXXTemporary 0x55633fdf69b0)
|       |         `-CallExpr 0x55633fdf6960 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55633fdf6948 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55633fdf68c0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55633fdf0f80 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55633fdf6990 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55633fdf68e0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55633fdf6900 <col:28> 'const String' lvalue ParmVar 0x55633fdf3468 'x' 'const String &'
|       `-ReturnStmt 0x55633fdf6b08 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55633fdf6af0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55633fdf6ac0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55633fdf6aa8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55633fdf6a88 <col:13, col:20> 'String' (CXXTemporary 0x55633fdf6a88)
|                 `-CXXTemporaryObjectExpr 0x55633fdf6a50 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55633fdf36f8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55633fdf35b0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55633fdf3628 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55633fdf4e38 <col:71> 'bool' false
|-CXXRecordDecl 0x55633fdf37a8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55633fdf3aa8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55633fdf3a40 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55633fdf39e0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55633fdf39a0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55633fb9cee0 'String'
|       | `-CXXRecord 0x55633fb9ce50 'String'
|       |-BuiltinType 0x55633f870370 'int'
|       `-DecayedType 0x55633fdef2e0 '__va_list_tag *' sugar
|         |-TypedefType 0x55633fdef2b0 'va_list' sugar
|         | |-Typedef 0x55633fa8df90 'va_list'
|         | `-TypedefType 0x55633fa8df40 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55633f9c5b68 '__gnuc_va_list'
|         |   `-TypedefType 0x55633f9c5ad0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55633f8b1bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55633f8b1b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55633f8710c0 '__va_list_tag'
|         |         `-CXXRecord 0x55633f871028 '__va_list_tag'
|         `-PointerType 0x55633fa93830 '__va_list_tag *'
|           `-RecordType 0x55633f8710c0 '__va_list_tag'
|             `-CXXRecord 0x55633f871028 '__va_list_tag'
|-EnumDecl 0x55633fdf3b00 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55633fdf3c00 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf4160 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3be0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55633fdf3bc0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55633fdf3c90 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf4178 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3c70 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55633fdf3c50 <col:21> 'int' 2
| |-EnumConstantDecl 0x55633fdf3d20 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf4190 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3d00 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55633fdf3ce0 <col:22> 'int' 4
| |-EnumConstantDecl 0x55633fdf3db0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf41a8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3d90 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55633fdf3d70 <col:17> 'int' 8
| |-EnumConstantDecl 0x55633fdf3e40 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf41c0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3e20 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55633fdf3e00 <col:22> 'int' 16
| |-EnumConstantDecl 0x55633fdf3ed0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf41d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3eb0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55633fdf3e90 <col:19> 'int' 32
| |-EnumConstantDecl 0x55633fdf3f60 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf41f0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3f40 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55633fdf3f20 <col:17> 'int' 64
| |-EnumConstantDecl 0x55633fdf3ff0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf4208 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf3fd0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55633fdf3fb0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55633fdf4080 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55633fdf4220 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fdf4060 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55633fdf4040 <col:16> 'int' 256
| `-EnumConstantDecl 0x55633fdf4110 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55633fdf4238 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fdf40f0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55633fdf40d0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55633fdf4448 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55633fdf4260 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55633fdf4300 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55633fdf45d0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55633fdf4508 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55633fdf4678 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55633fdf46b8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55633fdf4718 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55633fdf4790 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55633fdf4b90 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55633fdf4808 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55633fdf4888 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55633fdf4908 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55633fdf4980 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55633fdf49f8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55633fdf4a70 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55633fdf4cb8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55633fdf4cb8
| `-ParmVarDecl 0x55633fdf4dc8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55633fdf6ec8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55633fdf6ec8
  `-ParmVarDecl 0x55633fdf6fd8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fe524b8 prev 0x55633fd97128 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fe525b0 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55633fe52640 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55633fe52748 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55633fe52678 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55633fe53b20 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fe53b00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55633fe53698 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55633fe53bb0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55633fe53b70 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55633fe52678 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55633fe53700 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55633fe53c30 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fe53bf0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55633fe53760 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55633fe53c70 <col:54> 'bool' false
| `-CompoundStmt 0x55633fe53d78 <col:61, line:38:5>
|   `-BinaryOperator 0x55633fe53d58 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55633fe53cf0 <col:9> 'const Element *' lvalue ->_context 0x55633fe53638
|     | `-CXXThisExpr 0x55633fe53ce0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55633fe53d40 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55633fe53d20 <col:20> 'int' 0
|-CXXConstructorDecl 0x55633fe52958 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fe52808 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55633fe52880 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55633fe53b58 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fe53b38 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55633fe53638 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55633fe53dd0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55633fe53d90 <col:20> 'const Element *' lvalue ParmVar 0x55633fe52808 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55633fe53698 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55633fe53e50 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55633fe53e10 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55633fe52880 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55633fe53700 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55633fe53ed0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55633fe53e90 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55633fe53760 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55633fe53f10 <col:73> 'bool' false
| `-CompoundStmt 0x55633fe53f88 <col:80, line:46:5>
|-CXXMethodDecl 0x55633fe52a88 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55633fe54000 <col:36, line:51:5>
|   `-ReturnStmt 0x55633fe53ff0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55633fe53fd8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55633fe53fa8 <col:16> 'const Element *const' lvalue ->_context 0x55633fe53638
|         `-CXXThisExpr 0x55633fe53f98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55633fe52b78 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55633fe54080 <col:32, line:57:5>
|   `-ReturnStmt 0x55633fe54070 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55633fe54058 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55633fe54028 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55633fe53698
|         `-CXXThisExpr 0x55633fe54018 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55633fe52c38 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55633fe52dc0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55633fe52cf0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55633fe52f10 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55633fe52e80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55633fe53060 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55633fe52fd0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55633fe53268 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55633fe53118 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55633fe53190 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55633fe53548 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55633fe53328 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55633fe533a8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55633fe53420 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55633fe53600 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55633fe53638 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55633fe53698 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55633fe53700 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55633fe53760 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55633fe537b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55633fe537b0
| `-ParmVarDecl 0x55633fe538c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55633fe53968 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55633fe53968
| `-ParmVarDecl 0x55633fe53a78 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55633febb818 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55633fe73be0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55633fe73db8 prev 0x55633fe73be0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55633fe73e48 <col:46, col:52> col:46 public
|-TypedefDecl 0x55633fe73e70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe809e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55633fe80990 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55633fe74320 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55633fe74220 'type'
|     `-TemplateSpecializationType 0x55633fe741b0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55633fe74090 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55633fe74070 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55633fe74050 <col:24> 'unsigned long' 4
|       `-RecordType 0x55633fe74190 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55633fe740b0 'char_array'
|-TypedefDecl 0x55633fe80a98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55633fe80a60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55633fe80a40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55633fe809e0 'type'
|     `-ElaboratedType 0x55633fe80990 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55633fe74320 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55633fe74220 'type'
|         `-TemplateSpecializationType 0x55633fe741b0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55633fe74090 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55633fe74070 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55633fe74050 <col:24> 'unsigned long' 4
|           `-RecordType 0x55633fe74190 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55633fe740b0 'char_array'
|-CXXMethodDecl 0x55633fe80c18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55633fe80b28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55633fe80d08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55633fe80de8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55633fe810b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55633fe80fc0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55633fe812f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55633fe81170 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55633fe811e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe814c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55633fe813b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55633fe81430 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe81628 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55633fe816f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55633fe81948 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55633fe817b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55633fe81830 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe81ba8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55633fe81a18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55633fe81a90 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe81d68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55633fe81c78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe81f28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55633fe81e30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe81fe0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55633fe82090 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55633fe822c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55633fe82140 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55633fe821b8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55633fe82568 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55633fe82470 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55633fe82630 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55633fe82680 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55633fe826d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55633fe725e8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55633fe727f8 prev 0x55633fe725e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55633fe73b50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55633fe73b00 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55633fe73ae0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55633fe73990 'type'
|     `-SubstTemplateTypeParmType 0x55633fe737b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55633fb35d20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb35cc8 'T'
|       `-RecordType 0x55633fe73300 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55633fe73218 'sized_array_memory'
|-FieldDecl 0x55633fe82720 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55633fe82770 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55633fe827a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|   |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|   `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe82838 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55633fe82800 'int &'
|   `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|     |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|     `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe828f8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55633fe828c0 'const int &'
|   `-QualType 0x55633fe72891 'const int' const
|     `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe82988 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55633fe82950 'int *'
|   `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|     |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|     `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe82a18 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55633fe829e0 'const int *'
|   `-QualType 0x55633fe72891 'const int' const
|     `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe83600 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55633fe835b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55633fe83590 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55633fe83520 'type'
|     `-SubstTemplateTypeParmType 0x55633fe832e0 'int' sugar
|       |-TemplateTypeParmType 0x55633fb40b20 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb40ad0 'T'
|       `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe83668 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55633fe828c0 'const int &'
|   `-QualType 0x55633fe72891 'const int' const
|     `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe836c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe83728 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55633fe82950 'int *'
|   `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|     |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|     `-BuiltinType 0x55633f870370 'int'
|-TypedefDecl 0x55633fe83790 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55633fe829e0 'const int *'
|   `-QualType 0x55633fe72891 'const int' const
|     `-SubstTemplateTypeParmType 0x55633fe72890 'int' sugar
|       |-TemplateTypeParmType 0x55633fb6da10 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55633fb6d9b8 'T'
|       `-BuiltinType 0x55633f870370 'int'
|-EnumDecl 0x55633fe837e8 <line:134:5> col:5
| `-EnumConstantDecl 0x55633fe838e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55633fe838c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55633fb6f098 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55633fb6f070 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55633fb6f050 <col:40> 'int' 1
|-CXXConstructorDecl 0x55633fe83968 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55633fe83bb8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe83a20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55633fe83ac0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55633fe83e78 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55633fe83d60 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55633fe84138 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55633fe84020 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55633fe84480 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55633fe84360 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55633fe84790 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55633fe84670 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55633fe84a80 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe848c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55633fe84940 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55633fe84ba8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55633fe84c88 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe84ce0 <col:30> Inherited
|-CXXMethodDecl 0x55633fe84d28 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55633fe84dd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe84e30 <col:30> Inherited
|-CXXMethodDecl 0x55633fe84ef8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55633fe84fa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe85000 <col:30> Inherited
|-CXXMethodDecl 0x55633fe85048 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55633fe850f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe85150 <col:30> Inherited
|-CXXMethodDecl 0x55633fe85198 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55633fe85248 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe852a0 <col:30> Inherited
|-CXXMethodDecl 0x55633fe852e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55633fe85398 <col:20> Inherited
| `-OptimizeNoneAttr 0x55633fe853f0 <col:30> Inherited
|-CXXMethodDecl 0x55633fe85418 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55633fe854c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55633fe85578 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55633fe85738 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe85628 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55633fe856a0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55633fe85888 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55633fe857f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe85a38 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55633fe85940 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55633fe85af0 <col:20>
| `-OptimizeNoneAttr 0x55633fe85b48 <col:30>
|-CXXMethodDecl 0x55633fe85c68 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55633fe85b70 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55633fe85d20 <col:20>
| `-OptimizeNoneAttr 0x55633fe85d78 <col:30>
|-CXXMethodDecl 0x55633fe85e30 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55633fe85da0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe85f78 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55633fe85ee8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe860a8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55633fe861d8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55633fe862a8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55633fe86378 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55633fe864b8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55633fe86428 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe86600 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55633fe86570 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55633fe86748 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55633fe866b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55633fe86800 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55633fe86900 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55633fe86870 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55633fe869b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55633fe86a78 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55633fe86b78 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55633fe86cf8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55633fe86c38 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55633fe874b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55633fe86db0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55633fe87418 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55633fe87318 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55633fe87598 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55633fe876e8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55633fe87658 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55633fe877a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55633fe879e8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55633fe87860 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55633fe878d8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55633fe87ba8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55633fe87ab8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55633fe87df8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55633fe87c70 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55633fe87ce8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55633fe87eb8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55633fe88118 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55633fe88020 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55633fe881e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fe70758 prev 0x55633fe58fa8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55633fe70850 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55633fe70940 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55633fe9ad60 <col:16, line:828:9>
|-CXXDestructorDecl 0x55633fe70a30 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55633fe9ad70 <col:25, line:830:9>
|-CXXMethodDecl 0x55633fe70b30 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55633fe70be0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55633fe70c88 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55633fe70c88
| `-ParmVarDecl 0x55633fe70d98 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55633fe71558 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55633fe71558
  `-ParmVarDecl 0x55633fe71668 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fe58db8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55633fe58f18 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55633fe58fa8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55633fe59060 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55633fe59168 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55633fe59098 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55633fe8a858 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55633fe8a838 <col:31> 'int' 0
|-CXXConstructorDecl 0x55633fe59488 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55633fe59300 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55633fe59378 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55633fe8a890 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55633fe8a870 <col:59> 'int' 0
|-CXXConstructorDecl 0x55633fe59660 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fe59550 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55633fe595c8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55633fe8a8c8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55633fe8a8a8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55633fe59a18 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55633fe59800 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55633fe59878 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55633fe598f0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55633fe8a900 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55633fe8a8e0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55633fe59bd8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55633fe59b18 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55633fe59cd0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55633fe59eb8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55633fe59dc0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55633fe59fa8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55633fe8acb0 <col:24, line:291:5>
|   `-ReturnStmt 0x55633fe8aca0 <line:290:9, col:79>
|     `-BinaryOperator 0x55633fe8ac80 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55633fe8ab58 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55633fe8aab0 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55633fe8aa90 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55633fe8a988 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55633fe8a970 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55633fe8a958 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55633fe8a928 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55633fe72580
|       | |   |       `-CXXThisExpr 0x55633fe8a918 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55633fe8aa78 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55633fe8aa60 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55633fe8aa28 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55633fe8a9f8 <col:28, col:35> '<bound member function type>' ->size 0x55633fe41128
|       | |           `-ImplicitCastExpr 0x55633fe8aa48 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55633fe8a9e0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55633fe8a9b0 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55633fe72580
|       | |                 `-CXXThisExpr 0x55633fe8a9a0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55633fe8ab40 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55633fe8ab28 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55633fe8ab10 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55633fe8aae0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55633fe88330
|       |         `-CXXThisExpr 0x55633fe8aad0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55633fe8ac60 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55633fe8ac48 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55633fe8ac30 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55633fe8abf0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55633fe8abd8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55633fe8ab88 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55633fe883e0
|         |     |   `-CXXThisExpr 0x55633fe8ab78 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55633fe8abb8 <col:73> 'int' 0
|         `-IntegerLiteral 0x55633fe8ac10 <col:79> 'int' 0
|-CXXMethodDecl 0x55633fe5a068 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55633fe8ae88 <col:32, line:296:5>
|   `-ReturnStmt 0x55633fe8ae78 <line:295:9, col:49>
|     `-BinaryOperator 0x55633fe8ae58 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55633fe8ad38 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55633fe8ad20 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55633fe8ad08 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55633fe8acd8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55633fe88330
|       |       `-CXXThisExpr 0x55633fe8acc8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55633fe8ae38 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55633fe8ae20 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55633fe8ae08 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55633fe8adc8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55633fe8adb0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55633fe8ad60 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55633fe883e0
|         |     |   `-CXXThisExpr 0x55633fe8ad50 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55633fe8ad90 <col:43> 'int' 0
|         `-IntegerLiteral 0x55633fe8ade8 <col:49> 'int' 0
|-CXXMethodDecl 0x55633fe5a158 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55633fe8b098 <col:19, line:306:5>
|   |-IfStmt 0x55633fe8afb8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55633fe8aef8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55633fe8aee0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55633fe8aeb0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55633fe72580
|   | |     `-CXXThisExpr 0x55633fe8aea0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55633fe8af98 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55633fe8af68 <col:13, col:20> '<bound member function type>' ->clear 0x55633fe43b48
|   |     `-ImplicitCastExpr 0x55633fe8af50 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55633fe8af20 <col:13> 'Vector<String> *' lvalue ->_conf 0x55633fe72580
|   |         `-CXXThisExpr 0x55633fe8af10 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55633fe8b040 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55633fe8b010 <col:9, col:16> '<bound member function type>' .clear 0x55633fe87eb8
|   |   `-MemberExpr 0x55633fe8afe0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55633fe882d0
|   |     `-CXXThisExpr 0x55633fe8afd0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55633fe8b088 <line:305:9, col:17>
|     `-UnaryOperator 0x55633fe8b070 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fe8b060 <col:17> 'Args *' this
|-CXXMethodDecl 0x55633fe5a3d8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55633fe5a2e0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55633fe5a558 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55633fe5a490 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55633fe5a8d8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55633fe5a600 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55633fe5a838 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55633fe5a6a8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55633fe5a720 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55633fe8b3b8 <col:67, line:327:5>
|     |-WhileStmt 0x55633fe8b368 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55633fe8b180 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55633fe8b100 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55633fd8f5f8 0x55633fbd8bd8 0x55633fbd88b0 0x55633fbca090 0x55633fbc9d40 0x55633fbc9630 0x55633fb9bfa0 0x55633fb28460
|     | | |-DeclRefExpr 0x55633fe8b0c0 <col:16> 'Iter' lvalue ParmVar 0x55633fe5a6a8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55633fe8b0e0 <col:25> 'Iter' lvalue ParmVar 0x55633fe5a720 'end' 'Iter'
|     | `-CompoundStmt 0x55633fe8b348 <col:30, line:325:9>
|     |   |-CallExpr 0x55633fe8b2e8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55633fe8b1c8 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55633fe8b2b8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55633fe8b248 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|     |   |   `-DeclRefExpr 0x55633fe8b228 <col:24> 'Iter' lvalue ParmVar 0x55633fe5a6a8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55633fe8b330 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55633fe8b310 <col:15> 'Iter' lvalue ParmVar 0x55633fe5a6a8 'begin' 'Iter'
|     `-ReturnStmt 0x55633fe8b3a8 <line:326:9, col:17>
|       `-UnaryOperator 0x55633fe8b390 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8b380 <col:17> 'Args *' this
|-CXXMethodDecl 0x55633fe5a9e0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55633fe5a950 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55633fe5ab28 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55633fe5aa98 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55633fe5abf0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55633fe8b498 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55633fe8b438 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55633fe8b3e8 <col:9> '<bound member function type>' ->reset_from 0x55633fe89800
|   | | `-CXXThisExpr 0x55633fe8b3d8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55633fe8b418 <col:20> 'int' 0
|   `-ReturnStmt 0x55633fe8b488 <line:352:9, col:17>
|     `-UnaryOperator 0x55633fe8b470 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fe8b460 <col:17> 'Args *' this
|-VarDecl 0x55633fe5aca8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55633fe5ad10 <col:38> 'int' 1
|-VarDecl 0x55633fe5ada0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55633fe5ae08 <col:39> 'int' 2
|-VarDecl 0x55633fe5ae98 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55633fe5af00 <col:39> 'int' 4
|-VarDecl 0x55633fe5af90 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55633fe5aff8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55633fe5b378 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55633fe5b070 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe5b2d8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55633fe5b120 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5b1c8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8b5f0 <col:43, line:371:5>
|     `-ReturnStmt 0x55633fe8b5e0 <line:370:9, col:34>
|       `-CallExpr 0x55633fe8b5a8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8b4c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8b548 <col:21> 'const char *' lvalue ParmVar 0x55633fe5b120 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8b568 <col:30> 'int' 0
|         `-DeclRefExpr 0x55633fe8b588 <col:33> 'T' lvalue ParmVar 0x55633fe5b1c8 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5b6a8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55633fe5b3e0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe5b608 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55633fe5b490 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5b538 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8b740 <col:45, line:375:5>
|     `-ReturnStmt 0x55633fe8b730 <line:374:9, col:42>
|       `-CallExpr 0x55633fe8b6f8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8b618 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8b698 <col:21> 'const char *' lvalue ParmVar 0x55633fe5b490 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8b6b8 <col:30> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55633fe8b6d8 <col:41> 'T' lvalue ParmVar 0x55633fe5b538 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5b9d8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55633fe5b710 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe5b938 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55633fe5b7c0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5b868 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8b890 <col:45, line:379:5>
|     `-ReturnStmt 0x55633fe8b880 <line:378:9, col:43>
|       `-CallExpr 0x55633fe8b848 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8b768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8b7e8 <col:21> 'const char *' lvalue ParmVar 0x55633fe5b7c0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8b808 <col:30> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int'
|         `-DeclRefExpr 0x55633fe8b828 <col:42> 'T' lvalue ParmVar 0x55633fe5b868 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5bd08 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55633fe5ba40 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55633fe5bc68 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55633fe5baf0 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55633fe5bb98 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55633fe8ba90 <col:46, line:383:5>
| |   `-ReturnStmt 0x55633fe8ba80 <line:382:9, col:55>
| |     `-CallExpr 0x55633fe8ba48 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55633fe8b8b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55633fe8b938 <col:21> 'const char *' lvalue ParmVar 0x55633fe5baf0 'keyword' 'const char *'
| |       |-BinaryOperator 0x55633fe8ba08 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55633fe8b9b8 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55633fe8b998 <col:30> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55633fe8b9f0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55633fe8b9d0 <col:42> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55633fe8ba28 <col:54> 'T' lvalue ParmVar 0x55633fe5bb98 'x' 'T &'
| `-CXXMethodDecl 0x55633febbcb8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55633febbad0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55633febbba8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55633fe5c108 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55633fe5bd70 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe5c068 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55633fe5be20 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5bea0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe5bf48 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8bbd0 <col:54, line:388:5>
|     |-CallExpr 0x55633fe8bb58 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8baa8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55633fe8bae8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8baf8 <col:30> 'const char *' lvalue ParmVar 0x55633fe5be20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55633fe8bb18 <col:39> 'int' lvalue ParmVar 0x55633fe5bea0 'flags' 'int'
|     | `-DeclRefExpr 0x55633fe8bb38 <col:46> 'T' lvalue ParmVar 0x55633fe5bf48 'x' 'T &'
|     `-ReturnStmt 0x55633fe8bbc0 <line:387:9, col:17>
|       `-UnaryOperator 0x55633fe8bba8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8bb98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe5c5b8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55633fe5c178 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55633fe5c1f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55633fe5c518 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55633fe5c2b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5c358 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe5c3f8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55633fe8bd40 <col:74, line:403:5>
|     `-ReturnStmt 0x55633fe8bd30 <line:402:9, col:56>
|       `-CallExpr 0x55633fe8bcf0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8bc00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8bc70 <col:28> 'const char *' lvalue ParmVar 0x55633fe5c2b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8bc90 <col:37> 'int' 0
|         |-DeclRefExpr 0x55633fe8bcb0 <col:40> 'T' lvalue ParmVar 0x55633fe5c358 'x' 'T &'
|         `-DeclRefExpr 0x55633fe8bcd0 <col:43> 'const V' lvalue ParmVar 0x55633fe5c3f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55633fe5ca28 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55633fe5c628 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55633fe5c6a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55633fe5c988 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55633fe5c768 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5c808 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe5c8a8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55633fe8bea8 <col:76, line:407:5>
|     `-ReturnStmt 0x55633fe8be98 <line:406:9, col:65>
|       `-CallExpr 0x55633fe8be58 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8bd68 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8bdd8 <col:28> 'const char *' lvalue ParmVar 0x55633fe5c768 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8bdf8 <col:37> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int'
|         |-DeclRefExpr 0x55633fe8be18 <col:49> 'T' lvalue ParmVar 0x55633fe5c808 'x' 'T &'
|         `-DeclRefExpr 0x55633fe8be38 <col:52> 'const V' lvalue ParmVar 0x55633fe5c8a8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55633fe5cf78 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55633fe5ca98 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55633fe5cb18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55633fe5ced8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55633fe5cbd8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5cc58 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe5ccf8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe5cd98 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55633fe8c010 <col:85, line:412:5>
|     |-CallExpr 0x55633fe8bf90 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8bec0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55633fe8bf00 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8bf10 <col:37> 'const char *' lvalue ParmVar 0x55633fe5cbd8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55633fe8bf30 <col:46> 'int' lvalue ParmVar 0x55633fe5cc58 'flags' 'int'
|     | |-DeclRefExpr 0x55633fe8bf50 <col:53> 'T' lvalue ParmVar 0x55633fe5ccf8 'x' 'T &'
|     | `-DeclRefExpr 0x55633fe8bf70 <col:56> 'const V' lvalue ParmVar 0x55633fe5cd98 'default_value' 'const V &'
|     `-ReturnStmt 0x55633fe8c000 <line:411:9, col:17>
|       `-UnaryOperator 0x55633fe8bfe8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8bfd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe5d408 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55633fe5cff0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5d068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe5d368 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe5d128 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5d1a0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5d248 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8c190 <col:53, line:425:5>
|     `-ReturnStmt 0x55633fe8c180 <line:424:9, col:42>
|       `-CallExpr 0x55633fe8c140 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8c040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8c0c0 <col:21> 'const char *' lvalue ParmVar 0x55633fe5d128 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8c0e0 <col:30> 'int' 0
|         |-DeclRefExpr 0x55633fe8c100 <col:33> 'P' lvalue ParmVar 0x55633fe5d1a0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8c120 <col:41> 'T' lvalue ParmVar 0x55633fe5d248 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5d858 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55633fe5d478 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5d4f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe5d7b8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe5d5b8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5d630 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5d6d8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8c308 <col:55, line:429:5>
|     `-ReturnStmt 0x55633fe8c2f8 <line:428:9, col:50>
|       `-CallExpr 0x55633fe8c2b8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8c1b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8c238 <col:21> 'const char *' lvalue ParmVar 0x55633fe5d5b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8c258 <col:30> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55633fe8c278 <col:41> 'P' lvalue ParmVar 0x55633fe5d630 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8c298 <col:49> 'T' lvalue ParmVar 0x55633fe5d6d8 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5dca8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55633fe5d8c8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5d948 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe5dc08 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe5da08 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5da80 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5db28 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8c480 <col:55, line:433:5>
|     `-ReturnStmt 0x55633fe8c470 <line:432:9, col:51>
|       `-CallExpr 0x55633fe8c430 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8c330 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8c3b0 <col:21> 'const char *' lvalue ParmVar 0x55633fe5da08 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8c3d0 <col:30> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int'
|         |-DeclRefExpr 0x55633fe8c3f0 <col:42> 'P' lvalue ParmVar 0x55633fe5da80 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8c410 <col:50> 'T' lvalue ParmVar 0x55633fe5db28 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5e0f8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55633fe5dd18 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5dd98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe5e058 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe5de58 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5ded0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5df78 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8c6a8 <col:56, line:437:5>
|     `-ReturnStmt 0x55633fe8c698 <line:436:9, col:63>
|       `-CallExpr 0x55633fe8c658 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8c4a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8c528 <col:21> 'const char *' lvalue ParmVar 0x55633fe5de58 'keyword' 'const char *'
|         |-BinaryOperator 0x55633fe8c5f8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55633fe8c5a8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55633fe8c588 <col:30> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55633fe8c5e0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55633fe8c5c0 <col:42> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55633fe8c618 <col:54> 'P' lvalue ParmVar 0x55633fe5ded0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8c638 <col:62> 'T' lvalue ParmVar 0x55633fe5df78 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe5e628 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55633fe5e168 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5e1e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe5e588 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55633fe5e2a8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5e328 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe5e3a0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5e448 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8c810 <col:64, line:442:5>
|     |-CallExpr 0x55633fe8c790 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8c6c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55633fe8c700 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8c710 <col:30> 'const char *' lvalue ParmVar 0x55633fe5e2a8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55633fe8c730 <col:39> 'int' lvalue ParmVar 0x55633fe5e328 'flags' 'int'
|     | |-DeclRefExpr 0x55633fe8c750 <col:46> 'P' lvalue ParmVar 0x55633fe5e3a0 'parser' 'P'
|     | `-DeclRefExpr 0x55633fe8c770 <col:54> 'T' lvalue ParmVar 0x55633fe5e448 'x' 'T &'
|     `-ReturnStmt 0x55633fe8c800 <line:441:9, col:17>
|       `-UnaryOperator 0x55633fe8c7e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8c7d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe5ec28 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55633fe5e6a0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5e718 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55633fe5e798 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55633fe5eb88 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55633fe5e860 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5e8d8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5e978 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe5ea48 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55633fe8c9a8 <col:84, line:458:5>
|     `-ReturnStmt 0x55633fe8c998 <line:457:9, col:64>
|       `-CallExpr 0x55633fe8c950 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8c840 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8c8b0 <col:28> 'const char *' lvalue ParmVar 0x55633fe5e860 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8c8d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55633fe8c8f0 <col:40> 'P' lvalue ParmVar 0x55633fe5e8d8 'parser' 'P'
|         |-DeclRefExpr 0x55633fe8c910 <col:48> 'T' lvalue ParmVar 0x55633fe5e978 'x' 'T &'
|         `-DeclRefExpr 0x55633fe8c930 <col:51> 'const V' lvalue ParmVar 0x55633fe5ea48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55633fe5f770 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55633fe5eca0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5ed18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55633fe5ed98 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55633fe5f108 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55633fe5ee60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5eed8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5ef78 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe5f018 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55633fe8cb38 <col:86, line:462:5>
|     `-ReturnStmt 0x55633fe8cb28 <line:461:9, col:73>
|       `-CallExpr 0x55633fe8cae0 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8c9d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8ca40 <col:28> 'const char *' lvalue ParmVar 0x55633fe5ee60 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8ca60 <col:37> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int'
|         |-DeclRefExpr 0x55633fe8ca80 <col:49> 'P' lvalue ParmVar 0x55633fe5eed8 'parser' 'P'
|         |-DeclRefExpr 0x55633fe8caa0 <col:57> 'T' lvalue ParmVar 0x55633fe5ef78 'x' 'T &'
|         `-DeclRefExpr 0x55633fe8cac0 <col:60> 'const V' lvalue ParmVar 0x55633fe5f018 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55633fe5fdd8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55633fe5f7e8 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5f868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55633fe5f8e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55633fe5fd38 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55633fe5f9b0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe5fa30 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe5faa8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe5fb48 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe5fbe8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55633fe8ccc8 <col:95, line:467:5>
|     |-CallExpr 0x55633fe8cc40 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8cb50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55633fe8cb90 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8cba0 <col:37> 'const char *' lvalue ParmVar 0x55633fe5f9b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55633fe8cbc0 <col:46> 'int' lvalue ParmVar 0x55633fe5fa30 'flags' 'int'
|     | |-DeclRefExpr 0x55633fe8cbe0 <col:53> 'P' lvalue ParmVar 0x55633fe5faa8 'parser' 'P'
|     | |-DeclRefExpr 0x55633fe8cc00 <col:61> 'T' lvalue ParmVar 0x55633fe5fb48 'x' 'T &'
|     | `-DeclRefExpr 0x55633fe8cc20 <col:64> 'const V' lvalue ParmVar 0x55633fe5fbe8 'default_value' 'const V &'
|     `-ReturnStmt 0x55633fe8ccb8 <line:466:9, col:17>
|       `-UnaryOperator 0x55633fe8cca0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8cc90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe603b8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55633fe5fe58 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe5fed8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55633fe5ff58 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55633fe60318 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55633fe60020 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe60098 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe60138 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55633fe601d8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55633fe8ce70 <col:63, line:481:5>
|     `-ReturnStmt 0x55633fe8ce60 <line:480:9, col:47>
|       `-CallExpr 0x55633fe8ce18 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8ccf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8cd78 <col:21> 'const char *' lvalue ParmVar 0x55633fe60020 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8cd98 <col:30> 'int' 0
|         |-DeclRefExpr 0x55633fe8cdb8 <col:33> 'P' lvalue ParmVar 0x55633fe60098 'parser' 'P'
|         |-DeclRefExpr 0x55633fe8cdd8 <col:41> 'T1' lvalue ParmVar 0x55633fe60138 'x1' 'T1 &'
|         `-DeclRefExpr 0x55633fe8cdf8 <col:45> 'T2' lvalue ParmVar 0x55633fe601d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55633fe60938 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55633fe60430 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe604a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55633fe60528 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55633fe60898 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55633fe605f0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe60668 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe60708 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55633fe607a8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55633fe8d010 <col:65, line:485:5>
|     `-ReturnStmt 0x55633fe8d000 <line:484:9, col:55>
|       `-CallExpr 0x55633fe8cfb8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8ce98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8cf18 <col:21> 'const char *' lvalue ParmVar 0x55633fe605f0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8cf38 <col:30> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55633fe8cf58 <col:41> 'P' lvalue ParmVar 0x55633fe60668 'parser' 'P'
|         |-DeclRefExpr 0x55633fe8cf78 <col:49> 'T1' lvalue ParmVar 0x55633fe60708 'x1' 'T1 &'
|         `-DeclRefExpr 0x55633fe8cf98 <col:53> 'T2' lvalue ParmVar 0x55633fe607a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55633fe60eb8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55633fe609b0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe60a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55633fe60aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55633fe60e18 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55633fe60b70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe60be8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe60c88 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55633fe60d28 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55633fe8d1b0 <col:65, line:489:5>
|     `-ReturnStmt 0x55633fe8d1a0 <line:488:9, col:56>
|       `-CallExpr 0x55633fe8d158 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8d038 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8d0b8 <col:21> 'const char *' lvalue ParmVar 0x55633fe60b70 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8d0d8 <col:30> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int'
|         |-DeclRefExpr 0x55633fe8d0f8 <col:42> 'P' lvalue ParmVar 0x55633fe60be8 'parser' 'P'
|         |-DeclRefExpr 0x55633fe8d118 <col:50> 'T1' lvalue ParmVar 0x55633fe60c88 'x1' 'T1 &'
|         `-DeclRefExpr 0x55633fe8d138 <col:54> 'T2' lvalue ParmVar 0x55633fe60d28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55633fe61438 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55633fe60f30 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe60fa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55633fe61028 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55633fe61398 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55633fe610f0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe61168 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe61208 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55633fe612a8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55633fe8d400 <col:66, line:493:5>
|     `-ReturnStmt 0x55633fe8d3f0 <line:492:9, col:68>
|       `-CallExpr 0x55633fe8d3a8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8d1d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8d258 <col:21> 'const char *' lvalue ParmVar 0x55633fe610f0 'keyword' 'const char *'
|         |-BinaryOperator 0x55633fe8d328 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55633fe8d2d8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55633fe8d2b8 <col:30> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55633fe8d310 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55633fe8d2f0 <col:42> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55633fe8d348 <col:54> 'P' lvalue ParmVar 0x55633fe61168 'parser' 'P'
|         |-DeclRefExpr 0x55633fe8d368 <col:62> 'T1' lvalue ParmVar 0x55633fe61208 'x1' 'T1 &'
|         `-DeclRefExpr 0x55633fe8d388 <col:66> 'T2' lvalue ParmVar 0x55633fe612a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55633fe61a98 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55633fe614b0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe61528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55633fe615a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55633fe619f8 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55633fe61670 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe616f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe61768 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe61808 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55633fe618a8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55633fe8d590 <col:74, line:498:5>
|     |-CallExpr 0x55633fe8d508 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8d418 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55633fe8d458 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8d468 <col:30> 'const char *' lvalue ParmVar 0x55633fe61670 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55633fe8d488 <col:39> 'int' lvalue ParmVar 0x55633fe616f0 'flags' 'int'
|     | |-DeclRefExpr 0x55633fe8d4a8 <col:46> 'P' lvalue ParmVar 0x55633fe61768 'parser' 'P'
|     | |-DeclRefExpr 0x55633fe8d4c8 <col:54> 'T1' lvalue ParmVar 0x55633fe61808 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55633fe8d4e8 <col:58> 'T2' lvalue ParmVar 0x55633fe618a8 'x2' 'T2 &'
|     `-ReturnStmt 0x55633fe8d580 <line:497:9, col:17>
|       `-UnaryOperator 0x55633fe8d568 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8d558 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe61df8 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55633fe61b18 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe61d58 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55633fe61bd0 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe61c48 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8d6d8 <col:52, line:509:5>
|     `-ReturnStmt 0x55633fe8d6c8 <line:508:9, col:44>
|       `-CallExpr 0x55633fe8d690 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8d5c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8d630 <col:26> 'const char *' lvalue ParmVar 0x55633fe61bd0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8d650 <col:35> 'int' 0
|         `-DeclRefExpr 0x55633fe8d670 <col:38> 'P' lvalue ParmVar 0x55633fe61c48 'parser' 'P'
|-FunctionTemplateDecl 0x55633fe620f8 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55633fe61e60 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe62058 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55633fe61f10 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe61f88 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8d818 <col:54, line:513:5>
|     `-ReturnStmt 0x55633fe8d808 <line:512:9, col:52>
|       `-CallExpr 0x55633fe8d7d0 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8d700 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8d770 <col:26> 'const char *' lvalue ParmVar 0x55633fe61f10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8d790 <col:35> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55633fe8d7b0 <col:46> 'P' lvalue ParmVar 0x55633fe61f88 'parser' 'P'
|-FunctionTemplateDecl 0x55633fe623f8 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55633fe62160 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe62358 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55633fe62210 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe62288 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8d958 <col:54, line:517:5>
|     `-ReturnStmt 0x55633fe8d948 <line:516:9, col:53>
|       `-CallExpr 0x55633fe8d910 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8d840 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8d8b0 <col:26> 'const char *' lvalue ParmVar 0x55633fe62210 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8d8d0 <col:35> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int'
|         `-DeclRefExpr 0x55633fe8d8f0 <col:47> 'P' lvalue ParmVar 0x55633fe62288 'parser' 'P'
|-FunctionTemplateDecl 0x55633fe626f8 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55633fe62460 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe62658 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55633fe62510 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe62588 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8db48 <col:55, line:521:5>
|     `-ReturnStmt 0x55633fe8db38 <line:520:9, col:65>
|       `-CallExpr 0x55633fe8db00 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8d980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8d9f0 <col:26> 'const char *' lvalue ParmVar 0x55633fe62510 'keyword' 'const char *'
|         |-BinaryOperator 0x55633fe8dac0 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55633fe8da70 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55633fe8da50 <col:35> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55633fe8daa8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55633fe8da88 <col:47> 'const int' lvalue Var 0x55633fe5ada0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55633fe8dae0 <col:59> 'P' lvalue ParmVar 0x55633fe62588 'parser' 'P'
|-FunctionTemplateDecl 0x55633fe62ac8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55633fe62760 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe62a28 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55633fe62810 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe62890 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe62908 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8dc88 <col:63, line:526:5>
|     |-CallExpr 0x55633fe8dc10 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8db60 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55633fe8dba0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8dbb0 <col:35> 'const char *' lvalue ParmVar 0x55633fe62810 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55633fe8dbd0 <col:44> 'int' lvalue ParmVar 0x55633fe62890 'flags' 'int'
|     | `-DeclRefExpr 0x55633fe8dbf0 <col:51> 'P' lvalue ParmVar 0x55633fe62908 'parser' 'P'
|     `-ReturnStmt 0x55633fe8dc78 <line:525:9, col:17>
|       `-UnaryOperator 0x55633fe8dc60 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8dc50 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe62f18 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55633fe62b38 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe62bb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe62e78 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe62c78 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe62cf0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe62d98 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8dde0 <col:58, line:541:5>
|     `-ReturnStmt 0x55633fe8ddd0 <line:540:9, col:39>
|       `-CallExpr 0x55633fe8dd98 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8dcb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8dd38 <col:21> 'const char *' lvalue ParmVar 0x55633fe62c78 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8dd58 <col:30> 'P' lvalue ParmVar 0x55633fe62cf0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8dd78 <col:38> 'T' lvalue ParmVar 0x55633fe62d98 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe63368 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55633fe62f88 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe63008 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe632c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe630c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe63140 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe631e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8df18 <col:60, line:545:5>
|     `-ReturnStmt 0x55633fe8df08 <line:544:9, col:41>
|       `-CallExpr 0x55633fe8ded0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8de08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8de70 <col:23> 'const char *' lvalue ParmVar 0x55633fe630c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8de90 <col:32> 'P' lvalue ParmVar 0x55633fe63140 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8deb0 <col:40> 'T' lvalue ParmVar 0x55633fe631e8 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe637b8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55633fe633d8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe63458 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe63718 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe63518 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe63590 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe63638 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8e050 <col:60, line:549:5>
|     `-ReturnStmt 0x55633fe8e040 <line:548:9, col:41>
|       `-CallExpr 0x55633fe8e008 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8df40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8dfa8 <col:23> 'const char *' lvalue ParmVar 0x55633fe63518 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8dfc8 <col:32> 'P' lvalue ParmVar 0x55633fe63590 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8dfe8 <col:40> 'T' lvalue ParmVar 0x55633fe63638 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe63c08 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55633fe63828 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe638a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe63b68 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe63968 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe639e0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe63a88 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8e188 <col:61, line:553:5>
|     `-ReturnStmt 0x55633fe8e178 <line:552:9, col:42>
|       `-CallExpr 0x55633fe8e140 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8e078 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8e0e0 <col:24> 'const char *' lvalue ParmVar 0x55633fe63968 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8e100 <col:33> 'P' lvalue ParmVar 0x55633fe639e0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8e120 <col:41> 'T' lvalue ParmVar 0x55633fe63a88 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe640e8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55633fe63c78 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe63cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe64048 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55633fe63db8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe63e38 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe63eb0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe63f58 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8e300 <col:69, line:557:5>
|     `-ReturnStmt 0x55633fe8e2f0 <line:556:9, col:46>
|       `-CallExpr 0x55633fe8e2b0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8e1b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8e230 <col:21> 'const char *' lvalue ParmVar 0x55633fe63db8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8e250 <col:30> 'int' lvalue ParmVar 0x55633fe63e38 'flags' 'int'
|         |-DeclRefExpr 0x55633fe8e270 <col:37> 'P' lvalue ParmVar 0x55633fe63eb0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8e290 <col:45> 'T' lvalue ParmVar 0x55633fe63f58 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe643f8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55633fe64160 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe64358 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55633fe64210 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe64288 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8e440 <col:56, line:571:5>
|     `-ReturnStmt 0x55633fe8e430 <line:570:9, col:48>
|       `-CallExpr 0x55633fe8e3f8 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8e328 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8e398 <col:30> 'const char *' lvalue ParmVar 0x55633fe64210 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8e3b8 <col:39> 'int' 0
|         `-DeclRefExpr 0x55633fe8e3d8 <col:42> 'P' lvalue ParmVar 0x55633fe64288 'parser' 'P'
|-FunctionTemplateDecl 0x55633fe64788 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55633fe64460 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe646e8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55633fe64510 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe64590 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe64608 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55633fe8e610 <col:67, line:576:5>
|     |-CallExpr 0x55633fe8e598 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8e458 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55633fe8e498 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8e4a8 <col:39> 'const char *' lvalue ParmVar 0x55633fe64510 'keyword' 'const char *'
|     | |-BinaryOperator 0x55633fe8e558 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55633fe8e508 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55633fe8e4c8 <col:48> 'int' lvalue ParmVar 0x55633fe64590 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55633fe8e540 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55633fe8e520 <col:56> 'const int' lvalue Var 0x55633fe5af90 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55633fe8e578 <col:68> 'P' lvalue ParmVar 0x55633fe64608 'parser' 'P'
|     `-ReturnStmt 0x55633fe8e600 <line:575:9, col:17>
|       `-UnaryOperator 0x55633fe8e5e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8e5d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe64bd8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55633fe647f8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe64878 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe64b38 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55633fe64938 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe649b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe64a58 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8e780 <col:62, line:592:5>
|     `-ReturnStmt 0x55633fe8e770 <line:591:9, col:51>
|       `-CallExpr 0x55633fe8e730 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8e640 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8e6b0 <col:30> 'const char *' lvalue ParmVar 0x55633fe64938 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8e6d0 <col:39> 'int' 0
|         |-DeclRefExpr 0x55633fe8e6f0 <col:42> 'P' lvalue ParmVar 0x55633fe649b0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8e710 <col:50> 'T' lvalue ParmVar 0x55633fe64a58 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe650b8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55633fe64c48 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe64cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe65018 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55633fe64d88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe64e08 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe64e80 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe64f28 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8e978 <col:73, line:597:5>
|     |-CallExpr 0x55633fe8e8f8 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8e798 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55633fe8e7d8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8e7e8 <col:39> 'const char *' lvalue ParmVar 0x55633fe64d88 'keyword' 'const char *'
|     | |-BinaryOperator 0x55633fe8e898 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55633fe8e848 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55633fe8e808 <col:48> 'int' lvalue ParmVar 0x55633fe64e08 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55633fe8e880 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55633fe8e860 <col:56> 'const int' lvalue Var 0x55633fe5af90 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55633fe8e8b8 <col:68> 'P' lvalue ParmVar 0x55633fe64e80 'parser' 'P'
|     | `-DeclRefExpr 0x55633fe8e8d8 <col:76> 'T' lvalue ParmVar 0x55633fe64f28 'x' 'T &'
|     `-ReturnStmt 0x55633fe8e968 <line:596:9, col:17>
|       `-UnaryOperator 0x55633fe8e950 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8e940 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe65668 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55633fe65130 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe651a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe655c8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55633fe65268 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe652e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe654a0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55633fe8eae8 <col:65, line:614:5>
|     `-ReturnStmt 0x55633fe8ead8 <line:613:9, col:46>
|       `-CallExpr 0x55633fe8ea98 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8e9a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8ea18 <col:25> 'const char *' lvalue ParmVar 0x55633fe65268 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8ea38 <col:34> 'int' 0
|         |-DeclRefExpr 0x55633fe8ea58 <col:37> 'P' lvalue ParmVar 0x55633fe652e0 'parser' 'P'
|         `-DeclRefExpr 0x55633fe8ea78 <col:45> 'Vector<T>' lvalue ParmVar 0x55633fe654a0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55633fe65a98 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55633fe656d8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe659f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55633fe65790 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe658e0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55633fe8ed00 <col:55, line:618:5>
|     `-ReturnStmt 0x55633fe8ecf0 <line:617:9, col:55>
|       `-CallExpr 0x55633fe8ecb0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8eb10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8eb80 <col:25> 'const char *' lvalue ParmVar 0x55633fe65790 'keyword' 'const char *'
|         |-IntegerLiteral 0x55633fe8eba0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55633fe8ec70 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55633fe8ec90 <col:54> 'Vector<T>' lvalue ParmVar 0x55633fe658e0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55633fe66068 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55633fe65b00 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe65b78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe65fc8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55633fe65c38 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe65cb8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe65d30 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe65e80 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55633fe8eef8 <col:76, line:623:5>
|     |-CallExpr 0x55633fe8ee78 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fe8ed18 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55633fe8ed58 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55633fe8ed68 <col:34> 'const char *' lvalue ParmVar 0x55633fe65c38 'keyword' 'const char *'
|     | |-BinaryOperator 0x55633fe8ee18 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55633fe8edc8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55633fe8ed88 <col:43> 'int' lvalue ParmVar 0x55633fe65cb8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55633fe8ee00 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55633fe8ede0 <col:51> 'const int' lvalue Var 0x55633fe5af90 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55633fe8ee38 <col:63> 'P' lvalue ParmVar 0x55633fe65d30 'parser' 'P'
|     | `-DeclRefExpr 0x55633fe8ee58 <col:71> 'Vector<T>' lvalue ParmVar 0x55633fe65e80 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55633fe8eee8 <line:622:9, col:17>
|       `-UnaryOperator 0x55633fe8eed0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe8eec0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe665a8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55633fe660e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe66158 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe66508 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55633fe66218 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe66298 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe663e0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55633fe8f160 <col:66, line:627:5>
|     `-ReturnStmt 0x55633fe8f150 <line:626:9, col:59>
|       `-CallExpr 0x55633fe8f110 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55633fe8ef28 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55633fe8ef98 <col:25> 'const char *' lvalue ParmVar 0x55633fe66218 'keyword' 'const char *'
|         |-DeclRefExpr 0x55633fe8efb8 <col:34> 'int' lvalue ParmVar 0x55633fe66298 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55633fe8f0d0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55633fe8f0f0 <col:58> 'Vector<T>' lvalue ParmVar 0x55633fe663e0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55633fe66638 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55633fe8f1e0 <col:25, line:633:5>
|   `-ReturnStmt 0x55633fe8f1d0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55633fe8f1b8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55633fe8f188 <col:16> 'const bool' lvalue ->_status 0x55633fe723e8
|         `-CXXThisExpr 0x55633fe8f178 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55633fe667b8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55633fe666f0 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55633fe8f2c8 <col:27, line:639:5>
|   |-BinaryOperator 0x55633fe8f270 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55633fe8f1f8 <col:9> 'bool' lvalue ParmVar 0x55633fe666f0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55633fe8f258 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55633fe8f228 <col:13> 'bool' lvalue ->_status 0x55633fe723e8
|   |     `-CXXThisExpr 0x55633fe8f218 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55633fe8f2b8 <line:638:9, col:17>
|     `-UnaryOperator 0x55633fe8f2a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fe8f290 <col:17> 'Args *' this
|-CXXMethodDecl 0x55633fe66938 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55633fe66878 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55633fe8f3b8 <col:39, line:644:5>
|   |-BinaryOperator 0x55633fe8f360 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55633fe8f2e8 <col:9> 'bool' lvalue ParmVar 0x55633fe66878 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55633fe8f348 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55633fe8f318 <col:13> 'const bool' lvalue ->_status 0x55633fe723e8
|   |     `-CXXThisExpr 0x55633fe8f308 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55633fe8f3a8 <line:643:9, col:17>
|     `-UnaryOperator 0x55633fe8f390 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fe8f380 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55633fe66a00 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55633fe8f460 <col:30, line:651:5>
|   `-ReturnStmt 0x55633fe8f450 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55633fe8f438 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55633fe8f408 <col:16> 'bool' lvalue ->_read_status 0x55633fe53760
|         `-ImplicitCastExpr 0x55633fe8f3e8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55633fe8f3d8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55633fe66b48 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55633fe66ab8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55633fe8f568 <col:32, line:658:5>
|   |-BinaryOperator 0x55633fe8f510 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55633fe8f478 <col:9> 'bool' lvalue ParmVar 0x55633fe66ab8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55633fe8f4f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55633fe8f4c8 <col:13> 'bool' lvalue ->_read_status 0x55633fe53760
|   |     `-ImplicitCastExpr 0x55633fe8f4a8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55633fe8f498 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55633fe8f558 <line:657:9, col:17>
|     `-UnaryOperator 0x55633fe8f540 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fe8f530 <col:17> 'Args *' this
|-CXXMethodDecl 0x55633fe66c98 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55633fe66c08 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55633fe8f678 <col:44, line:663:5>
|   |-BinaryOperator 0x55633fe8f620 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55633fe8f588 <col:9> 'bool' lvalue ParmVar 0x55633fe66c08 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55633fe8f608 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55633fe8f5d8 <col:13> 'bool' lvalue ->_read_status 0x55633fe53760
|   |     `-ImplicitCastExpr 0x55633fe8f5b8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55633fe8f5a8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55633fe8f668 <line:662:9, col:17>
|     `-UnaryOperator 0x55633fe8f650 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fe8f640 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55633fe66d60 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55633fe66e28 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55633fe66ef0 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55633fe66fb8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55633fe672c8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55633fe67058 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe67228 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55633fe67138 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8fa30 <col:19, line:706:5>
|     `-IfStmt 0x55633fe8fa08 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55633fe8f778 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55633fe8f938 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55633fe8f908 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55633fe8f8c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55633fe8f7d0 <col:42> '<bound member function type>' ->simple_slot 0x55633fe8a4c0
|       |     | `-CXXThisExpr 0x55633fe8f7c0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55633fe8f868 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55633fe8f820 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55633fbdd678
|       |     | `-DeclRefExpr 0x55633fe8f800 <col:55> 'T' lvalue ParmVar 0x55633fe67138 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55633fe8f8a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55633fe8f9f8 <line:705:13, col:34>
|         `-CallExpr 0x55633fe8f9d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55633fe8f958 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55633fe8f9b0 <col:33> 'T' lvalue ParmVar 0x55633fe67138 'x' 'T &'
|-FunctionTemplateDecl 0x55633fe67598 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55633fe67328 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe674f8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55633fe67408 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55633fe8fe10 <col:31, line:717:5>
|     |-DeclStmt 0x55633fe8fb70 <line:713:9, col:23>
|     | `-VarDecl 0x55633fe8fa58 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55633fe8fb48 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55633fe8fad0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55633fe8fb28 <col:21> 'T' lvalue ParmVar 0x55633fe67408 'x' 'T &'
|     |-IfStmt 0x55633fe8fdc0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55633fe8fc68 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55633fe8fda0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55633fe8fd40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55633fe8fcd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|     |   | `-DeclRefExpr 0x55633fe8fcb0 <col:14> 'T *' lvalue Var 0x55633fe8fa58 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55633fe8fd80 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55633fe8fdf8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55633fe8fdd8 <col:16> 'T *' lvalue Var 0x55633fe8fa58 's' 'T *'
|-FunctionTemplateDecl 0x55633fe6d918 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55633fe675f8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55633fe67678 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55633fe6d878 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55633fe6d6c0 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55633fe6d768 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55633fe90120 <col:37, line:726:5>
|     |-IfStmt 0x55633fe900b0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55633fe900d0 <line:723:13, col:26>
|     | | `-VarDecl 0x55633fe8fe78 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55633fe8ff68 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55633fe8fef0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55633fe8ff48 <col:25> 'T' lvalue ParmVar 0x55633fe6d6c0 'x' 'T &'
|     | |-DeclRefExpr 0x55633fe8ff90 <col:16> 'T *' lvalue Var 0x55633fe8fe78 's' 'T *'
|     | `-BinaryOperator 0x55633fe90090 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55633fe90040 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55633fe8ffd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|     |   | `-DeclRefExpr 0x55633fe8ffb0 <col:14> 'T *' lvalue Var 0x55633fe8fe78 's' 'T *'
|     |   `-DeclRefExpr 0x55633fe90070 <col:18> 'const V' lvalue ParmVar 0x55633fe6d768 'value' 'const V &'
|     `-ReturnStmt 0x55633fe90110 <line:725:9, col:17>
|       `-UnaryOperator 0x55633fe900f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55633fe900e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55633fe6dd18 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55633fe6d980 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55633fe6dc78 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55633fe6da30 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6dab0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6db58 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55633fe90f40 <col:65, line:737:5>
|     |-DeclStmt 0x55633fe901b8 <line:732:9, col:26>
|     | `-VarDecl 0x55633fe90150 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55633fe90f08 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55633fe90f28 <line:733:13, col:58>
|       | `-VarDecl 0x55633fe901e0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55633fe903c0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55633fe90390 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55633fe90378 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55633fe90358 <col:26, col:58> 'String' (CXXTemporary 0x55633fe90358)
|       |           `-CXXMemberCallExpr 0x55633fe902e8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55633fe90258 <col:26> '<bound member function type>' ->find 0x55633fe89ad8
|       |             | `-CXXThisExpr 0x55633fe90248 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55633fe90320 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe90288 <col:31> 'const char *' lvalue ParmVar 0x55633fe6da30 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55633fe90338 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe902a8 <col:40> 'int' lvalue ParmVar 0x55633fe6dab0 'flags' 'int'
|       |             `-DeclRefExpr 0x55633fe902c8 <col:47> 'Args::Slot *' lvalue Var 0x55633fe90150 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55633fe90478 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55633fe90460 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55633fe90440 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55633fe90410 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |       `-ImplicitCastExpr 0x55633fe903f8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55633fe903d8 <col:20> 'String' lvalue Var 0x55633fe901e0 'str' 'String'
|       `-CompoundStmt 0x55633fe90ee8 <col:61, line:736:9>
|         |-DeclStmt 0x55633fe90930 <line:734:13, col:76>
|         | `-VarDecl 0x55633fe904c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55633fe90900 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55633fe90870 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55633fe908b8 <col:60> 'T' lvalue ParmVar 0x55633fe6db58 'variable' 'T &'
|         |     `-UnaryOperator 0x55633fe908e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55633fe908d8 <col:71> 'Args *' this
|         `-CallExpr 0x55633fe90eb8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55633fe90958 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|           | `-CXXThisExpr 0x55633fe90948 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55633fe90e78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55633fe90988 <col:23> 'T *' lvalue Var 0x55633fe904c8 's' 'T *'
|           | `-CallExpr 0x55633fe90e38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55633fe90c10 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55633fe90d10 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55633fe90d30 <col:86> 'String' lvalue Var 0x55633fe901e0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55633fe90de0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55633fe90d70 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|           |   | `-DeclRefExpr 0x55633fe90d50 <col:92> 'T *' lvalue Var 0x55633fe904c8 's' 'T *'
|           |   `-UnaryOperator 0x55633fe90e20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55633fe90e10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55633fe90e98 <col:103> 'Args::Slot *' lvalue Var 0x55633fe90150 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55633fe6e268 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55633fe6dd88 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55633fe6de08 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55633fe6e1c8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55633fe6dec8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6df48 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6dfe8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55633fe6e088 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55633fe957a0 <col:88, line:745:5>
|     |-DeclStmt 0x55633fe90fd8 <line:741:9, col:26>
|     | `-VarDecl 0x55633fe90f70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55633fe911f8 <line:742:9, col:55>
|     | `-VarDecl 0x55633fe91000 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55633fe911e0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55633fe911b0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55633fe91198 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55633fe91178 <col:22, col:54> 'String' (CXXTemporary 0x55633fe91178)
|     |           `-CXXMemberCallExpr 0x55633fe91108 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55633fe91078 <col:22> '<bound member function type>' ->find 0x55633fe89ad8
|     |             | `-CXXThisExpr 0x55633fe91068 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55633fe91140 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55633fe910a8 <col:27> 'const char *' lvalue ParmVar 0x55633fe6dec8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55633fe91158 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55633fe910c8 <col:36> 'int' lvalue ParmVar 0x55633fe6df48 'flags' 'int'
|     |             `-DeclRefExpr 0x55633fe910e8 <col:43> 'Args::Slot *' lvalue Var 0x55633fe90f70 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55633fe915d0 <line:743:9, col:72>
|     | `-VarDecl 0x55633fe91248 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55633fe915a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55633fe91510 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55633fe91558 <col:56> 'T' lvalue ParmVar 0x55633fe6dfe8 'variable' 'T &'
|     |     `-UnaryOperator 0x55633fe91588 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55633fe91578 <col:67> 'Args *' this
|     `-CallExpr 0x55633fe95770 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55633fe915f8 <col:9> '<bound member function type>' ->postparse 0x55633fe89ce8
|       | `-CXXThisExpr 0x55633fe915e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55633fe95730 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55633fe91628 <col:19> 'T *' lvalue Var 0x55633fe91248 's' 'T *'
|       | `-ParenExpr 0x55633fe95710 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55633fe956e0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55633fe956c8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55633fe956b0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55633fe95690 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55633fe95660 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |     |       `-ImplicitCastExpr 0x55633fe95648 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55633fe91648 <col:25> 'String' lvalue Var 0x55633fe91000 'str' 'String'
|       |     |-CallExpr 0x55633fe954b8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55633fe95290 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55633fe95390 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55633fe953b0 <col:89> 'String' lvalue Var 0x55633fe91000 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55633fe95460 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55633fe953f0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|       |     | | `-DeclRefExpr 0x55633fe953d0 <col:95> 'T *' lvalue Var 0x55633fe91248 's' 'T *'
|       |     | `-UnaryOperator 0x55633fe954a0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55633fe95490 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55633fe95628 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55633fe95608 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55633fe955d8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55633fe95588 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55633fe95518 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|       |         | | `-DeclRefExpr 0x55633fe954f8 <col:109> 'T *' lvalue Var 0x55633fe91248 's' 'T *'
|       |         | `-DeclRefExpr 0x55633fe955b8 <col:113> 'const V' lvalue ParmVar 0x55633fe6e088 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55633fe955f8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55633fe95750 <col:128> 'Args::Slot *' lvalue Var 0x55633fe90f70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55633fe6e798 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55633fe6e2e0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe6e358 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe6e6f8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55633fe6e418 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6e498 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6e510 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe6e5b8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55633fe96398 <col:75, line:754:5>
|     |-DeclStmt 0x55633fe95848 <line:749:9, col:26>
|     | `-VarDecl 0x55633fe957e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55633fe96360 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55633fe96380 <line:750:13, col:58>
|       | `-VarDecl 0x55633fe95870 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55633fe95a50 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55633fe95a20 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55633fe95a08 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55633fe959e8 <col:26, col:58> 'String' (CXXTemporary 0x55633fe959e8)
|       |           `-CXXMemberCallExpr 0x55633fe95978 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55633fe958e8 <col:26> '<bound member function type>' ->find 0x55633fe89ad8
|       |             | `-CXXThisExpr 0x55633fe958d8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55633fe959b0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe95918 <col:31> 'const char *' lvalue ParmVar 0x55633fe6e418 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55633fe959c8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe95938 <col:40> 'int' lvalue ParmVar 0x55633fe6e498 'flags' 'int'
|       |             `-DeclRefExpr 0x55633fe95958 <col:47> 'Args::Slot *' lvalue Var 0x55633fe957e0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55633fe95b08 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55633fe95af0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55633fe95ad0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55633fe95aa0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |       `-ImplicitCastExpr 0x55633fe95a88 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55633fe95a68 <col:20> 'String' lvalue Var 0x55633fe95870 'str' 'String'
|       `-CompoundStmt 0x55633fe96340 <col:61, line:753:9>
|         |-DeclStmt 0x55633fe95ee0 <line:751:13, col:63>
|         | `-VarDecl 0x55633fe95b58 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55633fe95eb0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55633fe95e20 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55633fe95e68 <col:47> 'T' lvalue ParmVar 0x55633fe6e5b8 'variable' 'T &'
|         |     `-UnaryOperator 0x55633fe95e98 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55633fe95e88 <col:58> 'Args *' this
|         `-CallExpr 0x55633fe96310 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55633fe95f08 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|           | `-CXXThisExpr 0x55633fe95ef8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55633fe962d0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55633fe95f38 <col:23> 'T *' lvalue Var 0x55633fe95b58 's' 'T *'
|           | `-CallExpr 0x55633fe96290 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55633fe96120 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55633fe96168 <col:56> 'P' lvalue ParmVar 0x55633fe6e510 'parser' 'P'
|           |   |-DeclRefExpr 0x55633fe96188 <col:64> 'String' lvalue Var 0x55633fe95870 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55633fe96238 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55633fe961c8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|           |   | `-DeclRefExpr 0x55633fe961a8 <col:70> 'T *' lvalue Var 0x55633fe95b58 's' 'T *'
|           |   `-UnaryOperator 0x55633fe96278 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55633fe96268 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55633fe962f0 <col:81> 'Args::Slot *' lvalue Var 0x55633fe957e0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55633fe6edf8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55633fe6e810 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55633fe6e888 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55633fe6e908 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55633fe6ed58 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55633fe6e9d0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6ea50 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6eac8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe6eb68 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55633fe6ec08 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55633fe97128 <col:98, line:762:5>
|     |-DeclStmt 0x55633fe96430 <line:758:9, col:26>
|     | `-VarDecl 0x55633fe963c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55633fe96650 <line:759:9, col:55>
|     | `-VarDecl 0x55633fe96458 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55633fe96638 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55633fe96608 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55633fe965f0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55633fe965d0 <col:22, col:54> 'String' (CXXTemporary 0x55633fe965d0)
|     |           `-CXXMemberCallExpr 0x55633fe96560 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55633fe964d0 <col:22> '<bound member function type>' ->find 0x55633fe89ad8
|     |             | `-CXXThisExpr 0x55633fe964c0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55633fe96598 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55633fe96500 <col:27> 'const char *' lvalue ParmVar 0x55633fe6e9d0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55633fe965b0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55633fe96520 <col:36> 'int' lvalue ParmVar 0x55633fe6ea50 'flags' 'int'
|     |             `-DeclRefExpr 0x55633fe96540 <col:43> 'Args::Slot *' lvalue Var 0x55633fe963c8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55633fe96a70 <line:760:9, col:59>
|     | `-VarDecl 0x55633fe966a8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55633fe96a40 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55633fe969b0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55633fe969f8 <col:43> 'T' lvalue ParmVar 0x55633fe6eb68 'variable' 'T &'
|     |     `-UnaryOperator 0x55633fe96a28 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55633fe96a18 <col:54> 'Args *' this
|     `-CallExpr 0x55633fe970f8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55633fe96a98 <col:9> '<bound member function type>' ->postparse 0x55633fe89ce8
|       | `-CXXThisExpr 0x55633fe96a88 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55633fe970b8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55633fe96ac8 <col:19> 'T *' lvalue Var 0x55633fe966a8 's' 'T *'
|       | `-ParenExpr 0x55633fe97098 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55633fe97068 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55633fe97050 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55633fe97038 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55633fe97018 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55633fe96fe8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |     |       `-ImplicitCastExpr 0x55633fe96fd0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55633fe96ae8 <col:25> 'String' lvalue Var 0x55633fe96458 'str' 'String'
|       |     |-CallExpr 0x55633fe96e40 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55633fe96cd0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55633fe96d18 <col:59> 'P' lvalue ParmVar 0x55633fe6eac8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55633fe96d38 <col:67> 'String' lvalue Var 0x55633fe96458 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55633fe96de8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55633fe96d78 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|       |     | | `-DeclRefExpr 0x55633fe96d58 <col:73> 'T *' lvalue Var 0x55633fe966a8 's' 'T *'
|       |     | `-UnaryOperator 0x55633fe96e28 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55633fe96e18 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55633fe96fb0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55633fe96f90 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55633fe96f60 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55633fe96f10 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55633fe96ea0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|       |         | | `-DeclRefExpr 0x55633fe96e80 <col:87> 'T *' lvalue Var 0x55633fe966a8 's' 'T *'
|       |         | `-DeclRefExpr 0x55633fe96f40 <col:91> 'const V' lvalue ParmVar 0x55633fe6ec08 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55633fe96f80 <col:98> 'bool' true
|       `-DeclRefExpr 0x55633fe970d8 <col:106> 'Args::Slot *' lvalue Var 0x55633fe963c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55633fe6f468 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55633fe6ee78 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe6eef8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55633fe6ef78 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55633fe6f3c8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55633fe6f040 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6f0c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6f138 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe6f1d8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55633fe6f278 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55633fe98108 <col:60, line:773:5>
|     |-DeclStmt 0x55633fe971d0 <line:767:9, col:26>
|     | `-VarDecl 0x55633fe97168 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55633fe980d0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55633fe980f0 <line:768:13, col:58>
|       | `-VarDecl 0x55633fe971f8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55633fe973d8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55633fe973a8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55633fe97390 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55633fe97370 <col:26, col:58> 'String' (CXXTemporary 0x55633fe97370)
|       |           `-CXXMemberCallExpr 0x55633fe97300 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55633fe97270 <col:26> '<bound member function type>' ->find 0x55633fe89ad8
|       |             | `-CXXThisExpr 0x55633fe97260 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55633fe97338 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe972a0 <col:31> 'const char *' lvalue ParmVar 0x55633fe6f040 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55633fe97350 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe972c0 <col:40> 'int' lvalue ParmVar 0x55633fe6f0c0 'flags' 'int'
|       |             `-DeclRefExpr 0x55633fe972e0 <col:47> 'Args::Slot *' lvalue Var 0x55633fe97168 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55633fe97490 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55633fe97478 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55633fe97458 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55633fe97428 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |       `-ImplicitCastExpr 0x55633fe97410 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55633fe973f0 <col:20> 'String' lvalue Var 0x55633fe971f8 'str' 'String'
|       `-CompoundStmt 0x55633fe980a8 <col:61, line:772:9>
|         |-DeclStmt 0x55633fe977d0 <line:769:13, col:66>
|         | `-VarDecl 0x55633fe974e8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55633fe977a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55633fe97710 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55633fe97758 <col:49> 'T1' lvalue ParmVar 0x55633fe6f1d8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55633fe97788 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55633fe97778 <col:61> 'Args *' this
|         |-DeclStmt 0x55633fe97b40 <line:770:13, col:66>
|         | `-VarDecl 0x55633fe97858 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55633fe97b10 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55633fe97a80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55633fe97ac8 <col:49> 'T2' lvalue ParmVar 0x55633fe6f278 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55633fe97af8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55633fe97ae8 <col:61> 'Args *' this
|         `-CallExpr 0x55633fe98078 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55633fe97b68 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|           | `-CXXThisExpr 0x55633fe97b58 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55633fe98038 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55633fe97bd8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55633fe97b98 <col:23> 'T1 *' lvalue Var 0x55633fe974e8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55633fe97bb8 <col:29> 'T2 *' lvalue Var 0x55633fe97858 's2' 'T2 *'
|           | `-CallExpr 0x55633fe97ff0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55633fe97dc0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55633fe97e08 <col:63> 'P' lvalue ParmVar 0x55633fe6f138 'parser' 'P'
|           |   |-DeclRefExpr 0x55633fe97e28 <col:71> 'String' lvalue Var 0x55633fe971f8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55633fe97ed8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55633fe97e68 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|           |   | `-DeclRefExpr 0x55633fe97e48 <col:77> 'T1 *' lvalue Var 0x55633fe974e8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55633fe97f98 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55633fe97f28 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|           |   | `-DeclRefExpr 0x55633fe97f08 <col:82> 'T2 *' lvalue Var 0x55633fe97858 's2' 'T2 *'
|           |   `-UnaryOperator 0x55633fe97fd8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55633fe97fc8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55633fe98058 <col:94> 'Args::Slot *' lvalue Var 0x55633fe97168 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55633fe6f858 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55633fe6f4e8 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe6f7b8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55633fe6f5a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6f620 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6f698 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55633fe98620 <col:67, line:780:5>
|     |-DeclStmt 0x55633fe981a0 <line:777:9, col:26>
|     | `-VarDecl 0x55633fe98138 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55633fe985e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55633fe98608 <line:778:13, col:58>
|       | `-VarDecl 0x55633fe981c8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55633fe983a8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55633fe98378 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55633fe98360 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55633fe98340 <col:26, col:58> 'String' (CXXTemporary 0x55633fe98340)
|       |           `-CXXMemberCallExpr 0x55633fe982d0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55633fe98240 <col:26> '<bound member function type>' ->find 0x55633fe89ad8
|       |             | `-CXXThisExpr 0x55633fe98230 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55633fe98308 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe98270 <col:31> 'const char *' lvalue ParmVar 0x55633fe6f5a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55633fe98320 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55633fe98290 <col:40> 'int' lvalue ParmVar 0x55633fe6f620 'flags' 'int'
|       |             `-DeclRefExpr 0x55633fe982b0 <col:47> 'Args::Slot *' lvalue Var 0x55633fe98138 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55633fe98460 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55633fe98448 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55633fe98428 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55633fe983f8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|       |       `-ImplicitCastExpr 0x55633fe983e0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55633fe983c0 <col:20> 'String' lvalue Var 0x55633fe981c8 'str' 'String'
|       `-CallExpr 0x55633fe985b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55633fe98488 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|         | `-CXXThisExpr 0x55633fe98478 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55633fe98568 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55633fe984d8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55633fe984b8 <col:23> 'P' lvalue ParmVar 0x55633fe6f698 'parser' 'P'
|         | |-DeclRefExpr 0x55633fe98520 <col:36> 'String' lvalue Var 0x55633fe981c8 'str' 'String'
|         | `-UnaryOperator 0x55633fe98550 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55633fe98540 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55633fe98598 <col:49> 'Args::Slot *' lvalue Var 0x55633fe98138 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55633fe6fbf8 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55633fe6f8c8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55633fe6fb58 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55633fe6f980 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6fa00 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6fa78 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55633fe98f90 <col:71, line:792:5>
|     |-DeclStmt 0x55633fe986b8 <line:784:9, col:26>
|     | `-VarDecl 0x55633fe98650 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55633fe98788 <line:785:9, col:29>
|     | `-VarDecl 0x55633fe986e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55633fe98770 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55633fe98750 <col:28> 'int' 1
|     |-WhileStmt 0x55633fe98e40 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55633fe98e60 <line:786:16, col:61>
|     | | `-VarDecl 0x55633fe987b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55633fe98990 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55633fe98960 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55633fe98948 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55633fe98928 <col:29, col:61> 'String' (CXXTemporary 0x55633fe98928)
|     | |           `-CXXMemberCallExpr 0x55633fe988b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55633fe98828 <col:29> '<bound member function type>' ->find 0x55633fe89ad8
|     | |             | `-CXXThisExpr 0x55633fe98818 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55633fe988f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55633fe98858 <col:34> 'const char *' lvalue ParmVar 0x55633fe6f980 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55633fe98908 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55633fe98878 <col:43> 'int' lvalue ParmVar 0x55633fe6fa00 'flags' 'int'
|     | |             `-DeclRefExpr 0x55633fe98898 <col:50> 'Args::Slot *' lvalue Var 0x55633fe98650 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55633fe98a48 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55633fe98a30 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55633fe98a10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55633fe989e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|     | |       `-ImplicitCastExpr 0x55633fe989c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55633fe989a8 <col:23> 'String' lvalue Var 0x55633fe987b0 'str' 'String'
|     | `-CompoundStmt 0x55633fe98e18 <col:64, line:790:9>
|     |   |-CallExpr 0x55633fe98ba0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55633fe98a70 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|     |   | | `-CXXThisExpr 0x55633fe98a60 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55633fe98b50 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55633fe98ac0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55633fe98aa0 <col:23> 'P' lvalue ParmVar 0x55633fe6fa78 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55633fe98b08 <col:36> 'String' lvalue Var 0x55633fe987b0 'str' 'String'
|     |   | | `-UnaryOperator 0x55633fe98b38 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55633fe98b28 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55633fe98b80 <col:49> 'Args::Slot *' lvalue Var 0x55633fe98650 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55633fe98d38 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55633fe98bd0 <col:13> 'int' lvalue Var 0x55633fe986e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55633fe98d20 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55633fe98d00 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55633fe98c68 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55633fe98c48 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55633fe98c30 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55633fe98bf0 <col:28> 'int' lvalue Var 0x55633fe986e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55633fe98c10 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55633fe98ce8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55633fe98cb8 <col:49> 'bool' lvalue ->_read_status 0x55633fe53760
|     |   |         `-ImplicitCastExpr 0x55633fe98c98 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55633fe98c88 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55633fe98de8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55633fe98d58 <col:13> 'int' lvalue ParmVar 0x55633fe6fa00 'flags' 'int'
|     |     `-UnaryOperator 0x55633fe98dd0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55633fe98db8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55633fe98d98 <col:23> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55633fe98f70 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55633fe98ea8 <col:9> 'bool' lvalue ->_read_status 0x55633fe53760
|       | `-ImplicitCastExpr 0x55633fe98e88 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55633fe98e78 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55633fe98f50 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55633fe98f30 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55633fe98f18 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55633fe98ed8 <col:25> 'int' lvalue Var 0x55633fe986e8 'read_status' 'int'
|           `-IntegerLiteral 0x55633fe98ef8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55633fe700d8 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55633fe6fc68 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe6fce8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe70038 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55633fe6fda8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe6fe28 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe6fea0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe6ff48 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55633fe99f20 <col:84, line:805:5>
|     |-DeclStmt 0x55633fe99038 <line:796:9, col:26>
|     | `-VarDecl 0x55633fe98fd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55633fe99108 <line:797:9, col:29>
|     | `-VarDecl 0x55633fe99068 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55633fe990f0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55633fe990d0 <col:28> 'int' 1
|     |-DeclStmt 0x55633fe99440 <line:798:9, col:71>
|     | `-VarDecl 0x55633fe99158 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55633fe99410 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55633fe99380 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55633fe993c8 <col:55> 'T' lvalue ParmVar 0x55633fe6ff48 'variable' 'T &'
|     |     `-UnaryOperator 0x55633fe993f8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55633fe993e8 <col:66> 'Args *' this
|     |-WhileStmt 0x55633fe99dd0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55633fe99df0 <line:799:16, col:61>
|     | | `-VarDecl 0x55633fe99468 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55633fe99648 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55633fe99618 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55633fe99600 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55633fe995e0 <col:29, col:61> 'String' (CXXTemporary 0x55633fe995e0)
|     | |           `-CXXMemberCallExpr 0x55633fe99570 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55633fe994e0 <col:29> '<bound member function type>' ->find 0x55633fe89ad8
|     | |             | `-CXXThisExpr 0x55633fe994d0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55633fe995a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55633fe99510 <col:34> 'const char *' lvalue ParmVar 0x55633fe6fda8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55633fe995c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55633fe99530 <col:43> 'int' lvalue ParmVar 0x55633fe6fe28 'flags' 'int'
|     | |             `-DeclRefExpr 0x55633fe99550 <col:50> 'Args::Slot *' lvalue Var 0x55633fe98fd0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55633fe99700 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55633fe996e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55633fe996c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55633fe99698 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|     | |       `-ImplicitCastExpr 0x55633fe99680 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55633fe99660 <col:23> 'String' lvalue Var 0x55633fe99468 'str' 'String'
|     | `-CompoundStmt 0x55633fe99da8 <col:64, line:803:9>
|     |   |-CallExpr 0x55633fe99b30 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55633fe99728 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|     |   | | `-CXXThisExpr 0x55633fe99718 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55633fe99af0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55633fe99758 <col:23> 'T *' lvalue Var 0x55633fe99158 's' 'T *'
|     |   | | `-CallExpr 0x55633fe99ab0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55633fe99940 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55633fe99988 <col:56> 'P' lvalue ParmVar 0x55633fe6fea0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55633fe999a8 <col:64> 'String' lvalue Var 0x55633fe99468 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55633fe99a58 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55633fe999e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|     |   | |   | `-DeclRefExpr 0x55633fe999c8 <col:70> 'T *' lvalue Var 0x55633fe99158 's' 'T *'
|     |   | |   `-UnaryOperator 0x55633fe99a98 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55633fe99a88 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55633fe99b10 <col:81> 'Args::Slot *' lvalue Var 0x55633fe98fd0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55633fe99cc8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55633fe99b60 <col:13> 'int' lvalue Var 0x55633fe99068 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55633fe99cb0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55633fe99c90 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55633fe99bf8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55633fe99bd8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55633fe99bc0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55633fe99b80 <col:28> 'int' lvalue Var 0x55633fe99068 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55633fe99ba0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55633fe99c78 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55633fe99c48 <col:49> 'bool' lvalue ->_read_status 0x55633fe53760
|     |   |         `-ImplicitCastExpr 0x55633fe99c28 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55633fe99c18 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55633fe99d78 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55633fe99ce8 <col:13> 'int' lvalue ParmVar 0x55633fe6fe28 'flags' 'int'
|     |     `-UnaryOperator 0x55633fe99d60 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55633fe99d48 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55633fe99d28 <col:23> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55633fe99f00 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55633fe99e38 <col:9> 'bool' lvalue ->_read_status 0x55633fe53760
|       | `-ImplicitCastExpr 0x55633fe99e18 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55633fe99e08 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55633fe99ee0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55633fe99ec0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55633fe99ea8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55633fe99e68 <col:25> 'int' lvalue Var 0x55633fe99068 'read_status' 'int'
|           `-IntegerLiteral 0x55633fe99e88 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55633fe706b8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55633fe70150 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55633fe701c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55633fe70618 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55633fe70288 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55633fe70308 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55633fe70380 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55633fe704d0 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55633fe9ad28 <col:87, line:821:5>
|     |-DeclStmt 0x55633fe99fd0 <line:809:9, col:26>
|     | `-VarDecl 0x55633fe99f68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55633fe9a0a0 <line:810:9, col:29>
|     | `-VarDecl 0x55633fe9a000 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55633fe9a088 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55633fe9a068 <col:28> 'int' 1
|     |-DeclStmt 0x55633fe9a2e8 <line:811:9, col:38>
|     | `-VarDecl 0x55633fe9a1d0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55633fe9a2c0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55633fe9a248 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55633fe9a2a0 <col:29> 'Vector<T>' lvalue ParmVar 0x55633fe704d0 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55633fe9abd8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55633fe9abf8 <line:812:16, col:61>
|     | | `-VarDecl 0x55633fe9a310 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55633fe9a4f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55633fe9a4c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55633fe9a4a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55633fe9a488 <col:29, col:61> 'String' (CXXTemporary 0x55633fe9a488)
|     | |           `-CXXMemberCallExpr 0x55633fe9a418 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55633fe9a388 <col:29> '<bound member function type>' ->find 0x55633fe89ad8
|     | |             | `-CXXThisExpr 0x55633fe9a378 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55633fe9a450 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55633fe9a3b8 <col:34> 'const char *' lvalue ParmVar 0x55633fe70288 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55633fe9a468 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55633fe9a3d8 <col:43> 'int' lvalue ParmVar 0x55633fe70308 'flags' 'int'
|     | |             `-DeclRefExpr 0x55633fe9a3f8 <col:50> 'Args::Slot *' lvalue Var 0x55633fe99f68 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55633fe9a5a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55633fe9a590 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55633fe9a570 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55633fe9a540 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55633fba0648
|     | |       `-ImplicitCastExpr 0x55633fe9a528 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55633fe9a508 <col:23> 'String' lvalue Var 0x55633fe9a310 'str' 'String'
|     | `-CompoundStmt 0x55633fe9aba0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55633fe9a668 <line:813:13, col:23>
|     |   | `-VarDecl 0x55633fe9a5d0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55633fe9a648 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55633fe9a7e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55633fe9a690 <col:13> '<bound member function type>' ->postparse 0x55633fe89ce8
|     |   | | `-CXXThisExpr 0x55633fe9a680 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55633fe9a790 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55633fe9a6e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55633fe9a6c0 <col:23> 'P' lvalue ParmVar 0x55633fe70380 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55633fe9a728 <col:36> 'String' lvalue Var 0x55633fe9a310 'str' 'String'
|     |   | | |-DeclRefExpr 0x55633fe9a748 <col:41> 'T' lvalue Var 0x55633fe9a5d0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55633fe9a778 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55633fe9a768 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55633fe9a7c8 <col:53> 'Args::Slot *' lvalue Var 0x55633fe99f68 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55633fe9a940 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55633fe9a878 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55633fe9a848 <col:17> 'bool' lvalue ->_read_status 0x55633fe53760
|     |   | |   `-ImplicitCastExpr 0x55633fe9a828 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55633fe9a818 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55633fe9a918 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55633fe9a8b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55633fe9a890 <col:17> 'Vector<T> *' lvalue Var 0x55633fe9a1d0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55633fe9a8f8 <col:30> 'T' lvalue Var 0x55633fe9a5d0 'sx' 'T'
|     |   |-BinaryOperator 0x55633fe9aac0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55633fe9a958 <col:13> 'int' lvalue Var 0x55633fe9a000 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55633fe9aaa8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55633fe9aa88 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55633fe9a9f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55633fe9a9d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55633fe9a9b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55633fe9a978 <col:28> 'int' lvalue Var 0x55633fe9a000 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55633fe9a998 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55633fe9aa70 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55633fe9aa40 <col:49> 'bool' lvalue ->_read_status 0x55633fe53760
|     |   |         `-ImplicitCastExpr 0x55633fe9aa20 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55633fe9aa10 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55633fe9ab70 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55633fe9aae0 <col:13> 'int' lvalue ParmVar 0x55633fe70308 'flags' 'int'
|     |     `-UnaryOperator 0x55633fe9ab58 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55633fe9ab40 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55633fe9ab20 <col:23> 'const int' lvalue Var 0x55633fe5aca8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55633fe9ad08 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55633fe9ac40 <col:9> 'bool' lvalue ->_read_status 0x55633fe53760
|       | `-ImplicitCastExpr 0x55633fe9ac20 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55633fe9ac10 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55633fe9ace8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55633fe9acc8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55633fe9acb0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55633fe9ac70 <col:25> 'int' lvalue Var 0x55633fe9a000 'read_status' 'int'
|           `-IntegerLiteral 0x55633fe9ac90 <col:40> 'int' 1
|-AccessSpecDecl 0x55633fe70730 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55633fe70758 prev 0x55633fe58fa8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55633fe70850 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55633fe70940 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55633fe9ad60 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55633fe70a30 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55633fe9ad70 <col:25, line:830:9>
| |-CXXMethodDecl 0x55633fe70b30 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55633fe70be0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55633fe70c88 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55633fe70c88
| | `-ParmVarDecl 0x55633fe70d98 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55633fe71558 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55633fe71558
|   `-ParmVarDecl 0x55633fe71668 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55633fe70e08 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55633fe70f68 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55633fe71160 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55633fe71010 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55633fe71088 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55633fe9af50 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55633fe71418 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55633fe9adc0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55633fe9ad80 <col:20> 'void *' lvalue ParmVar 0x55633fe71010 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55633fe71480 '_slot' 'char *'
| | | `-CXXNewExpr 0x55633fe9ae48 <col:32, col:45> 'char *' array Function 0x55633f9c32b8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55633fe9ae30 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55633fe9ae00 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55633fe71088 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55633fe714e0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55633fe9af10 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55633fe9aed0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55633fe71088 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55633fe9afd0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55633fe71260 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55633fe70a30 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55633fe9b058 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55633fe9b038 <line:840:13, col:22> 'void' array Function 0x55633f9c3618 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55633fe9b020 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55633fe9aff0 <col:22> 'char *' lvalue ->_slot 0x55633fe71480
| |         `-CXXThisExpr 0x55633fe9afe0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55633fe71360 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55633fe70b30 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55633fe9b248 <col:22, line:844:9>
| |   `-CallExpr 0x55633fe9b1b0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55633fe9b198 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55633fe9b178 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55633facf098 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55633fe9b1e8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55633fe9b0c8 <col:20> 'void *' lvalue ->_ptr 0x55633fe71418
| |     |   `-CXXThisExpr 0x55633fe9b0b8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55633fe9b218 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55633fe9b200 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55633fe9b108 <col:26> 'char *' lvalue ->_slot 0x55633fe71480
| |     |     `-CXXThisExpr 0x55633fe9b0f8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55633fe9b230 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55633fe9b148 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55633fe714e0
| |         `-CXXThisExpr 0x55633fe9b138 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55633fe71418 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55633fe71480 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55633fe714e0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55633fe716d8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55633fe716d8
| | `-ParmVarDecl 0x55633fe717e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55633fe71888 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55633fe71888
|   `-ParmVarDecl 0x55633fe71998 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55633fe71b38 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55633fe71a08 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55633fe71aa8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55633fe71dd0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55633fe71fc8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55633fe71e98 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55633fe72148 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55633fe9b280 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55633fe9b260 <col:20> 'T *' lvalue ParmVar 0x55633fe71e98 'ptr' 'T *'
|   | `-CompoundStmt 0x55633fe9b2d0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55633fe72098 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55633fe70b30 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55633fe9b480 <col:22, line:857:9>
|   |   `-CallExpr 0x55633fe9b450 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55633fe9b2e0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55633fb877c8 0x55633fb31af8
|   |     |-CXXOperatorCallExpr 0x55633fe9b3e0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55633fe9b370 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55633fd94778 0x55633fd94398 0x55633fd93fc8 0x55633fd93be8 0x55633fd93808 0x55633fd93438
|   |     | `-MemberExpr 0x55633fe9b340 <col:29> 'T *' lvalue ->_ptr 0x55633fe72148
|   |     |   `-CXXThisExpr 0x55633fe9b330 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55633fe9b420 <col:35> 'T' lvalue ->_slot 0x55633fe721a8
|   |       `-CXXThisExpr 0x55633fe9b410 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55633fe72148 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55633fe721a8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55633fe72210 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55633fe72310 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55633fe72360 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fe722f0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55633fe722d0 <col:31> 'int' 48
|-FieldDecl 0x55633fe72388 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55633fe723e8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55633fe72448 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55633fe72580 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55633fe882d0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55633fe88330 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55633fe883e0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55633fe896b0 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55633fe88510 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55633fe89800 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55633fe89770 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55633fe89ad8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55633fe898c0 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55633fe89940 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55633fe899f0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55633fe89ce8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55633fe89ba0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55633fe89c18 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55633fe89db8 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55633fe89f08 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55633fe89e70 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55633fe8a298 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55633fe89fc8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55633fe8a048 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55633fe8a0f0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55633fe8a1a8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55633fe8a4c0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55633fe8a370 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55633fe8a3e8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55633fe8a7d8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55633fe8a570 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55633fe8a738 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55633fe8a648 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fb904f0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fb90608 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55633fb90698 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55633fb90768 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55633fb90850 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fb90a68 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55633fb90910 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb90c18 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55633fb90b20 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55633fb90d60 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55633fb90cd0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55633fb90ea8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55633fb90e18 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb90ff0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55633fb90f60 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb910b8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55633fb91200 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55633fb91170 <col:28> col:31 'int'
|-CXXMethodDecl 0x55633fb912c8 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55633fb91410 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55633fb91380 <col:28> col:31 'int'
|-CXXMethodDecl 0x55633fb91588 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55633fb914c8 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb916d0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55633fb91640 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb91798 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55633fb91958 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55633fb91848 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55633fb918c0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb91ba8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55633fb91a18 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55633fb91a90 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55633fb91c58 <col:86> "" ""
|-CXXMethodDecl 0x55633fb91ec8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55633fb91d38 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55633fb91db0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb92078 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55633fb91f88 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55633fb92228 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55633fb92130 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55633fb924f8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55633fb922e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55633fb92358 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55633fb923d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb927d8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55633fb925c0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55633fb92638 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55633fb926b0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55633fb92890 <col:115> "" ""
|-AccessSpecDecl 0x55633fb92900 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55633fb92938 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fb93e50 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55633fb93e50
| `-ParmVarDecl 0x55633fb93f58 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55633fb93ff8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55633fb93ff8
| `-ParmVarDecl 0x55633fb94108 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55633fbc9738 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55633fdbb530 <col:7>
|-CXXConstructorDecl 0x55633fbc9810 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55633fbc9810
| `-ParmVarDecl 0x55633fbc9928 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55633fbc9998 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55633fbc9998
| `-ParmVarDecl 0x55633fbc9aa8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55633fdbdf30 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fdaa0d8 prev 0x55633fd9f2e0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fdaa1d0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55633fdaa2c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55633fdaa3e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55633fdaa568 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55633fdaa6e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55633fdaa868 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55633fdbb698 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55633fdbbf08 <col:11>
|-CXXDestructorDecl 0x55633fdbb770 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55633fdbb8a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55633fdbb8a8
| `-ParmVarDecl 0x55633fdbb9b8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55633fdbba58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55633fdbba58
| `-ParmVarDecl 0x55633fdbbb68 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55633fdbe928 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55633fdbea38 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55633fdbecb8 <col:11>
|   `-ReturnStmt 0x55633fdbeca8 <col:11>
|     `-UnaryOperator 0x55633fdbec90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55633fdbec80 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55633fdbeaa8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55633fdbeaa8
  `-ParmVarDecl 0x55633fdbebb8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fdaa8d0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fdaa9e8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55633fdaaa88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55633fdaaaf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55633fdaab58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55633fdaabc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55633fdaac20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55633fdaace0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55633fdaad40 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55633fdaada0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55633fdbb5a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55633fdaaa88 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55633fdbbf18 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55633fdbbf70 <col:12>
|-CXXConstructorDecl 0x55633fdbbbd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55633fdbbbd8
| `-ParmVarDecl 0x55633fdbbce8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55633fdbbd88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55633fdbbd88
| `-ParmVarDecl 0x55633fdbbe98 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55633fdbe010 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fd989f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55633fd98b08 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55633fd98b98 <col:16, col:22> col:16 public
|-EnumDecl 0x55633fd98bc0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55633fd98cc0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55633fd98da0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fd98ca0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55633fd98c80 <col:21> 'int' 28
| `-EnumConstantDecl 0x55633fd98d50 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55633fd98db8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fd98d30 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55633fd98d10 <col:22> 'int' 64
|-CXXMethodDecl 0x55633fd990f8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55633fd98de0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55633fd98e60 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55633fd98ed8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55633fd98f50 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55633fd991b8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55633fd993b8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55633fd99230 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55633fd992a8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55633fd99468 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55633fd995c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55633fd994d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55633fd99670 <col:72> warn_unused_result ""
|-TypedefDecl 0x55633fd999d0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55633fd99960 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55633fd99900 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55633fd998c0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55633f8702d0 'void'
|       |-PointerType 0x55633fb18d90 'unsigned char *'
|       | `-BuiltinType 0x55633f8703d0 'unsigned char'
|       |-TypedefType 0x55633f915300 'size_t' sugar
|       | |-Typedef 0x55633f8e0b20 'size_t'
|       | `-BuiltinType 0x55633f870430 'unsigned long'
|       `-PointerType 0x55633f870ad0 'void *'
|         `-BuiltinType 0x55633f8702d0 'void'
|-CXXMethodDecl 0x55633fd99e48 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55633fd99a40 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55633fd99ab8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55633fd99b50 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55633fd99bd0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55633fdb4540 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55633fdb4528 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55633fdb44f0 <col:58> 'int' 0
| |-ParmVarDecl 0x55633fd99c50 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55633fdb4568 <col:76> 'int' 0
| |-ParmVarDecl 0x55633fd99cd0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55633fdb4588 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55633fd99f18 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55633fd99f98 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55633fd9a058 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55633fd9a0f8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9a150 <col:30>
|-CXXMethodDecl 0x55633fd9a1c8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55633fd9a268 <col:20>
| `-OptimizeNoneAttr 0x55633fd9a2c0 <col:30>
|-CXXMethodDecl 0x55633fd9a338 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55633fd9a3d8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9a488 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55633fd9a528 <col:20>
| |-OptimizeNoneAttr 0x55633fd9a580 <col:30>
| `-WarnUnusedResultAttr 0x55633fd9a5a8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9a600 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55633fd9a6a0 <col:20>
| `-OptimizeNoneAttr 0x55633fd9a6f8 <col:30>
|-CXXMethodDecl 0x55633fd9a748 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55633fd9a7e8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9a840 <col:30>
|-CXXMethodDecl 0x55633fd9a888 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55633fd9a928 <col:20>
| `-OptimizeNoneAttr 0x55633fd9a980 <col:30>
|-CXXMethodDecl 0x55633fd9a9c8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fd9aa88 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fd9ab50 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55633fd9ac18 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55633fd9acd8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fd9adf8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55633fdb4650 <col:54, line:99:5>
|   `-ReturnStmt 0x55633fdb4640 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55633fdb4628 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55633fdb45f8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55633fdab0d8
|         `-CXXThisExpr 0x55633fdb45e8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55633fd9af98 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55633fd9aea8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55633fdb4700 <col:67, line:103:5>
|   `-BinaryOperator 0x55633fdb46e0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55633fdb4678 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55633fdab0d8
|     | `-CXXThisExpr 0x55633fdb4668 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55633fdb46c8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdb46a8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55633fd9aea8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55633fd9b090 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55633fdb4780 <col:33, line:107:5>
|   `-ReturnStmt 0x55633fdb4770 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55633fdb4758 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55633fdb4728 <col:16> 'void *' lvalue ->_destructor_argument 0x55633fdab140
|         `-CXXThisExpr 0x55633fdb4718 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55633fd9b150 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55633fdb4db0 <col:25, line:113:5>
|   |-ParenExpr 0x55633fdb4af8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55633fdb4ac8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb4838 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55633fdb4810 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55633fdb47d8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55633fdb47a8 <col:24> '<bound member function type>' ->shared 0x55633fd9a1c8
|   |   |       `-ImplicitCastExpr 0x55633fdb47f8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55633fdb4798 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55633fdb4898 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb4878 <col:42> 'int' 0
|   |   `-CallExpr 0x55633fdb4a28 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb4a10 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb49f0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb4a68 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb4908 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55633fdb4a80 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb4930 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb4a98 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb4968 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55633fdb4ab0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb49d8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb49c0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb4988 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55633fdb4cf8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55633fdb4b28 <col:2> 'unsigned char *' lvalue ->_head 0x55633fdaaee0
|   | | `-CXXThisExpr 0x55633fdb4b18 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55633fdb4ce0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55633fdb4cc0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55633fdb4b68 <col:10> 'unsigned char *' lvalue ->_data 0x55633fdaaf48
|   |     | `-CXXThisExpr 0x55633fdb4b58 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55633fdb4ca8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55633fdb4c88 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55633fdb4ba8 <col:18> 'unsigned char *' lvalue ->_tail 0x55633fdaafb0
|   |         | `-CXXThisExpr 0x55633fdb4b98 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55633fdb4c70 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55633fdb4c50 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55633fdb4be8 <col:26> 'unsigned char *' lvalue ->_end 0x55633fdab018
|   |             | `-CXXThisExpr 0x55633fdb4bd8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55633fdb4c38 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55633fdb4c18 <col:33> 'int' 0
|   `-BinaryOperator 0x55633fdb4d90 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55633fdb4d28 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55633fdab0d8
|     | `-CXXThisExpr 0x55633fdb4d18 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55633fdb4d78 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55633fdb4d58 <col:16> 'int' 0
|-CXXMethodDecl 0x55633fd9b290 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55633fd9b200 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fd9b338 <col:20>
| |-OptimizeNoneAttr 0x55633fd9b390 <col:30>
| `-WarnUnusedResultAttr 0x55633fd9b3b8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9b488 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55633fd9b3f8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fd9b530 <col:20>
| |-OptimizeNoneAttr 0x55633fd9b588 <col:30>
| `-WarnUnusedResultAttr 0x55633fd9b5b0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9b6e8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55633fd9b5f0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55633fd9b790 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9b890 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55633fd9b800 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fd9b938 <col:20>
| `-OptimizeNoneAttr 0x55633fd9b990 <col:30>
|-CXXMethodDecl 0x55633fd9ba58 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55633fd9b9c8 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55633fd9bb00 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9bc00 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55633fd9bb70 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55633fd9bca8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9bda8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55633fd9bd18 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fd9be50 <col:20>
| `-OptimizeNoneAttr 0x55633fd9bea8 <col:30>
|-CXXMethodDecl 0x55633fd9c038 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55633fd9bee8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55633fd9bf60 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55633fdb45a8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55633fd9c0e8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55633fd9c2e8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55633fd9c160 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55633fd9c1d8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fd9c4f8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55633fd9c3a8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55633fd9c420 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fd9c708 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55633fd9c5b8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55633fd9c638 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55633fdb45b8 <col:39> 'int' 0
|-CXXMethodDecl 0x55633fd9c7d8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55633fd9c8a0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55633fd9c968 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55633fd9ca28 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fd9caf0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55633fd9cc38 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55633fd9cba8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55633fd9ce08 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55633fd9ccf8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55633fd9cd70 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fd9ced8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55633fd9cf98 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55633fd9d038 <col:20>
| `-OptimizeNoneAttr 0x55633fd9d090 <col:30>
|-CXXMethodDecl 0x55633fd9d0e0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55633fd9d180 <col:20>
| `-OptimizeNoneAttr 0x55633fd9d1d8 <col:30>
|-CXXMethodDecl 0x55633fd9d228 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55633fd9d2e8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fd9d3b0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55633fd9d450 <col:20>
| `-OptimizeNoneAttr 0x55633fd9d4a8 <col:30>
|-CXXMethodDecl 0x55633fd9d5f8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55633fd9d4e8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55633fd9d560 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fd9d748 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55633fd9d6b8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fd9d820 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55633fd9d8e0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55633fd9d980 <col:20>
| `-OptimizeNoneAttr 0x55633fd9d9d8 <col:30>
|-CXXMethodDecl 0x55633fd9da28 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55633fd9dac8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9db20 <col:30>
|-CXXMethodDecl 0x55633fd9db70 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55633fd9dc38 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55633fd9dcd8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9dd30 <col:30>
|-CXXMethodDecl 0x55633fd9dd78 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55633fd9de98 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55633fd9e008 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55633fd9df48 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55633fd9e0f8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55633fd9e198 <col:20>
| `-OptimizeNoneAttr 0x55633fd9e1f0 <col:30>
|-CXXMethodDecl 0x55633fd9e240 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55633fd9e300 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55633fd9e538 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55633fd9e3b0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55633fd9e428 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fd9e5e8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9e640 <col:30>
|-CXXMethodDecl 0x55633fd9e6e8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55633fd9e788 <col:20>
| `-OptimizeNoneAttr 0x55633fd9e7e0 <col:30>
|-CXXMethodDecl 0x55633fd9e830 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55633fd9e8d0 <col:20>
| `-OptimizeNoneAttr 0x55633fd9e928 <col:30>
|-CXXMethodDecl 0x55633fd9e970 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55633fd9ea10 <col:20>
| `-OptimizeNoneAttr 0x55633fd9ea68 <col:30>
|-CXXMethodDecl 0x55633fd9eb68 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55633fd9eaa0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55633fd9ec10 <col:20>
| `-OptimizeNoneAttr 0x55633fd9ec68 <col:30>
|-CXXMethodDecl 0x55633fd9ee28 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55633fd9eca0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55633fd9ed18 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fd9eed8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9ef30 <col:30>
|-CXXMethodDecl 0x55633fd9efd8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55633fd9f0f8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55633fd9f218 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55633fd9f2b8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55633fd9f2e0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55633fd9f408 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55633fd9f4a8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9f500 <col:30>
|-CXXMethodDecl 0x55633fd9f5a8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55633fd9f648 <col:20>
| `-OptimizeNoneAttr 0x55633fd9f6a0 <col:30>
|-AccessSpecDecl 0x55633fd9f6c8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55633fd9f6f0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55633fd9f7f0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55633fd9f840 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fd9f7d0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55633fd9f7b0 <col:14> 'int' 48
|-CXXMethodDecl 0x55633fd9f8a8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55633fd9f948 <col:20>
| `-OptimizeNoneAttr 0x55633fd9f9a0 <col:30>
|-CXXMethodDecl 0x55633fd9fa18 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55633fd9fab8 <col:20>
| `-OptimizeNoneAttr 0x55633fd9fb10 <col:30>
|-CXXMethodDecl 0x55633fd9fbd8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55633fd9fb48 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55633fd9fd78 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55633fd9ff18 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55633fd9fe28 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55633fd9ffc0 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55633fda00c0 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55633fda0470 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda00a0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55633fda0080 <col:9> 'int' 0
| |-EnumConstantDecl 0x55633fda0150 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55633fda0488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda0130 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55633fda0110 <col:14> 'int' 1
| |-EnumConstantDecl 0x55633fda01e0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55633fda04a0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda01c0 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55633fda01a0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55633fda0270 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55633fda04b8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda0250 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55633fda0230 <col:14> 'int' 3
| |-EnumConstantDecl 0x55633fda0300 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55633fda04d0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda02e0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55633fda02c0 <col:13> 'int' 4
| |-EnumConstantDecl 0x55633fda0390 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55633fda04e8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda0370 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55633fda0350 <col:13> 'int' 5
| `-EnumConstantDecl 0x55633fda0420 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55633fda0500 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fda0400 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55633fda03e0 <col:14> 'int' 6
|-CXXMethodDecl 0x55633fda0568 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55633fda0608 <col:20>
| `-OptimizeNoneAttr 0x55633fda0660 <col:30>
|-CXXMethodDecl 0x55633fda0758 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55633fda0698 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55633fda0800 <col:20>
| `-OptimizeNoneAttr 0x55633fda0858 <col:30>
|-CXXMethodDecl 0x55633fda08c8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55633fda09f0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55633fda0b68 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55633fda0aa0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55633fda0c30 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55633fda0cf8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55633fda0e38 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55633fda0da8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55633fda0ee0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55633fda0fe0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55633fda11e0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda0fc0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55633fda0fa0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55633fda1070 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55633fda11f8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda1050 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55633fda1030 <col:45> 'int' 4
| |-EnumConstantDecl 0x55633fda1100 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55633fda1210 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda10e0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55633fda10c0 <col:24> 'int' 0
| `-EnumConstantDecl 0x55633fda1190 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55633fda1228 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fda1170 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55633fda1150 <col:47> 'int' 16
|-CXXMethodDecl 0x55633fda1288 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55633fda13f8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55633fda1338 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55633fda14a0 <col:20>
| `-OptimizeNoneAttr 0x55633fda14f8 <col:30>
|-CXXMethodDecl 0x55633fda1548 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55633fdb4ed0 <col:18, col:36>
|   `-ReturnStmt 0x55633fdb4ec0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55633fdb4ea8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55633fdb4e88 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55633fdb4e58 <col:27> '<bound member function type>' ->xanno 0x55633fd9f5a8
|           `-CXXThisExpr 0x55633fdb4e48 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55633fda1640 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55633fdb4fe0 <col:30, col:48>
|   `-ReturnStmt 0x55633fdb4fd0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55633fdb4fb8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55633fdb4f98 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55633fdb4f68 <col:39> '<bound member function type>' ->xanno 0x55633fd9f408
|           `-CXXThisExpr 0x55633fdb4f58 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55633fda1728 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55633fdb5178 <col:24, col:50>
|   `-ReturnStmt 0x55633fdb5168 <col:26, col:47>
|     `-UnaryOperator 0x55633fdb5150 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55633fdb5130 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55633fdb5118 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55633fdb50c8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55633fdaa3e8
|         |   `-CXXMemberCallExpr 0x55633fdb50a8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55633fdb5078 <col:34> '<bound member function type>' ->xanno 0x55633fd9f5a8
|         |       `-CXXThisExpr 0x55633fdb5068 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55633fdb50f8 <col:46> 'int' 0
|-CXXMethodDecl 0x55633fda1830 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55633fdb5348 <col:36, col:62>
|   `-ReturnStmt 0x55633fdb5338 <col:38, col:59>
|     `-UnaryOperator 0x55633fdb5320 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55633fdb5300 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55633fdb52e8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55633fdb5260 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55633fdaa3e8
|         |   `-CXXMemberCallExpr 0x55633fdb5240 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55633fdb5210 <col:46> '<bound member function type>' ->xanno 0x55633fd9f408
|         |       `-CXXThisExpr 0x55633fdb5200 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55633fdb5290 <col:58> 'int' 0
|-CXXMethodDecl 0x55633fda1948 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55633fdb54e0 <col:26, col:53>
|   `-ReturnStmt 0x55633fdb54d0 <col:28, col:50>
|     `-UnaryOperator 0x55633fdb54b8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55633fdb5498 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55633fdb5480 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55633fdb5430 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55633fdaa6e8
|         |   `-CXXMemberCallExpr 0x55633fdb5410 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55633fdb53e0 <col:36> '<bound member function type>' ->xanno 0x55633fd9f5a8
|         |       `-CXXThisExpr 0x55633fdb53d0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55633fdb5460 <col:49> 'int' 0
|-CXXMethodDecl 0x55633fda1a68 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55633fdb56b8 <col:38, col:65>
|   `-ReturnStmt 0x55633fdb56a8 <col:40, col:62>
|     `-UnaryOperator 0x55633fdb5690 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55633fdb5670 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55633fdb5658 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55633fdb55c8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55633fdaa6e8
|         |   `-CXXMemberCallExpr 0x55633fdb55a8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55633fdb5578 <col:48> '<bound member function type>' ->xanno 0x55633fd9f408
|         |       `-CXXThisExpr 0x55633fdb5568 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55633fdb55f8 <col:61> 'int' 0
|-CXXMethodDecl 0x55633fda1c18 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55633fda1b20 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55633fdb5d88 <col:34, line:463:5>
|   |-ParenExpr 0x55633fdb5bd0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55633fdb5ba0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb5808 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb57d8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb5728 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb5710 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb56d0 <col:23> 'int' lvalue ParmVar 0x55633fda1b20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb56f0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb57b8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb5788 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb5748 <col:33> 'int' lvalue ParmVar 0x55633fda1b20 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55633fdb57a0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55633fdb5768 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55633fdb5868 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb5848 <col:56> 'int' 0
|   |   `-CallExpr 0x55633fdb5b00 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb5ae8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb5ac8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb5b40 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb5958 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55633fdb5b58 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb5988 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb5b70 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb59c0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55633fdb5b88 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb5ab0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb5a98 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb5a58 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55633fdb5d78 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55633fdb5d60 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55633fdb5d40 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55633fdb5d10 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55633fdb5cc0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55633fdaa3e8
|         |   `-CXXMemberCallExpr 0x55633fdb5ca0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55633fdb5c70 <col:9> '<bound member function type>' ->xanno 0x55633fd9f408
|         |       `-CXXThisExpr 0x55633fdb5c60 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55633fdb5d28 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55633fdb5cf0 <col:21> 'int' lvalue ParmVar 0x55633fda1b20 'i' 'int'
|-CXXMethodDecl 0x55633fda1e68 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55633fda1cd8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55633fda1d50 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55633fdb6418 <col:40, line:472:5>
|   |-ParenExpr 0x55633fdb6230 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55633fdb6200 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb5ee0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb5eb0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb5e00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb5de8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb5da8 <col:23> 'int' lvalue ParmVar 0x55633fda1cd8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb5dc8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb5e90 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb5e60 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb5e20 <col:33> 'int' lvalue ParmVar 0x55633fda1cd8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55633fdb5e78 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55633fdb5e40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55633fdb5f40 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb5f20 <col:56> 'int' 0
|   |   `-CallExpr 0x55633fdb6160 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb6148 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb6128 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb61a0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb5fb0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55633fdb61b8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb5fe0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb61d0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb6018 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55633fdb61e8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb6110 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb60f8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb60b8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55633fdb63f8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55633fdb63a0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55633fdb6370 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55633fdb6320 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55633fdaa3e8
|     | |   `-CXXMemberCallExpr 0x55633fdb6300 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55633fdb62d0 <col:2> '<bound member function type>' ->xanno 0x55633fd9f5a8
|     | |       `-CXXThisExpr 0x55633fdb62c0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55633fdb6388 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55633fdb6350 <col:14> 'int' lvalue ParmVar 0x55633fda1cd8 'i' 'int'
|     `-ImplicitCastExpr 0x55633fdb63e0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdb63c0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55633fda1d50 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55633fda2028 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55633fda1f30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55633fdb6b98 <col:36, line:485:5>
|   |-ParenExpr 0x55633fdb6900 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb68d0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb65b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb6580 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb6490 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb6478 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb6438 <col:23> 'int' lvalue ParmVar 0x55633fda1f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb6458 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb6560 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb6548 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb64b0 <col:33> 'int' lvalue ParmVar 0x55633fda1f30 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb6528 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb6510 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb64d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb64f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55633fdb6610 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb65f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb6830 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb6818 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb67f8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb6870 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb6680 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55633fdb6888 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb66b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb68a0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb66f0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55633fdb68b8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb67e0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb67c8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb6788 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55633fdb6b88 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55633fdb6b70 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55633fdb6b58 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55633fdb6b28 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55633fdb6ac8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55633fdb6a98 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55633fdb6a10 <col:61, col:70> 'char const[48]' lvalue ->c 0x55633fdaa2c0
|             |   `-CXXMemberCallExpr 0x55633fdb69f0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55633fdb69c0 <col:61> '<bound member function type>' ->xanno 0x55633fd9f408
|             |       `-CXXThisExpr 0x55633fdb69b0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55633fdb6ab0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55633fdb6a40 <col:74> 'int' lvalue ParmVar 0x55633fda1f30 'i' 'int'
|-CXXMethodDecl 0x55633fda2278 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55633fda20e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55633fda2160 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55633fdb72e8 <col:42, line:500:5>
|   |-ParenExpr 0x55633fdb7080 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb7050 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb6d30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb6d00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb6c10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb6bf8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb6bb8 <col:23> 'int' lvalue ParmVar 0x55633fda20e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb6bd8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb6ce0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb6cc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb6c30 <col:33> 'int' lvalue ParmVar 0x55633fda20e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb6ca8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb6c90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb6c50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb6c70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55633fdb6d90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb6d70 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb6fb0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb6f98 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb6f78 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb6ff0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb6e00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55633fdb7008 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb6e38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb7020 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb6e70 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55633fdb7038 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb6f60 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb6f48 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb6f08 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55633fdb72c8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55633fdb7278 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55633fdb7248 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55633fdb71f0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55633fdb71c0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55633fdb7170 <col:48, col:57> 'char [48]' lvalue ->c 0x55633fdaa2c0
|     |     |   `-CXXMemberCallExpr 0x55633fdb7150 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55633fdb7120 <col:48> '<bound member function type>' ->xanno 0x55633fd9f5a8
|     |     |       `-CXXThisExpr 0x55633fdb7110 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55633fdb71d8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55633fdb71a0 <col:61> 'int' lvalue ParmVar 0x55633fda20e8 'i' 'int'
|     `-ImplicitCastExpr 0x55633fdb72b0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdb7290 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55633fda2160 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55633fda2438 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55633fda2340 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55633fdb7a48 <col:35, line:513:5>
|   |-ParenExpr 0x55633fdb7758 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb7728 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb7480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb7450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb7360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb7348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb7308 <col:23> 'int' lvalue ParmVar 0x55633fda2340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb7328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb7430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb7418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb7380 <col:33> 'int' lvalue ParmVar 0x55633fda2340 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb73f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb73e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb73a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb73c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55633fdb74e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb74c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb7688 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb7670 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb7650 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb76c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb7550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55633fdb76e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb7588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb76f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb75c0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55633fdb7710 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb7638 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb7620 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb75e0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55633fdb7a38 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55633fdb7a20 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55633fdb7a08 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55633fdb79d8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55633fdb7950 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55633fdb7920 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55633fdb78d0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55633fdaa2c0
|             |   `-CXXMemberCallExpr 0x55633fdb78b0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55633fdb7880 <col:60> '<bound member function type>' ->xanno 0x55633fd9f408
|             |       `-CXXThisExpr 0x55633fdb7870 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55633fdb7938 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55633fdb7900 <col:73> 'int' lvalue ParmVar 0x55633fda2340 'i' 'int'
|-CXXMethodDecl 0x55633fda2688 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55633fda24f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55633fda2570 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55633fdb8168 <col:41, line:528:5>
|   |-ParenExpr 0x55633fdb7ef0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb7ec0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb7be0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb7bb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb7ac0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb7aa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb7a68 <col:23> 'int' lvalue ParmVar 0x55633fda24f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb7a88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb7b90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb7b78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb7ae0 <col:33> 'int' lvalue ParmVar 0x55633fda24f8 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb7b58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb7b40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb7b00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb7b20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55633fdb7c40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb7c20 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb7e20 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb7e08 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb7de8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb7e60 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb7cb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55633fdb7e78 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb7ce8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb7e90 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb7d20 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55633fdb7ea8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb7dd0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb7db8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb7d78 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55633fdb8148 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55633fdb80f8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55633fdb80c8 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55633fdb8070 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55633fdb8030 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55633fdb7fe0 <col:47, col:56> 'char [48]' lvalue ->c 0x55633fdaa2c0
|     |     |   `-CXXMemberCallExpr 0x55633fdb7fc0 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55633fdb7f90 <col:47> '<bound member function type>' ->xanno 0x55633fd9f5a8
|     |     |       `-CXXThisExpr 0x55633fdb7f80 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55633fdb8048 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55633fdb8010 <col:60> 'int' lvalue ParmVar 0x55633fda24f8 'i' 'int'
|     `-ImplicitCastExpr 0x55633fdb8130 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdb8110 <col:65> 'int16_t':'short' lvalue ParmVar 0x55633fda2570 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55633fda2848 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55633fda2750 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55633fdb8838 <col:36, line:541:5>
|   |-ParenExpr 0x55633fdb85d8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb85a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb8300 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb82d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb81e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb81c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb8188 <col:23> 'int' lvalue ParmVar 0x55633fda2750 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb81a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb82b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb8298 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb8200 <col:33> 'int' lvalue ParmVar 0x55633fda2750 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb8278 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb8260 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb8220 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb8240 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55633fdb8360 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb8340 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb8508 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb84f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb84d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb8548 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb83d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55633fdb8560 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb8408 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb8578 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb8440 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55633fdb8590 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb84b8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb84a0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb8460 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55633fdb8828 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55633fdb8810 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55633fdb87f8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55633fdb87c8 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55633fdb8770 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55633fdb8740 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55633fdb86f0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55633fdaa2c0
|             |   `-CXXMemberCallExpr 0x55633fdb86d0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55633fdb86a0 <col:61> '<bound member function type>' ->xanno 0x55633fd9f408
|             |       `-CXXThisExpr 0x55633fdb8690 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55633fdb8758 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55633fdb8720 <col:74> 'int' lvalue ParmVar 0x55633fda2750 'i' 'int'
|-CXXMethodDecl 0x55633fda2a18 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55633fda2908 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55633fda2980 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55633fda2ac8 <col:20>
| `-OptimizeNoneAttr 0x55633fda2b20 <col:30>
|-CXXMethodDecl 0x55633fda2c58 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55633fda2b60 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55633fdb8f08 <col:35, line:562:5>
|   |-ParenExpr 0x55633fdb8ca8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb8c78 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb89d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb89a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb88b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb8898 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb8858 <col:23> 'int' lvalue ParmVar 0x55633fda2b60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb8878 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb8980 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb8968 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb88d0 <col:33> 'int' lvalue ParmVar 0x55633fda2b60 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb8948 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb8930 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb88f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb8910 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55633fdb8a30 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb8a10 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb8bd8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb8bc0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb8ba0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb8c18 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb8aa0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55633fdb8c30 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb8ad8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb8c48 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb8b10 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55633fdb8c60 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb8b88 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb8b70 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb8b30 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55633fdb8ef8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55633fdb8ee0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55633fdb8ec8 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55633fdb8e98 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55633fdb8e40 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55633fdb8e10 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55633fdb8dc0 <col:60, col:69> 'char const[48]' lvalue ->c 0x55633fdaa2c0
|             |   `-CXXMemberCallExpr 0x55633fdb8da0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55633fdb8d70 <col:60> '<bound member function type>' ->xanno 0x55633fd9f408
|             |       `-CXXThisExpr 0x55633fdb8d60 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55633fdb8e28 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55633fdb8df0 <col:73> 'int' lvalue ParmVar 0x55633fda2b60 'i' 'int'
|-CXXMethodDecl 0x55633fda2e68 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55633fda2d18 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55633fda2d90 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55633fdb95e8 <col:41, line:577:5>
|   |-ParenExpr 0x55633fdb9378 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb9348 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb90a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb9070 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb8f80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb8f68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb8f28 <col:23> 'int' lvalue ParmVar 0x55633fda2d18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb8f48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb9050 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb9038 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb8fa0 <col:33> 'int' lvalue ParmVar 0x55633fda2d18 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb9018 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb9000 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb8fc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb8fe0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55633fdb9100 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb90e0 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb92a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb9290 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb9270 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb92e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb9170 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55633fdb9300 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb91a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb9318 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb91e0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55633fdb9330 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb9258 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb9240 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb9200 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55633fdb95c8 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55633fdb9578 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55633fdb9548 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55633fdb94e8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55633fdb94b8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55633fdb9468 <col:47, col:56> 'char [48]' lvalue ->c 0x55633fdaa2c0
|     |     |   `-CXXMemberCallExpr 0x55633fdb9448 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55633fdb9418 <col:47> '<bound member function type>' ->xanno 0x55633fd9f5a8
|     |     |       `-CXXThisExpr 0x55633fdb9408 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55633fdb94d0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55633fdb9498 <col:60> 'int' lvalue ParmVar 0x55633fda2d18 'i' 'int'
|     `-ImplicitCastExpr 0x55633fdb95b0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdb9590 <col:65> 'int32_t':'int' lvalue ParmVar 0x55633fda2d90 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55633fda3028 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55633fda2f30 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55633fdb9d18 <col:36, line:591:5>
|   |-ParenExpr 0x55633fdb9a58 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdb9a28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb9780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb9750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb9660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb9648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb9608 <col:23> 'int' lvalue ParmVar 0x55633fda2f30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb9628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb9730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb9718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb9680 <col:33> 'int' lvalue ParmVar 0x55633fda2f30 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb96f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb96e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb96a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb96c0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55633fdb97e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb97c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdb9988 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdb9970 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdb9950 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdb99c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb9850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55633fdb99e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb9888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdb99f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb98c0 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55633fdb9a10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdb9938 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdb9920 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdb98e0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55633fdb9d08 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55633fdb9cf0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55633fdb9cd8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55633fdb9ca8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55633fdb9c20 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55633fdb9bf0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55633fdb9ba0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55633fdaa2c0
|             |   `-CXXMemberCallExpr 0x55633fdb9b80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55633fdb9b50 <col:61> '<bound member function type>' ->xanno 0x55633fd9f408
|             |       `-CXXThisExpr 0x55633fdb9b40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55633fdb9c08 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55633fdb9bd0 <col:74> 'int' lvalue ParmVar 0x55633fda2f30 'i' 'int'
|-CXXMethodDecl 0x55633fda3278 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55633fda30e8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55633fda3160 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55633fdba3f8 <col:42, line:606:5>
|   |-ParenExpr 0x55633fdba188 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55633fdba158 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdb9eb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdb9e80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdb9d90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdb9d78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdb9d38 <col:23> 'int' lvalue ParmVar 0x55633fda30e8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdb9d58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdb9e60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55633fdb9e48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdb9db0 <col:33> 'int' lvalue ParmVar 0x55633fda30e8 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdb9e28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdb9e10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdb9dd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55633fdb9df0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55633fdb9f10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdb9ef0 <col:60> 'int' 0
|   |   `-CallExpr 0x55633fdba0b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55633fdba0a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdba080 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdba0f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb9f80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55633fdba110 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdb9fb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdba128 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdb9ff0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55633fdba140 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdba068 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdba050 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdba010 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55633fdba3d8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55633fdba388 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55633fdba358 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55633fdba2f8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55633fdba2c8 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55633fdba278 <col:48, col:57> 'char [48]' lvalue ->c 0x55633fdaa2c0
|     |     |   `-CXXMemberCallExpr 0x55633fdba258 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55633fdba228 <col:48> '<bound member function type>' ->xanno 0x55633fd9f5a8
|     |     |       `-CXXThisExpr 0x55633fdba218 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55633fdba2e0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55633fdba2a8 <col:61> 'int' lvalue ParmVar 0x55633fda30e8 'i' 'int'
|     `-ImplicitCastExpr 0x55633fdba3c0 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55633fdba3a0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55633fda3160 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55633fda3410 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55633fda3340 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55633fdbac68 <col:33, line:620:5>
|   |-ParenExpr 0x55633fdba9e0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55633fdba9b0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdba600 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdba5d0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdba470 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdba458 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdba418 <col:23> 'int' lvalue ParmVar 0x55633fda3340 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdba438 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdba5b0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55633fdba598 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdba490 <col:33> 'int' lvalue ParmVar 0x55633fda3340 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdba578 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdba560 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdba4b0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55633fdba538 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55633fdba520 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55633fdba4e8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55633fdba660 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdba640 <col:79> 'int' 0
|   |   `-CallExpr 0x55633fdba910 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55633fdba8f8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdba8d8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdba950 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdba748 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55633fdba968 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdba790 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdba980 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdba7c8 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55633fdba998 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdba8c0 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdba8a8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdba868 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55633fdbac58 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55633fdbac40 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55633fdbac28 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55633fdbabf8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55633fdbab70 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55633fdbab40 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55633fdbaaf0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55633fdaa2c0
|             |   `-CXXMemberCallExpr 0x55633fdbaad0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55633fdbaaa0 <col:67> '<bound member function type>' ->xanno 0x55633fd9f408
|             |       `-CXXThisExpr 0x55633fdbaa90 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55633fdbab58 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55633fdbab20 <col:80> 'int' lvalue ParmVar 0x55633fda3340 'i' 'int'
|-CXXMethodDecl 0x55633fda3628 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55633fda34d0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55633fda3550 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55633fdbb490 <col:45, line:635:5>
|   |-ParenExpr 0x55633fdbb1d8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55633fdbb1a8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55633fdbae70 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55633fdbae40 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55633fdbace0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55633fdbacc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55633fdbac88 <col:23> 'int' lvalue ParmVar 0x55633fda34d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55633fdbaca8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55633fdbae20 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55633fdbae08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55633fdbad00 <col:33> 'int' lvalue ParmVar 0x55633fda34d0 'i' 'int'
|   |   |     `-BinaryOperator 0x55633fdbade8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55633fdbadd0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55633fdbad20 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55633fd9f7f0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55633fdbada8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55633fdbad90 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55633fdbad58 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55633fdbaed0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55633fdbaeb0 <col:79> 'int' 0
|   |   `-CallExpr 0x55633fdbb108 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55633fdbb0f0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55633fdbb0d0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55633f90c110 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55633fdbb148 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdbaf40 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55633fdbb160 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55633fdbaf88 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55633fdbb178 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55633fdbafc0 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55633fdbb190 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55633fdbb0b8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55633fdbb0a0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55633fdbb058 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55633fdbb470 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55633fdbb3d8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55633fdbb3a8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55633fdbb348 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55633fdbb318 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55633fdbb2c8 <col:54, col:63> 'char [48]' lvalue ->c 0x55633fdaa2c0
|     |     |   `-CXXMemberCallExpr 0x55633fdbb2a8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55633fdbb278 <col:54> '<bound member function type>' ->xanno 0x55633fd9f5a8
|     |     |       `-CXXThisExpr 0x55633fdbb268 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55633fdbb330 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55633fdbb2f8 <col:67> 'int' lvalue ParmVar 0x55633fda34d0 'i' 'int'
|     `-CXXConstCastExpr 0x55633fdbb440 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55633fdbb428 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55633fdbb3f0 <col:91> 'const void *' lvalue ParmVar 0x55633fda3550 'x' 'const void *'
|-CXXMethodDecl 0x55633fda36f8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55633fdbb518 <col:34, line:640:5>
|   `-ReturnStmt 0x55633fdbb508 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55633fdbb4f0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55633fdbb4c0 <col:16> 'Packet *' lvalue ->_data_packet 0x55633fdaae78
|         `-CXXThisExpr 0x55633fdbb4b0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55633fda3838 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55633fda37a8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55633fdb45d8 <col:46> 'bool' true
|-CXXMethodDecl 0x55633fda39b8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55633fda38f0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55633fda3a60 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55633fda4210 <line:660:22> "" ""
| |-EnumConstantDecl 0x55633fda3b60 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda4280 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3b40 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55633fda3b20 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55633fd98cc0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55633fda3bf0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda4298 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3bd0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55633fda3bb0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55633fd98d50 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55633fda3c80 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda42b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3c60 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55633fda3c40 <col:21> 'int' 0
| |-EnumConstantDecl 0x55633fda3d10 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda42c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3cf0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55633fda3cd0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55633fda3da0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda42e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3d80 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55633fda3d60 <col:21> 'int' 16
| |-EnumConstantDecl 0x55633fda3e30 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda42f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3e10 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55633fda3df0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55633fda3ec0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda4310 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3ea0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55633fda3e80 <col:19> 'int' EnumConstant 0x55633fda3d10 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55633fda3f50 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda4328 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda3f30 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55633fda3f10 <col:19> 'int' EnumConstant 0x55633fda3e30 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55633fda4020 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda4340 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda4000 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55633fda3fe0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55633fda3fa0 <col:23> 'int' EnumConstant 0x55633fda3f50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55633fda3fc0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55633fda40f0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55633fda4358 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fda40d0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55633fda40b0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55633fda4070 <col:23> 'int' EnumConstant 0x55633fda3f50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55633fda4090 <col:40> 'int' 4
| `-EnumConstantDecl 0x55633fda41c0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55633fda4370 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55633fda41a0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55633fda4180 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55633fda4140 <col:23> 'int' EnumConstant 0x55633fda3f50 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55633fda4160 <col:40> 'int' 8
|-CXXMethodDecl 0x55633fda43b0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55633fda4450 <col:68> "" ""
|-CXXMethodDecl 0x55633fda44e8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55633fda4588 <col:45> "" ""
|-CXXMethodDecl 0x55633fda4620 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55633fda46c0 <col:57> "" ""
|-CXXMethodDecl 0x55633fda4758 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55633fda47f8 <col:45> "" ""
|-CXXMethodDecl 0x55633fda4890 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55633fda4930 <col:57> "" ""
|-CXXMethodDecl 0x55633fda49c0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55633fda4a60 <col:51> "" ""
|-CXXMethodDecl 0x55633fda4af0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55633fda4b90 <col:63> "" ""
|-CXXMethodDecl 0x55633fda4c20 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55633fda4cc0 <col:53> "" ""
|-CXXMethodDecl 0x55633fda4d50 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55633fda4df0 <col:65> "" ""
|-CXXMethodDecl 0x55633fda4f08 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55633fda4e78 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55633fda4fb0 <col:61> "" ""
|-CXXMethodDecl 0x55633fda5148 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55633fda5038 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55633fda50b0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55633fda51f8 <col:67> "" ""
|-CXXMethodDecl 0x55633fda5310 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55633fda5280 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55633fda53b8 <col:63> "" ""
|-CXXMethodDecl 0x55633fda5550 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55633fda5440 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55633fda54b8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55633fda5600 <col:69> "" ""
|-CXXMethodDecl 0x55633fda5718 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55633fda5688 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55633fda57c0 <col:63> "" ""
|-CXXMethodDecl 0x55633fda7e98 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55633fda7d88 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55633fda7e00 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55633fda7f48 <col:69> "" ""
|-CXXMethodDecl 0x55633fda8060 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55633fda7fd0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55633fda8108 <col:62> "" ""
|-CXXMethodDecl 0x55633fda82a0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55633fda8190 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55633fda8208 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55633fda8350 <col:68> "" ""
|-CXXMethodDecl 0x55633fda8468 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55633fda83d8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55633fda8510 <col:63> "" ""
|-CXXMethodDecl 0x55633fda86a8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55633fda8598 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55633fda8610 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55633fda8758 <col:69> "" ""
|-CXXMethodDecl 0x55633fda87e8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55633fda8888 <col:64> "" ""
|-CXXMethodDecl 0x55633fda8918 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55633fda89b8 <col:52> "" ""
|-CXXMethodDecl 0x55633fda8a48 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55633fda8ae8 <col:67> "" ""
|-CXXMethodDecl 0x55633fda8b78 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55633fda8c18 <col:55> "" ""
|-CXXMethodDecl 0x55633fda8d30 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55633fda8ca0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55633fda8dd8 <col:58> "" ""
|-CXXMethodDecl 0x55633fda8f70 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55633fda8e60 <col:33> col:36 'int'
| |-ParmVarDecl 0x55633fda8ed8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55633fda9020 <col:62> "" ""
|-CXXMethodDecl 0x55633fda9138 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55633fda90a8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55633fda91e0 <col:58> "" ""
|-CXXMethodDecl 0x55633fda9378 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55633fda9268 <col:33> col:36 'int'
| |-ParmVarDecl 0x55633fda92e0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55633fda9428 <col:62> "" ""
|-CXXMethodDecl 0x55633fda9540 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55633fda94b0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55633fda95e8 <col:60> "" ""
|-CXXMethodDecl 0x55633fda9780 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55633fda9670 <col:34> col:37 'int'
| |-ParmVarDecl 0x55633fda96e8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55633fda9830 <col:64> "" ""
|-CXXMethodDecl 0x55633fda9948 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55633fda98b8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55633fda99f0 <col:58> "" ""
|-CXXMethodDecl 0x55633fda9b88 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55633fda9a78 <col:33> col:36 'int'
| |-ParmVarDecl 0x55633fda9af0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55633fda9c38 <col:62> "" ""
|-CXXMethodDecl 0x55633fda9d50 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55633fda9cc0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55633fda9df8 <col:59> "" ""
|-CXXMethodDecl 0x55633fda9f90 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55633fda9e80 <col:33> col:36 'int'
| |-ParmVarDecl 0x55633fda9ef8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55633fdaa040 <col:63> "" ""
|-AccessSpecDecl 0x55633fdaa0b0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55633fdaa0d8 prev 0x55633fd9f2e0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55633fdaa1d0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55633fdaa2c0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55633fdaa3e8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55633fdaa568 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55633fdaa6e8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55633fdaa868 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55633fdbb698 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55633fdbbf08 <col:11>
| |-CXXDestructorDecl 0x55633fdbb770 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55633fdbb8a8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55633fdbb8a8
| | `-ParmVarDecl 0x55633fdbb9b8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55633fdbba58 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55633fdbba58
| | `-ParmVarDecl 0x55633fdbbb68 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55633fdbe928 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55633fdbea38 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55633fdbecb8 <col:11>
| |   `-ReturnStmt 0x55633fdbeca8 <col:11>
| |     `-UnaryOperator 0x55633fdbec90 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55633fdbec80 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55633fdbeaa8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55633fdbeaa8
|   `-ParmVarDecl 0x55633fdbebb8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55633fdaa8d0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55633fdaa9e8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55633fdaaa88 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55633fdaaaf0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55633fdaab58 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55633fdaabc0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55633fdaac20 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55633fdaace0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55633fdaad40 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55633fdaada0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55633fdbb5a8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55633fdaaa88 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55633fdbbf18 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55633fdbbf70 <col:12>
| |-CXXConstructorDecl 0x55633fdbbbd8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55633fdbbbd8
| | `-ParmVarDecl 0x55633fdbbce8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55633fdbbd88 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55633fdbbd88
| | `-ParmVarDecl 0x55633fdbbe98 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55633fdbe010 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55633fdaae18 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55633fdaae78 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55633fdaaee0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55633fdaaf48 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55633fdaafb0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55633fdab018 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55633fdab078 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55633fdab0d8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55633fdab140 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55633fdab1c8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55633fdaae18 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55633fdbb540 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55633fdab078 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55633fdbbf80 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55633fdbbfe0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55633fdab368 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55633fdab2a8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55633fdab460 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55633fdab648 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55633fdab550 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55633fdab918 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55633fdab700 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55633fdab778 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55633fdab7f0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fdabb38 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55633fdab9e8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55633fdaba60 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55633fdb4118 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55633fdabbf8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55633fdabc70 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55633fdabce8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55633fdb4270 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55633fdb41e0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55633fdb43b8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55633fdb4328 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55633fdb44b0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fea5930 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55633fea5a48 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55633fea5ad8 <col:16, col:22> col:16 public
|-EnumDecl 0x55633fea5b00 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55633fea5c00 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55633fea5e50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fea5be0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55633fea5bc0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55633fea5c90 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55633fea5e68 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fea5c70 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55633fea5c50 <col:24> 'int' 22
| |-EnumConstantDecl 0x55633fea5d20 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55633fea5e80 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fea5d00 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55633fea5ce0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55633fea5db0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55633fea5e98 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55633fea5d90 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55633fea5d70 <col:25> 'int' 95
| `-EnumConstantDecl 0x55633fea5e00 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55633fea7860 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55633fea7c98 <col:7>
|-CXXConstructorDecl 0x55633fea7968 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55633fea7968
| `-ParmVarDecl 0x55633fea7a78 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55633fea7b18 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x55633fea7b18
| `-ParmVarDecl 0x55633fea7c28 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x55633fea9d98 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55633fea5ec8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55633fea6028 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55633fea60b8 <col:32, col:38> col:32 public
|-TypedefDecl 0x55633fea60f0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55633f9c5610 'uint32_t' sugar
|   |-Typedef 0x55633f8d9408 'uint32_t'
|   `-TypedefType 0x55633f8b2440 '__uint32_t' sugar
|     |-Typedef 0x55633f8b2038 '__uint32_t'
|     `-BuiltinType 0x55633f870410 'unsigned int'
|-CXXConstructorDecl 0x55633fea6238 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55633fea6160 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55633fea7768 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55633fea7ca8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55633fea7020 'base' 'int'
| | `-ImplicitCastExpr 0x55633fea7808 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55633fea77c8 <col:16> 'int' lvalue ParmVar 0x55633fea6160 'b' 'int'
| `-CompoundStmt 0x55633fea7d18 <col:19, line:1046:5>
|-CXXMethodDecl 0x55633fea6730 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55633fea6300 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55633fea6380 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55633fea63f8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55633fea6478 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55633fea6538 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55633fea65b8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55633fea6b88 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55633fea6800 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x55633fea6ae8 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x55633fea68a8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x55633fea6948 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x55633fea69c0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x55633fea7788 <col:82> 'const ArgContext' lvalue Var 0x55633fe9b4a8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x55633fea8c48 <col:94, line:1067:5>
|     |-DeclStmt 0x55633fea7ea8 <line:1054:9, col:64>
|     | `-VarDecl 0x55633fea7d38 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x55633fea7e60 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x55633fea80c8 <line:1055:9, col:91>
|     | `-VarDecl 0x55633fea7ed8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55633fea80a0 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x55633fea8080 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x55633fea8030 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x55633fea8010 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x55633fea7fb8 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x55633fea7f68 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x55633fea7f98 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x55633fea7ff8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x55633fea7fd8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x55633fea8060 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55633fea8228 <line:1056:9, col:27>
|     | `-VarDecl 0x55633fea81c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x55633fea8670 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x55633fea85a0 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55633fea8520 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55633fd8f5f8 0x55633fbd8bd8 0x55633fbd88b0 0x55633fbca090 0x55633fbc9d40 0x55633fbc9630 0x55633fb9bfa0 0x55633fb28460
|     | | |-CallExpr 0x55633fea8460 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x55633fea8250 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x55633fea8300 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55633fea82d0 <col:19, col:23> '<bound member function type>' .begin 0x55633fbb9298
|     | | | |   `-DeclRefExpr 0x55633fea82b0 <col:19> 'const String' lvalue ParmVar 0x55633fea68a8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55633fea8370 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55633fea8340 <col:32, col:36> '<bound member function type>' .end 0x55633fbb94b0
|     | | | |   `-DeclRefExpr 0x55633fea8320 <col:32> 'const String' lvalue ParmVar 0x55633fea68a8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x55633fea8390 <col:43> 'const bool' lvalue Var 0x55633fea7d38 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x55633fea83f8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x55633fea83d8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x55633fea8420 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55633fea81c0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x55633fea8440 <col:73> 'const int' lvalue Var 0x55633fea7ed8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x55633fea8500 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55633fea84d0 <col:16, col:20> '<bound member function type>' .end 0x55633fbb94b0
|     | |     `-DeclRefExpr 0x55633fea84b0 <col:16> 'const String' lvalue ParmVar 0x55633fea68a8 'str' 'const String &'
|     | `-BinaryOperator 0x55633fea8650 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55633fea85e8 <col:13> 'int' lvalue ->status 0x55633fea7088
|     |   | `-CXXThisExpr 0x55633fea85d8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55633fea8638 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55633fea8618 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55633fea5c90 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55633fea88c0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55633fea87a8 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55633fea8790 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55633fea8778 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55633fea8698 <col:13> 'int' lvalue ->status 0x55633fea7088
|     | | |     `-CXXThisExpr 0x55633fea8688 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55633fea8758 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55633fea8728 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55633fea86d8 <col:23> 'int' lvalue ->status 0x55633fea7088
|     | |   |   `-CXXThisExpr 0x55633fea86c8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55633fea8740 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55633fea8708 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55633fea5d20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55633fea88a0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55633fea8840 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55633fea87e8 <col:13, col:18> '<bound member function type>' .error 0x55633fe52dc0
|     |   | | `-DeclRefExpr 0x55633fea87c8 <col:13> 'const ArgContext' lvalue ParmVar 0x55633fea69c0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55633fea8868 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55633fea8818 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55633fea8890 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55633fea8880 <col:20> 'bool' false
|     |-DeclStmt 0x55633fea8a98 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55633fea8a40 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x55633fea89d0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x55633fea8bf8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55633fea8ab0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55633fb5c428
|     | |-DeclRefExpr 0x55633fea8af8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55633fea81c0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x55633fea8bc8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x55633fea8b40 <col:64> 'V' lvalue ParmVar 0x55633fea6948 'result' 'V &'
|     `-ReturnStmt 0x55633fea8c38 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55633fea8c28 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55633fea6f98 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55633fea6bf8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55633fea6ef8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55633fea6ca8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55633fea6da0 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55633fea6e18 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55633fea77a8 <col:71> 'const ArgContext' lvalue Var 0x55633fe9b4a8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55633fea93b8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55633fea8d10 <line:1071:9, col:12>
| |   | `-VarDecl 0x55633fea8ca8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55633fea9390 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55633fea8fa0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55633fea8e28 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55633fea8df0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55633fea8d38 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55633fea8d90 <col:31> 'const String' lvalue ParmVar 0x55633fea6ca8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55633fea8db0 <col:36> 'V' lvalue Var 0x55633fea8ca8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55633fea8dd0 <col:39> 'const ArgContext' lvalue ParmVar 0x55633fea6e18 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55633fea8f80 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55633fea8f60 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55633fea8f48 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55633fea8f30 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55633fea8e50 <col:17> 'int' lvalue ->status 0x55633fea7088
| |     |     |     `-CXXThisExpr 0x55633fea8e40 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55633fea8f10 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55633fea8ee0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55633fea8e90 <col:27> 'int' lvalue ->status 0x55633fea7088
| |     |       |   `-CXXThisExpr 0x55633fea8e80 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55633fea8ef8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55633fea8ec0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55633fea5d20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55633fea8fd0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55633fea8fc0 <col:20> 'bool' false
| |     `-IfStmt 0x55633fea9368 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55633fea9070 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55633fea9040 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55633fea8ff0 <col:18> 'int' lvalue ->status 0x55633fea7088
| |       | |   `-CXXThisExpr 0x55633fea8fe0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55633fea9058 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55633fea9020 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55633fea5d20 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55633fea92a8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55633fea9250 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55633fea90a0 <line:1076:13> '<bound member function type>' ->range_error 0x55633fea7698
| |       | | | `-CXXThisExpr 0x55633fea9090 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55633fea90d0 <col:25> 'const ArgContext' lvalue ParmVar 0x55633fea6e18 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55633fea91b0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55633fea9228 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55633fea9208 <col:43> 'V' lvalue Var 0x55633fea8ca8 'x' 'V'
| |       | `-ReturnStmt 0x55633fea9298 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55633fea9288 <col:20> 'bool' false
| |       `-CompoundStmt 0x55633fea9348 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55633fea9308 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55633fea92c8 <col:13> 'V' lvalue ParmVar 0x55633fea6da0 'result' 'V &'
| |         | `-DeclRefExpr 0x55633fea92e8 <col:22> 'V' lvalue Var 0x55633fea8ca8 'x' 'V'
| |         `-ReturnStmt 0x55633fea9338 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55633fea9328 <col:20> 'bool' true
| `-CXXMethodDecl 0x55633fed1128 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55633fed0f08 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x55633fed0fd8 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x55633fed1040 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x55633fea77a8 <col:71> 'const ArgContext' lvalue Var 0x55633fe9b4a8 'blank_args' 'const ArgContext'
|-FieldDecl 0x55633fea7020 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x55633fea7088 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55633fea70d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55633fea7390 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55633fea7118 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55633fea7198 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55633fea7210 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55633fea7290 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55633fea7698 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55633fea7460 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55633fea74d8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55633fea7570 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55633fea9c18 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55633fea9c18
| `-ParmVarDecl 0x55633fea9d28 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55633fea9ea8 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x55633fea9ea8
| `-ParmVarDecl 0x55633fea9fb8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x55633fed0bb8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55633feae4e0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55633feae738 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55633ff00ff8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55633ff01490 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55633ff01470 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55633ff01500 <col:19>
|-CXXConstructorDecl 0x55633ff010f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55633ff010f8
| `-ParmVarDecl 0x55633ff01208 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55633ff012a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55633ff013b8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55633ff020c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55633ff01de0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55633ff01db0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55633ff01d80 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55633ff013b8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55633ff02130 <col:19>
`-CXXDestructorDecl 0x55633ff01540 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
