
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb63a68 prev 0x5586ffb5b208 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ffb63b60 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x5586ffb63bf0 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x5586ffb63c68 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x5586ffb63d28 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x5586ffb63df0 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x5586ffb63f68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x5586ffb63ea0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x5586ffb64010 <col:24>
| `-OptimizeNoneAttr 0x5586ffb64068 <col:34>
|-CXXMethodDecl 0x5586ffb640b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5586ffb64368 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5586ffb64160 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5586ffb641d8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5586ffb64258 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5586ffb64420 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5586ffb64458 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x5586ffb644c0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5586ffb64548 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5586ffb64868 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x5586ffb64600 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x5586ffb64678 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x5586ffb646f0 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x5586ffb64770 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x5586ffb64980 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x5586ffb6c2f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5586ffb6c2f8
| `-ParmVarDecl 0x5586ffb6c408 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x5586ffb6c4a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5586ffb6c4a8
| `-ParmVarDecl 0x5586ffb6c5b8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5586ffc3cdf0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb56a80 prev 0x5586ffb56800 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586ffb56b78 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5586ffb56c08 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5586ffb56c68 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5586ffb56d58 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5586ffb56e58 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5586ffb57028 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5586ffb56ed8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5586ffb56f50 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5586ffb571b8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5586ffb570f0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5586ffb57260 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb57398 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5586ffb572d0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5586ffb57538 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5586ffb57478 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5586ffb576d8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5586ffb57618 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5586ffb57780 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5586ffb57880 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5586ffb57960 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb57860 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5586ffb57840 <col:26> 'int' 1
| `-EnumConstantDecl 0x5586ffb57910 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5586ffb57978 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb578f0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5586ffb578d0 <col:44> 'int' 2
|-CXXMethodDecl 0x5586ffb57ac0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5586ffb579a8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5586ffb57a28 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5586ffb57c18 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5586ffb57b88 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5586ffb57e58 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5586ffb57cd8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5586ffb57d50 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5586ffb57f08 <col:20>
| `-OptimizeNoneAttr 0x5586ffb57f60 <col:30>
|-CXXMethodDecl 0x5586ffb58068 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5586ffb57fa0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5586ffb58110 <col:20>
| `-OptimizeNoneAttr 0x5586ffb58168 <col:30>
|-CXXMethodDecl 0x5586ffb581b8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5586ffb58280 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5586ffb58398 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5586ffb58420 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5586ffb584a8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5586ffb58530 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5586ffb585b8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5586ffb58648 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5586ffb58708 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5586ffb58790 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5586ffb58818 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5586ffb588a0 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5586ffb58928 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5586ffb589b0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5586ffb58a40 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5586ffb58b00 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5586ffb58b90 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5586ffb58ce0 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5586ffb58c48 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5586ffb58e70 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5586ffb58da0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5586ffb59120 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5586ffb58f28 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5586ffb58fa8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5586ffb59028 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5586ffb591d8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5586ffb592e0 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586ffb59570 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb592c0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5586ffb592a0 <col:33> 'int' 0
| |-EnumConstantDecl 0x5586ffb59370 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586ffb59588 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb59350 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5586ffb59330 <col:32> 'int' 20
| |-EnumConstantDecl 0x5586ffb59400 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586ffb595a0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb593e0 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5586ffb593c0 <col:38> 'int' 90
| |-EnumConstantDecl 0x5586ffb59490 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5586ffb595b8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb59470 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5586ffb59450 <col:35> 'int' 100
| `-EnumConstantDecl 0x5586ffb59520 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5586ffb595d0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb59500 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5586ffb594e0 <col:32> 'int' 2000
|-CXXMethodDecl 0x5586ffb59610 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5586ffb59a50 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5586ffb598c0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5586ffb59938 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb59b20 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5586ffb59ca0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5586ffb59bd0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb59ea8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5586ffb59d58 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5586ffb59dd0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb59fa8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5586ffb5a048 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5586ffb5a110 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586ffb5a1a0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5586ffb5a3d0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb5a180 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5586ffb5a160 <col:36> 'int' EnumConstant 0x5586ffb5a110 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586ffb5a1f0 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586ffb5a240 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586ffb5a290 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586ffb5a2e0 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5586ffb5a330 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5586ffb5a380 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5586ffb5a4b8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5586ffb5a3f8 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5586ffb5a580 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5586ffb5a640 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5586ffb5a700 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5586ffb5a7c0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5586ffb5a8d8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5586ffb5a9a0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5586ffb5ab20 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5586ffb5aa50 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5586ffb5ac48 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5586ffb5ae48 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5586ffb5acf8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5586ffb5ad78 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x5586ffb68798 <col:54, line:127:5>
|   |-ParenExpr 0x5586ffb68648 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5586ffb68618 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb68308 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5586ffb682e0 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x5586ffb682c8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x5586ffb682b0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x5586ffb68280 <col:31> 'Router *' lvalue ->_router 0x5586ffb66160
|   |   |         `-CXXThisExpr 0x5586ffb68270 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5586ffb68368 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb68348 <col:48> 'int' 0
|   |   `-CallExpr 0x5586ffb68578 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb68560 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb68540 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb685b8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb683d8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x5586ffb685d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb683f8 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x5586ffb685e8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb68430 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x5586ffb68600 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb68528 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb68510 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb684c8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x5586ffb686e0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x5586ffb68678 <col:9> 'Router *' lvalue ->_router 0x5586ffb66160
|   | | `-CXXThisExpr 0x5586ffb68668 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x5586ffb686c8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5586ffb686a8 <col:19> 'Router *' lvalue ParmVar 0x5586ffb5acf8 'r' 'Router *'
|   `-BinaryOperator 0x5586ffb68778 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5586ffb68710 <col:9> 'int' lvalue ->_eindex 0x5586ffb661c8
|     | `-CXXThisExpr 0x5586ffb68700 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5586ffb68760 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb68740 <col:19> 'int' lvalue ParmVar 0x5586ffb5ad78 'eindex' 'int'
|-CXXMethodDecl 0x5586ffb5afd0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5586ffb5af08 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5586ffb5b0a0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5586ffb5b168 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5586ffb5b208 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5586ffb5b458 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5586ffb5b2d0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5586ffb5b350 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5586ffb5b508 <col:20>
| `-OptimizeNoneAttr 0x5586ffb5b560 <col:30>
|-CXXMethodDecl 0x5586ffb5b668 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5586ffb5b5a0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5586ffb5b710 <col:20>
| `-OptimizeNoneAttr 0x5586ffb5b768 <col:30>
|-CXXMethodDecl 0x5586ffb5b838 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5586ffb5b7a8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5586ffb5b8e0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb5b938 <col:30>
|-CXXMethodDecl 0x5586ffb5bac8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5586ffb5b970 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5586ffb5b9f0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5586ffb5bc58 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5586ffb5bb90 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5586ffb5bda8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5586ffb5bd18 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5586ffb5bef8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5586ffb5be68 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5586ffb5c048 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5586ffb5bfb8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5586ffb5c308 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5586ffb5c100 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5586ffb5c180 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5586ffb5c228 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5586ffb5c3e0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5586ffb5c4a0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5586ffb5c770 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5586ffb5c620 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5586ffb5c698 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb5c898 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5586ffb5ca70 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5586ffb5c950 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5586ffb5c9d0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5586ffb5cc58 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5586ffb5cb38 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5586ffb5cbb8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5586ffb5cfc8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5586ffb5cd18 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5586ffb5cd90 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5586ffb5ce10 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5586ffb67d80 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffb67d60 <col:106> 'int' 0
| `-ParmVarDecl 0x5586ffb5ce88 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586ffb67db8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586ffb67d98 <col:126> 'int' 0
|-CXXMethodDecl 0x5586ffb5d368 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586ffb5d098 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5586ffb5d130 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5586ffb5d1b0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5586ffb5d228 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586ffb67df0 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586ffb67dd0 <col:114> 'int' 0
|-CXXMethodDecl 0x5586ffb5d6f8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586ffb5d440 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5586ffb5d4b8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5586ffb5d538 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x5586ffb67e08 <col:96> 'int' 0
| `-ParmVarDecl 0x5586ffb5d5b0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586ffb67e48 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586ffb67e28 <col:116> 'int' 0
|-CXXMethodDecl 0x5586ffb5da78 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5586ffb5d7c8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5586ffb5d840 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb5d8c0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5586ffb67e80 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffb67e60 <col:109> 'int' 0
| `-ParmVarDecl 0x5586ffb5d938 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586ffb67eb8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586ffb67e98 <col:129> 'int' 0
|-CXXMethodDecl 0x5586ffb5ddf8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586ffb5db48 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5586ffb5dbc0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb5dc40 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5586ffb5dcb8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586ffb67ef0 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586ffb67ed0 <col:117> 'int' 0
|-CXXMethodDecl 0x5586ffb5e188 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5586ffb5ded0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb5df48 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb5dfc8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x5586ffb67f08 <col:99> 'int' 0
| `-ParmVarDecl 0x5586ffb5e040 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x5586ffb67f48 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x5586ffb67f28 <col:119> 'int' 0
|-CXXMethodDecl 0x5586ffb5e5a8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5586ffb5e258 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5586ffb5e2d8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5586ffb5e350 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb5e3d0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x5586ffb67f80 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffb67f60 <col:108> 'int' 0
| `-ParmVarDecl 0x5586ffb5e450 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x5586ffb67fb8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x5586ffb67f98 <col:141> 'int' 0
|-CXXMethodDecl 0x5586ffb5e9c8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5586ffb5e680 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5586ffb5e700 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5586ffb5e778 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb5e7f8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5586ffb5e878 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5586ffb67fd0 <col:121> 'int' 0
|-CXXMethodDecl 0x5586ffb5edf8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5586ffb5eaa8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5586ffb5eb28 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5586ffb5eba0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb5ec20 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x5586ffb67ff0 <col:98> 'int' 0
| `-ParmVarDecl 0x5586ffb5eca0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x5586ffb68010 <col:123> 'int' 0
|-CXXMethodDecl 0x5586ffb5f0c0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5586ffb5eed0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5586ffb5ef50 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5586ffb5efd0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x5586ffb68030 <col:80> 'int' 0
|-EnumDecl 0x5586ffb5f178 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5586ffb5f280 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586ffb5f510 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb5f260 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5586ffb5f240 <col:42> 'int' 1
| |-EnumConstantDecl 0x5586ffb5f310 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586ffb5f528 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb5f2f0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5586ffb5f2d0 <col:40> 'int' 2
| |-EnumConstantDecl 0x5586ffb5f3a0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586ffb5f540 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb5f380 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5586ffb5f360 <col:44> 'int' 4
| |-EnumConstantDecl 0x5586ffb5f430 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5586ffb5f558 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb5f410 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5586ffb5f3f0 <col:36> 'int' 7
| `-EnumConstantDecl 0x5586ffb5f4c0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5586ffb5f570 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb5f4a0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5586ffb5f480 <col:34> 'int' 6
|-CXXMethodDecl 0x5586ffb5f828 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5586ffb5f598 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5586ffb5f638 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5586ffb5f6b8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5586ffb5f730 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x5586ffb680e8 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x5586ffb680d0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x5586ffb680b8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x5586ffb68098 <col:98, col:105> 'String' (CXXTemporary 0x5586ffb68098)
|           `-CXXTemporaryObjectExpr 0x5586ffb68060 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5586ffb5fac8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5586ffb5f8f8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5586ffb5f970 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5586ffb5f9e8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5586ffb68198 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5586ffb68180 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5586ffb68168 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5586ffb68148 <col:94, col:101> 'String' (CXXTemporary 0x5586ffb68148)
| |         `-CXXTemporaryObjectExpr 0x5586ffb68110 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x5586ffb68980 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x5586ffb688f8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x5586ffb688c8 <col:9> '<bound member function type>' ->add_task_handlers 0x5586ffb5f828
|     | `-CXXThisExpr 0x5586ffb688b8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5586ffb68938 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586ffb68838 <col:27> 'Task *' lvalue ParmVar 0x5586ffb5f8f8 'task' 'Task *'
|     |-ImplicitCastExpr 0x5586ffb68950 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586ffb68858 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5586ffb5f970 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5586ffb68968 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5586ffb68878 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5586ffb5f4c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5586ffb68898 <col:62> 'const String' lvalue ParmVar 0x5586ffb5f9e8 'prefix' 'const String &'
|-CXXMethodDecl 0x5586ffb5fcd8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5586ffb5fb90 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5586ffb5fc08 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5586ffb68248 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5586ffb68230 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5586ffb68218 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5586ffb681f8 <col:70, col:77> 'String' (CXXTemporary 0x5586ffb681f8)
| |         `-CXXTemporaryObjectExpr 0x5586ffb681c0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x5586ffb68b58 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x5586ffb68ad0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x5586ffb68aa0 <col:9> '<bound member function type>' ->add_task_handlers 0x5586ffb5f828
|     | `-CXXThisExpr 0x5586ffb68a90 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5586ffb68b10 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586ffb68a10 <col:27> 'Task *' lvalue ParmVar 0x5586ffb5fb90 'task' 'Task *'
|     |-ImplicitCastExpr 0x5586ffb68b28 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5586ffb68a30 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x5586ffb68b40 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5586ffb68a50 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5586ffb5f4c0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x5586ffb68a70 <col:57> 'const String' lvalue ParmVar 0x5586ffb5fc08 'prefix' 'const String &'
|-CXXMethodDecl 0x5586ffb5ffb8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5586ffb5fda0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb5fe20 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb5fe98 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5586ffb60268 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5586ffb60088 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb60108 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb60188 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5586ffb60558 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5586ffb60338 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb603b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb60430 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5586ffb60808 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5586ffb60628 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb606a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb60728 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5586ffb60ab8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5586ffb608d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb60958 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb609d8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5586ffb60d68 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5586ffb60b88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb60c08 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb60c80 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5586ffb61018 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5586ffb60e38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb60eb8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb60f38 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5586ffb61328 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5586ffb61140 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb611c0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb61240 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x5586ffb61608 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x5586ffb613f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb61478 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb61520 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x5586ffb618e8 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x5586ffb616d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb61758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb61800 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x5586ffb61b50 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5586ffb619b8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5586ffb61a38 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5586ffb61ab0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x5586ffb61df8 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x5586ffb61c20 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5586ffb61ca0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x5586ffb61d18 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x5586ffb620a8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x5586ffb61ec8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb61f48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb61fc8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5586ffb62358 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x5586ffb62178 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb621f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb62270 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x5586ffb62608 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5586ffb62428 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb624a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb62520 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x5586ffb628d8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x5586ffb626d8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb62758 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5586ffb627f8 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x5586ffb62c08 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x5586ffb629a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5586ffb62a28 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x5586ffb62aa0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x5586ffb62b18 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586ffb68260 <col:93> 'bool' false
|-CXXMethodDecl 0x5586ffb62df0 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586ffb62cd8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x5586ffb62d58 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x5586ffb62fc8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586ffb62eb0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x5586ffb62f30 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x5586ffb632a8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5586ffb63088 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x5586ffb63100 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x5586ffb63180 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x5586ffb631f8 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb63598 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x5586ffb63378 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x5586ffb633f0 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x5586ffb63470 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x5586ffb634e8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb637d0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x5586ffb63670 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x5586ffb636f0 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x5586ffb639b8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x5586ffb63898 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5586ffb63918 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5586ffb63a68 prev 0x5586ffb5b208 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586ffb63b60 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x5586ffb63bf0 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x5586ffb63c68 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x5586ffb63d28 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x5586ffb63df0 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x5586ffb63f68 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x5586ffb63ea0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x5586ffb64010 <col:24>
| | `-OptimizeNoneAttr 0x5586ffb64068 <col:34>
| |-CXXMethodDecl 0x5586ffb640b0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5586ffb64368 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5586ffb64160 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5586ffb641d8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5586ffb64258 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5586ffb64420 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5586ffb64458 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x5586ffb644c0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5586ffb64548 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5586ffb64868 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x5586ffb64600 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x5586ffb64678 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x5586ffb646f0 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x5586ffb64770 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x5586ffb64980 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x5586ffb6c2f8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x5586ffb6c2f8
| | `-ParmVarDecl 0x5586ffb6c408 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x5586ffb6c4a8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x5586ffb6c4a8
| | `-ParmVarDecl 0x5586ffb6c5b8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5586ffc3cdf0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5586ffb649f8 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x5586ffb64a98 <col:38> "" ""
|-CXXMethodDecl 0x5586ffb64b28 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x5586ffb64bc8 <col:44> "" ""
|-AccessSpecDecl 0x5586ffb64c38 <line:260:3, col:10> col:3 private
|-EnumDecl 0x5586ffb64c60 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x5586ffb64d60 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x5586ffb64db0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb64d40 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x5586ffb64d20 <col:27> 'int' 4
|-FieldDecl 0x5586ffb64e68 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x5586ffb65018 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x5586ffb650d0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5586ffb66160 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x5586ffb661c8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5586ffb66318 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5586ffb66258 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x5586ffb664c8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x5586ffb663d8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x5586ffb666a8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x5586ffb66588 <col:20> col:23 'int'
| `-ParmVarDecl 0x5586ffb66608 <col:25> col:28 'int'
|-CXXMethodDecl 0x5586ffb66950 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffb66770 <col:23> col:26 'int'
| |-ParmVarDecl 0x5586ffb667f0 <col:28> col:31 'int'
| `-ParmVarDecl 0x5586ffb66868 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x5586ffb66a08 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x5586ffb66ad0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x5586ffb66b20 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x5586ffb66b70 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x5586ffb66d50 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x5586ffb66c00 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x5586ffb66c78 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb66ff8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x5586ffb66e18 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x5586ffb66e98 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x5586ffb66f10 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb67218 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x5586ffb670c8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5586ffb67148 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5586ffb67550 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x5586ffb672d8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5586ffb67358 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x5586ffb673d0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5586ffb67450 <col:57> col:60 'int'
|-CXXMethodDecl 0x5586ffb67738 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5586ffb67620 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x5586ffb676a0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x5586ffb67888 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x5586ffb677f8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x5586ffb67c08 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5586ffb67948 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x5586ffb679c8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5586ffb67a40 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x5586ffb67ac0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x5586ffb67d20 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Resize
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _head
       112 |   int _tail
           | [sizeof=120, dsize=116, align=8,
           |  nvsize=116, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb6f468 <../elements/standard/resize.hh:25:1, line:44:1> line:25:7 class Resize definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x5586ffb6f5c8 <col:1, col:7> col:7 implicit referenced class Resize
|-AccessSpecDecl 0x5586ffb6f658 <line:26:1, col:7> col:1 public
|-CXXConstructorDecl 0x5586ffb6f6e0 <line:27:5, col:12> col:5 Resize 'void ()'
|-CXXMethodDecl 0x5586ffb6f7e0 <line:29:5, col:55> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5586ffb581b8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x5586ffb70878 <col:36, col:55>
|   `-ReturnStmt 0x5586ffb70868 <col:38, col:45>
|     `-ImplicitCastExpr 0x5586ffb70850 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5586ffb70830 <col:45> 'const char [7]' lvalue "Resize"
|-CXXMethodDecl 0x5586ffb6f8a8 <line:30:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5586ffb58280 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x5586ffb708d8 <col:36, col:56>
|   `-ReturnStmt 0x5586ffb708c8 <col:38, col:45>
|     `-ImplicitCastExpr 0x5586ffb708b0 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x5586ffb70890 <col:45> 'const char []' lvalue Var 0x5586ffb58530 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x5586ffb6f970 <line:33:5, col:46> col:17 flags 'const char *() const'
| |-Overrides: [ 0x5586ffb58b90 Element::flags 'const char *() const' ]
| `-CompoundStmt 0x5586ffb70938 <col:31, col:46>
|   `-ReturnStmt 0x5586ffb70928 <col:33, col:40>
|     `-ImplicitCastExpr 0x5586ffb70910 <col:40> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x5586ffb708f0 <col:40> 'const char [3]' lvalue "S0"
|-CXXMethodDecl 0x5586ffb6fa30 <line:35:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5586ffb59b20 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x5586ffb6fd00 <line:36:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5586ffb59a50 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x5586ffb6fbb0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x5586ffb6fc28 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffb6fdd0 <line:37:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5586ffb5c4a0 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x5586ffb70970 <col:39, col:54>
|   `-ReturnStmt 0x5586ffb70960 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x5586ffb70950 <col:48> 'bool' true
|-CXXMethodDecl 0x5586ffb6ff10 <line:39:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5586ffb57398 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x5586ffb6fe80 <col:27, col:34> col:35 'Packet *'
|-AccessSpecDecl 0x5586ffb6ffb8 <line:41:1, col:8> col:1 private
|-FieldDecl 0x5586ffb6fff8 <line:42:5, col:9> col:9 _head 'int'
|-FieldDecl 0x5586ffb70060 <line:43:5, col:9> col:9 _tail 'int'
|-CXXConstructorDecl 0x5586ffb700d8 <line:25:7> col:7 implicit Resize 'void (const Resize &)' inline default_delete noexcept-unevaluated 0x5586ffb700d8
| `-ParmVarDecl 0x5586ffb701e8 <col:7> col:7 'const Resize &'
|-CXXConstructorDecl 0x5586ffb70288 <col:7> col:7 implicit Resize 'void (Resize &&)' inline default_delete noexcept-unevaluated 0x5586ffb70288
| `-ParmVarDecl 0x5586ffb70398 <col:7> col:7 'Resize &&'
|-CXXMethodDecl 0x5586ffb70438 <col:7> col:7 implicit operator= 'Resize &(const Resize &)' inline default_delete noexcept-unevaluated 0x5586ffb70438
| `-ParmVarDecl 0x5586ffb70548 <col:7> col:7 'const Resize &'
|-CXXMethodDecl 0x5586ffb705b8 <col:7> col:7 implicit operator= 'Resize &(Resize &&)' inline default_delete noexcept-unevaluated 0x5586ffb705b8
| `-ParmVarDecl 0x5586ffb706c8 <col:7> col:7 'Resize &&'
`-CXXDestructorDecl 0x5586ffb70750 <col:7> col:7 implicit ~Resize 'void ()' inline default noexcept-unevaluated 0x5586ffb70750
  `-Overrides: [ 0x5586ffb56d58 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Resize = type { %class.Element.base, i32, i32, [4 x i8] }
  NonVirtualBaseLLVMType:%class.Resize.base = type { %class.Element.base, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ff929910 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5586ff929a28 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5586ff929ac8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5586ff929b28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5586ff929b88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5586ff929c38 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ff929f40 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ff92a058 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5586ff92a100 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5586ff92a168 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5586ff92a1f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5586ff930290 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586ff9306c8 <col:12>
|-CXXConstructorDecl 0x5586ff930398 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586ff9304a8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5586ff92a100 'data' 'const char *'
| | `-ImplicitCastExpr 0x5586ff932c50 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5586ff932c20 <col:12> 'const char *const' lvalue .data 0x5586ff92a100
| |     `-DeclRefExpr 0x5586ff932c00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9304a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5586ff92a168 'length' 'int'
| | `-ImplicitCastExpr 0x5586ff932ce0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5586ff932cb0 <col:12> 'const int' lvalue .length 0x5586ff92a168
| |     `-DeclRefExpr 0x5586ff932c90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9304a8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5586ff92a1f8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5586ff932d70 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5586ff932d40 <col:12> 'String::memo_t *const' lvalue .memo 0x5586ff92a1f8
| |     `-DeclRefExpr 0x5586ff932d20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9304a8 '' 'const String::rep_t &'
| `-CompoundStmt 0x5586ff932dc8 <col:12>
|-CXXConstructorDecl 0x5586ff930548 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586ff930548
| `-ParmVarDecl 0x5586ff930658 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5586ff935bb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5586ff9415c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586ff9416d8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5586ff941bf0 <col:12>
|   |-BinaryOperator 0x5586ff941a08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5586ff9419c0 <col:12> 'const char *' lvalue ->data 0x5586ff92a100
|   | | `-CXXThisExpr 0x5586ff9419b0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5586ff9419f0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5586ff941980 <col:12> 'const char *const' lvalue .data 0x5586ff92a100
|   |     `-DeclRefExpr 0x5586ff941960 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9416d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5586ff941ad0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5586ff941a88 <col:12> 'int' lvalue ->length 0x5586ff92a168
|   | | `-CXXThisExpr 0x5586ff941a78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5586ff941ab8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5586ff941a48 <col:12> 'const int' lvalue .length 0x5586ff92a168
|   |     `-DeclRefExpr 0x5586ff941a28 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9416d8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5586ff941b98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5586ff941b50 <col:12> 'String::memo_t *' lvalue ->memo 0x5586ff92a1f8
|   | | `-CXXThisExpr 0x5586ff941b40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5586ff941b80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5586ff941b10 <col:12> 'String::memo_t *const' lvalue .memo 0x5586ff92a1f8
|   |     `-DeclRefExpr 0x5586ff941af0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9416d8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5586ff941be0 <col:12>
|     `-UnaryOperator 0x5586ff941bc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ff941bb8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5586ff941748 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586ff941748
  `-ParmVarDecl 0x5586ff941858 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ff920e80 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586ff920f98 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5586ff921028 <col:16, col:22> col:16 public
|-TypedefDecl 0x5586ff921068 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x5586ff5f5fd0 'const char *'
|   `-QualType 0x5586ff5f5521 'const char' const
|     `-BuiltinType 0x5586ff5f5520 'char'
|-TypedefDecl 0x5586ff9210f0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5586ff9210c0 'String::const_iterator' sugar
|   |-Typedef 0x5586ff921068 'const_iterator'
|   `-PointerType 0x5586ff5f5fd0 'const char *'
|     `-QualType 0x5586ff5f5521 'const char' const
|       `-BuiltinType 0x5586ff5f5520 'char'
|-TypedefDecl 0x5586ff921260 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5586ff9211d0 'int (String::*)() const'
|   |-RecordType 0x5586ff920f10 'String'
|   | `-CXXRecord 0x5586ff920e80 'String'
|   `-ParenType 0x5586ff921170 'int () const' sugar
|     `-FunctionProtoType 0x5586ff8f5d10 'int () const' const cdecl
|       `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ff9212c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x5586ff74a8f0 'int64_t' sugar
|   |-Typedef 0x5586ff65e390 'int64_t'
|   `-TypedefType 0x5586ff637630 '__int64_t' sugar
|     |-Typedef 0x5586ff637208 '__int64_t'
|     `-BuiltinType 0x5586ff5f55a0 'long'
|-TypedefDecl 0x5586ff921330 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x5586ff74a810 'uint64_t' sugar
|   |-Typedef 0x5586ff65e530 'uint64_t'
|   `-TypedefType 0x5586ff6376c0 '__uint64_t' sugar
|     |-Typedef 0x5586ff637278 '__uint64_t'
|     `-BuiltinType 0x5586ff5f5640 'unsigned long'
|-TypedefDecl 0x5586ff9213c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5586ff921390 'String::intmax_t' sugar
|   |-Typedef 0x5586ff9212c8 'intmax_t'
|   `-TypedefType 0x5586ff74a8f0 'int64_t' sugar
|     |-Typedef 0x5586ff65e390 'int64_t'
|     `-TypedefType 0x5586ff637630 '__int64_t' sugar
|       |-Typedef 0x5586ff637208 '__int64_t'
|       `-BuiltinType 0x5586ff5f55a0 'long'
|-TypedefDecl 0x5586ff921450 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5586ff921420 'String::uintmax_t' sugar
|   |-Typedef 0x5586ff921330 'uintmax_t'
|   `-TypedefType 0x5586ff74a810 'uint64_t' sugar
|     |-Typedef 0x5586ff65e530 'uint64_t'
|     `-TypedefType 0x5586ff6376c0 '__uint64_t' sugar
|       |-Typedef 0x5586ff637278 '__uint64_t'
|       `-BuiltinType 0x5586ff5f5640 'unsigned long'
|-CXXConstructorDecl 0x5586ff921510 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5586ff9216b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5586ff9215f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5586ff921868 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5586ff9217a8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5586ff9219c0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5586ff921930 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5586ff921bd8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5586ff921a88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5586ff921b08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5586ff921df8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5586ff921ca8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5586ff921d28 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5586ff922018 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5586ff921ec8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5586ff921f48 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5586ff922238 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5586ff9220e8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5586ff922168 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5586ff9223c8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5586ff922300 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5586ff922548 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5586ff922488 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5586ff9226d8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5586ff922610 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5586ff922830 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5586ff9227a0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5586ff922988 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5586ff9228f8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5586ff922ae0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5586ff922a50 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5586ff922c68 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5586ff922ba8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5586ff922df8 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5586ff922d30 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5586ff922f88 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5586ff922ec0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5586ff923118 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5586ff923050 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5586ff923210 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5586ff923338 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5586ff9234b8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5586ff9233f0 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5586ff923608 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5586ff923578 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5586ff9236c0 <col:63> "" ""
|-CXXMethodDecl 0x5586ff923808 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5586ff923748 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5586ff923a18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5586ff9238c8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5586ff923948 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5586ff923c38 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5586ff923ae0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5586ff923b60 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5586ff923f18 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5586ff923cf8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5586ff923d78 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5586ff92fd60 <col:55> 'int' 10
| `-ParmVarDecl 0x5586ff923df0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586ff92fd80 <col:76> 'bool' true
|-CXXMethodDecl 0x5586ff9241f8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5586ff923fe0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5586ff924060 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5586ff92fd90 <col:56> 'int' 10
| `-ParmVarDecl 0x5586ff9240d8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586ff92fdb0 <col:77> 'bool' true
|-CXXMethodDecl 0x5586ff924300 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5586ff9243c8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5586ff924490 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5586ff924530 <col:20>
| `-OptimizeNoneAttr 0x5586ff924588 <col:30>
|-CXXConversionDecl 0x5586ff924678 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5586ff924748 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5586ff924808 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5586ff9248f8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5586ff9249b8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5586ff924b38 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5586ff924a70 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5586ff924c88 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5586ff924bf8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5586ff924d78 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5586ff924e38 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5586ff925088 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5586ff924ef0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5586ff924f70 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5586ff9252e8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5586ff925150 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5586ff9251d0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5586ff9253b8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ff9255c8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5586ff925470 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5586ff9254f0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5586ff9257e8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5586ff925690 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5586ff925710 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5586ff925978 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5586ff9258b0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5586ff925a68 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5586ff925bd8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5586ff925b18 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5586ff925de8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5586ff925c98 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5586ff925d18 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5586ff926000 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5586ff925ea8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5586ff925f20 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5586ff926190 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5586ff9260c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5586ff9263b0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5586ff926250 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5586ff9262d0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5586ff926500 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5586ff926470 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5586ff9266d8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5586ff9265c0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5586ff926640 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5586ff926828 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5586ff926798 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5586ff926a40 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5586ff9268e0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5586ff926960 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5586ff92fdc0 <col:39> 'int' 0
|-CXXMethodDecl 0x5586ff926c60 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5586ff926b00 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5586ff926b80 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5586ff92fde0 <col:48> 'int' 0
|-CXXMethodDecl 0x5586ff926e40 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5586ff926d20 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5586ff926da0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5586ff92fe00 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5586ff926f10 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5586ff926fd0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5586ff927090 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5586ff927150 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5586ff927210 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5586ff9273b8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5586ff9272c0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5586ff927538 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5586ff927470 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5586ff927710 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5586ff9275f8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5586ff927888 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5586ff9277c8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5586ff9279d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5586ff927940 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5586ff927b20 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5586ff927a90 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5586ff927cf8 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5586ff927be0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5586ff927c60 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5586ff927ed8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5586ff927dc0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5586ff927e40 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5586ff928028 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5586ff927f98 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5586ff928238 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5586ff9280e8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5586ff928168 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5586ff928398 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5586ff928300 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5586ff9284f0 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5586ff928458 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5586ff928598 <col:57> "" ""
|-CXXMethodDecl 0x5586ff9286a8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5586ff928618 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5586ff9287f8 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5586ff928768 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5586ff928978 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5586ff9288b0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5586ff928a40 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5586ff928b00 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5586ff928bc0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5586ff928c60 <col:49> "" ""
|-CXXMethodDecl 0x5586ff928cf0 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5586ff928db0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5586ff928ea0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5586ff928f68 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5586ff929028 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5586ff9290e8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5586ff9291e0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5586ff9292a8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5586ff929370 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5586ff929548 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5586ff929428 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5586ff9294a8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5586ff929770 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5586ff929610 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5586ff929690 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5586ff929880 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5586ff9298e8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5586ff929910 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5586ff929a28 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5586ff929ac8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5586ff929b28 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5586ff929b88 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5586ff929c38 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5586ff929ca0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5586ff929ed8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5586ff929f28 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ff929eb8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5586ff929dc8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5586ff929d70 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5586ff929db0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5586ff929d90 <col:32> 'int' 8
|-CXXRecordDecl 0x5586ff929f40 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586ff92a058 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5586ff92a100 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5586ff92a168 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5586ff92a1f8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5586ff930290 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5586ff9306c8 <col:12>
| |-CXXConstructorDecl 0x5586ff930398 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586ff9304a8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5586ff92a100 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5586ff932c50 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5586ff932c20 <col:12> 'const char *const' lvalue .data 0x5586ff92a100
| | |     `-DeclRefExpr 0x5586ff932c00 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9304a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5586ff92a168 'length' 'int'
| | | `-ImplicitCastExpr 0x5586ff932ce0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5586ff932cb0 <col:12> 'const int' lvalue .length 0x5586ff92a168
| | |     `-DeclRefExpr 0x5586ff932c90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9304a8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5586ff92a1f8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5586ff932d70 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5586ff932d40 <col:12> 'String::memo_t *const' lvalue .memo 0x5586ff92a1f8
| | |     `-DeclRefExpr 0x5586ff932d20 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9304a8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5586ff932dc8 <col:12>
| |-CXXConstructorDecl 0x5586ff930548 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586ff930548
| | `-ParmVarDecl 0x5586ff930658 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5586ff935bb0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5586ff9415c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586ff9416d8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5586ff941bf0 <col:12>
| |   |-BinaryOperator 0x5586ff941a08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5586ff9419c0 <col:12> 'const char *' lvalue ->data 0x5586ff92a100
| |   | | `-CXXThisExpr 0x5586ff9419b0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5586ff9419f0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5586ff941980 <col:12> 'const char *const' lvalue .data 0x5586ff92a100
| |   |     `-DeclRefExpr 0x5586ff941960 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9416d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5586ff941ad0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5586ff941a88 <col:12> 'int' lvalue ->length 0x5586ff92a168
| |   | | `-CXXThisExpr 0x5586ff941a78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5586ff941ab8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5586ff941a48 <col:12> 'const int' lvalue .length 0x5586ff92a168
| |   |     `-DeclRefExpr 0x5586ff941a28 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9416d8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5586ff941b98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5586ff941b50 <col:12> 'String::memo_t *' lvalue ->memo 0x5586ff92a1f8
| |   | | `-CXXThisExpr 0x5586ff941b40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5586ff941b80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5586ff941b10 <col:12> 'String::memo_t *const' lvalue .memo 0x5586ff92a1f8
| |   |     `-DeclRefExpr 0x5586ff941af0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5586ff9416d8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5586ff941be0 <col:12>
| |     `-UnaryOperator 0x5586ff941bc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5586ff941bb8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5586ff941748 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5586ff941748
|   `-ParmVarDecl 0x5586ff941858 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5586ff92a270 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5586ff92a4b8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5586ff92a2d8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5586ff92a358 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5586ff92a3d0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5586ff930250 <col:79, line:261:5>
|   |-BinaryOperator 0x5586ff92fec8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5586ff92fe60 <col:2, col:5> 'const char *' lvalue .data 0x5586ff92a100
|   | | `-MemberExpr 0x5586ff92fe30 <col:2> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|   | |   `-CXXThisExpr 0x5586ff92fe20 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5586ff92feb0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5586ff92fe90 <col:12> 'const char *' lvalue ParmVar 0x5586ff92a2d8 'data' 'const char *'
|   |-BinaryOperator 0x5586ff92ff90 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5586ff92ff28 <col:2, col:5> 'int' lvalue .length 0x5586ff92a168
|   | | `-MemberExpr 0x5586ff92fef8 <col:2> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|   | |   `-CXXThisExpr 0x5586ff92fee8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5586ff92ff78 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5586ff92ff58 <col:14> 'int' lvalue ParmVar 0x5586ff92a358 'length' 'int'
|   `-IfStmt 0x5586ff930238 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5586ff9300b0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5586ff930098 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5586ff930078 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5586ff930058 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5586ff92fff0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|     |       | `-MemberExpr 0x5586ff92ffc0 <col:7> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|     |       |   `-CXXThisExpr 0x5586ff92ffb0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5586ff930040 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5586ff930020 <col:17> 'String::memo_t *' lvalue ParmVar 0x5586ff92a3d0 'memo' 'String::memo_t *'
|     `-CallExpr 0x5586ff930210 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5586ff9301f8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5586ff930100 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5586ff918ee8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5586ff930168 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5586ff929ac8
|         `-ImplicitCastExpr 0x5586ff930150 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5586ff930130 <col:27> 'String::memo_t *' lvalue ParmVar 0x5586ff92a3d0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5586ff92a768 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5586ff92a588 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5586ff92a608 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5586ff92a680 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5586ff92a270 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5586ff9306d8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5586ff930868 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5586ff9307d0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5586ff930740 <col:2> '<bound member function type>' ->assign_memo 0x5586ff92a4b8
|     | `-ImplicitCastExpr 0x5586ff930808 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5586ff930730 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5586ff930820 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5586ff930770 <col:14> 'const char *' lvalue ParmVar 0x5586ff92a588 'data' 'const char *'
|     |-ImplicitCastExpr 0x5586ff930838 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5586ff930790 <col:20> 'int' lvalue ParmVar 0x5586ff92a608 'length' 'int'
|     `-ImplicitCastExpr 0x5586ff930850 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5586ff9307b0 <col:28> 'String::memo_t *' lvalue ParmVar 0x5586ff92a680 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5586ff92a8f8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5586ff92a838 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5586ff930ac0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5586ff930a40 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5586ff930890 <col:2> '<bound member function type>' ->assign_memo 0x5586ff92a4b8
|     | `-CXXThisExpr 0x5586ff930880 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5586ff930a78 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5586ff930910 <col:14, col:19> 'const char *' lvalue .data 0x5586ff92a100
|     |   `-MemberExpr 0x5586ff9308e0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5586ff92a270
|     |     `-DeclRefExpr 0x5586ff9308c0 <col:14> 'const String' lvalue ParmVar 0x5586ff92a838 'x' 'const String &'
|     |-ImplicitCastExpr 0x5586ff930a90 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5586ff930990 <col:25, col:30> 'int' lvalue .length 0x5586ff92a168
|     |   `-MemberExpr 0x5586ff930960 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5586ff92a270
|     |     `-DeclRefExpr 0x5586ff930940 <col:25> 'const String' lvalue ParmVar 0x5586ff92a838 'x' 'const String &'
|     `-ImplicitCastExpr 0x5586ff930aa8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5586ff930a10 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|         `-MemberExpr 0x5586ff9309e0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5586ff92a270
|           `-DeclRefExpr 0x5586ff9309c0 <col:38> 'const String' lvalue ParmVar 0x5586ff92a838 'x' 'const String &'
|-CXXMethodDecl 0x5586ff92a9c0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5586ff931480 <col:31, line:278:5>
|   `-IfStmt 0x5586ff931468 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5586ff930b60 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5586ff930b48 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5586ff930b18 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|     |     `-MemberExpr 0x5586ff930ae8 <col:6> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|     |       `-CXXThisExpr 0x5586ff930ad8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5586ff931440 <col:15, line:277:2>
|       |-ParenExpr 0x5586ff931010 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5586ff930fe0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5586ff930c70 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5586ff930c58 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5586ff930c40 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5586ff930c00 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5586ff929ac8
|       |   |       `-ImplicitCastExpr 0x5586ff930be8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5586ff930bb8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|       |   |           `-MemberExpr 0x5586ff930b88 <col:27> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|       |   |             `-CXXThisExpr 0x5586ff930b78 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5586ff930cd0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5586ff930cb0 <col:54> 'int' 0
|       |   `-CallExpr 0x5586ff930f40 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5586ff930f28 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5586ff930ea8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5586ff930f80 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5586ff930db8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5586ff930f98 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5586ff930de8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5586ff930fb0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5586ff930e20 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5586ff930fc8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5586ff930e90 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5586ff930e78 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5586ff930e40 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5586ff931360 <line:274:6, line:275:22>
|       | |-CallExpr 0x5586ff931220 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5586ff931208 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5586ff931180 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5586ff91a330 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5586ff931150 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5586ff929ac8
|       | |   `-ImplicitCastExpr 0x5586ff931138 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5586ff931108 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|       | |       `-MemberExpr 0x5586ff9310d8 <col:40> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|       | |         `-CXXThisExpr 0x5586ff9310c8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5586ff931320 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5586ff931308 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5586ff931248 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5586ff92f1a0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5586ff931348 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5586ff9312a8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|       |       `-MemberExpr 0x5586ff931278 <col:15> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|       |         `-CXXThisExpr 0x5586ff931268 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5586ff931420 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5586ff9313b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5586ff92a1f8
|         | `-MemberExpr 0x5586ff931388 <col:6> 'String::rep_t' lvalue ->_r 0x5586ff92a270
|         |   `-CXXThisExpr 0x5586ff931378 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5586ff931408 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5586ff9313e8 <col:16> 'int' 0
|-CXXMethodDecl 0x5586ff92ac58 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5586ff92aa78 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5586ff92aaf8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5586ff92ab70 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5586ff92ad30 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5586ff92af80 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5586ff92ade8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5586ff92ae68 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5586ff92aee0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5586ff92b168 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5586ff92b050 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5586ff92b0d0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5586ff92b268 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5586ff931558 <col:41, line:286:5>
|   `-ReturnStmt 0x5586ff931548 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5586ff931518 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5586ff9314e0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5586ff9314c8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5586ff9314a8 <col:46> 'int' 1
|-CXXMethodDecl 0x5586ff92b508 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5586ff92b320 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5586ff92b3a0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5586ff92b420 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5586ff92f1a0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5586ff92b5d0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5586ff92f270 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5586ff92f440 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5586ff92f328 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5586ff92f3a8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5586ff92f500 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5586ff92f5c8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5586ff92f6c8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5586ff92f740 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5586ff92f7b8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5586ff92f820 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5586ff92f920 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5586ff92f970 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ff92f900 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5586ff92f8e0 <col:22> 'int' 14
|-CXXMethodDecl 0x5586ff92fb88 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5586ff92f9a0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5586ff92fa20 <col:38> col:41 'int'
| `-ParmVarDecl 0x5586ff92faa0 <col:43> col:46 'int'
|-FriendDecl 0x5586ff92fc90 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5586ff92fd20 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586ff9f2cb0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x5586ff9f2e88 prev 0x5586ff9f2cb0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5586ff9f2f18 <col:46, col:52> col:46 public
|-TypedefDecl 0x5586ff9f2f40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ff9f48a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x5586ff9f4850 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x5586ff9f4830 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x5586ff9f3158 'type'
|     `-SubstTemplateTypeParmType 0x5586ff9f3120 'String' sugar
|       |-TemplateTypeParmType 0x5586ff8e5730 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8e56e0 'T'
|       `-RecordType 0x5586ff920f10 'String'
|         `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ff9f4958 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x5586ff9f4920 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x5586ff9f4900 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5586ff9f48a0 'type'
|     `-ElaboratedType 0x5586ff9f4850 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x5586ff9f4830 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x5586ff9f3158 'type'
|         `-SubstTemplateTypeParmType 0x5586ff9f3120 'String' sugar
|           |-TemplateTypeParmType 0x5586ff8e5730 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5586ff8e56e0 'T'
|           `-RecordType 0x5586ff920f10 'String'
|             `-CXXRecord 0x5586ff920e80 'String'
|-CXXMethodDecl 0x5586ff9f4ad8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x5586ff9f49e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x5586ff9f4bc8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5586ff9f4ca8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x5586ff9f4ca8
|-CXXMethodDecl 0x5586ff9f4f78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5586ff9f4e80 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5586ff9f51b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5586ff9f5030 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586ff9f50a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffb9f9a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5586ff9f5278 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586ffb9f910 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffb9fb08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5586ffb9fbd8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x5586ffb9fe28 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5586ffb9fc98 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5586ffb9fd10 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffba0088 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x5586ffb9fef8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x5586ffb9ff70 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffba0248 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5586ffba0158 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffba0408 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x5586ffba0310 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffba04c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586ffba0570 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5586ffba07a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5586ffba0620 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586ffba0698 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x5586ffba0a48 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x5586ffba0950 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x5586ffba0b10 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x5586ffba0b60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5586ffba0bb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586ffb596c0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x5586ff9f1718 prev 0x5586ffb596c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5586ff9f2c20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x5586ff9f2bd0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x5586ff9f2bb0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5586ff9f2a60 'type'
|     `-SubstTemplateTypeParmType 0x5586ff9f28f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x5586ff8bb4e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x5586ff8bb488 'F'
|       `-RecordType 0x5586ff9f2550 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5586ff9f2470 'typed_array_memory'
|-FieldDecl 0x5586ffba0c00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x5586ffba0c50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5586ffba0c88 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|   |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|   `-RecordType 0x5586ff920f10 'String'
|     `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba0d18 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x5586ffba0ce0 'String &'
|   `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|     |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|     `-RecordType 0x5586ff920f10 'String'
|       `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba0da8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x5586ffba0d70 'const String &'
|   `-QualType 0x5586ff9f17b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-RecordType 0x5586ff920f10 'String'
|         `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba0e38 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x5586ffba0e00 'String *'
|   `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|     |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|     `-RecordType 0x5586ff920f10 'String'
|       `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba0ec8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x5586ffba0e90 'const String *'
|   `-QualType 0x5586ff9f17b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-RecordType 0x5586ff920f10 'String'
|         `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba1b20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x5586ffba1ad0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x5586ffba1ab0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x5586ffba19e8 'type'
|     `-LValueReferenceType 0x5586ffba19b0 'const String &'
|       `-QualType 0x5586ffba1751 'const String' const
|         `-SubstTemplateTypeParmType 0x5586ffba1750 'String' sugar
|           |-TemplateTypeParmType 0x5586ff8c5430 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x5586ff8c53d8 'T'
|           `-RecordType 0x5586ff920f10 'String'
|             `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba1b88 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x5586ffba0d70 'const String &'
|   `-QualType 0x5586ff9f17b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-RecordType 0x5586ff920f10 'String'
|         `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba1be0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffba1c48 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x5586ffba0e00 'String *'
|   `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|     |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|     `-RecordType 0x5586ff920f10 'String'
|       `-CXXRecord 0x5586ff920e80 'String'
|-TypedefDecl 0x5586ffba1cb0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x5586ffba0e90 'const String *'
|   `-QualType 0x5586ff9f17b1 'const String' const
|     `-SubstTemplateTypeParmType 0x5586ff9f17b0 'String' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-RecordType 0x5586ff920f10 'String'
|         `-CXXRecord 0x5586ff920e80 'String'
|-EnumDecl 0x5586ffba1d08 <line:134:5> col:5
| `-EnumConstantDecl 0x5586ffba1e00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5586ffba1de0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5586ff8f40d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5586ff8f40b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5586ff8f4090 <col:40> 'int' 1
|-CXXConstructorDecl 0x5586ffba1e88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5586ffba2118 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffba1f40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586ffba1fe0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x5586ffba23a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x5586ffba2290 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5586ffba2668 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5586ffba2550 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5586ffba2980 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5586ffba2860 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5586ffba2c90 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5586ffba2b70 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x5586ffba2f80 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffba2dc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586ffba2e40 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5586ffba30a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5586ffba3158 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffba31b0 <col:30> Inherited
|-CXXMethodDecl 0x5586ffba31f8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x5586ffba32a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffba3300 <col:30> Inherited
|-CXXMethodDecl 0x5586ffba33c8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5586ffba3478 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffba34d0 <col:30> Inherited
|-CXXMethodDecl 0x5586ffba3518 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5586ffba35c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffba3620 <col:30> Inherited
|-CXXMethodDecl 0x5586ffba3668 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5586ffba3718 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffba3770 <col:30> Inherited
|-CXXMethodDecl 0x5586ffba37b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5586ffba3868 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffba38c0 <col:30> Inherited
|-CXXMethodDecl 0x5586ffba38e8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586ffba3998 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586ffba3a48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5586ffba3c08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffba3af8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586ffba3b70 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5586ffba3d58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5586ffba3cc8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffba3f08 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x5586ffba3e10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5586ffba3fc0 <col:20>
| `-OptimizeNoneAttr 0x5586ffba4018 <col:30>
|-CXXMethodDecl 0x5586ffba4138 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x5586ffba4040 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5586ffba41f0 <col:20>
| `-OptimizeNoneAttr 0x5586ffba4248 <col:30>
|-CXXMethodDecl 0x5586ffba4300 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586ffba4270 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffba4448 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5586ffba43b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffba4578 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5586ffba4678 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5586ffba4748 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x5586ffba4818 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5586ffba4958 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586ffba48c8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffba4aa0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5586ffba4a10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffba4be8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5586ffba4b58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586ffba4ca0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5586ffba4da0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5586ffba4d10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586ffba4e58 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5586ffba4f18 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x5586ffba5018 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x5586ffba5198 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5586ffba50d8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5586ffba5958 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5586ffba5250 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x5586ffba58b8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x5586ffba57b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x5586ffba5a38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586ffba5b88 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x5586ffba5af8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5586ffba5c40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5586ffba5e88 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffba5d00 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5586ffba5d78 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5586ffba6018 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x5586ffba5f58 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5586ffba6228 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x5586ffba60e0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5586ffba6158 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x5586ffba62e8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5586ffba6548 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5586ffba6450 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x5586ffba6618 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x5586ffba6618

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffc28978 prev 0x5586ffad7498 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586ffc28a70 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5586ffc28b00 <col:22, col:28> col:22 public
|-EnumDecl 0x5586ffc28b28 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5586ffc28c48 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28c28 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5586ffc28c10 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5586ffc28bf0 <col:14> 'int' 999
| |-EnumConstantDecl 0x5586ffc28cf0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28cd0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5586ffc28cb8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5586ffc28c98 <col:14> 'int' 1
| |-EnumConstantDecl 0x5586ffc28d80 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28d60 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5586ffc28d40 <col:17> 'int' 0
| |-EnumConstantDecl 0x5586ffc28e10 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28df0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5586ffc28dd0 <col:13> 'int' 1
| |-EnumConstantDecl 0x5586ffc28ea0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28e80 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5586ffc28e60 <col:16> 'int' 2
| |-EnumConstantDecl 0x5586ffc28f30 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28f10 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5586ffc28ef0 <col:13> 'int' 3
| |-EnumConstantDecl 0x5586ffc28fc0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc28fa0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5586ffc28f80 <col:15> 'int' 4
| |-EnumConstantDecl 0x5586ffc29050 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc29030 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5586ffc29010 <col:14> 'int' 5
| |-EnumConstantDecl 0x5586ffc290e0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5586ffc290c0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5586ffc290a0 <col:12> 'int' 6
| `-EnumConstantDecl 0x5586ffc29170 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5586ffc29150 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5586ffc29130 <col:13> 'int' 7
|-VarDecl 0x5586ffc291e0 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5586ffc29268 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5586ffc292f0 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5586ffc29378 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5586ffc29400 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5586ffc29488 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5586ffc29510 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5586ffc29598 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5586ffc29620 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5586ffc296a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5586ffc29730 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5586ffc29830 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5586ffc2eb38 '_nerrors' 'int'
| | `-IntegerLiteral 0x5586ffc2f2c8 <line:128:13> 'int' 0
| `-CompoundStmt 0x5586ffc2f338 <col:16, line:129:5>
|-CXXDestructorDecl 0x5586ffc29920 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5586ffc2f348 <col:29, line:132:5>
|-CXXMethodDecl 0x5586ffc29ad8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5586ffc29a10 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffc29ba0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5586ffc29c88 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5586ffc2f3a0 <col:44, line:161:5>
|   `-ReturnStmt 0x5586ffc2f390 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5586ffc2f378 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffc2f358 <col:9> 'ErrorHandler *' lvalue Var 0x5586ffc2eb98 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffc29dc8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5586ffc29d38 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5586ffc29e90 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5586ffc2f400 <col:43, line:173:5>
|   `-ReturnStmt 0x5586ffc2f3f0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5586ffc2f3d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffc2f3b8 <col:9> 'ErrorHandler *' lvalue Var 0x5586ffc2ec10 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5586ffc29f48 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5586ffc29fc8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5586ffc2a0d8 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5586ffc2a048 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2a228 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5586ffc2a198 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2a380 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5586ffc2a2e8 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2a4d8 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5586ffc2a440 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2a630 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5586ffc2a598 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2a840 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586ffc2a6e8 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5586ffc2a768 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2aa18 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586ffc2a900 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5586ffc2a980 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2ac38 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586ffc2aad8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5586ffc2ab58 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2ae18 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586ffc2acf8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5586ffc2ad78 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2aff8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5586ffc2aed8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5586ffc2af58 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2b180 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5586ffc2b0b8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5586ffc2b350 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5586ffc2b238 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5586ffc2b2b0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5586ffc2f658 <col:57, line:234:5>
|   `-ReturnStmt 0x5586ffc2f648 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5586ffc2f630 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5586ffc2f5d8 <col:9, col:41> 'int'
|         |-MemberExpr 0x5586ffc2f5a8 <col:9> '<bound member function type>' ->xmessage 0x5586ffc2b180
|         | `-CXXThisExpr 0x5586ffc2f598 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5586ffc2f618 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5586ffc2f600 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5586ffc2f578 <col:18, col:40> 'String' (CXXTemporary 0x5586ffc2f578)
|               `-CallExpr 0x5586ffc2f540 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5586ffc2f528 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5586ffc2f4a0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5586ffc2d348 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5586ffc2f4c0 <col:31> 'const String' lvalue ParmVar 0x5586ffc2b2b0 'str' 'const String &'
|                 `-DeclRefExpr 0x5586ffc2f4e0 <col:36> 'const String' lvalue ParmVar 0x5586ffc2b238 'anno' 'const String &'
|-CXXMethodDecl 0x5586ffc2b630 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5586ffc2b410 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5586ffc2b490 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5586ffc2b508 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5586ffc2f8e8 <col:68, line:243:5>
|   `-ReturnStmt 0x5586ffc2f8d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5586ffc2f8c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5586ffc2f860 <col:9, col:41> 'int'
|         |-MemberExpr 0x5586ffc2f830 <col:9> '<bound member function type>' ->xmessage 0x5586ffc2b350
|         | `-CXXThisExpr 0x5586ffc2f820 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5586ffc2f6f8 <col:18> 'const String' lvalue ParmVar 0x5586ffc2b410 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5586ffc2f8a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5586ffc2f890 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5586ffc2f800 <col:24, col:40> 'String' (CXXTemporary 0x5586ffc2f800)
|               `-CXXMemberCallExpr 0x5586ffc2f798 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5586ffc2f728 <col:24> '<bound member function type>' ->vformat 0x5586ffc2c810
|                 | `-CXXThisExpr 0x5586ffc2f718 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5586ffc2f7c8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5586ffc2f758 <col:32> 'const char *' lvalue ParmVar 0x5586ffc2b490 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5586ffc2f7e0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5586ffc2f778 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5586ffc2b508 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586ffc2b8d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5586ffc2b6f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5586ffc2b770 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5586ffc2b7e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5586ffc2fc28 <col:23, line:254:5>
|   `-ReturnStmt 0x5586ffc2fc18 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5586ffc2fc00 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5586ffc2fba0 <col:9, col:71> 'int'
|         |-MemberExpr 0x5586ffc2fb70 <col:9> '<bound member function type>' ->xmessage 0x5586ffc2b350
|         | `-CXXThisExpr 0x5586ffc2fb60 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5586ffc2fbe8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5586ffc2fbd0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5586ffc2fb20 <col:18, col:65> 'String' (CXXTemporary 0x5586ffc2fb20)
|         |     `-CallExpr 0x5586ffc2fab8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5586ffc2faa0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5586ffc2f988 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5586ffc2d348 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5586ffc2f9a8 <col:31> 'const String' lvalue ParmVar 0x5586ffc2b770 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5586ffc2fb00 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5586ffc2fae8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5586ffc2fa80 <col:37, col:64> 'String' (CXXTemporary 0x5586ffc2fa80)
|         |             `-CallExpr 0x5586ffc2fa50 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5586ffc2fa38 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5586ffc2f9c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x5586ffc2d998 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5586ffc2f9e8 <col:56> 'const String' lvalue ParmVar 0x5586ffc2b6f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x5586ffc2fb40 <col:68> 'const String' lvalue ParmVar 0x5586ffc2b7e8 'str' 'const String &'
|-CXXMethodDecl 0x5586ffc2bc50 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5586ffc2b998 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5586ffc2ba10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5586ffc2ba90 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5586ffc2bb08 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5586ffc2fee0 <col:34, line:267:5>
|   `-ReturnStmt 0x5586ffc2fed0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5586ffc2feb8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5586ffc2fe50 <col:9, col:51> 'int'
|         |-MemberExpr 0x5586ffc2fe20 <col:9> '<bound member function type>' ->xmessage 0x5586ffc2b8d0
|         | `-CXXThisExpr 0x5586ffc2fe10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5586ffc2fcc8 <col:18> 'const String' lvalue ParmVar 0x5586ffc2b998 'landmark' 'const String &'
|         |-DeclRefExpr 0x5586ffc2fce8 <col:28> 'const String' lvalue ParmVar 0x5586ffc2ba10 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5586ffc2fea0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5586ffc2fe88 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5586ffc2fdf0 <col:34, col:50> 'String' (CXXTemporary 0x5586ffc2fdf0)
|               `-CXXMemberCallExpr 0x5586ffc2fd88 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5586ffc2fd18 <col:34> '<bound member function type>' ->vformat 0x5586ffc2c810
|                 | `-CXXThisExpr 0x5586ffc2fd08 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5586ffc2fdb8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5586ffc2fd48 <col:42> 'const char *' lvalue ParmVar 0x5586ffc2ba90 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5586ffc2fdd0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5586ffc2fd68 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5586ffc2bb08 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586ffc2bd60 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5586ffc2ff60 <col:25, line:288:5>
|   `-ReturnStmt 0x5586ffc2ff50 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5586ffc2ff38 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5586ffc2ff08 <col:9> 'const int' lvalue ->_nerrors 0x5586ffc2eb38
|         `-CXXThisExpr 0x5586ffc2fef8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5586ffc2bf70 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5586ffc2be18 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5586ffc2be98 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2c258 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5586ffc2c038 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5586ffc2c0b8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5586ffc2c130 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586ffc2c3f0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5586ffc2c328 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2c638 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5586ffc2c4b0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5586ffc2c528 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5586ffc301c0 <col:58, line:357:5>
|   `-ReturnStmt 0x5586ffc301b0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5586ffc30198 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5586ffc30168 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5586ffc30150 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5586ffc30130 <col:9, col:29> 'String' (CXXTemporary 0x5586ffc30130)
|             `-CallExpr 0x5586ffc300c0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5586ffc300a8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5586ffc30028 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5586ffc2c258 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5586ffc2ffc8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5586ffc300f8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5586ffc2ffe8 <col:21> 'const char *' lvalue ParmVar 0x5586ffc2c4b0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5586ffc30110 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5586ffc30008 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5586ffc2c528 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586ffc2c810 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5586ffc2c700 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5586ffc2c778 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5586ffc2c968 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5586ffc2c8d8 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5586ffc2cab0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5586ffc2ca20 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5586ffc2cd50 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5586ffc2cb68 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5586ffc2cbe8 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5586ffc2cc60 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5586ffc2ceb0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5586ffc2ce20 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5586ffc302d8 <col:37, line:441:5>
|   `-IfStmt 0x5586ffc302c0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5586ffc30248 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5586ffc30218 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5586ffc301d8 <col:6> 'int' lvalue ParmVar 0x5586ffc2ce20 'level' 'int'
|     | `-ImplicitCastExpr 0x5586ffc30230 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5586ffc301f8 <col:15> 'ErrorHandler::Level' EnumConstant 0x5586ffc28f30 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5586ffc302a8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5586ffc30278 <col:8> 'int' lvalue ->_nerrors 0x5586ffc2eb38
|         `-CXXThisExpr 0x5586ffc30268 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5586ffc2cf78 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5586ffc30370 <col:26, line:448:5>
|   `-BinaryOperator 0x5586ffc30350 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5586ffc30300 <col:2> 'int' lvalue ->_nerrors 0x5586ffc2eb38
|     | `-CXXThisExpr 0x5586ffc302f0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5586ffc30330 <col:13> 'int' 0
|-CXXMethodDecl 0x5586ffc2d140 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5586ffc2d030 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5586ffc2d0a8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5586ffc2d348 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5586ffc2d200 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5586ffc2d278 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5586ffc2d5f8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5586ffc2d408 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5586ffc2d488 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5586ffc2d508 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5586ffc2d6b0 <col:59> 0 0
|-CXXMethodDecl 0x5586ffc2d848 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5586ffc2d728 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5586ffc2d7a8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5586ffc309e0 <col:70, line:534:5>
|   |-DeclStmt 0x5586ffc304e0 <line:528:2, col:20>
|   | |-VarDecl 0x5586ffc30398 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5586ffc30400 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5586ffc30438 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5586ffc304a0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5586ffc305b0 <line:529:2, col:23>
|   | `-VarDecl 0x5586ffc30510 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5586ffc30598 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5586ffc30578 <col:18> 'const char *' lvalue ParmVar 0x5586ffc2d728 'begin' 'const char *'
|   |-DoStmt 0x5586ffc30978 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5586ffc308a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5586ffc30890 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5586ffc30870 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5586ffc305c8 <col:6> 'const char *' lvalue Var 0x5586ffc30510 'x' 'const char *'
|   | |     `-CallExpr 0x5586ffc307c0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5586ffc307a8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5586ffc30760 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5586ffc2f010 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5586ffc30828 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5586ffc30810 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5586ffc30680 <col:20, col:27> 'String' (CXXTemporary 0x5586ffc30680)
|   | |       |     `-CXXTemporaryObjectExpr 0x5586ffc30648 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5586ffc30840 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5586ffc306a0 <col:30> 'const char *' lvalue Var 0x5586ffc30510 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5586ffc30858 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5586ffc306c0 <col:33> 'const char *' lvalue ParmVar 0x5586ffc2d7a8 'end' 'const char *'
|   | |       |-UnaryOperator 0x5586ffc30700 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5586ffc306e0 <col:39> 'String' lvalue Var 0x5586ffc30398 'name' 'String'
|   | |       |-UnaryOperator 0x5586ffc30738 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5586ffc30718 <col:46> 'String' lvalue Var 0x5586ffc30438 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5586ffc30750 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5586ffc30960 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5586ffc30948 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5586ffc30928 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5586ffc308f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|   |         `-ImplicitCastExpr 0x5586ffc308e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5586ffc308c0 <col:11> 'String' lvalue Var 0x5586ffc30398 'name' 'String'
|   `-ReturnStmt 0x5586ffc309d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5586ffc309b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffc30998 <col:9> 'const char *' lvalue Var 0x5586ffc30510 'x' 'const char *'
|-CXXMethodDecl 0x5586ffc2d998 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5586ffc2d908 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5586ffc30fe8 <col:55, line:550:5>
|   `-IfStmt 0x5586ffc30fc0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5586ffc30c20 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5586ffc30c08 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5586ffc30bf0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5586ffc30bd0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5586ffc30ba0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|     | |       `-DeclRefExpr 0x5586ffc30a40 <col:6> 'const String' lvalue ParmVar 0x5586ffc2d908 'x' 'const String &'
|     | `-BinaryOperator 0x5586ffc30b80 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5586ffc30b50 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5586ffc30b00 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5586ffc30ae8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5586ffc30aa0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5586ff93deb0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5586ffc30a60 <col:11> 'const String' lvalue ParmVar 0x5586ffc2d908 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5586ffc30a80 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5586ffc30b68 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5586ffc30b38 <col:19> 'char' 123
|     |-ReturnStmt 0x5586ffc30c90 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5586ffc30c60 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5586ffc30c40 <col:13> 'const String' lvalue ParmVar 0x5586ffc2d908 'x' 'const String &'
|     `-IfStmt 0x5586ffc30f98 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5586ffc30d28 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586ffc30d10 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586ffc30cf0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586ffc30cc0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |       `-DeclRefExpr 0x5586ffc30ca0 <col:11> 'const String' lvalue ParmVar 0x5586ffc2d908 'x' 'const String &'
|       |-ReturnStmt 0x5586ffc30eb0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5586ffc30e98 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5586ffc30e68 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5586ffc30e50 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5586ffc30e30 <col:13, col:29> 'String' (CXXTemporary 0x5586ffc30e30)
|       |         `-CallExpr 0x5586ffc30de0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5586ffc30dc8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5586ffc30d40 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5586ffc2d140 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5586ffc30e10 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5586ffc30d60 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5586ffc30d80 <col:28> 'const String' lvalue ParmVar 0x5586ffc2d908 'x' 'const String &'
|       `-ReturnStmt 0x5586ffc30f88 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5586ffc30f70 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5586ffc30f40 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5586ffc30f28 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5586ffc30f08 <col:13, col:20> 'String' (CXXTemporary 0x5586ffc30f08)
|                 `-CXXTemporaryObjectExpr 0x5586ffc30ed0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5586ffc2db60 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5586ffc2da50 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5586ffc2dac8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586ffc2f2b8 <col:71> 'bool' false
|-CXXRecordDecl 0x5586ffc2dc10 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5586ffc2df08 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5586ffc2dea0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5586ffc2de40 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5586ffc2de00 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5586ff920f10 'String'
|       | `-CXXRecord 0x5586ff920e80 'String'
|       |-BuiltinType 0x5586ff5f5580 'int'
|       `-DecayedType 0x5586ffad84e0 '__va_list_tag *' sugar
|         |-TypedefType 0x5586ffad84b0 'va_list' sugar
|         | |-Typedef 0x5586ff812fd0 'va_list'
|         | `-TypedefType 0x5586ff812f80 '__gnuc_va_list' sugar
|         |   |-Typedef 0x5586ff74aba8 '__gnuc_va_list'
|         |   `-TypedefType 0x5586ff74ab10 '__builtin_va_list' sugar
|         |     |-Typedef 0x5586ff636d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x5586ff636ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x5586ff5f62d0 '__va_list_tag'
|         |         `-CXXRecord 0x5586ff5f6238 '__va_list_tag'
|         `-PointerType 0x5586ff818870 '__va_list_tag *'
|           `-RecordType 0x5586ff5f62d0 '__va_list_tag'
|             `-CXXRecord 0x5586ff5f6238 '__va_list_tag'
|-EnumDecl 0x5586ffc2df60 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5586ffc2e060 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e5e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e040 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5586ffc2e020 <col:16> 'int' 1
| |-EnumConstantDecl 0x5586ffc2e110 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e5f8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e0d0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5586ffc2e0b0 <col:21> 'int' 2
| |-EnumConstantDecl 0x5586ffc2e1a0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e610 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e180 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5586ffc2e160 <col:22> 'int' 4
| |-EnumConstantDecl 0x5586ffc2e230 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e628 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e210 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5586ffc2e1f0 <col:17> 'int' 8
| |-EnumConstantDecl 0x5586ffc2e2c0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e640 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e2a0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5586ffc2e280 <col:22> 'int' 16
| |-EnumConstantDecl 0x5586ffc2e350 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e658 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e330 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5586ffc2e310 <col:19> 'int' 32
| |-EnumConstantDecl 0x5586ffc2e3e0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e670 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e3c0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5586ffc2e3a0 <col:17> 'int' 64
| |-EnumConstantDecl 0x5586ffc2e470 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e688 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e450 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5586ffc2e430 <col:14> 'int' 128
| |-EnumConstantDecl 0x5586ffc2e500 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5586ffc2e6a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc2e4e0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5586ffc2e4c0 <col:16> 'int' 256
| `-EnumConstantDecl 0x5586ffc2e590 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5586ffc2e6b8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffc2e570 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5586ffc2e550 <col:12> 'int' 1024
|-CXXMethodDecl 0x5586ffc2e8c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5586ffc2e6e0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5586ffc2e780 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5586ffc2ea50 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5586ffc2e988 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5586ffc2eaf8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5586ffc2eb38 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5586ffc2eb98 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5586ffc2ec10 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5586ffc2f010 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5586ffc2ec88 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5586ffc2ed08 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5586ffc2ed88 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5586ffc2ee00 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5586ffc2ee78 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5586ffc2eef0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5586ffc2f138 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5586ffc2f138
| `-ParmVarDecl 0x5586ffc2f248 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5586ffc31348 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5586ffc31348
  `-ParmVarDecl 0x5586ffc31458 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffad7528 prev 0x5586ffb1c168 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ffad7620 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5586ffad76b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5586ffad77e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5586ffad76e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5586ffad8c10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffad8bf0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5586ffad8788 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5586ffad8ca0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5586ffad8c60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5586ffad76e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5586ffad87f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5586ffad8d20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffad8ce0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x5586ffad8850 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5586ffad8d60 <col:54> 'bool' false
| `-CompoundStmt 0x5586ffad8e68 <col:61, line:38:5>
|   `-BinaryOperator 0x5586ffad8e48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x5586ffad8de0 <col:9> 'const Element *' lvalue ->_context 0x5586ffad8728
|     | `-CXXThisExpr 0x5586ffad8dd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x5586ffad8e30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x5586ffad8e10 <col:20> 'int' 0
|-CXXConstructorDecl 0x5586ffad79f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffad78a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x5586ffad7920 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x5586ffad8c48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffad8c28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x5586ffad8728 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x5586ffad8ec0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x5586ffad8e80 <col:20> 'const Element *' lvalue ParmVar 0x5586ffad78a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x5586ffad8788 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x5586ffad8f40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x5586ffad8f00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x5586ffad7920 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5586ffad87f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x5586ffad8fc0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x5586ffad8f80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x5586ffad8850 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x5586ffad9000 <col:73> 'bool' false
| `-CompoundStmt 0x5586ffad9078 <col:80, line:46:5>
|-CXXMethodDecl 0x5586ffad7b28 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x5586ffad90f0 <col:36, line:51:5>
|   `-ReturnStmt 0x5586ffad90e0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x5586ffad90c8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x5586ffad9098 <col:16> 'const Element *const' lvalue ->_context 0x5586ffad8728
|         `-CXXThisExpr 0x5586ffad9088 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5586ffad7c18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x5586ffad9170 <col:32, line:57:5>
|   `-ReturnStmt 0x5586ffad9160 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x5586ffad9148 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x5586ffad9118 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x5586ffad8788
|         `-CXXThisExpr 0x5586ffad9108 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x5586ffad7cd8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x5586ffad7e60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x5586ffad7d90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5586ffad7fb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x5586ffad7f20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5586ffad8100 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x5586ffad8070 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5586ffad8308 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5586ffad81b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x5586ffad8230 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x5586ffad8638 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5586ffad83c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x5586ffad8448 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x5586ffad8510 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5586ffad86f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x5586ffad8728 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x5586ffad8788 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5586ffad87f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x5586ffad8850 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5586ffad88a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5586ffad88a0
| `-ParmVarDecl 0x5586ffad89b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x5586ffad8a58 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x5586ffad8a58
| `-ParmVarDecl 0x5586ffad8b68 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5586ffc3d688 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586ffbe4230 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x5586ffbe4408 prev 0x5586ffbe4230 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x5586ffbe4498 <col:46, col:52> col:46 public
|-TypedefDecl 0x5586ffbe44c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbe6090 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x5586ffbe6040 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x5586ffbe4970 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x5586ffbe4870 'type'
|     `-TemplateSpecializationType 0x5586ffbe4800 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5586ffbe46e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5586ffbe46c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5586ffbe46a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5586ffbe47e0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x5586ffbe4700 'char_array'
|-TypedefDecl 0x5586ffbe6148 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x5586ffbe6110 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x5586ffbe60f0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x5586ffbe6090 'type'
|     `-ElaboratedType 0x5586ffbe6040 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x5586ffbe4970 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x5586ffbe4870 'type'
|         `-TemplateSpecializationType 0x5586ffbe4800 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5586ffbe46e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5586ffbe46c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5586ffbe46a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5586ffbe47e0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x5586ffbe4700 'char_array'
|-CXXMethodDecl 0x5586ffbe62c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x5586ffbe61d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x5586ffbe63b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x5586ffbe6498 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x5586ffbe6768 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5586ffbe6670 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5586ffbe69a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586ffbe6820 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586ffbe6898 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbe6b78 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586ffbe6a68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586ffbe6ae0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbe6cd8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5586ffbe6da8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5586ffbe6ff8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586ffbe6e68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5586ffbe6ee0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbe7258 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x5586ffbe70c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x5586ffbe7140 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbe7418 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5586ffbe7328 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbe75d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5586ffbe74e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbefa00 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586ffbefab0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x5586ffbefce8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x5586ffbefb60 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5586ffbefbd8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5586ffbeff88 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x5586ffbefe90 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x5586ffbf0050 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x5586ffbf00a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x5586ffbf00f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586ffbe2c38 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5586ffbe2e48 prev 0x5586ffbe2c38 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x5586ffbe41a0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x5586ffbe4150 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x5586ffbe4130 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x5586ffbe3fe0 'type'
|     `-SubstTemplateTypeParmType 0x5586ffbe3e00 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x5586ff8bad60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8bad08 'T'
|       `-RecordType 0x5586ffbe3950 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x5586ffbe3868 'sized_array_memory'
|-FieldDecl 0x5586ffbf0140 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x5586ffbf0190 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x5586ffbf01c8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|   |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|   `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf0258 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x5586ffbf0220 'int &'
|   `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|     |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|     `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf0318 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x5586ffbf02e0 'const int &'
|   `-QualType 0x5586ffbe2ee1 'const int' const
|     `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf03a8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x5586ffbf0370 'int *'
|   `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|     |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|     `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf0438 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x5586ffbf0400 'const int *'
|   `-QualType 0x5586ffbe2ee1 'const int' const
|     `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf1020 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x5586ffbf0fd0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x5586ffbf0fb0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x5586ffbf0f40 'type'
|     `-SubstTemplateTypeParmType 0x5586ffbf0d00 'int' sugar
|       |-TemplateTypeParmType 0x5586ff8c5b60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8c5b10 'T'
|       `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf1088 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x5586ffbf02e0 'const int &'
|   `-QualType 0x5586ffbe2ee1 'const int' const
|     `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf10e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf1148 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x5586ffbf0370 'int *'
|   `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|     |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|     `-BuiltinType 0x5586ff5f5580 'int'
|-TypedefDecl 0x5586ffbf11b0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x5586ffbf0400 'const int *'
|   `-QualType 0x5586ffbe2ee1 'const int' const
|     `-SubstTemplateTypeParmType 0x5586ffbe2ee0 'int' sugar
|       |-TemplateTypeParmType 0x5586ff8f2a50 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x5586ff8f29f8 'T'
|       `-BuiltinType 0x5586ff5f5580 'int'
|-EnumDecl 0x5586ffbf1208 <line:134:5> col:5
| `-EnumConstantDecl 0x5586ffbf1300 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x5586ffbf12e0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x5586ff8f40d8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x5586ff8f40b0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x5586ff8f4090 <col:40> 'int' 1
|-CXXConstructorDecl 0x5586ffbf1388 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x5586ffbf15d8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffbf1440 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586ffbf14e0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x5586ffbf1898 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x5586ffbf1780 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x5586ffbf1b58 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x5586ffbf1a40 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x5586ffbf1ea0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x5586ffbf1d80 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x5586ffbf21b0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x5586ffbf2090 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x5586ffbf24a0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffbf22e8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586ffbf2360 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5586ffbf25c8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5586ffbf26a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffbf2700 <col:30> Inherited
|-CXXMethodDecl 0x5586ffbf2748 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x5586ffbf27f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffbf2850 <col:30> Inherited
|-CXXMethodDecl 0x5586ffbf2918 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5586ffbf29c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffbf2a20 <col:30> Inherited
|-CXXMethodDecl 0x5586ffbf2a68 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5586ffbf2b18 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffbf2b70 <col:30> Inherited
|-CXXMethodDecl 0x5586ffbf2bb8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5586ffbf2c68 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffbf2cc0 <col:30> Inherited
|-CXXMethodDecl 0x5586ffbf2d08 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5586ffbf2db8 <col:20> Inherited
| `-OptimizeNoneAttr 0x5586ffbf2e10 <col:30> Inherited
|-CXXMethodDecl 0x5586ffbf2e38 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586ffbf2ee8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5586ffbf2f98 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x5586ffbf3158 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffbf3048 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5586ffbf30c0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5586ffbf32a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x5586ffbf3218 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffbf3458 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x5586ffbf3360 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5586ffbf3510 <col:20>
| `-OptimizeNoneAttr 0x5586ffbf3568 <col:30>
|-CXXMethodDecl 0x5586ffbf3688 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x5586ffbf3590 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5586ffbf3740 <col:20>
| `-OptimizeNoneAttr 0x5586ffbf3798 <col:30>
|-CXXMethodDecl 0x5586ffbf3850 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586ffbf37c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffbf3998 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5586ffbf3908 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffbf3ac8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x5586ffbf3bf8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x5586ffbf3cc8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x5586ffbf3d98 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x5586ffbf3ed8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x5586ffbf3e48 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffbf4020 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x5586ffbf3f90 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5586ffbf4168 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x5586ffbf40d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586ffbf4220 <col:48> Inherited "" ""
|-CXXMethodDecl 0x5586ffbf4320 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x5586ffbf4290 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x5586ffbf43d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x5586ffbf4498 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x5586ffbf4598 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x5586ffbf4718 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5586ffbf4658 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x5586ffbf4ed8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x5586ffbf47d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x5586ffbf4e38 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5586ffbf4d38 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x5586ffbf4fb8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5586ffbf5108 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5586ffbf5078 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5586ffbf51c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x5586ffbf5408 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x5586ffbf5280 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5586ffbf52f8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x5586ffbf55c8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x5586ffbf54d8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5586ffbf5818 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x5586ffbf5690 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x5586ffbf5708 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x5586ffbf58d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5586ffbf5b38 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5586ffbf5a40 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x5586ffbf5c08 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffbe0da8 prev 0x5586ffbc2988 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586ffbe0ea0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x5586ffbe0f90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5586ffc07960 <col:16, line:828:9>
|-CXXDestructorDecl 0x5586ffbe1080 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5586ffc07970 <col:25, line:830:9>
|-CXXMethodDecl 0x5586ffbe1180 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x5586ffbe1230 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x5586ffbe12d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5586ffbe12d8
| `-ParmVarDecl 0x5586ffbe13e8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5586ffbe1ba8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5586ffbe1ba8
  `-ParmVarDecl 0x5586ffbe1cb8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffbc2798 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x5586ffbc28f8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5586ffbc2988 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5586ffbc2a40 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5586ffbc2b48 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5586ffbc2a78 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5586ffbf71c8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5586ffbf71a8 <col:31> 'int' 0
|-CXXConstructorDecl 0x5586ffbc2e68 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffbc2ce0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5586ffbc2d58 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5586ffbf7200 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5586ffbf71e0 <col:59> 'int' 0
|-CXXConstructorDecl 0x5586ffbc3040 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffbc2f30 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x5586ffbc2fa8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5586ffbf7238 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5586ffbf7218 <col:55> 'int' 0
|-CXXConstructorDecl 0x5586ffbc33f8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5586ffbc31e0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x5586ffbc3258 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x5586ffbc32d0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x5586ffbf7270 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x5586ffbf7250 <col:31> 'int' 0
|-CXXConstructorDecl 0x5586ffbc35b8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x5586ffbc34f8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x5586ffbc36b0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x5586ffbc3898 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x5586ffbc37a0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5586ffbc3988 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x5586ffbf7620 <col:24, line:291:5>
|   `-ReturnStmt 0x5586ffbf7610 <line:290:9, col:79>
|     `-BinaryOperator 0x5586ffbf75f0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x5586ffbf74c8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x5586ffbf7420 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x5586ffbf7400 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x5586ffbf72f8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x5586ffbf72e0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x5586ffbf72c8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x5586ffbf7298 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5586ffbe2bd0
|       | |   |       `-CXXThisExpr 0x5586ffbf7288 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x5586ffbf73e8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x5586ffbf73d0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x5586ffbf7398 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x5586ffbf7368 <col:28, col:35> '<bound member function type>' ->size 0x5586ffba38e8
|       | |           `-ImplicitCastExpr 0x5586ffbf73b8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x5586ffbf7350 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x5586ffbf7320 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5586ffbe2bd0
|       | |                 `-CXXThisExpr 0x5586ffbf7310 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x5586ffbf74b0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x5586ffbf7498 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5586ffbf7480 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5586ffbf7450 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5586ffbf5d50
|       |         `-CXXThisExpr 0x5586ffbf7440 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x5586ffbf75d0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x5586ffbf75b8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5586ffbf75a0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5586ffbf7560 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5586ffbf7548 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5586ffbf74f8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5586ffbf5e00
|         |     |   `-CXXThisExpr 0x5586ffbf74e8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5586ffbf7528 <col:73> 'int' 0
|         `-IntegerLiteral 0x5586ffbf7580 <col:79> 'int' 0
|-CXXMethodDecl 0x5586ffbc3a48 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x5586ffbf77f8 <col:32, line:296:5>
|   `-ReturnStmt 0x5586ffbf77e8 <line:295:9, col:49>
|     `-BinaryOperator 0x5586ffbf77c8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x5586ffbf76a8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x5586ffbf7690 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5586ffbf7678 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5586ffbf7648 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5586ffbf5d50
|       |       `-CXXThisExpr 0x5586ffbf7638 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x5586ffbf77a8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x5586ffbf7790 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5586ffbf7778 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5586ffbf7738 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5586ffbf7720 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x5586ffbf76d0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x5586ffbf5e00
|         |     |   `-CXXThisExpr 0x5586ffbf76c0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x5586ffbf7700 <col:43> 'int' 0
|         `-IntegerLiteral 0x5586ffbf7758 <col:49> 'int' 0
|-CXXMethodDecl 0x5586ffbc3b38 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x5586ffbf9370 <col:19, line:306:5>
|   |-IfStmt 0x5586ffbf7928 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5586ffbf7868 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5586ffbf7850 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x5586ffbf7820 <col:13> 'Vector<String> *' lvalue ->_conf 0x5586ffbe2bd0
|   | |     `-CXXThisExpr 0x5586ffbf7810 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x5586ffbf7908 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x5586ffbf78d8 <col:13, col:20> '<bound member function type>' ->clear 0x5586ffba62e8
|   |     `-ImplicitCastExpr 0x5586ffbf78c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x5586ffbf7890 <col:13> 'Vector<String> *' lvalue ->_conf 0x5586ffbe2bd0
|   |         `-CXXThisExpr 0x5586ffbf7880 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x5586ffbf79b0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5586ffbf7980 <col:9, col:16> '<bound member function type>' .clear 0x5586ffbf58d8
|   |   `-MemberExpr 0x5586ffbf7950 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x5586ffbf5cf0
|   |     `-CXXThisExpr 0x5586ffbf7940 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x5586ffbf9360 <line:305:9, col:17>
|     `-UnaryOperator 0x5586ffbf79e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffbf79d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x5586ffbc3db8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x5586ffbc3cc0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x5586ffbc3f38 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x5586ffbc3e70 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x5586ffbc42b8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x5586ffbc3fe0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x5586ffbc4218 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x5586ffbc4088 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x5586ffbc4100 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x5586ffbf9690 <col:67, line:327:5>
|     |-WhileStmt 0x5586ffbf9640 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5586ffbf9458 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x5586ffbf93d8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5586ffb14638 0x5586ff95dc18 0x5586ff95d8f0 0x5586ff94e0c0 0x5586ff94dd70 0x5586ff94d660 0x5586ff91ffd0 0x5586ff8ad4a0
|     | | |-DeclRefExpr 0x5586ffbf9398 <col:16> 'Iter' lvalue ParmVar 0x5586ffbc4088 'begin' 'Iter'
|     | | `-DeclRefExpr 0x5586ffbf93b8 <col:25> 'Iter' lvalue ParmVar 0x5586ffbc4100 'end' 'Iter'
|     | `-CompoundStmt 0x5586ffbf9620 <col:30, line:325:9>
|     |   |-CallExpr 0x5586ffbf95c0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x5586ffbf94a0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x5586ffbf9590 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x5586ffbf9520 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|     |   |   `-DeclRefExpr 0x5586ffbf9500 <col:24> 'Iter' lvalue ParmVar 0x5586ffbc4088 'begin' 'Iter'
|     |   `-UnaryOperator 0x5586ffbf9608 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x5586ffbf95e8 <col:15> 'Iter' lvalue ParmVar 0x5586ffbc4088 'begin' 'Iter'
|     `-ReturnStmt 0x5586ffbf9680 <line:326:9, col:17>
|       `-UnaryOperator 0x5586ffbf9668 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbf9658 <col:17> 'Args *' this
|-CXXMethodDecl 0x5586ffbc43c0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x5586ffbc4330 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x5586ffbc4508 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5586ffbc4478 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x5586ffbc45d0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5586ffbf9770 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x5586ffbf9710 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x5586ffbf96c0 <col:9> '<bound member function type>' ->reset_from 0x5586ffbf6178
|   | | `-CXXThisExpr 0x5586ffbf96b0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x5586ffbf96f0 <col:20> 'int' 0
|   `-ReturnStmt 0x5586ffbf9760 <line:352:9, col:17>
|     `-UnaryOperator 0x5586ffbf9748 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffbf9738 <col:17> 'Args *' this
|-VarDecl 0x5586ffbc4688 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x5586ffbc46f0 <col:38> 'int' 1
|-VarDecl 0x5586ffbc4780 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x5586ffbc47e8 <col:39> 'int' 2
|-VarDecl 0x5586ffbc4878 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x5586ffbc48e0 <col:39> 'int' 4
|-VarDecl 0x5586ffbc4970 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x5586ffbc49d8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5586ffbc4d58 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5586ffbc4a50 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbc4cb8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5586ffbc4b00 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc4ba8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbf98c8 <col:43, line:371:5>
|     `-ReturnStmt 0x5586ffbf98b8 <line:370:9, col:34>
|       `-CallExpr 0x5586ffbf9880 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbf97a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbf9820 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc4b00 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbf9840 <col:30> 'int' 0
|         `-DeclRefExpr 0x5586ffbf9860 <col:33> 'T' lvalue ParmVar 0x5586ffbc4ba8 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc5088 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x5586ffbc4dc0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbc4fe8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5586ffbc4e70 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc4f18 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbf9a18 <col:45, line:375:5>
|     `-ReturnStmt 0x5586ffbf9a08 <line:374:9, col:42>
|       `-CallExpr 0x5586ffbf99d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbf98f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbf9970 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc4e70 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbf9990 <col:30> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int'
|         `-DeclRefExpr 0x5586ffbf99b0 <col:41> 'T' lvalue ParmVar 0x5586ffbc4f18 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc53b8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x5586ffbc50f0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5586ffbc5318 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x5586ffbc51a0 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5586ffbc5248 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x5586ffbf9b68 <col:45, line:379:5>
| |   `-ReturnStmt 0x5586ffbf9b58 <line:378:9, col:43>
| |     `-CallExpr 0x5586ffbf9b20 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x5586ffbf9a40 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x5586ffbf9ac0 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc51a0 'keyword' 'const char *'
| |       |-DeclRefExpr 0x5586ffbf9ae0 <col:30> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int'
| |       `-DeclRefExpr 0x5586ffbf9b00 <col:42> 'T' lvalue ParmVar 0x5586ffbc5248 'x' 'T &'
| `-CXXMethodDecl 0x5586ffc3db98 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5586ffc3d9b8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x5586ffc3da88 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x5586ffbc56e8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x5586ffbc5420 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbc5648 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x5586ffbc54d0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc5578 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbf9d68 <col:46, line:383:5>
|     `-ReturnStmt 0x5586ffbf9d58 <line:382:9, col:55>
|       `-CallExpr 0x5586ffbf9d20 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbf9b90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbf9c10 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc54d0 'keyword' 'const char *'
|         |-BinaryOperator 0x5586ffbf9ce0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5586ffbf9c90 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5586ffbf9c70 <col:30> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5586ffbf9cc8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5586ffbf9ca8 <col:42> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5586ffbf9d00 <col:54> 'T' lvalue ParmVar 0x5586ffbc5578 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc5ae8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5586ffbc5750 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbc5a48 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x5586ffbc5800 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc5880 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbc5928 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbf9ea8 <col:54, line:388:5>
|     |-CallExpr 0x5586ffbf9e30 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbf9d80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5586ffbf9dc0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbf9dd0 <col:30> 'const char *' lvalue ParmVar 0x5586ffbc5800 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586ffbf9df0 <col:39> 'int' lvalue ParmVar 0x5586ffbc5880 'flags' 'int'
|     | `-DeclRefExpr 0x5586ffbf9e10 <col:46> 'T' lvalue ParmVar 0x5586ffbc5928 'x' 'T &'
|     `-ReturnStmt 0x5586ffbf9e98 <line:387:9, col:17>
|       `-UnaryOperator 0x5586ffbf9e80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbf9e70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbc5f98 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5586ffbc5b58 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5586ffbc5bd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5586ffbc5ef8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbc5c98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc5d38 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbc5dd8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586ffbfa018 <col:74, line:403:5>
|     `-ReturnStmt 0x5586ffbfa008 <line:402:9, col:56>
|       `-CallExpr 0x5586ffbf9fc8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbf9ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbf9f48 <col:28> 'const char *' lvalue ParmVar 0x5586ffbc5c98 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbf9f68 <col:37> 'int' 0
|         |-DeclRefExpr 0x5586ffbf9f88 <col:40> 'T' lvalue ParmVar 0x5586ffbc5d38 'x' 'T &'
|         `-DeclRefExpr 0x5586ffbf9fa8 <col:43> 'const V' lvalue ParmVar 0x5586ffbc5dd8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5586ffbc6408 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5586ffbc6008 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5586ffbc6088 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5586ffbc6368 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbc6148 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc61e8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbc6288 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586ffbfa180 <col:76, line:407:5>
|     `-ReturnStmt 0x5586ffbfa170 <line:406:9, col:65>
|       `-CallExpr 0x5586ffbfa130 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfa040 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfa0b0 <col:28> 'const char *' lvalue ParmVar 0x5586ffbc6148 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfa0d0 <col:37> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int'
|         |-DeclRefExpr 0x5586ffbfa0f0 <col:49> 'T' lvalue ParmVar 0x5586ffbc61e8 'x' 'T &'
|         `-DeclRefExpr 0x5586ffbfa110 <col:52> 'const V' lvalue ParmVar 0x5586ffbc6288 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5586ffbc6958 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5586ffbc6478 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5586ffbc64f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5586ffbc68b8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbc65b8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc6638 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbc66d8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbc6778 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586ffbfa2e8 <col:85, line:412:5>
|     |-CallExpr 0x5586ffbfa268 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfa198 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5586ffbfa1d8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfa1e8 <col:37> 'const char *' lvalue ParmVar 0x5586ffbc65b8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586ffbfa208 <col:46> 'int' lvalue ParmVar 0x5586ffbc6638 'flags' 'int'
|     | |-DeclRefExpr 0x5586ffbfa228 <col:53> 'T' lvalue ParmVar 0x5586ffbc66d8 'x' 'T &'
|     | `-DeclRefExpr 0x5586ffbfa248 <col:56> 'const V' lvalue ParmVar 0x5586ffbc6778 'default_value' 'const V &'
|     `-ReturnStmt 0x5586ffbfa2d8 <line:411:9, col:17>
|       `-UnaryOperator 0x5586ffbfa2c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfa2b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbc6de8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x5586ffbc69d0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc6a48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbc6d48 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbc6b08 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc6b80 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc6c28 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfa468 <col:53, line:425:5>
|     `-ReturnStmt 0x5586ffbfa458 <line:424:9, col:42>
|       `-CallExpr 0x5586ffbfa418 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfa318 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfa398 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc6b08 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfa3b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x5586ffbfa3d8 <col:33> 'P' lvalue ParmVar 0x5586ffbc6b80 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfa3f8 <col:41> 'T' lvalue ParmVar 0x5586ffbc6c28 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc7238 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x5586ffbc6e58 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc6ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbc7198 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbc6f98 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc7010 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc70b8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfa5e0 <col:55, line:429:5>
|     `-ReturnStmt 0x5586ffbfa5d0 <line:428:9, col:50>
|       `-CallExpr 0x5586ffbfa590 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfa490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfa510 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc6f98 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfa530 <col:30> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int'
|         |-DeclRefExpr 0x5586ffbfa550 <col:41> 'P' lvalue ParmVar 0x5586ffbc7010 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfa570 <col:49> 'T' lvalue ParmVar 0x5586ffbc70b8 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc7688 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x5586ffbc72a8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc7328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbc75e8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbc73e8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc7460 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc7508 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfa758 <col:55, line:433:5>
|     `-ReturnStmt 0x5586ffbfa748 <line:432:9, col:51>
|       `-CallExpr 0x5586ffbfa708 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfa608 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfa688 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc73e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfa6a8 <col:30> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int'
|         |-DeclRefExpr 0x5586ffbfa6c8 <col:42> 'P' lvalue ParmVar 0x5586ffbc7460 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfa6e8 <col:50> 'T' lvalue ParmVar 0x5586ffbc7508 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc7ad8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x5586ffbc76f8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc7778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbc7a38 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbc7838 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc78b0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc7958 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfa980 <col:56, line:437:5>
|     `-ReturnStmt 0x5586ffbfa970 <line:436:9, col:63>
|       `-CallExpr 0x5586ffbfa930 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfa780 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfa800 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc7838 'keyword' 'const char *'
|         |-BinaryOperator 0x5586ffbfa8d0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5586ffbfa880 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5586ffbfa860 <col:30> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5586ffbfa8b8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5586ffbfa898 <col:42> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5586ffbfa8f0 <col:54> 'P' lvalue ParmVar 0x5586ffbc78b0 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfa910 <col:62> 'T' lvalue ParmVar 0x5586ffbc7958 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbc8008 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5586ffbc7b48 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc7bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbc7f68 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5586ffbc7c88 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc7d08 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbc7d80 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc7e28 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfaae8 <col:64, line:442:5>
|     |-CallExpr 0x5586ffbfaa68 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfa998 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5586ffbfa9d8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfa9e8 <col:30> 'const char *' lvalue ParmVar 0x5586ffbc7c88 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586ffbfaa08 <col:39> 'int' lvalue ParmVar 0x5586ffbc7d08 'flags' 'int'
|     | |-DeclRefExpr 0x5586ffbfaa28 <col:46> 'P' lvalue ParmVar 0x5586ffbc7d80 'parser' 'P'
|     | `-DeclRefExpr 0x5586ffbfaa48 <col:54> 'T' lvalue ParmVar 0x5586ffbc7e28 'x' 'T &'
|     `-ReturnStmt 0x5586ffbfaad8 <line:441:9, col:17>
|       `-UnaryOperator 0x5586ffbfaac0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfaab0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbc8608 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x5586ffbc8080 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc80f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5586ffbc8178 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5586ffbc8568 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbc8240 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc82b8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc8358 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbc8428 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586ffbfac80 <col:84, line:458:5>
|     `-ReturnStmt 0x5586ffbfac70 <line:457:9, col:64>
|       `-CallExpr 0x5586ffbfac28 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfab18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfab88 <col:28> 'const char *' lvalue ParmVar 0x5586ffbc8240 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfaba8 <col:37> 'int' 0
|         |-DeclRefExpr 0x5586ffbfabc8 <col:40> 'P' lvalue ParmVar 0x5586ffbc82b8 'parser' 'P'
|         |-DeclRefExpr 0x5586ffbfabe8 <col:48> 'T' lvalue ParmVar 0x5586ffbc8358 'x' 'T &'
|         `-DeclRefExpr 0x5586ffbfac08 <col:51> 'const V' lvalue ParmVar 0x5586ffbc8428 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5586ffbc8b88 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5586ffbc8680 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc86f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5586ffbc8778 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5586ffbc8ae8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbc8840 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc88b8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc8958 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbc89f8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586ffbfae10 <col:86, line:462:5>
|     `-ReturnStmt 0x5586ffbfae00 <line:461:9, col:73>
|       `-CallExpr 0x5586ffbfadb8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfaca8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfad18 <col:28> 'const char *' lvalue ParmVar 0x5586ffbc8840 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfad38 <col:37> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int'
|         |-DeclRefExpr 0x5586ffbfad58 <col:49> 'P' lvalue ParmVar 0x5586ffbc88b8 'parser' 'P'
|         |-DeclRefExpr 0x5586ffbfad78 <col:57> 'T' lvalue ParmVar 0x5586ffbc8958 'x' 'T &'
|         `-DeclRefExpr 0x5586ffbfad98 <col:60> 'const V' lvalue ParmVar 0x5586ffbc89f8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5586ffbc91e8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x5586ffbc8c00 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc8c78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5586ffbc8cf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5586ffbc9148 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbc8dc0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc8e40 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbc8eb8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc8f58 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbc8ff8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x5586ffbfafa0 <col:95, line:467:5>
|     |-CallExpr 0x5586ffbfaf18 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfae28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x5586ffbfae68 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfae78 <col:37> 'const char *' lvalue ParmVar 0x5586ffbc8dc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586ffbfae98 <col:46> 'int' lvalue ParmVar 0x5586ffbc8e40 'flags' 'int'
|     | |-DeclRefExpr 0x5586ffbfaeb8 <col:53> 'P' lvalue ParmVar 0x5586ffbc8eb8 'parser' 'P'
|     | |-DeclRefExpr 0x5586ffbfaed8 <col:61> 'T' lvalue ParmVar 0x5586ffbc8f58 'x' 'T &'
|     | `-DeclRefExpr 0x5586ffbfaef8 <col:64> 'const V' lvalue ParmVar 0x5586ffbc8ff8 'default_value' 'const V &'
|     `-ReturnStmt 0x5586ffbfaf90 <line:466:9, col:17>
|       `-UnaryOperator 0x5586ffbfaf78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfaf68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbc97c8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x5586ffbc9268 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc92e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586ffbc9368 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586ffbc9728 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5586ffbc9430 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc94a8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc9548 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5586ffbc95e8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586ffbfb148 <col:63, line:481:5>
|     `-ReturnStmt 0x5586ffbfb138 <line:480:9, col:47>
|       `-CallExpr 0x5586ffbfb0f0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfafd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfb050 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc9430 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfb070 <col:30> 'int' 0
|         |-DeclRefExpr 0x5586ffbfb090 <col:33> 'P' lvalue ParmVar 0x5586ffbc94a8 'parser' 'P'
|         |-DeclRefExpr 0x5586ffbfb0b0 <col:41> 'T1' lvalue ParmVar 0x5586ffbc9548 'x1' 'T1 &'
|         `-DeclRefExpr 0x5586ffbfb0d0 <col:45> 'T2' lvalue ParmVar 0x5586ffbc95e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5586ffbc9d48 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5586ffbc9840 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc98b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586ffbc9938 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586ffbc9ca8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5586ffbc9a00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc9a78 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbc9b18 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5586ffbc9bb8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586ffbfb2e8 <col:65, line:485:5>
|     `-ReturnStmt 0x5586ffbfb2d8 <line:484:9, col:55>
|       `-CallExpr 0x5586ffbfb290 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfb170 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfb1f0 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc9a00 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfb210 <col:30> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int'
|         |-DeclRefExpr 0x5586ffbfb230 <col:41> 'P' lvalue ParmVar 0x5586ffbc9a78 'parser' 'P'
|         |-DeclRefExpr 0x5586ffbfb250 <col:49> 'T1' lvalue ParmVar 0x5586ffbc9b18 'x1' 'T1 &'
|         `-DeclRefExpr 0x5586ffbfb270 <col:53> 'T2' lvalue ParmVar 0x5586ffbc9bb8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5586ffbca2c8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x5586ffbc9dc0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbc9e38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586ffbc9eb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586ffbca228 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5586ffbc9f80 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbc9ff8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbca098 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5586ffbca138 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586ffbfb488 <col:65, line:489:5>
|     `-ReturnStmt 0x5586ffbfb478 <line:488:9, col:56>
|       `-CallExpr 0x5586ffbfb430 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfb310 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfb390 <col:21> 'const char *' lvalue ParmVar 0x5586ffbc9f80 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfb3b0 <col:30> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int'
|         |-DeclRefExpr 0x5586ffbfb3d0 <col:42> 'P' lvalue ParmVar 0x5586ffbc9ff8 'parser' 'P'
|         |-DeclRefExpr 0x5586ffbfb3f0 <col:50> 'T1' lvalue ParmVar 0x5586ffbca098 'x1' 'T1 &'
|         `-DeclRefExpr 0x5586ffbfb410 <col:54> 'T2' lvalue ParmVar 0x5586ffbca138 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5586ffbcfd88 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x5586ffbca340 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbca3b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586ffbca438 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586ffbcfce8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5586ffbcfa40 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbcfab8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbcfb58 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5586ffbcfbf8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586ffbfb6d8 <col:66, line:493:5>
|     `-ReturnStmt 0x5586ffbfb6c8 <line:492:9, col:68>
|       `-CallExpr 0x5586ffbfb680 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfb4b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfb530 <col:21> 'const char *' lvalue ParmVar 0x5586ffbcfa40 'keyword' 'const char *'
|         |-BinaryOperator 0x5586ffbfb600 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5586ffbfb5b0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5586ffbfb590 <col:30> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5586ffbfb5e8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5586ffbfb5c8 <col:42> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x5586ffbfb620 <col:54> 'P' lvalue ParmVar 0x5586ffbcfab8 'parser' 'P'
|         |-DeclRefExpr 0x5586ffbfb640 <col:62> 'T1' lvalue ParmVar 0x5586ffbcfb58 'x1' 'T1 &'
|         `-DeclRefExpr 0x5586ffbfb660 <col:66> 'T2' lvalue ParmVar 0x5586ffbcfbf8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5586ffbd03e8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x5586ffbcfe00 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbcfe78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586ffbcfef8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586ffbd0348 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5586ffbcffc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd0040 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd00b8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd0158 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x5586ffbd01f8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5586ffbfb868 <col:74, line:498:5>
|     |-CallExpr 0x5586ffbfb7e0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfb6f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5586ffbfb730 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfb740 <col:30> 'const char *' lvalue ParmVar 0x5586ffbcffc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586ffbfb760 <col:39> 'int' lvalue ParmVar 0x5586ffbd0040 'flags' 'int'
|     | |-DeclRefExpr 0x5586ffbfb780 <col:46> 'P' lvalue ParmVar 0x5586ffbd00b8 'parser' 'P'
|     | |-DeclRefExpr 0x5586ffbfb7a0 <col:54> 'T1' lvalue ParmVar 0x5586ffbd0158 'x1' 'T1 &'
|     | `-DeclRefExpr 0x5586ffbfb7c0 <col:58> 'T2' lvalue ParmVar 0x5586ffbd01f8 'x2' 'T2 &'
|     `-ReturnStmt 0x5586ffbfb858 <line:497:9, col:17>
|       `-UnaryOperator 0x5586ffbfb840 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfb830 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbd0748 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x5586ffbd0468 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd06a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586ffbd0520 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd0598 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfb9b0 <col:52, line:509:5>
|     `-ReturnStmt 0x5586ffbfb9a0 <line:508:9, col:44>
|       `-CallExpr 0x5586ffbfb968 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfb898 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfb908 <col:26> 'const char *' lvalue ParmVar 0x5586ffbd0520 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfb928 <col:35> 'int' 0
|         `-DeclRefExpr 0x5586ffbfb948 <col:38> 'P' lvalue ParmVar 0x5586ffbd0598 'parser' 'P'
|-FunctionTemplateDecl 0x5586ffbd0a48 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x5586ffbd07b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd09a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586ffbd0860 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd08d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfbaf0 <col:54, line:513:5>
|     `-ReturnStmt 0x5586ffbfbae0 <line:512:9, col:52>
|       `-CallExpr 0x5586ffbfbaa8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfb9d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfba48 <col:26> 'const char *' lvalue ParmVar 0x5586ffbd0860 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfba68 <col:35> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int'
|         `-DeclRefExpr 0x5586ffbfba88 <col:46> 'P' lvalue ParmVar 0x5586ffbd08d8 'parser' 'P'
|-FunctionTemplateDecl 0x5586ffbd0d48 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x5586ffbd0ab0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd0ca8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586ffbd0b60 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd0bd8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfbc30 <col:54, line:517:5>
|     `-ReturnStmt 0x5586ffbfbc20 <line:516:9, col:53>
|       `-CallExpr 0x5586ffbfbbe8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfbb18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfbb88 <col:26> 'const char *' lvalue ParmVar 0x5586ffbd0b60 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfbba8 <col:35> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int'
|         `-DeclRefExpr 0x5586ffbfbbc8 <col:47> 'P' lvalue ParmVar 0x5586ffbd0bd8 'parser' 'P'
|-FunctionTemplateDecl 0x5586ffbd1048 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x5586ffbd0db0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd0fa8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586ffbd0e60 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd0ed8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfbe20 <col:55, line:521:5>
|     `-ReturnStmt 0x5586ffbfbe10 <line:520:9, col:65>
|       `-CallExpr 0x5586ffbfbdd8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfbc58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfbcc8 <col:26> 'const char *' lvalue ParmVar 0x5586ffbd0e60 'keyword' 'const char *'
|         |-BinaryOperator 0x5586ffbfbd98 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5586ffbfbd48 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5586ffbfbd28 <col:35> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5586ffbfbd80 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5586ffbfbd60 <col:47> 'const int' lvalue Var 0x5586ffbc4780 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x5586ffbfbdb8 <col:59> 'P' lvalue ParmVar 0x5586ffbd0ed8 'parser' 'P'
|-FunctionTemplateDecl 0x5586ffbd1418 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x5586ffbd10b0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd1378 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5586ffbd1160 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd11e0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd1258 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfbf60 <col:63, line:526:5>
|     |-CallExpr 0x5586ffbfbee8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfbe38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x5586ffbfbe78 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfbe88 <col:35> 'const char *' lvalue ParmVar 0x5586ffbd1160 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5586ffbfbea8 <col:44> 'int' lvalue ParmVar 0x5586ffbd11e0 'flags' 'int'
|     | `-DeclRefExpr 0x5586ffbfbec8 <col:51> 'P' lvalue ParmVar 0x5586ffbd1258 'parser' 'P'
|     `-ReturnStmt 0x5586ffbfbf50 <line:525:9, col:17>
|       `-UnaryOperator 0x5586ffbfbf38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfbf28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbd1868 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x5586ffbd1488 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd1508 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd17c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbd15c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd1640 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd16e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfc0b8 <col:58, line:541:5>
|     `-ReturnStmt 0x5586ffbfc0a8 <line:540:9, col:39>
|       `-CallExpr 0x5586ffbfc070 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfbf90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc010 <col:21> 'const char *' lvalue ParmVar 0x5586ffbd15c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfc030 <col:30> 'P' lvalue ParmVar 0x5586ffbd1640 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfc050 <col:38> 'T' lvalue ParmVar 0x5586ffbd16e8 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd1cb8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5586ffbd18d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd1958 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd1c18 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbd1a18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd1a90 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd1b38 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfc1f0 <col:60, line:545:5>
|     `-ReturnStmt 0x5586ffbfc1e0 <line:544:9, col:41>
|       `-CallExpr 0x5586ffbfc1a8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfc0e0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc148 <col:23> 'const char *' lvalue ParmVar 0x5586ffbd1a18 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfc168 <col:32> 'P' lvalue ParmVar 0x5586ffbd1a90 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfc188 <col:40> 'T' lvalue ParmVar 0x5586ffbd1b38 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd2108 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x5586ffbd1d28 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd1da8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd2068 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbd1e68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd1ee0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd1f88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfc328 <col:60, line:549:5>
|     `-ReturnStmt 0x5586ffbfc318 <line:548:9, col:41>
|       `-CallExpr 0x5586ffbfc2e0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfc218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc280 <col:23> 'const char *' lvalue ParmVar 0x5586ffbd1e68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfc2a0 <col:32> 'P' lvalue ParmVar 0x5586ffbd1ee0 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfc2c0 <col:40> 'T' lvalue ParmVar 0x5586ffbd1f88 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd2558 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x5586ffbd2178 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd21f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd24b8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbd22b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd2330 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd23d8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfc460 <col:61, line:553:5>
|     `-ReturnStmt 0x5586ffbfc450 <line:552:9, col:42>
|       `-CallExpr 0x5586ffbfc418 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfc350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc3b8 <col:24> 'const char *' lvalue ParmVar 0x5586ffbd22b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfc3d8 <col:33> 'P' lvalue ParmVar 0x5586ffbd2330 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfc3f8 <col:41> 'T' lvalue ParmVar 0x5586ffbd23d8 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd2a38 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5586ffbd25c8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd2648 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd2998 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5586ffbd2708 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd2788 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd2800 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd28a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfc5d8 <col:69, line:557:5>
|     `-ReturnStmt 0x5586ffbfc5c8 <line:556:9, col:46>
|       `-CallExpr 0x5586ffbfc588 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfc488 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc508 <col:21> 'const char *' lvalue ParmVar 0x5586ffbd2708 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfc528 <col:30> 'int' lvalue ParmVar 0x5586ffbd2788 'flags' 'int'
|         |-DeclRefExpr 0x5586ffbfc548 <col:37> 'P' lvalue ParmVar 0x5586ffbd2800 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfc568 <col:45> 'T' lvalue ParmVar 0x5586ffbd28a8 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd2d48 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5586ffbd2ab0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd2ca8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x5586ffbd2b60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd2bd8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfc718 <col:56, line:571:5>
|     `-ReturnStmt 0x5586ffbfc708 <line:570:9, col:48>
|       `-CallExpr 0x5586ffbfc6d0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfc600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc670 <col:30> 'const char *' lvalue ParmVar 0x5586ffbd2b60 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfc690 <col:39> 'int' 0
|         `-DeclRefExpr 0x5586ffbfc6b0 <col:42> 'P' lvalue ParmVar 0x5586ffbd2bd8 'parser' 'P'
|-FunctionTemplateDecl 0x5586ffbd30d8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5586ffbd2db0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbd3038 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x5586ffbd2e60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd2ee0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd2f58 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5586ffbfc8e8 <col:67, line:576:5>
|     |-CallExpr 0x5586ffbfc870 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfc730 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5586ffbfc770 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfc780 <col:39> 'const char *' lvalue ParmVar 0x5586ffbd2e60 'keyword' 'const char *'
|     | |-BinaryOperator 0x5586ffbfc830 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5586ffbfc7e0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5586ffbfc7a0 <col:48> 'int' lvalue ParmVar 0x5586ffbd2ee0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5586ffbfc818 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5586ffbfc7f8 <col:56> 'const int' lvalue Var 0x5586ffbc4970 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x5586ffbfc850 <col:68> 'P' lvalue ParmVar 0x5586ffbd2f58 'parser' 'P'
|     `-ReturnStmt 0x5586ffbfc8d8 <line:575:9, col:17>
|       `-UnaryOperator 0x5586ffbfc8c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfc8b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbd3528 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x5586ffbd3148 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd31c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd3488 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5586ffbd3288 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd3300 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd33a8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfca58 <col:62, line:592:5>
|     `-ReturnStmt 0x5586ffbfca48 <line:591:9, col:51>
|       `-CallExpr 0x5586ffbfca08 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfc918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfc988 <col:30> 'const char *' lvalue ParmVar 0x5586ffbd3288 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfc9a8 <col:39> 'int' 0
|         |-DeclRefExpr 0x5586ffbfc9c8 <col:42> 'P' lvalue ParmVar 0x5586ffbd3300 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfc9e8 <col:50> 'T' lvalue ParmVar 0x5586ffbd33a8 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd3a08 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5586ffbd3598 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd3618 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd3968 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5586ffbd36d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd3758 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd37d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd3878 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfcc50 <col:73, line:597:5>
|     |-CallExpr 0x5586ffbfcbd0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfca70 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x5586ffbfcab0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfcac0 <col:39> 'const char *' lvalue ParmVar 0x5586ffbd36d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x5586ffbfcb70 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x5586ffbfcb20 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5586ffbfcae0 <col:48> 'int' lvalue ParmVar 0x5586ffbd3758 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5586ffbfcb58 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5586ffbfcb38 <col:56> 'const int' lvalue Var 0x5586ffbc4970 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5586ffbfcb90 <col:68> 'P' lvalue ParmVar 0x5586ffbd37d0 'parser' 'P'
|     | `-DeclRefExpr 0x5586ffbfcbb0 <col:76> 'T' lvalue ParmVar 0x5586ffbd3878 'x' 'T &'
|     `-ReturnStmt 0x5586ffbfcc40 <line:596:9, col:17>
|       `-UnaryOperator 0x5586ffbfcc28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfcc18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbd3fb8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x5586ffbd3a80 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd3af8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd3f18 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5586ffbd3bb8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd3c30 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd3df0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5586ffbfcdc0 <col:65, line:614:5>
|     `-ReturnStmt 0x5586ffbfcdb0 <line:613:9, col:46>
|       `-CallExpr 0x5586ffbfcd70 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfcc80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfccf0 <col:25> 'const char *' lvalue ParmVar 0x5586ffbd3bb8 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfcd10 <col:34> 'int' 0
|         |-DeclRefExpr 0x5586ffbfcd30 <col:37> 'P' lvalue ParmVar 0x5586ffbd3c30 'parser' 'P'
|         `-DeclRefExpr 0x5586ffbfcd50 <col:45> 'Vector<T>' lvalue ParmVar 0x5586ffbd3df0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5586ffbd43e8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x5586ffbd4028 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbd4348 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x5586ffbd40e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd4230 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5586ffbfcfe0 <col:55, line:618:5>
|     `-ReturnStmt 0x5586ffbfcfd0 <line:617:9, col:55>
|       `-CallExpr 0x5586ffbfcf90 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfcde8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfce58 <col:25> 'const char *' lvalue ParmVar 0x5586ffbd40e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x5586ffbfce78 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x5586ffbfcf50 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5586ffbfcf70 <col:54> 'Vector<T>' lvalue ParmVar 0x5586ffbd4230 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5586ffbd49b8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x5586ffbd4450 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd44c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd4918 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5586ffbd4588 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd4608 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd4680 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd47d0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5586ffbfd1d8 <col:76, line:623:5>
|     |-CallExpr 0x5586ffbfd158 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5586ffbfcff8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x5586ffbfd038 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x5586ffbfd048 <col:34> 'const char *' lvalue ParmVar 0x5586ffbd4588 'keyword' 'const char *'
|     | |-BinaryOperator 0x5586ffbfd0f8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x5586ffbfd0a8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x5586ffbfd068 <col:43> 'int' lvalue ParmVar 0x5586ffbd4608 'flags' 'int'
|     | | `-ImplicitCastExpr 0x5586ffbfd0e0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x5586ffbfd0c0 <col:51> 'const int' lvalue Var 0x5586ffbc4970 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x5586ffbfd118 <col:63> 'P' lvalue ParmVar 0x5586ffbd4680 'parser' 'P'
|     | `-DeclRefExpr 0x5586ffbfd138 <col:71> 'Vector<T>' lvalue ParmVar 0x5586ffbd47d0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x5586ffbfd1c8 <line:622:9, col:17>
|       `-UnaryOperator 0x5586ffbfd1b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfd1a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbd4ef8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x5586ffbd4a30 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd4aa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd4e58 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x5586ffbd4b68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd4be8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd4d30 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x5586ffbfd440 <col:66, line:627:5>
|     `-ReturnStmt 0x5586ffbfd430 <line:626:9, col:59>
|       `-CallExpr 0x5586ffbfd3f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5586ffbfd208 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5586ffbfd278 <col:25> 'const char *' lvalue ParmVar 0x5586ffbd4b68 'keyword' 'const char *'
|         |-DeclRefExpr 0x5586ffbfd298 <col:34> 'int' lvalue ParmVar 0x5586ffbd4be8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x5586ffbfd3b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x5586ffbfd3d0 <col:58> 'Vector<T>' lvalue ParmVar 0x5586ffbd4d30 'x' 'Vector<T> &'
|-CXXMethodDecl 0x5586ffbd4f88 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x5586ffbfd4c0 <col:25, line:633:5>
|   `-ReturnStmt 0x5586ffbfd4b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x5586ffbfd498 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5586ffbfd468 <col:16> 'const bool' lvalue ->_status 0x5586ffbe2a38
|         `-CXXThisExpr 0x5586ffbfd458 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5586ffbd5108 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x5586ffbd5040 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x5586ffbfd5a8 <col:27, line:639:5>
|   |-BinaryOperator 0x5586ffbfd550 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5586ffbfd4d8 <col:9> 'bool' lvalue ParmVar 0x5586ffbd5040 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5586ffbfd538 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5586ffbfd508 <col:13> 'bool' lvalue ->_status 0x5586ffbe2a38
|   |     `-CXXThisExpr 0x5586ffbfd4f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5586ffbfd598 <line:638:9, col:17>
|     `-UnaryOperator 0x5586ffbfd580 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffbfd570 <col:17> 'Args *' this
|-CXXMethodDecl 0x5586ffbd5288 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5586ffbd51c8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x5586ffbfd698 <col:39, line:644:5>
|   |-BinaryOperator 0x5586ffbfd640 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5586ffbfd5c8 <col:9> 'bool' lvalue ParmVar 0x5586ffbd51c8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5586ffbfd628 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5586ffbfd5f8 <col:13> 'const bool' lvalue ->_status 0x5586ffbe2a38
|   |     `-CXXThisExpr 0x5586ffbfd5e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5586ffbfd688 <line:643:9, col:17>
|     `-UnaryOperator 0x5586ffbfd670 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffbfd660 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5586ffbd5350 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x5586ffbfd740 <col:30, line:651:5>
|   `-ReturnStmt 0x5586ffbfd730 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x5586ffbfd718 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x5586ffbfd6e8 <col:16> 'bool' lvalue ->_read_status 0x5586ffad8850
|         `-ImplicitCastExpr 0x5586ffbfd6c8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x5586ffbfd6b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5586ffbd5498 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x5586ffbd5408 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x5586ffbfd848 <col:32, line:658:5>
|   |-BinaryOperator 0x5586ffbfd7f0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5586ffbfd758 <col:9> 'bool' lvalue ParmVar 0x5586ffbd5408 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5586ffbfd7d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5586ffbfd7a8 <col:13> 'bool' lvalue ->_read_status 0x5586ffad8850
|   |     `-ImplicitCastExpr 0x5586ffbfd788 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5586ffbfd778 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x5586ffbfd838 <line:657:9, col:17>
|     `-UnaryOperator 0x5586ffbfd820 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffbfd810 <col:17> 'Args *' this
|-CXXMethodDecl 0x5586ffbd55e8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x5586ffbd5558 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x5586ffbfd958 <col:44, line:663:5>
|   |-BinaryOperator 0x5586ffbfd900 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x5586ffbfd868 <col:9> 'bool' lvalue ParmVar 0x5586ffbd5558 'x' 'bool &'
|   | `-ImplicitCastExpr 0x5586ffbfd8e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x5586ffbfd8b8 <col:13> 'bool' lvalue ->_read_status 0x5586ffad8850
|   |     `-ImplicitCastExpr 0x5586ffbfd898 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x5586ffbfd888 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x5586ffbfd948 <line:662:9, col:17>
|     `-UnaryOperator 0x5586ffbfd930 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffbfd920 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5586ffbd56b0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x5586ffbd5778 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x5586ffbd5840 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x5586ffbd5908 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x5586ffbd5c18 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5586ffbd59a8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbd5b78 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x5586ffbd5a88 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfdd10 <col:19, line:706:5>
|     `-IfStmt 0x5586ffbfdce8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x5586ffbfda58 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x5586ffbfdc18 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x5586ffbfdbe8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x5586ffbfdba8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x5586ffbfdab0 <col:42> '<bound member function type>' ->simple_slot 0x5586ffbf6e30
|       |     | `-CXXThisExpr 0x5586ffbfdaa0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x5586ffbfdb48 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x5586ffbfdb00 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x5586ff9626b8
|       |     | `-DeclRefExpr 0x5586ffbfdae0 <col:55> 'T' lvalue ParmVar 0x5586ffbd5a88 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x5586ffbfdb88 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x5586ffbfdcd8 <line:705:13, col:34>
|         `-CallExpr 0x5586ffbfdcb0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x5586ffbfdc38 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x5586ffbfdc90 <col:33> 'T' lvalue ParmVar 0x5586ffbd5a88 'x' 'T &'
|-FunctionTemplateDecl 0x5586ffbd5ee8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x5586ffbd5c78 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbd5e48 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x5586ffbd5d58 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x5586ffbfe0f0 <col:31, line:717:5>
|     |-DeclStmt 0x5586ffbfde50 <line:713:9, col:23>
|     | `-VarDecl 0x5586ffbfdd38 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x5586ffbfde28 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5586ffbfddb0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5586ffbfde08 <col:21> 'T' lvalue ParmVar 0x5586ffbd5d58 'x' 'T &'
|     |-IfStmt 0x5586ffbfe0a0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x5586ffbfdf48 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x5586ffbfe080 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5586ffbfe020 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5586ffbfdfb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|     |   | `-DeclRefExpr 0x5586ffbfdf90 <col:14> 'T *' lvalue Var 0x5586ffbfdd38 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x5586ffbfe060 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x5586ffbfe0d8 <line:716:9, col:16>
|       `-DeclRefExpr 0x5586ffbfe0b8 <col:16> 'T *' lvalue Var 0x5586ffbfdd38 's' 'T *'
|-FunctionTemplateDecl 0x5586ffbd62f8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x5586ffbd5f48 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5586ffbd5fc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5586ffbd6258 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x5586ffbd60a8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x5586ffbd6148 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x5586ffbfe400 <col:37, line:726:5>
|     |-IfStmt 0x5586ffbfe390 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x5586ffbfe3b0 <line:723:13, col:26>
|     | | `-VarDecl 0x5586ffbfe158 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x5586ffbfe248 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x5586ffbfe1d0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x5586ffbfe228 <col:25> 'T' lvalue ParmVar 0x5586ffbd60a8 'x' 'T &'
|     | |-DeclRefExpr 0x5586ffbfe270 <col:16> 'T *' lvalue Var 0x5586ffbfe158 's' 'T *'
|     | `-BinaryOperator 0x5586ffbfe370 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x5586ffbfe320 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x5586ffbfe2b0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|     |   | `-DeclRefExpr 0x5586ffbfe290 <col:14> 'T *' lvalue Var 0x5586ffbfe158 's' 'T *'
|     |   `-DeclRefExpr 0x5586ffbfe350 <col:18> 'const V' lvalue ParmVar 0x5586ffbd6148 'value' 'const V &'
|     `-ReturnStmt 0x5586ffbfe3f0 <line:725:9, col:17>
|       `-UnaryOperator 0x5586ffbfe3d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5586ffbfe3c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x5586ffbd66f8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x5586ffbd6360 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5586ffbd6658 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x5586ffbd6410 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd6490 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd6538 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x5586ffbff220 <col:65, line:737:5>
|     |-DeclStmt 0x5586ffbfe498 <line:732:9, col:26>
|     | `-VarDecl 0x5586ffbfe430 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5586ffbff1e8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x5586ffbff208 <line:733:13, col:58>
|       | `-VarDecl 0x5586ffbfe4c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5586ffbfe6a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5586ffbfe670 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5586ffbfe658 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5586ffbfe638 <col:26, col:58> 'String' (CXXTemporary 0x5586ffbfe638)
|       |           `-CXXMemberCallExpr 0x5586ffbfe5c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5586ffbfe538 <col:26> '<bound member function type>' ->find 0x5586ffbf6448
|       |             | `-CXXThisExpr 0x5586ffbfe528 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5586ffbfe600 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffbfe568 <col:31> 'const char *' lvalue ParmVar 0x5586ffbd6410 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5586ffbfe618 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffbfe588 <col:40> 'int' lvalue ParmVar 0x5586ffbd6490 'flags' 'int'
|       |             `-DeclRefExpr 0x5586ffbfe5a8 <col:47> 'Args::Slot *' lvalue Var 0x5586ffbfe430 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5586ffbfe758 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586ffbfe740 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586ffbfe720 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586ffbfe6f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |       `-ImplicitCastExpr 0x5586ffbfe6d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5586ffbfe6b8 <col:20> 'String' lvalue Var 0x5586ffbfe4c0 'str' 'String'
|       `-CompoundStmt 0x5586ffbff1c8 <col:61, line:736:9>
|         |-DeclStmt 0x5586ffbfec10 <line:734:13, col:76>
|         | `-VarDecl 0x5586ffbfe7a8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5586ffbfebe0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5586ffbfeb50 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5586ffbfeb98 <col:60> 'T' lvalue ParmVar 0x5586ffbd6538 'variable' 'T &'
|         |     `-UnaryOperator 0x5586ffbfebc8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5586ffbfebb8 <col:71> 'Args *' this
|         `-CallExpr 0x5586ffbff198 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x5586ffbfec38 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|           | `-CXXThisExpr 0x5586ffbfec28 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5586ffbff158 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5586ffbfec68 <col:23> 'T *' lvalue Var 0x5586ffbfe7a8 's' 'T *'
|           | `-CallExpr 0x5586ffbff118 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5586ffbfeef0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x5586ffbfeff0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x5586ffbff010 <col:86> 'String' lvalue Var 0x5586ffbfe4c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5586ffbff0c0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5586ffbff050 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|           |   | `-DeclRefExpr 0x5586ffbff030 <col:92> 'T *' lvalue Var 0x5586ffbfe7a8 's' 'T *'
|           |   `-UnaryOperator 0x5586ffbff100 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5586ffbff0f0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x5586ffbff178 <col:103> 'Args::Slot *' lvalue Var 0x5586ffbfe430 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5586ffbd6c48 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5586ffbd6768 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5586ffbd67e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5586ffbd6ba8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbd68a8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd6928 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd69c8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x5586ffbd6a68 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x5586ffc000c0 <col:88, line:745:5>
|     |-DeclStmt 0x5586ffbff2b8 <line:741:9, col:26>
|     | `-VarDecl 0x5586ffbff250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5586ffbff4d8 <line:742:9, col:55>
|     | `-VarDecl 0x5586ffbff2e0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5586ffbff4c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5586ffbff490 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5586ffbff478 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5586ffbff458 <col:22, col:54> 'String' (CXXTemporary 0x5586ffbff458)
|     |           `-CXXMemberCallExpr 0x5586ffbff3e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5586ffbff358 <col:22> '<bound member function type>' ->find 0x5586ffbf6448
|     |             | `-CXXThisExpr 0x5586ffbff348 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5586ffbff420 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5586ffbff388 <col:27> 'const char *' lvalue ParmVar 0x5586ffbd68a8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5586ffbff438 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5586ffbff3a8 <col:36> 'int' lvalue ParmVar 0x5586ffbd6928 'flags' 'int'
|     |             `-DeclRefExpr 0x5586ffbff3c8 <col:43> 'Args::Slot *' lvalue Var 0x5586ffbff250 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5586ffbff8b0 <line:743:9, col:72>
|     | `-VarDecl 0x5586ffbff528 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5586ffbff880 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5586ffbff7f0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5586ffbff838 <col:56> 'T' lvalue ParmVar 0x5586ffbd69c8 'variable' 'T &'
|     |     `-UnaryOperator 0x5586ffbff868 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5586ffbff858 <col:67> 'Args *' this
|     `-CallExpr 0x5586ffc00090 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x5586ffbff8d8 <col:9> '<bound member function type>' ->postparse 0x5586ffbf6658
|       | `-CXXThisExpr 0x5586ffbff8c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5586ffc00050 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5586ffbff908 <col:19> 'T *' lvalue Var 0x5586ffbff528 's' 'T *'
|       | `-ParenExpr 0x5586ffc00030 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x5586ffc00000 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5586ffbfffe8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5586ffbfffd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5586ffbfffb0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5586ffbfff80 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |     |       `-ImplicitCastExpr 0x5586ffbfff68 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5586ffbff928 <col:25> 'String' lvalue Var 0x5586ffbff2e0 'str' 'String'
|       |     |-CallExpr 0x5586ffbffdd8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5586ffbffbb0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x5586ffbffcb0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x5586ffbffcd0 <col:89> 'String' lvalue Var 0x5586ffbff2e0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5586ffbffd80 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5586ffbffd10 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|       |     | | `-DeclRefExpr 0x5586ffbffcf0 <col:95> 'T *' lvalue Var 0x5586ffbff528 's' 'T *'
|       |     | `-UnaryOperator 0x5586ffbffdc0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5586ffbffdb0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x5586ffbfff48 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x5586ffbfff28 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x5586ffbffef8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5586ffbffea8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5586ffbffe38 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|       |         | | `-DeclRefExpr 0x5586ffbffe18 <col:109> 'T *' lvalue Var 0x5586ffbff528 's' 'T *'
|       |         | `-DeclRefExpr 0x5586ffbffed8 <col:113> 'const V' lvalue ParmVar 0x5586ffbd6a68 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5586ffbfff18 <col:120> 'bool' true
|       `-DeclRefExpr 0x5586ffc00070 <col:128> 'Args::Slot *' lvalue Var 0x5586ffbff250 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5586ffbd7178 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5586ffbd6cc0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd6d38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbd70d8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5586ffbd6df8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd6e78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd6ef0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd6f98 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x5586ffc00cb8 <col:75, line:754:5>
|     |-DeclStmt 0x5586ffc00168 <line:749:9, col:26>
|     | `-VarDecl 0x5586ffc00100 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5586ffc00c80 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x5586ffc00ca0 <line:750:13, col:58>
|       | `-VarDecl 0x5586ffc00190 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5586ffc00370 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5586ffc00340 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5586ffc00328 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5586ffc00308 <col:26, col:58> 'String' (CXXTemporary 0x5586ffc00308)
|       |           `-CXXMemberCallExpr 0x5586ffc00298 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5586ffc00208 <col:26> '<bound member function type>' ->find 0x5586ffbf6448
|       |             | `-CXXThisExpr 0x5586ffc001f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5586ffc002d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffc00238 <col:31> 'const char *' lvalue ParmVar 0x5586ffbd6df8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5586ffc002e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffc00258 <col:40> 'int' lvalue ParmVar 0x5586ffbd6e78 'flags' 'int'
|       |             `-DeclRefExpr 0x5586ffc00278 <col:47> 'Args::Slot *' lvalue Var 0x5586ffc00100 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5586ffc00428 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586ffc00410 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586ffc003f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586ffc003c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |       `-ImplicitCastExpr 0x5586ffc003a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5586ffc00388 <col:20> 'String' lvalue Var 0x5586ffc00190 'str' 'String'
|       `-CompoundStmt 0x5586ffc00c60 <col:61, line:753:9>
|         |-DeclStmt 0x5586ffc00800 <line:751:13, col:63>
|         | `-VarDecl 0x5586ffc00478 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x5586ffc007d0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5586ffc00740 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5586ffc00788 <col:47> 'T' lvalue ParmVar 0x5586ffbd6f98 'variable' 'T &'
|         |     `-UnaryOperator 0x5586ffc007b8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5586ffc007a8 <col:58> 'Args *' this
|         `-CallExpr 0x5586ffc00c30 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x5586ffc00828 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|           | `-CXXThisExpr 0x5586ffc00818 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5586ffc00bf0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x5586ffc00858 <col:23> 'T *' lvalue Var 0x5586ffc00478 's' 'T *'
|           | `-CallExpr 0x5586ffc00bb0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5586ffc00a40 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5586ffc00a88 <col:56> 'P' lvalue ParmVar 0x5586ffbd6ef0 'parser' 'P'
|           |   |-DeclRefExpr 0x5586ffc00aa8 <col:64> 'String' lvalue Var 0x5586ffc00190 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5586ffc00b58 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5586ffc00ae8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|           |   | `-DeclRefExpr 0x5586ffc00ac8 <col:70> 'T *' lvalue Var 0x5586ffc00478 's' 'T *'
|           |   `-UnaryOperator 0x5586ffc00b98 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5586ffc00b88 <col:74> 'Args *' this
|           `-DeclRefExpr 0x5586ffc00c10 <col:81> 'Args::Slot *' lvalue Var 0x5586ffc00100 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5586ffbd77d8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x5586ffbd71f0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5586ffbd7268 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x5586ffbd72e8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5586ffbd7738 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x5586ffbd73b0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbd7430 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbd74a8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbd7548 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5586ffbd75e8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5586ffc03d28 <col:98, line:762:5>
|     |-DeclStmt 0x5586ffc00d50 <line:758:9, col:26>
|     | `-VarDecl 0x5586ffc00ce8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5586ffc00f70 <line:759:9, col:55>
|     | `-VarDecl 0x5586ffc00d78 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x5586ffc00f58 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x5586ffc00f28 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x5586ffc00f10 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x5586ffc00ef0 <col:22, col:54> 'String' (CXXTemporary 0x5586ffc00ef0)
|     |           `-CXXMemberCallExpr 0x5586ffc00e80 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x5586ffc00df0 <col:22> '<bound member function type>' ->find 0x5586ffbf6448
|     |             | `-CXXThisExpr 0x5586ffc00de0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x5586ffc00eb8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5586ffc00e20 <col:27> 'const char *' lvalue ParmVar 0x5586ffbd73b0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x5586ffc00ed0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x5586ffc00e40 <col:36> 'int' lvalue ParmVar 0x5586ffbd7430 'flags' 'int'
|     |             `-DeclRefExpr 0x5586ffc00e60 <col:43> 'Args::Slot *' lvalue Var 0x5586ffc00ce8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5586ffc03670 <line:760:9, col:59>
|     | `-VarDecl 0x5586ffc00fc8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5586ffc03640 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5586ffc012d0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x5586ffc01318 <col:43> 'T' lvalue ParmVar 0x5586ffbd7548 'variable' 'T &'
|     |     `-UnaryOperator 0x5586ffc01348 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5586ffc01338 <col:54> 'Args *' this
|     `-CallExpr 0x5586ffc03cf8 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5586ffc03698 <col:9> '<bound member function type>' ->postparse 0x5586ffbf6658
|       | `-CXXThisExpr 0x5586ffc03688 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5586ffc03cb8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5586ffc036c8 <col:19> 'T *' lvalue Var 0x5586ffc00fc8 's' 'T *'
|       | `-ParenExpr 0x5586ffc03c98 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5586ffc03c68 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5586ffc03c50 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5586ffc03c38 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5586ffc03c18 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5586ffc03be8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |     |       `-ImplicitCastExpr 0x5586ffc03bd0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5586ffc036e8 <col:25> 'String' lvalue Var 0x5586ffc00d78 'str' 'String'
|       |     |-CallExpr 0x5586ffc03a40 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5586ffc038d0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5586ffc03918 <col:59> 'P' lvalue ParmVar 0x5586ffbd74a8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5586ffc03938 <col:67> 'String' lvalue Var 0x5586ffc00d78 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5586ffc039e8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5586ffc03978 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|       |     | | `-DeclRefExpr 0x5586ffc03958 <col:73> 'T *' lvalue Var 0x5586ffc00fc8 's' 'T *'
|       |     | `-UnaryOperator 0x5586ffc03a28 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5586ffc03a18 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5586ffc03bb0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5586ffc03b90 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5586ffc03b60 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5586ffc03b10 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5586ffc03aa0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|       |         | | `-DeclRefExpr 0x5586ffc03a80 <col:87> 'T *' lvalue Var 0x5586ffc00fc8 's' 'T *'
|       |         | `-DeclRefExpr 0x5586ffc03b40 <col:91> 'const V' lvalue ParmVar 0x5586ffbd75e8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5586ffc03b80 <col:98> 'bool' true
|       `-DeclRefExpr 0x5586ffc03cd8 <col:106> 'Args::Slot *' lvalue Var 0x5586ffc00ce8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5586ffbdfab8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x5586ffbd7858 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbd78d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5586ffbd7958 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x5586ffbdfa18 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5586ffbdf690 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbdf710 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbdf788 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbdf828 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x5586ffbdf8c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5586ffc04d08 <col:60, line:773:5>
|     |-DeclStmt 0x5586ffc03dd0 <line:767:9, col:26>
|     | `-VarDecl 0x5586ffc03d68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5586ffc04cd0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5586ffc04cf0 <line:768:13, col:58>
|       | `-VarDecl 0x5586ffc03df8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5586ffc03fd8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5586ffc03fa8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5586ffc03f90 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5586ffc03f70 <col:26, col:58> 'String' (CXXTemporary 0x5586ffc03f70)
|       |           `-CXXMemberCallExpr 0x5586ffc03f00 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5586ffc03e70 <col:26> '<bound member function type>' ->find 0x5586ffbf6448
|       |             | `-CXXThisExpr 0x5586ffc03e60 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5586ffc03f38 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffc03ea0 <col:31> 'const char *' lvalue ParmVar 0x5586ffbdf690 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5586ffc03f50 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffc03ec0 <col:40> 'int' lvalue ParmVar 0x5586ffbdf710 'flags' 'int'
|       |             `-DeclRefExpr 0x5586ffc03ee0 <col:47> 'Args::Slot *' lvalue Var 0x5586ffc03d68 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5586ffc04090 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586ffc04078 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586ffc04058 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586ffc04028 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |       `-ImplicitCastExpr 0x5586ffc04010 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5586ffc03ff0 <col:20> 'String' lvalue Var 0x5586ffc03df8 'str' 'String'
|       `-CompoundStmt 0x5586ffc04ca8 <col:61, line:772:9>
|         |-DeclStmt 0x5586ffc043d0 <line:769:13, col:66>
|         | `-VarDecl 0x5586ffc040e8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5586ffc043a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5586ffc04310 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5586ffc04358 <col:49> 'T1' lvalue ParmVar 0x5586ffbdf828 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5586ffc04388 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5586ffc04378 <col:61> 'Args *' this
|         |-DeclStmt 0x5586ffc04740 <line:770:13, col:66>
|         | `-VarDecl 0x5586ffc04458 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5586ffc04710 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5586ffc04680 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5586ffc046c8 <col:49> 'T2' lvalue ParmVar 0x5586ffbdf8c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5586ffc046f8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5586ffc046e8 <col:61> 'Args *' this
|         `-CallExpr 0x5586ffc04c78 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5586ffc04768 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|           | `-CXXThisExpr 0x5586ffc04758 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5586ffc04c38 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5586ffc047d8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5586ffc04798 <col:23> 'T1 *' lvalue Var 0x5586ffc040e8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5586ffc047b8 <col:29> 'T2 *' lvalue Var 0x5586ffc04458 's2' 'T2 *'
|           | `-CallExpr 0x5586ffc04bf0 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5586ffc049c0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5586ffc04a08 <col:63> 'P' lvalue ParmVar 0x5586ffbdf788 'parser' 'P'
|           |   |-DeclRefExpr 0x5586ffc04a28 <col:71> 'String' lvalue Var 0x5586ffc03df8 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5586ffc04ad8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5586ffc04a68 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|           |   | `-DeclRefExpr 0x5586ffc04a48 <col:77> 'T1 *' lvalue Var 0x5586ffc040e8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5586ffc04b98 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5586ffc04b28 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|           |   | `-DeclRefExpr 0x5586ffc04b08 <col:82> 'T2 *' lvalue Var 0x5586ffc04458 's2' 'T2 *'
|           |   `-UnaryOperator 0x5586ffc04bd8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5586ffc04bc8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5586ffc04c58 <col:94> 'Args::Slot *' lvalue Var 0x5586ffc03d68 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5586ffbdfea8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x5586ffbdfb38 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbdfe08 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5586ffbdfbf0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbdfc70 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbdfce8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5586ffc05220 <col:67, line:780:5>
|     |-DeclStmt 0x5586ffc04da0 <line:777:9, col:26>
|     | `-VarDecl 0x5586ffc04d38 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5586ffc051e8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5586ffc05208 <line:778:13, col:58>
|       | `-VarDecl 0x5586ffc04dc8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5586ffc04fa8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5586ffc04f78 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5586ffc04f60 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5586ffc04f40 <col:26, col:58> 'String' (CXXTemporary 0x5586ffc04f40)
|       |           `-CXXMemberCallExpr 0x5586ffc04ed0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5586ffc04e40 <col:26> '<bound member function type>' ->find 0x5586ffbf6448
|       |             | `-CXXThisExpr 0x5586ffc04e30 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5586ffc04f08 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffc04e70 <col:31> 'const char *' lvalue ParmVar 0x5586ffbdfbf0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5586ffc04f20 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5586ffc04e90 <col:40> 'int' lvalue ParmVar 0x5586ffbdfc70 'flags' 'int'
|       |             `-DeclRefExpr 0x5586ffc04eb0 <col:47> 'Args::Slot *' lvalue Var 0x5586ffc04d38 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5586ffc05060 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5586ffc05048 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5586ffc05028 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5586ffc04ff8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|       |       `-ImplicitCastExpr 0x5586ffc04fe0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5586ffc04fc0 <col:20> 'String' lvalue Var 0x5586ffc04dc8 'str' 'String'
|       `-CallExpr 0x5586ffc051b8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5586ffc05088 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|         | `-CXXThisExpr 0x5586ffc05078 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5586ffc05168 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5586ffc050d8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5586ffc050b8 <col:23> 'P' lvalue ParmVar 0x5586ffbdfce8 'parser' 'P'
|         | |-DeclRefExpr 0x5586ffc05120 <col:36> 'String' lvalue Var 0x5586ffc04dc8 'str' 'String'
|         | `-UnaryOperator 0x5586ffc05150 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5586ffc05140 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5586ffc05198 <col:49> 'Args::Slot *' lvalue Var 0x5586ffc04d38 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5586ffbe0248 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5586ffbdff18 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5586ffbe01a8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x5586ffbdffd0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbe0050 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbe00c8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5586ffc05b90 <col:71, line:792:5>
|     |-DeclStmt 0x5586ffc052b8 <line:784:9, col:26>
|     | `-VarDecl 0x5586ffc05250 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5586ffc05388 <line:785:9, col:29>
|     | `-VarDecl 0x5586ffc052e8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5586ffc05370 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5586ffc05350 <col:28> 'int' 1
|     |-WhileStmt 0x5586ffc05a40 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5586ffc05a60 <line:786:16, col:61>
|     | | `-VarDecl 0x5586ffc053b0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5586ffc05590 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5586ffc05560 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5586ffc05548 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5586ffc05528 <col:29, col:61> 'String' (CXXTemporary 0x5586ffc05528)
|     | |           `-CXXMemberCallExpr 0x5586ffc054b8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5586ffc05428 <col:29> '<bound member function type>' ->find 0x5586ffbf6448
|     | |             | `-CXXThisExpr 0x5586ffc05418 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5586ffc054f0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586ffc05458 <col:34> 'const char *' lvalue ParmVar 0x5586ffbdffd0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5586ffc05508 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586ffc05478 <col:43> 'int' lvalue ParmVar 0x5586ffbe0050 'flags' 'int'
|     | |             `-DeclRefExpr 0x5586ffc05498 <col:50> 'Args::Slot *' lvalue Var 0x5586ffc05250 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5586ffc05648 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5586ffc05630 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5586ffc05610 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5586ffc055e0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|     | |       `-ImplicitCastExpr 0x5586ffc055c8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5586ffc055a8 <col:23> 'String' lvalue Var 0x5586ffc053b0 'str' 'String'
|     | `-CompoundStmt 0x5586ffc05a18 <col:64, line:790:9>
|     |   |-CallExpr 0x5586ffc057a0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5586ffc05670 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|     |   | | `-CXXThisExpr 0x5586ffc05660 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5586ffc05750 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5586ffc056c0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5586ffc056a0 <col:23> 'P' lvalue ParmVar 0x5586ffbe00c8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5586ffc05708 <col:36> 'String' lvalue Var 0x5586ffc053b0 'str' 'String'
|     |   | | `-UnaryOperator 0x5586ffc05738 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5586ffc05728 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5586ffc05780 <col:49> 'Args::Slot *' lvalue Var 0x5586ffc05250 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5586ffc05938 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5586ffc057d0 <col:13> 'int' lvalue Var 0x5586ffc052e8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5586ffc05920 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5586ffc05900 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5586ffc05868 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5586ffc05848 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5586ffc05830 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5586ffc057f0 <col:28> 'int' lvalue Var 0x5586ffc052e8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5586ffc05810 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5586ffc058e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5586ffc058b8 <col:49> 'bool' lvalue ->_read_status 0x5586ffad8850
|     |   |         `-ImplicitCastExpr 0x5586ffc05898 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5586ffc05888 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5586ffc059e8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5586ffc05958 <col:13> 'int' lvalue ParmVar 0x5586ffbe0050 'flags' 'int'
|     |     `-UnaryOperator 0x5586ffc059d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5586ffc059b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5586ffc05998 <col:23> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5586ffc05b70 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5586ffc05aa8 <col:9> 'bool' lvalue ->_read_status 0x5586ffad8850
|       | `-ImplicitCastExpr 0x5586ffc05a88 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5586ffc05a78 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5586ffc05b50 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5586ffc05b30 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5586ffc05b18 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5586ffc05ad8 <col:25> 'int' lvalue Var 0x5586ffc052e8 'read_status' 'int'
|           `-IntegerLiteral 0x5586ffc05af8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5586ffbe0728 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x5586ffbe02b8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbe0338 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbe0688 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x5586ffbe03f8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbe0478 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbe04f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbe0598 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5586ffc06b20 <col:84, line:805:5>
|     |-DeclStmt 0x5586ffc05c38 <line:796:9, col:26>
|     | `-VarDecl 0x5586ffc05bd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5586ffc05d08 <line:797:9, col:29>
|     | `-VarDecl 0x5586ffc05c68 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5586ffc05cf0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5586ffc05cd0 <col:28> 'int' 1
|     |-DeclStmt 0x5586ffc06040 <line:798:9, col:71>
|     | `-VarDecl 0x5586ffc05d58 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5586ffc06010 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5586ffc05f80 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5586ffc05fc8 <col:55> 'T' lvalue ParmVar 0x5586ffbe0598 'variable' 'T &'
|     |     `-UnaryOperator 0x5586ffc05ff8 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5586ffc05fe8 <col:66> 'Args *' this
|     |-WhileStmt 0x5586ffc069d0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5586ffc069f0 <line:799:16, col:61>
|     | | `-VarDecl 0x5586ffc06068 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5586ffc06248 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5586ffc06218 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5586ffc06200 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5586ffc061e0 <col:29, col:61> 'String' (CXXTemporary 0x5586ffc061e0)
|     | |           `-CXXMemberCallExpr 0x5586ffc06170 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5586ffc060e0 <col:29> '<bound member function type>' ->find 0x5586ffbf6448
|     | |             | `-CXXThisExpr 0x5586ffc060d0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5586ffc061a8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586ffc06110 <col:34> 'const char *' lvalue ParmVar 0x5586ffbe03f8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5586ffc061c0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586ffc06130 <col:43> 'int' lvalue ParmVar 0x5586ffbe0478 'flags' 'int'
|     | |             `-DeclRefExpr 0x5586ffc06150 <col:50> 'Args::Slot *' lvalue Var 0x5586ffc05bd0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5586ffc06300 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5586ffc062e8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5586ffc062c8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5586ffc06298 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|     | |       `-ImplicitCastExpr 0x5586ffc06280 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5586ffc06260 <col:23> 'String' lvalue Var 0x5586ffc06068 'str' 'String'
|     | `-CompoundStmt 0x5586ffc069a8 <col:64, line:803:9>
|     |   |-CallExpr 0x5586ffc06730 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5586ffc06328 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|     |   | | `-CXXThisExpr 0x5586ffc06318 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5586ffc066f0 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5586ffc06358 <col:23> 'T *' lvalue Var 0x5586ffc05d58 's' 'T *'
|     |   | | `-CallExpr 0x5586ffc066b0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5586ffc06540 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5586ffc06588 <col:56> 'P' lvalue ParmVar 0x5586ffbe04f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5586ffc065a8 <col:64> 'String' lvalue Var 0x5586ffc06068 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5586ffc06658 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5586ffc065e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|     |   | |   | `-DeclRefExpr 0x5586ffc065c8 <col:70> 'T *' lvalue Var 0x5586ffc05d58 's' 'T *'
|     |   | |   `-UnaryOperator 0x5586ffc06698 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5586ffc06688 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5586ffc06710 <col:81> 'Args::Slot *' lvalue Var 0x5586ffc05bd0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5586ffc068c8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5586ffc06760 <col:13> 'int' lvalue Var 0x5586ffc05c68 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5586ffc068b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5586ffc06890 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5586ffc067f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5586ffc067d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5586ffc067c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5586ffc06780 <col:28> 'int' lvalue Var 0x5586ffc05c68 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5586ffc067a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5586ffc06878 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5586ffc06848 <col:49> 'bool' lvalue ->_read_status 0x5586ffad8850
|     |   |         `-ImplicitCastExpr 0x5586ffc06828 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5586ffc06818 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5586ffc06978 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5586ffc068e8 <col:13> 'int' lvalue ParmVar 0x5586ffbe0478 'flags' 'int'
|     |     `-UnaryOperator 0x5586ffc06960 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5586ffc06948 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5586ffc06928 <col:23> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5586ffc06b00 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5586ffc06a38 <col:9> 'bool' lvalue ->_read_status 0x5586ffad8850
|       | `-ImplicitCastExpr 0x5586ffc06a18 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5586ffc06a08 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5586ffc06ae0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5586ffc06ac0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5586ffc06aa8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5586ffc06a68 <col:25> 'int' lvalue Var 0x5586ffc05c68 'read_status' 'int'
|           `-IntegerLiteral 0x5586ffc06a88 <col:40> 'int' 1
|-FunctionTemplateDecl 0x5586ffbe0d08 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x5586ffbe07a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5586ffbe0818 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5586ffbe0c68 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x5586ffbe08d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5586ffbe0958 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x5586ffbe09d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x5586ffbe0b20 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5586ffc07928 <col:87, line:821:5>
|     |-DeclStmt 0x5586ffc06bd0 <line:809:9, col:26>
|     | `-VarDecl 0x5586ffc06b68 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5586ffc06ca0 <line:810:9, col:29>
|     | `-VarDecl 0x5586ffc06c00 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5586ffc06c88 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5586ffc06c68 <col:28> 'int' 1
|     |-DeclStmt 0x5586ffc06ee8 <line:811:9, col:38>
|     | `-VarDecl 0x5586ffc06dd0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5586ffc06ec0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5586ffc06e48 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5586ffc06ea0 <col:29> 'Vector<T>' lvalue ParmVar 0x5586ffbe0b20 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5586ffc077d8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5586ffc077f8 <line:812:16, col:61>
|     | | `-VarDecl 0x5586ffc06f10 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5586ffc070f0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5586ffc070c0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5586ffc070a8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5586ffc07088 <col:29, col:61> 'String' (CXXTemporary 0x5586ffc07088)
|     | |           `-CXXMemberCallExpr 0x5586ffc07018 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5586ffc06f88 <col:29> '<bound member function type>' ->find 0x5586ffbf6448
|     | |             | `-CXXThisExpr 0x5586ffc06f78 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5586ffc07050 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586ffc06fb8 <col:34> 'const char *' lvalue ParmVar 0x5586ffbe08d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5586ffc07068 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5586ffc06fd8 <col:43> 'int' lvalue ParmVar 0x5586ffbe0958 'flags' 'int'
|     | |             `-DeclRefExpr 0x5586ffc06ff8 <col:50> 'Args::Slot *' lvalue Var 0x5586ffc06b68 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5586ffc071a8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5586ffc07190 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5586ffc07170 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5586ffc07140 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5586ff924678
|     | |       `-ImplicitCastExpr 0x5586ffc07128 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5586ffc07108 <col:23> 'String' lvalue Var 0x5586ffc06f10 'str' 'String'
|     | `-CompoundStmt 0x5586ffc077a0 <col:64, line:819:9>
|     |   |-DeclStmt 0x5586ffc07268 <line:813:13, col:23>
|     |   | `-VarDecl 0x5586ffc071d0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5586ffc07248 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5586ffc073e8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5586ffc07290 <col:13> '<bound member function type>' ->postparse 0x5586ffbf6658
|     |   | | `-CXXThisExpr 0x5586ffc07280 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5586ffc07390 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5586ffc072e0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5586ffc072c0 <col:23> 'P' lvalue ParmVar 0x5586ffbe09d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5586ffc07328 <col:36> 'String' lvalue Var 0x5586ffc06f10 'str' 'String'
|     |   | | |-DeclRefExpr 0x5586ffc07348 <col:41> 'T' lvalue Var 0x5586ffc071d0 'sx' 'T'
|     |   | | `-UnaryOperator 0x5586ffc07378 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5586ffc07368 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5586ffc073c8 <col:53> 'Args::Slot *' lvalue Var 0x5586ffc06b68 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5586ffc07540 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5586ffc07478 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5586ffc07448 <col:17> 'bool' lvalue ->_read_status 0x5586ffad8850
|     |   | |   `-ImplicitCastExpr 0x5586ffc07428 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5586ffc07418 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5586ffc07518 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5586ffc074b0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5586ffc07490 <col:17> 'Vector<T> *' lvalue Var 0x5586ffc06dd0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5586ffc074f8 <col:30> 'T' lvalue Var 0x5586ffc071d0 'sx' 'T'
|     |   |-BinaryOperator 0x5586ffc076c0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5586ffc07558 <col:13> 'int' lvalue Var 0x5586ffc06c00 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5586ffc076a8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5586ffc07688 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5586ffc075f0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5586ffc075d0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5586ffc075b8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5586ffc07578 <col:28> 'int' lvalue Var 0x5586ffc06c00 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5586ffc07598 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5586ffc07670 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5586ffc07640 <col:49> 'bool' lvalue ->_read_status 0x5586ffad8850
|     |   |         `-ImplicitCastExpr 0x5586ffc07620 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5586ffc07610 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5586ffc07770 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5586ffc076e0 <col:13> 'int' lvalue ParmVar 0x5586ffbe0958 'flags' 'int'
|     |     `-UnaryOperator 0x5586ffc07758 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5586ffc07740 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5586ffc07720 <col:23> 'const int' lvalue Var 0x5586ffbc4688 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5586ffc07908 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5586ffc07840 <col:9> 'bool' lvalue ->_read_status 0x5586ffad8850
|       | `-ImplicitCastExpr 0x5586ffc07820 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5586ffc07810 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5586ffc078e8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5586ffc078c8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5586ffc078b0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5586ffc07870 <col:25> 'int' lvalue Var 0x5586ffc06c00 'read_status' 'int'
|           `-IntegerLiteral 0x5586ffc07890 <col:40> 'int' 1
|-AccessSpecDecl 0x5586ffbe0d80 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x5586ffbe0da8 prev 0x5586ffbc2988 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5586ffbe0ea0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x5586ffbe0f90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5586ffc07960 <col:16, line:828:9>
| |-CXXDestructorDecl 0x5586ffbe1080 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5586ffc07970 <col:25, line:830:9>
| |-CXXMethodDecl 0x5586ffbe1180 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x5586ffbe1230 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x5586ffbe12d8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x5586ffbe12d8
| | `-ParmVarDecl 0x5586ffbe13e8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5586ffbe1ba8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5586ffbe1ba8
|   `-ParmVarDecl 0x5586ffbe1cb8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x5586ffbe1458 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5586ffbe15b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5586ffbe17b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x5586ffbe1660 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5586ffbe16d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5586ffc07b50 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x5586ffbe1a68 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5586ffc079c0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5586ffc07980 <col:20> 'void *' lvalue ParmVar 0x5586ffbe1660 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5586ffbe1ad0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5586ffc07a48 <col:32, col:45> 'char *' array Function 0x5586ff7482f8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5586ffc07a30 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5586ffc07a00 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5586ffbe16d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x5586ffbe1b30 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5586ffc07b10 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5586ffc07ad0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5586ffbe16d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5586ffc07bd0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5586ffbe18b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x5586ffbe1080 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5586ffc07c58 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5586ffc07c38 <line:840:13, col:22> 'void' array Function 0x5586ff748658 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5586ffc07c20 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5586ffc07bf0 <col:22> 'char *' lvalue ->_slot 0x5586ffbe1ad0
| |         `-CXXThisExpr 0x5586ffc07be0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5586ffbe19b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x5586ffbe1180 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5586ffc07e48 <col:22, line:844:9>
| |   `-CallExpr 0x5586ffc07db0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5586ffc07d98 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5586ffc07d78 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x5586ff8540d8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5586ffc07de8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5586ffc07cc8 <col:20> 'void *' lvalue ->_ptr 0x5586ffbe1a68
| |     |   `-CXXThisExpr 0x5586ffc07cb8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5586ffc07e18 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5586ffc07e00 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5586ffc07d08 <col:26> 'char *' lvalue ->_slot 0x5586ffbe1ad0
| |     |     `-CXXThisExpr 0x5586ffc07cf8 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5586ffc07e30 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5586ffc07d48 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x5586ffbe1b30
| |         `-CXXThisExpr 0x5586ffc07d38 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x5586ffbe1a68 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5586ffbe1ad0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x5586ffbe1b30 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x5586ffbe1d28 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5586ffbe1d28
| | `-ParmVarDecl 0x5586ffbe1e38 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x5586ffbe1ed8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x5586ffbe1ed8
|   `-ParmVarDecl 0x5586ffbe1fe8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x5586ffbe2188 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x5586ffbe2058 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x5586ffbe20f8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x5586ffbe2420 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x5586ffbe2618 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5586ffbe24e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x5586ffbe2798 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5586ffc07e80 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5586ffc07e60 <col:20> 'T *' lvalue ParmVar 0x5586ffbe24e8 'ptr' 'T *'
|   | `-CompoundStmt 0x5586ffc07ed0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5586ffbe26e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x5586ffbe1180 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5586ffc08080 <col:22, line:857:9>
|   |   `-CallExpr 0x5586ffc08050 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5586ffc07ee0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5586ff90c808 0x5586ff8b6b38
|   |     |-CXXOperatorCallExpr 0x5586ffc07fe0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5586ffc07f70 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5586ffb197b8 0x5586ffb193d8 0x5586ffb19008 0x5586ffb18c28 0x5586ffb18848 0x5586ffb18478
|   |     | `-MemberExpr 0x5586ffc07f40 <col:29> 'T *' lvalue ->_ptr 0x5586ffbe2798
|   |     |   `-CXXThisExpr 0x5586ffc07f30 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5586ffc08020 <col:35> 'T' lvalue ->_slot 0x5586ffbe27f8
|   |       `-CXXThisExpr 0x5586ffc08010 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x5586ffbe2798 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5586ffbe27f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x5586ffbe2860 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x5586ffbe2960 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5586ffbe29b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffbe2940 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x5586ffbe2920 <col:31> 'int' 48
|-FieldDecl 0x5586ffbe29d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x5586ffbe2a38 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x5586ffbe2a98 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5586ffbe2bd0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x5586ffbf5cf0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5586ffbf5d50 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x5586ffbf5e00 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x5586ffbf6028 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x5586ffbf5f30 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x5586ffbf6178 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x5586ffbf60e8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5586ffbf6448 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x5586ffbf6238 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x5586ffbf62b8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x5586ffbf6360 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5586ffbf6658 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x5586ffbf6510 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5586ffbf6588 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x5586ffbf6728 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5586ffbf6878 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x5586ffbf67e0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x5586ffbf6c08 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5586ffbf6938 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x5586ffbf69b8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5586ffbf6a60 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x5586ffbf6b18 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x5586ffbf6e30 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x5586ffbf6ce0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5586ffbf6d58 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x5586ffbf7148 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x5586ffbf6ee0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x5586ffbf70a8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x5586ffbf6fb8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ff915530 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ff915648 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5586ff9156d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5586ff9157a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5586ff915890 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ff915aa8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5586ff915950 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff915c58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5586ff915b60 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5586ff915da0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5586ff915d10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5586ff915ee8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5586ff915e58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff916030 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5586ff915fa0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff9160f8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5586ff916240 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5586ff9161b0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5586ff916308 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5586ff916450 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5586ff9163c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x5586ff9165c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5586ff916508 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff916710 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5586ff916680 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff9167d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5586ff916998 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5586ff916888 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5586ff916900 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff916be8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5586ff916a58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ff916ad0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5586ff916c98 <col:86> "" ""
|-CXXMethodDecl 0x5586ff916f08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5586ff916d78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5586ff916df0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff9170b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5586ff916fc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5586ff917268 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5586ff917170 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5586ff917538 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5586ff917320 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5586ff917398 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5586ff917410 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff917818 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5586ff917600 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5586ff917678 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ff9176f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5586ff9178d0 <col:115> "" ""
|-AccessSpecDecl 0x5586ff917940 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5586ff917978 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ff917e80 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5586ff917e80
| `-ParmVarDecl 0x5586ff917f88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5586ff918028 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5586ff918028
| `-ParmVarDecl 0x5586ff918138 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5586ff94d768 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586ffb40570 <col:7>
|-CXXConstructorDecl 0x5586ff94d840 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5586ff94d840
| `-ParmVarDecl 0x5586ff94d958 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5586ff94d9c8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5586ff94d9c8
| `-ParmVarDecl 0x5586ff94dad8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5586ffb42f70 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb2f118 prev 0x5586ffb24320 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ffb2f210 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5586ffb2f300 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5586ffb2f428 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5586ffb2f5a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5586ffb2f728 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5586ffb2f8a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5586ffb406d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586ffb40f48 <col:11>
|-CXXDestructorDecl 0x5586ffb407b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5586ffb408e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5586ffb408e8
| `-ParmVarDecl 0x5586ffb409f8 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5586ffb40a98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586ffb40a98
| `-ParmVarDecl 0x5586ffb40ba8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5586ffb43968 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5586ffb43a78 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5586ffb43cf8 <col:11>
|   `-ReturnStmt 0x5586ffb43ce8 <col:11>
|     `-UnaryOperator 0x5586ffb43cd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5586ffb43cc0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5586ffb43ae8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586ffb43ae8
  `-ParmVarDecl 0x5586ffb43bf8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb2f910 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ffb2fa28 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5586ffb2fac8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5586ffb2fb30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5586ffb2fb98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5586ffb2fc00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5586ffb2fc60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5586ffb2fd20 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5586ffb2fd80 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5586ffb2fde0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5586ffb405e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5586ffb2fac8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5586ffb40f58 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5586ffb40fb0 <col:12>
|-CXXConstructorDecl 0x5586ffb40c18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5586ffb40c18
| `-ParmVarDecl 0x5586ffb40d28 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5586ffb40dc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5586ffb40dc8
| `-ParmVarDecl 0x5586ffb40ed8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5586ffb43050 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb1da30 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5586ffb1db48 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5586ffb1dbd8 <col:16, col:22> col:16 public
|-EnumDecl 0x5586ffb1dc00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5586ffb1dd00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5586ffb1dde0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb1dce0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5586ffb1dcc0 <col:21> 'int' 28
| `-EnumConstantDecl 0x5586ffb1dd90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5586ffb1ddf8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb1dd70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5586ffb1dd50 <col:22> 'int' 64
|-CXXMethodDecl 0x5586ffb1e138 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5586ffb1de20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ffb1dea0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5586ffb1df18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ffb1df90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586ffb1e1f8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb1e3f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5586ffb1e270 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5586ffb1e2e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586ffb1e4a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb1e608 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5586ffb1e518 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586ffb1e6b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x5586ffb1ea10 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5586ffb1e9a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5586ffb1e940 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5586ffb1e900 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x5586ff5f54e0 'void'
|       |-PointerType 0x5586ff89ddd0 'unsigned char *'
|       | `-BuiltinType 0x5586ff5f55e0 'unsigned char'
|       |-TypedefType 0x5586ff69a3a0 'size_t' sugar
|       | |-Typedef 0x5586ff665be0 'size_t'
|       | `-BuiltinType 0x5586ff5f5640 'unsigned long'
|       `-PointerType 0x5586ff5f5ce0 'void *'
|         `-BuiltinType 0x5586ff5f54e0 'void'
|-CXXMethodDecl 0x5586ffb1ee88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5586ffb1ea80 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5586ffb1eaf8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ffb1eb90 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5586ffb1ec10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5586ffb39580 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5586ffb39568 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5586ffb39530 <col:58> 'int' 0
| |-ParmVarDecl 0x5586ffb1ec90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5586ffb395a8 <col:76> 'int' 0
| |-ParmVarDecl 0x5586ffb1ed10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5586ffb395c8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5586ffb1ef58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb1efd8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5586ffb1f098 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5586ffb1f138 <col:20>
| `-OptimizeNoneAttr 0x5586ffb1f190 <col:30>
|-CXXMethodDecl 0x5586ffb1f208 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5586ffb1f2a8 <col:20>
| `-OptimizeNoneAttr 0x5586ffb1f300 <col:30>
|-CXXMethodDecl 0x5586ffb1f378 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5586ffb1f418 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb1f4c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5586ffb1f568 <col:20>
| |-OptimizeNoneAttr 0x5586ffb1f5c0 <col:30>
| `-WarnUnusedResultAttr 0x5586ffb1f5e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb1f640 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5586ffb1f6e0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb1f738 <col:30>
|-CXXMethodDecl 0x5586ffb1f788 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5586ffb1f828 <col:20>
| `-OptimizeNoneAttr 0x5586ffb1f880 <col:30>
|-CXXMethodDecl 0x5586ffb1f8c8 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5586ffb1f968 <col:20>
| `-OptimizeNoneAttr 0x5586ffb1f9c0 <col:30>
|-CXXMethodDecl 0x5586ffb1fa08 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ffb1fac8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ffb1fb90 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb1fc58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb1fd18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ffb1fe38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5586ffb39690 <col:54, line:99:5>
|   `-ReturnStmt 0x5586ffb39680 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5586ffb39668 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5586ffb39638 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5586ffb30118
|         `-CXXThisExpr 0x5586ffb39628 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5586ffb1ffd8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5586ffb1fee8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5586ffb39740 <col:67, line:103:5>
|   `-BinaryOperator 0x5586ffb39720 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5586ffb396b8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5586ffb30118
|     | `-CXXThisExpr 0x5586ffb396a8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5586ffb39708 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb396e8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5586ffb1fee8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5586ffb200d0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5586ffb397c0 <col:33, line:107:5>
|   `-ReturnStmt 0x5586ffb397b0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5586ffb39798 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5586ffb39768 <col:16> 'void *' lvalue ->_destructor_argument 0x5586ffb30180
|         `-CXXThisExpr 0x5586ffb39758 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5586ffb20190 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5586ffb39df0 <col:25, line:113:5>
|   |-ParenExpr 0x5586ffb39b38 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5586ffb39b08 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb39878 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5586ffb39850 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5586ffb39818 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5586ffb397e8 <col:24> '<bound member function type>' ->shared 0x5586ffb1f208
|   |   |       `-ImplicitCastExpr 0x5586ffb39838 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5586ffb397d8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5586ffb398d8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb398b8 <col:42> 'int' 0
|   |   `-CallExpr 0x5586ffb39a68 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb39a50 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb39a30 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb39aa8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb39948 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5586ffb39ac0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb39970 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb39ad8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb399a8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5586ffb39af0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb39a18 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb39a00 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb399c8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5586ffb39d38 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5586ffb39b68 <col:2> 'unsigned char *' lvalue ->_head 0x5586ffb2ff20
|   | | `-CXXThisExpr 0x5586ffb39b58 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5586ffb39d20 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5586ffb39d00 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5586ffb39ba8 <col:10> 'unsigned char *' lvalue ->_data 0x5586ffb2ff88
|   |     | `-CXXThisExpr 0x5586ffb39b98 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5586ffb39ce8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5586ffb39cc8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5586ffb39be8 <col:18> 'unsigned char *' lvalue ->_tail 0x5586ffb2fff0
|   |         | `-CXXThisExpr 0x5586ffb39bd8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5586ffb39cb0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5586ffb39c90 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5586ffb39c28 <col:26> 'unsigned char *' lvalue ->_end 0x5586ffb30058
|   |             | `-CXXThisExpr 0x5586ffb39c18 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5586ffb39c78 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5586ffb39c58 <col:33> 'int' 0
|   `-BinaryOperator 0x5586ffb39dd0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5586ffb39d68 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5586ffb30118
|     | `-CXXThisExpr 0x5586ffb39d58 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5586ffb39db8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5586ffb39d98 <col:16> 'int' 0
|-CXXMethodDecl 0x5586ffb202d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5586ffb20240 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb20378 <col:20>
| |-OptimizeNoneAttr 0x5586ffb203d0 <col:30>
| `-WarnUnusedResultAttr 0x5586ffb203f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb204c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5586ffb20438 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb20570 <col:20>
| |-OptimizeNoneAttr 0x5586ffb205c8 <col:30>
| `-WarnUnusedResultAttr 0x5586ffb205f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb20728 <line:171:5, col:76> col:13 used nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5586ffb20630 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586ffb207d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb208d0 <line:187:5, col:62> col:45 used pull 'void (uint32_t)'
| |-ParmVarDecl 0x5586ffb20840 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb20978 <col:20>
| `-OptimizeNoneAttr 0x5586ffb209d0 <col:30>
|-CXXMethodDecl 0x5586ffb20a98 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5586ffb20a08 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586ffb20b40 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb20c40 <line:230:5, col:75> col:13 used nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5586ffb20bb0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5586ffb20ce8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb20de8 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x5586ffb20d58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb20e90 <col:20>
| `-OptimizeNoneAttr 0x5586ffb20ee8 <col:30>
|-CXXMethodDecl 0x5586ffb21078 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5586ffb20f28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5586ffb20fa0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5586ffb395e8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5586ffb21128 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5586ffb21328 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5586ffb211a0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5586ffb21218 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb21538 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5586ffb213e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5586ffb21460 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb21748 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5586ffb215f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5586ffb21678 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5586ffb395f8 <col:39> 'int' 0
|-CXXMethodDecl 0x5586ffb21818 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5586ffb218e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb219a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5586ffb21a68 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ffb21b30 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5586ffb21c78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5586ffb21be8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5586ffb21e48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5586ffb21d38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5586ffb21db0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb21f18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5586ffb21fd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5586ffb22078 <col:20>
| `-OptimizeNoneAttr 0x5586ffb220d0 <col:30>
|-CXXMethodDecl 0x5586ffb22120 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5586ffb221c0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb22218 <col:30>
|-CXXMethodDecl 0x5586ffb22268 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5586ffb22328 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ffb223f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5586ffb22490 <col:20>
| `-OptimizeNoneAttr 0x5586ffb224e8 <col:30>
|-CXXMethodDecl 0x5586ffb22638 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5586ffb22528 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5586ffb225a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb22788 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5586ffb226f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb22860 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5586ffb22920 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5586ffb229c0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb22a18 <col:30>
|-CXXMethodDecl 0x5586ffb22a68 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5586ffb22b08 <col:20>
| `-OptimizeNoneAttr 0x5586ffb22b60 <col:30>
|-CXXMethodDecl 0x5586ffb22bb0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5586ffb22c78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5586ffb22d18 <col:20>
| `-OptimizeNoneAttr 0x5586ffb22d70 <col:30>
|-CXXMethodDecl 0x5586ffb22db8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5586ffb22ed8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5586ffb23048 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5586ffb22f88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5586ffb23138 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5586ffb231d8 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23230 <col:30>
|-CXXMethodDecl 0x5586ffb23280 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5586ffb23340 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5586ffb23578 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5586ffb233f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5586ffb23468 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb23628 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23680 <col:30>
|-CXXMethodDecl 0x5586ffb23728 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5586ffb237c8 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23820 <col:30>
|-CXXMethodDecl 0x5586ffb23870 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5586ffb23910 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23968 <col:30>
|-CXXMethodDecl 0x5586ffb239b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5586ffb23a50 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23aa8 <col:30>
|-CXXMethodDecl 0x5586ffb23ba8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5586ffb23ae0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5586ffb23c50 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23ca8 <col:30>
|-CXXMethodDecl 0x5586ffb23e68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5586ffb23ce0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5586ffb23d58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb23f18 <col:20>
| `-OptimizeNoneAttr 0x5586ffb23f70 <col:30>
|-CXXMethodDecl 0x5586ffb24018 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5586ffb24138 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5586ffb24258 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5586ffb242f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5586ffb24320 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5586ffb24448 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5586ffb244e8 <col:20>
| `-OptimizeNoneAttr 0x5586ffb24540 <col:30>
|-CXXMethodDecl 0x5586ffb245e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5586ffb24688 <col:20>
| `-OptimizeNoneAttr 0x5586ffb246e0 <col:30>
|-AccessSpecDecl 0x5586ffb24708 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5586ffb24730 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5586ffb24830 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5586ffb24880 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb24810 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5586ffb247f0 <col:14> 'int' 48
|-CXXMethodDecl 0x5586ffb248e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5586ffb24988 <col:20>
| `-OptimizeNoneAttr 0x5586ffb249e0 <col:30>
|-CXXMethodDecl 0x5586ffb24a58 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5586ffb24af8 <col:20>
| `-OptimizeNoneAttr 0x5586ffb24b50 <col:30>
|-CXXMethodDecl 0x5586ffb24c18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5586ffb24b88 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5586ffb24db8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5586ffb24f58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5586ffb24e68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5586ffb25000 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5586ffb25100 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586ffb254b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb250e0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5586ffb250c0 <col:9> 'int' 0
| |-EnumConstantDecl 0x5586ffb25190 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586ffb254c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb25170 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5586ffb25150 <col:14> 'int' 1
| |-EnumConstantDecl 0x5586ffb25220 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586ffb254e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb25200 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5586ffb251e0 <col:14> 'int' 2
| |-EnumConstantDecl 0x5586ffb252b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586ffb254f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb25290 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5586ffb25270 <col:14> 'int' 3
| |-EnumConstantDecl 0x5586ffb25340 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586ffb25510 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb25320 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5586ffb25300 <col:13> 'int' 4
| |-EnumConstantDecl 0x5586ffb253d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5586ffb25528 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb253b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5586ffb25390 <col:13> 'int' 5
| `-EnumConstantDecl 0x5586ffb25460 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5586ffb25540 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb25440 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5586ffb25420 <col:14> 'int' 6
|-CXXMethodDecl 0x5586ffb255a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5586ffb25648 <col:20>
| `-OptimizeNoneAttr 0x5586ffb256a0 <col:30>
|-CXXMethodDecl 0x5586ffb25798 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5586ffb256d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5586ffb25840 <col:20>
| `-OptimizeNoneAttr 0x5586ffb25898 <col:30>
|-CXXMethodDecl 0x5586ffb25908 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5586ffb25a30 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5586ffb25ba8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5586ffb25ae0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5586ffb25c70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5586ffb25d38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5586ffb25e78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5586ffb25de8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5586ffb25f20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5586ffb26020 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5586ffb26220 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb26000 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5586ffb25fe0 <col:23> 'int' 0
| |-EnumConstantDecl 0x5586ffb260b0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5586ffb26238 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb26090 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5586ffb26070 <col:45> 'int' 4
| |-EnumConstantDecl 0x5586ffb26140 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5586ffb26250 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb26120 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5586ffb26100 <col:24> 'int' 0
| `-EnumConstantDecl 0x5586ffb261d0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5586ffb26268 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb261b0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5586ffb26190 <col:47> 'int' 16
|-CXXMethodDecl 0x5586ffb262c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5586ffb26438 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5586ffb26378 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5586ffb264e0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb26538 <col:30>
|-CXXMethodDecl 0x5586ffb26588 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5586ffb39f10 <col:18, col:36>
|   `-ReturnStmt 0x5586ffb39f00 <col:20, col:33>
|     `-ImplicitCastExpr 0x5586ffb39ee8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5586ffb39ec8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5586ffb39e98 <col:27> '<bound member function type>' ->xanno 0x5586ffb245e8
|           `-CXXThisExpr 0x5586ffb39e88 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5586ffb26680 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5586ffb3a020 <col:30, col:48>
|   `-ReturnStmt 0x5586ffb3a010 <col:32, col:45>
|     `-ImplicitCastExpr 0x5586ffb39ff8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5586ffb39fd8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5586ffb39fa8 <col:39> '<bound member function type>' ->xanno 0x5586ffb24448
|           `-CXXThisExpr 0x5586ffb39f98 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5586ffb26768 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5586ffb3a1b8 <col:24, col:50>
|   `-ReturnStmt 0x5586ffb3a1a8 <col:26, col:47>
|     `-UnaryOperator 0x5586ffb3a190 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586ffb3a170 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5586ffb3a158 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586ffb3a108 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5586ffb2f428
|         |   `-CXXMemberCallExpr 0x5586ffb3a0e8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5586ffb3a0b8 <col:34> '<bound member function type>' ->xanno 0x5586ffb245e8
|         |       `-CXXThisExpr 0x5586ffb3a0a8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5586ffb3a138 <col:46> 'int' 0
|-CXXMethodDecl 0x5586ffb26870 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5586ffb3a388 <col:36, col:62>
|   `-ReturnStmt 0x5586ffb3a378 <col:38, col:59>
|     `-UnaryOperator 0x5586ffb3a360 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586ffb3a340 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5586ffb3a328 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586ffb3a2a0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5586ffb2f428
|         |   `-CXXMemberCallExpr 0x5586ffb3a280 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5586ffb3a250 <col:46> '<bound member function type>' ->xanno 0x5586ffb24448
|         |       `-CXXThisExpr 0x5586ffb3a240 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5586ffb3a2d0 <col:58> 'int' 0
|-CXXMethodDecl 0x5586ffb26988 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5586ffb3a520 <col:26, col:53>
|   `-ReturnStmt 0x5586ffb3a510 <col:28, col:50>
|     `-UnaryOperator 0x5586ffb3a4f8 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586ffb3a4d8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5586ffb3a4c0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586ffb3a470 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5586ffb2f728
|         |   `-CXXMemberCallExpr 0x5586ffb3a450 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5586ffb3a420 <col:36> '<bound member function type>' ->xanno 0x5586ffb245e8
|         |       `-CXXThisExpr 0x5586ffb3a410 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5586ffb3a4a0 <col:49> 'int' 0
|-CXXMethodDecl 0x5586ffb26aa8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5586ffb3a6f8 <col:38, col:65>
|   `-ReturnStmt 0x5586ffb3a6e8 <col:40, col:62>
|     `-UnaryOperator 0x5586ffb3a6d0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5586ffb3a6b0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5586ffb3a698 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586ffb3a608 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5586ffb2f728
|         |   `-CXXMemberCallExpr 0x5586ffb3a5e8 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5586ffb3a5b8 <col:48> '<bound member function type>' ->xanno 0x5586ffb24448
|         |       `-CXXThisExpr 0x5586ffb3a5a8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5586ffb3a638 <col:61> 'int' 0
|-CXXMethodDecl 0x5586ffb26c58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5586ffb26b60 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5586ffb3adc8 <col:34, line:463:5>
|   |-ParenExpr 0x5586ffb3ac10 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5586ffb3abe0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3a848 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3a818 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3a768 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3a750 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3a710 <col:23> 'int' lvalue ParmVar 0x5586ffb26b60 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3a730 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3a7f8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3a7c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3a788 <col:33> 'int' lvalue ParmVar 0x5586ffb26b60 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5586ffb3a7e0 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5586ffb3a7a8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5586ffb3a8a8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3a888 <col:56> 'int' 0
|   |   `-CallExpr 0x5586ffb3ab40 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3ab28 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3ab08 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3ab80 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3a998 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5586ffb3ab98 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3a9c8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3abb0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3aa00 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5586ffb3abc8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3aaf0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3aad8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3aa98 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5586ffb3adb8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5586ffb3ada0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5586ffb3ad80 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5586ffb3ad50 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5586ffb3ad00 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5586ffb2f428
|         |   `-CXXMemberCallExpr 0x5586ffb3ace0 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5586ffb3acb0 <col:9> '<bound member function type>' ->xanno 0x5586ffb24448
|         |       `-CXXThisExpr 0x5586ffb3aca0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5586ffb3ad68 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5586ffb3ad30 <col:21> 'int' lvalue ParmVar 0x5586ffb26b60 'i' 'int'
|-CXXMethodDecl 0x5586ffb26ea8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5586ffb26d18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5586ffb26d90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5586ffb3b458 <col:40, line:472:5>
|   |-ParenExpr 0x5586ffb3b270 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5586ffb3b240 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3af20 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3aef0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3ae40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3ae28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3ade8 <col:23> 'int' lvalue ParmVar 0x5586ffb26d18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3ae08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3aed0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3aea0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3ae60 <col:33> 'int' lvalue ParmVar 0x5586ffb26d18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5586ffb3aeb8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5586ffb3ae80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5586ffb3af80 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3af60 <col:56> 'int' 0
|   |   `-CallExpr 0x5586ffb3b1a0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3b188 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3b168 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3b1e0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3aff0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5586ffb3b1f8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3b020 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3b210 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3b058 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5586ffb3b228 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3b150 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3b138 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3b0f8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5586ffb3b438 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5586ffb3b3e0 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5586ffb3b3b0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5586ffb3b360 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5586ffb2f428
|     | |   `-CXXMemberCallExpr 0x5586ffb3b340 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5586ffb3b310 <col:2> '<bound member function type>' ->xanno 0x5586ffb245e8
|     | |       `-CXXThisExpr 0x5586ffb3b300 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5586ffb3b3c8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5586ffb3b390 <col:14> 'int' lvalue ParmVar 0x5586ffb26d18 'i' 'int'
|     `-ImplicitCastExpr 0x5586ffb3b420 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb3b400 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5586ffb26d90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5586ffb27068 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5586ffb26f70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5586ffb3bbd8 <col:36, line:485:5>
|   |-ParenExpr 0x5586ffb3b940 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3b910 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3b5f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3b5c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3b4d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3b4b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3b478 <col:23> 'int' lvalue ParmVar 0x5586ffb26f70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3b498 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3b5a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3b588 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3b4f0 <col:33> 'int' lvalue ParmVar 0x5586ffb26f70 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3b568 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3b550 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3b510 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3b530 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586ffb3b650 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3b630 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3b870 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3b858 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3b838 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3b8b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3b6c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586ffb3b8c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3b6f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3b8e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3b730 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5586ffb3b8f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3b820 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3b808 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3b7c8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5586ffb3bbc8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5586ffb3bbb0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5586ffb3bb98 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586ffb3bb68 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5586ffb3bb08 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586ffb3bad8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586ffb3ba50 <col:61, col:70> 'char const[48]' lvalue ->c 0x5586ffb2f300
|             |   `-CXXMemberCallExpr 0x5586ffb3ba30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586ffb3ba00 <col:61> '<bound member function type>' ->xanno 0x5586ffb24448
|             |       `-CXXThisExpr 0x5586ffb3b9f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586ffb3baf0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586ffb3ba80 <col:74> 'int' lvalue ParmVar 0x5586ffb26f70 'i' 'int'
|-CXXMethodDecl 0x5586ffb272b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5586ffb27128 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5586ffb271a0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5586ffb3c328 <col:42, line:500:5>
|   |-ParenExpr 0x5586ffb3c0c0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3c090 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3bd70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3bd40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3bc50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3bc38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3bbf8 <col:23> 'int' lvalue ParmVar 0x5586ffb27128 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3bc18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3bd20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3bd08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3bc70 <col:33> 'int' lvalue ParmVar 0x5586ffb27128 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3bce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3bcd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3bc90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3bcb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586ffb3bdd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3bdb0 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3bff0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3bfd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3bfb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3c030 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3be40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586ffb3c048 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3be78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3c060 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3beb0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5586ffb3c078 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3bfa0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3bf88 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3bf48 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5586ffb3c308 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5586ffb3c2b8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586ffb3c288 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5586ffb3c230 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586ffb3c200 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586ffb3c1b0 <col:48, col:57> 'char [48]' lvalue ->c 0x5586ffb2f300
|     |     |   `-CXXMemberCallExpr 0x5586ffb3c190 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586ffb3c160 <col:48> '<bound member function type>' ->xanno 0x5586ffb245e8
|     |     |       `-CXXThisExpr 0x5586ffb3c150 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586ffb3c218 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586ffb3c1e0 <col:61> 'int' lvalue ParmVar 0x5586ffb27128 'i' 'int'
|     `-ImplicitCastExpr 0x5586ffb3c2f0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb3c2d0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5586ffb271a0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5586ffb27478 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5586ffb27380 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5586ffb3ca88 <col:35, line:513:5>
|   |-ParenExpr 0x5586ffb3c798 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3c768 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3c4c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3c490 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3c3a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3c388 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3c348 <col:23> 'int' lvalue ParmVar 0x5586ffb27380 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3c368 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3c470 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3c458 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3c3c0 <col:33> 'int' lvalue ParmVar 0x5586ffb27380 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3c438 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3c420 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3c3e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3c400 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586ffb3c520 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3c500 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3c6c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3c6b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3c690 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3c708 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3c590 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586ffb3c720 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3c5c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3c738 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3c600 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5586ffb3c750 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3c678 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3c660 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3c620 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5586ffb3ca78 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5586ffb3ca60 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5586ffb3ca48 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586ffb3ca18 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5586ffb3c990 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586ffb3c960 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586ffb3c910 <col:60, col:69> 'char const[48]' lvalue ->c 0x5586ffb2f300
|             |   `-CXXMemberCallExpr 0x5586ffb3c8f0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586ffb3c8c0 <col:60> '<bound member function type>' ->xanno 0x5586ffb24448
|             |       `-CXXThisExpr 0x5586ffb3c8b0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586ffb3c978 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586ffb3c940 <col:73> 'int' lvalue ParmVar 0x5586ffb27380 'i' 'int'
|-CXXMethodDecl 0x5586ffb276c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5586ffb27538 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5586ffb275b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5586ffb3d1a8 <col:41, line:528:5>
|   |-ParenExpr 0x5586ffb3cf30 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3cf00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3cc20 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3cbf0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3cb00 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3cae8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3caa8 <col:23> 'int' lvalue ParmVar 0x5586ffb27538 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3cac8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3cbd0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3cbb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3cb20 <col:33> 'int' lvalue ParmVar 0x5586ffb27538 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3cb98 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3cb80 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3cb40 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3cb60 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5586ffb3cc80 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3cc60 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3ce60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3ce48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3ce28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3cea0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3ccf0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5586ffb3ceb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3cd28 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3ced0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3cd60 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5586ffb3cee8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3ce10 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3cdf8 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3cdb8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5586ffb3d188 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5586ffb3d138 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586ffb3d108 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5586ffb3d0b0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586ffb3d070 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586ffb3d020 <col:47, col:56> 'char [48]' lvalue ->c 0x5586ffb2f300
|     |     |   `-CXXMemberCallExpr 0x5586ffb3d000 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586ffb3cfd0 <col:47> '<bound member function type>' ->xanno 0x5586ffb245e8
|     |     |       `-CXXThisExpr 0x5586ffb3cfc0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586ffb3d088 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586ffb3d050 <col:60> 'int' lvalue ParmVar 0x5586ffb27538 'i' 'int'
|     `-ImplicitCastExpr 0x5586ffb3d170 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb3d150 <col:65> 'int16_t':'short' lvalue ParmVar 0x5586ffb275b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5586ffb27888 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5586ffb27790 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5586ffb3d878 <col:36, line:541:5>
|   |-ParenExpr 0x5586ffb3d618 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3d5e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3d340 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3d310 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3d220 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3d208 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3d1c8 <col:23> 'int' lvalue ParmVar 0x5586ffb27790 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3d1e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3d2f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3d2d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3d240 <col:33> 'int' lvalue ParmVar 0x5586ffb27790 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3d2b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3d2a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3d260 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3d280 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5586ffb3d3a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3d380 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3d548 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3d530 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3d510 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3d588 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3d410 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5586ffb3d5a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3d448 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3d5b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3d480 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5586ffb3d5d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3d4f8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3d4e0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3d4a0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5586ffb3d868 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5586ffb3d850 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5586ffb3d838 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586ffb3d808 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5586ffb3d7b0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586ffb3d780 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586ffb3d730 <col:61, col:70> 'char const[48]' lvalue ->c 0x5586ffb2f300
|             |   `-CXXMemberCallExpr 0x5586ffb3d710 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586ffb3d6e0 <col:61> '<bound member function type>' ->xanno 0x5586ffb24448
|             |       `-CXXThisExpr 0x5586ffb3d6d0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586ffb3d798 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586ffb3d760 <col:74> 'int' lvalue ParmVar 0x5586ffb27790 'i' 'int'
|-CXXMethodDecl 0x5586ffb27a58 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5586ffb27948 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5586ffb279c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5586ffb27b08 <col:20>
| `-OptimizeNoneAttr 0x5586ffb27b60 <col:30>
|-CXXMethodDecl 0x5586ffb27c98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5586ffb27ba0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5586ffb3df48 <col:35, line:562:5>
|   |-ParenExpr 0x5586ffb3dce8 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3dcb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3da10 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3d9e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3d8f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3d8d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3d898 <col:23> 'int' lvalue ParmVar 0x5586ffb27ba0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3d8b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3d9c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3d9a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3d910 <col:33> 'int' lvalue ParmVar 0x5586ffb27ba0 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3d988 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3d970 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3d930 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3d950 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5586ffb3da70 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3da50 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3dc18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3dc00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3dbe0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3dc58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3dae0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5586ffb3dc70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3db18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3dc88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3db50 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5586ffb3dca0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3dbc8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3dbb0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3db70 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5586ffb3df38 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5586ffb3df20 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5586ffb3df08 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586ffb3ded8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5586ffb3de80 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586ffb3de50 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586ffb3de00 <col:60, col:69> 'char const[48]' lvalue ->c 0x5586ffb2f300
|             |   `-CXXMemberCallExpr 0x5586ffb3dde0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586ffb3ddb0 <col:60> '<bound member function type>' ->xanno 0x5586ffb24448
|             |       `-CXXThisExpr 0x5586ffb3dda0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586ffb3de68 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586ffb3de30 <col:73> 'int' lvalue ParmVar 0x5586ffb27ba0 'i' 'int'
|-CXXMethodDecl 0x5586ffb27ea8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5586ffb27d58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5586ffb27dd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5586ffb3e628 <col:41, line:577:5>
|   |-ParenExpr 0x5586ffb3e3b8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3e388 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3e0e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3e0b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3dfc0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3dfa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3df68 <col:23> 'int' lvalue ParmVar 0x5586ffb27d58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3df88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3e090 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3e078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3dfe0 <col:33> 'int' lvalue ParmVar 0x5586ffb27d58 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3e058 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3e040 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3e000 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3e020 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5586ffb3e140 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3e120 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3e2e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3e2d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3e2b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3e328 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3e1b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5586ffb3e340 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3e1e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3e358 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3e220 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5586ffb3e370 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3e298 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3e280 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3e240 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5586ffb3e608 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5586ffb3e5b8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586ffb3e588 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5586ffb3e528 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586ffb3e4f8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586ffb3e4a8 <col:47, col:56> 'char [48]' lvalue ->c 0x5586ffb2f300
|     |     |   `-CXXMemberCallExpr 0x5586ffb3e488 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586ffb3e458 <col:47> '<bound member function type>' ->xanno 0x5586ffb245e8
|     |     |       `-CXXThisExpr 0x5586ffb3e448 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586ffb3e510 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586ffb3e4d8 <col:60> 'int' lvalue ParmVar 0x5586ffb27d58 'i' 'int'
|     `-ImplicitCastExpr 0x5586ffb3e5f0 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb3e5d0 <col:65> 'int32_t':'int' lvalue ParmVar 0x5586ffb27dd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5586ffb28068 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5586ffb27f70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5586ffb3ed58 <col:36, line:591:5>
|   |-ParenExpr 0x5586ffb3ea98 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3ea68 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3e7c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3e790 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3e6a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3e688 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3e648 <col:23> 'int' lvalue ParmVar 0x5586ffb27f70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3e668 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3e770 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3e758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3e6c0 <col:33> 'int' lvalue ParmVar 0x5586ffb27f70 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3e738 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3e720 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3e6e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3e700 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5586ffb3e820 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3e800 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3e9c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3e9b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3e990 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3ea08 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3e890 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5586ffb3ea20 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3e8c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3ea38 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3e900 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5586ffb3ea50 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3e978 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3e960 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3e920 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5586ffb3ed48 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5586ffb3ed30 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5586ffb3ed18 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586ffb3ece8 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5586ffb3ec60 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586ffb3ec30 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586ffb3ebe0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5586ffb2f300
|             |   `-CXXMemberCallExpr 0x5586ffb3ebc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586ffb3eb90 <col:61> '<bound member function type>' ->xanno 0x5586ffb24448
|             |       `-CXXThisExpr 0x5586ffb3eb80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586ffb3ec48 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586ffb3ec10 <col:74> 'int' lvalue ParmVar 0x5586ffb27f70 'i' 'int'
|-CXXMethodDecl 0x5586ffb282b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5586ffb28128 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5586ffb281a0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5586ffb3f438 <col:42, line:606:5>
|   |-ParenExpr 0x5586ffb3f1c8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5586ffb3f198 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3eef0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3eec0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3edd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3edb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3ed78 <col:23> 'int' lvalue ParmVar 0x5586ffb28128 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3ed98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3eea0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5586ffb3ee88 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3edf0 <col:33> 'int' lvalue ParmVar 0x5586ffb28128 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3ee68 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3ee50 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3ee10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5586ffb3ee30 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5586ffb3ef50 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3ef30 <col:60> 'int' 0
|   |   `-CallExpr 0x5586ffb3f0f8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3f0e0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3f0c0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3f138 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3efc0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5586ffb3f150 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3eff8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3f168 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3f030 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5586ffb3f180 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3f0a8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3f090 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3f050 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5586ffb3f418 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5586ffb3f3c8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586ffb3f398 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5586ffb3f338 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586ffb3f308 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586ffb3f2b8 <col:48, col:57> 'char [48]' lvalue ->c 0x5586ffb2f300
|     |     |   `-CXXMemberCallExpr 0x5586ffb3f298 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586ffb3f268 <col:48> '<bound member function type>' ->xanno 0x5586ffb245e8
|     |     |       `-CXXThisExpr 0x5586ffb3f258 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586ffb3f320 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586ffb3f2e8 <col:61> 'int' lvalue ParmVar 0x5586ffb28128 'i' 'int'
|     `-ImplicitCastExpr 0x5586ffb3f400 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5586ffb3f3e0 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5586ffb281a0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5586ffb28450 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5586ffb28380 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5586ffb3fca8 <col:33, line:620:5>
|   |-ParenExpr 0x5586ffb3fa20 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5586ffb3f9f0 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3f640 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3f610 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3f4b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3f498 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3f458 <col:23> 'int' lvalue ParmVar 0x5586ffb28380 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3f478 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3f5f0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5586ffb3f5d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3f4d0 <col:33> 'int' lvalue ParmVar 0x5586ffb28380 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3f5b8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3f5a0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3f4f0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5586ffb3f578 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5586ffb3f560 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5586ffb3f528 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5586ffb3f6a0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3f680 <col:79> 'int' 0
|   |   `-CallExpr 0x5586ffb3f950 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb3f938 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb3f918 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb3f990 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3f788 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5586ffb3f9a8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3f7d0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb3f9c0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb3f808 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5586ffb3f9d8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb3f900 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb3f8e8 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb3f8a8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5586ffb3fc98 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5586ffb3fc80 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5586ffb3fc68 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5586ffb3fc38 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5586ffb3fbb0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5586ffb3fb80 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5586ffb3fb30 <col:67, col:76> 'char const[48]' lvalue ->c 0x5586ffb2f300
|             |   `-CXXMemberCallExpr 0x5586ffb3fb10 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5586ffb3fae0 <col:67> '<bound member function type>' ->xanno 0x5586ffb24448
|             |       `-CXXThisExpr 0x5586ffb3fad0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5586ffb3fb98 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5586ffb3fb60 <col:80> 'int' lvalue ParmVar 0x5586ffb28380 'i' 'int'
|-CXXMethodDecl 0x5586ffb28668 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5586ffb28510 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5586ffb28590 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5586ffb404d0 <col:45, line:635:5>
|   |-ParenExpr 0x5586ffb40218 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5586ffb401e8 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5586ffb3feb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5586ffb3fe80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5586ffb3fd20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5586ffb3fd08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5586ffb3fcc8 <col:23> 'int' lvalue ParmVar 0x5586ffb28510 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5586ffb3fce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5586ffb3fe60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5586ffb3fe48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5586ffb3fd40 <col:33> 'int' lvalue ParmVar 0x5586ffb28510 'i' 'int'
|   |   |     `-BinaryOperator 0x5586ffb3fe28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5586ffb3fe10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5586ffb3fd60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5586ffb24830 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5586ffb3fde8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5586ffb3fdd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5586ffb3fd98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5586ffb3ff10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5586ffb3fef0 <col:79> 'int' 0
|   |   `-CallExpr 0x5586ffb40148 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5586ffb40130 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5586ffb40110 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x5586ff691100 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5586ffb40188 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3ff80 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5586ffb401a0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5586ffb3ffc8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5586ffb401b8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5586ffb40000 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5586ffb401d0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5586ffb400f8 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5586ffb400e0 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5586ffb40098 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5586ffb404b0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5586ffb40418 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5586ffb403e8 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5586ffb40388 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5586ffb40358 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5586ffb40308 <col:54, col:63> 'char [48]' lvalue ->c 0x5586ffb2f300
|     |     |   `-CXXMemberCallExpr 0x5586ffb402e8 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5586ffb402b8 <col:54> '<bound member function type>' ->xanno 0x5586ffb245e8
|     |     |       `-CXXThisExpr 0x5586ffb402a8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5586ffb40370 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5586ffb40338 <col:67> 'int' lvalue ParmVar 0x5586ffb28510 'i' 'int'
|     `-CXXConstCastExpr 0x5586ffb40480 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5586ffb40468 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5586ffb40430 <col:91> 'const void *' lvalue ParmVar 0x5586ffb28590 'x' 'const void *'
|-CXXMethodDecl 0x5586ffb28738 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5586ffb40558 <col:34, line:640:5>
|   `-ReturnStmt 0x5586ffb40548 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5586ffb40530 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5586ffb40500 <col:16> 'Packet *' lvalue ->_data_packet 0x5586ffb2feb8
|         `-CXXThisExpr 0x5586ffb404f0 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5586ffb28878 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5586ffb287e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5586ffb39618 <col:46> 'bool' true
|-CXXMethodDecl 0x5586ffb289f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5586ffb28930 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5586ffb28aa0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5586ffb29250 <line:660:22> "" ""
| |-EnumConstantDecl 0x5586ffb28ba0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb292c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28b80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5586ffb28b60 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5586ffb1dd00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5586ffb28c30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb292d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28c10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5586ffb28bf0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5586ffb1dd90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5586ffb28cc0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb292f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28ca0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5586ffb28c80 <col:21> 'int' 0
| |-EnumConstantDecl 0x5586ffb28d50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29308 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28d30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5586ffb28d10 <col:19> 'int' 16
| |-EnumConstantDecl 0x5586ffb28de0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29320 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28dc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5586ffb28da0 <col:21> 'int' 16
| |-EnumConstantDecl 0x5586ffb28e70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29338 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28e50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5586ffb28e30 <col:19> 'int' 32
| |-EnumConstantDecl 0x5586ffb28f00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29350 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28ee0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5586ffb28ec0 <col:19> 'int' EnumConstant 0x5586ffb28d50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5586ffb28f90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29368 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb28f70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5586ffb28f50 <col:19> 'int' EnumConstant 0x5586ffb28e70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5586ffb29060 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29380 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb29040 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5586ffb29020 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5586ffb28fe0 <col:23> 'int' EnumConstant 0x5586ffb28f90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5586ffb29000 <col:40> 'int' 2
| |-EnumConstantDecl 0x5586ffb29130 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5586ffb29398 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffb29110 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5586ffb290f0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5586ffb290b0 <col:23> 'int' EnumConstant 0x5586ffb28f90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5586ffb290d0 <col:40> 'int' 4
| `-EnumConstantDecl 0x5586ffb29200 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5586ffb293b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5586ffb291e0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5586ffb291c0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5586ffb29180 <col:23> 'int' EnumConstant 0x5586ffb28f90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5586ffb291a0 <col:40> 'int' 8
|-CXXMethodDecl 0x5586ffb293f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5586ffb29490 <col:68> "" ""
|-CXXMethodDecl 0x5586ffb29528 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5586ffb295c8 <col:45> "" ""
|-CXXMethodDecl 0x5586ffb29660 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5586ffb29700 <col:57> "" ""
|-CXXMethodDecl 0x5586ffb29798 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5586ffb29838 <col:45> "" ""
|-CXXMethodDecl 0x5586ffb298d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5586ffb29970 <col:57> "" ""
|-CXXMethodDecl 0x5586ffb29a00 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5586ffb29aa0 <col:51> "" ""
|-CXXMethodDecl 0x5586ffb29b30 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5586ffb29bd0 <col:63> "" ""
|-CXXMethodDecl 0x5586ffb29c60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5586ffb29d00 <col:53> "" ""
|-CXXMethodDecl 0x5586ffb29d90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5586ffb29e30 <col:65> "" ""
|-CXXMethodDecl 0x5586ffb29f48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5586ffb29eb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5586ffb29ff0 <col:61> "" ""
|-CXXMethodDecl 0x5586ffb2a188 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5586ffb2a078 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5586ffb2a0f0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5586ffb2a238 <col:67> "" ""
|-CXXMethodDecl 0x5586ffb2a350 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2a2c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5586ffb2a3f8 <col:63> "" ""
|-CXXMethodDecl 0x5586ffb2a590 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5586ffb2a480 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586ffb2a4f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5586ffb2a640 <col:69> "" ""
|-CXXMethodDecl 0x5586ffb2a758 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2a6c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5586ffb2a800 <col:63> "" ""
|-CXXMethodDecl 0x5586ffb2ced8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5586ffb2cdc8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586ffb2ce40 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5586ffb2cf88 <col:69> "" ""
|-CXXMethodDecl 0x5586ffb2d0a0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2d010 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5586ffb2d148 <col:62> "" ""
|-CXXMethodDecl 0x5586ffb2d2e0 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5586ffb2d1d0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586ffb2d248 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5586ffb2d390 <col:68> "" ""
|-CXXMethodDecl 0x5586ffb2d4a8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2d418 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5586ffb2d550 <col:63> "" ""
|-CXXMethodDecl 0x5586ffb2d6e8 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5586ffb2d5d8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5586ffb2d650 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5586ffb2d798 <col:69> "" ""
|-CXXMethodDecl 0x5586ffb2d828 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5586ffb2d8c8 <col:64> "" ""
|-CXXMethodDecl 0x5586ffb2d958 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5586ffb2d9f8 <col:52> "" ""
|-CXXMethodDecl 0x5586ffb2da88 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5586ffb2db28 <col:67> "" ""
|-CXXMethodDecl 0x5586ffb2dbb8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5586ffb2dc58 <col:55> "" ""
|-CXXMethodDecl 0x5586ffb2dd70 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2dce0 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5586ffb2de18 <col:58> "" ""
|-CXXMethodDecl 0x5586ffb2dfb0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5586ffb2dea0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586ffb2df18 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5586ffb2e060 <col:62> "" ""
|-CXXMethodDecl 0x5586ffb2e178 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2e0e8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5586ffb2e220 <col:58> "" ""
|-CXXMethodDecl 0x5586ffb2e3b8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5586ffb2e2a8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586ffb2e320 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5586ffb2e468 <col:62> "" ""
|-CXXMethodDecl 0x5586ffb2e580 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2e4f0 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5586ffb2e628 <col:60> "" ""
|-CXXMethodDecl 0x5586ffb2e7c0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5586ffb2e6b0 <col:34> col:37 'int'
| |-ParmVarDecl 0x5586ffb2e728 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5586ffb2e870 <col:64> "" ""
|-CXXMethodDecl 0x5586ffb2e988 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2e8f8 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5586ffb2ea30 <col:58> "" ""
|-CXXMethodDecl 0x5586ffb2ebc8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5586ffb2eab8 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586ffb2eb30 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5586ffb2ec78 <col:62> "" ""
|-CXXMethodDecl 0x5586ffb2ed90 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5586ffb2ed00 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5586ffb2ee38 <col:59> "" ""
|-CXXMethodDecl 0x5586ffb2efd0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5586ffb2eec0 <col:33> col:36 'int'
| |-ParmVarDecl 0x5586ffb2ef38 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5586ffb2f080 <col:63> "" ""
|-AccessSpecDecl 0x5586ffb2f0f0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5586ffb2f118 prev 0x5586ffb24320 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586ffb2f210 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5586ffb2f300 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5586ffb2f428 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5586ffb2f5a8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5586ffb2f728 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5586ffb2f8a8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5586ffb406d8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5586ffb40f48 <col:11>
| |-CXXDestructorDecl 0x5586ffb407b0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5586ffb408e8 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5586ffb408e8
| | `-ParmVarDecl 0x5586ffb409f8 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5586ffb40a98 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586ffb40a98
| | `-ParmVarDecl 0x5586ffb40ba8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5586ffb43968 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5586ffb43a78 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5586ffb43cf8 <col:11>
| |   `-ReturnStmt 0x5586ffb43ce8 <col:11>
| |     `-UnaryOperator 0x5586ffb43cd0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5586ffb43cc0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5586ffb43ae8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5586ffb43ae8
|   `-ParmVarDecl 0x5586ffb43bf8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5586ffb2f910 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5586ffb2fa28 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5586ffb2fac8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5586ffb2fb30 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5586ffb2fb98 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5586ffb2fc00 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5586ffb2fc60 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5586ffb2fd20 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5586ffb2fd80 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5586ffb2fde0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5586ffb405e8 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5586ffb2fac8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5586ffb40f58 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5586ffb40fb0 <col:12>
| |-CXXConstructorDecl 0x5586ffb40c18 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5586ffb40c18
| | `-ParmVarDecl 0x5586ffb40d28 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5586ffb40dc8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5586ffb40dc8
| | `-ParmVarDecl 0x5586ffb40ed8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5586ffb43050 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5586ffb2fe58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5586ffb2feb8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5586ffb2ff20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5586ffb2ff88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5586ffb2fff0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5586ffb30058 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5586ffb300b8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5586ffb30118 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5586ffb30180 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5586ffb30208 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5586ffb2fe58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5586ffb40580 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5586ffb300b8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5586ffb40fc0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5586ffb41020 <col:21, line:755:5>
|-CXXConstructorDecl 0x5586ffb303a8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5586ffb302e8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5586ffb304a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5586ffb30688 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5586ffb30590 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5586ffb30958 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5586ffb30740 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ffb307b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5586ffb30830 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb30b78 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5586ffb30a28 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5586ffb30aa0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5586ffb39158 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5586ffb30c38 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5586ffb30cb0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5586ffb30d28 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5586ffb392b0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5586ffb39220 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb393f8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5586ffb39368 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5586ffb394f0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class WritablePacket
         0 |   class Packet (base)
         0 |     class atomic_uint32_t _use_count
         0 |       uint32_t _val
         8 |     class Packet * _data_packet
        16 |     unsigned char * _head
        24 |     unsigned char * _data
        32 |     unsigned char * _tail
        40 |     unsigned char * _end
        48 |     struct Packet::AllAnno _aa
        48 |       union Packet::Anno cb
        48 |         char [48] c
        48 |         uint8_t [48] u8
        48 |         uint16_t [24] u16
        48 |         uint32_t [12] u32
        48 |         uint64_t [6] u64
        96 |       unsigned char * mac
       104 |       unsigned char * nh
       112 |       unsigned char * h
       120 |       enum Packet::PacketType pkt_type
       124 |       char [8] timestamp
       136 |       class Packet * next
       144 |       class Packet * prev
       152 |     Packet::buffer_destructor_type _destructor
       160 |     void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffb410c0 prev 0x5586ffb1d980 <../dummy_inc/click/packet.hh:778:1, line:816:1> line:778:7 referenced class WritablePacket definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Packet'
|-CXXRecordDecl 0x5586ffb411f8 <col:1, col:7> col:7 implicit referenced class WritablePacket
|-AccessSpecDecl 0x5586ffb41288 <col:40, col:46> col:40 public
|-CXXMethodDecl 0x5586ffb41330 <line:780:5, col:62> col:55 data 'unsigned char *() const'
| |-NoInlineAttr 0x5586ffb413d0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb41428 <col:30>
|-CXXMethodDecl 0x5586ffb41478 <line:781:5, col:66> col:55 end_data 'unsigned char *() const'
| |-NoInlineAttr 0x5586ffb41518 <col:20>
| `-OptimizeNoneAttr 0x5586ffb41570 <col:30>
|-CXXMethodDecl 0x5586ffb415c0 <line:782:5, col:36> col:27 buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb41688 <line:783:5, col:40> col:27 end_buffer 'unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb41750 <line:784:5, col:40> col:27 mac_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb41868 <line:785:5, col:40> col:25 ether_header 'click_ether *() const' inline
|-CXXMethodDecl 0x5586ffb41930 <line:786:5, col:72> col:55 network_header 'unsigned char *() const'
| |-NoInlineAttr 0x5586ffb419d0 <col:20>
| `-OptimizeNoneAttr 0x5586ffb41a28 <col:30>
|-CXXMethodDecl 0x5586ffb41a98 <line:787:5, col:62> col:50 ip_header 'click_ip *() const'
| |-NoInlineAttr 0x5586ffb41b38 <col:20>
| `-OptimizeNoneAttr 0x5586ffb41b90 <col:30>
|-CXXMethodDecl 0x5586ffb41c38 <line:788:5, col:64> col:51 ip6_header 'click_ip6 *() const'
| |-NoInlineAttr 0x5586ffb41cd8 <col:20>
| `-OptimizeNoneAttr 0x5586ffb41d30 <col:30>
|-CXXMethodDecl 0x5586ffb41d80 <line:789:5, col:46> col:27 transport_header 'unsigned char *() const' inline
|-CXXMethodDecl 0x5586ffb41e98 <line:790:5, col:38> col:24 icmp_header 'click_icmp *() const' inline
|-CXXMethodDecl 0x5586ffb41fb8 <line:791:5, col:36> col:23 tcp_header 'click_tcp *() const' inline
|-CXXMethodDecl 0x5586ffb420d8 <line:792:5, col:36> col:23 udp_header 'click_udp *() const' inline
|-CXXMethodDecl 0x5586ffb421a0 <line:795:5, col:73> col:27 buffer_data 'unsigned char *() const' inline
| `-DeprecatedAttr 0x5586ffb42240 <col:62> "" ""
|-AccessSpecDecl 0x5586ffb422b0 <line:798:2, col:9> col:2 private
|-CXXConstructorDecl 0x5586ffb42310 <line:800:5, col:31> col:12 WritablePacket 'void ()' inline
| |-CXXCtorInitializer 'Packet'
| | `-CXXConstructExpr 0x5586ffb42f08 <col:12> 'Packet' 'void ()'
| `-CompoundStmt 0x5586ffb43130 <col:29, col:31>
|-CXXMethodDecl 0x5586ffb423d8 <line:802:5, col:28> col:17 initialize 'void ()' inline
|-CXXConstructorDecl 0x5586ffb42518 <line:804:5, col:35> col:5 WritablePacket 'void (const Packet &)'
| `-ParmVarDecl 0x5586ffb42488 <col:20, col:34> col:34 x 'const Packet &'
|-CXXDestructorDecl 0x5586ffb42610 <line:805:5, col:25> col:5 ~WritablePacket 'void () noexcept'
| `-CompoundStmt 0x5586ffb43140 <col:23, col:25>
|-CXXMethodDecl 0x5586ffb427c8 <line:808:5, col:56> col:28 pool_allocate 'WritablePacket *(bool)' static
| `-ParmVarDecl 0x5586ffb42700 <col:42, col:47> col:47 with_data 'bool'
|-CXXMethodDecl 0x5586ffb42a98 <line:809:5, line:810:24> line:809:28 pool_allocate 'WritablePacket *(uint32_t, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5586ffb42880 <col:42, col:51> col:51 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5586ffb428f8 <col:61, col:70> col:70 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5586ffb42970 <line:810:7, col:16> col:16 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5586ffb42c28 <line:811:5, col:42> col:17 recycle 'void (WritablePacket *)' static
| `-ParmVarDecl 0x5586ffb42b60 <col:25, col:41> col:41 p 'WritablePacket *'
|-FriendDecl 0x5586ffb42d20 <line:814:5, col:18> col:12 'class Packet':'Packet'
`-CXXConstructorDecl 0x5586ffb42d88 <line:778:7> col:7 implicit WritablePacket 'void (const WritablePacket &)' inline default noexcept-unevaluated 0x5586ffb42d88
  `-ParmVarDecl 0x5586ffb42e98 <col:7> col:7 'const WritablePacket &'

Layout: <CGRecordLayout
  LLVMType:%class.WritablePacket = type { %class.Packet }
  NonVirtualBaseLLVMType:%class.WritablePacket = type { %class.Packet }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffc13270 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5586ffc13388 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5586ffc13418 <col:16, col:22> col:16 public
|-EnumDecl 0x5586ffc13440 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5586ffc13540 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5586ffc13790 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc13520 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5586ffc13500 <col:21> 'int' 0
| |-EnumConstantDecl 0x5586ffc135d0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5586ffc137a8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc135b0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5586ffc13590 <col:24> 'int' 22
| |-EnumConstantDecl 0x5586ffc13660 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5586ffc137c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc13640 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5586ffc13620 <col:24> 'int' 34
| |-EnumConstantDecl 0x5586ffc136f0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5586ffc137d8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5586ffc136d0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5586ffc136b0 <col:25> 'int' 95
| `-EnumConstantDecl 0x5586ffc13740 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5586ffc15150 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5586ffc15588 <col:7>
|-CXXConstructorDecl 0x5586ffc15258 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5586ffc15258
| `-ParmVarDecl 0x5586ffc15368 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5586ffc15408 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586ffc15518 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x5586ffc74170 <col:7>
`-CXXDestructorDecl 0x5586ffc176a8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5586ffc13808 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5586ffc13968 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5586ffc139f8 <col:32, col:38> col:32 public
|-TypedefDecl 0x5586ffc13a30 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x5586ff74a650 'uint32_t' sugar
|   |-Typedef 0x5586ff65e4c8 'uint32_t'
|   `-TypedefType 0x5586ff6375a0 '__uint32_t' sugar
|     |-Typedef 0x5586ff637198 '__uint32_t'
|     `-BuiltinType 0x5586ff5f5620 'unsigned int'
|-CXXConstructorDecl 0x5586ffc13b78 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5586ffc13aa0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5586ffc15058 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5586ffc15598 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5586ffc14910 'base' 'int'
| | `-ImplicitCastExpr 0x5586ffc150f8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5586ffc150b8 <col:16> 'int' lvalue ParmVar 0x5586ffc13aa0 'b' 'int'
| `-CompoundStmt 0x5586ffc15608 <col:19, line:1046:5>
|-CXXMethodDecl 0x5586ffc14070 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5586ffc13c40 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5586ffc13cc0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5586ffc13d38 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5586ffc13db8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5586ffc13e78 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5586ffc13ef8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5586ffc144c8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5586ffc14140 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5586ffc14428 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5586ffc141e8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5586ffc14288 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5586ffc14300 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5586ffc15078 <col:82> 'const ArgContext' lvalue Var 0x5586ffc080a8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5586ffc16558 <col:94, line:1067:5>
| |   |-DeclStmt 0x5586ffc15798 <line:1054:9, col:64>
| |   | `-VarDecl 0x5586ffc15628 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5586ffc15750 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5586ffc159b8 <line:1055:9, col:91>
| |   | `-VarDecl 0x5586ffc157c8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5586ffc15990 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5586ffc15970 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5586ffc15920 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5586ffc15900 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5586ffc158a8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5586ffc15858 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5586ffc15888 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5586ffc158e8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5586ffc158c8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5586ffc15950 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5586ffc15b18 <line:1056:9, col:27>
| |   | `-VarDecl 0x5586ffc15ab0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5586ffc15f60 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5586ffc15e90 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5586ffc15e10 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5586ffb14638 0x5586ff95dc18 0x5586ff95d8f0 0x5586ff94e0c0 0x5586ff94dd70 0x5586ff94d660 0x5586ff91ffd0 0x5586ff8ad4a0
| |   | | |-CallExpr 0x5586ffc15d50 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5586ffc15b40 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5586ffc15bf0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5586ffc15bc0 <col:19, col:23> '<bound member function type>' .begin 0x5586ff93d2c8
| |   | | | |   `-DeclRefExpr 0x5586ffc15ba0 <col:19> 'const String' lvalue ParmVar 0x5586ffc141e8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5586ffc15c60 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5586ffc15c30 <col:32, col:36> '<bound member function type>' .end 0x5586ff93d4e0
| |   | | | |   `-DeclRefExpr 0x5586ffc15c10 <col:32> 'const String' lvalue ParmVar 0x5586ffc141e8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5586ffc15c80 <col:43> 'const bool' lvalue Var 0x5586ffc15628 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5586ffc15ce8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5586ffc15cc8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5586ffc15d10 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5586ffc15ab0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5586ffc15d30 <col:73> 'const int' lvalue Var 0x5586ffc157c8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5586ffc15df0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5586ffc15dc0 <col:16, col:20> '<bound member function type>' .end 0x5586ff93d4e0
| |   | |     `-DeclRefExpr 0x5586ffc15da0 <col:16> 'const String' lvalue ParmVar 0x5586ffc141e8 'str' 'const String &'
| |   | `-BinaryOperator 0x5586ffc15f40 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5586ffc15ed8 <col:13> 'int' lvalue ->status 0x5586ffc14978
| |   |   | `-CXXThisExpr 0x5586ffc15ec8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5586ffc15f28 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5586ffc15f08 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc135d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5586ffc161d8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5586ffc16098 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5586ffc16080 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5586ffc16068 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5586ffc15f88 <col:13> 'int' lvalue ->status 0x5586ffc14978
| |   | | |     `-CXXThisExpr 0x5586ffc15f78 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5586ffc16048 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5586ffc16018 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5586ffc15fc8 <col:23> 'int' lvalue ->status 0x5586ffc14978
| |   | |   |   `-CXXThisExpr 0x5586ffc15fb8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5586ffc16030 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5586ffc15ff8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc13660 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5586ffc161b8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5586ffc16158 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5586ffc16100 <col:13, col:18> '<bound member function type>' .error 0x5586ffad7e60
| |   |   | | `-DeclRefExpr 0x5586ffc160e0 <col:13> 'const ArgContext' lvalue ParmVar 0x5586ffc14300 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5586ffc16180 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5586ffc16130 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5586ffc161a8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5586ffc16198 <col:20> 'bool' false
| |   |-DeclStmt 0x5586ffc163a8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5586ffc16350 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5586ffc162e0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5586ffc16508 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5586ffc163c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5586ff8e1468
| |   | |-DeclRefExpr 0x5586ffc16408 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5586ffc15ab0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5586ffc164d8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5586ffc16450 <col:64> 'V' lvalue ParmVar 0x5586ffc14288 'result' 'V &'
| |   `-ReturnStmt 0x5586ffc16548 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5586ffc16538 <col:16> 'bool' true
| `-CXXMethodDecl 0x5586ffc7a1c8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5586ffc79fa0 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x5586ffc7a078 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x5586ffc7a0e0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x5586ffc7bf60 <col:94, line:1067:5>
|     |-DeclStmt 0x5586ffc7a9d8 <line:1054:9, col:64>
|     | `-VarDecl 0x5586ffc7a7f8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x5586ffc7a968 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x5586ffc7a938 <col:36, col:55> 'const bool' lvalue Var 0x5586ff8d13d8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x5586ffc7abb8 <line:1055:9, col:91>
|     | `-VarDecl 0x5586ffc7a9f0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x5586ffc7ab38 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x5586ffc7ab20 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x5586ffc7ab00 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x5586ffc7aae0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x5586ffc7aac0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x5586ffc7aa88 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x5586ffc7aa68 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5586ffc15888 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x5586ffc7aaa8 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5586ffc158c8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5586ffc15950 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x5586ffc7ad50 <line:1056:9, col:27>
|     | `-VarDecl 0x5586ffc7ace8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5586ffc7b1d8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x5586ffc7b180 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x5586ffc7b038 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x5586ffc7b008 <col:13> '<bound member function type>' ->parse 0x5586ffc14070
|     | | | | `-CXXThisExpr 0x5586ffc7aff8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x5586ffc7ae98 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5586ffc7ae68 <col:19, col:23> '<bound member function type>' .begin 0x5586ff93d2c8
|     | | | |   `-DeclRefExpr 0x5586ffc7ae48 <col:19> 'const String' lvalue ParmVar 0x5586ffc79fa0 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x5586ffc7af08 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x5586ffc7aed8 <col:32, col:36> '<bound member function type>' .end 0x5586ff93d4e0
|     | | | |   `-DeclRefExpr 0x5586ffc7aeb8 <col:32> 'const String' lvalue ParmVar 0x5586ffc79fa0 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x5586ffc7b0a8 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x5586ffc7b088 <col:43> 'const bool' lvalue Var 0x5586ffc7a7f8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x5586ffc7af90 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x5586ffc7af78 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x5586ffc7af58 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x5586ffc7b0c0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x5586ffc7afb8 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x5586ffc7ace8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5586ffc7b0f8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5586ffc7b0d8 <col:73> 'const int' lvalue Var 0x5586ffc7a9f0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x5586ffc7b160 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x5586ffc7b130 <col:16, col:20> '<bound member function type>' .end 0x5586ff93d4e0
|     | |     `-DeclRefExpr 0x5586ffc7b110 <col:16> 'const String' lvalue ParmVar 0x5586ffc79fa0 'str' 'const String &'
|     | `-BinaryOperator 0x5586ffc7b1b8 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5586ffc15ed8 <col:13> 'int' lvalue ->status 0x5586ffc14978
|     |   | `-CXXThisExpr 0x5586ffc15ec8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x5586ffc7b1a0 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5586ffc15f08 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc135d0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x5586ffc7b350 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x5586ffc7b270 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x5586ffc7b258 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x5586ffc7b240 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5586ffc15f88 <col:13> 'int' lvalue ->status 0x5586ffc14978
|     | | |     `-CXXThisExpr 0x5586ffc15f78 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x5586ffc7b220 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5586ffc7b1f0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5586ffc15fc8 <col:23> 'int' lvalue ->status 0x5586ffc14978
|     | |   |   `-CXXThisExpr 0x5586ffc15fb8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5586ffc7b208 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5586ffc15ff8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc13660 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x5586ffc7b330 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5586ffc7b2e0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x5586ffc7b2b0 <col:13, col:18> '<bound member function type>' .error 0x5586ffad7e60
|     |   | | `-DeclRefExpr 0x5586ffc7b290 <col:13> 'const ArgContext' lvalue ParmVar 0x5586ffc7a0e0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5586ffc7b308 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5586ffc16130 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x5586ffc7b320 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5586ffc16198 <col:20> 'bool' false
|     |-DeclStmt 0x5586ffc7b898 <line:1064:9, col:64>
|     | `-TypedefDecl 0x5586ffc7b840 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5586ffc7b7f0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x5586ffc7b7d0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x5586ffc7b760 'type'
|     |       `-ElaboratedType 0x5586ffc7b710 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x5586ffc7b6f0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x5586ff8d1530 'unsigned_type'
|     |           `-BuiltinType 0x5586ff5f5620 'unsigned int'
|     |-CallExpr 0x5586ffc7bef0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x5586ffc7bed8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x5586ffc7be58 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x5586ffc7bd38 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5586ff8e1468 'extract_integer')
|     | |-ImplicitCastExpr 0x5586ffc7bf38 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x5586ffc7bf20 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5586ffc7b8f8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x5586ffc7ace8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5586ffc7b9c8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x5586ffc7b978 <col:64> 'int':'int' lvalue ParmVar 0x5586ffc7a078 'result' 'int &'
|     `-ReturnStmt 0x5586ffc7bf50 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5586ffc16538 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5586ffc14888 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5586ffc14538 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5586ffc147e8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5586ffc145e8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5586ffc14688 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5586ffc14700 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5586ffc15098 <col:71> 'const ArgContext' lvalue Var 0x5586ffc080a8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5586ffc16cc8 <col:83, line:1083:5>
| |   |-DeclStmt 0x5586ffc16620 <line:1071:9, col:12>
| |   | `-VarDecl 0x5586ffc165b8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5586ffc16ca0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5586ffc168b0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5586ffc16738 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5586ffc16700 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5586ffc16648 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5586ffc166a0 <col:31> 'const String' lvalue ParmVar 0x5586ffc145e8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5586ffc166c0 <col:36> 'V' lvalue Var 0x5586ffc165b8 'x' 'V'
| |     | |   `-DeclRefExpr 0x5586ffc166e0 <col:39> 'const ArgContext' lvalue ParmVar 0x5586ffc14700 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5586ffc16890 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5586ffc16870 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5586ffc16858 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5586ffc16840 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5586ffc16760 <col:17> 'int' lvalue ->status 0x5586ffc14978
| |     |     |     `-CXXThisExpr 0x5586ffc16750 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5586ffc16820 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5586ffc167f0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5586ffc167a0 <col:27> 'int' lvalue ->status 0x5586ffc14978
| |     |       |   `-CXXThisExpr 0x5586ffc16790 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5586ffc16808 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5586ffc167d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc13660 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5586ffc168e0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5586ffc168d0 <col:20> 'bool' false
| |     `-IfStmt 0x5586ffc16c78 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5586ffc16980 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5586ffc16950 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5586ffc16900 <col:18> 'int' lvalue ->status 0x5586ffc14978
| |       | |   `-CXXThisExpr 0x5586ffc168f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5586ffc16968 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5586ffc16930 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc13660 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5586ffc16bb8 <col:42, line:1079:9>
| |       | |-CallExpr 0x5586ffc16b60 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5586ffc169b0 <line:1076:13> '<bound member function type>' ->range_error 0x5586ffc14f88
| |       | | | `-CXXThisExpr 0x5586ffc169a0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5586ffc169e0 <col:25> 'const ArgContext' lvalue ParmVar 0x5586ffc14700 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5586ffc16ac0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5586ffc16b38 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5586ffc16b18 <col:43> 'V' lvalue Var 0x5586ffc165b8 'x' 'V'
| |       | `-ReturnStmt 0x5586ffc16ba8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5586ffc16b98 <col:20> 'bool' false
| |       `-CompoundStmt 0x5586ffc16c58 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5586ffc16c18 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5586ffc16bd8 <col:13> 'V' lvalue ParmVar 0x5586ffc14688 'result' 'V &'
| |         | `-DeclRefExpr 0x5586ffc16bf8 <col:22> 'V' lvalue Var 0x5586ffc165b8 'x' 'V'
| |         `-ReturnStmt 0x5586ffc16c48 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5586ffc16c38 <col:20> 'bool' true
| `-CXXMethodDecl 0x5586ffc79b88 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x5586ffc79960 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x5586ffc79a38 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x5586ffc79aa0 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5586ffc7a7d8 <col:83, line:1083:5>
|     |-DeclStmt 0x5586ffc79e10 <line:1071:9, col:12>
|     | `-VarDecl 0x5586ffc79da8 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x5586ffc7a7b0 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x5586ffc7a440 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x5586ffc7a368 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x5586ffc7a330 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5586ffc7a2e8 <col:14> '<bound member function type>' ->parse_saturating 0x5586ffc7a1c8
|       | |   | `-CXXThisExpr 0x5586ffc7a2d8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x5586ffc79e80 <col:31> 'const String' lvalue ParmVar 0x5586ffc79960 'str' 'const String &'
|       | |   |-DeclRefExpr 0x5586ffc79ea0 <col:36> 'int':'int' lvalue Var 0x5586ffc79da8 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x5586ffc79ec0 <col:39> 'const ArgContext' lvalue ParmVar 0x5586ffc79aa0 'args' 'const ArgContext &'
|       | `-ParenExpr 0x5586ffc7a420 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5586ffc7a400 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5586ffc7a3e8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5586ffc7a3d0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5586ffc16760 <col:17> 'int' lvalue ->status 0x5586ffc14978
|       |     |     `-CXXThisExpr 0x5586ffc16750 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x5586ffc7a3b0 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x5586ffc7a380 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5586ffc167a0 <col:27> 'int' lvalue ->status 0x5586ffc14978
|       |       |   `-CXXThisExpr 0x5586ffc16790 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x5586ffc7a398 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5586ffc167d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc13660 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x5586ffc7a460 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5586ffc168d0 <col:20> 'bool' false
|       `-IfStmt 0x5586ffc7a788 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x5586ffc7a4a0 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x5586ffc7a470 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5586ffc16900 <col:18> 'int' lvalue ->status 0x5586ffc14978
|         | |   `-CXXThisExpr 0x5586ffc168f0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x5586ffc7a488 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5586ffc16930 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5586ffc13660 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5586ffc7a6c0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x5586ffc7a630 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5586ffc169b0 <line:1076:13> '<bound member function type>' ->range_error 0x5586ffc14f88
|         | | | `-CXXThisExpr 0x5586ffc169a0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5586ffc7a4c0 <col:25> 'const ArgContext' lvalue ParmVar 0x5586ffc79aa0 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x5586ffc7a698 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x5586ffc7a668 <col:31, col:50> 'const bool' lvalue Var 0x5586ff8d13d8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5586ffc7a608 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5586ffc7a5f0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5586ffc7a5d8 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x5586ffc7a5b8 <col:43> 'int':'int' lvalue Var 0x5586ffc79da8 'x' 'int':'int'
|         | `-ReturnStmt 0x5586ffc7a6b0 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5586ffc16b98 <col:20> 'bool' false
|         `-CompoundStmt 0x5586ffc7a768 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x5586ffc7a738 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x5586ffc7a6e0 <col:13> 'int':'int' lvalue ParmVar 0x5586ffc79a38 'result' 'int &'
|           | `-ImplicitCastExpr 0x5586ffc7a720 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5586ffc7a700 <col:22> 'int':'int' lvalue Var 0x5586ffc79da8 'x' 'int':'int'
|           `-ReturnStmt 0x5586ffc7a758 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5586ffc16c38 <col:20> 'bool' true
|-FieldDecl 0x5586ffc14910 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5586ffc14978 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5586ffc149c8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5586ffc14c80 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5586ffc14a08 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5586ffc14a88 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5586ffc14b00 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5586ffc14b80 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5586ffc14f88 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5586ffc14d50 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5586ffc14dc8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5586ffc14e60 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5586ffc17528 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5586ffc17528
| `-ParmVarDecl 0x5586ffc17638 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5586ffc177b8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586ffc178c8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5586ffc74180 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5586ffc74150 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x5586ffc74120 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5586ffc740f0 <col:7> 'IntArg' lvalue ParmVar 0x5586ffc178c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5586ffc14910 'base' 'int'
| | `-ImplicitCastExpr 0x5586ffc74278 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5586ffc74248 <col:7> 'int' xvalue .base 0x5586ffc14910
| |     `-CXXStaticCastExpr 0x5586ffc74218 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5586ffc741e8 <col:7> 'IntArg' lvalue ParmVar 0x5586ffc178c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5586ffc14978 'status' 'int'
| | `-ImplicitCastExpr 0x5586ffc74348 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5586ffc74318 <col:7> 'int' xvalue .status 0x5586ffc14978
| |     `-CXXStaticCastExpr 0x5586ffc742e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5586ffc742b8 <col:7> 'IntArg' lvalue ParmVar 0x5586ffc178c8 '' 'IntArg &&'
| `-CompoundStmt 0x5586ffc743a0 <col:7>
`-CXXDestructorDecl 0x5586ffc732e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5586ffc1bdf0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x5586ffc1c048 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x5586ffc73208 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5586ffc73780 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x5586ffc73760 <<invalid sloc>> 'int'
| `-CompoundStmt 0x5586ffc737f0 <col:19>
|-CXXConstructorDecl 0x5586ffc733e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x5586ffc733e8
| `-ParmVarDecl 0x5586ffc734f8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x5586ffc73598 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5586ffc736a8 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5586ffc743b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5586ffc740d0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5586ffc740a0 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x5586ffc74070 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x5586ffc736a8 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x5586ffc74420 <col:19>
`-CXXDestructorDecl 0x5586ffc73830 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
