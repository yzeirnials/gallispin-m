
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aa6c8f8 prev 0x56439aa64098 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439aa6c9f0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56439aa6ca80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56439aa6caf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56439aa6cbb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56439aa6cc80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56439aa6cdf8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56439aa6cd30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56439aa6cea0 <col:24>
| `-OptimizeNoneAttr 0x56439aa6cef8 <col:34>
|-CXXMethodDecl 0x56439aa6cf40 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56439aa6d1f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56439aa6cff0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56439aa6d068 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56439aa6d0e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56439aa6d2b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56439aa6d2e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56439aa6d350 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56439aa6d3d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56439aa6d6f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56439aa6d490 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56439aa6d508 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56439aa6d580 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56439aa6d600 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56439aa6d810 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56439aa75188 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56439aa75188
| `-ParmVarDecl 0x56439aa75298 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56439aa75338 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56439aa75338
| `-ParmVarDecl 0x56439aa75448 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56439ab42800 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aa5f910 prev 0x56439aa5f690 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56439aa5fa08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56439aa5fa98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56439aa5faf8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56439aa5fbe8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56439aa5fce8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56439aa5feb8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56439aa5fd68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56439aa5fde0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56439aa60048 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56439aa5ff80 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56439aa600f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56439aa60228 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56439aa60160 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56439aa603c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56439aa60308 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56439aa60568 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56439aa604a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56439aa60610 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56439aa60710 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56439aa607f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa606f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56439aa606d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x56439aa607a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56439aa60808 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa60780 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56439aa60760 <col:44> 'int' 2
|-CXXMethodDecl 0x56439aa60950 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56439aa60838 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56439aa608b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56439aa60aa8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56439aa60a18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56439aa60ce8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56439aa60b68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56439aa60be0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56439aa60d98 <col:20>
| `-OptimizeNoneAttr 0x56439aa60df0 <col:30>
|-CXXMethodDecl 0x56439aa60ef8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56439aa60e30 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56439aa60fa0 <col:20>
| `-OptimizeNoneAttr 0x56439aa60ff8 <col:30>
|-CXXMethodDecl 0x56439aa61048 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56439aa61110 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56439aa61228 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56439aa612b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56439aa61338 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56439aa613c0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x56439aa61448 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56439aa614d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56439aa61598 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56439aa61620 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x56439aa616a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56439aa61730 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56439aa617b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56439aa61840 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56439aa618d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56439aa61990 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56439aa61a20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56439aa61b70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56439aa61ad8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56439aa61d00 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56439aa61c30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56439aa61fb0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56439aa61db8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56439aa61e38 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56439aa61eb8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56439aa62068 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56439aa62170 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56439aa62400 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa62150 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56439aa62130 <col:33> 'int' 0
| |-EnumConstantDecl 0x56439aa62200 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56439aa62418 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa621e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56439aa621c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x56439aa62290 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56439aa62430 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa62270 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56439aa62250 <col:38> 'int' 90
| |-EnumConstantDecl 0x56439aa62320 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56439aa62448 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa62300 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56439aa622e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56439aa623b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56439aa62460 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa62390 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56439aa62370 <col:32> 'int' 2000
|-CXXMethodDecl 0x56439aa624a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56439aa628e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56439aa62750 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56439aa627c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa629b0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56439aa62b30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56439aa62a60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa62d38 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56439aa62be8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56439aa62c60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa62e38 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56439aa62ed8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56439aa62fa0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56439aa63030 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56439aa63260 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa63010 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56439aa62ff0 <col:36> 'int' EnumConstant 0x56439aa62fa0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56439aa63080 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56439aa630d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56439aa63120 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56439aa63170 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56439aa631c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56439aa63210 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56439aa63348 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56439aa63288 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56439aa63410 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56439aa634d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56439aa63590 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56439aa63650 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56439aa63768 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56439aa63830 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56439aa639b0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56439aa638e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56439aa63ad8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56439aa63cd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56439aa63b88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56439aa63c08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56439aa71628 <col:54, line:127:5>
|   |-ParenExpr 0x56439aa714d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56439aa714a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa71198 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56439aa71170 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56439aa71158 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56439aa71140 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56439aa71110 <col:31> 'Router *' lvalue ->_router 0x56439aa6eff0
|   |   |         `-CXXThisExpr 0x56439aa71100 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56439aa711f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa711d8 <col:48> 'int' 0
|   |   `-CallExpr 0x56439aa71408 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56439aa713f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa713d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa71448 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa71268 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56439aa71460 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa71288 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56439aa71478 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa712c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56439aa71490 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa713b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa713a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa71358 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56439aa71570 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56439aa71508 <col:9> 'Router *' lvalue ->_router 0x56439aa6eff0
|   | | `-CXXThisExpr 0x56439aa714f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56439aa71558 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56439aa71538 <col:19> 'Router *' lvalue ParmVar 0x56439aa63b88 'r' 'Router *'
|   `-BinaryOperator 0x56439aa71608 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56439aa715a0 <col:9> 'int' lvalue ->_eindex 0x56439aa6f058
|     | `-CXXThisExpr 0x56439aa71590 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56439aa715f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa715d0 <col:19> 'int' lvalue ParmVar 0x56439aa63c08 'eindex' 'int'
|-CXXMethodDecl 0x56439aa63e60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56439aa63d98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56439aa63f30 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56439aa63ff8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56439aa64098 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56439aa642e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56439aa64160 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56439aa641e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56439aa64398 <col:20>
| `-OptimizeNoneAttr 0x56439aa643f0 <col:30>
|-CXXMethodDecl 0x56439aa644f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56439aa64430 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56439aa645a0 <col:20>
| `-OptimizeNoneAttr 0x56439aa645f8 <col:30>
|-CXXMethodDecl 0x56439aa646c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56439aa64638 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56439aa64770 <col:20>
| `-OptimizeNoneAttr 0x56439aa647c8 <col:30>
|-CXXMethodDecl 0x56439aa64958 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56439aa64800 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56439aa64880 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56439aa64ae8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56439aa64a20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56439aa64c38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56439aa64ba8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56439aa64d88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56439aa64cf8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56439aa64ed8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56439aa64e48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56439aa65198 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56439aa64f90 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56439aa65010 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56439aa650b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56439aa65270 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56439aa65330 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56439aa65600 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56439aa654b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56439aa65528 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa65728 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56439aa65900 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56439aa657e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56439aa65860 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56439aa65ae8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56439aa659c8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56439aa65a48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56439aa65e58 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56439aa65ba8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56439aa65c20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56439aa65ca0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56439aa70c10 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56439aa70bf0 <col:106> 'int' 0
| `-ParmVarDecl 0x56439aa65d18 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56439aa70c48 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56439aa70c28 <col:126> 'int' 0
|-CXXMethodDecl 0x56439aa661f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56439aa65f28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56439aa65fc0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56439aa66040 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56439aa660b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56439aa70c80 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56439aa70c60 <col:114> 'int' 0
|-CXXMethodDecl 0x56439aa66588 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56439aa662d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56439aa66348 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56439aa663c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56439aa70c98 <col:96> 'int' 0
| `-ParmVarDecl 0x56439aa66440 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56439aa70cd8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56439aa70cb8 <col:116> 'int' 0
|-CXXMethodDecl 0x56439aa66908 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56439aa66658 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56439aa666d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa66750 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56439aa70d10 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56439aa70cf0 <col:109> 'int' 0
| `-ParmVarDecl 0x56439aa667c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56439aa70d48 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56439aa70d28 <col:129> 'int' 0
|-CXXMethodDecl 0x56439aa66c88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56439aa669d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56439aa66a50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa66ad0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56439aa66b48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56439aa70d80 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56439aa70d60 <col:117> 'int' 0
|-CXXMethodDecl 0x56439aa67018 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56439aa66d60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa66dd8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa66e58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56439aa70d98 <col:99> 'int' 0
| `-ParmVarDecl 0x56439aa66ed0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56439aa70dd8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56439aa70db8 <col:119> 'int' 0
|-CXXMethodDecl 0x56439aa67438 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56439aa670e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56439aa67168 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56439aa671e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa67260 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56439aa70e10 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56439aa70df0 <col:108> 'int' 0
| `-ParmVarDecl 0x56439aa672e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56439aa70e48 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56439aa70e28 <col:141> 'int' 0
|-CXXMethodDecl 0x56439aa67858 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56439aa67510 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56439aa67590 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56439aa67608 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa67688 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56439aa67708 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56439aa70e60 <col:121> 'int' 0
|-CXXMethodDecl 0x56439aa67c88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56439aa67938 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56439aa679b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56439aa67a30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa67ab0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56439aa70e80 <col:98> 'int' 0
| `-ParmVarDecl 0x56439aa67b30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56439aa70ea0 <col:123> 'int' 0
|-CXXMethodDecl 0x56439aa67f50 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56439aa67d60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56439aa67de0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56439aa67e60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56439aa70ec0 <col:80> 'int' 0
|-EnumDecl 0x56439aa68008 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56439aa68110 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56439aa683a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa680f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56439aa680d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x56439aa681a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56439aa683b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa68180 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56439aa68160 <col:40> 'int' 2
| |-EnumConstantDecl 0x56439aa68230 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56439aa683d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa68210 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56439aa681f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x56439aa682c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56439aa683e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa682a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56439aa68280 <col:36> 'int' 7
| `-EnumConstantDecl 0x56439aa68350 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56439aa68400 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa68330 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56439aa68310 <col:34> 'int' 6
|-CXXMethodDecl 0x56439aa686b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56439aa68428 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56439aa684c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56439aa68548 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56439aa685c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56439aa70f78 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56439aa70f60 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56439aa70f48 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56439aa70f28 <col:98, col:105> 'String' (CXXTemporary 0x56439aa70f28)
|           `-CXXTemporaryObjectExpr 0x56439aa70ef0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56439aa68958 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56439aa68788 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56439aa68800 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56439aa68878 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56439aa71028 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56439aa71010 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56439aa70ff8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56439aa70fd8 <col:94, col:101> 'String' (CXXTemporary 0x56439aa70fd8)
| |         `-CXXTemporaryObjectExpr 0x56439aa70fa0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56439aa71810 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56439aa71788 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56439aa71758 <col:9> '<bound member function type>' ->add_task_handlers 0x56439aa686b8
|     | `-CXXThisExpr 0x56439aa71748 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56439aa717c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56439aa716c8 <col:27> 'Task *' lvalue ParmVar 0x56439aa68788 'task' 'Task *'
|     |-ImplicitCastExpr 0x56439aa717e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56439aa716e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56439aa68800 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56439aa717f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56439aa71708 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56439aa68350 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56439aa71728 <col:62> 'const String' lvalue ParmVar 0x56439aa68878 'prefix' 'const String &'
|-CXXMethodDecl 0x56439aa68b68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56439aa68a20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56439aa68a98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56439aa710d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56439aa710c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56439aa710a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56439aa71088 <col:70, col:77> 'String' (CXXTemporary 0x56439aa71088)
| |         `-CXXTemporaryObjectExpr 0x56439aa71050 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56439aa719e8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56439aa71960 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56439aa71930 <col:9> '<bound member function type>' ->add_task_handlers 0x56439aa686b8
|     | `-CXXThisExpr 0x56439aa71920 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56439aa719a0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56439aa718a0 <col:27> 'Task *' lvalue ParmVar 0x56439aa68a20 'task' 'Task *'
|     |-ImplicitCastExpr 0x56439aa719b8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56439aa718c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56439aa719d0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56439aa718e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56439aa68350 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56439aa71900 <col:57> 'const String' lvalue ParmVar 0x56439aa68a98 'prefix' 'const String &'
|-CXXMethodDecl 0x56439aa68e48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56439aa68c30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa68cb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa68d28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56439aa690f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56439aa68f18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa68f98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa69018 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56439aa693e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56439aa691c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa69248 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa692c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56439aa69698 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56439aa694b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa69538 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa695b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56439aa69948 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56439aa69768 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa697e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa69868 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56439aa69bf8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56439aa69a18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa69a98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa69b10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56439aa69ea8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56439aa69cc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa69d48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa69dc8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56439aa6a1b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56439aa69fd0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6a050 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6a0d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56439aa6a498 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56439aa6a288 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6a308 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6a3b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56439aa6a778 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56439aa6a568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6a5e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6a690 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56439aa6a9e0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56439aa6a848 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56439aa6a8c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56439aa6a940 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56439aa6ac88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56439aa6aab0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56439aa6ab30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56439aa6aba8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56439aa6af38 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56439aa6ad58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6add8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6ae58 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56439aa6b1e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56439aa6b008 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6b088 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6b100 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56439aa6b498 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56439aa6b2b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6b338 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6b3b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56439aa6b768 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56439aa6b568 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6b5e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56439aa6b688 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56439aa6ba98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56439aa6b838 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56439aa6b8b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56439aa6b930 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56439aa6b9a8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56439aa710f0 <col:93> 'bool' false
|-CXXMethodDecl 0x56439aa6bc80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56439aa6bb68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56439aa6bbe8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56439aa6be58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56439aa6bd40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56439aa6bdc0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56439aa6c138 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56439aa6bf18 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56439aa6bf90 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56439aa6c010 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56439aa6c088 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa6c428 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56439aa6c208 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56439aa6c280 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56439aa6c300 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56439aa6c378 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa6c660 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56439aa6c500 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56439aa6c580 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56439aa6c848 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56439aa6c728 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56439aa6c7a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56439aa6c8f8 prev 0x56439aa64098 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56439aa6c9f0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56439aa6ca80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56439aa6caf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56439aa6cbb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56439aa6cc80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56439aa6cdf8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56439aa6cd30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56439aa6cea0 <col:24>
| | `-OptimizeNoneAttr 0x56439aa6cef8 <col:34>
| |-CXXMethodDecl 0x56439aa6cf40 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56439aa6d1f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56439aa6cff0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56439aa6d068 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56439aa6d0e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56439aa6d2b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56439aa6d2e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56439aa6d350 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56439aa6d3d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56439aa6d6f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56439aa6d490 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56439aa6d508 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56439aa6d580 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56439aa6d600 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56439aa6d810 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56439aa75188 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56439aa75188
| | `-ParmVarDecl 0x56439aa75298 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56439aa75338 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56439aa75338
| | `-ParmVarDecl 0x56439aa75448 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56439ab42800 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56439aa6d888 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56439aa6d928 <col:38> "" ""
|-CXXMethodDecl 0x56439aa6d9b8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56439aa6da58 <col:44> "" ""
|-AccessSpecDecl 0x56439aa6dac8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56439aa6daf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56439aa6dbf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56439aa6dc40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa6dbd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56439aa6dbb0 <col:27> 'int' 4
|-FieldDecl 0x56439aa6dcf8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56439aa6dea8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56439aa6df60 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56439aa6eff0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56439aa6f058 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56439aa6f1a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56439aa6f0e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56439aa6f358 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56439aa6f268 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56439aa6f538 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56439aa6f418 <col:20> col:23 'int'
| `-ParmVarDecl 0x56439aa6f498 <col:25> col:28 'int'
|-CXXMethodDecl 0x56439aa6f7e0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56439aa6f600 <col:23> col:26 'int'
| |-ParmVarDecl 0x56439aa6f680 <col:28> col:31 'int'
| `-ParmVarDecl 0x56439aa6f6f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56439aa6f898 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56439aa6f960 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56439aa6f9b0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56439aa6fa00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56439aa6fbe0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56439aa6fa90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56439aa6fb08 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa6fe88 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56439aa6fca8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56439aa6fd28 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56439aa6fda0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa700a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56439aa6ff58 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56439aa6ffd8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56439aa703e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56439aa70168 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56439aa701e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56439aa70260 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56439aa702e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x56439aa705c8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56439aa704b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56439aa70530 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56439aa70718 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56439aa70688 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56439aa70a98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56439aa707d8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56439aa70858 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56439aa708d0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56439aa70950 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56439aa70bb0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class InputSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _input
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aa782f8 <../elements/standard/inputswitch.hh:28:1, line:48:1> line:28:7 class InputSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56439aa78458 <col:1, col:7> col:7 implicit referenced class InputSwitch
|-AccessSpecDecl 0x56439aa784e8 <col:38, col:44> col:38 public
|-CXXConstructorDecl 0x56439aa78570 <line:30:5, col:17> col:5 InputSwitch 'void ()'
|-CXXMethodDecl 0x56439aa78670 <line:32:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x56439aa61048 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56439aa79c00 <col:36, col:60>
|   `-ReturnStmt 0x56439aa79bf0 <col:38, col:45>
|     `-ImplicitCastExpr 0x56439aa79bd8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56439aa79bb0 <col:45> 'const char [12]' lvalue "InputSwitch"
|-CXXMethodDecl 0x56439aa78738 <line:33:5, col:52> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x56439aa61110 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56439aa79c60 <col:36, col:52>
|   `-ReturnStmt 0x56439aa79c50 <col:38, col:45>
|     `-ImplicitCastExpr 0x56439aa79c38 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56439aa79c18 <col:45> 'const char [4]' lvalue "-/1"
|-CXXMethodDecl 0x56439aa78800 <line:34:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x56439aa614d8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56439aa79cc0 <col:36, col:51>
|   `-ReturnStmt 0x56439aa79cb0 <col:38, col:45>
|     `-ImplicitCastExpr 0x56439aa79c98 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56439aa79c78 <col:45> 'const char []' lvalue Var 0x56439aa61620 'PUSH' 'const char []'
|-CXXMethodDecl 0x56439aa788c0 <line:35:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x56439aa629b0 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56439aa78b90 <line:37:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56439aa628e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56439aa78a40 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x56439aa78ab8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x56439aa78c60 <line:38:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x56439aa65330 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x56439aa79cf8 <col:39, col:54>
|   `-ReturnStmt 0x56439aa79ce8 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x56439aa79cd8 <col:48> 'bool' true
|-CXXMethodDecl 0x56439aa78e28 <line:40:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x56439aa5feb8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x56439aa78d18 <col:15> col:18 'int'
| `-ParmVarDecl 0x56439aa78d90 <col:20, col:27> col:28 'Packet *'
|-AccessSpecDecl 0x56439aa78ed8 <line:42:2, col:9> col:2 private
|-FieldDecl 0x56439aa78f18 <line:44:5, col:9> col:9 _input 'int'
|-CXXMethodDecl 0x56439aa79090 <line:46:5, col:47> col:19 read_param 'String (Element *, void *)' static
| |-ParmVarDecl 0x56439aa78f78 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x56439aa78ff8 <col:41, col:46> col:47 'void *'
|-CXXMethodDecl 0x56439aa79370 <line:47:5, col:77> col:16 write_param 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56439aa79150 <col:28, col:41> col:42 'const String &'
| |-ParmVarDecl 0x56439aa791c8 <col:44, col:52> col:53 'Element *'
| |-ParmVarDecl 0x56439aa79248 <col:55, col:60> col:61 'void *'
| `-ParmVarDecl 0x56439aa792c0 <col:63, col:76> col:77 'ErrorHandler *'
|-CXXConstructorDecl 0x56439aa79458 <line:28:7> col:7 implicit InputSwitch 'void (const InputSwitch &)' inline default_delete noexcept-unevaluated 0x56439aa79458
| `-ParmVarDecl 0x56439aa79568 <col:7> col:7 'const InputSwitch &'
|-CXXConstructorDecl 0x56439aa79608 <col:7> col:7 implicit InputSwitch 'void (InputSwitch &&)' inline default_delete noexcept-unevaluated 0x56439aa79608
| `-ParmVarDecl 0x56439aa79718 <col:7> col:7 'InputSwitch &&'
|-CXXMethodDecl 0x56439aa797b8 <col:7> col:7 implicit operator= 'InputSwitch &(const InputSwitch &)' inline default_delete noexcept-unevaluated 0x56439aa797b8
| `-ParmVarDecl 0x56439aa798c8 <col:7> col:7 'const InputSwitch &'
|-CXXMethodDecl 0x56439aa79938 <col:7> col:7 implicit operator= 'InputSwitch &(InputSwitch &&)' inline default_delete noexcept-unevaluated 0x56439aa79938
| `-ParmVarDecl 0x56439aa79a48 <col:7> col:7 'InputSwitch &&'
`-CXXDestructorDecl 0x56439aa79ad0 <col:7> col:7 implicit ~InputSwitch 'void ()' inline default noexcept-unevaluated 0x56439aa79ad0
  `-Overrides: [ 0x56439aa5fbe8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.InputSwitch = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.InputSwitch = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439a8337b0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56439a8338c8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56439a833968 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56439a8339c8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56439a833a28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56439a833ad8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439a833de0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439a833ef8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56439a833fa0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56439a834008 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56439a834098 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56439a83a130 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56439a83a568 <col:12>
|-CXXConstructorDecl 0x56439a83a238 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56439a83a348 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56439a833fa0 'data' 'const char *'
| | `-ImplicitCastExpr 0x56439a83caf0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56439a83cac0 <col:12> 'const char *const' lvalue .data 0x56439a833fa0
| |     `-DeclRefExpr 0x56439a83caa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a83a348 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56439a834008 'length' 'int'
| | `-ImplicitCastExpr 0x56439a83cb80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56439a83cb50 <col:12> 'const int' lvalue .length 0x56439a834008
| |     `-DeclRefExpr 0x56439a83cb30 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a83a348 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56439a834098 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56439a83cc10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56439a83cbe0 <col:12> 'String::memo_t *const' lvalue .memo 0x56439a834098
| |     `-DeclRefExpr 0x56439a83cbc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a83a348 '' 'const String::rep_t &'
| `-CompoundStmt 0x56439a83cc68 <col:12>
|-CXXConstructorDecl 0x56439a83a3e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56439a83a3e8
| `-ParmVarDecl 0x56439a83a4f8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56439a83fa50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56439a84b468 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56439a84b578 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56439a84ba90 <col:12>
|   |-BinaryOperator 0x56439a84b8a8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56439a84b860 <col:12> 'const char *' lvalue ->data 0x56439a833fa0
|   | | `-CXXThisExpr 0x56439a84b850 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56439a84b890 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56439a84b820 <col:12> 'const char *const' lvalue .data 0x56439a833fa0
|   |     `-DeclRefExpr 0x56439a84b800 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a84b578 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56439a84b970 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56439a84b928 <col:12> 'int' lvalue ->length 0x56439a834008
|   | | `-CXXThisExpr 0x56439a84b918 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56439a84b958 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56439a84b8e8 <col:12> 'const int' lvalue .length 0x56439a834008
|   |     `-DeclRefExpr 0x56439a84b8c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a84b578 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56439a84ba38 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56439a84b9f0 <col:12> 'String::memo_t *' lvalue ->memo 0x56439a834098
|   | | `-CXXThisExpr 0x56439a84b9e0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56439a84ba20 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56439a84b9b0 <col:12> 'String::memo_t *const' lvalue .memo 0x56439a834098
|   |     `-DeclRefExpr 0x56439a84b990 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a84b578 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56439a84ba80 <col:12>
|     `-UnaryOperator 0x56439a84ba68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439a84ba58 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56439a84b5e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56439a84b5e8
  `-ParmVarDecl 0x56439a84b6f8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439a82ad20 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56439a82ae38 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56439a82aec8 <col:16, col:22> col:16 public
|-TypedefDecl 0x56439a82af08 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56439a4fedc0 'const char *'
|   `-QualType 0x56439a4fe311 'const char' const
|     `-BuiltinType 0x56439a4fe310 'char'
|-TypedefDecl 0x56439a82af90 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56439a82af60 'String::const_iterator' sugar
|   |-Typedef 0x56439a82af08 'const_iterator'
|   `-PointerType 0x56439a4fedc0 'const char *'
|     `-QualType 0x56439a4fe311 'const char' const
|       `-BuiltinType 0x56439a4fe310 'char'
|-TypedefDecl 0x56439a82b100 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56439a82b070 'int (String::*)() const'
|   |-RecordType 0x56439a82adb0 'String'
|   | `-CXXRecord 0x56439a82ad20 'String'
|   `-ParenType 0x56439a82b010 'int () const' sugar
|     `-FunctionProtoType 0x56439a7feba0 'int () const' const cdecl
|       `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439a82b168 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56439a653780 'int64_t' sugar
|   |-Typedef 0x56439a5672d0 'int64_t'
|   `-TypedefType 0x56439a5404d0 '__int64_t' sugar
|     |-Typedef 0x56439a5400a8 '__int64_t'
|     `-BuiltinType 0x56439a4fe390 'long'
|-TypedefDecl 0x56439a82b1d0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56439a6536a0 'uint64_t' sugar
|   |-Typedef 0x56439a567470 'uint64_t'
|   `-TypedefType 0x56439a540560 '__uint64_t' sugar
|     |-Typedef 0x56439a540118 '__uint64_t'
|     `-BuiltinType 0x56439a4fe430 'unsigned long'
|-TypedefDecl 0x56439a82b260 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56439a82b230 'String::intmax_t' sugar
|   |-Typedef 0x56439a82b168 'intmax_t'
|   `-TypedefType 0x56439a653780 'int64_t' sugar
|     |-Typedef 0x56439a5672d0 'int64_t'
|     `-TypedefType 0x56439a5404d0 '__int64_t' sugar
|       |-Typedef 0x56439a5400a8 '__int64_t'
|       `-BuiltinType 0x56439a4fe390 'long'
|-TypedefDecl 0x56439a82b2f0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56439a82b2c0 'String::uintmax_t' sugar
|   |-Typedef 0x56439a82b1d0 'uintmax_t'
|   `-TypedefType 0x56439a6536a0 'uint64_t' sugar
|     |-Typedef 0x56439a567470 'uint64_t'
|     `-TypedefType 0x56439a540560 '__uint64_t' sugar
|       |-Typedef 0x56439a540118 '__uint64_t'
|       `-BuiltinType 0x56439a4fe430 'unsigned long'
|-CXXConstructorDecl 0x56439a82b3b0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56439a82b558 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56439a82b498 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56439a82b708 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56439a82b648 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56439a82b860 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56439a82b7d0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56439a82ba78 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56439a82b928 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56439a82b9a8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56439a82bc98 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56439a82bb48 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56439a82bbc8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56439a82beb8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56439a82bd68 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56439a82bde8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56439a82c0d8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56439a82bf88 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56439a82c008 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56439a82c268 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56439a82c1a0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56439a82c3e8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56439a82c328 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56439a82c578 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56439a82c4b0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56439a82c6d0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56439a82c640 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56439a82c828 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56439a82c798 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56439a82c980 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56439a82c8f0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56439a82cb08 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56439a82ca48 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56439a82cc98 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56439a82cbd0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56439a82ce28 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56439a82cd60 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56439a82cfb8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56439a82cef0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56439a82d0b0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56439a82d1d8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56439a82d358 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56439a82d290 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56439a82d4a8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56439a82d418 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56439a82d560 <col:63> "" ""
|-CXXMethodDecl 0x56439a82d6a8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56439a82d5e8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56439a82d8b8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56439a82d768 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56439a82d7e8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56439a82dad8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56439a82d980 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56439a82da00 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56439a82ddb8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56439a82db98 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56439a82dc18 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56439a839c00 <col:55> 'int' 10
| `-ParmVarDecl 0x56439a82dc90 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56439a839c20 <col:76> 'bool' true
|-CXXMethodDecl 0x56439a82e098 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56439a82de80 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56439a82df00 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56439a839c30 <col:56> 'int' 10
| `-ParmVarDecl 0x56439a82df78 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56439a839c50 <col:77> 'bool' true
|-CXXMethodDecl 0x56439a82e1a0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56439a82e268 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56439a82e330 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56439a82e3d0 <col:20>
| `-OptimizeNoneAttr 0x56439a82e428 <col:30>
|-CXXConversionDecl 0x56439a82e518 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56439a82e5e8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56439a82e6a8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56439a82e798 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56439a82e858 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56439a82e9d8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56439a82e910 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56439a82eb28 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56439a82ea98 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56439a82ec18 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56439a82ecd8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56439a82ef28 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56439a82ed90 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56439a82ee10 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56439a82f188 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56439a82eff0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56439a82f070 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56439a82f258 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56439a82f468 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56439a82f310 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56439a82f390 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56439a82f688 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56439a82f530 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56439a82f5b0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56439a82f818 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56439a82f750 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56439a82f908 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56439a82fa78 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56439a82f9b8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56439a82fc88 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56439a82fb38 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56439a82fbb8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56439a82fea0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56439a82fd48 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56439a82fdc0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56439a830030 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56439a82ff60 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56439a830250 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56439a8300f0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56439a830170 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56439a8303a0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56439a830310 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56439a830578 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56439a830460 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56439a8304e0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56439a8306c8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56439a830638 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56439a8308e0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56439a830780 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56439a830800 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56439a839c60 <col:39> 'int' 0
|-CXXMethodDecl 0x56439a830b00 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56439a8309a0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56439a830a20 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56439a839c80 <col:48> 'int' 0
|-CXXMethodDecl 0x56439a830ce0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56439a830bc0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56439a830c40 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56439a839ca0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56439a830db0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56439a830e70 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56439a830f30 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56439a830ff0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56439a8310b0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56439a831258 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56439a831160 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56439a8313d8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56439a831310 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56439a8315b0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56439a831498 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56439a831728 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56439a831668 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56439a831870 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56439a8317e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56439a8319c0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56439a831930 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56439a831b98 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56439a831a80 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56439a831b00 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56439a831d78 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56439a831c60 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56439a831ce0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56439a831ec8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56439a831e38 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56439a8320d8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56439a831f88 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56439a832008 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56439a832238 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56439a8321a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56439a832390 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56439a8322f8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56439a832438 <col:57> "" ""
|-CXXMethodDecl 0x56439a832548 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56439a8324b8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56439a832698 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56439a832608 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56439a832818 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56439a832750 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56439a8328e0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56439a8329a0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56439a832a60 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56439a832b00 <col:49> "" ""
|-CXXMethodDecl 0x56439a832b90 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56439a832c50 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56439a832d40 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56439a832e08 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56439a832ec8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56439a832f88 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56439a833080 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56439a833148 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56439a833210 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56439a8333e8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56439a8332c8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56439a833348 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56439a833610 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56439a8334b0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56439a833530 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56439a833720 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56439a833788 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56439a8337b0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56439a8338c8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56439a833968 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56439a8339c8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56439a833a28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56439a833ad8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56439a833b40 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56439a833d78 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56439a833dc8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439a833d58 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56439a833c68 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56439a833c10 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56439a833c50 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56439a833c30 <col:32> 'int' 8
|-CXXRecordDecl 0x56439a833de0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56439a833ef8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56439a833fa0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56439a834008 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56439a834098 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56439a83a130 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56439a83a568 <col:12>
| |-CXXConstructorDecl 0x56439a83a238 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56439a83a348 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56439a833fa0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56439a83caf0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56439a83cac0 <col:12> 'const char *const' lvalue .data 0x56439a833fa0
| | |     `-DeclRefExpr 0x56439a83caa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a83a348 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56439a834008 'length' 'int'
| | | `-ImplicitCastExpr 0x56439a83cb80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56439a83cb50 <col:12> 'const int' lvalue .length 0x56439a834008
| | |     `-DeclRefExpr 0x56439a83cb30 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a83a348 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56439a834098 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56439a83cc10 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56439a83cbe0 <col:12> 'String::memo_t *const' lvalue .memo 0x56439a834098
| | |     `-DeclRefExpr 0x56439a83cbc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a83a348 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56439a83cc68 <col:12>
| |-CXXConstructorDecl 0x56439a83a3e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56439a83a3e8
| | `-ParmVarDecl 0x56439a83a4f8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56439a83fa50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56439a84b468 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56439a84b578 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56439a84ba90 <col:12>
| |   |-BinaryOperator 0x56439a84b8a8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56439a84b860 <col:12> 'const char *' lvalue ->data 0x56439a833fa0
| |   | | `-CXXThisExpr 0x56439a84b850 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56439a84b890 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56439a84b820 <col:12> 'const char *const' lvalue .data 0x56439a833fa0
| |   |     `-DeclRefExpr 0x56439a84b800 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a84b578 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56439a84b970 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56439a84b928 <col:12> 'int' lvalue ->length 0x56439a834008
| |   | | `-CXXThisExpr 0x56439a84b918 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56439a84b958 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56439a84b8e8 <col:12> 'const int' lvalue .length 0x56439a834008
| |   |     `-DeclRefExpr 0x56439a84b8c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a84b578 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56439a84ba38 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56439a84b9f0 <col:12> 'String::memo_t *' lvalue ->memo 0x56439a834098
| |   | | `-CXXThisExpr 0x56439a84b9e0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56439a84ba20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56439a84b9b0 <col:12> 'String::memo_t *const' lvalue .memo 0x56439a834098
| |   |     `-DeclRefExpr 0x56439a84b990 <col:12> 'const String::rep_t' lvalue ParmVar 0x56439a84b578 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56439a84ba80 <col:12>
| |     `-UnaryOperator 0x56439a84ba68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56439a84ba58 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56439a84b5e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56439a84b5e8
|   `-ParmVarDecl 0x56439a84b6f8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56439a834110 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56439a834358 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56439a834178 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56439a8341f8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56439a834270 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56439a83a0f0 <col:79, line:261:5>
|   |-BinaryOperator 0x56439a839d68 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56439a839d00 <col:2, col:5> 'const char *' lvalue .data 0x56439a833fa0
|   | | `-MemberExpr 0x56439a839cd0 <col:2> 'String::rep_t' lvalue ->_r 0x56439a834110
|   | |   `-CXXThisExpr 0x56439a839cc0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56439a839d50 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56439a839d30 <col:12> 'const char *' lvalue ParmVar 0x56439a834178 'data' 'const char *'
|   |-BinaryOperator 0x56439a839e30 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56439a839dc8 <col:2, col:5> 'int' lvalue .length 0x56439a834008
|   | | `-MemberExpr 0x56439a839d98 <col:2> 'String::rep_t' lvalue ->_r 0x56439a834110
|   | |   `-CXXThisExpr 0x56439a839d88 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56439a839e18 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56439a839df8 <col:14> 'int' lvalue ParmVar 0x56439a8341f8 'length' 'int'
|   `-IfStmt 0x56439a83a0d8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56439a839f50 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56439a839f38 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56439a839f18 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56439a839ef8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56439a839e90 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56439a834098
|     |       | `-MemberExpr 0x56439a839e60 <col:7> 'String::rep_t' lvalue ->_r 0x56439a834110
|     |       |   `-CXXThisExpr 0x56439a839e50 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56439a839ee0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56439a839ec0 <col:17> 'String::memo_t *' lvalue ParmVar 0x56439a834270 'memo' 'String::memo_t *'
|     `-CallExpr 0x56439a83a0b0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56439a83a098 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56439a839fa0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56439a822d88 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56439a83a008 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56439a833968
|         `-ImplicitCastExpr 0x56439a839ff0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56439a839fd0 <col:27> 'String::memo_t *' lvalue ParmVar 0x56439a834270 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56439a834608 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56439a834428 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56439a8344a8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56439a834520 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56439a834110 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56439a83a578 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56439a83a708 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56439a83a670 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56439a83a5e0 <col:2> '<bound member function type>' ->assign_memo 0x56439a834358
|     | `-ImplicitCastExpr 0x56439a83a6a8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56439a83a5d0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56439a83a6c0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56439a83a610 <col:14> 'const char *' lvalue ParmVar 0x56439a834428 'data' 'const char *'
|     |-ImplicitCastExpr 0x56439a83a6d8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56439a83a630 <col:20> 'int' lvalue ParmVar 0x56439a8344a8 'length' 'int'
|     `-ImplicitCastExpr 0x56439a83a6f0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56439a83a650 <col:28> 'String::memo_t *' lvalue ParmVar 0x56439a834520 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56439a834798 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56439a8346d8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56439a83a960 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56439a83a8e0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56439a83a730 <col:2> '<bound member function type>' ->assign_memo 0x56439a834358
|     | `-CXXThisExpr 0x56439a83a720 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56439a83a918 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56439a83a7b0 <col:14, col:19> 'const char *' lvalue .data 0x56439a833fa0
|     |   `-MemberExpr 0x56439a83a780 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56439a834110
|     |     `-DeclRefExpr 0x56439a83a760 <col:14> 'const String' lvalue ParmVar 0x56439a8346d8 'x' 'const String &'
|     |-ImplicitCastExpr 0x56439a83a930 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56439a83a830 <col:25, col:30> 'int' lvalue .length 0x56439a834008
|     |   `-MemberExpr 0x56439a83a800 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56439a834110
|     |     `-DeclRefExpr 0x56439a83a7e0 <col:25> 'const String' lvalue ParmVar 0x56439a8346d8 'x' 'const String &'
|     `-ImplicitCastExpr 0x56439a83a948 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56439a83a8b0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56439a834098
|         `-MemberExpr 0x56439a83a880 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56439a834110
|           `-DeclRefExpr 0x56439a83a860 <col:38> 'const String' lvalue ParmVar 0x56439a8346d8 'x' 'const String &'
|-CXXMethodDecl 0x56439a834860 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56439a83b320 <col:31, line:278:5>
|   `-IfStmt 0x56439a83b308 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56439a83aa00 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56439a83a9e8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56439a83a9b8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56439a834098
|     |     `-MemberExpr 0x56439a83a988 <col:6> 'String::rep_t' lvalue ->_r 0x56439a834110
|     |       `-CXXThisExpr 0x56439a83a978 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56439a83b2e0 <col:15, line:277:2>
|       |-ParenExpr 0x56439a83aeb0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56439a83ae80 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56439a83ab10 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56439a83aaf8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56439a83aae0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56439a83aaa0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56439a833968
|       |   |       `-ImplicitCastExpr 0x56439a83aa88 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56439a83aa58 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56439a834098
|       |   |           `-MemberExpr 0x56439a83aa28 <col:27> 'String::rep_t' lvalue ->_r 0x56439a834110
|       |   |             `-CXXThisExpr 0x56439a83aa18 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56439a83ab70 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56439a83ab50 <col:54> 'int' 0
|       |   `-CallExpr 0x56439a83ade0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56439a83adc8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56439a83ad48 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56439a83ae20 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56439a83ac58 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56439a83ae38 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56439a83ac88 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56439a83ae50 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56439a83acc0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56439a83ae68 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56439a83ad30 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56439a83ad18 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56439a83ace0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56439a83b200 <line:274:6, line:275:22>
|       | |-CallExpr 0x56439a83b0c0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56439a83b0a8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56439a83b020 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56439a8241d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56439a83aff0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56439a833968
|       | |   `-ImplicitCastExpr 0x56439a83afd8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56439a83afa8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56439a834098
|       | |       `-MemberExpr 0x56439a83af78 <col:40> 'String::rep_t' lvalue ->_r 0x56439a834110
|       | |         `-CXXThisExpr 0x56439a83af68 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56439a83b1c0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56439a83b1a8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56439a83b0e8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56439a839040 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56439a83b1e8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56439a83b148 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56439a834098
|       |       `-MemberExpr 0x56439a83b118 <col:15> 'String::rep_t' lvalue ->_r 0x56439a834110
|       |         `-CXXThisExpr 0x56439a83b108 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56439a83b2c0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56439a83b258 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56439a834098
|         | `-MemberExpr 0x56439a83b228 <col:6> 'String::rep_t' lvalue ->_r 0x56439a834110
|         |   `-CXXThisExpr 0x56439a83b218 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56439a83b2a8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56439a83b288 <col:16> 'int' 0
|-CXXMethodDecl 0x56439a834af8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56439a834918 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56439a834998 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56439a834a10 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56439a834bd0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56439a834e20 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56439a834c88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56439a834d08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56439a834d80 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56439a835008 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56439a834ef0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56439a834f70 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56439a835108 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56439a83b3f8 <col:41, line:286:5>
|   `-ReturnStmt 0x56439a83b3e8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56439a83b3b8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56439a83b380 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56439a83b368 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56439a83b348 <col:46> 'int' 1
|-CXXMethodDecl 0x56439a8353a8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56439a8351c0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56439a835240 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56439a8352c0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56439a839040 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56439a835470 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56439a839110 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56439a8392e0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56439a8391c8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56439a839248 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56439a8393a0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56439a839468 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56439a839568 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56439a8395e0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56439a839658 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56439a8396c0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56439a8397c0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56439a839810 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439a8397a0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56439a839780 <col:22> 'int' 14
|-CXXMethodDecl 0x56439a839a28 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56439a839840 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56439a8398c0 <col:38> col:41 'int'
| `-ParmVarDecl 0x56439a839940 <col:43> col:46 'int'
|-FriendDecl 0x56439a839b30 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56439a839bc0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56439a8fc020 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56439a8fc1f8 prev 0x56439a8fc020 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56439a8fc288 <col:46, col:52> col:46 public
|-TypedefDecl 0x56439a8fc2b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439a8fdc10 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56439a8fdbc0 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56439a8fdba0 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56439a8fc4c8 'type'
|     `-SubstTemplateTypeParmType 0x56439a8fc490 'String' sugar
|       |-TemplateTypeParmType 0x56439a7ee5c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7ee570 'T'
|       `-RecordType 0x56439a82adb0 'String'
|         `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439a8fdcc8 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56439a8fdc90 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56439a8fdc70 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56439a8fdc10 'type'
|     `-ElaboratedType 0x56439a8fdbc0 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56439a8fdba0 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56439a8fc4c8 'type'
|         `-SubstTemplateTypeParmType 0x56439a8fc490 'String' sugar
|           |-TemplateTypeParmType 0x56439a7ee5c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56439a7ee570 'T'
|           `-RecordType 0x56439a82adb0 'String'
|             `-CXXRecord 0x56439a82ad20 'String'
|-CXXMethodDecl 0x56439a8fde48 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56439a8fdd58 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56439a8fdf38 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56439a8fe018 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56439a8fe018
|-CXXMethodDecl 0x56439aaa88c8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56439aaa87d8 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56439aaa8b08 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56439aaa8980 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56439aaa89f8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa8cd8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56439aaa8bc8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56439aaa8c40 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa8e38 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56439aaa8f08 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56439aaa9158 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56439aaa8fc8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56439aaa9040 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa93b8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56439aaa9228 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56439aaa92a0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa9578 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56439aaa9488 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa9738 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56439aaa9640 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa97f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56439aaa98a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56439aaa9ad8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56439aaa9950 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56439aaa99c8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56439aaa9d78 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56439aaa9c80 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56439aaa9e40 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56439aaa9e90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56439aaa9ee0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56439aa62550 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56439a8faa88 prev 0x56439aa62550 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56439a8fbf90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56439a8fbf40 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56439a8fbf20 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56439a8fbdd0 'type'
|     `-SubstTemplateTypeParmType 0x56439a8fbc60 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56439a7c4370 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56439a7c4318 'F'
|       `-RecordType 0x56439a8fb8c0 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56439a8fb7e0 'typed_array_memory'
|-FieldDecl 0x56439aaa9f30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56439aaa9f80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56439aaa9fb8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|   |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56439a7fb888 'T'
|   `-RecordType 0x56439a82adb0 'String'
|     `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaa048 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56439aaaa010 'String &'
|   `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|     |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56439a7fb888 'T'
|     `-RecordType 0x56439a82adb0 'String'
|       `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaa0d8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56439aaaa0a0 'const String &'
|   `-QualType 0x56439a8fab21 'const String' const
|     `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-RecordType 0x56439a82adb0 'String'
|         `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaa168 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56439aaaa130 'String *'
|   `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|     |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56439a7fb888 'T'
|     `-RecordType 0x56439a82adb0 'String'
|       `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaa1f8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56439aaaa1c0 'const String *'
|   `-QualType 0x56439a8fab21 'const String' const
|     `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-RecordType 0x56439a82adb0 'String'
|         `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaae50 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56439aaaae00 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56439aaaade0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56439aaaad18 'type'
|     `-LValueReferenceType 0x56439aaaace0 'const String &'
|       `-QualType 0x56439aaaaa81 'const String' const
|         `-SubstTemplateTypeParmType 0x56439aaaaa80 'String' sugar
|           |-TemplateTypeParmType 0x56439a7ce2c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56439a7ce268 'T'
|           `-RecordType 0x56439a82adb0 'String'
|             `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaaeb8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56439aaaa0a0 'const String &'
|   `-QualType 0x56439a8fab21 'const String' const
|     `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-RecordType 0x56439a82adb0 'String'
|         `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaaf10 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aaaaf78 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56439aaaa130 'String *'
|   `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|     |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56439a7fb888 'T'
|     `-RecordType 0x56439a82adb0 'String'
|       `-CXXRecord 0x56439a82ad20 'String'
|-TypedefDecl 0x56439aaaafe0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56439aaaa1c0 'const String *'
|   `-QualType 0x56439a8fab21 'const String' const
|     `-SubstTemplateTypeParmType 0x56439a8fab20 'String' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-RecordType 0x56439a82adb0 'String'
|         `-CXXRecord 0x56439a82ad20 'String'
|-EnumDecl 0x56439aaab038 <line:134:5> col:5
| `-EnumConstantDecl 0x56439aaab130 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56439aaab110 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56439a7fcf68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56439a7fcf40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56439a7fcf20 <col:40> 'int' 1
|-CXXConstructorDecl 0x56439aaab1b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56439aaab448 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aaab270 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56439aaab310 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56439aaab6d8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56439aaab5c0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56439aaab998 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56439aaab880 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56439aaabcb0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56439aaabb90 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56439aaabfc0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56439aaabea0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56439aaac2b0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aaac0f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56439aaac170 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56439aaac3d8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56439aaac488 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aaac4e0 <col:30> Inherited
|-CXXMethodDecl 0x56439aaac528 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56439aaac5d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aaac630 <col:30> Inherited
|-CXXMethodDecl 0x56439aaac6f8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56439aaac7a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aaac800 <col:30> Inherited
|-CXXMethodDecl 0x56439aaac848 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56439aaac8f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aaac950 <col:30> Inherited
|-CXXMethodDecl 0x56439aaac998 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56439aaaca48 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aaacaa0 <col:30> Inherited
|-CXXMethodDecl 0x56439aaacae8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56439aaacb98 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aaacbf0 <col:30> Inherited
|-CXXMethodDecl 0x56439aaacc18 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56439aaaccc8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56439aaacd78 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56439aaacf38 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aaace28 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56439aaacea0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56439aaad088 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56439aaacff8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aaad238 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56439aaad140 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56439aaad2f0 <col:20>
| `-OptimizeNoneAttr 0x56439aaad348 <col:30>
|-CXXMethodDecl 0x56439aaad468 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56439aaad370 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56439aaad520 <col:20>
| `-OptimizeNoneAttr 0x56439aaad578 <col:30>
|-CXXMethodDecl 0x56439aaad630 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56439aaad5a0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aaad778 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56439aaad6e8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aaad8a8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56439aaad9a8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56439aaada78 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56439aaadb48 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56439aaadc88 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56439aaadbf8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aaaddd0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56439aaadd40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aaadf18 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56439aaade88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56439aaadfd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56439aaae0d0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56439aaae040 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56439aaae188 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56439aaae248 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56439aaae348 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56439aaae4c8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56439aaae408 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56439aaaec88 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56439aaae580 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56439aaaebe8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56439aaaeae8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56439aaaed68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56439aaaeeb8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56439aaaee28 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56439aaaef70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56439aaaf1b8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aaaf030 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56439aaaf0a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56439aaaf348 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56439aaaf288 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56439aaaf558 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56439aaaf410 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56439aaaf488 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56439aaaf618 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56439aaaf878 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56439aaaf780 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56439aaaf948 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56439aaaf948

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439ab31da8 prev 0x56439a9e07d8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56439ab31ea0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56439ab31f30 <col:22, col:28> col:22 public
|-EnumDecl 0x56439ab31f58 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56439ab32078 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab32058 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56439ab32040 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56439ab32020 <col:14> 'int' 999
| |-EnumConstantDecl 0x56439ab32120 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab32100 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56439ab320e8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56439ab320c8 <col:14> 'int' 1
| |-EnumConstantDecl 0x56439ab321b0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab32190 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56439ab32170 <col:17> 'int' 0
| |-EnumConstantDecl 0x56439ab32240 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab32220 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56439ab32200 <col:13> 'int' 1
| |-EnumConstantDecl 0x56439ab322d0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab322b0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56439ab32290 <col:16> 'int' 2
| |-EnumConstantDecl 0x56439ab32360 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab32340 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56439ab32320 <col:13> 'int' 3
| |-EnumConstantDecl 0x56439ab323f0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab323d0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56439ab323b0 <col:15> 'int' 4
| |-EnumConstantDecl 0x56439ab32480 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab32460 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56439ab32440 <col:14> 'int' 5
| |-EnumConstantDecl 0x56439ab32510 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56439ab324f0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56439ab324d0 <col:12> 'int' 6
| `-EnumConstantDecl 0x56439ab325a0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56439ab32580 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56439ab32560 <col:13> 'int' 7
|-VarDecl 0x56439ab32610 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56439ab32698 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56439ab32720 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56439ab327a8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56439ab32830 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56439ab328b8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56439ab32940 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56439ab329c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56439ab32a50 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56439ab32ad8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56439ab32b60 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56439ab32c60 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56439ab37f88 '_nerrors' 'int'
| | `-IntegerLiteral 0x56439ab38718 <line:128:13> 'int' 0
| `-CompoundStmt 0x56439ab38788 <col:16, line:129:5>
|-CXXDestructorDecl 0x56439ab32d50 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56439ab38798 <col:29, line:132:5>
|-CXXMethodDecl 0x56439ab32f08 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56439ab32e40 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56439ab32fd0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56439ab330b8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56439ab387f0 <col:44, line:161:5>
|   `-ReturnStmt 0x56439ab387e0 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56439ab387c8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56439ab387a8 <col:9> 'ErrorHandler *' lvalue Var 0x56439ab37fe8 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56439ab331f8 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56439ab33168 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56439ab332c0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56439ab38850 <col:43, line:173:5>
|   `-ReturnStmt 0x56439ab38840 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56439ab38828 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56439ab38808 <col:9> 'ErrorHandler *' lvalue Var 0x56439ab38060 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56439ab33378 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56439ab333f8 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56439ab33508 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56439ab33478 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56439ab33658 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56439ab335c8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56439ab337b0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56439ab33718 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56439ab33908 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56439ab33870 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56439ab33a60 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56439ab339c8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56439ab33c70 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56439ab33b18 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56439ab33b98 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56439ab33e48 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56439ab33d30 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56439ab33db0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56439ab34068 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56439ab33f08 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56439ab33f88 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56439ab34248 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56439ab34128 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56439ab341a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56439ab34428 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56439ab34308 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56439ab34388 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56439ab345b0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56439ab344e8 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56439ab34780 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56439ab34668 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56439ab346e0 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56439ab38aa8 <col:57, line:234:5>
|   `-ReturnStmt 0x56439ab38a98 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56439ab38a80 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56439ab38a28 <col:9, col:41> 'int'
|         |-MemberExpr 0x56439ab389f8 <col:9> '<bound member function type>' ->xmessage 0x56439ab345b0
|         | `-CXXThisExpr 0x56439ab389e8 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56439ab38a68 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56439ab38a50 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56439ab389c8 <col:18, col:40> 'String' (CXXTemporary 0x56439ab389c8)
|               `-CallExpr 0x56439ab38990 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56439ab38978 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56439ab388f0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56439ab36778 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56439ab38910 <col:31> 'const String' lvalue ParmVar 0x56439ab346e0 'str' 'const String &'
|                 `-DeclRefExpr 0x56439ab38930 <col:36> 'const String' lvalue ParmVar 0x56439ab34668 'anno' 'const String &'
|-CXXMethodDecl 0x56439ab34a60 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56439ab34840 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56439ab348c0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56439ab34938 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56439ab38d38 <col:68, line:243:5>
|   `-ReturnStmt 0x56439ab38d28 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56439ab38d10 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56439ab38cb0 <col:9, col:41> 'int'
|         |-MemberExpr 0x56439ab38c80 <col:9> '<bound member function type>' ->xmessage 0x56439ab34780
|         | `-CXXThisExpr 0x56439ab38c70 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56439ab38b48 <col:18> 'const String' lvalue ParmVar 0x56439ab34840 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56439ab38cf8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56439ab38ce0 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56439ab38c50 <col:24, col:40> 'String' (CXXTemporary 0x56439ab38c50)
|               `-CXXMemberCallExpr 0x56439ab38be8 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56439ab38b78 <col:24> '<bound member function type>' ->vformat 0x56439ab35c40
|                 | `-CXXThisExpr 0x56439ab38b68 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56439ab38c18 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56439ab38ba8 <col:32> 'const char *' lvalue ParmVar 0x56439ab348c0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56439ab38c30 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56439ab38bc8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56439ab34938 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56439ab34d00 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56439ab34b28 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56439ab34ba0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56439ab34c18 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56439ab39078 <col:23, line:254:5>
|   `-ReturnStmt 0x56439ab39068 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56439ab39050 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56439ab38ff0 <col:9, col:71> 'int'
|         |-MemberExpr 0x56439ab38fc0 <col:9> '<bound member function type>' ->xmessage 0x56439ab34780
|         | `-CXXThisExpr 0x56439ab38fb0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56439ab39038 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56439ab39020 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56439ab38f70 <col:18, col:65> 'String' (CXXTemporary 0x56439ab38f70)
|         |     `-CallExpr 0x56439ab38f08 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56439ab38ef0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56439ab38dd8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56439ab36778 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56439ab38df8 <col:31> 'const String' lvalue ParmVar 0x56439ab34ba0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56439ab38f50 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56439ab38f38 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56439ab38ed0 <col:37, col:64> 'String' (CXXTemporary 0x56439ab38ed0)
|         |             `-CallExpr 0x56439ab38ea0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56439ab38e88 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56439ab38e18 <col:37> 'String (const String &)' lvalue CXXMethod 0x56439ab36dc8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56439ab38e38 <col:56> 'const String' lvalue ParmVar 0x56439ab34b28 'landmark' 'const String &'
|         `-DeclRefExpr 0x56439ab38f90 <col:68> 'const String' lvalue ParmVar 0x56439ab34c18 'str' 'const String &'
|-CXXMethodDecl 0x56439ab35080 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56439ab34dc8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56439ab34e40 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56439ab34ec0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56439ab34f38 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56439ab39330 <col:34, line:267:5>
|   `-ReturnStmt 0x56439ab39320 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56439ab39308 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56439ab392a0 <col:9, col:51> 'int'
|         |-MemberExpr 0x56439ab39270 <col:9> '<bound member function type>' ->xmessage 0x56439ab34d00
|         | `-CXXThisExpr 0x56439ab39260 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56439ab39118 <col:18> 'const String' lvalue ParmVar 0x56439ab34dc8 'landmark' 'const String &'
|         |-DeclRefExpr 0x56439ab39138 <col:28> 'const String' lvalue ParmVar 0x56439ab34e40 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56439ab392f0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56439ab392d8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56439ab39240 <col:34, col:50> 'String' (CXXTemporary 0x56439ab39240)
|               `-CXXMemberCallExpr 0x56439ab391d8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56439ab39168 <col:34> '<bound member function type>' ->vformat 0x56439ab35c40
|                 | `-CXXThisExpr 0x56439ab39158 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56439ab39208 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56439ab39198 <col:42> 'const char *' lvalue ParmVar 0x56439ab34ec0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56439ab39220 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56439ab391b8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56439ab34f38 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56439ab35190 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56439ab393b0 <col:25, line:288:5>
|   `-ReturnStmt 0x56439ab393a0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56439ab39388 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56439ab39358 <col:9> 'const int' lvalue ->_nerrors 0x56439ab37f88
|         `-CXXThisExpr 0x56439ab39348 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56439ab353a0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56439ab35248 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56439ab352c8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56439ab35688 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56439ab35468 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56439ab354e8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56439ab35560 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56439ab35820 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56439ab35758 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56439ab35a68 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56439ab358e0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56439ab35958 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56439ab39610 <col:58, line:357:5>
|   `-ReturnStmt 0x56439ab39600 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56439ab395e8 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56439ab395b8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56439ab395a0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56439ab39580 <col:9, col:29> 'String' (CXXTemporary 0x56439ab39580)
|             `-CallExpr 0x56439ab39510 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56439ab394f8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56439ab39478 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56439ab35688 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56439ab39418 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56439ab39548 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56439ab39438 <col:21> 'const char *' lvalue ParmVar 0x56439ab358e0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56439ab39560 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56439ab39458 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56439ab35958 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56439ab35c40 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56439ab35b30 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56439ab35ba8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56439ab35d98 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56439ab35d08 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56439ab35ee0 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56439ab35e50 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56439ab36180 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56439ab35f98 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56439ab36018 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56439ab36090 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56439ab362e0 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56439ab36250 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56439ab39728 <col:37, line:441:5>
|   `-IfStmt 0x56439ab39710 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56439ab39698 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56439ab39668 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56439ab39628 <col:6> 'int' lvalue ParmVar 0x56439ab36250 'level' 'int'
|     | `-ImplicitCastExpr 0x56439ab39680 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56439ab39648 <col:15> 'ErrorHandler::Level' EnumConstant 0x56439ab32360 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56439ab396f8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56439ab396c8 <col:8> 'int' lvalue ->_nerrors 0x56439ab37f88
|         `-CXXThisExpr 0x56439ab396b8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56439ab363a8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56439ab397c0 <col:26, line:448:5>
|   `-BinaryOperator 0x56439ab397a0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56439ab39750 <col:2> 'int' lvalue ->_nerrors 0x56439ab37f88
|     | `-CXXThisExpr 0x56439ab39740 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56439ab39780 <col:13> 'int' 0
|-CXXMethodDecl 0x56439ab36570 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56439ab36460 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56439ab364d8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56439ab36778 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56439ab36630 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56439ab366a8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56439ab36a28 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56439ab36838 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56439ab368b8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56439ab36938 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56439ab36ae0 <col:59> 0 0
|-CXXMethodDecl 0x56439ab36c78 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56439ab36b58 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56439ab36bd8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56439ab39e30 <col:70, line:534:5>
|   |-DeclStmt 0x56439ab39930 <line:528:2, col:20>
|   | |-VarDecl 0x56439ab397e8 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56439ab39850 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56439ab39888 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56439ab398f0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56439ab39a00 <line:529:2, col:23>
|   | `-VarDecl 0x56439ab39960 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56439ab399e8 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56439ab399c8 <col:18> 'const char *' lvalue ParmVar 0x56439ab36b58 'begin' 'const char *'
|   |-DoStmt 0x56439ab39dc8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56439ab39cf8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56439ab39ce0 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56439ab39cc0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56439ab39a18 <col:6> 'const char *' lvalue Var 0x56439ab39960 'x' 'const char *'
|   | |     `-CallExpr 0x56439ab39c10 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56439ab39bf8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56439ab39bb0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56439ab38460 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56439ab39c78 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56439ab39c60 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56439ab39ad0 <col:20, col:27> 'String' (CXXTemporary 0x56439ab39ad0)
|   | |       |     `-CXXTemporaryObjectExpr 0x56439ab39a98 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56439ab39c90 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56439ab39af0 <col:30> 'const char *' lvalue Var 0x56439ab39960 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56439ab39ca8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56439ab39b10 <col:33> 'const char *' lvalue ParmVar 0x56439ab36bd8 'end' 'const char *'
|   | |       |-UnaryOperator 0x56439ab39b50 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56439ab39b30 <col:39> 'String' lvalue Var 0x56439ab397e8 'name' 'String'
|   | |       |-UnaryOperator 0x56439ab39b88 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56439ab39b68 <col:46> 'String' lvalue Var 0x56439ab39888 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56439ab39ba0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56439ab39db0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56439ab39d98 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56439ab39d78 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56439ab39d48 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|   |         `-ImplicitCastExpr 0x56439ab39d30 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56439ab39d10 <col:11> 'String' lvalue Var 0x56439ab397e8 'name' 'String'
|   `-ReturnStmt 0x56439ab39e20 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56439ab39e08 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56439ab39de8 <col:9> 'const char *' lvalue Var 0x56439ab39960 'x' 'const char *'
|-CXXMethodDecl 0x56439ab36dc8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56439ab36d38 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56439ab3a438 <col:55, line:550:5>
|   `-IfStmt 0x56439ab3a410 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56439ab3a070 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56439ab3a058 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56439ab3a040 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56439ab3a020 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56439ab39ff0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|     | |       `-DeclRefExpr 0x56439ab39e90 <col:6> 'const String' lvalue ParmVar 0x56439ab36d38 'x' 'const String &'
|     | `-BinaryOperator 0x56439ab39fd0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56439ab39fa0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56439ab39f50 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56439ab39f38 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56439ab39ef0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56439a847d50 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56439ab39eb0 <col:11> 'const String' lvalue ParmVar 0x56439ab36d38 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56439ab39ed0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56439ab39fb8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56439ab39f88 <col:19> 'char' 123
|     |-ReturnStmt 0x56439ab3a0e0 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56439ab3a0b0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56439ab3a090 <col:13> 'const String' lvalue ParmVar 0x56439ab36d38 'x' 'const String &'
|     `-IfStmt 0x56439ab3a3e8 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56439ab3a178 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56439ab3a160 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56439ab3a140 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56439ab3a110 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |       `-DeclRefExpr 0x56439ab3a0f0 <col:11> 'const String' lvalue ParmVar 0x56439ab36d38 'x' 'const String &'
|       |-ReturnStmt 0x56439ab3a300 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56439ab3a2e8 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56439ab3a2b8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56439ab3a2a0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56439ab3a280 <col:13, col:29> 'String' (CXXTemporary 0x56439ab3a280)
|       |         `-CallExpr 0x56439ab3a230 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56439ab3a218 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56439ab3a190 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56439ab36570 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56439ab3a260 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56439ab3a1b0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56439ab3a1d0 <col:28> 'const String' lvalue ParmVar 0x56439ab36d38 'x' 'const String &'
|       `-ReturnStmt 0x56439ab3a3d8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56439ab3a3c0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56439ab3a390 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56439ab3a378 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56439ab3a358 <col:13, col:20> 'String' (CXXTemporary 0x56439ab3a358)
|                 `-CXXTemporaryObjectExpr 0x56439ab3a320 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56439ab36fd0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56439ab36e80 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56439ab36ef8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56439ab38708 <col:71> 'bool' false
|-CXXRecordDecl 0x56439ab37080 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56439ab37378 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56439ab37310 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56439ab372b0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56439ab37270 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56439a82adb0 'String'
|       | `-CXXRecord 0x56439a82ad20 'String'
|       |-BuiltinType 0x56439a4fe370 'int'
|       `-DecayedType 0x56439a9e1820 '__va_list_tag *' sugar
|         |-TypedefType 0x56439a9e17f0 'va_list' sugar
|         | |-Typedef 0x56439a71be60 'va_list'
|         | `-TypedefType 0x56439a71be10 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56439a653a38 '__gnuc_va_list'
|         |   `-TypedefType 0x56439a6539a0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56439a53fbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56439a53fb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56439a4ff0c0 '__va_list_tag'
|         |         `-CXXRecord 0x56439a4ff028 '__va_list_tag'
|         `-PointerType 0x56439a721700 '__va_list_tag *'
|           `-RecordType 0x56439a4ff0c0 '__va_list_tag'
|             `-CXXRecord 0x56439a4ff028 '__va_list_tag'
|-EnumDecl 0x56439ab373d0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56439ab374d0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37a30 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab374b0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56439ab37490 <col:16> 'int' 1
| |-EnumConstantDecl 0x56439ab37560 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37a48 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab37540 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56439ab37520 <col:21> 'int' 2
| |-EnumConstantDecl 0x56439ab375f0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37a60 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab375d0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56439ab375b0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56439ab37680 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37a78 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab37660 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56439ab37640 <col:17> 'int' 8
| |-EnumConstantDecl 0x56439ab37710 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37a90 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab376f0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56439ab376d0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56439ab377a0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37aa8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab37780 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56439ab37760 <col:19> 'int' 32
| |-EnumConstantDecl 0x56439ab37830 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37ac0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab37810 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56439ab377f0 <col:17> 'int' 64
| |-EnumConstantDecl 0x56439ab378c0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37ad8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab378a0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56439ab37880 <col:14> 'int' 128
| |-EnumConstantDecl 0x56439ab37950 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56439ab37af0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab37930 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56439ab37910 <col:16> 'int' 256
| `-EnumConstantDecl 0x56439ab379e0 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56439ab37b08 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439ab379c0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56439ab379a0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56439ab37d18 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56439ab37b30 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56439ab37bd0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56439ab37ea0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56439ab37dd8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56439ab37f48 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56439ab37f88 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56439ab37fe8 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56439ab38060 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56439ab38460 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56439ab380d8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56439ab38158 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56439ab381d8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56439ab38250 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56439ab382c8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56439ab38340 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56439ab38588 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56439ab38588
| `-ParmVarDecl 0x56439ab38698 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56439ab3a798 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56439ab3a798
  `-ParmVarDecl 0x56439ab3a8a8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439a9e0868 prev 0x56439aa24ff8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439a9e0960 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56439a9e09f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56439a9e0b28 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56439a9e0a28 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56439a9e1f50 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56439a9e1f30 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56439a9e1ac8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56439a9e1fe0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56439a9e1fa0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56439a9e0a28 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56439a9e1b30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56439a9e2060 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56439a9e2020 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56439a9e1b90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56439a9e20a0 <col:54> 'bool' false
| `-CompoundStmt 0x56439a9e21a8 <col:61, line:38:5>
|   `-BinaryOperator 0x56439a9e2188 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56439a9e2120 <col:9> 'const Element *' lvalue ->_context 0x56439a9e1a68
|     | `-CXXThisExpr 0x56439a9e2110 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56439a9e2170 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56439a9e2150 <col:20> 'int' 0
|-CXXConstructorDecl 0x56439a9e0d38 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56439a9e0be8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56439a9e0c60 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56439a9e1f88 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56439a9e1f68 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56439a9e1a68 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56439a9e2200 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56439a9e21c0 <col:20> 'const Element *' lvalue ParmVar 0x56439a9e0be8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56439a9e1ac8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56439a9e2280 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56439a9e2240 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56439a9e0c60 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56439a9e1b30 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56439a9e2300 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56439a9e22c0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56439a9e1b90 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56439a9e2340 <col:73> 'bool' false
| `-CompoundStmt 0x56439a9e23b8 <col:80, line:46:5>
|-CXXMethodDecl 0x56439a9e0e68 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56439a9e2430 <col:36, line:51:5>
|   `-ReturnStmt 0x56439a9e2420 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56439a9e2408 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56439a9e23d8 <col:16> 'const Element *const' lvalue ->_context 0x56439a9e1a68
|         `-CXXThisExpr 0x56439a9e23c8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56439a9e0f58 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56439a9e24b0 <col:32, line:57:5>
|   `-ReturnStmt 0x56439a9e24a0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56439a9e2488 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56439a9e2458 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56439a9e1ac8
|         `-CXXThisExpr 0x56439a9e2448 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56439a9e1018 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56439a9e11a0 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56439a9e10d0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56439a9e12f0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56439a9e1260 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56439a9e1440 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56439a9e13b0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56439a9e1648 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56439a9e14f8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56439a9e1570 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56439a9e1978 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56439a9e1708 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56439a9e1788 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56439a9e1850 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56439a9e1a30 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56439a9e1a68 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56439a9e1ac8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56439a9e1b30 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56439a9e1b90 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56439a9e1be0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56439a9e1be0
| `-ParmVarDecl 0x56439a9e1cf8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56439a9e1d98 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56439a9e1d98
| `-ParmVarDecl 0x56439a9e1ea8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56439ab43050 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56439aaecd80 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56439aaecf58 prev 0x56439aaecd80 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56439aaecfe8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56439aaed010 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aaeebe0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56439aaeeb90 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56439aaed4c0 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56439aaed3c0 'type'
|     `-TemplateSpecializationType 0x56439aaed350 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56439aaed230 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56439aaed210 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56439aaed1f0 <col:24> 'unsigned long' 4
|       `-RecordType 0x56439aaed330 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56439aaed250 'char_array'
|-TypedefDecl 0x56439aaeec98 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56439aaeec60 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56439aaeec40 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56439aaeebe0 'type'
|     `-ElaboratedType 0x56439aaeeb90 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56439aaed4c0 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56439aaed3c0 'type'
|         `-TemplateSpecializationType 0x56439aaed350 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56439aaed230 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56439aaed210 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56439aaed1f0 <col:24> 'unsigned long' 4
|           `-RecordType 0x56439aaed330 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56439aaed250 'char_array'
|-CXXMethodDecl 0x56439aaeee18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56439aaeed28 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56439aaeef08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56439aaeefe8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56439aaef2b8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56439aaef1c0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56439aaef4f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56439aaef370 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56439aaef3e8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaef6c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56439aaef5b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56439aaef630 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaef828 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56439aaef8f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56439aaefb48 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56439aaef9b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56439aaefa30 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaf89a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56439aaefc18 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56439aaf8890 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaf8b68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56439aaf8a78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaf8d28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56439aaf8c30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaf8de0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56439aaf8e90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56439aaf90c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56439aaf8f40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56439aaf8fb8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56439aaf9368 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56439aaf9270 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56439aaf9430 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56439aaf9480 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56439aaf94d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56439aaeb788 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56439aaeb998 prev 0x56439aaeb788 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56439aaeccf0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56439aaecca0 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56439aaecc80 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56439aaecb30 'type'
|     `-SubstTemplateTypeParmType 0x56439aaec950 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56439a7c3bf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7c3b98 'T'
|       `-RecordType 0x56439aaec4a0 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56439aaec3b8 'sized_array_memory'
|-FieldDecl 0x56439aaf9520 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56439aaf9570 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56439aaf95a8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|   |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56439a7fb888 'T'
|   `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aaf9638 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56439aaf9600 'int &'
|   `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|     |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56439a7fb888 'T'
|     `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aaf96f8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56439aaf96c0 'const int &'
|   `-QualType 0x56439aaeba31 'const int' const
|     `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aaf9788 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56439aaf9750 'int *'
|   `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|     |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56439a7fb888 'T'
|     `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aaf9818 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56439aaf97e0 'const int *'
|   `-QualType 0x56439aaeba31 'const int' const
|     `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aafa400 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56439aafa3b0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56439aafa390 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56439aafa320 'type'
|     `-SubstTemplateTypeParmType 0x56439aafa0e0 'int' sugar
|       |-TemplateTypeParmType 0x56439a7ce9f0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7ce9a0 'T'
|       `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aafa468 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56439aaf96c0 'const int &'
|   `-QualType 0x56439aaeba31 'const int' const
|     `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aafa4c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aafa528 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56439aaf9750 'int *'
|   `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|     |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56439a7fb888 'T'
|     `-BuiltinType 0x56439a4fe370 'int'
|-TypedefDecl 0x56439aafa590 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56439aaf97e0 'const int *'
|   `-QualType 0x56439aaeba31 'const int' const
|     `-SubstTemplateTypeParmType 0x56439aaeba30 'int' sugar
|       |-TemplateTypeParmType 0x56439a7fb8e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56439a7fb888 'T'
|       `-BuiltinType 0x56439a4fe370 'int'
|-EnumDecl 0x56439aafa5e8 <line:134:5> col:5
| `-EnumConstantDecl 0x56439aafa6e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56439aafa6c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56439a7fcf68 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56439a7fcf40 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56439a7fcf20 <col:40> 'int' 1
|-CXXConstructorDecl 0x56439aafa768 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56439aafa9b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aafa820 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56439aafa8c0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56439aafac78 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56439aafab60 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56439aafaf38 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56439aafae20 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56439aafb280 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56439aafb160 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56439aafb590 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56439aafb470 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56439aafb880 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aafb6c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56439aafb740 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56439aafb9a8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56439aafba88 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aafbae0 <col:30> Inherited
|-CXXMethodDecl 0x56439aafbb28 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56439aafbbd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aafbc30 <col:30> Inherited
|-CXXMethodDecl 0x56439aafbcf8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56439aafbda8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aafbe00 <col:30> Inherited
|-CXXMethodDecl 0x56439aafbe48 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56439aafbef8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aafbf50 <col:30> Inherited
|-CXXMethodDecl 0x56439aafbf98 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56439aafc048 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aafc0a0 <col:30> Inherited
|-CXXMethodDecl 0x56439aafc0e8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56439aafc198 <col:20> Inherited
| `-OptimizeNoneAttr 0x56439aafc1f0 <col:30> Inherited
|-CXXMethodDecl 0x56439aafc218 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56439aafc2c8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56439aafc378 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56439aafc538 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aafc428 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56439aafc4a0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56439aafc688 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56439aafc5f8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aafc838 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56439aafc740 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56439aafc8f0 <col:20>
| `-OptimizeNoneAttr 0x56439aafc948 <col:30>
|-CXXMethodDecl 0x56439aafca68 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56439aafc970 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56439aafcb20 <col:20>
| `-OptimizeNoneAttr 0x56439aafcb78 <col:30>
|-CXXMethodDecl 0x56439aafcc30 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56439aafcba0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aafcd78 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56439aafcce8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aafcea8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56439aafcfd8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56439aafd0a8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56439aafd178 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56439aafd2b8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56439aafd228 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aafd400 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56439aafd370 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56439aafd548 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56439aafd4b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56439aafd600 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56439aafd700 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56439aafd670 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56439aafd7b8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56439aafd878 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56439aafd978 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56439aafdaf8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56439aafda38 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56439aafe2b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56439aafdbb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56439aafe218 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56439aafe118 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56439aafe398 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56439aafe4e8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56439aafe458 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56439aafe5a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56439aafe7e8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56439aafe660 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56439aafe6d8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56439aafe9a8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56439aafe8b8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56439aafebf8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56439aafea70 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56439aafeae8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56439aafecb8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56439aafef18 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56439aafee20 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56439aafefe8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aae98f8 prev 0x56439aacbb48 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56439aae99f0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56439aae9ae0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56439ab10ca0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56439aae9bd0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56439ab10cb0 <col:25, line:830:9>
|-CXXMethodDecl 0x56439aae9cd0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56439aae9d80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56439aae9e28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56439aae9e28
| `-ParmVarDecl 0x56439aae9f38 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56439aaea6f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56439aaea6f8
  `-ParmVarDecl 0x56439aaea808 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aacb958 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56439aacbab8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56439aacbb48 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56439aacbc00 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56439aacbd08 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56439aacbc38 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56439ab005a8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56439ab00588 <col:31> 'int' 0
|-CXXConstructorDecl 0x56439aacc028 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56439aacbea0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56439aacbf18 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56439ab005e0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56439ab005c0 <col:59> 'int' 0
|-CXXConstructorDecl 0x56439aacc200 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aacc0f0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56439aacc168 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56439ab00618 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56439ab005f8 <col:55> 'int' 0
|-CXXConstructorDecl 0x56439aacc5b8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56439aacc3a0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56439aacc418 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56439aacc490 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56439ab00650 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56439ab00630 <col:31> 'int' 0
|-CXXConstructorDecl 0x56439aacc778 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56439aacc6b8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56439aacc870 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56439aacca58 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56439aacc960 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56439aaccb48 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56439ab022f0 <col:24, line:291:5>
|   `-ReturnStmt 0x56439ab022e0 <line:290:9, col:79>
|     `-BinaryOperator 0x56439ab022c0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56439ab02198 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56439ab00800 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56439ab007e0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56439ab006d8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56439ab006c0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56439ab006a8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56439ab00678 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56439aaeb720
|       | |   |       `-CXXThisExpr 0x56439ab00668 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56439ab007c8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56439ab007b0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56439ab00778 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56439ab00748 <col:28, col:35> '<bound member function type>' ->size 0x56439aaacc18
|       | |           `-ImplicitCastExpr 0x56439ab00798 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56439ab00730 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56439ab00700 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56439aaeb720
|       | |                 `-CXXThisExpr 0x56439ab006f0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56439ab02180 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56439ab00878 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56439ab00860 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56439ab00830 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56439aaff130
|       |         `-CXXThisExpr 0x56439ab00820 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56439ab022a0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56439ab02288 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56439ab02270 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56439ab02230 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56439ab02218 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56439ab021c8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56439aaff1e0
|         |     |   `-CXXThisExpr 0x56439ab021b8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56439ab021f8 <col:73> 'int' 0
|         `-IntegerLiteral 0x56439ab02250 <col:79> 'int' 0
|-CXXMethodDecl 0x56439aaccc08 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56439ab024c8 <col:32, line:296:5>
|   `-ReturnStmt 0x56439ab024b8 <line:295:9, col:49>
|     `-BinaryOperator 0x56439ab02498 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56439ab02378 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56439ab02360 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56439ab02348 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56439ab02318 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56439aaff130
|       |       `-CXXThisExpr 0x56439ab02308 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56439ab02478 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56439ab02460 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56439ab02448 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56439ab02408 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56439ab023f0 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56439ab023a0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56439aaff1e0
|         |     |   `-CXXThisExpr 0x56439ab02390 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56439ab023d0 <col:43> 'int' 0
|         `-IntegerLiteral 0x56439ab02428 <col:49> 'int' 0
|-CXXMethodDecl 0x56439aacccf8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56439ab026d8 <col:19, line:306:5>
|   |-IfStmt 0x56439ab025f8 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56439ab02538 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56439ab02520 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56439ab024f0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56439aaeb720
|   | |     `-CXXThisExpr 0x56439ab024e0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56439ab025d8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56439ab025a8 <col:13, col:20> '<bound member function type>' ->clear 0x56439aaaf618
|   |     `-ImplicitCastExpr 0x56439ab02590 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56439ab02560 <col:13> 'Vector<String> *' lvalue ->_conf 0x56439aaeb720
|   |         `-CXXThisExpr 0x56439ab02550 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56439ab02680 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56439ab02650 <col:9, col:16> '<bound member function type>' .clear 0x56439aafecb8
|   |   `-MemberExpr 0x56439ab02620 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56439aaff0d0
|   |     `-CXXThisExpr 0x56439ab02610 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56439ab026c8 <line:305:9, col:17>
|     `-UnaryOperator 0x56439ab026b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439ab026a0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56439aaccf78 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56439aacce80 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56439aacd0f8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56439aacd030 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56439aacd478 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56439aacd1a0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56439aacd3d8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56439aacd248 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56439aacd2c0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56439ab029f8 <col:67, line:327:5>
|     |-WhileStmt 0x56439ab029a8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56439ab027c0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56439ab02740 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56439aa1d4c8 0x56439a866aa8 0x56439a866780 0x56439a857f60 0x56439a857c10 0x56439a857500 0x56439a829e70 0x56439a7b6330
|     | | |-DeclRefExpr 0x56439ab02700 <col:16> 'Iter' lvalue ParmVar 0x56439aacd248 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56439ab02720 <col:25> 'Iter' lvalue ParmVar 0x56439aacd2c0 'end' 'Iter'
|     | `-CompoundStmt 0x56439ab02988 <col:30, line:325:9>
|     |   |-CallExpr 0x56439ab02928 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56439ab02808 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56439ab028f8 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56439ab02888 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|     |   |   `-DeclRefExpr 0x56439ab02868 <col:24> 'Iter' lvalue ParmVar 0x56439aacd248 'begin' 'Iter'
|     |   `-UnaryOperator 0x56439ab02970 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56439ab02950 <col:15> 'Iter' lvalue ParmVar 0x56439aacd248 'begin' 'Iter'
|     `-ReturnStmt 0x56439ab029e8 <line:326:9, col:17>
|       `-UnaryOperator 0x56439ab029d0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab029c0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56439aacd580 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56439aacd4f0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56439aacd6c8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56439aacd638 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56439aacd790 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56439ab02ad8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56439ab02a78 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56439ab02a28 <col:9> '<bound member function type>' ->reset_from 0x56439aaff558
|   | | `-CXXThisExpr 0x56439ab02a18 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56439ab02a58 <col:20> 'int' 0
|   `-ReturnStmt 0x56439ab02ac8 <line:352:9, col:17>
|     `-UnaryOperator 0x56439ab02ab0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439ab02aa0 <col:17> 'Args *' this
|-VarDecl 0x56439aacd848 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56439aacd8b0 <col:38> 'int' 1
|-VarDecl 0x56439aacd940 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56439aacd9a8 <col:39> 'int' 2
|-VarDecl 0x56439aacda38 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56439aacdaa0 <col:39> 'int' 4
|-VarDecl 0x56439aacdb30 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56439aacdb98 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56439aacdf18 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56439aacdc10 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aacde78 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56439aacdcc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aacdd68 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56439ab02c30 <col:43, line:371:5>
|     `-ReturnStmt 0x56439ab02c20 <line:370:9, col:34>
|       `-CallExpr 0x56439ab02be8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab02b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab02b88 <col:21> 'const char *' lvalue ParmVar 0x56439aacdcc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab02ba8 <col:30> 'int' 0
|         `-DeclRefExpr 0x56439ab02bc8 <col:33> 'T' lvalue ParmVar 0x56439aacdd68 'x' 'T &'
|-FunctionTemplateDecl 0x56439aace248 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56439aacdf80 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aace1a8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56439aace030 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aace0d8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56439ab02d80 <col:45, line:375:5>
|     `-ReturnStmt 0x56439ab02d70 <line:374:9, col:42>
|       `-CallExpr 0x56439ab02d38 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab02c58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab02cd8 <col:21> 'const char *' lvalue ParmVar 0x56439aace030 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab02cf8 <col:30> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int'
|         `-DeclRefExpr 0x56439ab02d18 <col:41> 'T' lvalue ParmVar 0x56439aace0d8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aace578 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56439aace2b0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56439aace4d8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56439aace360 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56439aace408 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x56439ab02ed0 <col:45, line:379:5>
| |   `-ReturnStmt 0x56439ab02ec0 <line:378:9, col:43>
| |     `-CallExpr 0x56439ab02e88 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56439ab02da8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56439ab02e28 <col:21> 'const char *' lvalue ParmVar 0x56439aace360 'keyword' 'const char *'
| |       |-DeclRefExpr 0x56439ab02e48 <col:30> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int'
| |       `-DeclRefExpr 0x56439ab02e68 <col:42> 'T' lvalue ParmVar 0x56439aace408 'x' 'T &'
| `-CXXMethodDecl 0x56439ab434b8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56439ab432d8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x56439ab433a8 <col:39, col:42> col:42 x 'int &'
|-FunctionTemplateDecl 0x56439aace8a8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56439aace5e0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aace808 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56439aace690 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aace738 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x56439ab030d0 <col:46, line:383:5>
|     `-ReturnStmt 0x56439ab030c0 <line:382:9, col:55>
|       `-CallExpr 0x56439ab03088 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab02ef8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab02f78 <col:21> 'const char *' lvalue ParmVar 0x56439aace690 'keyword' 'const char *'
|         |-BinaryOperator 0x56439ab03048 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56439ab02ff8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56439ab02fd8 <col:30> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56439ab03030 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56439ab03010 <col:42> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56439ab03068 <col:54> 'T' lvalue ParmVar 0x56439aace738 'x' 'T &'
|-FunctionTemplateDecl 0x56439aaceca8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56439aace910 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aacec08 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56439aace9c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aacea40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56439aaceae8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56439ab03210 <col:54, line:388:5>
|     |-CallExpr 0x56439ab03198 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab030e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56439ab03128 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56439ab03138 <col:30> 'const char *' lvalue ParmVar 0x56439aace9c0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56439ab03158 <col:39> 'int' lvalue ParmVar 0x56439aacea40 'flags' 'int'
|     | `-DeclRefExpr 0x56439ab03178 <col:46> 'T' lvalue ParmVar 0x56439aaceae8 'x' 'T &'
|     `-ReturnStmt 0x56439ab03200 <line:387:9, col:17>
|       `-UnaryOperator 0x56439ab031e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab031d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aacf158 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56439aaced18 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56439aaced98 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56439aacf0b8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56439aacee58 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aaceef8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56439aacef98 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56439ab03380 <col:74, line:403:5>
|     `-ReturnStmt 0x56439ab03370 <line:402:9, col:56>
|       `-CallExpr 0x56439ab03330 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab03240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab032b0 <col:28> 'const char *' lvalue ParmVar 0x56439aacee58 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab032d0 <col:37> 'int' 0
|         |-DeclRefExpr 0x56439ab032f0 <col:40> 'T' lvalue ParmVar 0x56439aaceef8 'x' 'T &'
|         `-DeclRefExpr 0x56439ab03310 <col:43> 'const V' lvalue ParmVar 0x56439aacef98 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56439aacf5c8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56439aacf1c8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56439aacf248 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56439aacf528 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56439aacf308 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aacf3a8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56439aacf448 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56439ab034e8 <col:76, line:407:5>
|     `-ReturnStmt 0x56439ab034d8 <line:406:9, col:65>
|       `-CallExpr 0x56439ab03498 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab033a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab03418 <col:28> 'const char *' lvalue ParmVar 0x56439aacf308 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab03438 <col:37> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int'
|         |-DeclRefExpr 0x56439ab03458 <col:49> 'T' lvalue ParmVar 0x56439aacf3a8 'x' 'T &'
|         `-DeclRefExpr 0x56439ab03478 <col:52> 'const V' lvalue ParmVar 0x56439aacf448 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56439aacfb18 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56439aacf638 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56439aacf6b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56439aacfa78 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56439aacf778 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aacf7f8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56439aacf898 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56439aacf938 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56439ab03650 <col:85, line:412:5>
|     |-CallExpr 0x56439ab035d0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab03500 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56439ab03540 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56439ab03550 <col:37> 'const char *' lvalue ParmVar 0x56439aacf778 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56439ab03570 <col:46> 'int' lvalue ParmVar 0x56439aacf7f8 'flags' 'int'
|     | |-DeclRefExpr 0x56439ab03590 <col:53> 'T' lvalue ParmVar 0x56439aacf898 'x' 'T &'
|     | `-DeclRefExpr 0x56439ab035b0 <col:56> 'const V' lvalue ParmVar 0x56439aacf938 'default_value' 'const V &'
|     `-ReturnStmt 0x56439ab03640 <line:411:9, col:17>
|       `-UnaryOperator 0x56439ab03628 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab03618 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aacffa8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56439aacfb90 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aacfc08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aacff08 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aacfcc8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aacfd40 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56439aacfde8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56439ab037d0 <col:53, line:425:5>
|     `-ReturnStmt 0x56439ab037c0 <line:424:9, col:42>
|       `-CallExpr 0x56439ab03780 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab03680 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab03700 <col:21> 'const char *' lvalue ParmVar 0x56439aacfcc8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab03720 <col:30> 'int' 0
|         |-DeclRefExpr 0x56439ab03740 <col:33> 'P' lvalue ParmVar 0x56439aacfd40 'parser' 'P'
|         `-DeclRefExpr 0x56439ab03760 <col:41> 'T' lvalue ParmVar 0x56439aacfde8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aad03f8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56439aad0018 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad0098 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aad0358 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aad0158 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad01d0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad0278 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56439ab03948 <col:55, line:429:5>
|     `-ReturnStmt 0x56439ab03938 <line:428:9, col:50>
|       `-CallExpr 0x56439ab038f8 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab037f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab03878 <col:21> 'const char *' lvalue ParmVar 0x56439aad0158 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab03898 <col:30> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int'
|         |-DeclRefExpr 0x56439ab038b8 <col:41> 'P' lvalue ParmVar 0x56439aad01d0 'parser' 'P'
|         `-DeclRefExpr 0x56439ab038d8 <col:49> 'T' lvalue ParmVar 0x56439aad0278 'x' 'T &'
|-FunctionTemplateDecl 0x56439aad0848 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56439aad0468 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad04e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aad07a8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aad05a8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad0620 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad06c8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56439ab03ac0 <col:55, line:433:5>
|     `-ReturnStmt 0x56439ab03ab0 <line:432:9, col:51>
|       `-CallExpr 0x56439ab03a70 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab03970 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab039f0 <col:21> 'const char *' lvalue ParmVar 0x56439aad05a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab03a10 <col:30> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int'
|         |-DeclRefExpr 0x56439ab03a30 <col:42> 'P' lvalue ParmVar 0x56439aad0620 'parser' 'P'
|         `-DeclRefExpr 0x56439ab03a50 <col:50> 'T' lvalue ParmVar 0x56439aad06c8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aad0c98 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56439aad08b8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad0938 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aad0bf8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aad09f8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad0a70 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad0b18 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56439ab03ce8 <col:56, line:437:5>
|     `-ReturnStmt 0x56439ab03cd8 <line:436:9, col:63>
|       `-CallExpr 0x56439ab03c98 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab03ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab03b68 <col:21> 'const char *' lvalue ParmVar 0x56439aad09f8 'keyword' 'const char *'
|         |-BinaryOperator 0x56439ab03c38 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56439ab03be8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56439ab03bc8 <col:30> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56439ab03c20 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56439ab03c00 <col:42> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56439ab03c58 <col:54> 'P' lvalue ParmVar 0x56439aad0a70 'parser' 'P'
|         `-DeclRefExpr 0x56439ab03c78 <col:62> 'T' lvalue ParmVar 0x56439aad0b18 'x' 'T &'
|-FunctionTemplateDecl 0x56439aad11c8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56439aad0d08 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad0d88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aad1128 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56439aad0e48 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad0ec8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56439aad0f40 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad0fe8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56439ab03e50 <col:64, line:442:5>
|     |-CallExpr 0x56439ab03dd0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab03d00 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56439ab03d40 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56439ab03d50 <col:30> 'const char *' lvalue ParmVar 0x56439aad0e48 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56439ab03d70 <col:39> 'int' lvalue ParmVar 0x56439aad0ec8 'flags' 'int'
|     | |-DeclRefExpr 0x56439ab03d90 <col:46> 'P' lvalue ParmVar 0x56439aad0f40 'parser' 'P'
|     | `-DeclRefExpr 0x56439ab03db0 <col:54> 'T' lvalue ParmVar 0x56439aad0fe8 'x' 'T &'
|     `-ReturnStmt 0x56439ab03e40 <line:441:9, col:17>
|       `-UnaryOperator 0x56439ab03e28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab03e18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aad17c8 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56439aad1240 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad12b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56439aad1338 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56439aad1728 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56439aad1400 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad1478 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad1518 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56439aad15e8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56439ab03fe8 <col:84, line:458:5>
|     `-ReturnStmt 0x56439ab03fd8 <line:457:9, col:64>
|       `-CallExpr 0x56439ab03f90 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab03e80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab03ef0 <col:28> 'const char *' lvalue ParmVar 0x56439aad1400 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab03f10 <col:37> 'int' 0
|         |-DeclRefExpr 0x56439ab03f30 <col:40> 'P' lvalue ParmVar 0x56439aad1478 'parser' 'P'
|         |-DeclRefExpr 0x56439ab03f50 <col:48> 'T' lvalue ParmVar 0x56439aad1518 'x' 'T &'
|         `-DeclRefExpr 0x56439ab03f70 <col:51> 'const V' lvalue ParmVar 0x56439aad15e8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56439aad1d48 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56439aad1840 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad18b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56439aad1938 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56439aad1ca8 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56439aad1a00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad1a78 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad1b18 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56439aad1bb8 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56439ab04178 <col:86, line:462:5>
|     `-ReturnStmt 0x56439ab04168 <line:461:9, col:73>
|       `-CallExpr 0x56439ab04120 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab04080 <col:28> 'const char *' lvalue ParmVar 0x56439aad1a00 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab040a0 <col:37> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int'
|         |-DeclRefExpr 0x56439ab040c0 <col:49> 'P' lvalue ParmVar 0x56439aad1a78 'parser' 'P'
|         |-DeclRefExpr 0x56439ab040e0 <col:57> 'T' lvalue ParmVar 0x56439aad1b18 'x' 'T &'
|         `-DeclRefExpr 0x56439ab04100 <col:60> 'const V' lvalue ParmVar 0x56439aad1bb8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56439aad23a8 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56439aad1dc0 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad1e38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56439aad1eb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56439aad2308 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56439aad1f80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad2000 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56439aad2078 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad2118 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56439aad21b8 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56439ab04308 <col:95, line:467:5>
|     |-CallExpr 0x56439ab04280 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab04190 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56439ab041d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56439ab041e0 <col:37> 'const char *' lvalue ParmVar 0x56439aad1f80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56439ab04200 <col:46> 'int' lvalue ParmVar 0x56439aad2000 'flags' 'int'
|     | |-DeclRefExpr 0x56439ab04220 <col:53> 'P' lvalue ParmVar 0x56439aad2078 'parser' 'P'
|     | |-DeclRefExpr 0x56439ab04240 <col:61> 'T' lvalue ParmVar 0x56439aad2118 'x' 'T &'
|     | `-DeclRefExpr 0x56439ab04260 <col:64> 'const V' lvalue ParmVar 0x56439aad21b8 'default_value' 'const V &'
|     `-ReturnStmt 0x56439ab042f8 <line:466:9, col:17>
|       `-UnaryOperator 0x56439ab042e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab042d0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aad2988 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56439aad2428 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad24a8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56439aad2528 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56439aad28e8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56439aad25f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad2668 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad2708 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56439aad27a8 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56439ab044b0 <col:63, line:481:5>
|     `-ReturnStmt 0x56439ab044a0 <line:480:9, col:47>
|       `-CallExpr 0x56439ab04458 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04338 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab043b8 <col:21> 'const char *' lvalue ParmVar 0x56439aad25f0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab043d8 <col:30> 'int' 0
|         |-DeclRefExpr 0x56439ab043f8 <col:33> 'P' lvalue ParmVar 0x56439aad2668 'parser' 'P'
|         |-DeclRefExpr 0x56439ab04418 <col:41> 'T1' lvalue ParmVar 0x56439aad2708 'x1' 'T1 &'
|         `-DeclRefExpr 0x56439ab04438 <col:45> 'T2' lvalue ParmVar 0x56439aad27a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56439aad2f08 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56439aad2a00 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad2a78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56439aad2af8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56439aad2e68 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56439aad2bc0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad2c38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad2cd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56439aad2d78 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56439ab04650 <col:65, line:485:5>
|     `-ReturnStmt 0x56439ab04640 <line:484:9, col:55>
|       `-CallExpr 0x56439ab045f8 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab044d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab04558 <col:21> 'const char *' lvalue ParmVar 0x56439aad2bc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab04578 <col:30> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int'
|         |-DeclRefExpr 0x56439ab04598 <col:41> 'P' lvalue ParmVar 0x56439aad2c38 'parser' 'P'
|         |-DeclRefExpr 0x56439ab045b8 <col:49> 'T1' lvalue ParmVar 0x56439aad2cd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56439ab045d8 <col:53> 'T2' lvalue ParmVar 0x56439aad2d78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56439aad8938 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56439aad2f80 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad2ff8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56439aad3078 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56439aad8898 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56439aad3140 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad8660 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad8708 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56439aad87a8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56439ab047f0 <col:65, line:489:5>
|     `-ReturnStmt 0x56439ab047e0 <line:488:9, col:56>
|       `-CallExpr 0x56439ab04798 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04678 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab046f8 <col:21> 'const char *' lvalue ParmVar 0x56439aad3140 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab04718 <col:30> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int'
|         |-DeclRefExpr 0x56439ab04738 <col:42> 'P' lvalue ParmVar 0x56439aad8660 'parser' 'P'
|         |-DeclRefExpr 0x56439ab04758 <col:50> 'T1' lvalue ParmVar 0x56439aad8708 'x1' 'T1 &'
|         `-DeclRefExpr 0x56439ab04778 <col:54> 'T2' lvalue ParmVar 0x56439aad87a8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56439aad8eb8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56439aad89b0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad8a28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56439aad8aa8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56439aad8e18 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56439aad8b70 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad8be8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad8c88 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56439aad8d28 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56439ab04a40 <col:66, line:493:5>
|     `-ReturnStmt 0x56439ab04a30 <line:492:9, col:68>
|       `-CallExpr 0x56439ab049e8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab04898 <col:21> 'const char *' lvalue ParmVar 0x56439aad8b70 'keyword' 'const char *'
|         |-BinaryOperator 0x56439ab04968 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56439ab04918 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56439ab048f8 <col:30> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56439ab04950 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56439ab04930 <col:42> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56439ab04988 <col:54> 'P' lvalue ParmVar 0x56439aad8be8 'parser' 'P'
|         |-DeclRefExpr 0x56439ab049a8 <col:62> 'T1' lvalue ParmVar 0x56439aad8c88 'x1' 'T1 &'
|         `-DeclRefExpr 0x56439ab049c8 <col:66> 'T2' lvalue ParmVar 0x56439aad8d28 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56439aad9518 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56439aad8f30 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aad8fa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56439aad9028 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56439aad9478 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56439aad90f0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad9170 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56439aad91e8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56439aad9288 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56439aad9328 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56439ab04bd0 <col:74, line:498:5>
|     |-CallExpr 0x56439ab04b48 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab04a58 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56439ab04a98 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56439ab04aa8 <col:30> 'const char *' lvalue ParmVar 0x56439aad90f0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56439ab04ac8 <col:39> 'int' lvalue ParmVar 0x56439aad9170 'flags' 'int'
|     | |-DeclRefExpr 0x56439ab04ae8 <col:46> 'P' lvalue ParmVar 0x56439aad91e8 'parser' 'P'
|     | |-DeclRefExpr 0x56439ab04b08 <col:54> 'T1' lvalue ParmVar 0x56439aad9288 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56439ab04b28 <col:58> 'T2' lvalue ParmVar 0x56439aad9328 'x2' 'T2 &'
|     `-ReturnStmt 0x56439ab04bc0 <line:497:9, col:17>
|       `-UnaryOperator 0x56439ab04ba8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab04b98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aad9878 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56439aad9598 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aad97d8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56439aad9650 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad96c8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56439ab04d18 <col:52, line:509:5>
|     `-ReturnStmt 0x56439ab04d08 <line:508:9, col:44>
|       `-CallExpr 0x56439ab04cd0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04c00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab04c70 <col:26> 'const char *' lvalue ParmVar 0x56439aad9650 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab04c90 <col:35> 'int' 0
|         `-DeclRefExpr 0x56439ab04cb0 <col:38> 'P' lvalue ParmVar 0x56439aad96c8 'parser' 'P'
|-FunctionTemplateDecl 0x56439aad9b78 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56439aad98e0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aad9ad8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56439aad9990 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad9a08 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56439ab04e58 <col:54, line:513:5>
|     `-ReturnStmt 0x56439ab04e48 <line:512:9, col:52>
|       `-CallExpr 0x56439ab04e10 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04d40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab04db0 <col:26> 'const char *' lvalue ParmVar 0x56439aad9990 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab04dd0 <col:35> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int'
|         `-DeclRefExpr 0x56439ab04df0 <col:46> 'P' lvalue ParmVar 0x56439aad9a08 'parser' 'P'
|-FunctionTemplateDecl 0x56439aad9e78 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56439aad9be0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aad9dd8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56439aad9c90 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aad9d08 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56439ab04f98 <col:54, line:517:5>
|     `-ReturnStmt 0x56439ab04f88 <line:516:9, col:53>
|       `-CallExpr 0x56439ab04f50 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04e80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab04ef0 <col:26> 'const char *' lvalue ParmVar 0x56439aad9c90 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab04f10 <col:35> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int'
|         `-DeclRefExpr 0x56439ab04f30 <col:47> 'P' lvalue ParmVar 0x56439aad9d08 'parser' 'P'
|-FunctionTemplateDecl 0x56439aada178 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56439aad9ee0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aada0d8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56439aad9f90 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aada008 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56439ab05188 <col:55, line:521:5>
|     `-ReturnStmt 0x56439ab05178 <line:520:9, col:65>
|       `-CallExpr 0x56439ab05140 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab04fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab05030 <col:26> 'const char *' lvalue ParmVar 0x56439aad9f90 'keyword' 'const char *'
|         |-BinaryOperator 0x56439ab05100 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56439ab050b0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56439ab05090 <col:35> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56439ab050e8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56439ab050c8 <col:47> 'const int' lvalue Var 0x56439aacd940 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56439ab05120 <col:59> 'P' lvalue ParmVar 0x56439aada008 'parser' 'P'
|-FunctionTemplateDecl 0x56439aada548 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56439aada1e0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aada4a8 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56439aada290 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aada310 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56439aada388 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56439ab052c8 <col:63, line:526:5>
|     |-CallExpr 0x56439ab05250 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab051a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56439ab051e0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56439ab051f0 <col:35> 'const char *' lvalue ParmVar 0x56439aada290 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56439ab05210 <col:44> 'int' lvalue ParmVar 0x56439aada310 'flags' 'int'
|     | `-DeclRefExpr 0x56439ab05230 <col:51> 'P' lvalue ParmVar 0x56439aada388 'parser' 'P'
|     `-ReturnStmt 0x56439ab052b8 <line:525:9, col:17>
|       `-UnaryOperator 0x56439ab052a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab05290 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aada998 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56439aada5b8 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aada638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aada8f8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aada6f8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aada770 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56439aada818 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56439ab05420 <col:58, line:541:5>
|     `-ReturnStmt 0x56439ab05410 <line:540:9, col:39>
|       `-CallExpr 0x56439ab053d8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab052f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab05378 <col:21> 'const char *' lvalue ParmVar 0x56439aada6f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab05398 <col:30> 'P' lvalue ParmVar 0x56439aada770 'parser' 'P'
|         `-DeclRefExpr 0x56439ab053b8 <col:38> 'T' lvalue ParmVar 0x56439aada818 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadade8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56439aadaa08 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadaa88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadad48 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aadab48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadabc0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadac68 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56439ab05558 <col:60, line:545:5>
|     `-ReturnStmt 0x56439ab05548 <line:544:9, col:41>
|       `-CallExpr 0x56439ab05510 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab05448 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab054b0 <col:23> 'const char *' lvalue ParmVar 0x56439aadab48 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab054d0 <col:32> 'P' lvalue ParmVar 0x56439aadabc0 'parser' 'P'
|         `-DeclRefExpr 0x56439ab054f0 <col:40> 'T' lvalue ParmVar 0x56439aadac68 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadb238 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56439aadae58 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadaed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadb198 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aadaf98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadb010 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadb0b8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56439ab05690 <col:60, line:549:5>
|     `-ReturnStmt 0x56439ab05680 <line:548:9, col:41>
|       `-CallExpr 0x56439ab05648 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab05580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab055e8 <col:23> 'const char *' lvalue ParmVar 0x56439aadaf98 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab05608 <col:32> 'P' lvalue ParmVar 0x56439aadb010 'parser' 'P'
|         `-DeclRefExpr 0x56439ab05628 <col:40> 'T' lvalue ParmVar 0x56439aadb0b8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadb688 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56439aadb2a8 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadb328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadb5e8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aadb3e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadb460 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadb508 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56439ab057c8 <col:61, line:553:5>
|     `-ReturnStmt 0x56439ab057b8 <line:552:9, col:42>
|       `-CallExpr 0x56439ab05780 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab056b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab05720 <col:24> 'const char *' lvalue ParmVar 0x56439aadb3e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab05740 <col:33> 'P' lvalue ParmVar 0x56439aadb460 'parser' 'P'
|         `-DeclRefExpr 0x56439ab05760 <col:41> 'T' lvalue ParmVar 0x56439aadb508 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadbb68 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56439aadb6f8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadb778 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadbac8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56439aadb838 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadb8b8 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadb930 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadb9d8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56439ab05940 <col:69, line:557:5>
|     `-ReturnStmt 0x56439ab05930 <line:556:9, col:46>
|       `-CallExpr 0x56439ab058f0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab057f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab05870 <col:21> 'const char *' lvalue ParmVar 0x56439aadb838 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab05890 <col:30> 'int' lvalue ParmVar 0x56439aadb8b8 'flags' 'int'
|         |-DeclRefExpr 0x56439ab058b0 <col:37> 'P' lvalue ParmVar 0x56439aadb930 'parser' 'P'
|         `-DeclRefExpr 0x56439ab058d0 <col:45> 'T' lvalue ParmVar 0x56439aadb9d8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadbe78 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56439aadbbe0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aadbdd8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56439aadbc90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadbd08 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56439ab05a80 <col:56, line:571:5>
|     `-ReturnStmt 0x56439ab05a70 <line:570:9, col:48>
|       `-CallExpr 0x56439ab05a38 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab05968 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab059d8 <col:30> 'const char *' lvalue ParmVar 0x56439aadbc90 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab059f8 <col:39> 'int' 0
|         `-DeclRefExpr 0x56439ab05a18 <col:42> 'P' lvalue ParmVar 0x56439aadbd08 'parser' 'P'
|-FunctionTemplateDecl 0x56439aadc208 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56439aadbee0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aadc168 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56439aadbf90 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadc010 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadc088 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56439ab05c50 <col:67, line:576:5>
|     |-CallExpr 0x56439ab05bd8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab05a98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56439ab05ad8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56439ab05ae8 <col:39> 'const char *' lvalue ParmVar 0x56439aadbf90 'keyword' 'const char *'
|     | |-BinaryOperator 0x56439ab05b98 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56439ab05b48 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56439ab05b08 <col:48> 'int' lvalue ParmVar 0x56439aadc010 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56439ab05b80 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56439ab05b60 <col:56> 'const int' lvalue Var 0x56439aacdb30 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56439ab05bb8 <col:68> 'P' lvalue ParmVar 0x56439aadc088 'parser' 'P'
|     `-ReturnStmt 0x56439ab05c40 <line:575:9, col:17>
|       `-UnaryOperator 0x56439ab05c28 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab05c18 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aadc658 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56439aadc278 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadc2f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadc5b8 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56439aadc3b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadc430 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadc4d8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56439ab05dc0 <col:62, line:592:5>
|     `-ReturnStmt 0x56439ab05db0 <line:591:9, col:51>
|       `-CallExpr 0x56439ab05d70 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab05c80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab05cf0 <col:30> 'const char *' lvalue ParmVar 0x56439aadc3b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab05d10 <col:39> 'int' 0
|         |-DeclRefExpr 0x56439ab05d30 <col:42> 'P' lvalue ParmVar 0x56439aadc430 'parser' 'P'
|         `-DeclRefExpr 0x56439ab05d50 <col:50> 'T' lvalue ParmVar 0x56439aadc4d8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadcb38 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56439aadc6c8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadc748 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadca98 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56439aadc808 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadc888 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadc900 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadc9a8 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56439ab05fb8 <col:73, line:597:5>
|     |-CallExpr 0x56439ab05f38 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab05dd8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56439ab05e18 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56439ab05e28 <col:39> 'const char *' lvalue ParmVar 0x56439aadc808 'keyword' 'const char *'
|     | |-BinaryOperator 0x56439ab05ed8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56439ab05e88 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56439ab05e48 <col:48> 'int' lvalue ParmVar 0x56439aadc888 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56439ab05ec0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56439ab05ea0 <col:56> 'const int' lvalue Var 0x56439aacdb30 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56439ab05ef8 <col:68> 'P' lvalue ParmVar 0x56439aadc900 'parser' 'P'
|     | `-DeclRefExpr 0x56439ab05f18 <col:76> 'T' lvalue ParmVar 0x56439aadc9a8 'x' 'T &'
|     `-ReturnStmt 0x56439ab05fa8 <line:596:9, col:17>
|       `-UnaryOperator 0x56439ab05f90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab05f80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aadd0e8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56439aadcbb0 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadcc28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadd048 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56439aadcce8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadcd60 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadcf20 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56439ab06128 <col:65, line:614:5>
|     `-ReturnStmt 0x56439ab06118 <line:613:9, col:46>
|       `-CallExpr 0x56439ab060d8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab05fe8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab06058 <col:25> 'const char *' lvalue ParmVar 0x56439aadcce8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab06078 <col:34> 'int' 0
|         |-DeclRefExpr 0x56439ab06098 <col:37> 'P' lvalue ParmVar 0x56439aadcd60 'parser' 'P'
|         `-DeclRefExpr 0x56439ab060b8 <col:45> 'Vector<T>' lvalue ParmVar 0x56439aadcf20 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56439aadd518 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56439aadd158 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aadd478 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56439aadd210 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadd360 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56439ab06340 <col:55, line:618:5>
|     `-ReturnStmt 0x56439ab06330 <line:617:9, col:55>
|       `-CallExpr 0x56439ab062f0 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab06150 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab061c0 <col:25> 'const char *' lvalue ParmVar 0x56439aadd210 'keyword' 'const char *'
|         |-IntegerLiteral 0x56439ab061e0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56439ab062b0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56439ab062d0 <col:54> 'Vector<T>' lvalue ParmVar 0x56439aadd360 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56439aaddae8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56439aadd580 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadd5f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aadda48 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56439aadd6b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadd738 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadd7b0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56439aadd900 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56439ab06538 <col:76, line:623:5>
|     |-CallExpr 0x56439ab064b8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab06358 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56439ab06398 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56439ab063a8 <col:34> 'const char *' lvalue ParmVar 0x56439aadd6b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56439ab06458 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56439ab06408 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56439ab063c8 <col:43> 'int' lvalue ParmVar 0x56439aadd738 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56439ab06440 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56439ab06420 <col:51> 'const int' lvalue Var 0x56439aacdb30 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56439ab06478 <col:63> 'P' lvalue ParmVar 0x56439aadd7b0 'parser' 'P'
|     | `-DeclRefExpr 0x56439ab06498 <col:71> 'Vector<T>' lvalue ParmVar 0x56439aadd900 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56439ab06528 <line:622:9, col:17>
|       `-UnaryOperator 0x56439ab06510 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab06500 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aade028 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56439aaddb60 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aaddbd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aaddf88 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56439aaddc98 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aaddd18 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadde60 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56439ab067a0 <col:66, line:627:5>
|     `-ReturnStmt 0x56439ab06790 <line:626:9, col:59>
|       `-CallExpr 0x56439ab06750 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56439ab06568 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56439ab065d8 <col:25> 'const char *' lvalue ParmVar 0x56439aaddc98 'keyword' 'const char *'
|         |-DeclRefExpr 0x56439ab065f8 <col:34> 'int' lvalue ParmVar 0x56439aaddd18 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56439ab06710 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56439ab06730 <col:58> 'Vector<T>' lvalue ParmVar 0x56439aadde60 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56439aade0b8 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56439ab06820 <col:25, line:633:5>
|   `-ReturnStmt 0x56439ab06810 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56439ab067f8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56439ab067c8 <col:16> 'const bool' lvalue ->_status 0x56439aaeb588
|         `-CXXThisExpr 0x56439ab067b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56439aade238 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56439aade170 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56439ab06908 <col:27, line:639:5>
|   |-BinaryOperator 0x56439ab068b0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56439ab06838 <col:9> 'bool' lvalue ParmVar 0x56439aade170 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56439ab06898 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56439ab06868 <col:13> 'bool' lvalue ->_status 0x56439aaeb588
|   |     `-CXXThisExpr 0x56439ab06858 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56439ab068f8 <line:638:9, col:17>
|     `-UnaryOperator 0x56439ab068e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439ab068d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56439aade3b8 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56439aade2f8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56439ab069f8 <col:39, line:644:5>
|   |-BinaryOperator 0x56439ab069a0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56439ab06928 <col:9> 'bool' lvalue ParmVar 0x56439aade2f8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56439ab06988 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56439ab06958 <col:13> 'const bool' lvalue ->_status 0x56439aaeb588
|   |     `-CXXThisExpr 0x56439ab06948 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56439ab069e8 <line:643:9, col:17>
|     `-UnaryOperator 0x56439ab069d0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439ab069c0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56439aade480 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56439ab06aa0 <col:30, line:651:5>
|   `-ReturnStmt 0x56439ab06a90 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56439ab06a78 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56439ab06a48 <col:16> 'bool' lvalue ->_read_status 0x56439a9e1b90
|         `-ImplicitCastExpr 0x56439ab06a28 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56439ab06a18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56439aade5c8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56439aade538 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56439ab06ba8 <col:32, line:658:5>
|   |-BinaryOperator 0x56439ab06b50 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56439ab06ab8 <col:9> 'bool' lvalue ParmVar 0x56439aade538 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56439ab06b38 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56439ab06b08 <col:13> 'bool' lvalue ->_read_status 0x56439a9e1b90
|   |     `-ImplicitCastExpr 0x56439ab06ae8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56439ab06ad8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56439ab06b98 <line:657:9, col:17>
|     `-UnaryOperator 0x56439ab06b80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439ab06b70 <col:17> 'Args *' this
|-CXXMethodDecl 0x56439aade718 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56439aade688 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56439ab06cb8 <col:44, line:663:5>
|   |-BinaryOperator 0x56439ab06c60 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56439ab06bc8 <col:9> 'bool' lvalue ParmVar 0x56439aade688 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56439ab06c48 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56439ab06c18 <col:13> 'bool' lvalue ->_read_status 0x56439a9e1b90
|   |     `-ImplicitCastExpr 0x56439ab06bf8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56439ab06be8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56439ab06ca8 <line:662:9, col:17>
|     `-UnaryOperator 0x56439ab06c90 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439ab06c80 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56439aade7e0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56439aade8a8 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56439aade970 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56439aadea38 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56439aaded48 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56439aadead8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aadeca8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56439aadebb8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56439ab07070 <col:19, line:706:5>
|     `-IfStmt 0x56439ab07048 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56439ab06db8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56439ab06f78 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56439ab06f48 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56439ab06f08 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56439ab06e10 <col:42> '<bound member function type>' ->simple_slot 0x56439ab00210
|       |     | `-CXXThisExpr 0x56439ab06e00 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56439ab06ea8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56439ab06e60 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x56439a86b548
|       |     | `-DeclRefExpr 0x56439ab06e40 <col:55> 'T' lvalue ParmVar 0x56439aadebb8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56439ab06ee8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56439ab07038 <line:705:13, col:34>
|         `-CallExpr 0x56439ab07010 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56439ab06f98 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56439ab06ff0 <col:33> 'T' lvalue ParmVar 0x56439aadebb8 'x' 'T &'
|-FunctionTemplateDecl 0x56439aadf018 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56439aadeda8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aadef78 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56439aadee88 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56439ab07450 <col:31, line:717:5>
|     |-DeclStmt 0x56439ab071b0 <line:713:9, col:23>
|     | `-VarDecl 0x56439ab07098 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56439ab07188 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56439ab07110 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56439ab07168 <col:21> 'T' lvalue ParmVar 0x56439aadee88 'x' 'T &'
|     |-IfStmt 0x56439ab07400 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56439ab072a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56439ab073e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56439ab07380 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56439ab07310 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|     |   | `-DeclRefExpr 0x56439ab072f0 <col:14> 'T *' lvalue Var 0x56439ab07098 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56439ab073c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56439ab07438 <line:716:9, col:16>
|       `-DeclRefExpr 0x56439ab07418 <col:16> 'T *' lvalue Var 0x56439ab07098 's' 'T *'
|-FunctionTemplateDecl 0x56439aadf428 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56439aadf078 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56439aadf0f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56439aadf388 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56439aadf1d8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56439aadf278 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56439ab07760 <col:37, line:726:5>
|     |-IfStmt 0x56439ab076f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56439ab07710 <line:723:13, col:26>
|     | | `-VarDecl 0x56439ab074b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56439ab075a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56439ab07530 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56439ab07588 <col:25> 'T' lvalue ParmVar 0x56439aadf1d8 'x' 'T &'
|     | |-DeclRefExpr 0x56439ab075d0 <col:16> 'T *' lvalue Var 0x56439ab074b8 's' 'T *'
|     | `-BinaryOperator 0x56439ab076d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56439ab07680 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56439ab07610 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|     |   | `-DeclRefExpr 0x56439ab075f0 <col:14> 'T *' lvalue Var 0x56439ab074b8 's' 'T *'
|     |   `-DeclRefExpr 0x56439ab076b0 <col:18> 'const V' lvalue ParmVar 0x56439aadf278 'value' 'const V &'
|     `-ReturnStmt 0x56439ab07750 <line:725:9, col:17>
|       `-UnaryOperator 0x56439ab07738 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56439ab07728 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56439aadf828 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56439aadf490 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56439aadf788 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56439aadf540 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadf5c0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadf668 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56439ab08580 <col:65, line:737:5>
|     |-DeclStmt 0x56439ab077f8 <line:732:9, col:26>
|     | `-VarDecl 0x56439ab07790 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56439ab08548 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56439ab08568 <line:733:13, col:58>
|       | `-VarDecl 0x56439ab07820 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56439ab07a00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56439ab079d0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56439ab079b8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56439ab07998 <col:26, col:58> 'String' (CXXTemporary 0x56439ab07998)
|       |           `-CXXMemberCallExpr 0x56439ab07928 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56439ab07898 <col:26> '<bound member function type>' ->find 0x56439aaff828
|       |             | `-CXXThisExpr 0x56439ab07888 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56439ab07960 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab078c8 <col:31> 'const char *' lvalue ParmVar 0x56439aadf540 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56439ab07978 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab078e8 <col:40> 'int' lvalue ParmVar 0x56439aadf5c0 'flags' 'int'
|       |             `-DeclRefExpr 0x56439ab07908 <col:47> 'Args::Slot *' lvalue Var 0x56439ab07790 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56439ab07ab8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56439ab07aa0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56439ab07a80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56439ab07a50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |       `-ImplicitCastExpr 0x56439ab07a38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56439ab07a18 <col:20> 'String' lvalue Var 0x56439ab07820 'str' 'String'
|       `-CompoundStmt 0x56439ab08528 <col:61, line:736:9>
|         |-DeclStmt 0x56439ab07f70 <line:734:13, col:76>
|         | `-VarDecl 0x56439ab07b08 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56439ab07f40 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56439ab07eb0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56439ab07ef8 <col:60> 'T' lvalue ParmVar 0x56439aadf668 'variable' 'T &'
|         |     `-UnaryOperator 0x56439ab07f28 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56439ab07f18 <col:71> 'Args *' this
|         `-CallExpr 0x56439ab084f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56439ab07f98 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|           | `-CXXThisExpr 0x56439ab07f88 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56439ab084b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56439ab07fc8 <col:23> 'T *' lvalue Var 0x56439ab07b08 's' 'T *'
|           | `-CallExpr 0x56439ab08478 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56439ab08250 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56439ab08350 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56439ab08370 <col:86> 'String' lvalue Var 0x56439ab07820 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56439ab08420 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56439ab083b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|           |   | `-DeclRefExpr 0x56439ab08390 <col:92> 'T *' lvalue Var 0x56439ab07b08 's' 'T *'
|           |   `-UnaryOperator 0x56439ab08460 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56439ab08450 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56439ab084d8 <col:103> 'Args::Slot *' lvalue Var 0x56439ab07790 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56439aadfd78 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56439aadf898 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56439aadf918 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56439aadfcd8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56439aadf9d8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadfa58 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56439aadfaf8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56439aadfb98 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56439ab09420 <col:88, line:745:5>
|     |-DeclStmt 0x56439ab08618 <line:741:9, col:26>
|     | `-VarDecl 0x56439ab085b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56439ab08838 <line:742:9, col:55>
|     | `-VarDecl 0x56439ab08640 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56439ab08820 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56439ab087f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56439ab087d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56439ab087b8 <col:22, col:54> 'String' (CXXTemporary 0x56439ab087b8)
|     |           `-CXXMemberCallExpr 0x56439ab08748 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56439ab086b8 <col:22> '<bound member function type>' ->find 0x56439aaff828
|     |             | `-CXXThisExpr 0x56439ab086a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56439ab08780 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56439ab086e8 <col:27> 'const char *' lvalue ParmVar 0x56439aadf9d8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56439ab08798 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56439ab08708 <col:36> 'int' lvalue ParmVar 0x56439aadfa58 'flags' 'int'
|     |             `-DeclRefExpr 0x56439ab08728 <col:43> 'Args::Slot *' lvalue Var 0x56439ab085b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56439ab08c10 <line:743:9, col:72>
|     | `-VarDecl 0x56439ab08888 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56439ab08be0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56439ab08b50 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56439ab08b98 <col:56> 'T' lvalue ParmVar 0x56439aadfaf8 'variable' 'T &'
|     |     `-UnaryOperator 0x56439ab08bc8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56439ab08bb8 <col:67> 'Args *' this
|     `-CallExpr 0x56439ab093f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56439ab08c38 <col:9> '<bound member function type>' ->postparse 0x56439aaffa38
|       | `-CXXThisExpr 0x56439ab08c28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56439ab093b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56439ab08c68 <col:19> 'T *' lvalue Var 0x56439ab08888 's' 'T *'
|       | `-ParenExpr 0x56439ab09390 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56439ab09360 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56439ab09348 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56439ab09330 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56439ab09310 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56439ab092e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |     |       `-ImplicitCastExpr 0x56439ab092c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56439ab08c88 <col:25> 'String' lvalue Var 0x56439ab08640 'str' 'String'
|       |     |-CallExpr 0x56439ab09138 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56439ab08f10 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56439ab09010 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56439ab09030 <col:89> 'String' lvalue Var 0x56439ab08640 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56439ab090e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56439ab09070 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|       |     | | `-DeclRefExpr 0x56439ab09050 <col:95> 'T *' lvalue Var 0x56439ab08888 's' 'T *'
|       |     | `-UnaryOperator 0x56439ab09120 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56439ab09110 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56439ab092a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56439ab09288 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56439ab09258 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56439ab09208 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56439ab09198 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|       |         | | `-DeclRefExpr 0x56439ab09178 <col:109> 'T *' lvalue Var 0x56439ab08888 's' 'T *'
|       |         | `-DeclRefExpr 0x56439ab09238 <col:113> 'const V' lvalue ParmVar 0x56439aadfb98 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56439ab09278 <col:120> 'bool' true
|       `-DeclRefExpr 0x56439ab093d0 <col:128> 'Args::Slot *' lvalue Var 0x56439ab085b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56439aae02a8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56439aadfdf0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aadfe68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aae0208 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56439aadff28 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aadffa8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae0020 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56439aae00c8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56439ab0a018 <col:75, line:754:5>
|     |-DeclStmt 0x56439ab094c8 <line:749:9, col:26>
|     | `-VarDecl 0x56439ab09460 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56439ab09fe0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56439ab0a000 <line:750:13, col:58>
|       | `-VarDecl 0x56439ab094f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56439ab096d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56439ab096a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56439ab09688 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56439ab09668 <col:26, col:58> 'String' (CXXTemporary 0x56439ab09668)
|       |           `-CXXMemberCallExpr 0x56439ab095f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56439ab09568 <col:26> '<bound member function type>' ->find 0x56439aaff828
|       |             | `-CXXThisExpr 0x56439ab09558 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56439ab09630 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab09598 <col:31> 'const char *' lvalue ParmVar 0x56439aadff28 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56439ab09648 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab095b8 <col:40> 'int' lvalue ParmVar 0x56439aadffa8 'flags' 'int'
|       |             `-DeclRefExpr 0x56439ab095d8 <col:47> 'Args::Slot *' lvalue Var 0x56439ab09460 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56439ab09788 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56439ab09770 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56439ab09750 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56439ab09720 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |       `-ImplicitCastExpr 0x56439ab09708 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56439ab096e8 <col:20> 'String' lvalue Var 0x56439ab094f0 'str' 'String'
|       `-CompoundStmt 0x56439ab09fc0 <col:61, line:753:9>
|         |-DeclStmt 0x56439ab09b60 <line:751:13, col:63>
|         | `-VarDecl 0x56439ab097d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56439ab09b30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56439ab09aa0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56439ab09ae8 <col:47> 'T' lvalue ParmVar 0x56439aae00c8 'variable' 'T &'
|         |     `-UnaryOperator 0x56439ab09b18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56439ab09b08 <col:58> 'Args *' this
|         `-CallExpr 0x56439ab09f90 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56439ab09b88 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|           | `-CXXThisExpr 0x56439ab09b78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56439ab09f50 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56439ab09bb8 <col:23> 'T *' lvalue Var 0x56439ab097d8 's' 'T *'
|           | `-CallExpr 0x56439ab09f10 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56439ab09da0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56439ab09de8 <col:56> 'P' lvalue ParmVar 0x56439aae0020 'parser' 'P'
|           |   |-DeclRefExpr 0x56439ab09e08 <col:64> 'String' lvalue Var 0x56439ab094f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56439ab09eb8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56439ab09e48 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|           |   | `-DeclRefExpr 0x56439ab09e28 <col:70> 'T *' lvalue Var 0x56439ab097d8 's' 'T *'
|           |   `-UnaryOperator 0x56439ab09ef8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56439ab09ee8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56439ab09f70 <col:81> 'Args::Slot *' lvalue Var 0x56439ab09460 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56439aae7f98 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56439aae0320 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56439aae0398 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56439aae0418 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56439aae7ef8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56439aae04e0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aae0560 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae05d8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56439aae7d08 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56439aae7da8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56439ab0d068 <col:98, line:762:5>
|     |-DeclStmt 0x56439ab0a0b0 <line:758:9, col:26>
|     | `-VarDecl 0x56439ab0a048 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56439ab0c590 <line:759:9, col:55>
|     | `-VarDecl 0x56439ab0a0d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56439ab0c578 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56439ab0c548 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56439ab0c530 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56439ab0c510 <col:22, col:54> 'String' (CXXTemporary 0x56439ab0c510)
|     |           `-CXXMemberCallExpr 0x56439ab0c4a0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56439ab0a150 <col:22> '<bound member function type>' ->find 0x56439aaff828
|     |             | `-CXXThisExpr 0x56439ab0a140 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56439ab0c4d8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56439ab0c440 <col:27> 'const char *' lvalue ParmVar 0x56439aae04e0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56439ab0c4f0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56439ab0c460 <col:36> 'int' lvalue ParmVar 0x56439aae0560 'flags' 'int'
|     |             `-DeclRefExpr 0x56439ab0c480 <col:43> 'Args::Slot *' lvalue Var 0x56439ab0a048 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56439ab0c9b0 <line:760:9, col:59>
|     | `-VarDecl 0x56439ab0c5e8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56439ab0c980 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56439ab0c8f0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56439ab0c938 <col:43> 'T' lvalue ParmVar 0x56439aae7d08 'variable' 'T &'
|     |     `-UnaryOperator 0x56439ab0c968 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56439ab0c958 <col:54> 'Args *' this
|     `-CallExpr 0x56439ab0d038 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56439ab0c9d8 <col:9> '<bound member function type>' ->postparse 0x56439aaffa38
|       | `-CXXThisExpr 0x56439ab0c9c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56439ab0cff8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56439ab0ca08 <col:19> 'T *' lvalue Var 0x56439ab0c5e8 's' 'T *'
|       | `-ParenExpr 0x56439ab0cfd8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56439ab0cfa8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56439ab0cf90 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56439ab0cf78 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56439ab0cf58 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56439ab0cf28 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |     |       `-ImplicitCastExpr 0x56439ab0cf10 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56439ab0ca28 <col:25> 'String' lvalue Var 0x56439ab0a0d8 'str' 'String'
|       |     |-CallExpr 0x56439ab0cd80 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56439ab0cc10 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56439ab0cc58 <col:59> 'P' lvalue ParmVar 0x56439aae05d8 'parser' 'P'
|       |     | |-DeclRefExpr 0x56439ab0cc78 <col:67> 'String' lvalue Var 0x56439ab0a0d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56439ab0cd28 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56439ab0ccb8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|       |     | | `-DeclRefExpr 0x56439ab0cc98 <col:73> 'T *' lvalue Var 0x56439ab0c5e8 's' 'T *'
|       |     | `-UnaryOperator 0x56439ab0cd68 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56439ab0cd58 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56439ab0cef0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56439ab0ced0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56439ab0cea0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56439ab0ce50 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56439ab0cde0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|       |         | | `-DeclRefExpr 0x56439ab0cdc0 <col:87> 'T *' lvalue Var 0x56439ab0c5e8 's' 'T *'
|       |         | `-DeclRefExpr 0x56439ab0ce80 <col:91> 'const V' lvalue ParmVar 0x56439aae7da8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56439ab0cec0 <col:98> 'bool' true
|       `-DeclRefExpr 0x56439ab0d018 <col:106> 'Args::Slot *' lvalue Var 0x56439ab0a048 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56439aae8608 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56439aae8018 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aae8098 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56439aae8118 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56439aae8568 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56439aae81e0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aae8260 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae82d8 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56439aae8378 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56439aae8418 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56439ab0e048 <col:60, line:773:5>
|     |-DeclStmt 0x56439ab0d110 <line:767:9, col:26>
|     | `-VarDecl 0x56439ab0d0a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56439ab0e010 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56439ab0e030 <line:768:13, col:58>
|       | `-VarDecl 0x56439ab0d138 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56439ab0d318 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56439ab0d2e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56439ab0d2d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56439ab0d2b0 <col:26, col:58> 'String' (CXXTemporary 0x56439ab0d2b0)
|       |           `-CXXMemberCallExpr 0x56439ab0d240 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56439ab0d1b0 <col:26> '<bound member function type>' ->find 0x56439aaff828
|       |             | `-CXXThisExpr 0x56439ab0d1a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56439ab0d278 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab0d1e0 <col:31> 'const char *' lvalue ParmVar 0x56439aae81e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56439ab0d290 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab0d200 <col:40> 'int' lvalue ParmVar 0x56439aae8260 'flags' 'int'
|       |             `-DeclRefExpr 0x56439ab0d220 <col:47> 'Args::Slot *' lvalue Var 0x56439ab0d0a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56439ab0d3d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56439ab0d3b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56439ab0d398 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56439ab0d368 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |       `-ImplicitCastExpr 0x56439ab0d350 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56439ab0d330 <col:20> 'String' lvalue Var 0x56439ab0d138 'str' 'String'
|       `-CompoundStmt 0x56439ab0dfe8 <col:61, line:772:9>
|         |-DeclStmt 0x56439ab0d710 <line:769:13, col:66>
|         | `-VarDecl 0x56439ab0d428 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56439ab0d6e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56439ab0d650 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56439ab0d698 <col:49> 'T1' lvalue ParmVar 0x56439aae8378 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56439ab0d6c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56439ab0d6b8 <col:61> 'Args *' this
|         |-DeclStmt 0x56439ab0da80 <line:770:13, col:66>
|         | `-VarDecl 0x56439ab0d798 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56439ab0da50 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56439ab0d9c0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56439ab0da08 <col:49> 'T2' lvalue ParmVar 0x56439aae8418 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56439ab0da38 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56439ab0da28 <col:61> 'Args *' this
|         `-CallExpr 0x56439ab0dfb8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56439ab0daa8 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|           | `-CXXThisExpr 0x56439ab0da98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56439ab0df78 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56439ab0db18 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56439ab0dad8 <col:23> 'T1 *' lvalue Var 0x56439ab0d428 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56439ab0daf8 <col:29> 'T2 *' lvalue Var 0x56439ab0d798 's2' 'T2 *'
|           | `-CallExpr 0x56439ab0df30 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56439ab0dd00 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56439ab0dd48 <col:63> 'P' lvalue ParmVar 0x56439aae82d8 'parser' 'P'
|           |   |-DeclRefExpr 0x56439ab0dd68 <col:71> 'String' lvalue Var 0x56439ab0d138 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56439ab0de18 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56439ab0dda8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|           |   | `-DeclRefExpr 0x56439ab0dd88 <col:77> 'T1 *' lvalue Var 0x56439ab0d428 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56439ab0ded8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56439ab0de68 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|           |   | `-DeclRefExpr 0x56439ab0de48 <col:82> 'T2 *' lvalue Var 0x56439ab0d798 's2' 'T2 *'
|           |   `-UnaryOperator 0x56439ab0df18 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56439ab0df08 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56439ab0df98 <col:94> 'Args::Slot *' lvalue Var 0x56439ab0d0a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56439aae89f8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56439aae8688 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aae8958 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56439aae8740 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aae87c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae8838 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56439ab0e560 <col:67, line:780:5>
|     |-DeclStmt 0x56439ab0e0e0 <line:777:9, col:26>
|     | `-VarDecl 0x56439ab0e078 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56439ab0e528 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56439ab0e548 <line:778:13, col:58>
|       | `-VarDecl 0x56439ab0e108 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56439ab0e2e8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56439ab0e2b8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56439ab0e2a0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56439ab0e280 <col:26, col:58> 'String' (CXXTemporary 0x56439ab0e280)
|       |           `-CXXMemberCallExpr 0x56439ab0e210 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56439ab0e180 <col:26> '<bound member function type>' ->find 0x56439aaff828
|       |             | `-CXXThisExpr 0x56439ab0e170 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56439ab0e248 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab0e1b0 <col:31> 'const char *' lvalue ParmVar 0x56439aae8740 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56439ab0e260 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56439ab0e1d0 <col:40> 'int' lvalue ParmVar 0x56439aae87c0 'flags' 'int'
|       |             `-DeclRefExpr 0x56439ab0e1f0 <col:47> 'Args::Slot *' lvalue Var 0x56439ab0e078 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56439ab0e3a0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56439ab0e388 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56439ab0e368 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56439ab0e338 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|       |       `-ImplicitCastExpr 0x56439ab0e320 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56439ab0e300 <col:20> 'String' lvalue Var 0x56439ab0e108 'str' 'String'
|       `-CallExpr 0x56439ab0e4f8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56439ab0e3c8 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|         | `-CXXThisExpr 0x56439ab0e3b8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56439ab0e4a8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56439ab0e418 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56439ab0e3f8 <col:23> 'P' lvalue ParmVar 0x56439aae8838 'parser' 'P'
|         | |-DeclRefExpr 0x56439ab0e460 <col:36> 'String' lvalue Var 0x56439ab0e108 'str' 'String'
|         | `-UnaryOperator 0x56439ab0e490 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56439ab0e480 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56439ab0e4d8 <col:49> 'Args::Slot *' lvalue Var 0x56439ab0e078 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56439aae8d98 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56439aae8a68 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56439aae8cf8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56439aae8b20 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aae8ba0 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae8c18 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56439ab0eed0 <col:71, line:792:5>
|     |-DeclStmt 0x56439ab0e5f8 <line:784:9, col:26>
|     | `-VarDecl 0x56439ab0e590 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56439ab0e6c8 <line:785:9, col:29>
|     | `-VarDecl 0x56439ab0e628 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56439ab0e6b0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56439ab0e690 <col:28> 'int' 1
|     |-WhileStmt 0x56439ab0ed80 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56439ab0eda0 <line:786:16, col:61>
|     | | `-VarDecl 0x56439ab0e6f0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56439ab0e8d0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56439ab0e8a0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56439ab0e888 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56439ab0e868 <col:29, col:61> 'String' (CXXTemporary 0x56439ab0e868)
|     | |           `-CXXMemberCallExpr 0x56439ab0e7f8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56439ab0e768 <col:29> '<bound member function type>' ->find 0x56439aaff828
|     | |             | `-CXXThisExpr 0x56439ab0e758 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56439ab0e830 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56439ab0e798 <col:34> 'const char *' lvalue ParmVar 0x56439aae8b20 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56439ab0e848 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56439ab0e7b8 <col:43> 'int' lvalue ParmVar 0x56439aae8ba0 'flags' 'int'
|     | |             `-DeclRefExpr 0x56439ab0e7d8 <col:50> 'Args::Slot *' lvalue Var 0x56439ab0e590 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56439ab0e988 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56439ab0e970 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56439ab0e950 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56439ab0e920 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|     | |       `-ImplicitCastExpr 0x56439ab0e908 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56439ab0e8e8 <col:23> 'String' lvalue Var 0x56439ab0e6f0 'str' 'String'
|     | `-CompoundStmt 0x56439ab0ed58 <col:64, line:790:9>
|     |   |-CallExpr 0x56439ab0eae0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56439ab0e9b0 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|     |   | | `-CXXThisExpr 0x56439ab0e9a0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56439ab0ea90 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56439ab0ea00 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56439ab0e9e0 <col:23> 'P' lvalue ParmVar 0x56439aae8c18 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56439ab0ea48 <col:36> 'String' lvalue Var 0x56439ab0e6f0 'str' 'String'
|     |   | | `-UnaryOperator 0x56439ab0ea78 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56439ab0ea68 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56439ab0eac0 <col:49> 'Args::Slot *' lvalue Var 0x56439ab0e590 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56439ab0ec78 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56439ab0eb10 <col:13> 'int' lvalue Var 0x56439ab0e628 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56439ab0ec60 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56439ab0ec40 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56439ab0eba8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56439ab0eb88 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56439ab0eb70 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56439ab0eb30 <col:28> 'int' lvalue Var 0x56439ab0e628 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56439ab0eb50 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56439ab0ec28 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56439ab0ebf8 <col:49> 'bool' lvalue ->_read_status 0x56439a9e1b90
|     |   |         `-ImplicitCastExpr 0x56439ab0ebd8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56439ab0ebc8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56439ab0ed28 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56439ab0ec98 <col:13> 'int' lvalue ParmVar 0x56439aae8ba0 'flags' 'int'
|     |     `-UnaryOperator 0x56439ab0ed10 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56439ab0ecf8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56439ab0ecd8 <col:23> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56439ab0eeb0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56439ab0ede8 <col:9> 'bool' lvalue ->_read_status 0x56439a9e1b90
|       | `-ImplicitCastExpr 0x56439ab0edc8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56439ab0edb8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56439ab0ee90 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56439ab0ee70 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56439ab0ee58 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56439ab0ee18 <col:25> 'int' lvalue Var 0x56439ab0e628 'read_status' 'int'
|           `-IntegerLiteral 0x56439ab0ee38 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56439aae9278 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56439aae8e08 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aae8e88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aae91d8 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56439aae8f48 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aae8fc8 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae9040 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56439aae90e8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56439ab0fe60 <col:84, line:805:5>
|     |-DeclStmt 0x56439ab0ef78 <line:796:9, col:26>
|     | `-VarDecl 0x56439ab0ef10 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56439ab0f048 <line:797:9, col:29>
|     | `-VarDecl 0x56439ab0efa8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56439ab0f030 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56439ab0f010 <col:28> 'int' 1
|     |-DeclStmt 0x56439ab0f380 <line:798:9, col:71>
|     | `-VarDecl 0x56439ab0f098 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56439ab0f350 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56439ab0f2c0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56439ab0f308 <col:55> 'T' lvalue ParmVar 0x56439aae90e8 'variable' 'T &'
|     |     `-UnaryOperator 0x56439ab0f338 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56439ab0f328 <col:66> 'Args *' this
|     |-WhileStmt 0x56439ab0fd10 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56439ab0fd30 <line:799:16, col:61>
|     | | `-VarDecl 0x56439ab0f3a8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56439ab0f588 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56439ab0f558 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56439ab0f540 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56439ab0f520 <col:29, col:61> 'String' (CXXTemporary 0x56439ab0f520)
|     | |           `-CXXMemberCallExpr 0x56439ab0f4b0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56439ab0f420 <col:29> '<bound member function type>' ->find 0x56439aaff828
|     | |             | `-CXXThisExpr 0x56439ab0f410 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56439ab0f4e8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56439ab0f450 <col:34> 'const char *' lvalue ParmVar 0x56439aae8f48 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56439ab0f500 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56439ab0f470 <col:43> 'int' lvalue ParmVar 0x56439aae8fc8 'flags' 'int'
|     | |             `-DeclRefExpr 0x56439ab0f490 <col:50> 'Args::Slot *' lvalue Var 0x56439ab0ef10 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56439ab0f640 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56439ab0f628 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56439ab0f608 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56439ab0f5d8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|     | |       `-ImplicitCastExpr 0x56439ab0f5c0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56439ab0f5a0 <col:23> 'String' lvalue Var 0x56439ab0f3a8 'str' 'String'
|     | `-CompoundStmt 0x56439ab0fce8 <col:64, line:803:9>
|     |   |-CallExpr 0x56439ab0fa70 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56439ab0f668 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|     |   | | `-CXXThisExpr 0x56439ab0f658 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56439ab0fa30 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56439ab0f698 <col:23> 'T *' lvalue Var 0x56439ab0f098 's' 'T *'
|     |   | | `-CallExpr 0x56439ab0f9f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56439ab0f880 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56439ab0f8c8 <col:56> 'P' lvalue ParmVar 0x56439aae9040 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56439ab0f8e8 <col:64> 'String' lvalue Var 0x56439ab0f3a8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56439ab0f998 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56439ab0f928 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|     |   | |   | `-DeclRefExpr 0x56439ab0f908 <col:70> 'T *' lvalue Var 0x56439ab0f098 's' 'T *'
|     |   | |   `-UnaryOperator 0x56439ab0f9d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56439ab0f9c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56439ab0fa50 <col:81> 'Args::Slot *' lvalue Var 0x56439ab0ef10 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56439ab0fc08 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56439ab0faa0 <col:13> 'int' lvalue Var 0x56439ab0efa8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56439ab0fbf0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56439ab0fbd0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56439ab0fb38 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56439ab0fb18 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56439ab0fb00 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56439ab0fac0 <col:28> 'int' lvalue Var 0x56439ab0efa8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56439ab0fae0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56439ab0fbb8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56439ab0fb88 <col:49> 'bool' lvalue ->_read_status 0x56439a9e1b90
|     |   |         `-ImplicitCastExpr 0x56439ab0fb68 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56439ab0fb58 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56439ab0fcb8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56439ab0fc28 <col:13> 'int' lvalue ParmVar 0x56439aae8fc8 'flags' 'int'
|     |     `-UnaryOperator 0x56439ab0fca0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56439ab0fc88 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56439ab0fc68 <col:23> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56439ab0fe40 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56439ab0fd78 <col:9> 'bool' lvalue ->_read_status 0x56439a9e1b90
|       | `-ImplicitCastExpr 0x56439ab0fd58 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56439ab0fd48 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56439ab0fe20 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56439ab0fe00 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56439ab0fde8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56439ab0fda8 <col:25> 'int' lvalue Var 0x56439ab0efa8 'read_status' 'int'
|           `-IntegerLiteral 0x56439ab0fdc8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56439aae9858 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56439aae92f0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56439aae9368 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56439aae97b8 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56439aae9428 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56439aae94a8 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56439aae9520 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56439aae9670 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56439ab10c68 <col:87, line:821:5>
|     |-DeclStmt 0x56439ab0ff10 <line:809:9, col:26>
|     | `-VarDecl 0x56439ab0fea8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56439ab0ffe0 <line:810:9, col:29>
|     | `-VarDecl 0x56439ab0ff40 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56439ab0ffc8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56439ab0ffa8 <col:28> 'int' 1
|     |-DeclStmt 0x56439ab10228 <line:811:9, col:38>
|     | `-VarDecl 0x56439ab10110 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56439ab10200 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56439ab10188 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56439ab101e0 <col:29> 'Vector<T>' lvalue ParmVar 0x56439aae9670 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56439ab10b18 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56439ab10b38 <line:812:16, col:61>
|     | | `-VarDecl 0x56439ab10250 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56439ab10430 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56439ab10400 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56439ab103e8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56439ab103c8 <col:29, col:61> 'String' (CXXTemporary 0x56439ab103c8)
|     | |           `-CXXMemberCallExpr 0x56439ab10358 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56439ab102c8 <col:29> '<bound member function type>' ->find 0x56439aaff828
|     | |             | `-CXXThisExpr 0x56439ab102b8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56439ab10390 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56439ab102f8 <col:34> 'const char *' lvalue ParmVar 0x56439aae9428 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56439ab103a8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56439ab10318 <col:43> 'int' lvalue ParmVar 0x56439aae94a8 'flags' 'int'
|     | |             `-DeclRefExpr 0x56439ab10338 <col:50> 'Args::Slot *' lvalue Var 0x56439ab0fea8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56439ab104e8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56439ab104d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56439ab104b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56439ab10480 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56439a82e518
|     | |       `-ImplicitCastExpr 0x56439ab10468 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56439ab10448 <col:23> 'String' lvalue Var 0x56439ab10250 'str' 'String'
|     | `-CompoundStmt 0x56439ab10ae0 <col:64, line:819:9>
|     |   |-DeclStmt 0x56439ab105a8 <line:813:13, col:23>
|     |   | `-VarDecl 0x56439ab10510 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56439ab10588 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56439ab10728 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56439ab105d0 <col:13> '<bound member function type>' ->postparse 0x56439aaffa38
|     |   | | `-CXXThisExpr 0x56439ab105c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56439ab106d0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56439ab10620 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56439ab10600 <col:23> 'P' lvalue ParmVar 0x56439aae9520 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56439ab10668 <col:36> 'String' lvalue Var 0x56439ab10250 'str' 'String'
|     |   | | |-DeclRefExpr 0x56439ab10688 <col:41> 'T' lvalue Var 0x56439ab10510 'sx' 'T'
|     |   | | `-UnaryOperator 0x56439ab106b8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56439ab106a8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56439ab10708 <col:53> 'Args::Slot *' lvalue Var 0x56439ab0fea8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56439ab10880 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56439ab107b8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56439ab10788 <col:17> 'bool' lvalue ->_read_status 0x56439a9e1b90
|     |   | |   `-ImplicitCastExpr 0x56439ab10768 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56439ab10758 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56439ab10858 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56439ab107f0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56439ab107d0 <col:17> 'Vector<T> *' lvalue Var 0x56439ab10110 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56439ab10838 <col:30> 'T' lvalue Var 0x56439ab10510 'sx' 'T'
|     |   |-BinaryOperator 0x56439ab10a00 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56439ab10898 <col:13> 'int' lvalue Var 0x56439ab0ff40 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56439ab109e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56439ab109c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56439ab10930 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56439ab10910 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56439ab108f8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56439ab108b8 <col:28> 'int' lvalue Var 0x56439ab0ff40 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56439ab108d8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56439ab109b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56439ab10980 <col:49> 'bool' lvalue ->_read_status 0x56439a9e1b90
|     |   |         `-ImplicitCastExpr 0x56439ab10960 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56439ab10950 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56439ab10ab0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56439ab10a20 <col:13> 'int' lvalue ParmVar 0x56439aae94a8 'flags' 'int'
|     |     `-UnaryOperator 0x56439ab10a98 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56439ab10a80 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56439ab10a60 <col:23> 'const int' lvalue Var 0x56439aacd848 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56439ab10c48 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56439ab10b80 <col:9> 'bool' lvalue ->_read_status 0x56439a9e1b90
|       | `-ImplicitCastExpr 0x56439ab10b60 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56439ab10b50 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56439ab10c28 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56439ab10c08 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56439ab10bf0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56439ab10bb0 <col:25> 'int' lvalue Var 0x56439ab0ff40 'read_status' 'int'
|           `-IntegerLiteral 0x56439ab10bd0 <col:40> 'int' 1
|-AccessSpecDecl 0x56439aae98d0 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56439aae98f8 prev 0x56439aacbb48 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56439aae99f0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56439aae9ae0 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56439ab10ca0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56439aae9bd0 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56439ab10cb0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56439aae9cd0 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56439aae9d80 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56439aae9e28 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56439aae9e28
| | `-ParmVarDecl 0x56439aae9f38 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56439aaea6f8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56439aaea6f8
|   `-ParmVarDecl 0x56439aaea808 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56439aae9fa8 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56439aaea108 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56439aaea300 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56439aaea1b0 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56439aaea228 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56439ab10e90 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56439aaea5b8 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56439ab10d00 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56439ab10cc0 <col:20> 'void *' lvalue ParmVar 0x56439aaea1b0 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56439aaea620 '_slot' 'char *'
| | | `-CXXNewExpr 0x56439ab10d88 <col:32, col:45> 'char *' array Function 0x56439a651188 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56439ab10d70 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56439ab10d40 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56439aaea228 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56439aaea680 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56439ab10e50 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56439ab10e10 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56439aaea228 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56439ab10f10 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56439aaea400 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56439aae9bd0 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56439ab10f98 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56439ab10f78 <line:840:13, col:22> 'void' array Function 0x56439a6514e8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56439ab10f60 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56439ab10f30 <col:22> 'char *' lvalue ->_slot 0x56439aaea620
| |         `-CXXThisExpr 0x56439ab10f20 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56439aaea500 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56439aae9cd0 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56439ab11188 <col:22, line:844:9>
| |   `-CallExpr 0x56439ab110f0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56439ab110d8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56439ab110b8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56439a75cf68 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56439ab11128 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56439ab11008 <col:20> 'void *' lvalue ->_ptr 0x56439aaea5b8
| |     |   `-CXXThisExpr 0x56439ab10ff8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56439ab11158 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56439ab11140 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56439ab11048 <col:26> 'char *' lvalue ->_slot 0x56439aaea620
| |     |     `-CXXThisExpr 0x56439ab11038 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56439ab11170 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56439ab11088 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56439aaea680
| |         `-CXXThisExpr 0x56439ab11078 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56439aaea5b8 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56439aaea620 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56439aaea680 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56439aaea878 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56439aaea878
| | `-ParmVarDecl 0x56439aaea988 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56439aaeaa28 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56439aaeaa28
|   `-ParmVarDecl 0x56439aaeab38 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56439aaeacd8 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56439aaeaba8 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56439aaeac48 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56439aaeaf70 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56439aaeb168 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56439aaeb038 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56439aaeb2e8 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56439ab111c0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56439ab111a0 <col:20> 'T *' lvalue ParmVar 0x56439aaeb038 'ptr' 'T *'
|   | `-CompoundStmt 0x56439ab11210 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56439aaeb238 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56439aae9cd0 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56439ab113c0 <col:22, line:857:9>
|   |   `-CallExpr 0x56439ab11390 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56439ab11220 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56439a815698 0x56439a7bf9c8
|   |     |-CXXOperatorCallExpr 0x56439ab11320 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56439ab112b0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56439aa22648 0x56439aa22268 0x56439aa21e98 0x56439aa21ab8 0x56439aa216d8 0x56439aa21308
|   |     | `-MemberExpr 0x56439ab11280 <col:29> 'T *' lvalue ->_ptr 0x56439aaeb2e8
|   |     |   `-CXXThisExpr 0x56439ab11270 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56439ab11360 <col:35> 'T' lvalue ->_slot 0x56439aaeb348
|   |       `-CXXThisExpr 0x56439ab11350 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56439aaeb2e8 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56439aaeb348 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56439aaeb3b0 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56439aaeb4b0 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56439aaeb500 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aaeb490 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56439aaeb470 <col:31> 'int' 48
|-FieldDecl 0x56439aaeb528 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56439aaeb588 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56439aaeb5e8 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56439aaeb720 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56439aaff0d0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56439aaff130 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56439aaff1e0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56439aaff408 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56439aaff310 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56439aaff558 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56439aaff4c8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56439aaff828 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56439aaff618 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56439aaff698 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56439aaff740 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56439aaffa38 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56439aaff8f0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56439aaff968 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56439aaffb08 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56439aaffc58 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56439aaffbc0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56439aafffe8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56439aaffd18 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56439aaffd98 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56439aaffe40 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56439aaffef8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56439ab00210 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56439ab000c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56439ab00138 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56439ab00528 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56439ab002c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56439ab00488 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56439ab00398 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439a81e3c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439a81e4d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56439a81e568 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56439a81e638 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56439a81e720 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56439a81e938 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56439a81e7e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81eae8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56439a81e9f0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56439a81ec30 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56439a81eba0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56439a81ed78 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56439a81ece8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81eec0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56439a81ee30 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81ef88 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x56439a81f0d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56439a81f040 <col:28> col:31 'int'
|-CXXMethodDecl 0x56439a81f198 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x56439a81f2e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56439a81f250 <col:28> col:31 'int'
|-CXXMethodDecl 0x56439a81f458 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56439a81f398 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81f5a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56439a81f510 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81f668 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56439a81f828 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56439a81f718 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56439a81f790 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81fa78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56439a81f8e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56439a81f960 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56439a81fb28 <col:86> "" ""
|-CXXMethodDecl 0x56439a81fd98 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56439a81fc08 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56439a81fc80 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a81ff48 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56439a81fe58 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56439a8200f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56439a820000 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56439a8203c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56439a8201b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56439a820228 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56439a8202a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a8206a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56439a820490 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56439a820508 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56439a820580 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56439a820760 <col:115> "" ""
|-AccessSpecDecl 0x56439a8207d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56439a820808 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439a821d20 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56439a821d20
| `-ParmVarDecl 0x56439a821e28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56439a821ec8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56439a821ec8
| `-ParmVarDecl 0x56439a821fd8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56439a857608 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56439aa49400 <col:7>
|-CXXConstructorDecl 0x56439a8576e0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56439a8576e0
| `-ParmVarDecl 0x56439a8577f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56439a857868 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56439a857868
| `-ParmVarDecl 0x56439a857978 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56439aa4be00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aa37fa8 prev 0x56439aa2d1b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439aa380a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56439aa38190 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56439aa382b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56439aa38438 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56439aa385b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56439aa38738 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56439aa49568 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56439aa49dd8 <col:11>
|-CXXDestructorDecl 0x56439aa49640 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56439aa49778 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56439aa49778
| `-ParmVarDecl 0x56439aa49888 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56439aa49928 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56439aa49928
| `-ParmVarDecl 0x56439aa49a38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56439aa4c7f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56439aa4c908 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56439aa4cb88 <col:11>
|   `-ReturnStmt 0x56439aa4cb78 <col:11>
|     `-UnaryOperator 0x56439aa4cb60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56439aa4cb50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56439aa4c978 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56439aa4c978
  `-ParmVarDecl 0x56439aa4ca88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aa387a0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439aa388b8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56439aa38958 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56439aa389c0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56439aa38a28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56439aa38a90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56439aa38af0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56439aa38bb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56439aa38c10 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56439aa38c70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56439aa49478 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56439aa38958 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56439aa49de8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56439aa49e40 <col:12>
|-CXXConstructorDecl 0x56439aa49aa8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56439aa49aa8
| `-ParmVarDecl 0x56439aa49bb8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56439aa49c58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56439aa49c58
| `-ParmVarDecl 0x56439aa49d68 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56439aa4bee0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439aa268c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56439aa269d8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56439aa26a68 <col:16, col:22> col:16 public
|-EnumDecl 0x56439aa26a90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56439aa26b90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56439aa26c70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa26b70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56439aa26b50 <col:21> 'int' 28
| `-EnumConstantDecl 0x56439aa26c20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56439aa26c88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa26c00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56439aa26be0 <col:22> 'int' 64
|-CXXMethodDecl 0x56439aa26fc8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56439aa26cb0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56439aa26d30 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56439aa26da8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56439aa26e20 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56439aa27088 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56439aa27288 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56439aa27100 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56439aa27178 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56439aa27338 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56439aa27498 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56439aa273a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56439aa27540 <col:72> warn_unused_result ""
|-TypedefDecl 0x56439aa278a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56439aa27830 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56439aa277d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56439aa27790 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56439a4fe2d0 'void'
|       |-PointerType 0x56439a7a6c60 'unsigned char *'
|       | `-BuiltinType 0x56439a4fe3d0 'unsigned char'
|       |-TypedefType 0x56439a5a31d0 'size_t' sugar
|       | |-Typedef 0x56439a56eb20 'size_t'
|       | `-BuiltinType 0x56439a4fe430 'unsigned long'
|       `-PointerType 0x56439a4fead0 'void *'
|         `-BuiltinType 0x56439a4fe2d0 'void'
|-CXXMethodDecl 0x56439aa27d18 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56439aa27910 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56439aa27988 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56439aa27a20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56439aa27aa0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56439aa42410 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56439aa423f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56439aa423c0 <col:58> 'int' 0
| |-ParmVarDecl 0x56439aa27b20 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56439aa42438 <col:76> 'int' 0
| |-ParmVarDecl 0x56439aa27ba0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56439aa42458 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56439aa27de8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56439aa27e68 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56439aa27f28 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56439aa27fc8 <col:20>
| `-OptimizeNoneAttr 0x56439aa28020 <col:30>
|-CXXMethodDecl 0x56439aa28098 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56439aa28138 <col:20>
| `-OptimizeNoneAttr 0x56439aa28190 <col:30>
|-CXXMethodDecl 0x56439aa28208 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56439aa282a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56439aa28358 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56439aa283f8 <col:20>
| |-OptimizeNoneAttr 0x56439aa28450 <col:30>
| `-WarnUnusedResultAttr 0x56439aa28478 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56439aa284d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56439aa28570 <col:20>
| `-OptimizeNoneAttr 0x56439aa285c8 <col:30>
|-CXXMethodDecl 0x56439aa28618 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56439aa286b8 <col:20>
| `-OptimizeNoneAttr 0x56439aa28710 <col:30>
|-CXXMethodDecl 0x56439aa28758 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56439aa287f8 <col:20>
| `-OptimizeNoneAttr 0x56439aa28850 <col:30>
|-CXXMethodDecl 0x56439aa28898 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56439aa28958 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56439aa28a20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56439aa28ae8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56439aa28ba8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56439aa28cc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56439aa42520 <col:54, line:99:5>
|   `-ReturnStmt 0x56439aa42510 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56439aa424f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56439aa424c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56439aa38fa8
|         `-CXXThisExpr 0x56439aa424b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56439aa28e68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56439aa28d78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56439aa425d0 <col:67, line:103:5>
|   `-BinaryOperator 0x56439aa425b0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56439aa42548 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56439aa38fa8
|     | `-CXXThisExpr 0x56439aa42538 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56439aa42598 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa42578 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56439aa28d78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56439aa28f60 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56439aa42650 <col:33, line:107:5>
|   `-ReturnStmt 0x56439aa42640 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56439aa42628 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56439aa425f8 <col:16> 'void *' lvalue ->_destructor_argument 0x56439aa39010
|         `-CXXThisExpr 0x56439aa425e8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56439aa29020 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56439aa42c80 <col:25, line:113:5>
|   |-ParenExpr 0x56439aa429c8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56439aa42998 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa42708 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56439aa426e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56439aa426a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56439aa42678 <col:24> '<bound member function type>' ->shared 0x56439aa28098
|   |   |       `-ImplicitCastExpr 0x56439aa426c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56439aa42668 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56439aa42768 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa42748 <col:42> 'int' 0
|   |   `-CallExpr 0x56439aa428f8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56439aa428e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa428c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa42938 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa427d8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56439aa42950 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa42800 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa42968 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa42838 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56439aa42980 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa428a8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa42890 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa42858 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56439aa42bc8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56439aa429f8 <col:2> 'unsigned char *' lvalue ->_head 0x56439aa38db0
|   | | `-CXXThisExpr 0x56439aa429e8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56439aa42bb0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56439aa42b90 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56439aa42a38 <col:10> 'unsigned char *' lvalue ->_data 0x56439aa38e18
|   |     | `-CXXThisExpr 0x56439aa42a28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56439aa42b78 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56439aa42b58 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56439aa42a78 <col:18> 'unsigned char *' lvalue ->_tail 0x56439aa38e80
|   |         | `-CXXThisExpr 0x56439aa42a68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56439aa42b40 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56439aa42b20 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56439aa42ab8 <col:26> 'unsigned char *' lvalue ->_end 0x56439aa38ee8
|   |             | `-CXXThisExpr 0x56439aa42aa8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56439aa42b08 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56439aa42ae8 <col:33> 'int' 0
|   `-BinaryOperator 0x56439aa42c60 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56439aa42bf8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56439aa38fa8
|     | `-CXXThisExpr 0x56439aa42be8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56439aa42c48 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56439aa42c28 <col:16> 'int' 0
|-CXXMethodDecl 0x56439aa29160 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56439aa290d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa29208 <col:20>
| |-OptimizeNoneAttr 0x56439aa29260 <col:30>
| `-WarnUnusedResultAttr 0x56439aa29288 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56439aa29358 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56439aa292c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa29400 <col:20>
| |-OptimizeNoneAttr 0x56439aa29458 <col:30>
| `-WarnUnusedResultAttr 0x56439aa29480 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56439aa295b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56439aa294c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56439aa29660 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56439aa29760 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56439aa296d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa29808 <col:20>
| `-OptimizeNoneAttr 0x56439aa29860 <col:30>
|-CXXMethodDecl 0x56439aa29928 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56439aa29898 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56439aa299d0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56439aa29ad0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56439aa29a40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56439aa29b78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56439aa29c78 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56439aa29be8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa29d20 <col:20>
| `-OptimizeNoneAttr 0x56439aa29d78 <col:30>
|-CXXMethodDecl 0x56439aa29f08 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56439aa29db8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56439aa29e30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56439aa42478 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56439aa29fb8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56439aa2a1b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56439aa2a030 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56439aa2a0a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa2a3c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56439aa2a278 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56439aa2a2f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa2a5d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56439aa2a488 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56439aa2a508 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56439aa42488 <col:39> 'int' 0
|-CXXMethodDecl 0x56439aa2a6a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56439aa2a770 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56439aa2a838 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56439aa2a8f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56439aa2a9c0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56439aa2ab08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56439aa2aa78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56439aa2acd8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56439aa2abc8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56439aa2ac40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa2ada8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56439aa2ae68 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56439aa2af08 <col:20>
| `-OptimizeNoneAttr 0x56439aa2af60 <col:30>
|-CXXMethodDecl 0x56439aa2afb0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56439aa2b050 <col:20>
| `-OptimizeNoneAttr 0x56439aa2b0a8 <col:30>
|-CXXMethodDecl 0x56439aa2b0f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56439aa2b1b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56439aa2b280 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56439aa2b320 <col:20>
| `-OptimizeNoneAttr 0x56439aa2b378 <col:30>
|-CXXMethodDecl 0x56439aa2b4c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56439aa2b3b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56439aa2b430 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa2b618 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56439aa2b588 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa2b6f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56439aa2b7b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56439aa2b850 <col:20>
| `-OptimizeNoneAttr 0x56439aa2b8a8 <col:30>
|-CXXMethodDecl 0x56439aa2b8f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56439aa2b998 <col:20>
| `-OptimizeNoneAttr 0x56439aa2b9f0 <col:30>
|-CXXMethodDecl 0x56439aa2ba40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56439aa2bb08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56439aa2bba8 <col:20>
| `-OptimizeNoneAttr 0x56439aa2bc00 <col:30>
|-CXXMethodDecl 0x56439aa2bc48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56439aa2bd68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56439aa2bed8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56439aa2be18 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56439aa2bfc8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56439aa2c068 <col:20>
| `-OptimizeNoneAttr 0x56439aa2c0c0 <col:30>
|-CXXMethodDecl 0x56439aa2c110 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56439aa2c1d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56439aa2c408 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56439aa2c280 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56439aa2c2f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa2c4b8 <col:20>
| `-OptimizeNoneAttr 0x56439aa2c510 <col:30>
|-CXXMethodDecl 0x56439aa2c5b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56439aa2c658 <col:20>
| `-OptimizeNoneAttr 0x56439aa2c6b0 <col:30>
|-CXXMethodDecl 0x56439aa2c700 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56439aa2c7a0 <col:20>
| `-OptimizeNoneAttr 0x56439aa2c7f8 <col:30>
|-CXXMethodDecl 0x56439aa2c840 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56439aa2c8e0 <col:20>
| `-OptimizeNoneAttr 0x56439aa2c938 <col:30>
|-CXXMethodDecl 0x56439aa2ca38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56439aa2c970 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56439aa2cae0 <col:20>
| `-OptimizeNoneAttr 0x56439aa2cb38 <col:30>
|-CXXMethodDecl 0x56439aa2ccf8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56439aa2cb70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56439aa2cbe8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa2cda8 <col:20>
| `-OptimizeNoneAttr 0x56439aa2ce00 <col:30>
|-CXXMethodDecl 0x56439aa2cea8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56439aa2cfc8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56439aa2d0e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56439aa2d188 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56439aa2d1b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56439aa2d2d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56439aa2d378 <col:20>
| `-OptimizeNoneAttr 0x56439aa2d3d0 <col:30>
|-CXXMethodDecl 0x56439aa2d478 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56439aa2d518 <col:20>
| `-OptimizeNoneAttr 0x56439aa2d570 <col:30>
|-AccessSpecDecl 0x56439aa2d598 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56439aa2d5c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56439aa2d6c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56439aa2d710 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa2d6a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56439aa2d680 <col:14> 'int' 48
|-CXXMethodDecl 0x56439aa2d778 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56439aa2d818 <col:20>
| `-OptimizeNoneAttr 0x56439aa2d870 <col:30>
|-CXXMethodDecl 0x56439aa2d8e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56439aa2d988 <col:20>
| `-OptimizeNoneAttr 0x56439aa2d9e0 <col:30>
|-CXXMethodDecl 0x56439aa2daa8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56439aa2da18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56439aa2dc48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56439aa2dde8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56439aa2dcf8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56439aa2de90 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56439aa2df90 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56439aa2e340 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2df70 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56439aa2df50 <col:9> 'int' 0
| |-EnumConstantDecl 0x56439aa2e020 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56439aa2e358 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2e000 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56439aa2dfe0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56439aa2e0b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56439aa2e370 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2e090 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56439aa2e070 <col:14> 'int' 2
| |-EnumConstantDecl 0x56439aa2e140 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56439aa2e388 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2e120 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56439aa2e100 <col:14> 'int' 3
| |-EnumConstantDecl 0x56439aa2e1d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56439aa2e3a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2e1b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56439aa2e190 <col:13> 'int' 4
| |-EnumConstantDecl 0x56439aa2e260 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56439aa2e3b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2e240 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56439aa2e220 <col:13> 'int' 5
| `-EnumConstantDecl 0x56439aa2e2f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56439aa2e3d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa2e2d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56439aa2e2b0 <col:14> 'int' 6
|-CXXMethodDecl 0x56439aa2e438 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56439aa2e4d8 <col:20>
| `-OptimizeNoneAttr 0x56439aa2e530 <col:30>
|-CXXMethodDecl 0x56439aa2e628 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56439aa2e568 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56439aa2e6d0 <col:20>
| `-OptimizeNoneAttr 0x56439aa2e728 <col:30>
|-CXXMethodDecl 0x56439aa2e798 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56439aa2e8c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56439aa2ea38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56439aa2e970 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56439aa2eb00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56439aa2ebc8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56439aa2ed08 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56439aa2ec78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56439aa2edb0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56439aa2eeb0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56439aa2f0b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2ee90 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56439aa2ee70 <col:23> 'int' 0
| |-EnumConstantDecl 0x56439aa2ef40 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56439aa2f0c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2ef20 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56439aa2ef00 <col:45> 'int' 4
| |-EnumConstantDecl 0x56439aa2efd0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56439aa2f0e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa2efb0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56439aa2ef90 <col:24> 'int' 0
| `-EnumConstantDecl 0x56439aa2f060 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56439aa2f0f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa2f040 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56439aa2f020 <col:47> 'int' 16
|-CXXMethodDecl 0x56439aa2f158 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56439aa2f2c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56439aa2f208 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56439aa2f370 <col:20>
| `-OptimizeNoneAttr 0x56439aa2f3c8 <col:30>
|-CXXMethodDecl 0x56439aa2f418 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56439aa42da0 <col:18, col:36>
|   `-ReturnStmt 0x56439aa42d90 <col:20, col:33>
|     `-ImplicitCastExpr 0x56439aa42d78 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56439aa42d58 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56439aa42d28 <col:27> '<bound member function type>' ->xanno 0x56439aa2d478
|           `-CXXThisExpr 0x56439aa42d18 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56439aa2f510 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56439aa42eb0 <col:30, col:48>
|   `-ReturnStmt 0x56439aa42ea0 <col:32, col:45>
|     `-ImplicitCastExpr 0x56439aa42e88 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56439aa42e68 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56439aa42e38 <col:39> '<bound member function type>' ->xanno 0x56439aa2d2d8
|           `-CXXThisExpr 0x56439aa42e28 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56439aa2f5f8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56439aa43048 <col:24, col:50>
|   `-ReturnStmt 0x56439aa43038 <col:26, col:47>
|     `-UnaryOperator 0x56439aa43020 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56439aa43000 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56439aa42fe8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56439aa42f98 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56439aa382b8
|         |   `-CXXMemberCallExpr 0x56439aa42f78 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56439aa42f48 <col:34> '<bound member function type>' ->xanno 0x56439aa2d478
|         |       `-CXXThisExpr 0x56439aa42f38 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56439aa42fc8 <col:46> 'int' 0
|-CXXMethodDecl 0x56439aa2f700 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56439aa43218 <col:36, col:62>
|   `-ReturnStmt 0x56439aa43208 <col:38, col:59>
|     `-UnaryOperator 0x56439aa431f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56439aa431d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56439aa431b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56439aa43130 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56439aa382b8
|         |   `-CXXMemberCallExpr 0x56439aa43110 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56439aa430e0 <col:46> '<bound member function type>' ->xanno 0x56439aa2d2d8
|         |       `-CXXThisExpr 0x56439aa430d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56439aa43160 <col:58> 'int' 0
|-CXXMethodDecl 0x56439aa2f818 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56439aa433b0 <col:26, col:53>
|   `-ReturnStmt 0x56439aa433a0 <col:28, col:50>
|     `-UnaryOperator 0x56439aa43388 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56439aa43368 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56439aa43350 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56439aa43300 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56439aa385b8
|         |   `-CXXMemberCallExpr 0x56439aa432e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56439aa432b0 <col:36> '<bound member function type>' ->xanno 0x56439aa2d478
|         |       `-CXXThisExpr 0x56439aa432a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56439aa43330 <col:49> 'int' 0
|-CXXMethodDecl 0x56439aa2f938 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56439aa43588 <col:38, col:65>
|   `-ReturnStmt 0x56439aa43578 <col:40, col:62>
|     `-UnaryOperator 0x56439aa43560 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56439aa43540 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56439aa43528 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56439aa43498 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56439aa385b8
|         |   `-CXXMemberCallExpr 0x56439aa43478 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56439aa43448 <col:48> '<bound member function type>' ->xanno 0x56439aa2d2d8
|         |       `-CXXThisExpr 0x56439aa43438 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56439aa434c8 <col:61> 'int' 0
|-CXXMethodDecl 0x56439aa2fae8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56439aa2f9f0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56439aa43c58 <col:34, line:463:5>
|   |-ParenExpr 0x56439aa43aa0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56439aa43a70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa436d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa436a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa435f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa435e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa435a0 <col:23> 'int' lvalue ParmVar 0x56439aa2f9f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa435c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa43688 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa43658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa43618 <col:33> 'int' lvalue ParmVar 0x56439aa2f9f0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56439aa43670 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56439aa43638 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56439aa43738 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa43718 <col:56> 'int' 0
|   |   `-CallExpr 0x56439aa439d0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56439aa439b8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa43998 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa43a10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa43828 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56439aa43a28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa43858 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa43a40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa43890 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56439aa43a58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa43980 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa43968 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa43928 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56439aa43c48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56439aa43c30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56439aa43c10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56439aa43be0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56439aa43b90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56439aa382b8
|         |   `-CXXMemberCallExpr 0x56439aa43b70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56439aa43b40 <col:9> '<bound member function type>' ->xanno 0x56439aa2d2d8
|         |       `-CXXThisExpr 0x56439aa43b30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56439aa43bf8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56439aa43bc0 <col:21> 'int' lvalue ParmVar 0x56439aa2f9f0 'i' 'int'
|-CXXMethodDecl 0x56439aa2fd38 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56439aa2fba8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56439aa2fc20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56439aa442e8 <col:40, line:472:5>
|   |-ParenExpr 0x56439aa44100 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56439aa440d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa43db0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa43d80 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa43cd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa43cb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa43c78 <col:23> 'int' lvalue ParmVar 0x56439aa2fba8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa43c98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa43d60 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa43d30 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa43cf0 <col:33> 'int' lvalue ParmVar 0x56439aa2fba8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56439aa43d48 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56439aa43d10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56439aa43e10 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa43df0 <col:56> 'int' 0
|   |   `-CallExpr 0x56439aa44030 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56439aa44018 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa43ff8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa44070 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa43e80 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56439aa44088 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa43eb0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa440a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa43ee8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56439aa440b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa43fe0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa43fc8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa43f88 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56439aa442c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56439aa44270 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56439aa44240 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56439aa441f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56439aa382b8
|     | |   `-CXXMemberCallExpr 0x56439aa441d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56439aa441a0 <col:2> '<bound member function type>' ->xanno 0x56439aa2d478
|     | |       `-CXXThisExpr 0x56439aa44190 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56439aa44258 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56439aa44220 <col:14> 'int' lvalue ParmVar 0x56439aa2fba8 'i' 'int'
|     `-ImplicitCastExpr 0x56439aa442b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa44290 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56439aa2fc20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56439aa2fef8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56439aa2fe00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56439aa44a68 <col:36, line:485:5>
|   |-ParenExpr 0x56439aa447d0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa447a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa44480 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa44450 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa44360 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa44348 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa44308 <col:23> 'int' lvalue ParmVar 0x56439aa2fe00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa44328 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa44430 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa44418 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa44380 <col:33> 'int' lvalue ParmVar 0x56439aa2fe00 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa443f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa443e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa443a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa443c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56439aa444e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa444c0 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa44700 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa446e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa446c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa44740 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa44550 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56439aa44758 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa44588 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa44770 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa445c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56439aa44788 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa446b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa44698 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa44658 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56439aa44a58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56439aa44a40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56439aa44a28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56439aa449f8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56439aa44998 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56439aa44968 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56439aa448e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56439aa38190
|             |   `-CXXMemberCallExpr 0x56439aa448c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56439aa44890 <col:61> '<bound member function type>' ->xanno 0x56439aa2d2d8
|             |       `-CXXThisExpr 0x56439aa44880 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56439aa44980 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56439aa44910 <col:74> 'int' lvalue ParmVar 0x56439aa2fe00 'i' 'int'
|-CXXMethodDecl 0x56439aa30148 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56439aa2ffb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56439aa30030 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56439aa451b8 <col:42, line:500:5>
|   |-ParenExpr 0x56439aa44f50 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa44f20 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa44c00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa44bd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa44ae0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa44ac8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa44a88 <col:23> 'int' lvalue ParmVar 0x56439aa2ffb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa44aa8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa44bb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa44b98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa44b00 <col:33> 'int' lvalue ParmVar 0x56439aa2ffb8 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa44b78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa44b60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa44b20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa44b40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56439aa44c60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa44c40 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa44e80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa44e68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa44e48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa44ec0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa44cd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56439aa44ed8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa44d08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa44ef0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa44d40 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56439aa44f08 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa44e30 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa44e18 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa44dd8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56439aa45198 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56439aa45148 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56439aa45118 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56439aa450c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56439aa45090 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56439aa45040 <col:48, col:57> 'char [48]' lvalue ->c 0x56439aa38190
|     |     |   `-CXXMemberCallExpr 0x56439aa45020 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56439aa44ff0 <col:48> '<bound member function type>' ->xanno 0x56439aa2d478
|     |     |       `-CXXThisExpr 0x56439aa44fe0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56439aa450a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56439aa45070 <col:61> 'int' lvalue ParmVar 0x56439aa2ffb8 'i' 'int'
|     `-ImplicitCastExpr 0x56439aa45180 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa45160 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56439aa30030 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56439aa30308 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56439aa30210 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56439aa45918 <col:35, line:513:5>
|   |-ParenExpr 0x56439aa45628 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa455f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa45350 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa45320 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa45230 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa45218 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa451d8 <col:23> 'int' lvalue ParmVar 0x56439aa30210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa451f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa45300 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa452e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa45250 <col:33> 'int' lvalue ParmVar 0x56439aa30210 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa452c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa452b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa45270 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa45290 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56439aa453b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa45390 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa45558 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa45540 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa45520 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa45598 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa45420 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56439aa455b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa45458 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa455c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa45490 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56439aa455e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa45508 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa454f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa454b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56439aa45908 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56439aa458f0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56439aa458d8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56439aa458a8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56439aa45820 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56439aa457f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56439aa457a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56439aa38190
|             |   `-CXXMemberCallExpr 0x56439aa45780 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56439aa45750 <col:60> '<bound member function type>' ->xanno 0x56439aa2d2d8
|             |       `-CXXThisExpr 0x56439aa45740 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56439aa45808 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56439aa457d0 <col:73> 'int' lvalue ParmVar 0x56439aa30210 'i' 'int'
|-CXXMethodDecl 0x56439aa30558 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56439aa303c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56439aa30440 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56439aa46038 <col:41, line:528:5>
|   |-ParenExpr 0x56439aa45dc0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa45d90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa45ab0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa45a80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa45990 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa45978 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa45938 <col:23> 'int' lvalue ParmVar 0x56439aa303c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa45958 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa45a60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa45a48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa459b0 <col:33> 'int' lvalue ParmVar 0x56439aa303c8 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa45a28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa45a10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa459d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa459f0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56439aa45b10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa45af0 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa45cf0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa45cd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa45cb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa45d30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa45b80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56439aa45d48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa45bb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa45d60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa45bf0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56439aa45d78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa45ca0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa45c88 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa45c48 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56439aa46018 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56439aa45fc8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56439aa45f98 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56439aa45f40 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56439aa45f00 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56439aa45eb0 <col:47, col:56> 'char [48]' lvalue ->c 0x56439aa38190
|     |     |   `-CXXMemberCallExpr 0x56439aa45e90 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56439aa45e60 <col:47> '<bound member function type>' ->xanno 0x56439aa2d478
|     |     |       `-CXXThisExpr 0x56439aa45e50 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56439aa45f18 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56439aa45ee0 <col:60> 'int' lvalue ParmVar 0x56439aa303c8 'i' 'int'
|     `-ImplicitCastExpr 0x56439aa46000 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa45fe0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56439aa30440 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56439aa30718 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56439aa30620 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56439aa46708 <col:36, line:541:5>
|   |-ParenExpr 0x56439aa464a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa46478 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa461d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa461a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa460b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa46098 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa46058 <col:23> 'int' lvalue ParmVar 0x56439aa30620 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa46078 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa46180 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa46168 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa460d0 <col:33> 'int' lvalue ParmVar 0x56439aa30620 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa46148 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa46130 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa460f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa46110 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56439aa46230 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa46210 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa463d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa463c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa463a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa46418 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa462a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56439aa46430 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa462d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa46448 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa46310 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56439aa46460 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa46388 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa46370 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa46330 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56439aa466f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56439aa466e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56439aa466c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56439aa46698 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56439aa46640 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56439aa46610 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56439aa465c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56439aa38190
|             |   `-CXXMemberCallExpr 0x56439aa465a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56439aa46570 <col:61> '<bound member function type>' ->xanno 0x56439aa2d2d8
|             |       `-CXXThisExpr 0x56439aa46560 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56439aa46628 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56439aa465f0 <col:74> 'int' lvalue ParmVar 0x56439aa30620 'i' 'int'
|-CXXMethodDecl 0x56439aa308e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56439aa307d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56439aa30850 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56439aa30998 <col:20>
| `-OptimizeNoneAttr 0x56439aa309f0 <col:30>
|-CXXMethodDecl 0x56439aa30b28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56439aa30a30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56439aa46dd8 <col:35, line:562:5>
|   |-ParenExpr 0x56439aa46b78 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa46b48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa468a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa46870 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa46780 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa46768 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa46728 <col:23> 'int' lvalue ParmVar 0x56439aa30a30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa46748 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa46850 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa46838 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa467a0 <col:33> 'int' lvalue ParmVar 0x56439aa30a30 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa46818 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa46800 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa467c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa467e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56439aa46900 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa468e0 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa46aa8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa46a90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa46a70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa46ae8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa46970 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56439aa46b00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa469a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa46b18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa469e0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56439aa46b30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa46a58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa46a40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa46a00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56439aa46dc8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56439aa46db0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56439aa46d98 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56439aa46d68 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56439aa46d10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56439aa46ce0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56439aa46c90 <col:60, col:69> 'char const[48]' lvalue ->c 0x56439aa38190
|             |   `-CXXMemberCallExpr 0x56439aa46c70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56439aa46c40 <col:60> '<bound member function type>' ->xanno 0x56439aa2d2d8
|             |       `-CXXThisExpr 0x56439aa46c30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56439aa46cf8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56439aa46cc0 <col:73> 'int' lvalue ParmVar 0x56439aa30a30 'i' 'int'
|-CXXMethodDecl 0x56439aa30d38 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56439aa30be8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56439aa30c60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56439aa474b8 <col:41, line:577:5>
|   |-ParenExpr 0x56439aa47248 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa47218 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa46f70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa46f40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa46e50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa46e38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa46df8 <col:23> 'int' lvalue ParmVar 0x56439aa30be8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa46e18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa46f20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa46f08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa46e70 <col:33> 'int' lvalue ParmVar 0x56439aa30be8 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa46ee8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa46ed0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa46e90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa46eb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56439aa46fd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa46fb0 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa47178 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa47160 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa47140 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa471b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa47040 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56439aa471d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa47078 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa471e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa470b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56439aa47200 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa47128 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa47110 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa470d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56439aa47498 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56439aa47448 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56439aa47418 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56439aa473b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56439aa47388 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56439aa47338 <col:47, col:56> 'char [48]' lvalue ->c 0x56439aa38190
|     |     |   `-CXXMemberCallExpr 0x56439aa47318 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56439aa472e8 <col:47> '<bound member function type>' ->xanno 0x56439aa2d478
|     |     |       `-CXXThisExpr 0x56439aa472d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56439aa473a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56439aa47368 <col:60> 'int' lvalue ParmVar 0x56439aa30be8 'i' 'int'
|     `-ImplicitCastExpr 0x56439aa47480 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa47460 <col:65> 'int32_t':'int' lvalue ParmVar 0x56439aa30c60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56439aa30ef8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56439aa30e00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56439aa47be8 <col:36, line:591:5>
|   |-ParenExpr 0x56439aa47928 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa478f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa47650 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa47620 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa47530 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa47518 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa474d8 <col:23> 'int' lvalue ParmVar 0x56439aa30e00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa474f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa47600 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa475e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa47550 <col:33> 'int' lvalue ParmVar 0x56439aa30e00 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa475c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa475b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa47570 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa47590 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56439aa476b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa47690 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa47858 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa47840 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa47820 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa47898 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa47720 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56439aa478b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa47758 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa478c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa47790 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56439aa478e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa47808 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa477f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa477b0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56439aa47bd8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56439aa47bc0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56439aa47ba8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56439aa47b78 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56439aa47af0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56439aa47ac0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56439aa47a70 <col:61, col:70> 'char const[48]' lvalue ->c 0x56439aa38190
|             |   `-CXXMemberCallExpr 0x56439aa47a50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56439aa47a20 <col:61> '<bound member function type>' ->xanno 0x56439aa2d2d8
|             |       `-CXXThisExpr 0x56439aa47a10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56439aa47ad8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56439aa47aa0 <col:74> 'int' lvalue ParmVar 0x56439aa30e00 'i' 'int'
|-CXXMethodDecl 0x56439aa31148 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56439aa30fb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56439aa31030 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56439aa482c8 <col:42, line:606:5>
|   |-ParenExpr 0x56439aa48058 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56439aa48028 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa47d80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa47d50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa47c60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa47c48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa47c08 <col:23> 'int' lvalue ParmVar 0x56439aa30fb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa47c28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa47d30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56439aa47d18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa47c80 <col:33> 'int' lvalue ParmVar 0x56439aa30fb8 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa47cf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa47ce0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa47ca0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56439aa47cc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56439aa47de0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa47dc0 <col:60> 'int' 0
|   |   `-CallExpr 0x56439aa47f88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56439aa47f70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa47f50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa47fc8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa47e50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56439aa47fe0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa47e88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa47ff8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa47ec0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56439aa48010 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa47f38 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa47f20 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa47ee0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56439aa482a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56439aa48258 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56439aa48228 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56439aa481c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56439aa48198 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56439aa48148 <col:48, col:57> 'char [48]' lvalue ->c 0x56439aa38190
|     |     |   `-CXXMemberCallExpr 0x56439aa48128 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56439aa480f8 <col:48> '<bound member function type>' ->xanno 0x56439aa2d478
|     |     |       `-CXXThisExpr 0x56439aa480e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56439aa481b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56439aa48178 <col:61> 'int' lvalue ParmVar 0x56439aa30fb8 'i' 'int'
|     `-ImplicitCastExpr 0x56439aa48290 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56439aa48270 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56439aa31030 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56439aa312e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56439aa31210 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56439aa48b38 <col:33, line:620:5>
|   |-ParenExpr 0x56439aa488b0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56439aa48880 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa484d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa484a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa48340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa48328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa482e8 <col:23> 'int' lvalue ParmVar 0x56439aa31210 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa48308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa48480 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56439aa48468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa48360 <col:33> 'int' lvalue ParmVar 0x56439aa31210 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa48448 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa48430 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa48380 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56439aa48408 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56439aa483f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56439aa483b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56439aa48530 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa48510 <col:79> 'int' 0
|   |   `-CallExpr 0x56439aa487e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56439aa487c8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa487a8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa48820 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa48618 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56439aa48838 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa48660 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa48850 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa48698 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56439aa48868 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa48790 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa48778 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa48738 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56439aa48b28 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56439aa48b10 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56439aa48af8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56439aa48ac8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56439aa48a40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56439aa48a10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56439aa489c0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56439aa38190
|             |   `-CXXMemberCallExpr 0x56439aa489a0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56439aa48970 <col:67> '<bound member function type>' ->xanno 0x56439aa2d2d8
|             |       `-CXXThisExpr 0x56439aa48960 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56439aa48a28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56439aa489f0 <col:80> 'int' lvalue ParmVar 0x56439aa31210 'i' 'int'
|-CXXMethodDecl 0x56439aa314f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56439aa313a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56439aa31420 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56439aa49360 <col:45, line:635:5>
|   |-ParenExpr 0x56439aa490a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56439aa49078 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56439aa48d40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56439aa48d10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56439aa48bb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56439aa48b98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56439aa48b58 <col:23> 'int' lvalue ParmVar 0x56439aa313a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56439aa48b78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56439aa48cf0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56439aa48cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56439aa48bd0 <col:33> 'int' lvalue ParmVar 0x56439aa313a0 'i' 'int'
|   |   |     `-BinaryOperator 0x56439aa48cb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56439aa48ca0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56439aa48bf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56439aa2d6c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56439aa48c78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56439aa48c60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56439aa48c28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56439aa48da0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56439aa48d80 <col:79> 'int' 0
|   |   `-CallExpr 0x56439aa48fd8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56439aa48fc0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56439aa48fa0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56439a599fe0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56439aa49018 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa48e10 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56439aa49030 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56439aa48e58 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56439aa49048 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56439aa48e90 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56439aa49060 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56439aa48f88 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56439aa48f70 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56439aa48f28 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56439aa49340 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56439aa492a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56439aa49278 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56439aa49218 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56439aa491e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56439aa49198 <col:54, col:63> 'char [48]' lvalue ->c 0x56439aa38190
|     |     |   `-CXXMemberCallExpr 0x56439aa49178 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56439aa49148 <col:54> '<bound member function type>' ->xanno 0x56439aa2d478
|     |     |       `-CXXThisExpr 0x56439aa49138 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56439aa49200 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56439aa491c8 <col:67> 'int' lvalue ParmVar 0x56439aa313a0 'i' 'int'
|     `-CXXConstCastExpr 0x56439aa49310 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56439aa492f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56439aa492c0 <col:91> 'const void *' lvalue ParmVar 0x56439aa31420 'x' 'const void *'
|-CXXMethodDecl 0x56439aa315c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56439aa493e8 <col:34, line:640:5>
|   `-ReturnStmt 0x56439aa493d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56439aa493c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56439aa49390 <col:16> 'Packet *' lvalue ->_data_packet 0x56439aa38d48
|         `-CXXThisExpr 0x56439aa49380 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56439aa31708 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56439aa31678 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56439aa424a8 <col:46> 'bool' true
|-CXXMethodDecl 0x56439aa31888 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56439aa317c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56439aa31930 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56439aa320e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56439aa31a30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa32150 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31a10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56439aa319f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56439aa26b90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56439aa31ac0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa32168 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31aa0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56439aa31a80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56439aa26c20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56439aa31b50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa32180 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31b30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56439aa31b10 <col:21> 'int' 0
| |-EnumConstantDecl 0x56439aa31be0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa32198 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31bc0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56439aa31ba0 <col:19> 'int' 16
| |-EnumConstantDecl 0x56439aa31c70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa321b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31c50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56439aa31c30 <col:21> 'int' 16
| |-EnumConstantDecl 0x56439aa31d00 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa321c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31ce0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56439aa31cc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56439aa31d90 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa321e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31d70 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56439aa31d50 <col:19> 'int' EnumConstant 0x56439aa31be0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56439aa31e20 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa321f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31e00 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56439aa31de0 <col:19> 'int' EnumConstant 0x56439aa31d00 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56439aa31ef0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa32210 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31ed0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56439aa31eb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56439aa31e70 <col:23> 'int' EnumConstant 0x56439aa31e20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56439aa31e90 <col:40> 'int' 2
| |-EnumConstantDecl 0x56439aa31fc0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56439aa32228 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439aa31fa0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56439aa31f80 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56439aa31f40 <col:23> 'int' EnumConstant 0x56439aa31e20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56439aa31f60 <col:40> 'int' 4
| `-EnumConstantDecl 0x56439aa32090 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56439aa32240 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56439aa32070 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56439aa32050 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56439aa32010 <col:23> 'int' EnumConstant 0x56439aa31e20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56439aa32030 <col:40> 'int' 8
|-CXXMethodDecl 0x56439aa32280 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56439aa32320 <col:68> "" ""
|-CXXMethodDecl 0x56439aa323b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56439aa32458 <col:45> "" ""
|-CXXMethodDecl 0x56439aa324f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56439aa32590 <col:57> "" ""
|-CXXMethodDecl 0x56439aa32628 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56439aa326c8 <col:45> "" ""
|-CXXMethodDecl 0x56439aa32760 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56439aa32800 <col:57> "" ""
|-CXXMethodDecl 0x56439aa32890 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56439aa32930 <col:51> "" ""
|-CXXMethodDecl 0x56439aa329c0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56439aa32a60 <col:63> "" ""
|-CXXMethodDecl 0x56439aa32af0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56439aa32b90 <col:53> "" ""
|-CXXMethodDecl 0x56439aa32c20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56439aa32cc0 <col:65> "" ""
|-CXXMethodDecl 0x56439aa32dd8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56439aa32d48 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56439aa32e80 <col:61> "" ""
|-CXXMethodDecl 0x56439aa33018 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56439aa32f08 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56439aa32f80 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56439aa330c8 <col:67> "" ""
|-CXXMethodDecl 0x56439aa331e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56439aa33150 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56439aa33288 <col:63> "" ""
|-CXXMethodDecl 0x56439aa33420 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56439aa33310 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56439aa33388 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56439aa334d0 <col:69> "" ""
|-CXXMethodDecl 0x56439aa335e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56439aa33558 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56439aa33690 <col:63> "" ""
|-CXXMethodDecl 0x56439aa35d68 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56439aa35c58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56439aa35cd0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56439aa35e18 <col:69> "" ""
|-CXXMethodDecl 0x56439aa35f30 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56439aa35ea0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56439aa35fd8 <col:62> "" ""
|-CXXMethodDecl 0x56439aa36170 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56439aa36060 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56439aa360d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56439aa36220 <col:68> "" ""
|-CXXMethodDecl 0x56439aa36338 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56439aa362a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56439aa363e0 <col:63> "" ""
|-CXXMethodDecl 0x56439aa36578 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56439aa36468 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56439aa364e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56439aa36628 <col:69> "" ""
|-CXXMethodDecl 0x56439aa366b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56439aa36758 <col:64> "" ""
|-CXXMethodDecl 0x56439aa367e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56439aa36888 <col:52> "" ""
|-CXXMethodDecl 0x56439aa36918 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56439aa369b8 <col:67> "" ""
|-CXXMethodDecl 0x56439aa36a48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56439aa36ae8 <col:55> "" ""
|-CXXMethodDecl 0x56439aa36c00 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56439aa36b70 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56439aa36ca8 <col:58> "" ""
|-CXXMethodDecl 0x56439aa36e40 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56439aa36d30 <col:33> col:36 'int'
| |-ParmVarDecl 0x56439aa36da8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56439aa36ef0 <col:62> "" ""
|-CXXMethodDecl 0x56439aa37008 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56439aa36f78 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56439aa370b0 <col:58> "" ""
|-CXXMethodDecl 0x56439aa37248 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56439aa37138 <col:33> col:36 'int'
| |-ParmVarDecl 0x56439aa371b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56439aa372f8 <col:62> "" ""
|-CXXMethodDecl 0x56439aa37410 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56439aa37380 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56439aa374b8 <col:60> "" ""
|-CXXMethodDecl 0x56439aa37650 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56439aa37540 <col:34> col:37 'int'
| |-ParmVarDecl 0x56439aa375b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56439aa37700 <col:64> "" ""
|-CXXMethodDecl 0x56439aa37818 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56439aa37788 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56439aa378c0 <col:58> "" ""
|-CXXMethodDecl 0x56439aa37a58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56439aa37948 <col:33> col:36 'int'
| |-ParmVarDecl 0x56439aa379c0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56439aa37b08 <col:62> "" ""
|-CXXMethodDecl 0x56439aa37c20 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56439aa37b90 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56439aa37cc8 <col:59> "" ""
|-CXXMethodDecl 0x56439aa37e60 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56439aa37d50 <col:33> col:36 'int'
| |-ParmVarDecl 0x56439aa37dc8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56439aa37f10 <col:63> "" ""
|-AccessSpecDecl 0x56439aa37f80 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56439aa37fa8 prev 0x56439aa2d1b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56439aa380a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56439aa38190 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56439aa382b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56439aa38438 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56439aa385b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56439aa38738 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56439aa49568 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56439aa49dd8 <col:11>
| |-CXXDestructorDecl 0x56439aa49640 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56439aa49778 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56439aa49778
| | `-ParmVarDecl 0x56439aa49888 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56439aa49928 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56439aa49928
| | `-ParmVarDecl 0x56439aa49a38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56439aa4c7f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56439aa4c908 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56439aa4cb88 <col:11>
| |   `-ReturnStmt 0x56439aa4cb78 <col:11>
| |     `-UnaryOperator 0x56439aa4cb60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56439aa4cb50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56439aa4c978 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56439aa4c978
|   `-ParmVarDecl 0x56439aa4ca88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56439aa387a0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56439aa388b8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56439aa38958 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56439aa389c0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56439aa38a28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56439aa38a90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56439aa38af0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56439aa38bb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56439aa38c10 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56439aa38c70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56439aa49478 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56439aa38958 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56439aa49de8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56439aa49e40 <col:12>
| |-CXXConstructorDecl 0x56439aa49aa8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56439aa49aa8
| | `-ParmVarDecl 0x56439aa49bb8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56439aa49c58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56439aa49c58
| | `-ParmVarDecl 0x56439aa49d68 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56439aa4bee0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56439aa38ce8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56439aa38d48 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56439aa38db0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56439aa38e18 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56439aa38e80 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56439aa38ee8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56439aa38f48 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56439aa38fa8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56439aa39010 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56439aa39098 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56439aa38ce8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56439aa49410 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56439aa38f48 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56439aa49e50 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56439aa49eb0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56439aa39238 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56439aa39178 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56439aa39330 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56439aa39518 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56439aa39420 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56439aa397e8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56439aa395d0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56439aa39648 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56439aa396c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa39a08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56439aa398b8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56439aa39930 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56439aa41fe8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56439aa39ac8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56439aa39b40 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56439aa39bb8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56439aa42140 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56439aa420b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56439aa42288 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56439aa421f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56439aa42380 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439ab1c660 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56439ab1c778 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56439ab1c808 <col:16, col:22> col:16 public
|-EnumDecl 0x56439ab1c830 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56439ab1c930 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56439ab1cb80 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab1c910 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56439ab1c8f0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56439ab1c9c0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56439ab1cb98 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab1c9a0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56439ab1c980 <col:24> 'int' 22
| |-EnumConstantDecl 0x56439ab1ca50 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56439ab1cbb0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab1ca30 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56439ab1ca10 <col:24> 'int' 34
| |-EnumConstantDecl 0x56439ab1cae0 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56439ab1cbc8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56439ab1cac0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56439ab1caa0 <col:25> 'int' 95
| `-EnumConstantDecl 0x56439ab1cb30 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56439ab1e540 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56439ab1e978 <col:7>
|-CXXConstructorDecl 0x56439ab1e648 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56439ab1e648
| `-ParmVarDecl 0x56439ab1e758 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56439ab1e7f8 <col:7> col:7 implicit constexpr NumArg 'void (NumArg &&)' inline default trivial noexcept-unevaluated 0x56439ab1e7f8
| `-ParmVarDecl 0x56439ab1e908 <col:7> col:7 'NumArg &&'
`-CXXDestructorDecl 0x56439ab20a88 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56439ab1cbf8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56439ab1cd58 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x56439ab1cde8 <col:32, col:38> col:32 public
|-TypedefDecl 0x56439ab1ce20 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56439a6534e0 'uint32_t' sugar
|   |-Typedef 0x56439a567408 'uint32_t'
|   `-TypedefType 0x56439a540440 '__uint32_t' sugar
|     |-Typedef 0x56439a540038 '__uint32_t'
|     `-BuiltinType 0x56439a4fe410 'unsigned int'
|-CXXConstructorDecl 0x56439ab1cf68 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x56439ab1ce90 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x56439ab1e448 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56439ab1e988 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56439ab1dd00 'base' 'int'
| | `-ImplicitCastExpr 0x56439ab1e4e8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x56439ab1e4a8 <col:16> 'int' lvalue ParmVar 0x56439ab1ce90 'b' 'int'
| `-CompoundStmt 0x56439ab1e9f8 <col:19, line:1046:5>
|-CXXMethodDecl 0x56439ab1d460 <line:1048:5, line:1050:50> line:1048:17 parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x56439ab1d030 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x56439ab1d0b0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x56439ab1d128 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x56439ab1d1a8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x56439ab1d268 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x56439ab1d2e8 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x56439ab1d8b8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x56439ab1d530 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| `-CXXMethodDecl 0x56439ab1d818 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
|   |-ParmVarDecl 0x56439ab1d5d8 <col:27, col:41> col:41 referenced str 'const String &'
|   |-ParmVarDecl 0x56439ab1d678 <col:46, col:49> col:49 referenced result 'V &'
|   |-ParmVarDecl 0x56439ab1d6f0 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
|   | `-DeclRefExpr 0x56439ab1e468 <col:82> 'const ArgContext' lvalue Var 0x56439ab113e8 'blank_args' 'const ArgContext'
|   `-CompoundStmt 0x56439ab1f938 <col:94, line:1067:5>
|     |-DeclStmt 0x56439ab1eb88 <line:1054:9, col:64>
|     | `-VarDecl 0x56439ab1ea18 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-CXXDependentScopeMemberExpr 0x56439ab1eb40 <col:36, col:55> '<dependent type>' lvalue ->is_signed
|     |-DeclStmt 0x56439ab1eda8 <line:1055:9, col:91>
|     | `-VarDecl 0x56439ab1ebb8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x56439ab1ed80 <col:31, col:90> 'int' functional cast to int <Dependent>
|     |     `-BinaryOperator 0x56439ab1ed60 <col:35, col:89> 'unsigned long' '/'
|     |       |-ParenExpr 0x56439ab1ed10 <col:35, col:69> 'unsigned long'
|     |       | `-BinaryOperator 0x56439ab1ecf0 <col:36, col:68> 'unsigned long' '-'
|     |       |   |-BinaryOperator 0x56439ab1ec98 <col:36, col:64> 'unsigned long' '+'
|     |       |   | |-UnaryExprOrTypeTraitExpr 0x56439ab1ec48 <col:36, col:44> 'unsigned long' sizeof 'V'
|     |       |   | `-UnaryExprOrTypeTraitExpr 0x56439ab1ec78 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |       |   `-ImplicitCastExpr 0x56439ab1ecd8 <col:68> 'unsigned long' <IntegralCast>
|     |       |     `-IntegerLiteral 0x56439ab1ecb8 <col:68> 'int' 1
|     |       `-UnaryExprOrTypeTraitExpr 0x56439ab1ed40 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x56439ab1ef08 <line:1056:9, col:27>
|     | `-VarDecl 0x56439ab1eea0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
|     |-IfStmt 0x56439ab1f360 <line:1057:9, line:1059:22>
|     | |-CXXOperatorCallExpr 0x56439ab1f290 <line:1057:13, line:1058:24> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56439ab1f210 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56439aa1d4c8 0x56439a866aa8 0x56439a866780 0x56439a857f60 0x56439a857c10 0x56439a857500 0x56439a829e70 0x56439a7b6330
|     | | |-CallExpr 0x56439ab1f150 <line:1057:13, col:78> '<dependent type>'
|     | | | |-UnresolvedMemberExpr 0x56439ab1ef30 <col:13> '<bound member function type>' lvalue
|     | | | |-CXXMemberCallExpr 0x56439ab1eff0 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56439ab1efc0 <col:19, col:23> '<bound member function type>' .begin 0x56439a847168
|     | | | |   `-DeclRefExpr 0x56439ab1efa0 <col:19> 'const String' lvalue ParmVar 0x56439ab1d5d8 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x56439ab1f060 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x56439ab1f030 <col:32, col:36> '<bound member function type>' .end 0x56439a847380
|     | | | |   `-DeclRefExpr 0x56439ab1f010 <col:32> 'const String' lvalue ParmVar 0x56439ab1d5d8 'str' 'const String &'
|     | | | |-DeclRefExpr 0x56439ab1f080 <col:43> 'const bool' lvalue Var 0x56439ab1ea18 'is_signed' 'const bool'
|     | | | |-CXXFunctionalCastExpr 0x56439ab1f0e8 <col:54, col:67> 'int' functional cast to int <Dependent>
|     | | | | `-UnaryExprOrTypeTraitExpr 0x56439ab1f0c8 <col:58, col:66> 'unsigned long' sizeof 'V'
|     | | | |-DeclRefExpr 0x56439ab1f110 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x56439ab1eea0 'x' 'IntArg::limb_type [nlimb]'
|     | | | `-DeclRefExpr 0x56439ab1f130 <col:73> 'const int' lvalue Var 0x56439ab1ebb8 'nlimb' 'const int'
|     | | `-CXXMemberCallExpr 0x56439ab1f1f0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x56439ab1f1c0 <col:16, col:20> '<bound member function type>' .end 0x56439a847380
|     | |     `-DeclRefExpr 0x56439ab1f1a0 <col:16> 'const String' lvalue ParmVar 0x56439ab1d5d8 'str' 'const String &'
|     | `-BinaryOperator 0x56439ab1f340 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x56439ab1f2d8 <col:13> 'int' lvalue ->status 0x56439ab1dd68
|     |   | `-CXXThisExpr 0x56439ab1f2c8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x56439ab1f328 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x56439ab1f308 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56439ab1c9c0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x56439ab1f5b0 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x56439ab1f498 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x56439ab1f480 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x56439ab1f468 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x56439ab1f388 <col:13> 'int' lvalue ->status 0x56439ab1dd68
|     | | |     `-CXXThisExpr 0x56439ab1f378 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x56439ab1f448 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x56439ab1f418 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x56439ab1f3c8 <col:23> 'int' lvalue ->status 0x56439ab1dd68
|     | |   |   `-CXXThisExpr 0x56439ab1f3b8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x56439ab1f430 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x56439ab1f3f8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56439ab1ca50 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x56439ab1f590 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x56439ab1f530 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x56439ab1f4d8 <col:13, col:18> '<bound member function type>' .error 0x56439a9e11a0
|     |   | | `-DeclRefExpr 0x56439ab1f4b8 <col:13> 'const ArgContext' lvalue ParmVar 0x56439ab1d6f0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x56439ab1f558 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x56439ab1f508 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x56439ab1f580 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x56439ab1f570 <col:20> 'bool' false
|     |-DeclStmt 0x56439ab1f788 <line:1064:9, col:64>
|     | `-TypedefDecl 0x56439ab1f730 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
|     |   `-DependentNameType 0x56439ab1f6c0 'typename make_unsigned<V>::type' dependent
|     |-CallExpr 0x56439ab1f8e8 <line:1065:9, col:71> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56439ab1f7a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x56439a7ea2f8
|     | |-DeclRefExpr 0x56439ab1f7e8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x56439ab1eea0 'x' 'IntArg::limb_type [nlimb]'
|     | `-CXXReinterpretCastExpr 0x56439ab1f8b8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
|     |   `-DeclRefExpr 0x56439ab1f830 <col:64> 'V' lvalue ParmVar 0x56439ab1d678 'result' 'V &'
|     `-ReturnStmt 0x56439ab1f928 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x56439ab1f918 <col:16> 'bool' true
|-FunctionTemplateDecl 0x56439ab1dc78 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x56439ab1d928 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x56439ab1dbd8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x56439ab1d9d8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x56439ab1da78 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x56439ab1daf0 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x56439ab1e488 <col:71> 'const ArgContext' lvalue Var 0x56439ab113e8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x56439ab200a8 <col:83, line:1083:5>
| |   |-DeclStmt 0x56439ab1fa00 <line:1071:9, col:12>
| |   | `-VarDecl 0x56439ab1f998 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x56439ab20080 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x56439ab1fc90 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x56439ab1fb18 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x56439ab1fae0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x56439ab1fa28 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x56439ab1fa80 <col:31> 'const String' lvalue ParmVar 0x56439ab1d9d8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x56439ab1faa0 <col:36> 'V' lvalue Var 0x56439ab1f998 'x' 'V'
| |     | |   `-DeclRefExpr 0x56439ab1fac0 <col:39> 'const ArgContext' lvalue ParmVar 0x56439ab1daf0 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x56439ab1fc70 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x56439ab1fc50 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x56439ab1fc38 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x56439ab1fc20 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x56439ab1fb40 <col:17> 'int' lvalue ->status 0x56439ab1dd68
| |     |     |     `-CXXThisExpr 0x56439ab1fb30 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x56439ab1fc00 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x56439ab1fbd0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x56439ab1fb80 <col:27> 'int' lvalue ->status 0x56439ab1dd68
| |     |       |   `-CXXThisExpr 0x56439ab1fb70 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x56439ab1fbe8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x56439ab1fbb0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56439ab1ca50 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x56439ab1fcc0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x56439ab1fcb0 <col:20> 'bool' false
| |     `-IfStmt 0x56439ab20058 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x56439ab1fd60 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x56439ab1fd30 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x56439ab1fce0 <col:18> 'int' lvalue ->status 0x56439ab1dd68
| |       | |   `-CXXThisExpr 0x56439ab1fcd0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x56439ab1fd48 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x56439ab1fd10 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x56439ab1ca50 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x56439ab1ff98 <col:42, line:1079:9>
| |       | |-CallExpr 0x56439ab1ff40 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x56439ab1fd90 <line:1076:13> '<bound member function type>' ->range_error 0x56439ab1e378
| |       | | | `-CXXThisExpr 0x56439ab1fd80 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x56439ab1fdc0 <col:25> 'const ArgContext' lvalue ParmVar 0x56439ab1daf0 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x56439ab1fea0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x56439ab1ff18 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x56439ab1fef8 <col:43> 'V' lvalue Var 0x56439ab1f998 'x' 'V'
| |       | `-ReturnStmt 0x56439ab1ff88 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x56439ab1ff78 <col:20> 'bool' false
| |       `-CompoundStmt 0x56439ab20038 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x56439ab1fff8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x56439ab1ffb8 <col:13> 'V' lvalue ParmVar 0x56439ab1da78 'result' 'V &'
| |         | `-DeclRefExpr 0x56439ab1ffd8 <col:22> 'V' lvalue Var 0x56439ab1f998 'x' 'V'
| |         `-ReturnStmt 0x56439ab20028 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x56439ab20018 <col:20> 'bool' true
| `-CXXMethodDecl 0x56439ab644b8 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x56439ab64298 <col:16, col:30> col:30 str 'const String &'
|   |-ParmVarDecl 0x56439ab64368 <col:35, col:38> col:38 result 'int &'
|   `-ParmVarDecl 0x56439ab643d0 <col:46, col:71> col:64 args 'const ArgContext &' cinit
|     `-DeclRefExpr 0x56439ab1e488 <col:71> 'const ArgContext' lvalue Var 0x56439ab113e8 'blank_args' 'const ArgContext'
|-FieldDecl 0x56439ab1dd00 <line:1085:5, col:9> col:9 base 'int'
|-FieldDecl 0x56439ab1dd68 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x56439ab1ddb8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x56439ab1e070 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x56439ab1ddf8 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x56439ab1de78 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x56439ab1def0 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x56439ab1df70 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x56439ab1e378 <line:1092:5, line:1093:45> line:1092:10 referenced range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x56439ab1e140 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x56439ab1e1b8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x56439ab1e250 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x56439ab20908 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x56439ab20908
| `-ParmVarDecl 0x56439ab20a18 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x56439ab20b98 <col:7> col:7 implicit constexpr IntArg 'void (IntArg &&)' inline default trivial noexcept-unevaluated 0x56439ab20b98
| `-ParmVarDecl 0x56439ab20ca8 <col:7> col:7 'IntArg &&'
`-CXXDestructorDecl 0x56439ab46ee8 <col:7> col:7 implicit referenced ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56439ab251d0 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56439ab25428 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56439ab82898 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56439ab82d30 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56439ab82d10 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56439ab82da0 <col:19>
|-CXXConstructorDecl 0x56439ab82998 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x56439ab82998
| `-ParmVarDecl 0x56439ab82aa8 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x56439ab82b48 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56439ab82c58 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56439ab83960 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56439ab83680 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x56439ab83650 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x56439ab83620 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x56439ab82c58 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x56439ab839d0 <col:19>
`-CXXDestructorDecl 0x56439ab82de0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
