
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b09e7f8 prev 0x55f75b095f98 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75b09e8f0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55f75b09e980 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55f75b09e9f8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55f75b09eab8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55f75b09eb80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55f75b09ecf8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55f75b09ec30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55f75b09eda0 <col:24>
| `-OptimizeNoneAttr 0x55f75b09edf8 <col:34>
|-CXXMethodDecl 0x55f75b09ee40 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55f75b09f0f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55f75b09eef0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55f75b09ef68 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55f75b09efe8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55f75b09f1b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55f75b09f1e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55f75b09f250 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55f75b09f2d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55f75b09f5f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55f75b09f390 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55f75b09f408 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55f75b09f480 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55f75b09f500 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55f75b09f710 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55f75b0a6078 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55f75b0a6078
| `-ParmVarDecl 0x55f75b0a6188 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55f75b0a6228 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55f75b0a6228
| `-ParmVarDecl 0x55f75b0a6338 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55f75b160710 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b091810 prev 0x55f75b091590 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55f75b091908 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55f75b091998 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55f75b0919f8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55f75b091ae8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55f75b091be8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55f75b091db8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55f75b091c68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55f75b091ce0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55f75b091f48 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55f75b091e80 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55f75b091ff0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55f75b092128 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55f75b092060 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55f75b0922c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55f75b092208 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55f75b092468 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55f75b0923a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55f75b092510 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55f75b092610 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55f75b0926f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b0925f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55f75b0925d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55f75b0926a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55f75b092708 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b092680 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55f75b092660 <col:44> 'int' 2
|-CXXMethodDecl 0x55f75b092850 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55f75b092738 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55f75b0927b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55f75b0929a8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55f75b092918 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55f75b092be8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55f75b092a68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55f75b092ae0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55f75b092c98 <col:20>
| `-OptimizeNoneAttr 0x55f75b092cf0 <col:30>
|-CXXMethodDecl 0x55f75b092df8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55f75b092d30 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55f75b092ea0 <col:20>
| `-OptimizeNoneAttr 0x55f75b092ef8 <col:30>
|-CXXMethodDecl 0x55f75b092f48 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55f75b093010 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55f75b093128 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55f75b0931b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55f75b093238 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55f75b0932c0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55f75b093348 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55f75b0933d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55f75b093498 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55f75b093520 <line:63:5, col:28> col:23 used PUSH 'const char []' static
|-VarDecl 0x55f75b0935a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55f75b093630 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55f75b0936b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55f75b093740 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55f75b0937d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55f75b093890 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55f75b093920 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55f75b093a70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55f75b0939d8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55f75b093c00 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55f75b093b30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55f75b093eb0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55f75b093cb8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55f75b093d38 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55f75b093db8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55f75b093f68 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55f75b094070 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55f75b094300 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b094050 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55f75b094030 <col:33> 'int' 0
| |-EnumConstantDecl 0x55f75b094100 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55f75b094318 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b0940e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55f75b0940c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55f75b094190 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55f75b094330 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b094170 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55f75b094150 <col:38> 'int' 90
| |-EnumConstantDecl 0x55f75b094220 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55f75b094348 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b094200 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55f75b0941e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55f75b0942b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55f75b094360 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b094290 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55f75b094270 <col:32> 'int' 2000
|-CXXMethodDecl 0x55f75b0943a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55f75b0947e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55f75b094650 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55f75b0946c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b0948b0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55f75b094a30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55f75b094960 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b094c38 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55f75b094ae8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55f75b094b60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b094d38 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55f75b094dd8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55f75b094ea0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55f75b094f30 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55f75b095160 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b094f10 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55f75b094ef0 <col:36> 'int' EnumConstant 0x55f75b094ea0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55f75b094f80 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55f75b094fd0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55f75b095020 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55f75b095070 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55f75b0950c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55f75b095110 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55f75b095248 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55f75b095188 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55f75b095310 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55f75b0953d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55f75b095490 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55f75b095550 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55f75b095668 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55f75b095730 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55f75b0958b0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55f75b0957e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55f75b0959d8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55f75b095bd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55f75b095a88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55f75b095b08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55f75b0a2518 <col:54, line:127:5>
|   |-ParenExpr 0x55f75b0a23c8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55f75b0a2398 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b0a2088 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55f75b0a2060 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55f75b0a2048 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55f75b0a2030 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55f75b0a2000 <col:31> 'Router *' lvalue ->_router 0x55f75b09fee0
|   |   |         `-CXXThisExpr 0x55f75b0a1ff0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55f75b0a20e8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b0a20c8 <col:48> 'int' 0
|   |   `-CallExpr 0x55f75b0a22f8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55f75b0a22e0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b0a22c0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b0a2338 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0a2158 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55f75b0a2350 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0a2178 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55f75b0a2368 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b0a21b0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55f75b0a2380 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b0a22a8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b0a2290 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b0a2248 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55f75b0a2460 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55f75b0a23f8 <col:9> 'Router *' lvalue ->_router 0x55f75b09fee0
|   | | `-CXXThisExpr 0x55f75b0a23e8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55f75b0a2448 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55f75b0a2428 <col:19> 'Router *' lvalue ParmVar 0x55f75b095a88 'r' 'Router *'
|   `-BinaryOperator 0x55f75b0a24f8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55f75b0a2490 <col:9> 'int' lvalue ->_eindex 0x55f75b09ff48
|     | `-CXXThisExpr 0x55f75b0a2480 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55f75b0a24e0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b0a24c0 <col:19> 'int' lvalue ParmVar 0x55f75b095b08 'eindex' 'int'
|-CXXMethodDecl 0x55f75b095d60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55f75b095c98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55f75b095e30 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55f75b095ef8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55f75b095f98 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55f75b0961e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55f75b096060 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55f75b0960e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55f75b096298 <col:20>
| `-OptimizeNoneAttr 0x55f75b0962f0 <col:30>
|-CXXMethodDecl 0x55f75b0963f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55f75b096330 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55f75b0964a0 <col:20>
| `-OptimizeNoneAttr 0x55f75b0964f8 <col:30>
|-CXXMethodDecl 0x55f75b0965c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55f75b096538 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55f75b096670 <col:20>
| `-OptimizeNoneAttr 0x55f75b0966c8 <col:30>
|-CXXMethodDecl 0x55f75b096858 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55f75b096700 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55f75b096780 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55f75b0969e8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55f75b096920 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55f75b096b38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55f75b096aa8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55f75b096c88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55f75b096bf8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55f75b096dd8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55f75b096d48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55f75b097098 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55f75b096e90 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55f75b096f10 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55f75b096fb8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55f75b097170 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55f75b097230 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55f75b097500 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55f75b0973b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55f75b097428 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b097628 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55f75b097800 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55f75b0976e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55f75b097760 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55f75b0979e8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55f75b0978c8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55f75b097948 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55f75b097d58 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55f75b097aa8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55f75b097b20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55f75b097ba0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55f75b0a1b00 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b0a1ae0 <col:106> 'int' 0
| `-ParmVarDecl 0x55f75b097c18 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55f75b0a1b38 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55f75b0a1b18 <col:126> 'int' 0
|-CXXMethodDecl 0x55f75b0980f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55f75b097e28 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55f75b097ec0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55f75b097f40 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55f75b097fb8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55f75b0a1b70 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55f75b0a1b50 <col:114> 'int' 0
|-CXXMethodDecl 0x55f75b098488 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55f75b0981d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55f75b098248 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55f75b0982c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55f75b0a1b88 <col:96> 'int' 0
| `-ParmVarDecl 0x55f75b098340 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55f75b0a1bc8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55f75b0a1ba8 <col:116> 'int' 0
|-CXXMethodDecl 0x55f75b098808 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55f75b098558 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55f75b0985d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b098650 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55f75b0a1c00 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b0a1be0 <col:109> 'int' 0
| `-ParmVarDecl 0x55f75b0986c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55f75b0a1c38 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55f75b0a1c18 <col:129> 'int' 0
|-CXXMethodDecl 0x55f75b098b88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55f75b0988d8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55f75b098950 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b0989d0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55f75b098a48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55f75b0a1c70 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55f75b0a1c50 <col:117> 'int' 0
|-CXXMethodDecl 0x55f75b098f18 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55f75b098c60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b098cd8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b098d58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55f75b0a1c88 <col:99> 'int' 0
| `-ParmVarDecl 0x55f75b098dd0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55f75b0a1cc8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55f75b0a1ca8 <col:119> 'int' 0
|-CXXMethodDecl 0x55f75b099338 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55f75b098fe8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55f75b099068 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55f75b0990e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b099160 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55f75b0a1d00 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b0a1ce0 <col:108> 'int' 0
| `-ParmVarDecl 0x55f75b0991e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55f75b0a1d38 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55f75b0a1d18 <col:141> 'int' 0
|-CXXMethodDecl 0x55f75b099758 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55f75b099410 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55f75b099490 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55f75b099508 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b099588 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55f75b099608 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55f75b0a1d50 <col:121> 'int' 0
|-CXXMethodDecl 0x55f75b099b88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55f75b099838 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55f75b0998b8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55f75b099930 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b0999b0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55f75b0a1d70 <col:98> 'int' 0
| `-ParmVarDecl 0x55f75b099a30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55f75b0a1d90 <col:123> 'int' 0
|-CXXMethodDecl 0x55f75b099e50 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55f75b099c60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55f75b099ce0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55f75b099d60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55f75b0a1db0 <col:80> 'int' 0
|-EnumDecl 0x55f75b099f08 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55f75b09a010 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55f75b09a2a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b099ff0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55f75b099fd0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55f75b09a0a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55f75b09a2b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b09a080 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55f75b09a060 <col:40> 'int' 2
| |-EnumConstantDecl 0x55f75b09a130 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55f75b09a2d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b09a110 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55f75b09a0f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55f75b09a1c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55f75b09a2e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b09a1a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55f75b09a180 <col:36> 'int' 7
| `-EnumConstantDecl 0x55f75b09a250 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55f75b09a300 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b09a230 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55f75b09a210 <col:34> 'int' 6
|-CXXMethodDecl 0x55f75b09a5b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55f75b09a328 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55f75b09a3c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55f75b09a448 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55f75b09a4c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55f75b0a1e68 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55f75b0a1e50 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55f75b0a1e38 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55f75b0a1e18 <col:98, col:105> 'String' (CXXTemporary 0x55f75b0a1e18)
|           `-CXXTemporaryObjectExpr 0x55f75b0a1de0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55f75b09a858 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55f75b09a688 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55f75b09a700 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55f75b09a778 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55f75b0a1f18 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55f75b0a1f00 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55f75b0a1ee8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55f75b0a1ec8 <col:94, col:101> 'String' (CXXTemporary 0x55f75b0a1ec8)
| |         `-CXXTemporaryObjectExpr 0x55f75b0a1e90 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55f75b0a2700 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55f75b0a2678 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55f75b0a2648 <col:9> '<bound member function type>' ->add_task_handlers 0x55f75b09a5b8
|     | `-CXXThisExpr 0x55f75b0a2638 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55f75b0a26b8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f75b0a25b8 <col:27> 'Task *' lvalue ParmVar 0x55f75b09a688 'task' 'Task *'
|     |-ImplicitCastExpr 0x55f75b0a26d0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f75b0a25d8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55f75b09a700 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55f75b0a26e8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55f75b0a25f8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55f75b09a250 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55f75b0a2618 <col:62> 'const String' lvalue ParmVar 0x55f75b09a778 'prefix' 'const String &'
|-CXXMethodDecl 0x55f75b09aa68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55f75b09a920 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55f75b09a998 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55f75b0a1fc8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55f75b0a1fb0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55f75b0a1f98 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55f75b0a1f78 <col:70, col:77> 'String' (CXXTemporary 0x55f75b0a1f78)
| |         `-CXXTemporaryObjectExpr 0x55f75b0a1f40 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55f75b0a28d8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55f75b0a2850 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55f75b0a2820 <col:9> '<bound member function type>' ->add_task_handlers 0x55f75b09a5b8
|     | `-CXXThisExpr 0x55f75b0a2810 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55f75b0a2890 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f75b0a2790 <col:27> 'Task *' lvalue ParmVar 0x55f75b09a920 'task' 'Task *'
|     |-ImplicitCastExpr 0x55f75b0a28a8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55f75b0a27b0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55f75b0a28c0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55f75b0a27d0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55f75b09a250 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55f75b0a27f0 <col:57> 'const String' lvalue ParmVar 0x55f75b09a998 'prefix' 'const String &'
|-CXXMethodDecl 0x55f75b09ad48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55f75b09ab30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09abb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09ac28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55f75b09aff8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55f75b09ae18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09ae98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09af18 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55f75b09b2e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55f75b09b0c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09b148 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09b1c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55f75b09b598 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55f75b09b3b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09b438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09b4b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55f75b09b848 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55f75b09b668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09b6e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09b768 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55f75b09baf8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55f75b09b918 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09b998 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09ba10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55f75b09bda8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55f75b09bbc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09bc48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09bcc8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55f75b09c0b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55f75b09bed0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09bf50 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09bfd0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55f75b09c398 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55f75b09c188 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09c208 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09c2b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55f75b09c678 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55f75b09c468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09c4e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09c590 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55f75b09c8e0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55f75b09c748 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55f75b09c7c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55f75b09c840 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55f75b09cb88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55f75b09c9b0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55f75b09ca30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55f75b09caa8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55f75b09ce38 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55f75b09cc58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09ccd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09cd58 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55f75b09d0e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55f75b09cf08 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09cf88 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09d000 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55f75b09d398 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55f75b09d1b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09d238 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09d2b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55f75b09d668 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55f75b09d468 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09d4e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55f75b09d588 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55f75b09d998 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55f75b09d738 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55f75b09d7b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55f75b09d830 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55f75b09d8a8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55f75b0a1fe0 <col:93> 'bool' false
|-CXXMethodDecl 0x55f75b09db80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55f75b09da68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55f75b09dae8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55f75b09dd58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55f75b09dc40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55f75b09dcc0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55f75b09e038 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55f75b09de18 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55f75b09de90 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55f75b09df10 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55f75b09df88 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b09e328 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55f75b09e108 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55f75b09e180 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55f75b09e200 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55f75b09e278 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b09e560 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55f75b09e400 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55f75b09e480 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55f75b09e748 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55f75b09e628 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55f75b09e6a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55f75b09e7f8 prev 0x55f75b095f98 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55f75b09e8f0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55f75b09e980 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55f75b09e9f8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55f75b09eab8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55f75b09eb80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55f75b09ecf8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55f75b09ec30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55f75b09eda0 <col:24>
| | `-OptimizeNoneAttr 0x55f75b09edf8 <col:34>
| |-CXXMethodDecl 0x55f75b09ee40 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55f75b09f0f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55f75b09eef0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55f75b09ef68 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55f75b09efe8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55f75b09f1b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55f75b09f1e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55f75b09f250 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55f75b09f2d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55f75b09f5f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55f75b09f390 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55f75b09f408 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55f75b09f480 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55f75b09f500 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55f75b09f710 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55f75b0a6078 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55f75b0a6078
| | `-ParmVarDecl 0x55f75b0a6188 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55f75b0a6228 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55f75b0a6228
| | `-ParmVarDecl 0x55f75b0a6338 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55f75b160710 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55f75b09f788 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55f75b09f828 <col:38> "" ""
|-CXXMethodDecl 0x55f75b09f8b8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55f75b09f958 <col:44> "" ""
|-AccessSpecDecl 0x55f75b09f9c8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55f75b09f9f0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55f75b09faf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55f75b09fb40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b09fad0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55f75b09fab0 <col:27> 'int' 4
|-FieldDecl 0x55f75b09fbf8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55f75b09fda8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55f75b09fe60 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55f75b09fee0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55f75b09ff48 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55f75b0a0098 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55f75b09ffd8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55f75b0a0248 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55f75b0a0158 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55f75b0a0428 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55f75b0a0308 <col:20> col:23 'int'
| `-ParmVarDecl 0x55f75b0a0388 <col:25> col:28 'int'
|-CXXMethodDecl 0x55f75b0a06d0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b0a04f0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55f75b0a0570 <col:28> col:31 'int'
| `-ParmVarDecl 0x55f75b0a05e8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55f75b0a0788 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55f75b0a0850 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55f75b0a08a0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55f75b0a08f0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55f75b0a0ad0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55f75b0a0980 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55f75b0a09f8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b0a0d78 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55f75b0a0b98 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55f75b0a0c18 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55f75b0a0c90 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b0a0f98 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55f75b0a0e48 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55f75b0a0ec8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55f75b0a12d0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55f75b0a1058 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55f75b0a10d8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55f75b0a1150 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55f75b0a11d0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55f75b0a14b8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55f75b0a13a0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55f75b0a1420 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55f75b0a1608 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55f75b0a1578 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55f75b0a1988 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55f75b0a16c8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55f75b0a1748 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55f75b0a17c0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55f75b0a1840 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55f75b0a1aa0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StaticSwitch
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   int _output
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b0a91e8 <../elements/standard/staticswitch.hh:24:1, line:40:1> line:24:7 class StaticSwitch definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55f75b0a9348 <col:1, col:7> col:7 implicit referenced class StaticSwitch
|-FieldDecl 0x55f75b0a93f0 <line:26:3, col:7> col:7 _output 'int'
|-AccessSpecDecl 0x55f75b0a9440 <line:28:2, col:8> col:2 public
|-CXXConstructorDecl 0x55f75b0a94d0 <line:30:3, col:16> col:3 StaticSwitch 'void ()'
|-CXXMethodDecl 0x55f75b0a95d0 <line:32:3, col:59> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55f75b092f48 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55f75b0aa490 <col:34, col:59>
|   `-ReturnStmt 0x55f75b0aa480 <col:36, col:43>
|     `-ImplicitCastExpr 0x55f75b0aa468 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55f75b0aa440 <col:43> 'const char [13]' lvalue "StaticSwitch"
|-CXXMethodDecl 0x55f75b0a9698 <line:33:3, col:50> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55f75b093010 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55f75b0aa4f0 <col:34, col:50>
|   `-ReturnStmt 0x55f75b0aa4e0 <col:36, col:43>
|     `-ImplicitCastExpr 0x55f75b0aa4c8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55f75b0aa4a8 <col:43> 'const char [4]' lvalue "1/-"
|-CXXMethodDecl 0x55f75b0a9760 <line:34:3, col:49> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55f75b0933d8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55f75b0aa550 <col:34, col:49>
|   `-ReturnStmt 0x55f75b0aa540 <col:36, col:43>
|     `-ImplicitCastExpr 0x55f75b0aa528 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55f75b0aa508 <col:43> 'const char []' lvalue Var 0x55f75b093520 'PUSH' 'const char []'
|-CXXMethodDecl 0x55f75b0a9a30 <line:36:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55f75b0947e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55f75b0a98e0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55f75b0a9958 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55f75b0a9c08 <line:38:3, col:26> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55f75b091db8 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55f75b0a9af8 <col:13> col:16 'int'
| `-ParmVarDecl 0x55f75b0a9b70 <col:18, col:25> col:26 'Packet *'
|-CXXConstructorDecl 0x55f75b0a9ce8 <line:24:7> col:7 implicit StaticSwitch 'void (const StaticSwitch &)' inline default_delete noexcept-unevaluated 0x55f75b0a9ce8
| `-ParmVarDecl 0x55f75b0a9df8 <col:7> col:7 'const StaticSwitch &'
|-CXXConstructorDecl 0x55f75b0a9e98 <col:7> col:7 implicit StaticSwitch 'void (StaticSwitch &&)' inline default_delete noexcept-unevaluated 0x55f75b0a9e98
| `-ParmVarDecl 0x55f75b0a9fa8 <col:7> col:7 'StaticSwitch &&'
|-CXXMethodDecl 0x55f75b0aa048 <col:7> col:7 implicit operator= 'StaticSwitch &(const StaticSwitch &)' inline default_delete noexcept-unevaluated 0x55f75b0aa048
| `-ParmVarDecl 0x55f75b0aa158 <col:7> col:7 'const StaticSwitch &'
|-CXXMethodDecl 0x55f75b0aa1c8 <col:7> col:7 implicit operator= 'StaticSwitch &(StaticSwitch &&)' inline default_delete noexcept-unevaluated 0x55f75b0aa1c8
| `-ParmVarDecl 0x55f75b0aa2d8 <col:7> col:7 'StaticSwitch &&'
`-CXXDestructorDecl 0x55f75b0aa360 <col:7> col:7 implicit ~StaticSwitch 'void ()' inline default noexcept-unevaluated 0x55f75b0aa360
  `-Overrides: [ 0x55f75b091ae8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.StaticSwitch = type { %class.Element.base, i32 }
  NonVirtualBaseLLVMType:%class.StaticSwitch = type { %class.Element.base, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75ae62720 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55f75ae62838 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55f75ae628d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55f75ae62938 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55f75ae62998 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55f75ae62a48 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75ae62d50 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75ae62e68 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55f75ae62f10 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55f75ae62f78 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55f75ae63008 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55f75ae690a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55f75ae694d8 <col:12>
|-CXXConstructorDecl 0x55f75ae691a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55f75ae692b8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55f75ae62f10 'data' 'const char *'
| | `-ImplicitCastExpr 0x55f75ae6ba60 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55f75ae6ba30 <col:12> 'const char *const' lvalue .data 0x55f75ae62f10
| |     `-DeclRefExpr 0x55f75ae6ba10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae692b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55f75ae62f78 'length' 'int'
| | `-ImplicitCastExpr 0x55f75ae6baf0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55f75ae6bac0 <col:12> 'const int' lvalue .length 0x55f75ae62f78
| |     `-DeclRefExpr 0x55f75ae6baa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae692b8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55f75ae63008 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55f75ae6bb80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55f75ae6bb50 <col:12> 'String::memo_t *const' lvalue .memo 0x55f75ae63008
| |     `-DeclRefExpr 0x55f75ae6bb30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae692b8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55f75ae6bbd8 <col:12>
|-CXXConstructorDecl 0x55f75ae69358 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55f75ae69358
| `-ParmVarDecl 0x55f75ae69468 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55f75ae6e9c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55f75ae7a3d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55f75ae7a4e8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55f75ae7aa00 <col:12>
|   |-BinaryOperator 0x55f75ae7a818 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55f75ae7a7d0 <col:12> 'const char *' lvalue ->data 0x55f75ae62f10
|   | | `-CXXThisExpr 0x55f75ae7a7c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55f75ae7a800 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55f75ae7a790 <col:12> 'const char *const' lvalue .data 0x55f75ae62f10
|   |     `-DeclRefExpr 0x55f75ae7a770 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae7a4e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55f75ae7a8e0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55f75ae7a898 <col:12> 'int' lvalue ->length 0x55f75ae62f78
|   | | `-CXXThisExpr 0x55f75ae7a888 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55f75ae7a8c8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55f75ae7a858 <col:12> 'const int' lvalue .length 0x55f75ae62f78
|   |     `-DeclRefExpr 0x55f75ae7a838 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae7a4e8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55f75ae7a9a8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55f75ae7a960 <col:12> 'String::memo_t *' lvalue ->memo 0x55f75ae63008
|   | | `-CXXThisExpr 0x55f75ae7a950 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55f75ae7a990 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55f75ae7a920 <col:12> 'String::memo_t *const' lvalue .memo 0x55f75ae63008
|   |     `-DeclRefExpr 0x55f75ae7a900 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae7a4e8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55f75ae7a9f0 <col:12>
|     `-UnaryOperator 0x55f75ae7a9d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75ae7a9c8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55f75ae7a558 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55f75ae7a558
  `-ParmVarDecl 0x55f75ae7a668 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75ae59c90 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55f75ae59da8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55f75ae59e38 <col:16, col:22> col:16 public
|-TypedefDecl 0x55f75ae59e78 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55f75ab2ddc0 'const char *'
|   `-QualType 0x55f75ab2d311 'const char' const
|     `-BuiltinType 0x55f75ab2d310 'char'
|-TypedefDecl 0x55f75ae59f00 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55f75ae59ed0 'String::const_iterator' sugar
|   |-Typedef 0x55f75ae59e78 'const_iterator'
|   `-PointerType 0x55f75ab2ddc0 'const char *'
|     `-QualType 0x55f75ab2d311 'const char' const
|       `-BuiltinType 0x55f75ab2d310 'char'
|-TypedefDecl 0x55f75ae5a070 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55f75ae59fe0 'int (String::*)() const'
|   |-RecordType 0x55f75ae59d20 'String'
|   | `-CXXRecord 0x55f75ae59c90 'String'
|   `-ParenType 0x55f75ae59f80 'int () const' sugar
|     `-FunctionProtoType 0x55f75ae2db10 'int () const' const cdecl
|       `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75ae5a0d8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55f75ac82090 'int64_t' sugar
|   |-Typedef 0x55f75ab962d0 'int64_t'
|   `-TypedefType 0x55f75ab6f4d0 '__int64_t' sugar
|     |-Typedef 0x55f75ab6f0a8 '__int64_t'
|     `-BuiltinType 0x55f75ab2d390 'long'
|-TypedefDecl 0x55f75ae5a140 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55f75ac81fb0 'uint64_t' sugar
|   |-Typedef 0x55f75ab96470 'uint64_t'
|   `-TypedefType 0x55f75ab6f560 '__uint64_t' sugar
|     |-Typedef 0x55f75ab6f118 '__uint64_t'
|     `-BuiltinType 0x55f75ab2d430 'unsigned long'
|-TypedefDecl 0x55f75ae5a1d0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55f75ae5a1a0 'String::intmax_t' sugar
|   |-Typedef 0x55f75ae5a0d8 'intmax_t'
|   `-TypedefType 0x55f75ac82090 'int64_t' sugar
|     |-Typedef 0x55f75ab962d0 'int64_t'
|     `-TypedefType 0x55f75ab6f4d0 '__int64_t' sugar
|       |-Typedef 0x55f75ab6f0a8 '__int64_t'
|       `-BuiltinType 0x55f75ab2d390 'long'
|-TypedefDecl 0x55f75ae5a260 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55f75ae5a230 'String::uintmax_t' sugar
|   |-Typedef 0x55f75ae5a140 'uintmax_t'
|   `-TypedefType 0x55f75ac81fb0 'uint64_t' sugar
|     |-Typedef 0x55f75ab96470 'uint64_t'
|     `-TypedefType 0x55f75ab6f560 '__uint64_t' sugar
|       |-Typedef 0x55f75ab6f118 '__uint64_t'
|       `-BuiltinType 0x55f75ab2d430 'unsigned long'
|-CXXConstructorDecl 0x55f75ae5a320 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55f75ae5a4c8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55f75ae5a408 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55f75ae5a678 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55f75ae5a5b8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55f75ae5a7d0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55f75ae5a740 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55f75ae5a9e8 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55f75ae5a898 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55f75ae5a918 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55f75ae5ac08 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55f75ae5aab8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55f75ae5ab38 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55f75ae5ae28 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55f75ae5acd8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55f75ae5ad58 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55f75ae5b048 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55f75ae5aef8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55f75ae5af78 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55f75ae5b1d8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55f75ae5b110 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55f75ae5b358 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55f75ae5b298 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55f75ae5b4e8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55f75ae5b420 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55f75ae5b640 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55f75ae5b5b0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55f75ae5b798 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55f75ae5b708 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55f75ae5b8f0 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55f75ae5b860 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55f75ae5ba78 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55f75ae5b9b8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55f75ae5bc08 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55f75ae5bb40 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55f75ae5bd98 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55f75ae5bcd0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55f75ae5bf28 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55f75ae5be60 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55f75ae5c020 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55f75ae5c148 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55f75ae5c2c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55f75ae5c200 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55f75ae5c418 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55f75ae5c388 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55f75ae5c4d0 <col:63> "" ""
|-CXXMethodDecl 0x55f75ae5c618 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55f75ae5c558 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55f75ae5c828 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55f75ae5c6d8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55f75ae5c758 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55f75ae5ca48 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55f75ae5c8f0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55f75ae5c970 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55f75ae5cd28 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55f75ae5cb08 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55f75ae5cb88 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55f75ae68b70 <col:55> 'int' 10
| `-ParmVarDecl 0x55f75ae5cc00 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55f75ae68b90 <col:76> 'bool' true
|-CXXMethodDecl 0x55f75ae5d008 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55f75ae5cdf0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55f75ae5ce70 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55f75ae68ba0 <col:56> 'int' 10
| `-ParmVarDecl 0x55f75ae5cee8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55f75ae68bc0 <col:77> 'bool' true
|-CXXMethodDecl 0x55f75ae5d110 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55f75ae5d1d8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55f75ae5d2a0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55f75ae5d340 <col:20>
| `-OptimizeNoneAttr 0x55f75ae5d398 <col:30>
|-CXXConversionDecl 0x55f75ae5d488 <line:83:5, col:45> col:12 referenced operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55f75ae5d558 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55f75ae5d618 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55f75ae5d708 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55f75ae5d7c8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55f75ae5d948 <line:90:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55f75ae5d880 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55f75ae5da98 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55f75ae5da08 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55f75ae5db88 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55f75ae5dc48 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55f75ae5de98 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55f75ae5dd00 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55f75ae5dd80 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55f75ae5e0f8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55f75ae5df60 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55f75ae5dfe0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55f75ae5e1c8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75ae5e3d8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55f75ae5e280 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55f75ae5e300 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55f75ae5e5f8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55f75ae5e4a0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55f75ae5e520 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55f75ae5e788 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55f75ae5e6c0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55f75ae5e878 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55f75ae5e9e8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55f75ae5e928 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55f75ae5ebf8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55f75ae5eaa8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55f75ae5eb28 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55f75ae5ee10 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55f75ae5ecb8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55f75ae5ed30 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55f75ae5efa0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55f75ae5eed0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55f75ae5f1c0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55f75ae5f060 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55f75ae5f0e0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55f75ae5f310 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55f75ae5f280 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55f75ae5f4e8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55f75ae5f3d0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55f75ae5f450 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55f75ae5f638 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55f75ae5f5a8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55f75ae5f850 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55f75ae5f6f0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55f75ae5f770 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55f75ae68bd0 <col:39> 'int' 0
|-CXXMethodDecl 0x55f75ae5fa70 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55f75ae5f910 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55f75ae5f990 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55f75ae68bf0 <col:48> 'int' 0
|-CXXMethodDecl 0x55f75ae5fc50 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55f75ae5fb30 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55f75ae5fbb0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55f75ae68c10 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55f75ae5fd20 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55f75ae5fde0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55f75ae5fea0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55f75ae5ff60 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55f75ae60020 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55f75ae601c8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55f75ae600d0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55f75ae60348 <line:137:5, col:40> col:20 operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55f75ae60280 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55f75ae60520 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55f75ae60408 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55f75ae60698 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55f75ae605d8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55f75ae607e0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55f75ae60750 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55f75ae60930 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55f75ae608a0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55f75ae60b08 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55f75ae609f0 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55f75ae60a70 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55f75ae60ce8 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55f75ae60bd0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55f75ae60c50 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55f75ae60e38 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55f75ae60da8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55f75ae61048 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55f75ae60ef8 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55f75ae60f78 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55f75ae611a8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55f75ae61110 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55f75ae61300 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55f75ae61268 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55f75ae613a8 <col:57> "" ""
|-CXXMethodDecl 0x55f75ae614b8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55f75ae61428 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55f75ae61608 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55f75ae61578 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55f75ae61788 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55f75ae616c0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55f75ae61850 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55f75ae61910 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55f75ae619d0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55f75ae61a70 <col:49> "" ""
|-CXXMethodDecl 0x55f75ae61b00 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55f75ae61bc0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55f75ae61cb0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55f75ae61d78 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55f75ae61e38 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55f75ae61ef8 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55f75ae61ff0 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55f75ae620b8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55f75ae62180 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55f75ae62358 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55f75ae62238 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55f75ae622b8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55f75ae62580 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55f75ae62420 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55f75ae624a0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55f75ae62690 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55f75ae626f8 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55f75ae62720 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55f75ae62838 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55f75ae628d8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55f75ae62938 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55f75ae62998 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55f75ae62a48 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55f75ae62ab0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55f75ae62ce8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55f75ae62d38 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75ae62cc8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55f75ae62bd8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55f75ae62b80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55f75ae62bc0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55f75ae62ba0 <col:32> 'int' 8
|-CXXRecordDecl 0x55f75ae62d50 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55f75ae62e68 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55f75ae62f10 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55f75ae62f78 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55f75ae63008 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55f75ae690a0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55f75ae694d8 <col:12>
| |-CXXConstructorDecl 0x55f75ae691a8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55f75ae692b8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55f75ae62f10 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55f75ae6ba60 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55f75ae6ba30 <col:12> 'const char *const' lvalue .data 0x55f75ae62f10
| | |     `-DeclRefExpr 0x55f75ae6ba10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae692b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55f75ae62f78 'length' 'int'
| | | `-ImplicitCastExpr 0x55f75ae6baf0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55f75ae6bac0 <col:12> 'const int' lvalue .length 0x55f75ae62f78
| | |     `-DeclRefExpr 0x55f75ae6baa0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae692b8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55f75ae63008 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55f75ae6bb80 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55f75ae6bb50 <col:12> 'String::memo_t *const' lvalue .memo 0x55f75ae63008
| | |     `-DeclRefExpr 0x55f75ae6bb30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae692b8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55f75ae6bbd8 <col:12>
| |-CXXConstructorDecl 0x55f75ae69358 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55f75ae69358
| | `-ParmVarDecl 0x55f75ae69468 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55f75ae6e9c0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55f75ae7a3d8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55f75ae7a4e8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55f75ae7aa00 <col:12>
| |   |-BinaryOperator 0x55f75ae7a818 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55f75ae7a7d0 <col:12> 'const char *' lvalue ->data 0x55f75ae62f10
| |   | | `-CXXThisExpr 0x55f75ae7a7c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55f75ae7a800 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55f75ae7a790 <col:12> 'const char *const' lvalue .data 0x55f75ae62f10
| |   |     `-DeclRefExpr 0x55f75ae7a770 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae7a4e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55f75ae7a8e0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55f75ae7a898 <col:12> 'int' lvalue ->length 0x55f75ae62f78
| |   | | `-CXXThisExpr 0x55f75ae7a888 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55f75ae7a8c8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55f75ae7a858 <col:12> 'const int' lvalue .length 0x55f75ae62f78
| |   |     `-DeclRefExpr 0x55f75ae7a838 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae7a4e8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55f75ae7a9a8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55f75ae7a960 <col:12> 'String::memo_t *' lvalue ->memo 0x55f75ae63008
| |   | | `-CXXThisExpr 0x55f75ae7a950 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55f75ae7a990 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55f75ae7a920 <col:12> 'String::memo_t *const' lvalue .memo 0x55f75ae63008
| |   |     `-DeclRefExpr 0x55f75ae7a900 <col:12> 'const String::rep_t' lvalue ParmVar 0x55f75ae7a4e8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55f75ae7a9f0 <col:12>
| |     `-UnaryOperator 0x55f75ae7a9d8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55f75ae7a9c8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55f75ae7a558 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55f75ae7a558
|   `-ParmVarDecl 0x55f75ae7a668 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55f75ae63080 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55f75ae632c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55f75ae630e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55f75ae63168 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55f75ae631e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55f75ae69060 <col:79, line:261:5>
|   |-BinaryOperator 0x55f75ae68cd8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55f75ae68c70 <col:2, col:5> 'const char *' lvalue .data 0x55f75ae62f10
|   | | `-MemberExpr 0x55f75ae68c40 <col:2> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|   | |   `-CXXThisExpr 0x55f75ae68c30 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55f75ae68cc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55f75ae68ca0 <col:12> 'const char *' lvalue ParmVar 0x55f75ae630e8 'data' 'const char *'
|   |-BinaryOperator 0x55f75ae68da0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55f75ae68d38 <col:2, col:5> 'int' lvalue .length 0x55f75ae62f78
|   | | `-MemberExpr 0x55f75ae68d08 <col:2> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|   | |   `-CXXThisExpr 0x55f75ae68cf8 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55f75ae68d88 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55f75ae68d68 <col:14> 'int' lvalue ParmVar 0x55f75ae63168 'length' 'int'
|   `-IfStmt 0x55f75ae69048 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55f75ae68ec0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55f75ae68ea8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55f75ae68e88 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55f75ae68e68 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55f75ae68e00 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|     |       | `-MemberExpr 0x55f75ae68dd0 <col:7> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|     |       |   `-CXXThisExpr 0x55f75ae68dc0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55f75ae68e50 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55f75ae68e30 <col:17> 'String::memo_t *' lvalue ParmVar 0x55f75ae631e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55f75ae69020 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55f75ae69008 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55f75ae68f10 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55f75ae51cf8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55f75ae68f78 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55f75ae628d8
|         `-ImplicitCastExpr 0x55f75ae68f60 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55f75ae68f40 <col:27> 'String::memo_t *' lvalue ParmVar 0x55f75ae631e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55f75ae63578 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55f75ae63398 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55f75ae63418 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55f75ae63490 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55f75ae63080 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55f75ae694e8 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55f75ae69678 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55f75ae695e0 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55f75ae69550 <col:2> '<bound member function type>' ->assign_memo 0x55f75ae632c8
|     | `-ImplicitCastExpr 0x55f75ae69618 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55f75ae69540 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55f75ae69630 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55f75ae69580 <col:14> 'const char *' lvalue ParmVar 0x55f75ae63398 'data' 'const char *'
|     |-ImplicitCastExpr 0x55f75ae69648 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55f75ae695a0 <col:20> 'int' lvalue ParmVar 0x55f75ae63418 'length' 'int'
|     `-ImplicitCastExpr 0x55f75ae69660 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55f75ae695c0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55f75ae63490 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55f75ae63708 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55f75ae63648 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55f75ae698d0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55f75ae69850 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55f75ae696a0 <col:2> '<bound member function type>' ->assign_memo 0x55f75ae632c8
|     | `-CXXThisExpr 0x55f75ae69690 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55f75ae69888 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55f75ae69720 <col:14, col:19> 'const char *' lvalue .data 0x55f75ae62f10
|     |   `-MemberExpr 0x55f75ae696f0 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55f75ae63080
|     |     `-DeclRefExpr 0x55f75ae696d0 <col:14> 'const String' lvalue ParmVar 0x55f75ae63648 'x' 'const String &'
|     |-ImplicitCastExpr 0x55f75ae698a0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55f75ae697a0 <col:25, col:30> 'int' lvalue .length 0x55f75ae62f78
|     |   `-MemberExpr 0x55f75ae69770 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55f75ae63080
|     |     `-DeclRefExpr 0x55f75ae69750 <col:25> 'const String' lvalue ParmVar 0x55f75ae63648 'x' 'const String &'
|     `-ImplicitCastExpr 0x55f75ae698b8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55f75ae69820 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|         `-MemberExpr 0x55f75ae697f0 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55f75ae63080
|           `-DeclRefExpr 0x55f75ae697d0 <col:38> 'const String' lvalue ParmVar 0x55f75ae63648 'x' 'const String &'
|-CXXMethodDecl 0x55f75ae637d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55f75ae6a290 <col:31, line:278:5>
|   `-IfStmt 0x55f75ae6a278 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55f75ae69970 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55f75ae69958 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55f75ae69928 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|     |     `-MemberExpr 0x55f75ae698f8 <col:6> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|     |       `-CXXThisExpr 0x55f75ae698e8 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55f75ae6a250 <col:15, line:277:2>
|       |-ParenExpr 0x55f75ae69e20 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55f75ae69df0 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55f75ae69a80 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55f75ae69a68 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55f75ae69a50 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55f75ae69a10 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55f75ae628d8
|       |   |       `-ImplicitCastExpr 0x55f75ae699f8 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55f75ae699c8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|       |   |           `-MemberExpr 0x55f75ae69998 <col:27> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|       |   |             `-CXXThisExpr 0x55f75ae69988 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55f75ae69ae0 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55f75ae69ac0 <col:54> 'int' 0
|       |   `-CallExpr 0x55f75ae69d50 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55f75ae69d38 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55f75ae69cb8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55f75ae69d90 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55f75ae69bc8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55f75ae69da8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55f75ae69bf8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55f75ae69dc0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55f75ae69c30 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55f75ae69dd8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55f75ae69ca0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55f75ae69c88 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55f75ae69c50 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55f75ae6a170 <line:274:6, line:275:22>
|       | |-CallExpr 0x55f75ae6a030 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55f75ae6a018 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55f75ae69f90 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55f75ae53140 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55f75ae69f60 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55f75ae628d8
|       | |   `-ImplicitCastExpr 0x55f75ae69f48 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55f75ae69f18 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|       | |       `-MemberExpr 0x55f75ae69ee8 <col:40> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|       | |         `-CXXThisExpr 0x55f75ae69ed8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55f75ae6a130 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55f75ae6a118 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55f75ae6a058 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55f75ae67fb0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55f75ae6a158 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55f75ae6a0b8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|       |       `-MemberExpr 0x55f75ae6a088 <col:15> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|       |         `-CXXThisExpr 0x55f75ae6a078 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55f75ae6a230 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55f75ae6a1c8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55f75ae63008
|         | `-MemberExpr 0x55f75ae6a198 <col:6> 'String::rep_t' lvalue ->_r 0x55f75ae63080
|         |   `-CXXThisExpr 0x55f75ae6a188 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55f75ae6a218 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55f75ae6a1f8 <col:16> 'int' 0
|-CXXMethodDecl 0x55f75ae63a68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55f75ae63888 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55f75ae63908 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55f75ae63980 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55f75ae63b40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55f75ae63d90 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55f75ae63bf8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55f75ae63c78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55f75ae63cf0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55f75ae63f78 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55f75ae63e60 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55f75ae63ee0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55f75ae64078 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55f75ae6a368 <col:41, line:286:5>
|   `-ReturnStmt 0x55f75ae6a358 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55f75ae6a328 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55f75ae6a2f0 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55f75ae6a2d8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55f75ae6a2b8 <col:46> 'int' 1
|-CXXMethodDecl 0x55f75ae64318 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55f75ae64130 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55f75ae641b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55f75ae64230 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55f75ae67fb0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55f75ae643e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55f75ae68080 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55f75ae68250 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55f75ae68138 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55f75ae681b8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55f75ae68310 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55f75ae683d8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55f75ae684d8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55f75ae68550 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55f75ae685c8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55f75ae68630 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55f75ae68730 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55f75ae68780 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75ae68710 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55f75ae686f0 <col:22> 'int' 14
|-CXXMethodDecl 0x55f75ae68998 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55f75ae687b0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55f75ae68830 <col:38> col:41 'int'
| `-ParmVarDecl 0x55f75ae688b0 <col:43> col:46 'int'
|-FriendDecl 0x55f75ae68aa0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55f75ae68b30 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55f75af2a8d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55f75af2aaa8 prev 0x55f75af2a8d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55f75af2ab38 <col:46, col:52> col:46 public
|-TypedefDecl 0x55f75af2ab60 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75af2c4c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55f75af2c470 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55f75af2c450 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55f75af2ad78 'type'
|     `-SubstTemplateTypeParmType 0x55f75af2ad40 'String' sugar
|       |-TemplateTypeParmType 0x55f75ae1d530 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae1d4e0 'T'
|       `-RecordType 0x55f75ae59d20 'String'
|         `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75af2c578 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55f75af2c540 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55f75af2c520 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55f75af2c4c0 'type'
|     `-ElaboratedType 0x55f75af2c470 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55f75af2c450 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55f75af2ad78 'type'
|         `-SubstTemplateTypeParmType 0x55f75af2ad40 'String' sugar
|           |-TemplateTypeParmType 0x55f75ae1d530 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55f75ae1d4e0 'T'
|           `-RecordType 0x55f75ae59d20 'String'
|             `-CXXRecord 0x55f75ae59c90 'String'
|-CXXMethodDecl 0x55f75af2c6f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55f75af2c608 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55f75af2c7e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55f75af2c8c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55f75af2c8c8
|-CXXMethodDecl 0x55f75af2cb98 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55f75af2caa0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55f75af2cdd8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55f75af2cc50 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55f75af2ccc8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75af2cfa8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55f75af2ce98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55f75af2cf10 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75b0d7390 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55f75b0d7460 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55f75b0d76a8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55f75b0d7520 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55f75b0d7598 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75b0d7908 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55f75b0d7778 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55f75b0d77f0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75b0d7ac8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55f75b0d79d8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75b0d7c88 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55f75b0d7b90 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75b0d7d40 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55f75b0d7df0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55f75b0d8028 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55f75b0d7ea0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55f75b0d7f18 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55f75b0d82c8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55f75b0d81d0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55f75b0d8390 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55f75b0d83e0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55f75b0d8430 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55f75b094450 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55f75af29338 prev 0x55f75b094450 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55f75af2a840 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55f75af2a7f0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55f75af2a7d0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55f75af2a680 'type'
|     `-SubstTemplateTypeParmType 0x55f75af2a510 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55f75adf32e0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55f75adf3288 'F'
|       `-RecordType 0x55f75af2a170 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55f75af2a090 'typed_array_memory'
|-FieldDecl 0x55f75b0d8480 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55f75b0d84d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55f75b0d8508 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|   |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|   `-RecordType 0x55f75ae59d20 'String'
|     `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d8598 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55f75b0d8560 'String &'
|   `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|     |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|     `-RecordType 0x55f75ae59d20 'String'
|       `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d8628 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55f75b0d85f0 'const String &'
|   `-QualType 0x55f75af293d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-RecordType 0x55f75ae59d20 'String'
|         `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d86b8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55f75b0d8680 'String *'
|   `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|     |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|     `-RecordType 0x55f75ae59d20 'String'
|       `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d8748 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55f75b0d8710 'const String *'
|   `-QualType 0x55f75af293d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-RecordType 0x55f75ae59d20 'String'
|         `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d93a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55f75b0d9350 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55f75b0d9330 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55f75b0d9268 'type'
|     `-LValueReferenceType 0x55f75b0d9230 'const String &'
|       `-QualType 0x55f75b0d8fd1 'const String' const
|         `-SubstTemplateTypeParmType 0x55f75b0d8fd0 'String' sugar
|           |-TemplateTypeParmType 0x55f75adfd230 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55f75adfd1d8 'T'
|           `-RecordType 0x55f75ae59d20 'String'
|             `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d9408 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55f75b0d85f0 'const String &'
|   `-QualType 0x55f75af293d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-RecordType 0x55f75ae59d20 'String'
|         `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d9460 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b0d94c8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55f75b0d8680 'String *'
|   `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|     |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|     `-RecordType 0x55f75ae59d20 'String'
|       `-CXXRecord 0x55f75ae59c90 'String'
|-TypedefDecl 0x55f75b0d9530 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55f75b0d8710 'const String *'
|   `-QualType 0x55f75af293d1 'const String' const
|     `-SubstTemplateTypeParmType 0x55f75af293d0 'String' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-RecordType 0x55f75ae59d20 'String'
|         `-CXXRecord 0x55f75ae59c90 'String'
|-EnumDecl 0x55f75b0d9588 <line:134:5> col:5
| `-EnumConstantDecl 0x55f75b0d9680 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55f75b0d9660 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55f75ae2bed8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55f75ae2beb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55f75ae2be90 <col:40> 'int' 1
|-CXXConstructorDecl 0x55f75b0d9708 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55f75b0d9998 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b0d97c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55f75b0d9860 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55f75b0d9c28 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55f75b0d9b10 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55f75b0d9ee8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55f75b0d9dd0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55f75b0da200 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55f75b0da0e0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55f75b0da510 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55f75b0da3f0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55f75b0da800 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b0da648 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55f75b0da6c0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55f75b0da928 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55f75b0da9d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b0daa30 <col:30> Inherited
|-CXXMethodDecl 0x55f75b0daa78 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55f75b0dab28 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b0dab80 <col:30> Inherited
|-CXXMethodDecl 0x55f75b0dac48 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55f75b0dacf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b0dad50 <col:30> Inherited
|-CXXMethodDecl 0x55f75b0dad98 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55f75b0dae48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b0daea0 <col:30> Inherited
|-CXXMethodDecl 0x55f75b0daee8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55f75b0daf98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b0daff0 <col:30> Inherited
|-CXXMethodDecl 0x55f75b0db038 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55f75b0db0e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b0db140 <col:30> Inherited
|-CXXMethodDecl 0x55f75b0db168 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55f75b0db218 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55f75b0db2c8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55f75b0db488 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b0db378 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55f75b0db3f0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55f75b0db5d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55f75b0db548 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b0db788 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55f75b0db690 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55f75b0db840 <col:20>
| `-OptimizeNoneAttr 0x55f75b0db898 <col:30>
|-CXXMethodDecl 0x55f75b0db9b8 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55f75b0db8c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55f75b0dba70 <col:20>
| `-OptimizeNoneAttr 0x55f75b0dbac8 <col:30>
|-CXXMethodDecl 0x55f75b0dbb80 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55f75b0dbaf0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b0dbcc8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55f75b0dbc38 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b0dbdf8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55f75b0dbef8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55f75b0dbfc8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55f75b0dc098 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55f75b0dc1d8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55f75b0dc148 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b0dc320 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55f75b0dc290 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b0dc468 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55f75b0dc3d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55f75b0dc520 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55f75b0dc620 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55f75b0dc590 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55f75b0dc6d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55f75b0dc798 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55f75b0dc898 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55f75b0dca18 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55f75b0dc958 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55f75b0dd1d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55f75b0dcad0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55f75b0dd138 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55f75b0dd038 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55f75b0dd2b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55f75b0dd408 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55f75b0dd378 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55f75b0dd4c0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55f75b0dd708 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b0dd580 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55f75b0dd5f8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55f75b0dd898 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55f75b0dd7d8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55f75b0ddaa8 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55f75b0dd960 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55f75b0dd9d8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55f75b0ddb68 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55f75b0dddc8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55f75b0ddcd0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55f75b0dde98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55f75b0dde98

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b00f128 prev 0x55f75b053f68 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75b00f220 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55f75b00f2b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55f75b00f3e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55f75b00f2e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55f75b010810 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b0107f0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55f75b010388 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55f75b0108a0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55f75b010860 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55f75b00f2e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55f75b0103f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55f75b010920 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b0108e0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55f75b010450 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55f75b010960 <col:54> 'bool' false
| `-CompoundStmt 0x55f75b010a68 <col:61, line:38:5>
|   `-BinaryOperator 0x55f75b010a48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55f75b0109e0 <col:9> 'const Element *' lvalue ->_context 0x55f75b010328
|     | `-CXXThisExpr 0x55f75b0109d0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55f75b010a30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55f75b010a10 <col:20> 'int' 0
|-CXXConstructorDecl 0x55f75b00f5f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b00f4a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55f75b00f520 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55f75b010848 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b010828 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55f75b010328 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55f75b010ac0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55f75b010a80 <col:20> 'const Element *' lvalue ParmVar 0x55f75b00f4a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55f75b010388 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55f75b010b40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55f75b010b00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55f75b00f520 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55f75b0103f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55f75b010bc0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55f75b010b80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55f75b010450 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55f75b010c00 <col:73> 'bool' false
| `-CompoundStmt 0x55f75b010c78 <col:80, line:46:5>
|-CXXMethodDecl 0x55f75b00f728 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55f75b010cf0 <col:36, line:51:5>
|   `-ReturnStmt 0x55f75b010ce0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55f75b010cc8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55f75b010c98 <col:16> 'const Element *const' lvalue ->_context 0x55f75b010328
|         `-CXXThisExpr 0x55f75b010c88 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55f75b00f818 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55f75b010d70 <col:32, line:57:5>
|   `-ReturnStmt 0x55f75b010d60 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55f75b010d48 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55f75b010d18 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55f75b010388
|         `-CXXThisExpr 0x55f75b010d08 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55f75b00f8d8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55f75b00fa60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55f75b00f990 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55f75b00fbb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55f75b00fb20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55f75b00fd00 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55f75b00fc70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55f75b00ff08 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55f75b00fdb8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55f75b00fe30 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55f75b010238 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55f75b00ffc8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55f75b010048 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55f75b010110 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55f75b0102f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55f75b010328 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55f75b010388 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55f75b0103f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55f75b010450 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55f75b0104a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55f75b0104a0
| `-ParmVarDecl 0x55f75b0105b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55f75b010658 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55f75b010658
| `-ParmVarDecl 0x55f75b010768 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55f75b160f28 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55f75b11be20 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55f75b11bff8 prev 0x55f75b11be20 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55f75b11c088 <col:46, col:52> col:46 public
|-TypedefDecl 0x55f75b11c0b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b11dc80 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55f75b11dc30 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55f75b11c560 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55f75b11c460 'type'
|     `-TemplateSpecializationType 0x55f75b11c3f0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55f75b11c2d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55f75b11c2b0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55f75b11c290 <col:24> 'unsigned long' 4
|       `-RecordType 0x55f75b11c3d0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55f75b11c2f0 'char_array'
|-TypedefDecl 0x55f75b11dd38 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55f75b11dd00 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55f75b11dce0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55f75b11dc80 'type'
|     `-ElaboratedType 0x55f75b11dc30 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55f75b11c560 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55f75b11c460 'type'
|         `-TemplateSpecializationType 0x55f75b11c3f0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55f75b11c2d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55f75b11c2b0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55f75b11c290 <col:24> 'unsigned long' 4
|           `-RecordType 0x55f75b11c3d0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55f75b11c2f0 'char_array'
|-CXXMethodDecl 0x55f75b11deb8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55f75b11ddc8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55f75b11dfa8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55f75b11e088 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55f75b11e358 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55f75b11e260 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55f75b11e598 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55f75b11e410 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55f75b11e488 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b11e768 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55f75b11e658 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55f75b11e6d0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b11e8c8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55f75b11e998 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55f75b11ebe8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55f75b11ea58 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55f75b11ead0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b11ee48 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55f75b11ecb8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55f75b11ed30 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b11f008 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55f75b11ef18 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b11f1c8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55f75b11f0d0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b11f280 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55f75b11f330 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55f75b127938 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55f75b11f3e0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55f75b127820 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55f75b127bd8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55f75b127ae0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55f75b127ca0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55f75b127cf0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55f75b127d40 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55f75b11a828 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55f75b11aa38 prev 0x55f75b11a828 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55f75b11bd90 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55f75b11bd40 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55f75b11bd20 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55f75b11bbd0 'type'
|     `-SubstTemplateTypeParmType 0x55f75b11b9f0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55f75adf2b60 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75adf2b08 'T'
|       `-RecordType 0x55f75b11b540 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55f75b11b458 'sized_array_memory'
|-FieldDecl 0x55f75b127d90 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55f75b127de0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55f75b127e18 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|   |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|   `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b127ea8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55f75b127e70 'int &'
|   `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|     |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|     `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b127f68 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55f75b127f30 'const int &'
|   `-QualType 0x55f75b11aad1 'const int' const
|     `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b127ff8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55f75b127fc0 'int *'
|   `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|     |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|     `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b128088 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55f75b128050 'const int *'
|   `-QualType 0x55f75b11aad1 'const int' const
|     `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b128c70 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55f75b128c20 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55f75b128c00 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55f75b128b90 'type'
|     `-SubstTemplateTypeParmType 0x55f75b128950 'int' sugar
|       |-TemplateTypeParmType 0x55f75adfd960 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75adfd910 'T'
|       `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b128cd8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55f75b127f30 'const int &'
|   `-QualType 0x55f75b11aad1 'const int' const
|     `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b128d30 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b128d98 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55f75b127fc0 'int *'
|   `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|     |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|     `-BuiltinType 0x55f75ab2d370 'int'
|-TypedefDecl 0x55f75b128e00 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55f75b128050 'const int *'
|   `-QualType 0x55f75b11aad1 'const int' const
|     `-SubstTemplateTypeParmType 0x55f75b11aad0 'int' sugar
|       |-TemplateTypeParmType 0x55f75ae2a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55f75ae2a7f8 'T'
|       `-BuiltinType 0x55f75ab2d370 'int'
|-EnumDecl 0x55f75b128e58 <line:134:5> col:5
| `-EnumConstantDecl 0x55f75b128f50 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55f75b128f30 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55f75ae2bed8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55f75ae2beb0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55f75ae2be90 <col:40> 'int' 1
|-CXXConstructorDecl 0x55f75b128fd8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55f75b129228 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b129090 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55f75b129130 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55f75b1294e8 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55f75b1293d0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55f75b1297a8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55f75b129690 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55f75b129af0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55f75b1299d0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55f75b129e00 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55f75b129ce0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55f75b12a0f0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b129f38 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55f75b129fb0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55f75b12a218 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55f75b12a2f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b12a350 <col:30> Inherited
|-CXXMethodDecl 0x55f75b12a398 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55f75b12a448 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b12a4a0 <col:30> Inherited
|-CXXMethodDecl 0x55f75b12a568 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55f75b12a618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b12a670 <col:30> Inherited
|-CXXMethodDecl 0x55f75b12a6b8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55f75b12a768 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b12a7c0 <col:30> Inherited
|-CXXMethodDecl 0x55f75b12a808 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55f75b12a8b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b12a910 <col:30> Inherited
|-CXXMethodDecl 0x55f75b12a958 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55f75b12aa08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55f75b12aa60 <col:30> Inherited
|-CXXMethodDecl 0x55f75b12aa88 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55f75b12ab38 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55f75b12abe8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55f75b12ada8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b12ac98 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55f75b12ad10 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55f75b12aef8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55f75b12ae68 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b12b0a8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55f75b12afb0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55f75b12b160 <col:20>
| `-OptimizeNoneAttr 0x55f75b12b1b8 <col:30>
|-CXXMethodDecl 0x55f75b12b2d8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55f75b12b1e0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55f75b12b390 <col:20>
| `-OptimizeNoneAttr 0x55f75b12b3e8 <col:30>
|-CXXMethodDecl 0x55f75b12b4a0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55f75b12b410 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b12b5e8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55f75b12b558 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b12b718 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55f75b12b848 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55f75b12b918 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55f75b12b9e8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55f75b12bb28 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55f75b12ba98 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b12bc70 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55f75b12bbe0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55f75b12bdb8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55f75b12bd28 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55f75b12be70 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55f75b12bf70 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55f75b12bee0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55f75b12c028 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55f75b12c0e8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55f75b12c1e8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55f75b12c368 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55f75b12c2a8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55f75b12cb28 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55f75b12c420 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55f75b12ca88 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55f75b12c988 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55f75b12cc08 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55f75b12cd58 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55f75b12ccc8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55f75b12ce10 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55f75b12d058 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55f75b12ced0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55f75b12cf48 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55f75b12d218 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55f75b12d128 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55f75b12d468 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55f75b12d2e0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55f75b12d358 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55f75b12d528 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55f75b12d788 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55f75b12d690 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55f75b12d858 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b118998 prev 0x55f75b0fa618 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55f75b118a90 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55f75b118b80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55f75b13f5f0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55f75b118c70 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55f75b13f600 <col:25, line:830:9>
|-CXXMethodDecl 0x55f75b118d70 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55f75b118e20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55f75b118ec8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55f75b118ec8
| `-ParmVarDecl 0x55f75b118fd8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55f75b119798 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55f75b119798
  `-ParmVarDecl 0x55f75b1198a8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b0fa428 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55f75b0fa588 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55f75b0fa618 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55f75b0fa6d0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55f75b0fa7d8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55f75b0fa708 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55f75b12ee18 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55f75b12edf8 <col:31> 'int' 0
|-CXXConstructorDecl 0x55f75b0faaf8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b0fa970 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55f75b0fa9e8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55f75b12ee50 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55f75b12ee30 <col:59> 'int' 0
|-CXXConstructorDecl 0x55f75b0facd0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b0fabc0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55f75b0fac38 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55f75b12ee88 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55f75b12ee68 <col:55> 'int' 0
|-CXXConstructorDecl 0x55f75b0fb088 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55f75b0fae70 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55f75b0faee8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55f75b0faf60 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55f75b12eec0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55f75b12eea0 <col:31> 'int' 0
|-CXXConstructorDecl 0x55f75b0fb248 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55f75b0fb188 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55f75b0fb340 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55f75b0fb528 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55f75b0fb430 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55f75b0fb618 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55f75b12f270 <col:24, line:291:5>
|   `-ReturnStmt 0x55f75b12f260 <line:290:9, col:79>
|     `-BinaryOperator 0x55f75b12f240 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55f75b12f118 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55f75b12f070 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55f75b12f050 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55f75b12ef48 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55f75b12ef30 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55f75b12ef18 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55f75b12eee8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55f75b11a7c0
|       | |   |       `-CXXThisExpr 0x55f75b12eed8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55f75b12f038 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55f75b12f020 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55f75b12efe8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55f75b12efb8 <col:28, col:35> '<bound member function type>' ->size 0x55f75b0db168
|       | |           `-ImplicitCastExpr 0x55f75b12f008 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55f75b12efa0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55f75b12ef70 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55f75b11a7c0
|       | |                 `-CXXThisExpr 0x55f75b12ef60 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55f75b12f100 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55f75b12f0e8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55f75b12f0d0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55f75b12f0a0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55f75b12d9a0
|       |         `-CXXThisExpr 0x55f75b12f090 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55f75b12f220 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55f75b12f208 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55f75b12f1f0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55f75b12f1b0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55f75b12f198 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55f75b12f148 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55f75b12da50
|         |     |   `-CXXThisExpr 0x55f75b12f138 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55f75b12f178 <col:73> 'int' 0
|         `-IntegerLiteral 0x55f75b12f1d0 <col:79> 'int' 0
|-CXXMethodDecl 0x55f75b0fb6d8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55f75b12f448 <col:32, line:296:5>
|   `-ReturnStmt 0x55f75b12f438 <line:295:9, col:49>
|     `-BinaryOperator 0x55f75b12f418 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55f75b12f2f8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55f75b12f2e0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55f75b12f2c8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55f75b12f298 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55f75b12d9a0
|       |       `-CXXThisExpr 0x55f75b12f288 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55f75b12f3f8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55f75b12f3e0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55f75b12f3c8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55f75b12f388 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55f75b12f370 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55f75b12f320 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55f75b12da50
|         |     |   `-CXXThisExpr 0x55f75b12f310 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55f75b12f350 <col:43> 'int' 0
|         `-IntegerLiteral 0x55f75b12f3a8 <col:49> 'int' 0
|-CXXMethodDecl 0x55f75b0fb7c8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55f75b12f658 <col:19, line:306:5>
|   |-IfStmt 0x55f75b12f578 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55f75b12f4b8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55f75b12f4a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55f75b12f470 <col:13> 'Vector<String> *' lvalue ->_conf 0x55f75b11a7c0
|   | |     `-CXXThisExpr 0x55f75b12f460 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55f75b12f558 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55f75b12f528 <col:13, col:20> '<bound member function type>' ->clear 0x55f75b0ddb68
|   |     `-ImplicitCastExpr 0x55f75b12f510 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55f75b12f4e0 <col:13> 'Vector<String> *' lvalue ->_conf 0x55f75b11a7c0
|   |         `-CXXThisExpr 0x55f75b12f4d0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55f75b12f600 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55f75b12f5d0 <col:9, col:16> '<bound member function type>' .clear 0x55f75b12d528
|   |   `-MemberExpr 0x55f75b12f5a0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55f75b12d940
|   |     `-CXXThisExpr 0x55f75b12f590 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55f75b12f648 <line:305:9, col:17>
|     `-UnaryOperator 0x55f75b12f630 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b12f620 <col:17> 'Args *' this
|-CXXMethodDecl 0x55f75b0fba48 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55f75b0fb950 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55f75b0fbbc8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55f75b0fbb00 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55f75b0fbf48 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55f75b0fbc70 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55f75b0fbea8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55f75b0fbd18 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55f75b0fbd90 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55f75b131260 <col:67, line:327:5>
|     |-WhileStmt 0x55f75b131210 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55f75b12f740 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55f75b12f6c0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55f75b04c438 0x55f75ae95a18 0x55f75ae956f0 0x55f75ae86ed0 0x55f75ae86b80 0x55f75ae86470 0x55f75ae58de0 0x55f75ade52a0
|     | | |-DeclRefExpr 0x55f75b12f680 <col:16> 'Iter' lvalue ParmVar 0x55f75b0fbd18 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55f75b12f6a0 <col:25> 'Iter' lvalue ParmVar 0x55f75b0fbd90 'end' 'Iter'
|     | `-CompoundStmt 0x55f75b1311f0 <col:30, line:325:9>
|     |   |-CallExpr 0x55f75b131190 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55f75b12f788 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55f75b131160 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55f75b1310f0 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|     |   |   `-DeclRefExpr 0x55f75b12f7e8 <col:24> 'Iter' lvalue ParmVar 0x55f75b0fbd18 'begin' 'Iter'
|     |   `-UnaryOperator 0x55f75b1311d8 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55f75b1311b8 <col:15> 'Iter' lvalue ParmVar 0x55f75b0fbd18 'begin' 'Iter'
|     `-ReturnStmt 0x55f75b131250 <line:326:9, col:17>
|       `-UnaryOperator 0x55f75b131238 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b131228 <col:17> 'Args *' this
|-CXXMethodDecl 0x55f75b0fc050 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55f75b0fbfc0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55f75b0fc198 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55f75b0fc108 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55f75b0fc260 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55f75b131340 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55f75b1312e0 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55f75b131290 <col:9> '<bound member function type>' ->reset_from 0x55f75b12ddc8
|   | | `-CXXThisExpr 0x55f75b131280 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55f75b1312c0 <col:20> 'int' 0
|   `-ReturnStmt 0x55f75b131330 <line:352:9, col:17>
|     `-UnaryOperator 0x55f75b131318 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b131308 <col:17> 'Args *' this
|-VarDecl 0x55f75b0fc318 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55f75b0fc380 <col:38> 'int' 1
|-VarDecl 0x55f75b0fc410 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55f75b0fc478 <col:39> 'int' 2
|-VarDecl 0x55f75b0fc508 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55f75b0fc570 <col:39> 'int' 4
|-VarDecl 0x55f75b0fc600 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55f75b0fc668 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55f75b0fc9e8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55f75b0fc6e0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b0fc948 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55f75b0fc790 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fc838 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55f75b131498 <col:43, line:371:5>
|     `-ReturnStmt 0x55f75b131488 <line:370:9, col:34>
|       `-CallExpr 0x55f75b131450 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b131370 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1313f0 <col:21> 'const char *' lvalue ParmVar 0x55f75b0fc790 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b131410 <col:30> 'int' 0
|         `-DeclRefExpr 0x55f75b131430 <col:33> 'T' lvalue ParmVar 0x55f75b0fc838 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0fcd18 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55f75b0fca50 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b0fcc78 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55f75b0fcb00 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fcba8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55f75b1315e8 <col:45, line:375:5>
|     `-ReturnStmt 0x55f75b1315d8 <line:374:9, col:42>
|       `-CallExpr 0x55f75b1315a0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1314c0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b131540 <col:21> 'const char *' lvalue ParmVar 0x55f75b0fcb00 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b131560 <col:30> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int'
|         `-DeclRefExpr 0x55f75b131580 <col:41> 'T' lvalue ParmVar 0x55f75b0fcba8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0fd048 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55f75b0fcd80 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b0fcfa8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55f75b0fce30 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fced8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55f75b131738 <col:45, line:379:5>
|     `-ReturnStmt 0x55f75b131728 <line:378:9, col:43>
|       `-CallExpr 0x55f75b1316f0 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b131610 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b131690 <col:21> 'const char *' lvalue ParmVar 0x55f75b0fce30 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b1316b0 <col:30> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int'
|         `-DeclRefExpr 0x55f75b1316d0 <col:42> 'T' lvalue ParmVar 0x55f75b0fced8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0fd378 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55f75b0fd0b0 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55f75b0fd2d8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55f75b0fd160 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55f75b0fd208 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55f75b131938 <col:46, line:383:5>
| |   `-ReturnStmt 0x55f75b131928 <line:382:9, col:55>
| |     `-CallExpr 0x55f75b1318f0 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55f75b131760 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55f75b1317e0 <col:21> 'const char *' lvalue ParmVar 0x55f75b0fd160 'keyword' 'const char *'
| |       |-BinaryOperator 0x55f75b1318b0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55f75b131860 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55f75b131840 <col:30> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55f75b131898 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55f75b131878 <col:42> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55f75b1318d0 <col:54> 'T' lvalue ParmVar 0x55f75b0fd208 'x' 'T &'
| `-CXXMethodDecl 0x55f75b1613b8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, int &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55f75b1611d8 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55f75b1612a8 <col:40, col:43> col:43 x 'int &'
|-FunctionTemplateDecl 0x55f75b0fd778 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55f75b0fd3e0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b0fd6d8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55f75b0fd490 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fd510 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b0fd5b8 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55f75b131a78 <col:54, line:388:5>
|     |-CallExpr 0x55f75b131a00 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b131950 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55f75b131990 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55f75b1319a0 <col:30> 'const char *' lvalue ParmVar 0x55f75b0fd490 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55f75b1319c0 <col:39> 'int' lvalue ParmVar 0x55f75b0fd510 'flags' 'int'
|     | `-DeclRefExpr 0x55f75b1319e0 <col:46> 'T' lvalue ParmVar 0x55f75b0fd5b8 'x' 'T &'
|     `-ReturnStmt 0x55f75b131a68 <line:387:9, col:17>
|       `-UnaryOperator 0x55f75b131a50 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b131a40 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b0fdc28 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55f75b0fd7e8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55f75b0fd868 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55f75b0fdb88 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55f75b0fd928 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fd9c8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b0fda68 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55f75b131be8 <col:74, line:403:5>
|     `-ReturnStmt 0x55f75b131bd8 <line:402:9, col:56>
|       `-CallExpr 0x55f75b131b98 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b131aa8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b131b18 <col:28> 'const char *' lvalue ParmVar 0x55f75b0fd928 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b131b38 <col:37> 'int' 0
|         |-DeclRefExpr 0x55f75b131b58 <col:40> 'T' lvalue ParmVar 0x55f75b0fd9c8 'x' 'T &'
|         `-DeclRefExpr 0x55f75b131b78 <col:43> 'const V' lvalue ParmVar 0x55f75b0fda68 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55f75b0fe098 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55f75b0fdc98 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55f75b0fdd18 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55f75b0fdff8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55f75b0fddd8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fde78 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b0fdf18 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55f75b131d50 <col:76, line:407:5>
|     `-ReturnStmt 0x55f75b131d40 <line:406:9, col:65>
|       `-CallExpr 0x55f75b131d00 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b131c10 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b131c80 <col:28> 'const char *' lvalue ParmVar 0x55f75b0fddd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b131ca0 <col:37> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int'
|         |-DeclRefExpr 0x55f75b131cc0 <col:49> 'T' lvalue ParmVar 0x55f75b0fde78 'x' 'T &'
|         `-DeclRefExpr 0x55f75b131ce0 <col:52> 'const V' lvalue ParmVar 0x55f75b0fdf18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55f75b0fe5e8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55f75b0fe108 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55f75b0fe188 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55f75b0fe548 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55f75b0fe248 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fe2c8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b0fe368 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b0fe408 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55f75b131eb8 <col:85, line:412:5>
|     |-CallExpr 0x55f75b131e38 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b131d68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55f75b131da8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55f75b131db8 <col:37> 'const char *' lvalue ParmVar 0x55f75b0fe248 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55f75b131dd8 <col:46> 'int' lvalue ParmVar 0x55f75b0fe2c8 'flags' 'int'
|     | |-DeclRefExpr 0x55f75b131df8 <col:53> 'T' lvalue ParmVar 0x55f75b0fe368 'x' 'T &'
|     | `-DeclRefExpr 0x55f75b131e18 <col:56> 'const V' lvalue ParmVar 0x55f75b0fe408 'default_value' 'const V &'
|     `-ReturnStmt 0x55f75b131ea8 <line:411:9, col:17>
|       `-UnaryOperator 0x55f75b131e90 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b131e80 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b0fea78 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55f75b0fe660 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b0fe6d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b0fe9d8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b0fe798 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fe810 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b0fe8b8 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55f75b132038 <col:53, line:425:5>
|     `-ReturnStmt 0x55f75b132028 <line:424:9, col:42>
|       `-CallExpr 0x55f75b131fe8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b131ee8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b131f68 <col:21> 'const char *' lvalue ParmVar 0x55f75b0fe798 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b131f88 <col:30> 'int' 0
|         |-DeclRefExpr 0x55f75b131fa8 <col:33> 'P' lvalue ParmVar 0x55f75b0fe810 'parser' 'P'
|         `-DeclRefExpr 0x55f75b131fc8 <col:41> 'T' lvalue ParmVar 0x55f75b0fe8b8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0feec8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55f75b0feae8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b0feb68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b0fee28 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b0fec28 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0feca0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b0fed48 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55f75b1321b0 <col:55, line:429:5>
|     `-ReturnStmt 0x55f75b1321a0 <line:428:9, col:50>
|       `-CallExpr 0x55f75b132160 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b132060 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1320e0 <col:21> 'const char *' lvalue ParmVar 0x55f75b0fec28 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b132100 <col:30> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int'
|         |-DeclRefExpr 0x55f75b132120 <col:41> 'P' lvalue ParmVar 0x55f75b0feca0 'parser' 'P'
|         `-DeclRefExpr 0x55f75b132140 <col:49> 'T' lvalue ParmVar 0x55f75b0fed48 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0ff318 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55f75b0fef38 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b0fefb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b0ff278 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b0ff078 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0ff0f0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b0ff198 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55f75b132328 <col:55, line:433:5>
|     `-ReturnStmt 0x55f75b132318 <line:432:9, col:51>
|       `-CallExpr 0x55f75b1322d8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1321d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b132258 <col:21> 'const char *' lvalue ParmVar 0x55f75b0ff078 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b132278 <col:30> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int'
|         |-DeclRefExpr 0x55f75b132298 <col:42> 'P' lvalue ParmVar 0x55f75b0ff0f0 'parser' 'P'
|         `-DeclRefExpr 0x55f75b1322b8 <col:50> 'T' lvalue ParmVar 0x55f75b0ff198 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0ff768 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55f75b0ff388 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b0ff408 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b0ff6c8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b0ff4c8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0ff540 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b0ff5e8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55f75b132550 <col:56, line:437:5>
|     `-ReturnStmt 0x55f75b132540 <line:436:9, col:63>
|       `-CallExpr 0x55f75b132500 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b132350 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1323d0 <col:21> 'const char *' lvalue ParmVar 0x55f75b0ff4c8 'keyword' 'const char *'
|         |-BinaryOperator 0x55f75b1324a0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55f75b132450 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55f75b132430 <col:30> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55f75b132488 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55f75b132468 <col:42> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55f75b1324c0 <col:54> 'P' lvalue ParmVar 0x55f75b0ff540 'parser' 'P'
|         `-DeclRefExpr 0x55f75b1324e0 <col:62> 'T' lvalue ParmVar 0x55f75b0ff5e8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b0ffc98 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55f75b0ff7d8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b0ff858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b0ffbf8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55f75b0ff918 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0ff998 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b0ffa10 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b0ffab8 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55f75b1326b8 <col:64, line:442:5>
|     |-CallExpr 0x55f75b132638 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b132568 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55f75b1325a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55f75b1325b8 <col:30> 'const char *' lvalue ParmVar 0x55f75b0ff918 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55f75b1325d8 <col:39> 'int' lvalue ParmVar 0x55f75b0ff998 'flags' 'int'
|     | |-DeclRefExpr 0x55f75b1325f8 <col:46> 'P' lvalue ParmVar 0x55f75b0ffa10 'parser' 'P'
|     | `-DeclRefExpr 0x55f75b132618 <col:54> 'T' lvalue ParmVar 0x55f75b0ffab8 'x' 'T &'
|     `-ReturnStmt 0x55f75b1326a8 <line:441:9, col:17>
|       `-UnaryOperator 0x55f75b132690 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b132680 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b100298 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55f75b0ffd10 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b0ffd88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55f75b0ffe08 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55f75b1001f8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55f75b0ffed0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b0fff48 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b0fffe8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b1000b8 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55f75b132850 <col:84, line:458:5>
|     `-ReturnStmt 0x55f75b132840 <line:457:9, col:64>
|       `-CallExpr 0x55f75b1327f8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1326e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b132758 <col:28> 'const char *' lvalue ParmVar 0x55f75b0ffed0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b132778 <col:37> 'int' 0
|         |-DeclRefExpr 0x55f75b132798 <col:40> 'P' lvalue ParmVar 0x55f75b0fff48 'parser' 'P'
|         |-DeclRefExpr 0x55f75b1327b8 <col:48> 'T' lvalue ParmVar 0x55f75b0fffe8 'x' 'T &'
|         `-DeclRefExpr 0x55f75b1327d8 <col:51> 'const V' lvalue ParmVar 0x55f75b1000b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55f75b100818 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55f75b100310 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b100388 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55f75b100408 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55f75b100778 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55f75b1004d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b100548 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b1005e8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b100688 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55f75b1329e0 <col:86, line:462:5>
|     `-ReturnStmt 0x55f75b1329d0 <line:461:9, col:73>
|       `-CallExpr 0x55f75b132988 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b132878 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1328e8 <col:28> 'const char *' lvalue ParmVar 0x55f75b1004d0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b132908 <col:37> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int'
|         |-DeclRefExpr 0x55f75b132928 <col:49> 'P' lvalue ParmVar 0x55f75b100548 'parser' 'P'
|         |-DeclRefExpr 0x55f75b132948 <col:57> 'T' lvalue ParmVar 0x55f75b1005e8 'x' 'T &'
|         `-DeclRefExpr 0x55f75b132968 <col:60> 'const V' lvalue ParmVar 0x55f75b100688 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55f75b100e78 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55f75b100890 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b100908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55f75b100988 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55f75b100dd8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55f75b100a50 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b100ad0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b100b48 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b100be8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b100c88 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55f75b132b70 <col:95, line:467:5>
|     |-CallExpr 0x55f75b132ae8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b1329f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55f75b132a38 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55f75b132a48 <col:37> 'const char *' lvalue ParmVar 0x55f75b100a50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55f75b132a68 <col:46> 'int' lvalue ParmVar 0x55f75b100ad0 'flags' 'int'
|     | |-DeclRefExpr 0x55f75b132a88 <col:53> 'P' lvalue ParmVar 0x55f75b100b48 'parser' 'P'
|     | |-DeclRefExpr 0x55f75b132aa8 <col:61> 'T' lvalue ParmVar 0x55f75b100be8 'x' 'T &'
|     | `-DeclRefExpr 0x55f75b132ac8 <col:64> 'const V' lvalue ParmVar 0x55f75b100c88 'default_value' 'const V &'
|     `-ReturnStmt 0x55f75b132b60 <line:466:9, col:17>
|       `-UnaryOperator 0x55f75b132b48 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b132b38 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b101458 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55f75b100ef8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b100f78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55f75b100ff8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55f75b1013b8 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55f75b1010c0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b101138 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b1011d8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55f75b101278 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55f75b132d18 <col:63, line:481:5>
|     `-ReturnStmt 0x55f75b132d08 <line:480:9, col:47>
|       `-CallExpr 0x55f75b132cc0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b132ba0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b132c20 <col:21> 'const char *' lvalue ParmVar 0x55f75b1010c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b132c40 <col:30> 'int' 0
|         |-DeclRefExpr 0x55f75b132c60 <col:33> 'P' lvalue ParmVar 0x55f75b101138 'parser' 'P'
|         |-DeclRefExpr 0x55f75b132c80 <col:41> 'T1' lvalue ParmVar 0x55f75b1011d8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55f75b132ca0 <col:45> 'T2' lvalue ParmVar 0x55f75b101278 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55f75b1019d8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55f75b1014d0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b101548 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55f75b1015c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55f75b101938 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55f75b101690 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b101708 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b1017a8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55f75b101848 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55f75b132eb8 <col:65, line:485:5>
|     `-ReturnStmt 0x55f75b132ea8 <line:484:9, col:55>
|       `-CallExpr 0x55f75b132e60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b132d40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b132dc0 <col:21> 'const char *' lvalue ParmVar 0x55f75b101690 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b132de0 <col:30> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int'
|         |-DeclRefExpr 0x55f75b132e00 <col:41> 'P' lvalue ParmVar 0x55f75b101708 'parser' 'P'
|         |-DeclRefExpr 0x55f75b132e20 <col:49> 'T1' lvalue ParmVar 0x55f75b1017a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55f75b132e40 <col:53> 'T2' lvalue ParmVar 0x55f75b101848 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55f75b101f58 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55f75b101a50 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b101ac8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55f75b101b48 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55f75b101eb8 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55f75b101c10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b101c88 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b101d28 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55f75b101dc8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55f75b133058 <col:65, line:489:5>
|     `-ReturnStmt 0x55f75b133048 <line:488:9, col:56>
|       `-CallExpr 0x55f75b133000 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b132ee0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b132f60 <col:21> 'const char *' lvalue ParmVar 0x55f75b101c10 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b132f80 <col:30> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int'
|         |-DeclRefExpr 0x55f75b132fa0 <col:42> 'P' lvalue ParmVar 0x55f75b101c88 'parser' 'P'
|         |-DeclRefExpr 0x55f75b132fc0 <col:50> 'T1' lvalue ParmVar 0x55f75b101d28 'x1' 'T1 &'
|         `-DeclRefExpr 0x55f75b132fe0 <col:54> 'T2' lvalue ParmVar 0x55f75b101dc8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55f75b107988 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55f75b101fd0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b102048 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55f75b1020c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55f75b1078e8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55f75b102190 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b102208 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b1022a8 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55f75b102348 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55f75b1332a8 <col:66, line:493:5>
|     `-ReturnStmt 0x55f75b133298 <line:492:9, col:68>
|       `-CallExpr 0x55f75b133250 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133080 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133100 <col:21> 'const char *' lvalue ParmVar 0x55f75b102190 'keyword' 'const char *'
|         |-BinaryOperator 0x55f75b1331d0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55f75b133180 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55f75b133160 <col:30> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55f75b1331b8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55f75b133198 <col:42> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55f75b1331f0 <col:54> 'P' lvalue ParmVar 0x55f75b102208 'parser' 'P'
|         |-DeclRefExpr 0x55f75b133210 <col:62> 'T1' lvalue ParmVar 0x55f75b1022a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55f75b133230 <col:66> 'T2' lvalue ParmVar 0x55f75b102348 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55f75b107fe8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55f75b107a00 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b107a78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55f75b107af8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55f75b107f48 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55f75b107bc0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b107c40 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b107cb8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b107d58 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55f75b107df8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55f75b133438 <col:74, line:498:5>
|     |-CallExpr 0x55f75b1333b0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b1332c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55f75b133300 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55f75b133310 <col:30> 'const char *' lvalue ParmVar 0x55f75b107bc0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55f75b133330 <col:39> 'int' lvalue ParmVar 0x55f75b107c40 'flags' 'int'
|     | |-DeclRefExpr 0x55f75b133350 <col:46> 'P' lvalue ParmVar 0x55f75b107cb8 'parser' 'P'
|     | |-DeclRefExpr 0x55f75b133370 <col:54> 'T1' lvalue ParmVar 0x55f75b107d58 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55f75b133390 <col:58> 'T2' lvalue ParmVar 0x55f75b107df8 'x2' 'T2 &'
|     `-ReturnStmt 0x55f75b133428 <line:497:9, col:17>
|       `-UnaryOperator 0x55f75b133410 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b133400 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b108348 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55f75b108068 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b1082a8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55f75b108120 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b108198 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55f75b133580 <col:52, line:509:5>
|     `-ReturnStmt 0x55f75b133570 <line:508:9, col:44>
|       `-CallExpr 0x55f75b133538 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133468 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1334d8 <col:26> 'const char *' lvalue ParmVar 0x55f75b108120 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b1334f8 <col:35> 'int' 0
|         `-DeclRefExpr 0x55f75b133518 <col:38> 'P' lvalue ParmVar 0x55f75b108198 'parser' 'P'
|-FunctionTemplateDecl 0x55f75b108648 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55f75b1083b0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b1085a8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55f75b108460 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b1084d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55f75b1336c0 <col:54, line:513:5>
|     `-ReturnStmt 0x55f75b1336b0 <line:512:9, col:52>
|       `-CallExpr 0x55f75b133678 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1335a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133618 <col:26> 'const char *' lvalue ParmVar 0x55f75b108460 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b133638 <col:35> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int'
|         `-DeclRefExpr 0x55f75b133658 <col:46> 'P' lvalue ParmVar 0x55f75b1084d8 'parser' 'P'
|-FunctionTemplateDecl 0x55f75b108948 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55f75b1086b0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b1088a8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55f75b108760 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b1087d8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55f75b133800 <col:54, line:517:5>
|     `-ReturnStmt 0x55f75b1337f0 <line:516:9, col:53>
|       `-CallExpr 0x55f75b1337b8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1336e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133758 <col:26> 'const char *' lvalue ParmVar 0x55f75b108760 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b133778 <col:35> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int'
|         `-DeclRefExpr 0x55f75b133798 <col:47> 'P' lvalue ParmVar 0x55f75b1087d8 'parser' 'P'
|-FunctionTemplateDecl 0x55f75b108c48 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55f75b1089b0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b108ba8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55f75b108a60 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b108ad8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55f75b1339f0 <col:55, line:521:5>
|     `-ReturnStmt 0x55f75b1339e0 <line:520:9, col:65>
|       `-CallExpr 0x55f75b1339a8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133828 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133898 <col:26> 'const char *' lvalue ParmVar 0x55f75b108a60 'keyword' 'const char *'
|         |-BinaryOperator 0x55f75b133968 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55f75b133918 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55f75b1338f8 <col:35> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55f75b133950 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55f75b133930 <col:47> 'const int' lvalue Var 0x55f75b0fc410 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55f75b133988 <col:59> 'P' lvalue ParmVar 0x55f75b108ad8 'parser' 'P'
|-FunctionTemplateDecl 0x55f75b109018 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55f75b108cb0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b108f78 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55f75b108d60 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b108de0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b108e58 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55f75b133b30 <col:63, line:526:5>
|     |-CallExpr 0x55f75b133ab8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b133a08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55f75b133a48 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55f75b133a58 <col:35> 'const char *' lvalue ParmVar 0x55f75b108d60 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55f75b133a78 <col:44> 'int' lvalue ParmVar 0x55f75b108de0 'flags' 'int'
|     | `-DeclRefExpr 0x55f75b133a98 <col:51> 'P' lvalue ParmVar 0x55f75b108e58 'parser' 'P'
|     `-ReturnStmt 0x55f75b133b20 <line:525:9, col:17>
|       `-UnaryOperator 0x55f75b133b08 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b133af8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b109468 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55f75b109088 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b109108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b1093c8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b1091c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b109240 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b1092e8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55f75b133c88 <col:58, line:541:5>
|     `-ReturnStmt 0x55f75b133c78 <line:540:9, col:39>
|       `-CallExpr 0x55f75b133c40 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133b60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133be0 <col:21> 'const char *' lvalue ParmVar 0x55f75b1091c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b133c00 <col:30> 'P' lvalue ParmVar 0x55f75b109240 'parser' 'P'
|         `-DeclRefExpr 0x55f75b133c20 <col:38> 'T' lvalue ParmVar 0x55f75b1092e8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b1098b8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55f75b1094d8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b109558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b109818 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b109618 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b109690 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b109738 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55f75b133dc0 <col:60, line:545:5>
|     `-ReturnStmt 0x55f75b133db0 <line:544:9, col:41>
|       `-CallExpr 0x55f75b133d78 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133d18 <col:23> 'const char *' lvalue ParmVar 0x55f75b109618 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b133d38 <col:32> 'P' lvalue ParmVar 0x55f75b109690 'parser' 'P'
|         `-DeclRefExpr 0x55f75b133d58 <col:40> 'T' lvalue ParmVar 0x55f75b109738 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b109d08 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55f75b109928 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b1099a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b109c68 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b109a68 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b109ae0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b109b88 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55f75b133ef8 <col:60, line:549:5>
|     `-ReturnStmt 0x55f75b133ee8 <line:548:9, col:41>
|       `-CallExpr 0x55f75b133eb0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133de8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133e50 <col:23> 'const char *' lvalue ParmVar 0x55f75b109a68 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b133e70 <col:32> 'P' lvalue ParmVar 0x55f75b109ae0 'parser' 'P'
|         `-DeclRefExpr 0x55f75b133e90 <col:40> 'T' lvalue ParmVar 0x55f75b109b88 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b10a158 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55f75b109d78 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b109df8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10a0b8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b109eb8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b109f30 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b109fd8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55f75b134030 <col:61, line:553:5>
|     `-ReturnStmt 0x55f75b134020 <line:552:9, col:42>
|       `-CallExpr 0x55f75b133fe8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b133f20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b133f88 <col:24> 'const char *' lvalue ParmVar 0x55f75b109eb8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b133fa8 <col:33> 'P' lvalue ParmVar 0x55f75b109f30 'parser' 'P'
|         `-DeclRefExpr 0x55f75b133fc8 <col:41> 'T' lvalue ParmVar 0x55f75b109fd8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b10a638 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55f75b10a1c8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10a248 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10a598 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55f75b10a308 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10a388 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10a400 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10a4a8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55f75b1341a8 <col:69, line:557:5>
|     `-ReturnStmt 0x55f75b134198 <line:556:9, col:46>
|       `-CallExpr 0x55f75b134158 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b134058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1340d8 <col:21> 'const char *' lvalue ParmVar 0x55f75b10a308 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b1340f8 <col:30> 'int' lvalue ParmVar 0x55f75b10a388 'flags' 'int'
|         |-DeclRefExpr 0x55f75b134118 <col:37> 'P' lvalue ParmVar 0x55f75b10a400 'parser' 'P'
|         `-DeclRefExpr 0x55f75b134138 <col:45> 'T' lvalue ParmVar 0x55f75b10a4a8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b10a948 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55f75b10a6b0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b10a8a8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55f75b10a760 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10a7d8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55f75b1342e8 <col:56, line:571:5>
|     `-ReturnStmt 0x55f75b1342d8 <line:570:9, col:48>
|       `-CallExpr 0x55f75b1342a0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1341d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b134240 <col:30> 'const char *' lvalue ParmVar 0x55f75b10a760 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b134260 <col:39> 'int' 0
|         `-DeclRefExpr 0x55f75b134280 <col:42> 'P' lvalue ParmVar 0x55f75b10a7d8 'parser' 'P'
|-FunctionTemplateDecl 0x55f75b10acd8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55f75b10a9b0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b10ac38 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55f75b10aa60 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10aae0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10ab58 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55f75b1344b8 <col:67, line:576:5>
|     |-CallExpr 0x55f75b134440 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b134300 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55f75b134340 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55f75b134350 <col:39> 'const char *' lvalue ParmVar 0x55f75b10aa60 'keyword' 'const char *'
|     | |-BinaryOperator 0x55f75b134400 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55f75b1343b0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55f75b134370 <col:48> 'int' lvalue ParmVar 0x55f75b10aae0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55f75b1343e8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f75b1343c8 <col:56> 'const int' lvalue Var 0x55f75b0fc600 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55f75b134420 <col:68> 'P' lvalue ParmVar 0x55f75b10ab58 'parser' 'P'
|     `-ReturnStmt 0x55f75b1344a8 <line:575:9, col:17>
|       `-UnaryOperator 0x55f75b134490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b134480 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b10b128 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55f75b10ad48 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10adc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10b088 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55f75b10ae88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10af00 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10afa8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55f75b134628 <col:62, line:592:5>
|     `-ReturnStmt 0x55f75b134618 <line:591:9, col:51>
|       `-CallExpr 0x55f75b1345d8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1344e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b134558 <col:30> 'const char *' lvalue ParmVar 0x55f75b10ae88 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b134578 <col:39> 'int' 0
|         |-DeclRefExpr 0x55f75b134598 <col:42> 'P' lvalue ParmVar 0x55f75b10af00 'parser' 'P'
|         `-DeclRefExpr 0x55f75b1345b8 <col:50> 'T' lvalue ParmVar 0x55f75b10afa8 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b10b608 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55f75b10b198 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10b218 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10b568 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55f75b10b2d8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10b358 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10b3d0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10b478 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55f75b134820 <col:73, line:597:5>
|     |-CallExpr 0x55f75b1347a0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b134640 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55f75b134680 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55f75b134690 <col:39> 'const char *' lvalue ParmVar 0x55f75b10b2d8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55f75b134740 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55f75b1346f0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55f75b1346b0 <col:48> 'int' lvalue ParmVar 0x55f75b10b358 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55f75b134728 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f75b134708 <col:56> 'const int' lvalue Var 0x55f75b0fc600 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55f75b134760 <col:68> 'P' lvalue ParmVar 0x55f75b10b3d0 'parser' 'P'
|     | `-DeclRefExpr 0x55f75b134780 <col:76> 'T' lvalue ParmVar 0x55f75b10b478 'x' 'T &'
|     `-ReturnStmt 0x55f75b134810 <line:596:9, col:17>
|       `-UnaryOperator 0x55f75b1347f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b1347e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b10bbb8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55f75b10b680 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10b6f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10bb18 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55f75b10b7b8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10b830 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10b9f0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55f75b134990 <col:65, line:614:5>
|     `-ReturnStmt 0x55f75b134980 <line:613:9, col:46>
|       `-CallExpr 0x55f75b134940 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b134850 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b1348c0 <col:25> 'const char *' lvalue ParmVar 0x55f75b10b7b8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b1348e0 <col:34> 'int' 0
|         |-DeclRefExpr 0x55f75b134900 <col:37> 'P' lvalue ParmVar 0x55f75b10b830 'parser' 'P'
|         `-DeclRefExpr 0x55f75b134920 <col:45> 'Vector<T>' lvalue ParmVar 0x55f75b10b9f0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55f75b10bfe8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55f75b10bc28 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b10bf48 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55f75b10bce0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10be30 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55f75b134bb0 <col:55, line:618:5>
|     `-ReturnStmt 0x55f75b134ba0 <line:617:9, col:55>
|       `-CallExpr 0x55f75b134b60 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b1349b8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b134a28 <col:25> 'const char *' lvalue ParmVar 0x55f75b10bce0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55f75b134a48 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55f75b134b20 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55f75b134b40 <col:54> 'Vector<T>' lvalue ParmVar 0x55f75b10be30 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55f75b10c5b8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55f75b10c050 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10c0c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10c518 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55f75b10c188 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10c208 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10c280 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10c3d0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55f75b134da8 <col:76, line:623:5>
|     |-CallExpr 0x55f75b134d28 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55f75b134bc8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55f75b134c08 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55f75b134c18 <col:34> 'const char *' lvalue ParmVar 0x55f75b10c188 'keyword' 'const char *'
|     | |-BinaryOperator 0x55f75b134cc8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55f75b134c78 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55f75b134c38 <col:43> 'int' lvalue ParmVar 0x55f75b10c208 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55f75b134cb0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55f75b134c90 <col:51> 'const int' lvalue Var 0x55f75b0fc600 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55f75b134ce8 <col:63> 'P' lvalue ParmVar 0x55f75b10c280 'parser' 'P'
|     | `-DeclRefExpr 0x55f75b134d08 <col:71> 'Vector<T>' lvalue ParmVar 0x55f75b10c3d0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55f75b134d98 <line:622:9, col:17>
|       `-UnaryOperator 0x55f75b134d80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b134d70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b10caf8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55f75b10c630 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10c6a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10ca58 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55f75b10c768 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10c7e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10c930 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55f75b135010 <col:66, line:627:5>
|     `-ReturnStmt 0x55f75b135000 <line:626:9, col:59>
|       `-CallExpr 0x55f75b134fc0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55f75b134dd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55f75b134e48 <col:25> 'const char *' lvalue ParmVar 0x55f75b10c768 'keyword' 'const char *'
|         |-DeclRefExpr 0x55f75b134e68 <col:34> 'int' lvalue ParmVar 0x55f75b10c7e8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55f75b134f80 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55f75b134fa0 <col:58> 'Vector<T>' lvalue ParmVar 0x55f75b10c930 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55f75b10cb88 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55f75b135090 <col:25, line:633:5>
|   `-ReturnStmt 0x55f75b135080 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55f75b135068 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55f75b135038 <col:16> 'const bool' lvalue ->_status 0x55f75b11a628
|         `-CXXThisExpr 0x55f75b135028 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55f75b10cd08 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55f75b10cc40 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55f75b135178 <col:27, line:639:5>
|   |-BinaryOperator 0x55f75b135120 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55f75b1350a8 <col:9> 'bool' lvalue ParmVar 0x55f75b10cc40 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55f75b135108 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55f75b1350d8 <col:13> 'bool' lvalue ->_status 0x55f75b11a628
|   |     `-CXXThisExpr 0x55f75b1350c8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55f75b135168 <line:638:9, col:17>
|     `-UnaryOperator 0x55f75b135150 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b135140 <col:17> 'Args *' this
|-CXXMethodDecl 0x55f75b10ce88 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55f75b10cdc8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55f75b135268 <col:39, line:644:5>
|   |-BinaryOperator 0x55f75b135210 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55f75b135198 <col:9> 'bool' lvalue ParmVar 0x55f75b10cdc8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55f75b1351f8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55f75b1351c8 <col:13> 'const bool' lvalue ->_status 0x55f75b11a628
|   |     `-CXXThisExpr 0x55f75b1351b8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55f75b135258 <line:643:9, col:17>
|     `-UnaryOperator 0x55f75b135240 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b135230 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55f75b10cf50 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55f75b135310 <col:30, line:651:5>
|   `-ReturnStmt 0x55f75b135300 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55f75b1352e8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55f75b1352b8 <col:16> 'bool' lvalue ->_read_status 0x55f75b010450
|         `-ImplicitCastExpr 0x55f75b135298 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55f75b135288 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55f75b10d098 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55f75b10d008 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55f75b135418 <col:32, line:658:5>
|   |-BinaryOperator 0x55f75b1353c0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55f75b135328 <col:9> 'bool' lvalue ParmVar 0x55f75b10d008 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55f75b1353a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55f75b135378 <col:13> 'bool' lvalue ->_read_status 0x55f75b010450
|   |     `-ImplicitCastExpr 0x55f75b135358 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55f75b135348 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55f75b135408 <line:657:9, col:17>
|     `-UnaryOperator 0x55f75b1353f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b1353e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55f75b10d1e8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55f75b10d158 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55f75b135528 <col:44, line:663:5>
|   |-BinaryOperator 0x55f75b1354d0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55f75b135438 <col:9> 'bool' lvalue ParmVar 0x55f75b10d158 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55f75b1354b8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55f75b135488 <col:13> 'bool' lvalue ->_read_status 0x55f75b010450
|   |     `-ImplicitCastExpr 0x55f75b135468 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55f75b135458 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55f75b135518 <line:662:9, col:17>
|     `-UnaryOperator 0x55f75b135500 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b1354f0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55f75b10d2b0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55f75b10d378 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55f75b10d440 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55f75b10d508 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55f75b10d818 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55f75b10d5a8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b10d778 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55f75b10d688 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55f75b1358e0 <col:19, line:706:5>
|     `-IfStmt 0x55f75b1358b8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55f75b135628 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55f75b1357e8 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55f75b1357b8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55f75b135778 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55f75b135680 <col:42> '<bound member function type>' ->simple_slot 0x55f75b12ea80
|       |     | `-CXXThisExpr 0x55f75b135670 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55f75b135718 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55f75b1356d0 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55f75ae9a4b8
|       |     | `-DeclRefExpr 0x55f75b1356b0 <col:55> 'T' lvalue ParmVar 0x55f75b10d688 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55f75b135758 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55f75b1358a8 <line:705:13, col:34>
|         `-CallExpr 0x55f75b135880 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55f75b135808 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55f75b135860 <col:33> 'T' lvalue ParmVar 0x55f75b10d688 'x' 'T &'
|-FunctionTemplateDecl 0x55f75b10dae8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55f75b10d878 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b10da48 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55f75b10d958 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55f75b135cc0 <col:31, line:717:5>
|     |-DeclStmt 0x55f75b135a20 <line:713:9, col:23>
|     | `-VarDecl 0x55f75b135908 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55f75b1359f8 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55f75b135980 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55f75b1359d8 <col:21> 'T' lvalue ParmVar 0x55f75b10d958 'x' 'T &'
|     |-IfStmt 0x55f75b135c70 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55f75b135b18 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55f75b135c50 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55f75b135bf0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55f75b135b80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|     |   | `-DeclRefExpr 0x55f75b135b60 <col:14> 'T *' lvalue Var 0x55f75b135908 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55f75b135c30 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55f75b135ca8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55f75b135c88 <col:16> 'T *' lvalue Var 0x55f75b135908 's' 'T *'
|-FunctionTemplateDecl 0x55f75b10def8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55f75b10db48 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55f75b10dbc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55f75b10de58 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55f75b10dca8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55f75b10dd48 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55f75b135fd0 <col:37, line:726:5>
|     |-IfStmt 0x55f75b135f60 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55f75b135f80 <line:723:13, col:26>
|     | | `-VarDecl 0x55f75b135d28 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55f75b135e18 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55f75b135da0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55f75b135df8 <col:25> 'T' lvalue ParmVar 0x55f75b10dca8 'x' 'T &'
|     | |-DeclRefExpr 0x55f75b135e40 <col:16> 'T *' lvalue Var 0x55f75b135d28 's' 'T *'
|     | `-BinaryOperator 0x55f75b135f40 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55f75b135ef0 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55f75b135e80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|     |   | `-DeclRefExpr 0x55f75b135e60 <col:14> 'T *' lvalue Var 0x55f75b135d28 's' 'T *'
|     |   `-DeclRefExpr 0x55f75b135f20 <col:18> 'const V' lvalue ParmVar 0x55f75b10dd48 'value' 'const V &'
|     `-ReturnStmt 0x55f75b135fc0 <line:725:9, col:17>
|       `-UnaryOperator 0x55f75b135fa8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55f75b135f98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55f75b10e2f8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55f75b10df60 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55f75b10e258 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55f75b10e010 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10e090 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10e138 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55f75b136df0 <col:65, line:737:5>
|     |-DeclStmt 0x55f75b136068 <line:732:9, col:26>
|     | `-VarDecl 0x55f75b136000 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55f75b136db8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55f75b136dd8 <line:733:13, col:58>
|       | `-VarDecl 0x55f75b136090 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55f75b136270 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55f75b136240 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55f75b136228 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55f75b136208 <col:26, col:58> 'String' (CXXTemporary 0x55f75b136208)
|       |           `-CXXMemberCallExpr 0x55f75b136198 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55f75b136108 <col:26> '<bound member function type>' ->find 0x55f75b12e098
|       |             | `-CXXThisExpr 0x55f75b1360f8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55f75b1361d0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b136138 <col:31> 'const char *' lvalue ParmVar 0x55f75b10e010 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55f75b1361e8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b136158 <col:40> 'int' lvalue ParmVar 0x55f75b10e090 'flags' 'int'
|       |             `-DeclRefExpr 0x55f75b136178 <col:47> 'Args::Slot *' lvalue Var 0x55f75b136000 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55f75b136328 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55f75b136310 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55f75b1362f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55f75b1362c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|       |       `-ImplicitCastExpr 0x55f75b1362a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55f75b136288 <col:20> 'String' lvalue Var 0x55f75b136090 'str' 'String'
|       `-CompoundStmt 0x55f75b136d98 <col:61, line:736:9>
|         |-DeclStmt 0x55f75b1367e0 <line:734:13, col:76>
|         | `-VarDecl 0x55f75b136378 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55f75b1367b0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55f75b136720 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55f75b136768 <col:60> 'T' lvalue ParmVar 0x55f75b10e138 'variable' 'T &'
|         |     `-UnaryOperator 0x55f75b136798 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55f75b136788 <col:71> 'Args *' this
|         `-CallExpr 0x55f75b136d68 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55f75b136808 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|           | `-CXXThisExpr 0x55f75b1367f8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55f75b136d28 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55f75b136838 <col:23> 'T *' lvalue Var 0x55f75b136378 's' 'T *'
|           | `-CallExpr 0x55f75b136ce8 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55f75b136ac0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55f75b136bc0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55f75b136be0 <col:86> 'String' lvalue Var 0x55f75b136090 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55f75b136c90 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55f75b136c20 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|           |   | `-DeclRefExpr 0x55f75b136c00 <col:92> 'T *' lvalue Var 0x55f75b136378 's' 'T *'
|           |   `-UnaryOperator 0x55f75b136cd0 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55f75b136cc0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55f75b136d48 <col:103> 'Args::Slot *' lvalue Var 0x55f75b136000 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55f75b10e848 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55f75b10e368 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55f75b10e3e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55f75b10e7a8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55f75b10e4a8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10e528 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10e5c8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55f75b10e668 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55f75b137c90 <col:88, line:745:5>
|     |-DeclStmt 0x55f75b136e88 <line:741:9, col:26>
|     | `-VarDecl 0x55f75b136e20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55f75b1370a8 <line:742:9, col:55>
|     | `-VarDecl 0x55f75b136eb0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55f75b137090 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55f75b137060 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55f75b137048 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55f75b137028 <col:22, col:54> 'String' (CXXTemporary 0x55f75b137028)
|     |           `-CXXMemberCallExpr 0x55f75b136fb8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55f75b136f28 <col:22> '<bound member function type>' ->find 0x55f75b12e098
|     |             | `-CXXThisExpr 0x55f75b136f18 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55f75b136ff0 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55f75b136f58 <col:27> 'const char *' lvalue ParmVar 0x55f75b10e4a8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55f75b137008 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55f75b136f78 <col:36> 'int' lvalue ParmVar 0x55f75b10e528 'flags' 'int'
|     |             `-DeclRefExpr 0x55f75b136f98 <col:43> 'Args::Slot *' lvalue Var 0x55f75b136e20 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55f75b137480 <line:743:9, col:72>
|     | `-VarDecl 0x55f75b1370f8 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55f75b137450 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55f75b1373c0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55f75b137408 <col:56> 'T' lvalue ParmVar 0x55f75b10e5c8 'variable' 'T &'
|     |     `-UnaryOperator 0x55f75b137438 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55f75b137428 <col:67> 'Args *' this
|     `-CallExpr 0x55f75b137c60 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55f75b1374a8 <col:9> '<bound member function type>' ->postparse 0x55f75b12e2a8
|       | `-CXXThisExpr 0x55f75b137498 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55f75b137c20 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55f75b1374d8 <col:19> 'T *' lvalue Var 0x55f75b1370f8 's' 'T *'
|       | `-ParenExpr 0x55f75b137c00 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55f75b137bd0 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55f75b137bb8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55f75b137ba0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55f75b137b80 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55f75b137b50 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|       |     |       `-ImplicitCastExpr 0x55f75b137b38 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55f75b1374f8 <col:25> 'String' lvalue Var 0x55f75b136eb0 'str' 'String'
|       |     |-CallExpr 0x55f75b1379a8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55f75b137780 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55f75b137880 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55f75b1378a0 <col:89> 'String' lvalue Var 0x55f75b136eb0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55f75b137950 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55f75b1378e0 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|       |     | | `-DeclRefExpr 0x55f75b1378c0 <col:95> 'T *' lvalue Var 0x55f75b1370f8 's' 'T *'
|       |     | `-UnaryOperator 0x55f75b137990 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55f75b137980 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55f75b137b18 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55f75b137af8 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55f75b137ac8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55f75b137a78 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55f75b137a08 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|       |         | | `-DeclRefExpr 0x55f75b1379e8 <col:109> 'T *' lvalue Var 0x55f75b1370f8 's' 'T *'
|       |         | `-DeclRefExpr 0x55f75b137aa8 <col:113> 'const V' lvalue ParmVar 0x55f75b10e668 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55f75b137ae8 <col:120> 'bool' true
|       `-DeclRefExpr 0x55f75b137c40 <col:128> 'Args::Slot *' lvalue Var 0x55f75b136e20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55f75b10ed78 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55f75b10e8c0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10e938 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b10ecd8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55f75b10e9f8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10ea78 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10eaf0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10eb98 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55f75b138888 <col:75, line:754:5>
|     |-DeclStmt 0x55f75b137d38 <line:749:9, col:26>
|     | `-VarDecl 0x55f75b137cd0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55f75b138850 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55f75b138870 <line:750:13, col:58>
|       | `-VarDecl 0x55f75b137d60 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55f75b137f40 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55f75b137f10 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55f75b137ef8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55f75b137ed8 <col:26, col:58> 'String' (CXXTemporary 0x55f75b137ed8)
|       |           `-CXXMemberCallExpr 0x55f75b137e68 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55f75b137dd8 <col:26> '<bound member function type>' ->find 0x55f75b12e098
|       |             | `-CXXThisExpr 0x55f75b137dc8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55f75b137ea0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b137e08 <col:31> 'const char *' lvalue ParmVar 0x55f75b10e9f8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55f75b137eb8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b137e28 <col:40> 'int' lvalue ParmVar 0x55f75b10ea78 'flags' 'int'
|       |             `-DeclRefExpr 0x55f75b137e48 <col:47> 'Args::Slot *' lvalue Var 0x55f75b137cd0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55f75b137ff8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55f75b137fe0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55f75b137fc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55f75b137f90 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|       |       `-ImplicitCastExpr 0x55f75b137f78 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55f75b137f58 <col:20> 'String' lvalue Var 0x55f75b137d60 'str' 'String'
|       `-CompoundStmt 0x55f75b138830 <col:61, line:753:9>
|         |-DeclStmt 0x55f75b1383d0 <line:751:13, col:63>
|         | `-VarDecl 0x55f75b138048 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55f75b1383a0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55f75b138310 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55f75b138358 <col:47> 'T' lvalue ParmVar 0x55f75b10eb98 'variable' 'T &'
|         |     `-UnaryOperator 0x55f75b138388 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55f75b138378 <col:58> 'Args *' this
|         `-CallExpr 0x55f75b138800 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55f75b1383f8 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|           | `-CXXThisExpr 0x55f75b1383e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55f75b1387c0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55f75b138428 <col:23> 'T *' lvalue Var 0x55f75b138048 's' 'T *'
|           | `-CallExpr 0x55f75b138780 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55f75b138610 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55f75b138658 <col:56> 'P' lvalue ParmVar 0x55f75b10eaf0 'parser' 'P'
|           |   |-DeclRefExpr 0x55f75b138678 <col:64> 'String' lvalue Var 0x55f75b137d60 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55f75b138728 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55f75b1386b8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|           |   | `-DeclRefExpr 0x55f75b138698 <col:70> 'T *' lvalue Var 0x55f75b138048 's' 'T *'
|           |   `-UnaryOperator 0x55f75b138768 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55f75b138758 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55f75b1387e0 <col:81> 'Args::Slot *' lvalue Var 0x55f75b137cd0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55f75b10f3d8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55f75b10edf0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55f75b10ee68 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55f75b10eee8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55f75b10f338 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55f75b10efb0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10f030 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10f0a8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10f148 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55f75b10f1e8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55f75b13b9b8 <col:98, line:762:5>
|     |-DeclStmt 0x55f75b138920 <line:758:9, col:26>
|     | `-VarDecl 0x55f75b1388b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55f75b138b40 <line:759:9, col:55>
|     | `-VarDecl 0x55f75b138948 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55f75b138b28 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55f75b138af8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55f75b138ae0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55f75b138ac0 <col:22, col:54> 'String' (CXXTemporary 0x55f75b138ac0)
|     |           `-CXXMemberCallExpr 0x55f75b138a50 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55f75b1389c0 <col:22> '<bound member function type>' ->find 0x55f75b12e098
|     |             | `-CXXThisExpr 0x55f75b1389b0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55f75b138a88 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55f75b1389f0 <col:27> 'const char *' lvalue ParmVar 0x55f75b10efb0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55f75b138aa0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55f75b138a10 <col:36> 'int' lvalue ParmVar 0x55f75b10f030 'flags' 'int'
|     |             `-DeclRefExpr 0x55f75b138a30 <col:43> 'Args::Slot *' lvalue Var 0x55f75b1388b8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55f75b138f60 <line:760:9, col:59>
|     | `-VarDecl 0x55f75b138b98 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55f75b138f30 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55f75b138ea0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55f75b138ee8 <col:43> 'T' lvalue ParmVar 0x55f75b10f148 'variable' 'T &'
|     |     `-UnaryOperator 0x55f75b138f18 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55f75b138f08 <col:54> 'Args *' this
|     `-CallExpr 0x55f75b13b988 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55f75b138f88 <col:9> '<bound member function type>' ->postparse 0x55f75b12e2a8
|       | `-CXXThisExpr 0x55f75b138f78 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55f75b13b948 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55f75b138fb8 <col:19> 'T *' lvalue Var 0x55f75b138b98 's' 'T *'
|       | `-ParenExpr 0x55f75b13b928 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55f75b13b8f8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55f75b13b8e0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55f75b13b8c8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55f75b13b8a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55f75b13b878 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|       |     |       `-ImplicitCastExpr 0x55f75b13b860 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55f75b138fd8 <col:25> 'String' lvalue Var 0x55f75b138948 'str' 'String'
|       |     |-CallExpr 0x55f75b13b6d0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55f75b13b560 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55f75b13b5a8 <col:59> 'P' lvalue ParmVar 0x55f75b10f0a8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55f75b13b5c8 <col:67> 'String' lvalue Var 0x55f75b138948 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55f75b13b678 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55f75b13b608 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|       |     | | `-DeclRefExpr 0x55f75b13b5e8 <col:73> 'T *' lvalue Var 0x55f75b138b98 's' 'T *'
|       |     | `-UnaryOperator 0x55f75b13b6b8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55f75b13b6a8 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55f75b13b840 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55f75b13b820 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55f75b13b7f0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55f75b13b7a0 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55f75b13b730 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|       |         | | `-DeclRefExpr 0x55f75b13b710 <col:87> 'T *' lvalue Var 0x55f75b138b98 's' 'T *'
|       |         | `-DeclRefExpr 0x55f75b13b7d0 <col:91> 'const V' lvalue ParmVar 0x55f75b10f1e8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55f75b13b810 <col:98> 'bool' true
|       `-DeclRefExpr 0x55f75b13b968 <col:106> 'Args::Slot *' lvalue Var 0x55f75b1388b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55f75b1176a8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55f75b10f458 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b10f4d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55f75b10f558 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55f75b117608 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55f75b10f620 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b10f6a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b10f718 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b10f7b8 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55f75b1174b0 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55f75b13c998 <col:60, line:773:5>
|     |-DeclStmt 0x55f75b13ba60 <line:767:9, col:26>
|     | `-VarDecl 0x55f75b13b9f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55f75b13c960 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55f75b13c980 <line:768:13, col:58>
|       | `-VarDecl 0x55f75b13ba88 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55f75b13bc68 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55f75b13bc38 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55f75b13bc20 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55f75b13bc00 <col:26, col:58> 'String' (CXXTemporary 0x55f75b13bc00)
|       |           `-CXXMemberCallExpr 0x55f75b13bb90 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55f75b13bb00 <col:26> '<bound member function type>' ->find 0x55f75b12e098
|       |             | `-CXXThisExpr 0x55f75b13baf0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55f75b13bbc8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b13bb30 <col:31> 'const char *' lvalue ParmVar 0x55f75b10f620 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55f75b13bbe0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b13bb50 <col:40> 'int' lvalue ParmVar 0x55f75b10f6a0 'flags' 'int'
|       |             `-DeclRefExpr 0x55f75b13bb70 <col:47> 'Args::Slot *' lvalue Var 0x55f75b13b9f8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55f75b13bd20 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55f75b13bd08 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55f75b13bce8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55f75b13bcb8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|       |       `-ImplicitCastExpr 0x55f75b13bca0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55f75b13bc80 <col:20> 'String' lvalue Var 0x55f75b13ba88 'str' 'String'
|       `-CompoundStmt 0x55f75b13c938 <col:61, line:772:9>
|         |-DeclStmt 0x55f75b13c060 <line:769:13, col:66>
|         | `-VarDecl 0x55f75b13bd78 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55f75b13c030 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55f75b13bfa0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55f75b13bfe8 <col:49> 'T1' lvalue ParmVar 0x55f75b10f7b8 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55f75b13c018 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55f75b13c008 <col:61> 'Args *' this
|         |-DeclStmt 0x55f75b13c3d0 <line:770:13, col:66>
|         | `-VarDecl 0x55f75b13c0e8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55f75b13c3a0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55f75b13c310 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55f75b13c358 <col:49> 'T2' lvalue ParmVar 0x55f75b1174b0 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55f75b13c388 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55f75b13c378 <col:61> 'Args *' this
|         `-CallExpr 0x55f75b13c908 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55f75b13c3f8 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|           | `-CXXThisExpr 0x55f75b13c3e8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55f75b13c8c8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55f75b13c468 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55f75b13c428 <col:23> 'T1 *' lvalue Var 0x55f75b13bd78 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55f75b13c448 <col:29> 'T2 *' lvalue Var 0x55f75b13c0e8 's2' 'T2 *'
|           | `-CallExpr 0x55f75b13c880 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55f75b13c650 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55f75b13c698 <col:63> 'P' lvalue ParmVar 0x55f75b10f718 'parser' 'P'
|           |   |-DeclRefExpr 0x55f75b13c6b8 <col:71> 'String' lvalue Var 0x55f75b13ba88 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55f75b13c768 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55f75b13c6f8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|           |   | `-DeclRefExpr 0x55f75b13c6d8 <col:77> 'T1 *' lvalue Var 0x55f75b13bd78 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55f75b13c828 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55f75b13c7b8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|           |   | `-DeclRefExpr 0x55f75b13c798 <col:82> 'T2 *' lvalue Var 0x55f75b13c0e8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55f75b13c868 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55f75b13c858 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55f75b13c8e8 <col:94> 'Args::Slot *' lvalue Var 0x55f75b13b9f8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55f75b117a98 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55f75b117728 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b1179f8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55f75b1177e0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b117860 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b1178d8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55f75b13ceb0 <col:67, line:780:5>
|     |-DeclStmt 0x55f75b13ca30 <line:777:9, col:26>
|     | `-VarDecl 0x55f75b13c9c8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55f75b13ce78 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55f75b13ce98 <line:778:13, col:58>
|       | `-VarDecl 0x55f75b13ca58 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55f75b13cc38 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55f75b13cc08 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55f75b13cbf0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55f75b13cbd0 <col:26, col:58> 'String' (CXXTemporary 0x55f75b13cbd0)
|       |           `-CXXMemberCallExpr 0x55f75b13cb60 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55f75b13cad0 <col:26> '<bound member function type>' ->find 0x55f75b12e098
|       |             | `-CXXThisExpr 0x55f75b13cac0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55f75b13cb98 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b13cb00 <col:31> 'const char *' lvalue ParmVar 0x55f75b1177e0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55f75b13cbb0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55f75b13cb20 <col:40> 'int' lvalue ParmVar 0x55f75b117860 'flags' 'int'
|       |             `-DeclRefExpr 0x55f75b13cb40 <col:47> 'Args::Slot *' lvalue Var 0x55f75b13c9c8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55f75b13ccf0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55f75b13ccd8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55f75b13ccb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55f75b13cc88 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|       |       `-ImplicitCastExpr 0x55f75b13cc70 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55f75b13cc50 <col:20> 'String' lvalue Var 0x55f75b13ca58 'str' 'String'
|       `-CallExpr 0x55f75b13ce48 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55f75b13cd18 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|         | `-CXXThisExpr 0x55f75b13cd08 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55f75b13cdf8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55f75b13cd68 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55f75b13cd48 <col:23> 'P' lvalue ParmVar 0x55f75b1178d8 'parser' 'P'
|         | |-DeclRefExpr 0x55f75b13cdb0 <col:36> 'String' lvalue Var 0x55f75b13ca58 'str' 'String'
|         | `-UnaryOperator 0x55f75b13cde0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55f75b13cdd0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55f75b13ce28 <col:49> 'Args::Slot *' lvalue Var 0x55f75b13c9c8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55f75b117e38 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55f75b117b08 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55f75b117d98 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55f75b117bc0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b117c40 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b117cb8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55f75b13d820 <col:71, line:792:5>
|     |-DeclStmt 0x55f75b13cf48 <line:784:9, col:26>
|     | `-VarDecl 0x55f75b13cee0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55f75b13d018 <line:785:9, col:29>
|     | `-VarDecl 0x55f75b13cf78 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55f75b13d000 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55f75b13cfe0 <col:28> 'int' 1
|     |-WhileStmt 0x55f75b13d6d0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55f75b13d6f0 <line:786:16, col:61>
|     | | `-VarDecl 0x55f75b13d040 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55f75b13d220 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55f75b13d1f0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55f75b13d1d8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55f75b13d1b8 <col:29, col:61> 'String' (CXXTemporary 0x55f75b13d1b8)
|     | |           `-CXXMemberCallExpr 0x55f75b13d148 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55f75b13d0b8 <col:29> '<bound member function type>' ->find 0x55f75b12e098
|     | |             | `-CXXThisExpr 0x55f75b13d0a8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55f75b13d180 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55f75b13d0e8 <col:34> 'const char *' lvalue ParmVar 0x55f75b117bc0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55f75b13d198 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55f75b13d108 <col:43> 'int' lvalue ParmVar 0x55f75b117c40 'flags' 'int'
|     | |             `-DeclRefExpr 0x55f75b13d128 <col:50> 'Args::Slot *' lvalue Var 0x55f75b13cee0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55f75b13d2d8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55f75b13d2c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55f75b13d2a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55f75b13d270 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|     | |       `-ImplicitCastExpr 0x55f75b13d258 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55f75b13d238 <col:23> 'String' lvalue Var 0x55f75b13d040 'str' 'String'
|     | `-CompoundStmt 0x55f75b13d6a8 <col:64, line:790:9>
|     |   |-CallExpr 0x55f75b13d430 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55f75b13d300 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|     |   | | `-CXXThisExpr 0x55f75b13d2f0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55f75b13d3e0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55f75b13d350 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55f75b13d330 <col:23> 'P' lvalue ParmVar 0x55f75b117cb8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55f75b13d398 <col:36> 'String' lvalue Var 0x55f75b13d040 'str' 'String'
|     |   | | `-UnaryOperator 0x55f75b13d3c8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55f75b13d3b8 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55f75b13d410 <col:49> 'Args::Slot *' lvalue Var 0x55f75b13cee0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55f75b13d5c8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55f75b13d460 <col:13> 'int' lvalue Var 0x55f75b13cf78 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55f75b13d5b0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55f75b13d590 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55f75b13d4f8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55f75b13d4d8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55f75b13d4c0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55f75b13d480 <col:28> 'int' lvalue Var 0x55f75b13cf78 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55f75b13d4a0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55f75b13d578 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55f75b13d548 <col:49> 'bool' lvalue ->_read_status 0x55f75b010450
|     |   |         `-ImplicitCastExpr 0x55f75b13d528 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55f75b13d518 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55f75b13d678 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55f75b13d5e8 <col:13> 'int' lvalue ParmVar 0x55f75b117c40 'flags' 'int'
|     |     `-UnaryOperator 0x55f75b13d660 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55f75b13d648 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55f75b13d628 <col:23> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55f75b13d800 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55f75b13d738 <col:9> 'bool' lvalue ->_read_status 0x55f75b010450
|       | `-ImplicitCastExpr 0x55f75b13d718 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55f75b13d708 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55f75b13d7e0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55f75b13d7c0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55f75b13d7a8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55f75b13d768 <col:25> 'int' lvalue Var 0x55f75b13cf78 'read_status' 'int'
|           `-IntegerLiteral 0x55f75b13d788 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55f75b118318 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55f75b117ea8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b117f28 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b118278 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55f75b117fe8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b118068 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b1180e0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b118188 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55f75b13e7b0 <col:84, line:805:5>
|     |-DeclStmt 0x55f75b13d8c8 <line:796:9, col:26>
|     | `-VarDecl 0x55f75b13d860 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55f75b13d998 <line:797:9, col:29>
|     | `-VarDecl 0x55f75b13d8f8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55f75b13d980 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55f75b13d960 <col:28> 'int' 1
|     |-DeclStmt 0x55f75b13dcd0 <line:798:9, col:71>
|     | `-VarDecl 0x55f75b13d9e8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55f75b13dca0 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55f75b13dc10 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55f75b13dc58 <col:55> 'T' lvalue ParmVar 0x55f75b118188 'variable' 'T &'
|     |     `-UnaryOperator 0x55f75b13dc88 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55f75b13dc78 <col:66> 'Args *' this
|     |-WhileStmt 0x55f75b13e660 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55f75b13e680 <line:799:16, col:61>
|     | | `-VarDecl 0x55f75b13dcf8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55f75b13ded8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55f75b13dea8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55f75b13de90 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55f75b13de70 <col:29, col:61> 'String' (CXXTemporary 0x55f75b13de70)
|     | |           `-CXXMemberCallExpr 0x55f75b13de00 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55f75b13dd70 <col:29> '<bound member function type>' ->find 0x55f75b12e098
|     | |             | `-CXXThisExpr 0x55f75b13dd60 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55f75b13de38 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55f75b13dda0 <col:34> 'const char *' lvalue ParmVar 0x55f75b117fe8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55f75b13de50 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55f75b13ddc0 <col:43> 'int' lvalue ParmVar 0x55f75b118068 'flags' 'int'
|     | |             `-DeclRefExpr 0x55f75b13dde0 <col:50> 'Args::Slot *' lvalue Var 0x55f75b13d860 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55f75b13df90 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55f75b13df78 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55f75b13df58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55f75b13df28 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|     | |       `-ImplicitCastExpr 0x55f75b13df10 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55f75b13def0 <col:23> 'String' lvalue Var 0x55f75b13dcf8 'str' 'String'
|     | `-CompoundStmt 0x55f75b13e638 <col:64, line:803:9>
|     |   |-CallExpr 0x55f75b13e3c0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55f75b13dfb8 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|     |   | | `-CXXThisExpr 0x55f75b13dfa8 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55f75b13e380 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55f75b13dfe8 <col:23> 'T *' lvalue Var 0x55f75b13d9e8 's' 'T *'
|     |   | | `-CallExpr 0x55f75b13e340 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55f75b13e1d0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55f75b13e218 <col:56> 'P' lvalue ParmVar 0x55f75b1180e0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55f75b13e238 <col:64> 'String' lvalue Var 0x55f75b13dcf8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55f75b13e2e8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55f75b13e278 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|     |   | |   | `-DeclRefExpr 0x55f75b13e258 <col:70> 'T *' lvalue Var 0x55f75b13d9e8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55f75b13e328 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55f75b13e318 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55f75b13e3a0 <col:81> 'Args::Slot *' lvalue Var 0x55f75b13d860 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55f75b13e558 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55f75b13e3f0 <col:13> 'int' lvalue Var 0x55f75b13d8f8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55f75b13e540 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55f75b13e520 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55f75b13e488 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55f75b13e468 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55f75b13e450 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55f75b13e410 <col:28> 'int' lvalue Var 0x55f75b13d8f8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55f75b13e430 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55f75b13e508 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55f75b13e4d8 <col:49> 'bool' lvalue ->_read_status 0x55f75b010450
|     |   |         `-ImplicitCastExpr 0x55f75b13e4b8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55f75b13e4a8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55f75b13e608 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55f75b13e578 <col:13> 'int' lvalue ParmVar 0x55f75b118068 'flags' 'int'
|     |     `-UnaryOperator 0x55f75b13e5f0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55f75b13e5d8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55f75b13e5b8 <col:23> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55f75b13e790 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55f75b13e6c8 <col:9> 'bool' lvalue ->_read_status 0x55f75b010450
|       | `-ImplicitCastExpr 0x55f75b13e6a8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55f75b13e698 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55f75b13e770 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55f75b13e750 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55f75b13e738 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55f75b13e6f8 <col:25> 'int' lvalue Var 0x55f75b13d8f8 'read_status' 'int'
|           `-IntegerLiteral 0x55f75b13e718 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55f75b1188f8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55f75b118390 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55f75b118408 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55f75b118858 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55f75b1184c8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55f75b118548 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55f75b1185c0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55f75b118710 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55f75b13f5b8 <col:87, line:821:5>
|     |-DeclStmt 0x55f75b13e860 <line:809:9, col:26>
|     | `-VarDecl 0x55f75b13e7f8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55f75b13e930 <line:810:9, col:29>
|     | `-VarDecl 0x55f75b13e890 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55f75b13e918 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55f75b13e8f8 <col:28> 'int' 1
|     |-DeclStmt 0x55f75b13eb78 <line:811:9, col:38>
|     | `-VarDecl 0x55f75b13ea60 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55f75b13eb50 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55f75b13ead8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55f75b13eb30 <col:29> 'Vector<T>' lvalue ParmVar 0x55f75b118710 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55f75b13f468 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55f75b13f488 <line:812:16, col:61>
|     | | `-VarDecl 0x55f75b13eba0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55f75b13ed80 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55f75b13ed50 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55f75b13ed38 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55f75b13ed18 <col:29, col:61> 'String' (CXXTemporary 0x55f75b13ed18)
|     | |           `-CXXMemberCallExpr 0x55f75b13eca8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55f75b13ec18 <col:29> '<bound member function type>' ->find 0x55f75b12e098
|     | |             | `-CXXThisExpr 0x55f75b13ec08 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55f75b13ece0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55f75b13ec48 <col:34> 'const char *' lvalue ParmVar 0x55f75b1184c8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55f75b13ecf8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55f75b13ec68 <col:43> 'int' lvalue ParmVar 0x55f75b118548 'flags' 'int'
|     | |             `-DeclRefExpr 0x55f75b13ec88 <col:50> 'Args::Slot *' lvalue Var 0x55f75b13e7f8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55f75b13ee38 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55f75b13ee20 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55f75b13ee00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55f75b13edd0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55f75ae5d488
|     | |       `-ImplicitCastExpr 0x55f75b13edb8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55f75b13ed98 <col:23> 'String' lvalue Var 0x55f75b13eba0 'str' 'String'
|     | `-CompoundStmt 0x55f75b13f430 <col:64, line:819:9>
|     |   |-DeclStmt 0x55f75b13eef8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55f75b13ee60 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55f75b13eed8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55f75b13f078 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55f75b13ef20 <col:13> '<bound member function type>' ->postparse 0x55f75b12e2a8
|     |   | | `-CXXThisExpr 0x55f75b13ef10 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55f75b13f020 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55f75b13ef70 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55f75b13ef50 <col:23> 'P' lvalue ParmVar 0x55f75b1185c0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55f75b13efb8 <col:36> 'String' lvalue Var 0x55f75b13eba0 'str' 'String'
|     |   | | |-DeclRefExpr 0x55f75b13efd8 <col:41> 'T' lvalue Var 0x55f75b13ee60 'sx' 'T'
|     |   | | `-UnaryOperator 0x55f75b13f008 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55f75b13eff8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55f75b13f058 <col:53> 'Args::Slot *' lvalue Var 0x55f75b13e7f8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55f75b13f1d0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55f75b13f108 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55f75b13f0d8 <col:17> 'bool' lvalue ->_read_status 0x55f75b010450
|     |   | |   `-ImplicitCastExpr 0x55f75b13f0b8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55f75b13f0a8 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55f75b13f1a8 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55f75b13f140 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55f75b13f120 <col:17> 'Vector<T> *' lvalue Var 0x55f75b13ea60 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55f75b13f188 <col:30> 'T' lvalue Var 0x55f75b13ee60 'sx' 'T'
|     |   |-BinaryOperator 0x55f75b13f350 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55f75b13f1e8 <col:13> 'int' lvalue Var 0x55f75b13e890 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55f75b13f338 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55f75b13f318 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55f75b13f280 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55f75b13f260 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55f75b13f248 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55f75b13f208 <col:28> 'int' lvalue Var 0x55f75b13e890 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55f75b13f228 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55f75b13f300 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55f75b13f2d0 <col:49> 'bool' lvalue ->_read_status 0x55f75b010450
|     |   |         `-ImplicitCastExpr 0x55f75b13f2b0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55f75b13f2a0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55f75b13f400 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55f75b13f370 <col:13> 'int' lvalue ParmVar 0x55f75b118548 'flags' 'int'
|     |     `-UnaryOperator 0x55f75b13f3e8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55f75b13f3d0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55f75b13f3b0 <col:23> 'const int' lvalue Var 0x55f75b0fc318 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55f75b13f598 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55f75b13f4d0 <col:9> 'bool' lvalue ->_read_status 0x55f75b010450
|       | `-ImplicitCastExpr 0x55f75b13f4b0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55f75b13f4a0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55f75b13f578 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55f75b13f558 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55f75b13f540 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55f75b13f500 <col:25> 'int' lvalue Var 0x55f75b13e890 'read_status' 'int'
|           `-IntegerLiteral 0x55f75b13f520 <col:40> 'int' 1
|-AccessSpecDecl 0x55f75b118970 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55f75b118998 prev 0x55f75b0fa618 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55f75b118a90 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55f75b118b80 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55f75b13f5f0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55f75b118c70 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55f75b13f600 <col:25, line:830:9>
| |-CXXMethodDecl 0x55f75b118d70 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55f75b118e20 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55f75b118ec8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55f75b118ec8
| | `-ParmVarDecl 0x55f75b118fd8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55f75b119798 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55f75b119798
|   `-ParmVarDecl 0x55f75b1198a8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55f75b119048 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55f75b1191a8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55f75b1193a0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55f75b119250 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55f75b1192c8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55f75b13f7e0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55f75b119658 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55f75b13f650 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f75b13f610 <col:20> 'void *' lvalue ParmVar 0x55f75b119250 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55f75b1196c0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55f75b13f6d8 <col:32, col:45> 'char *' array Function 0x55f75ac7fa98 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55f75b13f6c0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55f75b13f690 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55f75b1192c8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55f75b119720 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55f75b13f7a0 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55f75b13f760 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55f75b1192c8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55f75b13f860 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55f75b1194a0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55f75b118c70 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55f75b13f8e8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55f75b13f8c8 <line:840:13, col:22> 'void' array Function 0x55f75ac7fdf8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55f75b13f8b0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55f75b13f880 <col:22> 'char *' lvalue ->_slot 0x55f75b1196c0
| |         `-CXXThisExpr 0x55f75b13f870 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55f75b1195a0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55f75b118d70 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55f75b13fad8 <col:22, line:844:9>
| |   `-CallExpr 0x55f75b13fa40 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55f75b13fa28 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55f75b13fa08 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55f75ad8bed8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55f75b13fa78 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55f75b13f958 <col:20> 'void *' lvalue ->_ptr 0x55f75b119658
| |     |   `-CXXThisExpr 0x55f75b13f948 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55f75b13faa8 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55f75b13fa90 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55f75b13f998 <col:26> 'char *' lvalue ->_slot 0x55f75b1196c0
| |     |     `-CXXThisExpr 0x55f75b13f988 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55f75b13fac0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55f75b13f9d8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55f75b119720
| |         `-CXXThisExpr 0x55f75b13f9c8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55f75b119658 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55f75b1196c0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55f75b119720 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55f75b119918 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55f75b119918
| | `-ParmVarDecl 0x55f75b119a28 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55f75b119ac8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55f75b119ac8
|   `-ParmVarDecl 0x55f75b119bd8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55f75b119d78 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55f75b119c48 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55f75b119ce8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55f75b11a010 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55f75b11a208 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55f75b11a0d8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55f75b11a388 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55f75b13fb10 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55f75b13faf0 <col:20> 'T *' lvalue ParmVar 0x55f75b11a0d8 'ptr' 'T *'
|   | `-CompoundStmt 0x55f75b13fb60 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55f75b11a2d8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55f75b118d70 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55f75b13fd10 <col:22, line:857:9>
|   |   `-CallExpr 0x55f75b13fce0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55f75b13fb70 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55f75ae44608 0x55f75adee938
|   |     |-CXXOperatorCallExpr 0x55f75b13fc70 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55f75b13fc00 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55f75b0515b8 0x55f75b0511d8 0x55f75b050e08 0x55f75b050a28 0x55f75b050648 0x55f75b050278
|   |     | `-MemberExpr 0x55f75b13fbd0 <col:29> 'T *' lvalue ->_ptr 0x55f75b11a388
|   |     |   `-CXXThisExpr 0x55f75b13fbc0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55f75b13fcb0 <col:35> 'T' lvalue ->_slot 0x55f75b11a3e8
|   |       `-CXXThisExpr 0x55f75b13fca0 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55f75b11a388 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55f75b11a3e8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55f75b11a450 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55f75b11a550 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55f75b11a5a0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b11a530 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55f75b11a510 <col:31> 'int' 48
|-FieldDecl 0x55f75b11a5c8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55f75b11a628 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55f75b11a688 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55f75b11a7c0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55f75b12d940 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55f75b12d9a0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55f75b12da50 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55f75b12dc78 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55f75b12db80 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55f75b12ddc8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55f75b12dd38 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55f75b12e098 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55f75b12de88 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55f75b12df08 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55f75b12dfb0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55f75b12e2a8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55f75b12e160 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55f75b12e1d8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55f75b12e378 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55f75b12e4c8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55f75b12e430 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55f75b12e858 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55f75b12e588 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55f75b12e608 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55f75b12e6b0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55f75b12e768 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55f75b12ea80 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55f75b12e930 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55f75b12e9a8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55f75b12ed98 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55f75b12eb30 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55f75b12ecf8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55f75b12ec08 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75ae4d330 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75ae4d448 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55f75ae4d4d8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55f75ae4d5a8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55f75ae4d690 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75ae4d8a8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55f75ae4d750 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4da58 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55f75ae4d960 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55f75ae4dba0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55f75ae4db10 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55f75ae4dce8 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55f75ae4dc58 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4de30 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55f75ae4dda0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4def8 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55f75ae4e040 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55f75ae4dfb0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55f75ae4e108 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55f75ae4e250 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55f75ae4e1c0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55f75ae4e3c8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55f75ae4e308 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4e510 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55f75ae4e480 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4e5d8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55f75ae4e798 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55f75ae4e688 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55f75ae4e700 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4e9e8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55f75ae4e858 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55f75ae4e8d0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55f75ae4ea98 <col:86> "" ""
|-CXXMethodDecl 0x55f75ae4ed08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55f75ae4eb78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55f75ae4ebf0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4eeb8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55f75ae4edc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55f75ae4f068 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55f75ae4ef70 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55f75ae4f338 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55f75ae4f120 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55f75ae4f198 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55f75ae4f210 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae4f618 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55f75ae4f400 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55f75ae4f478 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55f75ae4f4f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55f75ae4f6d0 <col:115> "" ""
|-AccessSpecDecl 0x55f75ae4f740 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55f75ae4f778 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75ae50c90 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55f75ae50c90
| `-ParmVarDecl 0x55f75ae50d98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55f75ae50e38 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55f75ae50e38
| `-ParmVarDecl 0x55f75ae50f48 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55f75ae86578 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55f75b0788f0 <col:7>
|-CXXConstructorDecl 0x55f75ae86650 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55f75ae86650
| `-ParmVarDecl 0x55f75ae86768 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55f75ae867d8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55f75ae867d8
| `-ParmVarDecl 0x55f75ae868e8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55f75b07dd00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b067458 prev 0x55f75b05c120 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75b067550 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55f75b067640 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55f75b067768 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55f75b0678e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55f75b067a68 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55f75b067be8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55f75b078a58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55f75b0792c8 <col:11>
|-CXXDestructorDecl 0x55f75b078b30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55f75b078c68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55f75b078c68
| `-ParmVarDecl 0x55f75b078d78 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55f75b078e18 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55f75b078e18
| `-ParmVarDecl 0x55f75b078f28 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55f75b07e6f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55f75b07e808 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55f75b07ea88 <col:11>
|   `-ReturnStmt 0x55f75b07ea78 <col:11>
|     `-UnaryOperator 0x55f75b07ea60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55f75b07ea50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55f75b07e878 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55f75b07e878
  `-ParmVarDecl 0x55f75b07e988 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b067c50 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75b067d68 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55f75b067e08 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55f75b067e70 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55f75b067ed8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55f75b067f40 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55f75b067fa0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55f75b068060 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55f75b0680c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55f75b068120 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55f75b078968 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55f75b067e08 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55f75b0792d8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55f75b079330 <col:12>
|-CXXConstructorDecl 0x55f75b078f98 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55f75b078f98
| `-ParmVarDecl 0x55f75b0790a8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55f75b079148 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55f75b079148
| `-ParmVarDecl 0x55f75b079258 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55f75b07dde0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b055830 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55f75b055948 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55f75b0559d8 <col:16, col:22> col:16 public
|-EnumDecl 0x55f75b055a00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55f75b055b00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55f75b055be0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b055ae0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55f75b055ac0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55f75b055b90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55f75b055bf8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b055b70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55f75b055b50 <col:22> 'int' 64
|-CXXMethodDecl 0x55f75b055f38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55f75b055c20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55f75b055ca0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55f75b055d18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55f75b055d90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55f75b055ff8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55f75b0561f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55f75b056070 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55f75b0560e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55f75b0562a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55f75b056408 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55f75b056318 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55f75b0564b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55f75b056810 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55f75b0567a0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55f75b056740 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55f75b056700 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55f75ab2d2d0 'void'
|       |-PointerType 0x55f75add5bd0 'unsigned char *'
|       | `-BuiltinType 0x55f75ab2d3d0 'unsigned char'
|       |-TypedefType 0x55f75abd1ae0 'size_t' sugar
|       | |-Typedef 0x55f75ab9db20 'size_t'
|       | `-BuiltinType 0x55f75ab2d430 'unsigned long'
|       `-PointerType 0x55f75ab2dad0 'void *'
|         `-BuiltinType 0x55f75ab2d2d0 'void'
|-CXXMethodDecl 0x55f75b056c88 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55f75b056880 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55f75b0568f8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55f75b056990 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55f75b056a10 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55f75b071900 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55f75b0718e8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55f75b0718b0 <col:58> 'int' 0
| |-ParmVarDecl 0x55f75b056a90 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55f75b071928 <col:76> 'int' 0
| |-ParmVarDecl 0x55f75b056b10 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55f75b071948 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55f75b056d58 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55f75b056dd8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55f75b056e98 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55f75b056f38 <col:20>
| `-OptimizeNoneAttr 0x55f75b056f90 <col:30>
|-CXXMethodDecl 0x55f75b057008 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55f75b0570a8 <col:20>
| `-OptimizeNoneAttr 0x55f75b057100 <col:30>
|-CXXMethodDecl 0x55f75b057178 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55f75b057218 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55f75b0572c8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55f75b057368 <col:20>
| |-OptimizeNoneAttr 0x55f75b0573c0 <col:30>
| `-WarnUnusedResultAttr 0x55f75b0573e8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55f75b057440 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55f75b0574e0 <col:20>
| `-OptimizeNoneAttr 0x55f75b057538 <col:30>
|-CXXMethodDecl 0x55f75b057588 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55f75b057628 <col:20>
| `-OptimizeNoneAttr 0x55f75b057680 <col:30>
|-CXXMethodDecl 0x55f75b0576c8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55f75b057768 <col:20>
| `-OptimizeNoneAttr 0x55f75b0577c0 <col:30>
|-CXXMethodDecl 0x55f75b057808 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75b0578c8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75b057990 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55f75b057a58 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55f75b057b18 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75b057c38 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55f75b071a10 <col:54, line:99:5>
|   `-ReturnStmt 0x55f75b071a00 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55f75b0719e8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55f75b0719b8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55f75b068458
|         `-CXXThisExpr 0x55f75b0719a8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55f75b057dd8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55f75b057ce8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55f75b071ac0 <col:67, line:103:5>
|   `-BinaryOperator 0x55f75b071aa0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55f75b071a38 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55f75b068458
|     | `-CXXThisExpr 0x55f75b071a28 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55f75b071a88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b071a68 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55f75b057ce8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55f75b057ed0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55f75b071b40 <col:33, line:107:5>
|   `-ReturnStmt 0x55f75b071b30 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55f75b071b18 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55f75b071ae8 <col:16> 'void *' lvalue ->_destructor_argument 0x55f75b0684c0
|         `-CXXThisExpr 0x55f75b071ad8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55f75b057f90 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55f75b072170 <col:25, line:113:5>
|   |-ParenExpr 0x55f75b071eb8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55f75b071e88 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b071bf8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55f75b071bd0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55f75b071b98 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55f75b071b68 <col:24> '<bound member function type>' ->shared 0x55f75b057008
|   |   |       `-ImplicitCastExpr 0x55f75b071bb8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55f75b071b58 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55f75b071c58 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b071c38 <col:42> 'int' 0
|   |   `-CallExpr 0x55f75b071de8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55f75b071dd0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b071db0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b071e28 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b071cc8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55f75b071e40 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b071cf0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b071e58 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b071d28 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55f75b071e70 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b071d98 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b071d80 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b071d48 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55f75b0720b8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55f75b071ee8 <col:2> 'unsigned char *' lvalue ->_head 0x55f75b068260
|   | | `-CXXThisExpr 0x55f75b071ed8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55f75b0720a0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55f75b072080 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55f75b071f28 <col:10> 'unsigned char *' lvalue ->_data 0x55f75b0682c8
|   |     | `-CXXThisExpr 0x55f75b071f18 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55f75b072068 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55f75b072048 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55f75b071f68 <col:18> 'unsigned char *' lvalue ->_tail 0x55f75b068330
|   |         | `-CXXThisExpr 0x55f75b071f58 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55f75b072030 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55f75b072010 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55f75b071fa8 <col:26> 'unsigned char *' lvalue ->_end 0x55f75b068398
|   |             | `-CXXThisExpr 0x55f75b071f98 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55f75b071ff8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55f75b071fd8 <col:33> 'int' 0
|   `-BinaryOperator 0x55f75b072150 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55f75b0720e8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55f75b068458
|     | `-CXXThisExpr 0x55f75b0720d8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55f75b072138 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55f75b072118 <col:16> 'int' 0
|-CXXMethodDecl 0x55f75b0580d0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55f75b058040 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b058178 <col:20>
| |-OptimizeNoneAttr 0x55f75b0581d0 <col:30>
| `-WarnUnusedResultAttr 0x55f75b0581f8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55f75b0582c8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55f75b058238 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b058370 <col:20>
| |-OptimizeNoneAttr 0x55f75b0583c8 <col:30>
| `-WarnUnusedResultAttr 0x55f75b0583f0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55f75b058528 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55f75b058430 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55f75b0585d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55f75b0586d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55f75b058640 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b058778 <col:20>
| `-OptimizeNoneAttr 0x55f75b0587d0 <col:30>
|-CXXMethodDecl 0x55f75b058898 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55f75b058808 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55f75b058940 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55f75b058a40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55f75b0589b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55f75b058ae8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55f75b058be8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55f75b058b58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b058c90 <col:20>
| `-OptimizeNoneAttr 0x55f75b058ce8 <col:30>
|-CXXMethodDecl 0x55f75b058e78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55f75b058d28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55f75b058da0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55f75b071968 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55f75b058f28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55f75b059128 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55f75b058fa0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55f75b059018 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b059338 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55f75b0591e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55f75b059260 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b059548 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55f75b0593f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55f75b059478 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55f75b071978 <col:39> 'int' 0
|-CXXMethodDecl 0x55f75b059618 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55f75b0596e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55f75b0597a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55f75b059868 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75b059930 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55f75b059a78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55f75b0599e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55f75b059c48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55f75b059b38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55f75b059bb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b059d18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55f75b059dd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55f75b059e78 <col:20>
| `-OptimizeNoneAttr 0x55f75b059ed0 <col:30>
|-CXXMethodDecl 0x55f75b059f20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55f75b059fc0 <col:20>
| `-OptimizeNoneAttr 0x55f75b05a018 <col:30>
|-CXXMethodDecl 0x55f75b05a068 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55f75b05a128 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75b05a1f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55f75b05a290 <col:20>
| `-OptimizeNoneAttr 0x55f75b05a2e8 <col:30>
|-CXXMethodDecl 0x55f75b05a438 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55f75b05a328 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55f75b05a3a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b05a588 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55f75b05a4f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b05a660 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55f75b05a720 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55f75b05a7c0 <col:20>
| `-OptimizeNoneAttr 0x55f75b05a818 <col:30>
|-CXXMethodDecl 0x55f75b05a868 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55f75b05a908 <col:20>
| `-OptimizeNoneAttr 0x55f75b05a960 <col:30>
|-CXXMethodDecl 0x55f75b05a9b0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55f75b05aa78 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55f75b05ab18 <col:20>
| `-OptimizeNoneAttr 0x55f75b05ab70 <col:30>
|-CXXMethodDecl 0x55f75b05abb8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55f75b05acd8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55f75b05ae48 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55f75b05ad88 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55f75b05af38 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55f75b05afd8 <col:20>
| `-OptimizeNoneAttr 0x55f75b05b030 <col:30>
|-CXXMethodDecl 0x55f75b05b080 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55f75b05b140 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55f75b05b378 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55f75b05b1f0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55f75b05b268 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b05b428 <col:20>
| `-OptimizeNoneAttr 0x55f75b05b480 <col:30>
|-CXXMethodDecl 0x55f75b05b528 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55f75b05b5c8 <col:20>
| `-OptimizeNoneAttr 0x55f75b05b620 <col:30>
|-CXXMethodDecl 0x55f75b05b670 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55f75b05b710 <col:20>
| `-OptimizeNoneAttr 0x55f75b05b768 <col:30>
|-CXXMethodDecl 0x55f75b05b7b0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55f75b05b850 <col:20>
| `-OptimizeNoneAttr 0x55f75b05b8a8 <col:30>
|-CXXMethodDecl 0x55f75b05b9a8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55f75b05b8e0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55f75b05ba50 <col:20>
| `-OptimizeNoneAttr 0x55f75b05baa8 <col:30>
|-CXXMethodDecl 0x55f75b05bc68 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55f75b05bae0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55f75b05bb58 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b05bd18 <col:20>
| `-OptimizeNoneAttr 0x55f75b05bd70 <col:30>
|-CXXMethodDecl 0x55f75b05be18 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55f75b05bf38 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55f75b05c058 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55f75b05c0f8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55f75b05c120 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55f75b05c248 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55f75b05c2e8 <col:20>
| `-OptimizeNoneAttr 0x55f75b05c340 <col:30>
|-CXXMethodDecl 0x55f75b05c3e8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55f75b05c488 <col:20>
| `-OptimizeNoneAttr 0x55f75b05c4e0 <col:30>
|-AccessSpecDecl 0x55f75b05c508 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55f75b05c530 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55f75b05c630 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55f75b05c680 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b05c610 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55f75b05c5f0 <col:14> 'int' 48
|-CXXMethodDecl 0x55f75b05c6e8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55f75b05c788 <col:20>
| `-OptimizeNoneAttr 0x55f75b05c7e0 <col:30>
|-CXXMethodDecl 0x55f75b05c858 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55f75b05c8f8 <col:20>
| `-OptimizeNoneAttr 0x55f75b05c950 <col:30>
|-CXXMethodDecl 0x55f75b05ca18 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55f75b05c988 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55f75b05cbb8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55f75b05cd58 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55f75b05cc68 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55f75b05ce00 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55f75b05cf00 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55f75b05d2b0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05cee0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55f75b05cec0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55f75b05cf90 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55f75b05d2c8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05cf70 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55f75b05cf50 <col:14> 'int' 1
| |-EnumConstantDecl 0x55f75b05d020 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55f75b05d2e0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05d000 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55f75b05cfe0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55f75b05d0b0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55f75b05d2f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05d090 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55f75b05d070 <col:14> 'int' 3
| |-EnumConstantDecl 0x55f75b05d140 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55f75b05d310 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05d120 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55f75b05d100 <col:13> 'int' 4
| |-EnumConstantDecl 0x55f75b05d1d0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55f75b05d328 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05d1b0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55f75b05d190 <col:13> 'int' 5
| `-EnumConstantDecl 0x55f75b05d260 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55f75b05d340 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b05d240 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55f75b05d220 <col:14> 'int' 6
|-CXXMethodDecl 0x55f75b05d3a8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55f75b05d448 <col:20>
| `-OptimizeNoneAttr 0x55f75b05d4a0 <col:30>
|-CXXMethodDecl 0x55f75b05d598 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55f75b05d4d8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55f75b05d640 <col:20>
| `-OptimizeNoneAttr 0x55f75b05d698 <col:30>
|-CXXMethodDecl 0x55f75b05d708 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55f75b05d830 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55f75b05d9a8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55f75b05d8e0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55f75b05da70 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55f75b05db38 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55f75b05dc78 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55f75b05dbe8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55f75b05dd20 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55f75b05de20 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55f75b05e020 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05de00 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55f75b05dde0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55f75b05deb0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55f75b05e038 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05de90 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55f75b05de70 <col:45> 'int' 4
| |-EnumConstantDecl 0x55f75b05df40 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55f75b05e050 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b05df20 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55f75b05df00 <col:24> 'int' 0
| `-EnumConstantDecl 0x55f75b05dfd0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55f75b05e068 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b05dfb0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55f75b05df90 <col:47> 'int' 16
|-CXXMethodDecl 0x55f75b05e0c8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55f75b05e238 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55f75b05e178 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55f75b05e2e0 <col:20>
| `-OptimizeNoneAttr 0x55f75b05e338 <col:30>
|-CXXMethodDecl 0x55f75b05e388 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55f75b072290 <col:18, col:36>
|   `-ReturnStmt 0x55f75b072280 <col:20, col:33>
|     `-ImplicitCastExpr 0x55f75b072268 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55f75b072248 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55f75b072218 <col:27> '<bound member function type>' ->xanno 0x55f75b05c3e8
|           `-CXXThisExpr 0x55f75b072208 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55f75b05e480 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55f75b0723a0 <col:30, col:48>
|   `-ReturnStmt 0x55f75b072390 <col:32, col:45>
|     `-ImplicitCastExpr 0x55f75b072378 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55f75b072358 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55f75b072328 <col:39> '<bound member function type>' ->xanno 0x55f75b05c248
|           `-CXXThisExpr 0x55f75b072318 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55f75b05e568 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55f75b072538 <col:24, col:50>
|   `-ReturnStmt 0x55f75b072528 <col:26, col:47>
|     `-UnaryOperator 0x55f75b072510 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55f75b0724f0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55f75b0724d8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55f75b072488 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55f75b067768
|         |   `-CXXMemberCallExpr 0x55f75b072468 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55f75b072438 <col:34> '<bound member function type>' ->xanno 0x55f75b05c3e8
|         |       `-CXXThisExpr 0x55f75b072428 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55f75b0724b8 <col:46> 'int' 0
|-CXXMethodDecl 0x55f75b05e670 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55f75b072708 <col:36, col:62>
|   `-ReturnStmt 0x55f75b0726f8 <col:38, col:59>
|     `-UnaryOperator 0x55f75b0726e0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55f75b0726c0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55f75b0726a8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55f75b072620 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55f75b067768
|         |   `-CXXMemberCallExpr 0x55f75b072600 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55f75b0725d0 <col:46> '<bound member function type>' ->xanno 0x55f75b05c248
|         |       `-CXXThisExpr 0x55f75b0725c0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55f75b072650 <col:58> 'int' 0
|-CXXMethodDecl 0x55f75b05e788 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55f75b0728a0 <col:26, col:53>
|   `-ReturnStmt 0x55f75b072890 <col:28, col:50>
|     `-UnaryOperator 0x55f75b072878 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55f75b072858 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55f75b072840 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55f75b0727f0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55f75b067a68
|         |   `-CXXMemberCallExpr 0x55f75b0727d0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55f75b0727a0 <col:36> '<bound member function type>' ->xanno 0x55f75b05c3e8
|         |       `-CXXThisExpr 0x55f75b072790 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55f75b072820 <col:49> 'int' 0
|-CXXMethodDecl 0x55f75b05e8a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55f75b072a78 <col:38, col:65>
|   `-ReturnStmt 0x55f75b072a68 <col:40, col:62>
|     `-UnaryOperator 0x55f75b072a50 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55f75b072a30 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55f75b072a18 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55f75b072988 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55f75b067a68
|         |   `-CXXMemberCallExpr 0x55f75b072968 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55f75b072938 <col:48> '<bound member function type>' ->xanno 0x55f75b05c248
|         |       `-CXXThisExpr 0x55f75b072928 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55f75b0729b8 <col:61> 'int' 0
|-CXXMethodDecl 0x55f75b05ea58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55f75b05e960 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55f75b073148 <col:34, line:463:5>
|   |-ParenExpr 0x55f75b072f90 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55f75b072f60 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b072bc8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b072b98 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b072ae8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b072ad0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b072a90 <col:23> 'int' lvalue ParmVar 0x55f75b05e960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b072ab0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b072b78 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b072b48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b072b08 <col:33> 'int' lvalue ParmVar 0x55f75b05e960 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55f75b072b60 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55f75b072b28 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55f75b072c28 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b072c08 <col:56> 'int' 0
|   |   `-CallExpr 0x55f75b072ec0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55f75b072ea8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b072e88 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b072f00 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b072d18 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55f75b072f18 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b072d48 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b072f30 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b072d80 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55f75b072f48 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b072e70 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b072e58 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b072e18 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55f75b073138 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55f75b073120 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55f75b073100 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55f75b0730d0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55f75b073080 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55f75b067768
|         |   `-CXXMemberCallExpr 0x55f75b073060 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55f75b073030 <col:9> '<bound member function type>' ->xanno 0x55f75b05c248
|         |       `-CXXThisExpr 0x55f75b073020 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55f75b0730e8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55f75b0730b0 <col:21> 'int' lvalue ParmVar 0x55f75b05e960 'i' 'int'
|-CXXMethodDecl 0x55f75b05eca8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55f75b05eb18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55f75b05eb90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55f75b0737d8 <col:40, line:472:5>
|   |-ParenExpr 0x55f75b0735f0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55f75b0735c0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b0732a0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b073270 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b0731c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b0731a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b073168 <col:23> 'int' lvalue ParmVar 0x55f75b05eb18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b073188 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b073250 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b073220 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b0731e0 <col:33> 'int' lvalue ParmVar 0x55f75b05eb18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55f75b073238 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55f75b073200 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55f75b073300 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b0732e0 <col:56> 'int' 0
|   |   `-CallExpr 0x55f75b073520 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55f75b073508 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b0734e8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b073560 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b073370 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55f75b073578 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0733a0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b073590 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b0733d8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55f75b0735a8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b0734d0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b0734b8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b073478 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55f75b0737b8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55f75b073760 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55f75b073730 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55f75b0736e0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55f75b067768
|     | |   `-CXXMemberCallExpr 0x55f75b0736c0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55f75b073690 <col:2> '<bound member function type>' ->xanno 0x55f75b05c3e8
|     | |       `-CXXThisExpr 0x55f75b073680 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55f75b073748 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55f75b073710 <col:14> 'int' lvalue ParmVar 0x55f75b05eb18 'i' 'int'
|     `-ImplicitCastExpr 0x55f75b0737a0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b073780 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55f75b05eb90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55f75b05ee68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55f75b05ed70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55f75b073f58 <col:36, line:485:5>
|   |-ParenExpr 0x55f75b073cc0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b073c90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b073970 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b073940 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b073850 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b073838 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b0737f8 <col:23> 'int' lvalue ParmVar 0x55f75b05ed70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b073818 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b073920 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b073908 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b073870 <col:33> 'int' lvalue ParmVar 0x55f75b05ed70 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b0738e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b0738d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b073890 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b0738b0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55f75b0739d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b0739b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b073bf0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b073bd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b073bb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b073c30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b073a40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55f75b073c48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b073a78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b073c60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b073ab0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55f75b073c78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b073ba0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b073b88 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b073b48 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55f75b073f48 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55f75b073f30 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55f75b073f18 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55f75b073ee8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55f75b073e88 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55f75b073e58 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55f75b073dd0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55f75b067640
|             |   `-CXXMemberCallExpr 0x55f75b073db0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55f75b073d80 <col:61> '<bound member function type>' ->xanno 0x55f75b05c248
|             |       `-CXXThisExpr 0x55f75b073d70 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55f75b073e70 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55f75b073e00 <col:74> 'int' lvalue ParmVar 0x55f75b05ed70 'i' 'int'
|-CXXMethodDecl 0x55f75b05f0b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55f75b05ef28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55f75b05efa0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55f75b0746a8 <col:42, line:500:5>
|   |-ParenExpr 0x55f75b074440 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b074410 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b0740f0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b0740c0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b073fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b073fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b073f78 <col:23> 'int' lvalue ParmVar 0x55f75b05ef28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b073f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b0740a0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b074088 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b073ff0 <col:33> 'int' lvalue ParmVar 0x55f75b05ef28 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b074068 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b074050 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b074010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b074030 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55f75b074150 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b074130 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b074370 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b074358 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b074338 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b0743b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0741c0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55f75b0743c8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0741f8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b0743e0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b074230 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55f75b0743f8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b074320 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b074308 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b0742c8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55f75b074688 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55f75b074638 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55f75b074608 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55f75b0745b0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55f75b074580 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55f75b074530 <col:48, col:57> 'char [48]' lvalue ->c 0x55f75b067640
|     |     |   `-CXXMemberCallExpr 0x55f75b074510 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55f75b0744e0 <col:48> '<bound member function type>' ->xanno 0x55f75b05c3e8
|     |     |       `-CXXThisExpr 0x55f75b0744d0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55f75b074598 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f75b074560 <col:61> 'int' lvalue ParmVar 0x55f75b05ef28 'i' 'int'
|     `-ImplicitCastExpr 0x55f75b074670 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b074650 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55f75b05efa0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55f75b05f278 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55f75b05f180 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55f75b074e08 <col:35, line:513:5>
|   |-ParenExpr 0x55f75b074b18 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b074ae8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b074840 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b074810 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b074720 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b074708 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b0746c8 <col:23> 'int' lvalue ParmVar 0x55f75b05f180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b0746e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b0747f0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b0747d8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b074740 <col:33> 'int' lvalue ParmVar 0x55f75b05f180 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b0747b8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b0747a0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b074760 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b074780 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55f75b0748a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b074880 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b074a48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b074a30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b074a10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b074a88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b074910 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55f75b074aa0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b074948 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b074ab8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b074980 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55f75b074ad0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b0749f8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b0749e0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b0749a0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55f75b074df8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55f75b074de0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55f75b074dc8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55f75b074d98 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55f75b074d10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55f75b074ce0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55f75b074c90 <col:60, col:69> 'char const[48]' lvalue ->c 0x55f75b067640
|             |   `-CXXMemberCallExpr 0x55f75b074c70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55f75b074c40 <col:60> '<bound member function type>' ->xanno 0x55f75b05c248
|             |       `-CXXThisExpr 0x55f75b074c30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55f75b074cf8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55f75b074cc0 <col:73> 'int' lvalue ParmVar 0x55f75b05f180 'i' 'int'
|-CXXMethodDecl 0x55f75b05f4c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55f75b05f338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55f75b05f3b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55f75b075528 <col:41, line:528:5>
|   |-ParenExpr 0x55f75b0752b0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b075280 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b074fa0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b074f70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b074e80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b074e68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b074e28 <col:23> 'int' lvalue ParmVar 0x55f75b05f338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b074e48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b074f50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b074f38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b074ea0 <col:33> 'int' lvalue ParmVar 0x55f75b05f338 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b074f18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b074f00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b074ec0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b074ee0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55f75b075000 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b074fe0 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b0751e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b0751c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b0751a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b075220 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b075070 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55f75b075238 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0750a8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b075250 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b0750e0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55f75b075268 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b075190 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b075178 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b075138 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55f75b075508 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55f75b0754b8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55f75b075488 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55f75b075430 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55f75b0753f0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55f75b0753a0 <col:47, col:56> 'char [48]' lvalue ->c 0x55f75b067640
|     |     |   `-CXXMemberCallExpr 0x55f75b075380 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55f75b075350 <col:47> '<bound member function type>' ->xanno 0x55f75b05c3e8
|     |     |       `-CXXThisExpr 0x55f75b075340 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55f75b075408 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f75b0753d0 <col:60> 'int' lvalue ParmVar 0x55f75b05f338 'i' 'int'
|     `-ImplicitCastExpr 0x55f75b0754f0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b0754d0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55f75b05f3b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55f75b05f688 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55f75b05f590 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55f75b075bf8 <col:36, line:541:5>
|   |-ParenExpr 0x55f75b075998 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b075968 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b0756c0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b075690 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b0755a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b075588 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b075548 <col:23> 'int' lvalue ParmVar 0x55f75b05f590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b075568 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b075670 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b075658 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b0755c0 <col:33> 'int' lvalue ParmVar 0x55f75b05f590 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b075638 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b075620 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b0755e0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b075600 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55f75b075720 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b075700 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b0758c8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b0758b0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b075890 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b075908 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b075790 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55f75b075920 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b0757c8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b075938 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b075800 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55f75b075950 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b075878 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b075860 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b075820 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55f75b075be8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55f75b075bd0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55f75b075bb8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55f75b075b88 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55f75b075b30 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55f75b075b00 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55f75b075ab0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55f75b067640
|             |   `-CXXMemberCallExpr 0x55f75b075a90 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55f75b075a60 <col:61> '<bound member function type>' ->xanno 0x55f75b05c248
|             |       `-CXXThisExpr 0x55f75b075a50 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55f75b075b18 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55f75b075ae0 <col:74> 'int' lvalue ParmVar 0x55f75b05f590 'i' 'int'
|-CXXMethodDecl 0x55f75b05f858 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55f75b05f748 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55f75b05f7c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55f75b05f908 <col:20>
| `-OptimizeNoneAttr 0x55f75b05f960 <col:30>
|-CXXMethodDecl 0x55f75b05fa98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55f75b05f9a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55f75b0762c8 <col:35, line:562:5>
|   |-ParenExpr 0x55f75b076068 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b076038 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b075d90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b075d60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b075c70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b075c58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b075c18 <col:23> 'int' lvalue ParmVar 0x55f75b05f9a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b075c38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b075d40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b075d28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b075c90 <col:33> 'int' lvalue ParmVar 0x55f75b05f9a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b075d08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b075cf0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b075cb0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b075cd0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55f75b075df0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b075dd0 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b075f98 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b075f80 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b075f60 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b075fd8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b075e60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55f75b075ff0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b075e98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b076008 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b075ed0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55f75b076020 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b075f48 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b075f30 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b075ef0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55f75b0762b8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55f75b0762a0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55f75b076288 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55f75b076258 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55f75b076200 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55f75b0761d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55f75b076180 <col:60, col:69> 'char const[48]' lvalue ->c 0x55f75b067640
|             |   `-CXXMemberCallExpr 0x55f75b076160 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55f75b076130 <col:60> '<bound member function type>' ->xanno 0x55f75b05c248
|             |       `-CXXThisExpr 0x55f75b076120 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55f75b0761e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55f75b0761b0 <col:73> 'int' lvalue ParmVar 0x55f75b05f9a0 'i' 'int'
|-CXXMethodDecl 0x55f75b05fca8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55f75b05fb58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55f75b05fbd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55f75b0769a8 <col:41, line:577:5>
|   |-ParenExpr 0x55f75b076738 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b076708 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b076460 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b076430 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b076340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b076328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b0762e8 <col:23> 'int' lvalue ParmVar 0x55f75b05fb58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b076308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b076410 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b0763f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b076360 <col:33> 'int' lvalue ParmVar 0x55f75b05fb58 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b0763d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b0763c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b076380 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b0763a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55f75b0764c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b0764a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b076668 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b076650 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b076630 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b0766a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b076530 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55f75b0766c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b076568 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b0766d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b0765a0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55f75b0766f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b076618 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b076600 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b0765c0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55f75b076988 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55f75b076938 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55f75b076908 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55f75b0768a8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55f75b076878 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55f75b076828 <col:47, col:56> 'char [48]' lvalue ->c 0x55f75b067640
|     |     |   `-CXXMemberCallExpr 0x55f75b076808 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55f75b0767d8 <col:47> '<bound member function type>' ->xanno 0x55f75b05c3e8
|     |     |       `-CXXThisExpr 0x55f75b0767c8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55f75b076890 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f75b076858 <col:60> 'int' lvalue ParmVar 0x55f75b05fb58 'i' 'int'
|     `-ImplicitCastExpr 0x55f75b076970 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b076950 <col:65> 'int32_t':'int' lvalue ParmVar 0x55f75b05fbd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55f75b05fe68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55f75b05fd70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55f75b0770d8 <col:36, line:591:5>
|   |-ParenExpr 0x55f75b076e18 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b076de8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b076b40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b076b10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b076a20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b076a08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b0769c8 <col:23> 'int' lvalue ParmVar 0x55f75b05fd70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b0769e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b076af0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b076ad8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b076a40 <col:33> 'int' lvalue ParmVar 0x55f75b05fd70 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b076ab8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b076aa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b076a60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b076a80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55f75b076ba0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b076b80 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b076d48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b076d30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b076d10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b076d88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b076c10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55f75b076da0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b076c48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b076db8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b076c80 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55f75b076dd0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b076cf8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b076ce0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b076ca0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55f75b0770c8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55f75b0770b0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55f75b077098 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55f75b077068 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55f75b076fe0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55f75b076fb0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55f75b076f60 <col:61, col:70> 'char const[48]' lvalue ->c 0x55f75b067640
|             |   `-CXXMemberCallExpr 0x55f75b076f40 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55f75b076f10 <col:61> '<bound member function type>' ->xanno 0x55f75b05c248
|             |       `-CXXThisExpr 0x55f75b076f00 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55f75b076fc8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55f75b076f90 <col:74> 'int' lvalue ParmVar 0x55f75b05fd70 'i' 'int'
|-CXXMethodDecl 0x55f75b0600b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55f75b05ff28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55f75b05ffa0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55f75b0777b8 <col:42, line:606:5>
|   |-ParenExpr 0x55f75b077548 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55f75b077518 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b077270 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b077240 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b077150 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b077138 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b0770f8 <col:23> 'int' lvalue ParmVar 0x55f75b05ff28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b077118 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b077220 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55f75b077208 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b077170 <col:33> 'int' lvalue ParmVar 0x55f75b05ff28 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b0771e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b0771d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b077190 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55f75b0771b0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55f75b0772d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b0772b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55f75b077478 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55f75b077460 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b077440 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b0774b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b077340 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55f75b0774d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b077378 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b0774e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b0773b0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55f75b077500 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b077428 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b077410 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b0773d0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55f75b077798 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55f75b077748 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55f75b077718 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55f75b0776b8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55f75b077688 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55f75b077638 <col:48, col:57> 'char [48]' lvalue ->c 0x55f75b067640
|     |     |   `-CXXMemberCallExpr 0x55f75b077618 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55f75b0775e8 <col:48> '<bound member function type>' ->xanno 0x55f75b05c3e8
|     |     |       `-CXXThisExpr 0x55f75b0775d8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55f75b0776a0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f75b077668 <col:61> 'int' lvalue ParmVar 0x55f75b05ff28 'i' 'int'
|     `-ImplicitCastExpr 0x55f75b077780 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55f75b077760 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55f75b05ffa0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55f75b060250 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55f75b060180 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55f75b078028 <col:33, line:620:5>
|   |-ParenExpr 0x55f75b077da0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55f75b077d70 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b0779c0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b077990 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b077830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b077818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b0777d8 <col:23> 'int' lvalue ParmVar 0x55f75b060180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b0777f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b077970 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55f75b077958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b077850 <col:33> 'int' lvalue ParmVar 0x55f75b060180 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b077938 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b077920 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b077870 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55f75b0778f8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55f75b0778e0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55f75b0778a8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55f75b077a20 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b077a00 <col:79> 'int' 0
|   |   `-CallExpr 0x55f75b077cd0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55f75b077cb8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b077c98 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b077d10 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b077b08 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55f75b077d28 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b077b50 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b077d40 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b077b88 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55f75b077d58 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b077c80 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b077c68 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b077c28 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55f75b078018 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55f75b078000 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55f75b077fe8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55f75b077fb8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55f75b077f30 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55f75b077f00 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55f75b077eb0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55f75b067640
|             |   `-CXXMemberCallExpr 0x55f75b077e90 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55f75b077e60 <col:67> '<bound member function type>' ->xanno 0x55f75b05c248
|             |       `-CXXThisExpr 0x55f75b077e50 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55f75b077f18 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55f75b077ee0 <col:80> 'int' lvalue ParmVar 0x55f75b060180 'i' 'int'
|-CXXMethodDecl 0x55f75b060468 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55f75b060310 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55f75b060390 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55f75b078850 <col:45, line:635:5>
|   |-ParenExpr 0x55f75b078598 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55f75b078568 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55f75b078230 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55f75b078200 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55f75b0780a0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55f75b078088 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55f75b078048 <col:23> 'int' lvalue ParmVar 0x55f75b060310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55f75b078068 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55f75b0781e0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55f75b0781c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55f75b0780c0 <col:33> 'int' lvalue ParmVar 0x55f75b060310 'i' 'int'
|   |   |     `-BinaryOperator 0x55f75b0781a8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55f75b078190 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55f75b0780e0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55f75b05c630 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55f75b078168 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55f75b078150 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55f75b078118 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55f75b078290 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55f75b078270 <col:79> 'int' 0
|   |   `-CallExpr 0x55f75b0784c8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55f75b0784b0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55f75b078490 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55f75abc88f0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55f75b078508 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b078300 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55f75b078520 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55f75b078348 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55f75b078538 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55f75b078380 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55f75b078550 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55f75b078478 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55f75b078460 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55f75b078418 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55f75b078830 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55f75b078798 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55f75b078768 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55f75b078708 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55f75b0786d8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55f75b078688 <col:54, col:63> 'char [48]' lvalue ->c 0x55f75b067640
|     |     |   `-CXXMemberCallExpr 0x55f75b078668 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55f75b078638 <col:54> '<bound member function type>' ->xanno 0x55f75b05c3e8
|     |     |       `-CXXThisExpr 0x55f75b078628 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55f75b0786f0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55f75b0786b8 <col:67> 'int' lvalue ParmVar 0x55f75b060310 'i' 'int'
|     `-CXXConstCastExpr 0x55f75b078800 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55f75b0787e8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55f75b0787b0 <col:91> 'const void *' lvalue ParmVar 0x55f75b060390 'x' 'const void *'
|-CXXMethodDecl 0x55f75b060538 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55f75b0788d8 <col:34, line:640:5>
|   `-ReturnStmt 0x55f75b0788c8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55f75b0788b0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55f75b078880 <col:16> 'Packet *' lvalue ->_data_packet 0x55f75b0681f8
|         `-CXXThisExpr 0x55f75b078870 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55f75b060678 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55f75b0605e8 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55f75b071998 <col:46> 'bool' true
|-CXXMethodDecl 0x55f75b0607f8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55f75b060730 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55f75b0608a0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55f75b061050 <line:660:22> "" ""
| |-EnumConstantDecl 0x55f75b0609a0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b0610c0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060980 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55f75b060960 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55f75b055b00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55f75b060a30 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b0610d8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060a10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55f75b0609f0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55f75b055b90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55f75b060ac0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b0610f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060aa0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55f75b060a80 <col:21> 'int' 0
| |-EnumConstantDecl 0x55f75b060b50 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061108 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060b30 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55f75b060b10 <col:19> 'int' 16
| |-EnumConstantDecl 0x55f75b060be0 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061120 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060bc0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55f75b060ba0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55f75b060c70 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061138 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060c50 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55f75b060c30 <col:19> 'int' 32
| |-EnumConstantDecl 0x55f75b060d00 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061150 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060ce0 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55f75b060cc0 <col:19> 'int' EnumConstant 0x55f75b060b50 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55f75b060d90 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061168 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060d70 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55f75b060d50 <col:19> 'int' EnumConstant 0x55f75b060c70 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55f75b060e60 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061180 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060e40 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55f75b060e20 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55f75b060de0 <col:23> 'int' EnumConstant 0x55f75b060d90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55f75b060e00 <col:40> 'int' 2
| |-EnumConstantDecl 0x55f75b060f30 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55f75b061198 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b060f10 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55f75b060ef0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55f75b060eb0 <col:23> 'int' EnumConstant 0x55f75b060d90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55f75b060ed0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55f75b061000 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55f75b0611b0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55f75b060fe0 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55f75b060fc0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55f75b060f80 <col:23> 'int' EnumConstant 0x55f75b060d90 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55f75b060fa0 <col:40> 'int' 8
|-CXXMethodDecl 0x55f75b0611f0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55f75b061290 <col:68> "" ""
|-CXXMethodDecl 0x55f75b061328 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55f75b0613c8 <col:45> "" ""
|-CXXMethodDecl 0x55f75b061460 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55f75b061500 <col:57> "" ""
|-CXXMethodDecl 0x55f75b061598 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55f75b061638 <col:45> "" ""
|-CXXMethodDecl 0x55f75b0616d0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55f75b061770 <col:57> "" ""
|-CXXMethodDecl 0x55f75b061800 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55f75b0618a0 <col:51> "" ""
|-CXXMethodDecl 0x55f75b061930 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55f75b0619d0 <col:63> "" ""
|-CXXMethodDecl 0x55f75b061a60 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55f75b061b00 <col:53> "" ""
|-CXXMethodDecl 0x55f75b061b90 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55f75b061c30 <col:65> "" ""
|-CXXMethodDecl 0x55f75b061d48 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55f75b061cb8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55f75b061df0 <col:61> "" ""
|-CXXMethodDecl 0x55f75b061f88 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55f75b061e78 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55f75b061ef0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55f75b062038 <col:67> "" ""
|-CXXMethodDecl 0x55f75b062150 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55f75b0620c0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55f75b0621f8 <col:63> "" ""
|-CXXMethodDecl 0x55f75b062390 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55f75b062280 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55f75b0622f8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55f75b062440 <col:69> "" ""
|-CXXMethodDecl 0x55f75b062558 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55f75b0624c8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55f75b062600 <col:63> "" ""
|-CXXMethodDecl 0x55f75b065218 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55f75b065108 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55f75b065180 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55f75b0652c8 <col:69> "" ""
|-CXXMethodDecl 0x55f75b0653e0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55f75b065350 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55f75b065488 <col:62> "" ""
|-CXXMethodDecl 0x55f75b065620 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55f75b065510 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55f75b065588 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55f75b0656d0 <col:68> "" ""
|-CXXMethodDecl 0x55f75b0657e8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55f75b065758 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55f75b065890 <col:63> "" ""
|-CXXMethodDecl 0x55f75b065a28 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55f75b065918 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55f75b065990 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55f75b065ad8 <col:69> "" ""
|-CXXMethodDecl 0x55f75b065b68 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55f75b065c08 <col:64> "" ""
|-CXXMethodDecl 0x55f75b065c98 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55f75b065d38 <col:52> "" ""
|-CXXMethodDecl 0x55f75b065dc8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55f75b065e68 <col:67> "" ""
|-CXXMethodDecl 0x55f75b065ef8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55f75b065f98 <col:55> "" ""
|-CXXMethodDecl 0x55f75b0660b0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55f75b066020 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55f75b066158 <col:58> "" ""
|-CXXMethodDecl 0x55f75b0662f0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55f75b0661e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55f75b066258 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55f75b0663a0 <col:62> "" ""
|-CXXMethodDecl 0x55f75b0664b8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55f75b066428 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55f75b066560 <col:58> "" ""
|-CXXMethodDecl 0x55f75b0666f8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55f75b0665e8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55f75b066660 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55f75b0667a8 <col:62> "" ""
|-CXXMethodDecl 0x55f75b0668c0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55f75b066830 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55f75b066968 <col:60> "" ""
|-CXXMethodDecl 0x55f75b066b00 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55f75b0669f0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55f75b066a68 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55f75b066bb0 <col:64> "" ""
|-CXXMethodDecl 0x55f75b066cc8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55f75b066c38 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55f75b066d70 <col:58> "" ""
|-CXXMethodDecl 0x55f75b066f08 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55f75b066df8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55f75b066e70 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55f75b066fb8 <col:62> "" ""
|-CXXMethodDecl 0x55f75b0670d0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55f75b067040 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55f75b067178 <col:59> "" ""
|-CXXMethodDecl 0x55f75b067310 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55f75b067200 <col:33> col:36 'int'
| |-ParmVarDecl 0x55f75b067278 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55f75b0673c0 <col:63> "" ""
|-AccessSpecDecl 0x55f75b067430 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55f75b067458 prev 0x55f75b05c120 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55f75b067550 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55f75b067640 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55f75b067768 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55f75b0678e8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55f75b067a68 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55f75b067be8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55f75b078a58 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55f75b0792c8 <col:11>
| |-CXXDestructorDecl 0x55f75b078b30 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55f75b078c68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55f75b078c68
| | `-ParmVarDecl 0x55f75b078d78 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55f75b078e18 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55f75b078e18
| | `-ParmVarDecl 0x55f75b078f28 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55f75b07e6f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55f75b07e808 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55f75b07ea88 <col:11>
| |   `-ReturnStmt 0x55f75b07ea78 <col:11>
| |     `-UnaryOperator 0x55f75b07ea60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55f75b07ea50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55f75b07e878 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55f75b07e878
|   `-ParmVarDecl 0x55f75b07e988 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55f75b067c50 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55f75b067d68 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55f75b067e08 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55f75b067e70 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55f75b067ed8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55f75b067f40 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55f75b067fa0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55f75b068060 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55f75b0680c0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55f75b068120 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55f75b078968 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55f75b067e08 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55f75b0792d8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55f75b079330 <col:12>
| |-CXXConstructorDecl 0x55f75b078f98 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55f75b078f98
| | `-ParmVarDecl 0x55f75b0790a8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55f75b079148 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55f75b079148
| | `-ParmVarDecl 0x55f75b079258 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55f75b07dde0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55f75b068198 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55f75b0681f8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55f75b068260 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55f75b0682c8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55f75b068330 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55f75b068398 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55f75b0683f8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55f75b068458 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55f75b0684c0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55f75b068548 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55f75b068198 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55f75b078900 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55f75b0683f8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55f75b079340 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55f75b0793a0 <col:21, line:755:5>
|-CXXConstructorDecl 0x55f75b0686e8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55f75b068628 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55f75b0687e0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55f75b0689c8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55f75b0688d0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55f75b068c98 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55f75b068a80 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55f75b068af8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55f75b068b70 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b068eb8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55f75b068d68 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55f75b068de0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55f75b0714d8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55f75b068f78 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55f75b068ff0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55f75b069068 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55f75b071630 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55f75b0715a0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55f75b071778 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55f75b0716e8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55f75b071870 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b14ae90 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55f75b14afa8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55f75b14b038 <col:16, col:22> col:16 public
|-EnumDecl 0x55f75b14b060 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55f75b14b160 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55f75b14b3b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b14b140 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55f75b14b120 <col:21> 'int' 0
| |-EnumConstantDecl 0x55f75b14b1f0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55f75b14b3c8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b14b1d0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55f75b14b1b0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55f75b14b280 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55f75b14b3e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b14b260 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55f75b14b240 <col:24> 'int' 34
| |-EnumConstantDecl 0x55f75b14b310 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55f75b14b3f8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55f75b14b2f0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55f75b14b2d0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55f75b14b360 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55f75b14cd70 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55f75b14d1a8 <col:7>
|-CXXConstructorDecl 0x55f75b14ce78 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55f75b14ce78
| `-ParmVarDecl 0x55f75b14cf88 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55f75b14d028 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55f75b14d138 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55f75b18e3f0 <col:7>
`-CXXDestructorDecl 0x55f75b14f2b8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55f75b14b428 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55f75b14b588 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55f75b14b618 <col:32, col:38> col:32 public
|-TypedefDecl 0x55f75b14b650 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55f75ac81df0 'uint32_t' sugar
|   |-Typedef 0x55f75ab96408 'uint32_t'
|   `-TypedefType 0x55f75ab6f440 '__uint32_t' sugar
|     |-Typedef 0x55f75ab6f038 '__uint32_t'
|     `-BuiltinType 0x55f75ab2d410 'unsigned int'
|-CXXConstructorDecl 0x55f75b14b798 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55f75b14b6c0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55f75b14cc78 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55f75b14d1b8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55f75b14c530 'base' 'int'
| | `-ImplicitCastExpr 0x55f75b14cd18 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55f75b14ccd8 <col:16> 'int' lvalue ParmVar 0x55f75b14b6c0 'b' 'int'
| `-CompoundStmt 0x55f75b14d228 <col:19, line:1046:5>
|-CXXMethodDecl 0x55f75b14bc90 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55f75b14b860 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55f75b14b8e0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55f75b14b958 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55f75b14b9d8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55f75b14ba98 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55f75b14bb18 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55f75b14c0e8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55f75b14bd60 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55f75b14c048 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55f75b14be08 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55f75b14bea8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55f75b14bf20 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55f75b14cc98 <col:82> 'const ArgContext' lvalue Var 0x55f75b13fd38 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55f75b14e168 <col:94, line:1067:5>
| |   |-DeclStmt 0x55f75b14d3b8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55f75b14d248 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55f75b14d370 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55f75b14d5d8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55f75b14d3e8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55f75b14d5b0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55f75b14d590 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55f75b14d540 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55f75b14d520 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55f75b14d4c8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55f75b14d478 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55f75b14d4a8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55f75b14d508 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55f75b14d4e8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55f75b14d570 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55f75b14d738 <line:1056:9, col:27>
| |   | `-VarDecl 0x55f75b14d6d0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55f75b14db80 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55f75b14dab0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55f75b14da30 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55f75b04c438 0x55f75ae95a18 0x55f75ae956f0 0x55f75ae86ed0 0x55f75ae86b80 0x55f75ae86470 0x55f75ae58de0 0x55f75ade52a0
| |   | | |-CallExpr 0x55f75b14d970 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55f75b14d760 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55f75b14d810 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55f75b14d7e0 <col:19, col:23> '<bound member function type>' .begin 0x55f75ae760d8
| |   | | | |   `-DeclRefExpr 0x55f75b14d7c0 <col:19> 'const String' lvalue ParmVar 0x55f75b14be08 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55f75b14d880 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55f75b14d850 <col:32, col:36> '<bound member function type>' .end 0x55f75ae762f0
| |   | | | |   `-DeclRefExpr 0x55f75b14d830 <col:32> 'const String' lvalue ParmVar 0x55f75b14be08 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55f75b14d8a0 <col:43> 'const bool' lvalue Var 0x55f75b14d248 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55f75b14d908 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55f75b14d8e8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55f75b14d930 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55f75b14d6d0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55f75b14d950 <col:73> 'const int' lvalue Var 0x55f75b14d3e8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55f75b14da10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55f75b14d9e0 <col:16, col:20> '<bound member function type>' .end 0x55f75ae762f0
| |   | |     `-DeclRefExpr 0x55f75b14d9c0 <col:16> 'const String' lvalue ParmVar 0x55f75b14be08 'str' 'const String &'
| |   | `-BinaryOperator 0x55f75b14db60 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55f75b14daf8 <col:13> 'int' lvalue ->status 0x55f75b14c598
| |   |   | `-CXXThisExpr 0x55f75b14dae8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55f75b14db48 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55f75b14db28 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b1f0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55f75b14ddd0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55f75b14dcb8 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55f75b14dca0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55f75b14dc88 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55f75b14dba8 <col:13> 'int' lvalue ->status 0x55f75b14c598
| |   | | |     `-CXXThisExpr 0x55f75b14db98 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55f75b14dc68 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55f75b14dc38 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55f75b14dbe8 <col:23> 'int' lvalue ->status 0x55f75b14c598
| |   | |   |   `-CXXThisExpr 0x55f75b14dbd8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55f75b14dc50 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55f75b14dc18 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b280 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55f75b14ddb0 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55f75b14dd50 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55f75b14dcf8 <col:13, col:18> '<bound member function type>' .error 0x55f75b00fa60
| |   |   | | `-DeclRefExpr 0x55f75b14dcd8 <col:13> 'const ArgContext' lvalue ParmVar 0x55f75b14bf20 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55f75b14dd78 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55f75b14dd28 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55f75b14dda0 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55f75b14dd90 <col:20> 'bool' false
| |   |-DeclStmt 0x55f75b14dfb8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55f75b14df60 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55f75b14def0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55f75b14e118 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55f75b14dfd0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55f75ae19268
| |   | |-DeclRefExpr 0x55f75b14e018 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55f75b14d6d0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55f75b14e0e8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55f75b14e060 <col:64> 'V' lvalue ParmVar 0x55f75b14bea8 'result' 'V &'
| |   `-ReturnStmt 0x55f75b14e158 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55f75b14e148 <col:16> 'bool' true
| `-CXXMethodDecl 0x55f75b191b78 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55f75b191950 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55f75b191a28 <col:46, col:49> col:49 used result 'int &'
|   |-ParmVarDecl 0x55f75b191a90 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55f75b19e430 <col:94, line:1067:5>
|     |-DeclStmt 0x55f75b192388 <line:1054:9, col:64>
|     | `-VarDecl 0x55f75b1921a8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55f75b192318 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55f75b1922e8 <col:36, col:55> 'const bool' lvalue Var 0x55f75ae091d8 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55f75b192568 <line:1055:9, col:91>
|     | `-VarDecl 0x55f75b1923a0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55f75b1924e8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55f75b1924d0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55f75b1924b0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55f75b192490 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55f75b192470 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55f75b192438 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55f75b192418 <col:36, col:44> 'unsigned long' sizeof 'int':'int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55f75b14d4a8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55f75b192458 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55f75b14d4e8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55f75b14d570 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55f75b192700 <line:1056:9, col:27>
|     | `-VarDecl 0x55f75b192698 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55f75b192b88 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55f75b192b30 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55f75b1929e8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55f75b1929b8 <col:13> '<bound member function type>' ->parse 0x55f75b14bc90
|     | | | | `-CXXThisExpr 0x55f75b1929a8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55f75b192848 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55f75b192818 <col:19, col:23> '<bound member function type>' .begin 0x55f75ae760d8
|     | | | |   `-DeclRefExpr 0x55f75b1927f8 <col:19> 'const String' lvalue ParmVar 0x55f75b191950 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55f75b1928b8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55f75b192888 <col:32, col:36> '<bound member function type>' .end 0x55f75ae762f0
|     | | | |   `-DeclRefExpr 0x55f75b192868 <col:32> 'const String' lvalue ParmVar 0x55f75b191950 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55f75b192a58 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55f75b192a38 <col:43> 'const bool' lvalue Var 0x55f75b1921a8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55f75b192940 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55f75b192928 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55f75b192908 <col:58, col:66> 'unsigned long' sizeof 'int':'int'
|     | | | |-ImplicitCastExpr 0x55f75b192a70 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55f75b192968 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55f75b192698 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55f75b192aa8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55f75b192a88 <col:73> 'const int' lvalue Var 0x55f75b1923a0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55f75b192b10 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55f75b192ae0 <col:16, col:20> '<bound member function type>' .end 0x55f75ae762f0
|     | |     `-DeclRefExpr 0x55f75b192ac0 <col:16> 'const String' lvalue ParmVar 0x55f75b191950 'str' 'const String &'
|     | `-BinaryOperator 0x55f75b192b68 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55f75b14daf8 <col:13> 'int' lvalue ->status 0x55f75b14c598
|     |   | `-CXXThisExpr 0x55f75b14dae8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55f75b192b50 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55f75b14db28 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b1f0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55f75b192d00 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55f75b192c20 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55f75b192c08 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55f75b192bf0 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55f75b14dba8 <col:13> 'int' lvalue ->status 0x55f75b14c598
|     | | |     `-CXXThisExpr 0x55f75b14db98 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55f75b192bd0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55f75b192ba0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55f75b14dbe8 <col:23> 'int' lvalue ->status 0x55f75b14c598
|     | |   |   `-CXXThisExpr 0x55f75b14dbd8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55f75b192bb8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55f75b14dc18 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b280 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55f75b192ce0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55f75b192c90 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55f75b192c60 <col:13, col:18> '<bound member function type>' .error 0x55f75b00fa60
|     |   | | `-DeclRefExpr 0x55f75b192c40 <col:13> 'const ArgContext' lvalue ParmVar 0x55f75b191a90 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55f75b192cb8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55f75b14dd28 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55f75b192cd0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55f75b14dd90 <col:20> 'bool' false
|     |-DeclStmt 0x55f75b19dd68 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55f75b19dd10 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55f75b19dcc0 'typename make_unsigned<int>::type' sugar
|     |     `-TypedefType 0x55f75b19dca0 'make_unsigned<int>::type' sugar
|     |       |-Typedef 0x55f75b19dc30 'type'
|     |       `-ElaboratedType 0x55f75b19dbe0 'typename integer_traits<int>::unsigned_type' sugar
|     |         `-TypedefType 0x55f75b19dbc0 'integer_traits<int>::unsigned_type' sugar
|     |           |-Typedef 0x55f75ae09330 'unsigned_type'
|     |           `-BuiltinType 0x55f75ab2d410 'unsigned int'
|     |-CallExpr 0x55f75b19e3c0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55f75b19e3a8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55f75b19e328 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55f75b19e208 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55f75ae19268 'extract_integer')
|     | |-ImplicitCastExpr 0x55f75b19e408 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55f75b19e3f0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55f75b19ddc8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55f75b192698 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55f75b19de98 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <LValueBitCast>
|     |   `-DeclRefExpr 0x55f75b19de48 <col:64> 'int':'int' lvalue ParmVar 0x55f75b191a28 'result' 'int &'
|     `-ReturnStmt 0x55f75b19e420 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55f75b14e148 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55f75b14c4a8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55f75b14c158 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55f75b14c408 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55f75b14c208 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55f75b14c2a8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55f75b14c320 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55f75b14ccb8 <col:71> 'const ArgContext' lvalue Var 0x55f75b13fd38 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55f75b14e8d8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55f75b14e230 <line:1071:9, col:12>
| |   | `-VarDecl 0x55f75b14e1c8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55f75b14e8b0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55f75b14e4c0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55f75b14e348 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55f75b14e310 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55f75b14e258 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55f75b14e2b0 <col:31> 'const String' lvalue ParmVar 0x55f75b14c208 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55f75b14e2d0 <col:36> 'V' lvalue Var 0x55f75b14e1c8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55f75b14e2f0 <col:39> 'const ArgContext' lvalue ParmVar 0x55f75b14c320 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55f75b14e4a0 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55f75b14e480 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55f75b14e468 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55f75b14e450 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55f75b14e370 <col:17> 'int' lvalue ->status 0x55f75b14c598
| |     |     |     `-CXXThisExpr 0x55f75b14e360 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55f75b14e430 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55f75b14e400 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55f75b14e3b0 <col:27> 'int' lvalue ->status 0x55f75b14c598
| |     |       |   `-CXXThisExpr 0x55f75b14e3a0 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55f75b14e418 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55f75b14e3e0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b280 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55f75b14e4f0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55f75b14e4e0 <col:20> 'bool' false
| |     `-IfStmt 0x55f75b14e888 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55f75b14e590 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55f75b14e560 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55f75b14e510 <col:18> 'int' lvalue ->status 0x55f75b14c598
| |       | |   `-CXXThisExpr 0x55f75b14e500 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55f75b14e578 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55f75b14e540 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b280 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55f75b14e7c8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55f75b14e770 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55f75b14e5c0 <line:1076:13> '<bound member function type>' ->range_error 0x55f75b14cba8
| |       | | | `-CXXThisExpr 0x55f75b14e5b0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55f75b14e5f0 <col:25> 'const ArgContext' lvalue ParmVar 0x55f75b14c320 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55f75b14e6d0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55f75b14e748 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55f75b14e728 <col:43> 'V' lvalue Var 0x55f75b14e1c8 'x' 'V'
| |       | `-ReturnStmt 0x55f75b14e7b8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55f75b14e7a8 <col:20> 'bool' false
| |       `-CompoundStmt 0x55f75b14e868 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55f75b14e828 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55f75b14e7e8 <col:13> 'V' lvalue ParmVar 0x55f75b14c2a8 'result' 'V &'
| |         | `-DeclRefExpr 0x55f75b14e808 <col:22> 'V' lvalue Var 0x55f75b14e1c8 'x' 'V'
| |         `-ReturnStmt 0x55f75b14e858 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55f75b14e848 <col:20> 'bool' true
| `-CXXMethodDecl 0x55f75b191538 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, int &, const ArgContext &)'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55f75b191310 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55f75b1913e8 <col:35, col:38> col:38 used result 'int &'
|   |-ParmVarDecl 0x55f75b191450 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55f75b192188 <col:83, line:1083:5>
|     |-DeclStmt 0x55f75b1917c0 <line:1071:9, col:12>
|     | `-VarDecl 0x55f75b191758 <col:9, col:11> col:11 used x 'int':'int'
|     `-IfStmt 0x55f75b192160 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55f75b191df0 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55f75b191d18 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55f75b191ce0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55f75b191c98 <col:14> '<bound member function type>' ->parse_saturating 0x55f75b191b78
|       | |   | `-CXXThisExpr 0x55f75b191c88 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55f75b191830 <col:31> 'const String' lvalue ParmVar 0x55f75b191310 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55f75b191850 <col:36> 'int':'int' lvalue Var 0x55f75b191758 'x' 'int':'int'
|       | |   `-DeclRefExpr 0x55f75b191870 <col:39> 'const ArgContext' lvalue ParmVar 0x55f75b191450 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55f75b191dd0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55f75b191db0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55f75b191d98 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55f75b191d80 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55f75b14e370 <col:17> 'int' lvalue ->status 0x55f75b14c598
|       |     |     `-CXXThisExpr 0x55f75b14e360 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55f75b191d60 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55f75b191d30 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55f75b14e3b0 <col:27> 'int' lvalue ->status 0x55f75b14c598
|       |       |   `-CXXThisExpr 0x55f75b14e3a0 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55f75b191d48 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55f75b14e3e0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b280 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55f75b191e10 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55f75b14e4e0 <col:20> 'bool' false
|       `-IfStmt 0x55f75b192138 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55f75b191e50 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55f75b191e20 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55f75b14e510 <col:18> 'int' lvalue ->status 0x55f75b14c598
|         | |   `-CXXThisExpr 0x55f75b14e500 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55f75b191e38 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55f75b14e540 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55f75b14b280 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55f75b192070 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55f75b191fe0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55f75b14e5c0 <line:1076:13> '<bound member function type>' ->range_error 0x55f75b14cba8
|         | | | `-CXXThisExpr 0x55f75b14e5b0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55f75b191e70 <col:25> 'const ArgContext' lvalue ParmVar 0x55f75b191450 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55f75b192048 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55f75b192018 <col:31, col:50> 'const bool' lvalue Var 0x55f75ae091d8 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55f75b191fb8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55f75b191fa0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55f75b191f88 <col:43> 'int':'int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55f75b191f68 <col:43> 'int':'int' lvalue Var 0x55f75b191758 'x' 'int':'int'
|         | `-ReturnStmt 0x55f75b192060 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55f75b14e7a8 <col:20> 'bool' false
|         `-CompoundStmt 0x55f75b192118 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55f75b1920e8 <line:1080:13, col:22> 'int':'int' lvalue '='
|           | |-DeclRefExpr 0x55f75b192090 <col:13> 'int':'int' lvalue ParmVar 0x55f75b1913e8 'result' 'int &'
|           | `-ImplicitCastExpr 0x55f75b1920d0 <col:22> 'int':'int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55f75b1920b0 <col:22> 'int':'int' lvalue Var 0x55f75b191758 'x' 'int':'int'
|           `-ReturnStmt 0x55f75b192108 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55f75b14e848 <col:20> 'bool' true
|-FieldDecl 0x55f75b14c530 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55f75b14c598 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55f75b14c5e8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55f75b14c8a0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55f75b14c628 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55f75b14c6a8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55f75b14c720 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55f75b14c7a0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55f75b14cba8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55f75b14c970 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55f75b14c9e8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55f75b14ca80 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55f75b14f138 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55f75b14f138
| `-ParmVarDecl 0x55f75b14f248 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55f75b14f3c8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55f75b14f4d8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55f75b18e400 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55f75b18e3d0 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55f75b18e3a0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55f75b18e370 <col:7> 'IntArg' lvalue ParmVar 0x55f75b14f4d8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55f75b14c530 'base' 'int'
| | `-ImplicitCastExpr 0x55f75b18e4f8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55f75b18e4c8 <col:7> 'int' xvalue .base 0x55f75b14c530
| |     `-CXXStaticCastExpr 0x55f75b18e498 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55f75b18e468 <col:7> 'IntArg' lvalue ParmVar 0x55f75b14f4d8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55f75b14c598 'status' 'int'
| | `-ImplicitCastExpr 0x55f75b18e5c8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55f75b18e598 <col:7> 'int' xvalue .status 0x55f75b14c598
| |     `-CXXStaticCastExpr 0x55f75b18e568 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55f75b18e538 <col:7> 'IntArg' lvalue ParmVar 0x55f75b14f4d8 '' 'IntArg &&'
| `-CompoundStmt 0x55f75b18e620 <col:7>
`-CXXDestructorDecl 0x55f75b18d560 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55f75b153a00 <../dummy_inc/click/args.hh:1183:1, col:52> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55f75b153c58 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55f75b18d488 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55f75b18da00 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55f75b18d9e0 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55f75b18da70 <col:19>
|-CXXConstructorDecl 0x55f75b18d668 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<int> &)' inline default trivial noexcept-unevaluated 0x55f75b18d668
| `-ParmVarDecl 0x55f75b18d778 <col:19> col:19 'const DefaultArg<int> &'
|-CXXConstructorDecl 0x55f75b18d818 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55f75b18d928 <col:19> col:19 used 'DefaultArg<int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55f75b18e630 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55f75b18e350 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55f75b18e320 <col:19> 'DefaultArg<int>' xvalue static_cast<struct DefaultArg<int> &&> <NoOp>
| |       `-DeclRefExpr 0x55f75b18e2f0 <col:19> 'DefaultArg<int>' lvalue ParmVar 0x55f75b18d928 '' 'DefaultArg<int> &&'
| `-CompoundStmt 0x55f75b18e6a0 <col:19>
`-CXXDestructorDecl 0x55f75b18dab0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
