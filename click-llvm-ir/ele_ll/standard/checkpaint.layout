
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d4598d8 prev 0x55ba2d451078 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d4599d0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55ba2d459a60 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55ba2d459ad8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55ba2d459b98 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55ba2d459c60 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55ba2d459dd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55ba2d459d10 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55ba2d459e80 <col:24>
| `-OptimizeNoneAttr 0x55ba2d459ed8 <col:34>
|-CXXMethodDecl 0x55ba2d459f20 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55ba2d45a1d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55ba2d459fd0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55ba2d45a048 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55ba2d45a0c8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55ba2d45a290 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55ba2d45a2c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55ba2d45a330 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55ba2d45a3b8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55ba2d45a6d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55ba2d45a470 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55ba2d45a4e8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55ba2d45a560 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55ba2d45a5e0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55ba2d45a7f0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55ba2d462168 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55ba2d462168
| `-ParmVarDecl 0x55ba2d462278 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55ba2d462318 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55ba2d462318
| `-ParmVarDecl 0x55ba2d462428 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55ba2d52f160 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d44c8f0 prev 0x55ba2d44c670 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2d44c9e8 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55ba2d44ca78 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55ba2d44cad8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55ba2d44cbc8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55ba2d44ccc8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55ba2d44ce98 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55ba2d44cd48 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55ba2d44cdc0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55ba2d44d028 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55ba2d44cf60 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55ba2d44d0d0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d44d208 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55ba2d44d140 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55ba2d44d3a8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55ba2d44d2e8 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55ba2d44d548 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55ba2d44d488 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55ba2d44d5f0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55ba2d44d6f0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55ba2d44d7d0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d44d6d0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba2d44d6b0 <col:26> 'int' 1
| `-EnumConstantDecl 0x55ba2d44d780 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55ba2d44d7e8 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d44d760 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55ba2d44d740 <col:44> 'int' 2
|-CXXMethodDecl 0x55ba2d44d930 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55ba2d44d818 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55ba2d44d898 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55ba2d44da88 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55ba2d44d9f8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55ba2d44dcc8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55ba2d44db48 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55ba2d44dbc0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55ba2d44dd78 <col:20>
| `-OptimizeNoneAttr 0x55ba2d44ddd0 <col:30>
|-CXXMethodDecl 0x55ba2d44ded8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55ba2d44de10 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55ba2d44df80 <col:20>
| `-OptimizeNoneAttr 0x55ba2d44dfd8 <col:30>
|-CXXMethodDecl 0x55ba2d44e028 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55ba2d44e0f0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55ba2d44e208 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55ba2d44e290 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55ba2d44e318 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55ba2d44e3a0 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55ba2d44e428 <line:59:5, col:35> col:23 used PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55ba2d44e4b8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55ba2d44e578 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55ba2d44e600 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55ba2d44e688 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55ba2d44e710 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55ba2d44e798 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55ba2d44e820 <line:67:5, col:39> col:23 used PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55ba2d44e8b0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55ba2d44e970 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55ba2d44ea00 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55ba2d44eb50 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55ba2d44eab8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55ba2d44ece0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55ba2d44ec10 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55ba2d44ef90 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55ba2d44ed98 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55ba2d44ee18 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55ba2d44ee98 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55ba2d44f048 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55ba2d44f150 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba2d44f3e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d44f130 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2d44f110 <col:33> 'int' 0
| |-EnumConstantDecl 0x55ba2d44f1e0 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba2d44f3f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d44f1c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55ba2d44f1a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x55ba2d44f270 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba2d44f410 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d44f250 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55ba2d44f230 <col:38> 'int' 90
| |-EnumConstantDecl 0x55ba2d44f300 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55ba2d44f428 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d44f2e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55ba2d44f2c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x55ba2d44f390 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55ba2d44f440 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d44f370 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55ba2d44f350 <col:32> 'int' 2000
|-CXXMethodDecl 0x55ba2d44f480 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55ba2d44f8c0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ba2d44f730 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55ba2d44f7a8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d44f990 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55ba2d44fb10 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55ba2d44fa40 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d44fd18 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ba2d44fbc8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55ba2d44fc40 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d44fe18 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55ba2d44feb8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55ba2d44ff80 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba2d450010 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55ba2d450240 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d44fff0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55ba2d44ffd0 <col:36> 'int' EnumConstant 0x55ba2d44ff80 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba2d450060 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba2d4500b0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba2d450100 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba2d450150 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55ba2d4501a0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55ba2d4501f0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55ba2d450328 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55ba2d450268 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55ba2d4503f0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55ba2d4504b0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55ba2d450570 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55ba2d450630 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55ba2d450748 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55ba2d450810 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55ba2d450990 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55ba2d4508c0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55ba2d450ab8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55ba2d450cb8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55ba2d450b68 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55ba2d450be8 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55ba2d45e608 <col:54, line:127:5>
|   |-ParenExpr 0x55ba2d45e4b8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55ba2d45e488 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d45e178 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55ba2d45e150 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55ba2d45e138 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55ba2d45e120 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55ba2d45e0f0 <col:31> 'Router *' lvalue ->_router 0x55ba2d45bfd0
|   |   |         `-CXXThisExpr 0x55ba2d45e0e0 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ba2d45e1d8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d45e1b8 <col:48> 'int' 0
|   |   `-CallExpr 0x55ba2d45e3e8 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d45e3d0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d45e3b0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d45e428 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d45e248 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55ba2d45e440 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d45e268 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55ba2d45e458 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d45e2a0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55ba2d45e470 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d45e398 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d45e380 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d45e338 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55ba2d45e550 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55ba2d45e4e8 <col:9> 'Router *' lvalue ->_router 0x55ba2d45bfd0
|   | | `-CXXThisExpr 0x55ba2d45e4d8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55ba2d45e538 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ba2d45e518 <col:19> 'Router *' lvalue ParmVar 0x55ba2d450b68 'r' 'Router *'
|   `-BinaryOperator 0x55ba2d45e5e8 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55ba2d45e580 <col:9> 'int' lvalue ->_eindex 0x55ba2d45c038
|     | `-CXXThisExpr 0x55ba2d45e570 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55ba2d45e5d0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d45e5b0 <col:19> 'int' lvalue ParmVar 0x55ba2d450be8 'eindex' 'int'
|-CXXMethodDecl 0x55ba2d450e40 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55ba2d450d78 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55ba2d450f10 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55ba2d450fd8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55ba2d451078 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55ba2d4512c8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55ba2d451140 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55ba2d4511c0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55ba2d451378 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4513d0 <col:30>
|-CXXMethodDecl 0x55ba2d4514d8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55ba2d451410 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55ba2d451580 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4515d8 <col:30>
|-CXXMethodDecl 0x55ba2d4516a8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55ba2d451618 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55ba2d451750 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4517a8 <col:30>
|-CXXMethodDecl 0x55ba2d451938 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55ba2d4517e0 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55ba2d451860 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55ba2d451ac8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55ba2d451a00 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55ba2d451c18 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55ba2d451b88 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55ba2d451d68 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55ba2d451cd8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55ba2d451eb8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55ba2d451e28 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55ba2d452178 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55ba2d451f70 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55ba2d451ff0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55ba2d452098 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55ba2d452250 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55ba2d452310 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55ba2d4525e0 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55ba2d452490 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55ba2d452508 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d452708 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55ba2d4528e0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55ba2d4527c0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55ba2d452840 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55ba2d452ac8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55ba2d4529a8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55ba2d452a28 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55ba2d452e38 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55ba2d452b88 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ba2d452c00 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ba2d452c80 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ba2d45dbf0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d45dbd0 <col:106> 'int' 0
| `-ParmVarDecl 0x55ba2d452cf8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba2d45dc28 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba2d45dc08 <col:126> 'int' 0
|-CXXMethodDecl 0x55ba2d4531d8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba2d452f08 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ba2d452fa0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ba2d453020 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55ba2d453098 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba2d45dc60 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba2d45dc40 <col:114> 'int' 0
|-CXXMethodDecl 0x55ba2d453568 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba2d4532b0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55ba2d453328 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55ba2d4533a8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55ba2d45dc78 <col:96> 'int' 0
| `-ParmVarDecl 0x55ba2d453420 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba2d45dcb8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba2d45dc98 <col:116> 'int' 0
|-CXXMethodDecl 0x55ba2d4538e8 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55ba2d453638 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55ba2d4536b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d453730 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ba2d45dcf0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d45dcd0 <col:109> 'int' 0
| `-ParmVarDecl 0x55ba2d4537a8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba2d45dd28 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba2d45dd08 <col:129> 'int' 0
|-CXXMethodDecl 0x55ba2d453c68 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba2d4539b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55ba2d453a30 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d453ab0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55ba2d453b28 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba2d45dd60 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba2d45dd40 <col:117> 'int' 0
|-CXXMethodDecl 0x55ba2d453ff8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55ba2d453d40 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d453db8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d453e38 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55ba2d45dd78 <col:99> 'int' 0
| `-ParmVarDecl 0x55ba2d453eb0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55ba2d45ddb8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55ba2d45dd98 <col:119> 'int' 0
|-CXXMethodDecl 0x55ba2d454418 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55ba2d4540c8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55ba2d454148 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55ba2d4541c0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d454240 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55ba2d45ddf0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d45ddd0 <col:108> 'int' 0
| `-ParmVarDecl 0x55ba2d4542c0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55ba2d45de28 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55ba2d45de08 <col:141> 'int' 0
|-CXXMethodDecl 0x55ba2d454838 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55ba2d4544f0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55ba2d454570 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55ba2d4545e8 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d454668 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55ba2d4546e8 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55ba2d45de40 <col:121> 'int' 0
|-CXXMethodDecl 0x55ba2d454c68 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55ba2d454918 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55ba2d454998 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55ba2d454a10 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d454a90 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55ba2d45de60 <col:98> 'int' 0
| `-ParmVarDecl 0x55ba2d454b10 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55ba2d45de80 <col:123> 'int' 0
|-CXXMethodDecl 0x55ba2d454f30 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55ba2d454d40 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55ba2d454dc0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55ba2d454e40 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55ba2d45dea0 <col:80> 'int' 0
|-EnumDecl 0x55ba2d454fe8 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55ba2d4550f0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba2d455380 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d4550d0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba2d4550b0 <col:42> 'int' 1
| |-EnumConstantDecl 0x55ba2d455180 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba2d455398 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d455160 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55ba2d455140 <col:40> 'int' 2
| |-EnumConstantDecl 0x55ba2d455210 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba2d4553b0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d4551f0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba2d4551d0 <col:44> 'int' 4
| |-EnumConstantDecl 0x55ba2d4552a0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55ba2d4553c8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d455280 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55ba2d455260 <col:36> 'int' 7
| `-EnumConstantDecl 0x55ba2d455330 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55ba2d4553e0 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d455310 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55ba2d4552f0 <col:34> 'int' 6
|-CXXMethodDecl 0x55ba2d455698 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55ba2d455408 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55ba2d4554a8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55ba2d455528 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55ba2d4555a0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55ba2d45df58 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55ba2d45df40 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55ba2d45df28 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55ba2d45df08 <col:98, col:105> 'String' (CXXTemporary 0x55ba2d45df08)
|           `-CXXTemporaryObjectExpr 0x55ba2d45ded0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55ba2d455938 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55ba2d455768 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55ba2d4557e0 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55ba2d455858 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55ba2d45e008 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55ba2d45dff0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55ba2d45dfd8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55ba2d45dfb8 <col:94, col:101> 'String' (CXXTemporary 0x55ba2d45dfb8)
| |         `-CXXTemporaryObjectExpr 0x55ba2d45df80 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55ba2d45e7f0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55ba2d45e768 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55ba2d45e738 <col:9> '<bound member function type>' ->add_task_handlers 0x55ba2d455698
|     | `-CXXThisExpr 0x55ba2d45e728 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55ba2d45e7a8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba2d45e6a8 <col:27> 'Task *' lvalue ParmVar 0x55ba2d455768 'task' 'Task *'
|     |-ImplicitCastExpr 0x55ba2d45e7c0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba2d45e6c8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55ba2d4557e0 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55ba2d45e7d8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55ba2d45e6e8 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55ba2d455330 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55ba2d45e708 <col:62> 'const String' lvalue ParmVar 0x55ba2d455858 'prefix' 'const String &'
|-CXXMethodDecl 0x55ba2d455b48 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55ba2d455a00 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55ba2d455a78 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55ba2d45e0b8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55ba2d45e0a0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55ba2d45e088 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55ba2d45e068 <col:70, col:77> 'String' (CXXTemporary 0x55ba2d45e068)
| |         `-CXXTemporaryObjectExpr 0x55ba2d45e030 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55ba2d45e9c8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55ba2d45e940 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55ba2d45e910 <col:9> '<bound member function type>' ->add_task_handlers 0x55ba2d455698
|     | `-CXXThisExpr 0x55ba2d45e900 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55ba2d45e980 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba2d45e880 <col:27> 'Task *' lvalue ParmVar 0x55ba2d455a00 'task' 'Task *'
|     |-ImplicitCastExpr 0x55ba2d45e998 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55ba2d45e8a0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55ba2d45e9b0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55ba2d45e8c0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55ba2d455330 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55ba2d45e8e0 <col:57> 'const String' lvalue ParmVar 0x55ba2d455a78 'prefix' 'const String &'
|-CXXMethodDecl 0x55ba2d455e28 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55ba2d455c10 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d455c90 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d455d08 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55ba2d4560d8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55ba2d455ef8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d455f78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d455ff8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55ba2d4563c8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55ba2d4561a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d456228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d4562a0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55ba2d456678 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55ba2d456498 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d456518 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d456598 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55ba2d456928 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55ba2d456748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d4567c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d456848 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55ba2d456bd8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55ba2d4569f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d456a78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d456af0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55ba2d456e88 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55ba2d456ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d456d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d456da8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55ba2d457198 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55ba2d456fb0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d457030 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d4570b0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55ba2d457478 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55ba2d457268 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d4572e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d457390 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55ba2d457758 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55ba2d457548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d4575c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d457670 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55ba2d4579c0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55ba2d457828 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55ba2d4578a8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55ba2d457920 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55ba2d457c68 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55ba2d457a90 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55ba2d457b10 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55ba2d457b88 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55ba2d457f18 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55ba2d457d38 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d457db8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d457e38 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55ba2d4581c8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55ba2d457fe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d458068 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d4580e0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55ba2d458478 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55ba2d458298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d458318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d458390 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55ba2d458748 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55ba2d458548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d4585c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55ba2d458668 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55ba2d458a78 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55ba2d458818 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55ba2d458898 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55ba2d458910 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55ba2d458988 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba2d45e0d0 <col:93> 'bool' false
|-CXXMethodDecl 0x55ba2d458c60 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ba2d458b48 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55ba2d458bc8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55ba2d458e38 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ba2d458d20 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55ba2d458da0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55ba2d459118 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ba2d458ef8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55ba2d458f70 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55ba2d458ff0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55ba2d459068 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d459408 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55ba2d4591e8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55ba2d459260 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55ba2d4592e0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55ba2d459358 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d459640 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55ba2d4594e0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55ba2d459560 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55ba2d459828 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55ba2d459708 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55ba2d459788 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55ba2d4598d8 prev 0x55ba2d451078 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba2d4599d0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55ba2d459a60 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55ba2d459ad8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55ba2d459b98 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55ba2d459c60 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55ba2d459dd8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55ba2d459d10 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55ba2d459e80 <col:24>
| | `-OptimizeNoneAttr 0x55ba2d459ed8 <col:34>
| |-CXXMethodDecl 0x55ba2d459f20 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55ba2d45a1d8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55ba2d459fd0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55ba2d45a048 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55ba2d45a0c8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55ba2d45a290 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55ba2d45a2c8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55ba2d45a330 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55ba2d45a3b8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55ba2d45a6d8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55ba2d45a470 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55ba2d45a4e8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55ba2d45a560 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55ba2d45a5e0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55ba2d45a7f0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55ba2d462168 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55ba2d462168
| | `-ParmVarDecl 0x55ba2d462278 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55ba2d462318 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55ba2d462318
| | `-ParmVarDecl 0x55ba2d462428 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55ba2d52f160 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ba2d45a868 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55ba2d45a908 <col:38> "" ""
|-CXXMethodDecl 0x55ba2d45a998 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55ba2d45aa38 <col:44> "" ""
|-AccessSpecDecl 0x55ba2d45aaa8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55ba2d45aad0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55ba2d45abd0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55ba2d45ac20 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d45abb0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55ba2d45ab90 <col:27> 'int' 4
|-FieldDecl 0x55ba2d45acd8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55ba2d45ae88 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55ba2d45af40 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55ba2d45bfd0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55ba2d45c038 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55ba2d45c188 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55ba2d45c0c8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55ba2d45c338 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55ba2d45c248 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55ba2d45c518 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55ba2d45c3f8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55ba2d45c478 <col:25> col:28 'int'
|-CXXMethodDecl 0x55ba2d45c7c0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d45c5e0 <col:23> col:26 'int'
| |-ParmVarDecl 0x55ba2d45c660 <col:28> col:31 'int'
| `-ParmVarDecl 0x55ba2d45c6d8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55ba2d45c878 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55ba2d45c940 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55ba2d45c990 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55ba2d45c9e0 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55ba2d45cbc0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55ba2d45ca70 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55ba2d45cae8 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d45ce68 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55ba2d45cc88 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55ba2d45cd08 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55ba2d45cd80 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d45d088 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55ba2d45cf38 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55ba2d45cfb8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55ba2d45d3c0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55ba2d45d148 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55ba2d45d1c8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55ba2d45d240 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55ba2d45d2c0 <col:57> col:60 'int'
|-CXXMethodDecl 0x55ba2d45d5a8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55ba2d45d490 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55ba2d45d510 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55ba2d45d6f8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55ba2d45d668 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55ba2d45da78 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55ba2d45d7b8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55ba2d45d838 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55ba2d45d8b0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55ba2d45d930 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55ba2d45db90 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class CheckPaint
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   uint8_t _anno
       109 |   uint8_t _color
           | [sizeof=112, dsize=110, align=8,
           |  nvsize=110, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d4652d8 <../elements/standard/checkpaint.hh:26:1, line:45:1> line:26:7 class CheckPaint definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55ba2d465438 <col:1, col:7> col:7 implicit referenced class CheckPaint
|-AccessSpecDecl 0x55ba2d4654c8 <col:37, col:43> col:37 public
|-CXXConstructorDecl 0x55ba2d465550 <line:28:5, col:16> col:5 CheckPaint 'void ()'
|-CXXMethodDecl 0x55ba2d465650 <line:30:5, col:59> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x55ba2d44e028 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55ba2d466800 <col:36, col:59>
|   `-ReturnStmt 0x55ba2d4667f0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55ba2d4667d8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55ba2d4667b0 <col:45> 'const char [11]' lvalue "CheckPaint"
|-CXXMethodDecl 0x55ba2d465718 <line:31:5, col:58> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x55ba2d44e0f0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55ba2d466860 <col:36, col:58>
|   `-ReturnStmt 0x55ba2d466850 <col:38, col:45>
|     `-ImplicitCastExpr 0x55ba2d466838 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55ba2d466818 <col:45> 'const char []' lvalue Var 0x55ba2d44e428 'PORTS_1_1X2' 'const char []'
|-CXXMethodDecl 0x55ba2d4657e0 <line:32:5, col:62> col:17 processing 'const char *() const'
| |-Overrides: [ 0x55ba2d44e4b8 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55ba2d4668c0 <col:36, col:62>
|   `-ReturnStmt 0x55ba2d4668b0 <col:38, col:45>
|     `-ImplicitCastExpr 0x55ba2d466898 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55ba2d466878 <col:45> 'const char []' lvalue Var 0x55ba2d44e820 'PROCESSING_A_AH' 'const char []'
|-CXXMethodDecl 0x55ba2d465ab0 <line:34:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55ba2d44f8c0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55ba2d465960 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x55ba2d4659d8 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d465b80 <line:35:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x55ba2d44f990 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x55ba2d465d48 <line:37:5, col:28> col:10 push 'void (int, Packet *)'
| |-Overrides: [ 0x55ba2d44ce98 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55ba2d465c38 <col:15> col:18 'int'
| `-ParmVarDecl 0x55ba2d465cb0 <col:20, col:27> col:28 'Packet *'
|-CXXMethodDecl 0x55ba2d465ea0 <line:38:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x55ba2d44d028 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55ba2d465e10 <col:18> col:21 'int'
|-AccessSpecDecl 0x55ba2d465f48 <line:40:3, col:10> col:3 private
|-FieldDecl 0x55ba2d465f80 <line:42:5, col:13> col:13 _anno 'uint8_t':'unsigned char'
|-FieldDecl 0x55ba2d465fe0 <line:43:5, col:13> col:13 _color 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x55ba2d466058 <line:26:7> col:7 implicit CheckPaint 'void (const CheckPaint &)' inline default_delete noexcept-unevaluated 0x55ba2d466058
| `-ParmVarDecl 0x55ba2d466168 <col:7> col:7 'const CheckPaint &'
|-CXXConstructorDecl 0x55ba2d466208 <col:7> col:7 implicit CheckPaint 'void (CheckPaint &&)' inline default_delete noexcept-unevaluated 0x55ba2d466208
| `-ParmVarDecl 0x55ba2d466318 <col:7> col:7 'CheckPaint &&'
|-CXXMethodDecl 0x55ba2d4663b8 <col:7> col:7 implicit operator= 'CheckPaint &(const CheckPaint &)' inline default_delete noexcept-unevaluated 0x55ba2d4663b8
| `-ParmVarDecl 0x55ba2d4664c8 <col:7> col:7 'const CheckPaint &'
|-CXXMethodDecl 0x55ba2d466538 <col:7> col:7 implicit operator= 'CheckPaint &(CheckPaint &&)' inline default_delete noexcept-unevaluated 0x55ba2d466538
| `-ParmVarDecl 0x55ba2d466648 <col:7> col:7 'CheckPaint &&'
`-CXXDestructorDecl 0x55ba2d4666d0 <col:7> col:7 implicit ~CheckPaint 'void ()' inline default noexcept-unevaluated 0x55ba2d4666d0
  `-Overrides: [ 0x55ba2d44cbc8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.CheckPaint = type { %class.Element.base, i8, i8, [2 x i8] }
  NonVirtualBaseLLVMType:%class.CheckPaint.base = type { %class.Element.base, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d220790 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55ba2d2208a8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55ba2d220948 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55ba2d2209a8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55ba2d220a08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55ba2d220ab8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d220dc0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d220ed8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55ba2d220f80 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55ba2d220fe8 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55ba2d221078 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55ba2d227110 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba2d227548 <col:12>
|-CXXConstructorDecl 0x55ba2d227218 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d227328 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ba2d220f80 'data' 'const char *'
| | `-ImplicitCastExpr 0x55ba2d229ad0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55ba2d229aa0 <col:12> 'const char *const' lvalue .data 0x55ba2d220f80
| |     `-DeclRefExpr 0x55ba2d229a80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d227328 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ba2d220fe8 'length' 'int'
| | `-ImplicitCastExpr 0x55ba2d229b60 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ba2d229b30 <col:12> 'const int' lvalue .length 0x55ba2d220fe8
| |     `-DeclRefExpr 0x55ba2d229b10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d227328 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55ba2d221078 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55ba2d229bf0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55ba2d229bc0 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba2d221078
| |     `-DeclRefExpr 0x55ba2d229ba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d227328 '' 'const String::rep_t &'
| `-CompoundStmt 0x55ba2d229c48 <col:12>
|-CXXConstructorDecl 0x55ba2d2273c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba2d2273c8
| `-ParmVarDecl 0x55ba2d2274d8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55ba2d22ca30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55ba2d238448 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d238558 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55ba2d238a70 <col:12>
|   |-BinaryOperator 0x55ba2d238888 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55ba2d238840 <col:12> 'const char *' lvalue ->data 0x55ba2d220f80
|   | | `-CXXThisExpr 0x55ba2d238830 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ba2d238870 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d238800 <col:12> 'const char *const' lvalue .data 0x55ba2d220f80
|   |     `-DeclRefExpr 0x55ba2d2387e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d238558 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55ba2d238950 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55ba2d238908 <col:12> 'int' lvalue ->length 0x55ba2d220fe8
|   | | `-CXXThisExpr 0x55ba2d2388f8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ba2d238938 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d2388c8 <col:12> 'const int' lvalue .length 0x55ba2d220fe8
|   |     `-DeclRefExpr 0x55ba2d2388a8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d238558 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55ba2d238a18 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55ba2d2389d0 <col:12> 'String::memo_t *' lvalue ->memo 0x55ba2d221078
|   | | `-CXXThisExpr 0x55ba2d2389c0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55ba2d238a00 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d238990 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba2d221078
|   |     `-DeclRefExpr 0x55ba2d238970 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d238558 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55ba2d238a60 <col:12>
|     `-UnaryOperator 0x55ba2d238a48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d238a38 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55ba2d2385c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba2d2385c8
  `-ParmVarDecl 0x55ba2d2386d8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d217d00 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2d217e18 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55ba2d217ea8 <col:16, col:22> col:16 public
|-TypedefDecl 0x55ba2d217ee8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55ba2ceebdc0 'const char *'
|   `-QualType 0x55ba2ceeb311 'const char' const
|     `-BuiltinType 0x55ba2ceeb310 'char'
|-TypedefDecl 0x55ba2d217f70 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55ba2d217f40 'String::const_iterator' sugar
|   |-Typedef 0x55ba2d217ee8 'const_iterator'
|   `-PointerType 0x55ba2ceebdc0 'const char *'
|     `-QualType 0x55ba2ceeb311 'const char' const
|       `-BuiltinType 0x55ba2ceeb310 'char'
|-TypedefDecl 0x55ba2d2180e0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55ba2d218050 'int (String::*)() const'
|   |-RecordType 0x55ba2d217d90 'String'
|   | `-CXXRecord 0x55ba2d217d00 'String'
|   `-ParenType 0x55ba2d217ff0 'int () const' sugar
|     `-FunctionProtoType 0x55ba2d1ebb80 'int () const' const cdecl
|       `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d218148 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55ba2d040760 'int64_t' sugar
|   |-Typedef 0x55ba2cf542d0 'int64_t'
|   `-TypedefType 0x55ba2cf2d4d0 '__int64_t' sugar
|     |-Typedef 0x55ba2cf2d0a8 '__int64_t'
|     `-BuiltinType 0x55ba2ceeb390 'long'
|-TypedefDecl 0x55ba2d2181b0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55ba2d040680 'uint64_t' sugar
|   |-Typedef 0x55ba2cf54470 'uint64_t'
|   `-TypedefType 0x55ba2cf2d560 '__uint64_t' sugar
|     |-Typedef 0x55ba2cf2d118 '__uint64_t'
|     `-BuiltinType 0x55ba2ceeb430 'unsigned long'
|-TypedefDecl 0x55ba2d218240 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55ba2d218210 'String::intmax_t' sugar
|   |-Typedef 0x55ba2d218148 'intmax_t'
|   `-TypedefType 0x55ba2d040760 'int64_t' sugar
|     |-Typedef 0x55ba2cf542d0 'int64_t'
|     `-TypedefType 0x55ba2cf2d4d0 '__int64_t' sugar
|       |-Typedef 0x55ba2cf2d0a8 '__int64_t'
|       `-BuiltinType 0x55ba2ceeb390 'long'
|-TypedefDecl 0x55ba2d2182d0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55ba2d2182a0 'String::uintmax_t' sugar
|   |-Typedef 0x55ba2d2181b0 'uintmax_t'
|   `-TypedefType 0x55ba2d040680 'uint64_t' sugar
|     |-Typedef 0x55ba2cf54470 'uint64_t'
|     `-TypedefType 0x55ba2cf2d560 '__uint64_t' sugar
|       |-Typedef 0x55ba2cf2d118 '__uint64_t'
|       `-BuiltinType 0x55ba2ceeb430 'unsigned long'
|-CXXConstructorDecl 0x55ba2d218390 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55ba2d218538 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55ba2d218478 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55ba2d2186e8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55ba2d218628 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55ba2d218840 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55ba2d2187b0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55ba2d218a58 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ba2d218908 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55ba2d218988 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55ba2d218c78 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55ba2d218b28 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d218ba8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55ba2d218e98 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ba2d218d48 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55ba2d218dc8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55ba2d2190b8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55ba2d218f68 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d218fe8 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55ba2d219248 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55ba2d219180 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55ba2d2193c8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55ba2d219308 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55ba2d219558 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55ba2d219490 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55ba2d2196b0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55ba2d219620 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55ba2d219808 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55ba2d219778 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55ba2d219960 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55ba2d2198d0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55ba2d219ae8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55ba2d219a28 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55ba2d219c78 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55ba2d219bb0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55ba2d219e08 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55ba2d219d40 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55ba2d219f98 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55ba2d219ed0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55ba2d21a090 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55ba2d21a1b8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55ba2d21a338 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55ba2d21a270 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55ba2d21a488 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55ba2d21a3f8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55ba2d21a540 <col:63> "" ""
|-CXXMethodDecl 0x55ba2d21a688 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55ba2d21a5c8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55ba2d21a898 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55ba2d21a748 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55ba2d21a7c8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55ba2d21aab8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55ba2d21a960 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55ba2d21a9e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55ba2d21ad98 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55ba2d21ab78 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55ba2d21abf8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55ba2d226be0 <col:55> 'int' 10
| `-ParmVarDecl 0x55ba2d21ac70 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba2d226c00 <col:76> 'bool' true
|-CXXMethodDecl 0x55ba2d21b078 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55ba2d21ae60 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55ba2d21aee0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55ba2d226c10 <col:56> 'int' 10
| `-ParmVarDecl 0x55ba2d21af58 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba2d226c30 <col:77> 'bool' true
|-CXXMethodDecl 0x55ba2d21b180 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55ba2d21b248 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55ba2d21b310 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55ba2d21b3b0 <col:20>
| `-OptimizeNoneAttr 0x55ba2d21b408 <col:30>
|-CXXConversionDecl 0x55ba2d21b4f8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55ba2d21b5c8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55ba2d21b688 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55ba2d21b778 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55ba2d21b838 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55ba2d21b9b8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55ba2d21b8f0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55ba2d21bb08 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55ba2d21ba78 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55ba2d21bbf8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55ba2d21bcb8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55ba2d21bf08 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55ba2d21bd70 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55ba2d21bdf0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55ba2d21c168 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55ba2d21bfd0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d21c050 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55ba2d21c238 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d21c448 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55ba2d21c2f0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55ba2d21c370 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55ba2d21c668 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55ba2d21c510 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55ba2d21c590 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55ba2d21c7f8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55ba2d21c730 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55ba2d21c8e8 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55ba2d21ca58 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55ba2d21c998 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ba2d21cc68 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55ba2d21cb18 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ba2d21cb98 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ba2d21ce80 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55ba2d21cd28 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55ba2d21cda0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55ba2d21d010 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55ba2d21cf40 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ba2d21d230 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55ba2d21d0d0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55ba2d21d150 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55ba2d21d380 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55ba2d21d2f0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55ba2d21d558 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55ba2d21d440 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ba2d21d4c0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55ba2d21d6a8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55ba2d21d618 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55ba2d21d8c0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55ba2d21d760 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55ba2d21d7e0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55ba2d226c40 <col:39> 'int' 0
|-CXXMethodDecl 0x55ba2d21dae0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55ba2d21d980 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55ba2d21da00 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55ba2d226c60 <col:48> 'int' 0
|-CXXMethodDecl 0x55ba2d21dcc0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55ba2d21dba0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55ba2d21dc20 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55ba2d226c80 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55ba2d21dd90 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55ba2d21de50 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55ba2d21df10 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55ba2d21dfd0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55ba2d21e090 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55ba2d21e238 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55ba2d21e140 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55ba2d21e3b8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55ba2d21e2f0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55ba2d21e590 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55ba2d21e478 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55ba2d21e708 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55ba2d21e648 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55ba2d21e850 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55ba2d21e7c0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55ba2d21e9a0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55ba2d21e910 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55ba2d21eb78 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55ba2d21ea60 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55ba2d21eae0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55ba2d21ed58 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55ba2d21ec40 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55ba2d21ecc0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55ba2d21eea8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55ba2d21ee18 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55ba2d21f0b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55ba2d21ef68 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55ba2d21efe8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55ba2d21f218 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55ba2d21f180 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55ba2d21f370 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55ba2d21f2d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55ba2d21f418 <col:57> "" ""
|-CXXMethodDecl 0x55ba2d21f528 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55ba2d21f498 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55ba2d21f678 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55ba2d21f5e8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55ba2d21f7f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55ba2d21f730 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55ba2d21f8c0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55ba2d21f980 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55ba2d21fa40 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55ba2d21fae0 <col:49> "" ""
|-CXXMethodDecl 0x55ba2d21fb70 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55ba2d21fc30 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55ba2d21fd20 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55ba2d21fde8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55ba2d21fea8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55ba2d21ff68 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55ba2d220060 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55ba2d220128 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55ba2d2201f0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55ba2d2203c8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55ba2d2202a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55ba2d220328 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55ba2d2205f0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55ba2d220490 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d220510 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55ba2d220700 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55ba2d220768 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba2d220790 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55ba2d2208a8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55ba2d220948 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55ba2d2209a8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55ba2d220a08 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55ba2d220ab8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55ba2d220b20 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55ba2d220d58 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55ba2d220da8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d220d38 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55ba2d220c48 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55ba2d220bf0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55ba2d220c30 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55ba2d220c10 <col:32> 'int' 8
|-CXXRecordDecl 0x55ba2d220dc0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba2d220ed8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55ba2d220f80 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55ba2d220fe8 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55ba2d221078 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55ba2d227110 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ba2d227548 <col:12>
| |-CXXConstructorDecl 0x55ba2d227218 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ba2d227328 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ba2d220f80 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55ba2d229ad0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55ba2d229aa0 <col:12> 'const char *const' lvalue .data 0x55ba2d220f80
| | |     `-DeclRefExpr 0x55ba2d229a80 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d227328 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ba2d220fe8 'length' 'int'
| | | `-ImplicitCastExpr 0x55ba2d229b60 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55ba2d229b30 <col:12> 'const int' lvalue .length 0x55ba2d220fe8
| | |     `-DeclRefExpr 0x55ba2d229b10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d227328 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55ba2d221078 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55ba2d229bf0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55ba2d229bc0 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba2d221078
| | |     `-DeclRefExpr 0x55ba2d229ba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d227328 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55ba2d229c48 <col:12>
| |-CXXConstructorDecl 0x55ba2d2273c8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba2d2273c8
| | `-ParmVarDecl 0x55ba2d2274d8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55ba2d22ca30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55ba2d238448 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ba2d238558 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55ba2d238a70 <col:12>
| |   |-BinaryOperator 0x55ba2d238888 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55ba2d238840 <col:12> 'const char *' lvalue ->data 0x55ba2d220f80
| |   | | `-CXXThisExpr 0x55ba2d238830 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ba2d238870 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55ba2d238800 <col:12> 'const char *const' lvalue .data 0x55ba2d220f80
| |   |     `-DeclRefExpr 0x55ba2d2387e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d238558 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55ba2d238950 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55ba2d238908 <col:12> 'int' lvalue ->length 0x55ba2d220fe8
| |   | | `-CXXThisExpr 0x55ba2d2388f8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ba2d238938 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55ba2d2388c8 <col:12> 'const int' lvalue .length 0x55ba2d220fe8
| |   |     `-DeclRefExpr 0x55ba2d2388a8 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d238558 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55ba2d238a18 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55ba2d2389d0 <col:12> 'String::memo_t *' lvalue ->memo 0x55ba2d221078
| |   | | `-CXXThisExpr 0x55ba2d2389c0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55ba2d238a00 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55ba2d238990 <col:12> 'String::memo_t *const' lvalue .memo 0x55ba2d221078
| |   |     `-DeclRefExpr 0x55ba2d238970 <col:12> 'const String::rep_t' lvalue ParmVar 0x55ba2d238558 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55ba2d238a60 <col:12>
| |     `-UnaryOperator 0x55ba2d238a48 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ba2d238a38 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55ba2d2385c8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55ba2d2385c8
|   `-ParmVarDecl 0x55ba2d2386d8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55ba2d2210f0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55ba2d221338 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55ba2d221158 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55ba2d2211d8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55ba2d221250 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55ba2d2270d0 <col:79, line:261:5>
|   |-BinaryOperator 0x55ba2d226d48 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55ba2d226ce0 <col:2, col:5> 'const char *' lvalue .data 0x55ba2d220f80
|   | | `-MemberExpr 0x55ba2d226cb0 <col:2> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|   | |   `-CXXThisExpr 0x55ba2d226ca0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55ba2d226d30 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ba2d226d10 <col:12> 'const char *' lvalue ParmVar 0x55ba2d221158 'data' 'const char *'
|   |-BinaryOperator 0x55ba2d226e10 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55ba2d226da8 <col:2, col:5> 'int' lvalue .length 0x55ba2d220fe8
|   | | `-MemberExpr 0x55ba2d226d78 <col:2> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|   | |   `-CXXThisExpr 0x55ba2d226d68 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55ba2d226df8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55ba2d226dd8 <col:14> 'int' lvalue ParmVar 0x55ba2d2211d8 'length' 'int'
|   `-IfStmt 0x55ba2d2270b8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55ba2d226f30 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55ba2d226f18 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55ba2d226ef8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55ba2d226ed8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55ba2d226e70 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|     |       | `-MemberExpr 0x55ba2d226e40 <col:7> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|     |       |   `-CXXThisExpr 0x55ba2d226e30 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55ba2d226ec0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba2d226ea0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55ba2d221250 'memo' 'String::memo_t *'
|     `-CallExpr 0x55ba2d227090 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55ba2d227078 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55ba2d226f80 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55ba2d20fd68 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55ba2d226fe8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ba2d220948
|         `-ImplicitCastExpr 0x55ba2d226fd0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55ba2d226fb0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55ba2d221250 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55ba2d2215e8 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55ba2d221408 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55ba2d221488 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55ba2d221500 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55ba2d2210f0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55ba2d227558 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55ba2d2276e8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55ba2d227650 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55ba2d2275c0 <col:2> '<bound member function type>' ->assign_memo 0x55ba2d221338
|     | `-ImplicitCastExpr 0x55ba2d227688 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55ba2d2275b0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55ba2d2276a0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba2d2275f0 <col:14> 'const char *' lvalue ParmVar 0x55ba2d221408 'data' 'const char *'
|     |-ImplicitCastExpr 0x55ba2d2276b8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55ba2d227610 <col:20> 'int' lvalue ParmVar 0x55ba2d221488 'length' 'int'
|     `-ImplicitCastExpr 0x55ba2d2276d0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d227630 <col:28> 'String::memo_t *' lvalue ParmVar 0x55ba2d221500 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55ba2d221778 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55ba2d2216b8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55ba2d227940 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55ba2d2278c0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55ba2d227710 <col:2> '<bound member function type>' ->assign_memo 0x55ba2d221338
|     | `-CXXThisExpr 0x55ba2d227700 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55ba2d2278f8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55ba2d227790 <col:14, col:19> 'const char *' lvalue .data 0x55ba2d220f80
|     |   `-MemberExpr 0x55ba2d227760 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55ba2d2210f0
|     |     `-DeclRefExpr 0x55ba2d227740 <col:14> 'const String' lvalue ParmVar 0x55ba2d2216b8 'x' 'const String &'
|     |-ImplicitCastExpr 0x55ba2d227910 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55ba2d227810 <col:25, col:30> 'int' lvalue .length 0x55ba2d220fe8
|     |   `-MemberExpr 0x55ba2d2277e0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55ba2d2210f0
|     |     `-DeclRefExpr 0x55ba2d2277c0 <col:25> 'const String' lvalue ParmVar 0x55ba2d2216b8 'x' 'const String &'
|     `-ImplicitCastExpr 0x55ba2d227928 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55ba2d227890 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|         `-MemberExpr 0x55ba2d227860 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55ba2d2210f0
|           `-DeclRefExpr 0x55ba2d227840 <col:38> 'const String' lvalue ParmVar 0x55ba2d2216b8 'x' 'const String &'
|-CXXMethodDecl 0x55ba2d221840 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55ba2d228300 <col:31, line:278:5>
|   `-IfStmt 0x55ba2d2282e8 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55ba2d2279e0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55ba2d2279c8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55ba2d227998 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|     |     `-MemberExpr 0x55ba2d227968 <col:6> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|     |       `-CXXThisExpr 0x55ba2d227958 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55ba2d2282c0 <col:15, line:277:2>
|       |-ParenExpr 0x55ba2d227e90 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55ba2d227e60 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55ba2d227af0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55ba2d227ad8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55ba2d227ac0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55ba2d227a80 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ba2d220948
|       |   |       `-ImplicitCastExpr 0x55ba2d227a68 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55ba2d227a38 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|       |   |           `-MemberExpr 0x55ba2d227a08 <col:27> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|       |   |             `-CXXThisExpr 0x55ba2d2279f8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55ba2d227b50 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55ba2d227b30 <col:54> 'int' 0
|       |   `-CallExpr 0x55ba2d227dc0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55ba2d227da8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55ba2d227d28 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55ba2d227e00 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55ba2d227c38 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55ba2d227e18 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55ba2d227c68 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55ba2d227e30 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55ba2d227ca0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55ba2d227e48 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55ba2d227d10 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55ba2d227cf8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55ba2d227cc0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55ba2d2281e0 <line:274:6, line:275:22>
|       | |-CallExpr 0x55ba2d2280a0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55ba2d228088 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55ba2d228000 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55ba2d2111b0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55ba2d227fd0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55ba2d220948
|       | |   `-ImplicitCastExpr 0x55ba2d227fb8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55ba2d227f88 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|       | |       `-MemberExpr 0x55ba2d227f58 <col:40> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|       | |         `-CXXThisExpr 0x55ba2d227f48 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55ba2d2281a0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55ba2d228188 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55ba2d2280c8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55ba2d226020 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55ba2d2281c8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55ba2d228128 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|       |       `-MemberExpr 0x55ba2d2280f8 <col:15> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|       |         `-CXXThisExpr 0x55ba2d2280e8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55ba2d2282a0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55ba2d228238 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55ba2d221078
|         | `-MemberExpr 0x55ba2d228208 <col:6> 'String::rep_t' lvalue ->_r 0x55ba2d2210f0
|         |   `-CXXThisExpr 0x55ba2d2281f8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55ba2d228288 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55ba2d228268 <col:16> 'int' 0
|-CXXMethodDecl 0x55ba2d221ad8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55ba2d2218f8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55ba2d221978 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55ba2d2219f0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55ba2d221bb0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55ba2d221e00 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55ba2d221c68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55ba2d221ce8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55ba2d221d60 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55ba2d221fe8 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55ba2d221ed0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55ba2d221f50 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55ba2d2220e8 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55ba2d2283d8 <col:41, line:286:5>
|   `-ReturnStmt 0x55ba2d2283c8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55ba2d228398 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55ba2d228360 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55ba2d228348 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55ba2d228328 <col:46> 'int' 1
|-CXXMethodDecl 0x55ba2d222388 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55ba2d2221a0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55ba2d222220 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55ba2d2222a0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55ba2d226020 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55ba2d222450 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55ba2d2260f0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55ba2d2262c0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55ba2d2261a8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55ba2d226228 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55ba2d226380 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55ba2d226448 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55ba2d226548 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55ba2d2265c0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55ba2d226638 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55ba2d2266a0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55ba2d2267a0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55ba2d2267f0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d226780 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55ba2d226760 <col:22> 'int' 14
|-CXXMethodDecl 0x55ba2d226a08 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55ba2d226820 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55ba2d2268a0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55ba2d226920 <col:43> col:46 'int'
|-FriendDecl 0x55ba2d226b10 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55ba2d226ba0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba2d2e8bb0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55ba2d2e8d88 prev 0x55ba2d2e8bb0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55ba2d2e8e18 <col:46, col:52> col:46 public
|-TypedefDecl 0x55ba2d2e8e40 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d2ea7a0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55ba2d2ea750 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55ba2d2ea730 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55ba2d2e9058 'type'
|     `-SubstTemplateTypeParmType 0x55ba2d2e9020 'String' sugar
|       |-TemplateTypeParmType 0x55ba2d1db5a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1db550 'T'
|       `-RecordType 0x55ba2d217d90 'String'
|         `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d2ea858 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55ba2d2ea820 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55ba2d2ea800 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55ba2d2ea7a0 'type'
|     `-ElaboratedType 0x55ba2d2ea750 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55ba2d2ea730 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55ba2d2e9058 'type'
|         `-SubstTemplateTypeParmType 0x55ba2d2e9020 'String' sugar
|           |-TemplateTypeParmType 0x55ba2d1db5a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ba2d1db550 'T'
|           `-RecordType 0x55ba2d217d90 'String'
|             `-CXXRecord 0x55ba2d217d00 'String'
|-CXXMethodDecl 0x55ba2d2ea9d8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55ba2d2ea8e8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55ba2d2eaac8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55ba2d2eaba8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55ba2d2eaba8
|-CXXMethodDecl 0x55ba2d2eae78 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55ba2d2ead80 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55ba2d2eb0b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba2d2eaf30 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2d2eafa8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d495890 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba2d495780 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2d4957f8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d4959e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55ba2d495ab8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55ba2d495d08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba2d495b78 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55ba2d495bf0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d495f68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55ba2d495dd8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55ba2d495e50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d496128 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55ba2d496038 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d4962e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55ba2d4961f0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d4963a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba2d496450 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ba2d496688 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55ba2d496500 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2d496578 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55ba2d496928 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55ba2d496830 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55ba2d4969f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55ba2d496a40 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55ba2d496a90 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba2d44f530 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55ba2d2e7618 prev 0x55ba2d44f530 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55ba2d2e8b20 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55ba2d2e8ad0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55ba2d2e8ab0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55ba2d2e8960 'type'
|     `-SubstTemplateTypeParmType 0x55ba2d2e87f0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55ba2d1b1350 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55ba2d1b12f8 'F'
|       `-RecordType 0x55ba2d2e8450 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55ba2d2e8370 'typed_array_memory'
|-FieldDecl 0x55ba2d496ae0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55ba2d496b30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ba2d496b68 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|   |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|   `-RecordType 0x55ba2d217d90 'String'
|     `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d496bf8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55ba2d496bc0 'String &'
|   `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|     |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|     `-RecordType 0x55ba2d217d90 'String'
|       `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d496c88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55ba2d496c50 'const String &'
|   `-QualType 0x55ba2d2e76b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-RecordType 0x55ba2d217d90 'String'
|         `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d496d18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55ba2d496ce0 'String *'
|   `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|     |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|     `-RecordType 0x55ba2d217d90 'String'
|       `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d496da8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55ba2d496d70 'const String *'
|   `-QualType 0x55ba2d2e76b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-RecordType 0x55ba2d217d90 'String'
|         `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d497a00 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55ba2d4979b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55ba2d497990 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55ba2d4978c8 'type'
|     `-LValueReferenceType 0x55ba2d497890 'const String &'
|       `-QualType 0x55ba2d497631 'const String' const
|         `-SubstTemplateTypeParmType 0x55ba2d497630 'String' sugar
|           |-TemplateTypeParmType 0x55ba2d1bb2a0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55ba2d1bb248 'T'
|           `-RecordType 0x55ba2d217d90 'String'
|             `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d497a68 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55ba2d496c50 'const String &'
|   `-QualType 0x55ba2d2e76b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-RecordType 0x55ba2d217d90 'String'
|         `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d497ac0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d497b28 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55ba2d496ce0 'String *'
|   `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|     |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|     `-RecordType 0x55ba2d217d90 'String'
|       `-CXXRecord 0x55ba2d217d00 'String'
|-TypedefDecl 0x55ba2d497b90 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55ba2d496d70 'const String *'
|   `-QualType 0x55ba2d2e76b1 'const String' const
|     `-SubstTemplateTypeParmType 0x55ba2d2e76b0 'String' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-RecordType 0x55ba2d217d90 'String'
|         `-CXXRecord 0x55ba2d217d00 'String'
|-EnumDecl 0x55ba2d497be8 <line:134:5> col:5
| `-EnumConstantDecl 0x55ba2d497ce0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55ba2d497cc0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55ba2d1e9f48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55ba2d1e9f20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55ba2d1e9f00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55ba2d497d68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55ba2d497ff8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d497e20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2d497ec0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55ba2d498288 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55ba2d498170 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55ba2d498548 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55ba2d498430 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55ba2d498860 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55ba2d498740 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55ba2d498b70 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55ba2d498a50 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55ba2d498e60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d498ca8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2d498d20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba2d498f88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55ba2d499038 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d499090 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4990d8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55ba2d499188 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4991e0 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4992a8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d499358 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4993b0 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4993f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d4994a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d499500 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d499548 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d4995f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d499650 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d499698 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d499748 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4997a0 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4997c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba2d499878 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba2d499928 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ba2d499ae8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d4999d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2d499a50 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba2d499c38 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55ba2d499ba8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d499de8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55ba2d499cf0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba2d499ea0 <col:20>
| `-OptimizeNoneAttr 0x55ba2d499ef8 <col:30>
|-CXXMethodDecl 0x55ba2d49a018 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55ba2d499f20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba2d49a0d0 <col:20>
| `-OptimizeNoneAttr 0x55ba2d49a128 <col:30>
|-CXXMethodDecl 0x55ba2d49a1e0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba2d49a150 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d49a328 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba2d49a298 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d49a458 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55ba2d49a558 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55ba2d49a628 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55ba2d49a6f8 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55ba2d49a838 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba2d49a7a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d49a980 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba2d49a8f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d49aac8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55ba2d49aa38 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba2d49ab80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55ba2d49ac80 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55ba2d49abf0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba2d49ad38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55ba2d49adf8 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55ba2d49aef8 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55ba2d49b078 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba2d49afb8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55ba2d49b838 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55ba2d49b130 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55ba2d49b798 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55ba2d49b698 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55ba2d49b918 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba2d49ba68 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba2d49b9d8 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba2d49bb20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55ba2d49bd68 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d49bbe0 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55ba2d49bc58 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55ba2d49bef8 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55ba2d49be38 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55ba2d49c108 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55ba2d49bfc0 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55ba2d49c038 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55ba2d49c1c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55ba2d49c428 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55ba2d49c330 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55ba2d49c4f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55ba2d49c4f8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d51d6c8 prev 0x55ba2d3cd3a8 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2d51d7c0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55ba2d51d850 <col:22, col:28> col:22 public
|-EnumDecl 0x55ba2d51d878 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55ba2d51d998 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51d978 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55ba2d51d960 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55ba2d51d940 <col:14> 'int' 999
| |-EnumConstantDecl 0x55ba2d51da40 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51da20 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55ba2d51da08 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55ba2d51d9e8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55ba2d51dad0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51dab0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55ba2d51da90 <col:17> 'int' 0
| |-EnumConstantDecl 0x55ba2d51db60 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51db40 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55ba2d51db20 <col:13> 'int' 1
| |-EnumConstantDecl 0x55ba2d51dbf0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51dbd0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55ba2d51dbb0 <col:16> 'int' 2
| |-EnumConstantDecl 0x55ba2d51dc80 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51dc60 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55ba2d51dc40 <col:13> 'int' 3
| |-EnumConstantDecl 0x55ba2d51dd10 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51dcf0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55ba2d51dcd0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55ba2d51dda0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51dd80 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55ba2d51dd60 <col:14> 'int' 5
| |-EnumConstantDecl 0x55ba2d51de30 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55ba2d51de10 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55ba2d51ddf0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55ba2d51dec0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55ba2d51dea0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55ba2d51de80 <col:13> 'int' 7
|-VarDecl 0x55ba2d51df30 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55ba2d51dfb8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55ba2d51e040 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55ba2d51e0c8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55ba2d51e150 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55ba2d51e1d8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55ba2d51e260 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55ba2d51e2e8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55ba2d51e370 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55ba2d51e3f8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55ba2d51e480 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55ba2d51e580 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55ba2d5238d8 '_nerrors' 'int'
| | `-IntegerLiteral 0x55ba2d524068 <line:128:13> 'int' 0
| `-CompoundStmt 0x55ba2d5240d8 <col:16, line:129:5>
|-CXXDestructorDecl 0x55ba2d51e670 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55ba2d5240e8 <col:29, line:132:5>
|-CXXMethodDecl 0x55ba2d51e828 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55ba2d51e760 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d51e8f0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55ba2d51e9d8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55ba2d524140 <col:44, line:161:5>
|   `-ReturnStmt 0x55ba2d524130 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55ba2d524118 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d5240f8 <col:9> 'ErrorHandler *' lvalue Var 0x55ba2d523938 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d51eb18 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55ba2d51ea88 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55ba2d51ebe0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55ba2d5241a0 <col:43, line:173:5>
|   `-ReturnStmt 0x55ba2d524190 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55ba2d524178 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d524158 <col:9> 'ErrorHandler *' lvalue Var 0x55ba2d5239b0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55ba2d51ec98 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55ba2d51ed18 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55ba2d51ee28 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55ba2d51ed98 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51ef78 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55ba2d51eee8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51f0d0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55ba2d51f038 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51f228 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55ba2d51f190 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51f380 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55ba2d51f2e8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51f590 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba2d51f438 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55ba2d51f4b8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51f768 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba2d51f650 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55ba2d51f6d0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51f988 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba2d51f828 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55ba2d51f8a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51fb68 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba2d51fa48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55ba2d51fac8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51fd48 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55ba2d51fc28 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55ba2d51fca8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d51fed0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55ba2d51fe08 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55ba2d5200a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55ba2d51ff88 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55ba2d520000 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55ba2d5243f8 <col:57, line:234:5>
|   `-ReturnStmt 0x55ba2d5243e8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55ba2d5243d0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55ba2d524378 <col:9, col:41> 'int'
|         |-MemberExpr 0x55ba2d524348 <col:9> '<bound member function type>' ->xmessage 0x55ba2d51fed0
|         | `-CXXThisExpr 0x55ba2d524338 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55ba2d5243b8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ba2d5243a0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ba2d524318 <col:18, col:40> 'String' (CXXTemporary 0x55ba2d524318)
|               `-CallExpr 0x55ba2d5242e0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55ba2d5242c8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55ba2d524240 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55ba2d522098 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55ba2d524260 <col:31> 'const String' lvalue ParmVar 0x55ba2d520000 'str' 'const String &'
|                 `-DeclRefExpr 0x55ba2d524280 <col:36> 'const String' lvalue ParmVar 0x55ba2d51ff88 'anno' 'const String &'
|-CXXMethodDecl 0x55ba2d520380 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55ba2d520160 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55ba2d5201e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55ba2d520258 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ba2d524688 <col:68, line:243:5>
|   `-ReturnStmt 0x55ba2d524678 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55ba2d524660 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55ba2d524600 <col:9, col:41> 'int'
|         |-MemberExpr 0x55ba2d5245d0 <col:9> '<bound member function type>' ->xmessage 0x55ba2d5200a0
|         | `-CXXThisExpr 0x55ba2d5245c0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55ba2d524498 <col:18> 'const String' lvalue ParmVar 0x55ba2d520160 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55ba2d524648 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ba2d524630 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ba2d5245a0 <col:24, col:40> 'String' (CXXTemporary 0x55ba2d5245a0)
|               `-CXXMemberCallExpr 0x55ba2d524538 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55ba2d5244c8 <col:24> '<bound member function type>' ->vformat 0x55ba2d521560
|                 | `-CXXThisExpr 0x55ba2d5244b8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55ba2d524568 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55ba2d5244f8 <col:32> 'const char *' lvalue ParmVar 0x55ba2d5201e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55ba2d524580 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55ba2d524518 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ba2d520258 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba2d520620 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55ba2d520448 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55ba2d5204c0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55ba2d520538 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55ba2d5249c8 <col:23, line:254:5>
|   `-ReturnStmt 0x55ba2d5249b8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55ba2d5249a0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55ba2d524940 <col:9, col:71> 'int'
|         |-MemberExpr 0x55ba2d524910 <col:9> '<bound member function type>' ->xmessage 0x55ba2d5200a0
|         | `-CXXThisExpr 0x55ba2d524900 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55ba2d524988 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55ba2d524970 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55ba2d5248c0 <col:18, col:65> 'String' (CXXTemporary 0x55ba2d5248c0)
|         |     `-CallExpr 0x55ba2d524858 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55ba2d524840 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55ba2d524728 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55ba2d522098 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55ba2d524748 <col:31> 'const String' lvalue ParmVar 0x55ba2d5204c0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55ba2d5248a0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55ba2d524888 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55ba2d524820 <col:37, col:64> 'String' (CXXTemporary 0x55ba2d524820)
|         |             `-CallExpr 0x55ba2d5247f0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55ba2d5247d8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55ba2d524768 <col:37> 'String (const String &)' lvalue CXXMethod 0x55ba2d5226e8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55ba2d524788 <col:56> 'const String' lvalue ParmVar 0x55ba2d520448 'landmark' 'const String &'
|         `-DeclRefExpr 0x55ba2d5248e0 <col:68> 'const String' lvalue ParmVar 0x55ba2d520538 'str' 'const String &'
|-CXXMethodDecl 0x55ba2d5209a0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55ba2d5206e8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55ba2d520760 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55ba2d5207e0 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55ba2d520858 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ba2d524c80 <col:34, line:267:5>
|   `-ReturnStmt 0x55ba2d524c70 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55ba2d524c58 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55ba2d524bf0 <col:9, col:51> 'int'
|         |-MemberExpr 0x55ba2d524bc0 <col:9> '<bound member function type>' ->xmessage 0x55ba2d520620
|         | `-CXXThisExpr 0x55ba2d524bb0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55ba2d524a68 <col:18> 'const String' lvalue ParmVar 0x55ba2d5206e8 'landmark' 'const String &'
|         |-DeclRefExpr 0x55ba2d524a88 <col:28> 'const String' lvalue ParmVar 0x55ba2d520760 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55ba2d524c40 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55ba2d524c28 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55ba2d524b90 <col:34, col:50> 'String' (CXXTemporary 0x55ba2d524b90)
|               `-CXXMemberCallExpr 0x55ba2d524b28 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55ba2d524ab8 <col:34> '<bound member function type>' ->vformat 0x55ba2d521560
|                 | `-CXXThisExpr 0x55ba2d524aa8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55ba2d524b58 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55ba2d524ae8 <col:42> 'const char *' lvalue ParmVar 0x55ba2d5207e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55ba2d524b70 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55ba2d524b08 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ba2d520858 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba2d520ab0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55ba2d524d00 <col:25, line:288:5>
|   `-ReturnStmt 0x55ba2d524cf0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55ba2d524cd8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55ba2d524ca8 <col:9> 'const int' lvalue ->_nerrors 0x55ba2d5238d8
|         `-CXXThisExpr 0x55ba2d524c98 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55ba2d520cc0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55ba2d520b68 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55ba2d520be8 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d520fa8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55ba2d520d88 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55ba2d520e08 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55ba2d520e80 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba2d521140 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55ba2d521078 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d521388 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55ba2d521200 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55ba2d521278 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55ba2d524f60 <col:58, line:357:5>
|   `-ReturnStmt 0x55ba2d524f50 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55ba2d524f38 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55ba2d524f08 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55ba2d524ef0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55ba2d524ed0 <col:9, col:29> 'String' (CXXTemporary 0x55ba2d524ed0)
|             `-CallExpr 0x55ba2d524e60 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55ba2d524e48 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55ba2d524dc8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55ba2d520fa8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55ba2d524d68 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55ba2d524e98 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55ba2d524d88 <col:21> 'const char *' lvalue ParmVar 0x55ba2d521200 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55ba2d524eb0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55ba2d524da8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55ba2d521278 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba2d521560 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55ba2d521450 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55ba2d5214c8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55ba2d5216b8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55ba2d521628 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d521800 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55ba2d521770 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55ba2d521aa0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55ba2d5218b8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55ba2d521938 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55ba2d5219b0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55ba2d521c00 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55ba2d521b70 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55ba2d525078 <col:37, line:441:5>
|   `-IfStmt 0x55ba2d525060 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55ba2d524fe8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55ba2d524fb8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55ba2d524f78 <col:6> 'int' lvalue ParmVar 0x55ba2d521b70 'level' 'int'
|     | `-ImplicitCastExpr 0x55ba2d524fd0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55ba2d524f98 <col:15> 'ErrorHandler::Level' EnumConstant 0x55ba2d51dc80 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55ba2d525048 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55ba2d525018 <col:8> 'int' lvalue ->_nerrors 0x55ba2d5238d8
|         `-CXXThisExpr 0x55ba2d525008 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55ba2d521cc8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55ba2d525110 <col:26, line:448:5>
|   `-BinaryOperator 0x55ba2d5250f0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55ba2d5250a0 <col:2> 'int' lvalue ->_nerrors 0x55ba2d5238d8
|     | `-CXXThisExpr 0x55ba2d525090 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55ba2d5250d0 <col:13> 'int' 0
|-CXXMethodDecl 0x55ba2d521e90 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55ba2d521d80 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55ba2d521df8 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55ba2d522098 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55ba2d521f50 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55ba2d521fc8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55ba2d522348 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55ba2d522158 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55ba2d5221d8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55ba2d522258 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55ba2d522400 <col:59> 0 0
|-CXXMethodDecl 0x55ba2d522598 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55ba2d522478 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55ba2d5224f8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55ba2d525780 <col:70, line:534:5>
|   |-DeclStmt 0x55ba2d525280 <line:528:2, col:20>
|   | |-VarDecl 0x55ba2d525138 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55ba2d5251a0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55ba2d5251d8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55ba2d525240 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55ba2d525350 <line:529:2, col:23>
|   | `-VarDecl 0x55ba2d5252b0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55ba2d525338 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55ba2d525318 <col:18> 'const char *' lvalue ParmVar 0x55ba2d522478 'begin' 'const char *'
|   |-DoStmt 0x55ba2d525718 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55ba2d525648 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55ba2d525630 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55ba2d525610 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55ba2d525368 <col:6> 'const char *' lvalue Var 0x55ba2d5252b0 'x' 'const char *'
|   | |     `-CallExpr 0x55ba2d525560 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55ba2d525548 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55ba2d525500 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55ba2d523db0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55ba2d5255c8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55ba2d5255b0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55ba2d525420 <col:20, col:27> 'String' (CXXTemporary 0x55ba2d525420)
|   | |       |     `-CXXTemporaryObjectExpr 0x55ba2d5253e8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55ba2d5255e0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55ba2d525440 <col:30> 'const char *' lvalue Var 0x55ba2d5252b0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55ba2d5255f8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55ba2d525460 <col:33> 'const char *' lvalue ParmVar 0x55ba2d5224f8 'end' 'const char *'
|   | |       |-UnaryOperator 0x55ba2d5254a0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55ba2d525480 <col:39> 'String' lvalue Var 0x55ba2d525138 'name' 'String'
|   | |       |-UnaryOperator 0x55ba2d5254d8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55ba2d5254b8 <col:46> 'String' lvalue Var 0x55ba2d5251d8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55ba2d5254f0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55ba2d525700 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55ba2d5256e8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55ba2d5256c8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55ba2d525698 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|   |         `-ImplicitCastExpr 0x55ba2d525680 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55ba2d525660 <col:11> 'String' lvalue Var 0x55ba2d525138 'name' 'String'
|   `-ReturnStmt 0x55ba2d525770 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55ba2d525758 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d525738 <col:9> 'const char *' lvalue Var 0x55ba2d5252b0 'x' 'const char *'
|-CXXMethodDecl 0x55ba2d5226e8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55ba2d522658 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55ba2d525d88 <col:55, line:550:5>
|   `-IfStmt 0x55ba2d525d60 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55ba2d5259c0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55ba2d5259a8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba2d525990 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba2d525970 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba2d525940 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|     | |       `-DeclRefExpr 0x55ba2d5257e0 <col:6> 'const String' lvalue ParmVar 0x55ba2d522658 'x' 'const String &'
|     | `-BinaryOperator 0x55ba2d525920 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55ba2d5258f0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55ba2d5258a0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55ba2d525888 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55ba2d525840 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55ba2d234d30 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55ba2d525800 <col:11> 'const String' lvalue ParmVar 0x55ba2d522658 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55ba2d525820 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55ba2d525908 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55ba2d5258d8 <col:19> 'char' 123
|     |-ReturnStmt 0x55ba2d525a30 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55ba2d525a00 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55ba2d5259e0 <col:13> 'const String' lvalue ParmVar 0x55ba2d522658 'x' 'const String &'
|     `-IfStmt 0x55ba2d525d38 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55ba2d525ac8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba2d525ab0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba2d525a90 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba2d525a60 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |       `-DeclRefExpr 0x55ba2d525a40 <col:11> 'const String' lvalue ParmVar 0x55ba2d522658 'x' 'const String &'
|       |-ReturnStmt 0x55ba2d525c50 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55ba2d525c38 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55ba2d525c08 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55ba2d525bf0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55ba2d525bd0 <col:13, col:29> 'String' (CXXTemporary 0x55ba2d525bd0)
|       |         `-CallExpr 0x55ba2d525b80 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55ba2d525b68 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55ba2d525ae0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55ba2d521e90 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55ba2d525bb0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55ba2d525b00 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55ba2d525b20 <col:28> 'const String' lvalue ParmVar 0x55ba2d522658 'x' 'const String &'
|       `-ReturnStmt 0x55ba2d525d28 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55ba2d525d10 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55ba2d525ce0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55ba2d525cc8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55ba2d525ca8 <col:13, col:20> 'String' (CXXTemporary 0x55ba2d525ca8)
|                 `-CXXTemporaryObjectExpr 0x55ba2d525c70 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55ba2d5228b0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55ba2d5227a0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55ba2d522818 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba2d524058 <col:71> 'bool' false
|-CXXRecordDecl 0x55ba2d522960 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55ba2d522c58 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55ba2d522bf0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55ba2d522b90 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55ba2d522b50 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55ba2d217d90 'String'
|       | `-CXXRecord 0x55ba2d217d00 'String'
|       |-BuiltinType 0x55ba2ceeb370 'int'
|       `-DecayedType 0x55ba2d3ce3f0 '__va_list_tag *' sugar
|         |-TypedefType 0x55ba2d3ce3c0 'va_list' sugar
|         | |-Typedef 0x55ba2d108e40 'va_list'
|         | `-TypedefType 0x55ba2d108df0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55ba2d040a18 '__gnuc_va_list'
|         |   `-TypedefType 0x55ba2d040980 '__builtin_va_list' sugar
|         |     |-Typedef 0x55ba2cf2cbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55ba2cf2cb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55ba2ceec0c0 '__va_list_tag'
|         |         `-CXXRecord 0x55ba2ceec028 '__va_list_tag'
|         `-PointerType 0x55ba2d10e6e0 '__va_list_tag *'
|           `-RecordType 0x55ba2ceec0c0 '__va_list_tag'
|             `-CXXRecord 0x55ba2ceec028 '__va_list_tag'
|-EnumDecl 0x55ba2d522d20 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55ba2d522e20 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d523380 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d522e00 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba2d522de0 <col:16> 'int' 1
| |-EnumConstantDecl 0x55ba2d522eb0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d523398 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d522e90 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55ba2d522e70 <col:21> 'int' 2
| |-EnumConstantDecl 0x55ba2d522f40 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d5233b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d522f20 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba2d522f00 <col:22> 'int' 4
| |-EnumConstantDecl 0x55ba2d522fd0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d5233c8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d522fb0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55ba2d522f90 <col:17> 'int' 8
| |-EnumConstantDecl 0x55ba2d523060 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d5233e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d523040 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55ba2d523020 <col:22> 'int' 16
| |-EnumConstantDecl 0x55ba2d5230f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d5233f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d5230d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55ba2d5230b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55ba2d523180 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d523410 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d523160 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55ba2d523140 <col:17> 'int' 64
| |-EnumConstantDecl 0x55ba2d523210 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d523428 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d5231f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55ba2d5231d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x55ba2d5232a0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55ba2d523440 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d523280 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55ba2d523260 <col:16> 'int' 256
| `-EnumConstantDecl 0x55ba2d523330 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55ba2d523458 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d523310 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55ba2d5232f0 <col:12> 'int' 1024
|-CXXMethodDecl 0x55ba2d523668 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55ba2d523480 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55ba2d523520 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55ba2d5237f0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55ba2d523728 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55ba2d523898 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55ba2d5238d8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55ba2d523938 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55ba2d5239b0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55ba2d523db0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55ba2d523a28 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55ba2d523aa8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55ba2d523b28 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55ba2d523ba0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55ba2d523c18 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55ba2d523c90 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55ba2d523ed8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55ba2d523ed8
| `-ParmVarDecl 0x55ba2d523fe8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55ba2d5260e8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55ba2d5260e8
  `-ParmVarDecl 0x55ba2d5261f8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d3cd438 prev 0x55ba2d411fd8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d3cd530 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55ba2d3cd5c0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55ba2d3cd6f8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d3cd5f8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55ba2d3ceb20 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d3ceb00 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55ba2d3ce698 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55ba2d3cebb0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba2d3ceb70 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55ba2d3cd5f8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55ba2d3ce700 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55ba2d3cec30 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d3cebf0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55ba2d3ce760 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55ba2d3cec70 <col:54> 'bool' false
| `-CompoundStmt 0x55ba2d3ced78 <col:61, line:38:5>
|   `-BinaryOperator 0x55ba2d3ced58 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55ba2d3cecf0 <col:9> 'const Element *' lvalue ->_context 0x55ba2d3ce638
|     | `-CXXThisExpr 0x55ba2d3cece0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55ba2d3ced40 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55ba2d3ced20 <col:20> 'int' 0
|-CXXConstructorDecl 0x55ba2d3cd908 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d3cd7b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55ba2d3cd830 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55ba2d3ceb58 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d3ceb38 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55ba2d3ce638 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55ba2d3cedd0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba2d3ced90 <col:20> 'const Element *' lvalue ParmVar 0x55ba2d3cd7b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55ba2d3ce698 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55ba2d3cee50 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba2d3cee10 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55ba2d3cd830 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55ba2d3ce700 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55ba2d3ceed0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55ba2d3cee90 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55ba2d3ce760 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55ba2d3cef10 <col:73> 'bool' false
| `-CompoundStmt 0x55ba2d3cef88 <col:80, line:46:5>
|-CXXMethodDecl 0x55ba2d3cda38 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55ba2d3cf000 <col:36, line:51:5>
|   `-ReturnStmt 0x55ba2d3ceff0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55ba2d3cefd8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55ba2d3cefa8 <col:16> 'const Element *const' lvalue ->_context 0x55ba2d3ce638
|         `-CXXThisExpr 0x55ba2d3cef98 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55ba2d3cdb28 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55ba2d3cf080 <col:32, line:57:5>
|   `-ReturnStmt 0x55ba2d3cf070 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55ba2d3cf058 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55ba2d3cf028 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55ba2d3ce698
|         `-CXXThisExpr 0x55ba2d3cf018 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55ba2d3cdbe8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55ba2d3cdd70 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ba2d3cdca0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d3cdec0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ba2d3cde30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d3ce010 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55ba2d3cdf80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55ba2d3ce218 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55ba2d3ce0c8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55ba2d3ce140 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55ba2d3ce548 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55ba2d3ce2d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55ba2d3ce358 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55ba2d3ce420 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55ba2d3ce600 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55ba2d3ce638 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55ba2d3ce698 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55ba2d3ce700 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55ba2d3ce760 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55ba2d3ce7b0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55ba2d3ce7b0
| `-ParmVarDecl 0x55ba2d3ce8c8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55ba2d3ce968 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55ba2d3ce968
| `-ParmVarDecl 0x55ba2d3cea78 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55ba2d52f9b0 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba2d4d9f10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55ba2d4da0e8 prev 0x55ba2d4d9f10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55ba2d4da178 <col:46, col:52> col:46 public
|-TypedefDecl 0x55ba2d4da1a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4dbd70 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55ba2d4dbd20 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55ba2d4da650 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55ba2d4da550 'type'
|     `-TemplateSpecializationType 0x55ba2d4da4e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55ba2d4da3c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55ba2d4da3a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55ba2d4da380 <col:24> 'unsigned long' 4
|       `-RecordType 0x55ba2d4da4c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55ba2d4da3e0 'char_array'
|-TypedefDecl 0x55ba2d4dbe28 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55ba2d4dbdf0 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55ba2d4dbdd0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55ba2d4dbd70 'type'
|     `-ElaboratedType 0x55ba2d4dbd20 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55ba2d4da650 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55ba2d4da550 'type'
|         `-TemplateSpecializationType 0x55ba2d4da4e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55ba2d4da3c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55ba2d4da3a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55ba2d4da380 <col:24> 'unsigned long' 4
|           `-RecordType 0x55ba2d4da4c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55ba2d4da3e0 'char_array'
|-CXXMethodDecl 0x55ba2d4dbfa8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55ba2d4dbeb8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55ba2d4dc098 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55ba2d4dc178 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55ba2d4dc448 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55ba2d4dc350 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55ba2d4dc688 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba2d4dc500 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2d4dc578 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4dc858 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba2d4dc748 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2d4dc7c0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4dc9b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55ba2d4dca88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55ba2d4dccd8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba2d4dcb48 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55ba2d4dcbc0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4dcf38 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55ba2d4dcda8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55ba2d4dce20 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4dd0f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55ba2d4dd008 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4e4638 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55ba2d4dd1c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4e46f0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba2d4e47a0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55ba2d4e49d8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55ba2d4e4850 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55ba2d4e48c8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55ba2d4e4c78 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55ba2d4e4b80 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55ba2d4e4d40 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55ba2d4e4d90 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55ba2d4e4de0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba2d4d8918 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55ba2d4d8b28 prev 0x55ba2d4d8918 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55ba2d4d9e80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55ba2d4d9e30 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55ba2d4d9e10 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55ba2d4d9cc0 'type'
|     `-SubstTemplateTypeParmType 0x55ba2d4d9ae0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55ba2d1b0bd0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1b0b78 'T'
|       `-RecordType 0x55ba2d4d9630 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55ba2d4d9548 'sized_array_memory'
|-FieldDecl 0x55ba2d4e4e30 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55ba2d4e4e80 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55ba2d4e4eb8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|   |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|   `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e4f48 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55ba2d4e4f10 'int &'
|   `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|     |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|     `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5008 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55ba2d4e4fd0 'const int &'
|   `-QualType 0x55ba2d4d8bc1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5098 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55ba2d4e5060 'int *'
|   `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|     |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|     `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5128 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55ba2d4e50f0 'const int *'
|   `-QualType 0x55ba2d4d8bc1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5d10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55ba2d4e5cc0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55ba2d4e5ca0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55ba2d4e5c30 'type'
|     `-SubstTemplateTypeParmType 0x55ba2d4e59f0 'int' sugar
|       |-TemplateTypeParmType 0x55ba2d1bb9d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1bb980 'T'
|       `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5d78 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55ba2d4e4fd0 'const int &'
|   `-QualType 0x55ba2d4d8bc1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5dd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5e38 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55ba2d4e5060 'int *'
|   `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|     |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|     `-BuiltinType 0x55ba2ceeb370 'int'
|-TypedefDecl 0x55ba2d4e5ea0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55ba2d4e50f0 'const int *'
|   `-QualType 0x55ba2d4d8bc1 'const int' const
|     `-SubstTemplateTypeParmType 0x55ba2d4d8bc0 'int' sugar
|       |-TemplateTypeParmType 0x55ba2d1e88c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55ba2d1e8868 'T'
|       `-BuiltinType 0x55ba2ceeb370 'int'
|-EnumDecl 0x55ba2d4e5ef8 <line:134:5> col:5
| `-EnumConstantDecl 0x55ba2d4e5ff0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55ba2d4e5fd0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55ba2d1e9f48 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55ba2d1e9f20 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55ba2d1e9f00 <col:40> 'int' 1
|-CXXConstructorDecl 0x55ba2d4e6078 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55ba2d4e62c8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d4e6130 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2d4e61d0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55ba2d4e6588 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55ba2d4e6470 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55ba2d4e6848 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55ba2d4e6730 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55ba2d4e6b90 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55ba2d4e6a70 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55ba2d4e6ea0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55ba2d4e6d80 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55ba2d4e7190 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d4e6fd8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2d4e7050 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba2d4e72b8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55ba2d4e7398 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4e73f0 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4e7438 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55ba2d4e74e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4e7540 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4e7608 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d4e76b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4e7710 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4e7758 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d4e7808 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4e7860 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4e78a8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d4e7958 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4e79b0 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4e79f8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55ba2d4e7aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55ba2d4e7b00 <col:30> Inherited
|-CXXMethodDecl 0x55ba2d4e7b28 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba2d4e7bd8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55ba2d4e7c88 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55ba2d4e7e48 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d4e7d38 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55ba2d4e7db0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba2d4e7f98 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55ba2d4e7f08 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d4e8148 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55ba2d4e8050 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba2d4e8200 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4e8258 <col:30>
|-CXXMethodDecl 0x55ba2d4e8378 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55ba2d4e8280 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55ba2d4e8430 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4e8488 <col:30>
|-CXXMethodDecl 0x55ba2d4e8540 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba2d4e84b0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d4e8688 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba2d4e85f8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d4e87b8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55ba2d4e88e8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55ba2d4e89b8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55ba2d4e8a88 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55ba2d4e8bc8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55ba2d4e8b38 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d4e8d10 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55ba2d4e8c80 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55ba2d4e8e58 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55ba2d4e8dc8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba2d4e8f10 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55ba2d4e9010 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55ba2d4e8f80 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55ba2d4e90c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55ba2d4e9188 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55ba2d4e9288 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55ba2d4e9408 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba2d4e9348 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55ba2d4e9bc8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55ba2d4e94c0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55ba2d4e9b28 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55ba2d4e9a28 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55ba2d4e9ca8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55ba2d4e9df8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55ba2d4e9d68 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba2d4e9eb0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55ba2d4ea0f8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55ba2d4e9f70 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55ba2d4e9fe8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55ba2d4ea2b8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55ba2d4ea1c8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55ba2d4ea508 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55ba2d4ea380 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55ba2d4ea3f8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55ba2d4ea5c8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55ba2d4ea828 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55ba2d4ea730 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55ba2d4ea8f8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d4d6a88 prev 0x55ba2d4b86c8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2d4d6b80 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55ba2d4d6c70 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55ba2d4fc670 <col:16, line:828:9>
|-CXXDestructorDecl 0x55ba2d4d6d60 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55ba2d4fc680 <col:25, line:830:9>
|-CXXMethodDecl 0x55ba2d4d6e60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55ba2d4d6f10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55ba2d4d6fb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55ba2d4d6fb8
| `-ParmVarDecl 0x55ba2d4d70c8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55ba2d4d7888 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55ba2d4d7888
  `-ParmVarDecl 0x55ba2d4d7998 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d4b84d8 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55ba2d4b8638 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55ba2d4b86c8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55ba2d4b8780 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55ba2d4b8888 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55ba2d4b87b8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba2d4ebeb8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba2d4ebe98 <col:31> 'int' 0
|-CXXConstructorDecl 0x55ba2d4b8ba8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d4b8a20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55ba2d4b8a98 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba2d4ebef0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba2d4ebed0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55ba2d4b8d80 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d4b8c70 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55ba2d4b8ce8 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba2d4ebf28 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba2d4ebf08 <col:55> 'int' 0
|-CXXConstructorDecl 0x55ba2d4b9138 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55ba2d4b8f20 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55ba2d4b8f98 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55ba2d4b9010 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55ba2d4ebf60 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55ba2d4ebf40 <col:31> 'int' 0
|-CXXConstructorDecl 0x55ba2d4b92f8 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55ba2d4b9238 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55ba2d4b93f0 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55ba2d4b95d8 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55ba2d4b94e0 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55ba2d4b96c8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55ba2d4ec310 <col:24, line:291:5>
|   `-ReturnStmt 0x55ba2d4ec300 <line:290:9, col:79>
|     `-BinaryOperator 0x55ba2d4ec2e0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55ba2d4ec1b8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55ba2d4ec110 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55ba2d4ec0f0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55ba2d4ebfe8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55ba2d4ebfd0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55ba2d4ebfb8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55ba2d4ebf88 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55ba2d4d88b0
|       | |   |       `-CXXThisExpr 0x55ba2d4ebf78 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55ba2d4ec0d8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55ba2d4ec0c0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55ba2d4ec088 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55ba2d4ec058 <col:28, col:35> '<bound member function type>' ->size 0x55ba2d4997c8
|       | |           `-ImplicitCastExpr 0x55ba2d4ec0a8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55ba2d4ec040 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55ba2d4ec010 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55ba2d4d88b0
|       | |                 `-CXXThisExpr 0x55ba2d4ec000 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55ba2d4ec1a0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55ba2d4ec188 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55ba2d4ec170 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55ba2d4ec140 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55ba2d4eaa40
|       |         `-CXXThisExpr 0x55ba2d4ec130 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55ba2d4ec2c0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55ba2d4ec2a8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ba2d4ec290 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ba2d4ec250 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55ba2d4ec238 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55ba2d4ec1e8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55ba2d4eaaf0
|         |     |   `-CXXThisExpr 0x55ba2d4ec1d8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55ba2d4ec218 <col:73> 'int' 0
|         `-IntegerLiteral 0x55ba2d4ec270 <col:79> 'int' 0
|-CXXMethodDecl 0x55ba2d4b9788 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55ba2d4ec4e8 <col:32, line:296:5>
|   `-ReturnStmt 0x55ba2d4ec4d8 <line:295:9, col:49>
|     `-BinaryOperator 0x55ba2d4ec4b8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55ba2d4ec398 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55ba2d4ec380 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55ba2d4ec368 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55ba2d4ec338 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55ba2d4eaa40
|       |       `-CXXThisExpr 0x55ba2d4ec328 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55ba2d4ec498 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55ba2d4ec480 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55ba2d4ec468 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55ba2d4ec428 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55ba2d4ec410 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55ba2d4ec3c0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55ba2d4eaaf0
|         |     |   `-CXXThisExpr 0x55ba2d4ec3b0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55ba2d4ec3f0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55ba2d4ec448 <col:49> 'int' 0
|-CXXMethodDecl 0x55ba2d4b9878 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55ba2d4ee070 <col:19, line:306:5>
|   |-IfStmt 0x55ba2d4edf90 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55ba2d4ec558 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55ba2d4ec540 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55ba2d4ec510 <col:13> 'Vector<String> *' lvalue ->_conf 0x55ba2d4d88b0
|   | |     `-CXXThisExpr 0x55ba2d4ec500 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55ba2d4edf70 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55ba2d4ec5c8 <col:13, col:20> '<bound member function type>' ->clear 0x55ba2d49c1c8
|   |     `-ImplicitCastExpr 0x55ba2d4ec5b0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55ba2d4ec580 <col:13> 'Vector<String> *' lvalue ->_conf 0x55ba2d4d88b0
|   |         `-CXXThisExpr 0x55ba2d4ec570 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55ba2d4ee018 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55ba2d4edfe8 <col:9, col:16> '<bound member function type>' .clear 0x55ba2d4ea5c8
|   |   `-MemberExpr 0x55ba2d4edfb8 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55ba2d4ea9e0
|   |     `-CXXThisExpr 0x55ba2d4edfa8 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55ba2d4ee060 <line:305:9, col:17>
|     `-UnaryOperator 0x55ba2d4ee048 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d4ee038 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba2d4b9af8 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55ba2d4b9a00 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55ba2d4b9c78 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55ba2d4b9bb0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55ba2d4b9ff8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55ba2d4b9d20 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55ba2d4b9f58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55ba2d4b9dc8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55ba2d4b9e40 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55ba2d4ee390 <col:67, line:327:5>
|     |-WhileStmt 0x55ba2d4ee340 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55ba2d4ee158 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55ba2d4ee0d8 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55ba2d40a4a8 0x55ba2d253a88 0x55ba2d253760 0x55ba2d244f40 0x55ba2d244bf0 0x55ba2d2444e0 0x55ba2d216e50 0x55ba2d1a3310
|     | | |-DeclRefExpr 0x55ba2d4ee098 <col:16> 'Iter' lvalue ParmVar 0x55ba2d4b9dc8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55ba2d4ee0b8 <col:25> 'Iter' lvalue ParmVar 0x55ba2d4b9e40 'end' 'Iter'
|     | `-CompoundStmt 0x55ba2d4ee320 <col:30, line:325:9>
|     |   |-CallExpr 0x55ba2d4ee2c0 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55ba2d4ee1a0 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55ba2d4ee290 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55ba2d4ee220 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|     |   |   `-DeclRefExpr 0x55ba2d4ee200 <col:24> 'Iter' lvalue ParmVar 0x55ba2d4b9dc8 'begin' 'Iter'
|     |   `-UnaryOperator 0x55ba2d4ee308 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55ba2d4ee2e8 <col:15> 'Iter' lvalue ParmVar 0x55ba2d4b9dc8 'begin' 'Iter'
|     `-ReturnStmt 0x55ba2d4ee380 <line:326:9, col:17>
|       `-UnaryOperator 0x55ba2d4ee368 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4ee358 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba2d4ba100 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55ba2d4ba070 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55ba2d4ba248 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55ba2d4ba1b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55ba2d4ba310 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55ba2d4ee470 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55ba2d4ee410 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55ba2d4ee3c0 <col:9> '<bound member function type>' ->reset_from 0x55ba2d4eae68
|   | | `-CXXThisExpr 0x55ba2d4ee3b0 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55ba2d4ee3f0 <col:20> 'int' 0
|   `-ReturnStmt 0x55ba2d4ee460 <line:352:9, col:17>
|     `-UnaryOperator 0x55ba2d4ee448 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d4ee438 <col:17> 'Args *' this
|-VarDecl 0x55ba2d4ba3c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba2d4ba430 <col:38> 'int' 1
|-VarDecl 0x55ba2d4ba4c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba2d4ba528 <col:39> 'int' 2
|-VarDecl 0x55ba2d4ba5b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba2d4ba620 <col:39> 'int' 4
|-VarDecl 0x55ba2d4ba6b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55ba2d4ba718 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55ba2d4baa98 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55ba2d4ba790 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4ba9f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ba2d4ba840 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4ba8e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ee5c8 <col:43, line:371:5>
|     `-ReturnStmt 0x55ba2d4ee5b8 <line:370:9, col:34>
|       `-CallExpr 0x55ba2d4ee580 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ee4a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ee520 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4ba840 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4ee540 <col:30> 'int' 0
|         `-DeclRefExpr 0x55ba2d4ee560 <col:33> 'T' lvalue ParmVar 0x55ba2d4ba8e8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4badc8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55ba2d4bab00 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4bad28 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ba2d4babb0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bac58 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ee718 <col:45, line:375:5>
|     `-ReturnStmt 0x55ba2d4ee708 <line:374:9, col:42>
|       `-CallExpr 0x55ba2d4ee6d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ee5f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ee670 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4babb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4ee690 <col:30> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55ba2d4ee6b0 <col:41> 'T' lvalue ParmVar 0x55ba2d4bac58 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4bb0f8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55ba2d4bae30 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4bb058 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55ba2d4baee0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4baf88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ee868 <col:45, line:379:5>
|     `-ReturnStmt 0x55ba2d4ee858 <line:378:9, col:43>
|       `-CallExpr 0x55ba2d4ee820 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ee740 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ee7c0 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4baee0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4ee7e0 <col:30> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int'
|         `-DeclRefExpr 0x55ba2d4ee800 <col:42> 'T' lvalue ParmVar 0x55ba2d4baf88 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4bb428 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55ba2d4bb160 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55ba2d4bb388 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55ba2d4bb210 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55ba2d4bb2b8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x55ba2d4eea68 <col:46, line:383:5>
| |   `-ReturnStmt 0x55ba2d4eea58 <line:382:9, col:55>
| |     `-CallExpr 0x55ba2d4eea20 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55ba2d4ee890 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55ba2d4ee910 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bb210 'keyword' 'const char *'
| |       |-BinaryOperator 0x55ba2d4ee9e0 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x55ba2d4ee990 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x55ba2d4ee970 <col:30> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x55ba2d4ee9c8 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x55ba2d4ee9a8 <col:42> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x55ba2d4eea00 <col:54> 'T' lvalue ParmVar 0x55ba2d4bb2b8 'x' 'T &'
| `-CXXMethodDecl 0x55ba2d52fe38 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned char &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55ba2d52fc58 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x55ba2d52fd28 <col:40, col:43> col:43 x 'unsigned char &'
|-FunctionTemplateDecl 0x55ba2d4bb828 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55ba2d4bb490 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4bb788 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55ba2d4bb540 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bb5c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4bb668 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4eeba8 <col:54, line:388:5>
|     |-CallExpr 0x55ba2d4eeb30 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4eea80 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ba2d4eeac0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4eead0 <col:30> 'const char *' lvalue ParmVar 0x55ba2d4bb540 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba2d4eeaf0 <col:39> 'int' lvalue ParmVar 0x55ba2d4bb5c0 'flags' 'int'
|     | `-DeclRefExpr 0x55ba2d4eeb10 <col:46> 'T' lvalue ParmVar 0x55ba2d4bb668 'x' 'T &'
|     `-ReturnStmt 0x55ba2d4eeb98 <line:387:9, col:17>
|       `-UnaryOperator 0x55ba2d4eeb80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4eeb70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4bbcd8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba2d4bb898 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba2d4bb918 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba2d4bbc38 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4bb9d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bba78 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4bbb18 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba2d4eed18 <col:74, line:403:5>
|     `-ReturnStmt 0x55ba2d4eed08 <line:402:9, col:56>
|       `-CallExpr 0x55ba2d4eecc8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4eebd8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4eec48 <col:28> 'const char *' lvalue ParmVar 0x55ba2d4bb9d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4eec68 <col:37> 'int' 0
|         |-DeclRefExpr 0x55ba2d4eec88 <col:40> 'T' lvalue ParmVar 0x55ba2d4bba78 'x' 'T &'
|         `-DeclRefExpr 0x55ba2d4eeca8 <col:43> 'const V' lvalue ParmVar 0x55ba2d4bbb18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba2d4bc148 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55ba2d4bbd48 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba2d4bbdc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba2d4bc0a8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4bbe88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bbf28 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4bbfc8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba2d4eee80 <col:76, line:407:5>
|     `-ReturnStmt 0x55ba2d4eee70 <line:406:9, col:65>
|       `-CallExpr 0x55ba2d4eee30 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4eed40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4eedb0 <col:28> 'const char *' lvalue ParmVar 0x55ba2d4bbe88 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4eedd0 <col:37> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int'
|         |-DeclRefExpr 0x55ba2d4eedf0 <col:49> 'T' lvalue ParmVar 0x55ba2d4bbf28 'x' 'T &'
|         `-DeclRefExpr 0x55ba2d4eee10 <col:52> 'const V' lvalue ParmVar 0x55ba2d4bbfc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba2d4bc698 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba2d4bc1b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba2d4bc238 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba2d4bc5f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4bc2f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bc378 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4bc418 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4bc4b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba2d4eefe8 <col:85, line:412:5>
|     |-CallExpr 0x55ba2d4eef68 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4eee98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55ba2d4eeed8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4eeee8 <col:37> 'const char *' lvalue ParmVar 0x55ba2d4bc2f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba2d4eef08 <col:46> 'int' lvalue ParmVar 0x55ba2d4bc378 'flags' 'int'
|     | |-DeclRefExpr 0x55ba2d4eef28 <col:53> 'T' lvalue ParmVar 0x55ba2d4bc418 'x' 'T &'
|     | `-DeclRefExpr 0x55ba2d4eef48 <col:56> 'const V' lvalue ParmVar 0x55ba2d4bc4b8 'default_value' 'const V &'
|     `-ReturnStmt 0x55ba2d4eefd8 <line:411:9, col:17>
|       `-UnaryOperator 0x55ba2d4eefc0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4eefb0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4bcb28 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55ba2d4bc710 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bc788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4bca88 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4bc848 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bc8c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bc968 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ef168 <col:53, line:425:5>
|     `-ReturnStmt 0x55ba2d4ef158 <line:424:9, col:42>
|       `-CallExpr 0x55ba2d4ef118 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ef018 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ef098 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bc848 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4ef0b8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55ba2d4ef0d8 <col:33> 'P' lvalue ParmVar 0x55ba2d4bc8c0 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4ef0f8 <col:41> 'T' lvalue ParmVar 0x55ba2d4bc968 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4bcf78 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55ba2d4bcb98 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bcc18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4bced8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4bccd8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bcd50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bcdf8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ef2e0 <col:55, line:429:5>
|     `-ReturnStmt 0x55ba2d4ef2d0 <line:428:9, col:50>
|       `-CallExpr 0x55ba2d4ef290 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ef190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ef210 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bccd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4ef230 <col:30> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55ba2d4ef250 <col:41> 'P' lvalue ParmVar 0x55ba2d4bcd50 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4ef270 <col:49> 'T' lvalue ParmVar 0x55ba2d4bcdf8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4bd3c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55ba2d4bcfe8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bd068 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x55ba2d4bd328 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x55ba2d4bd128 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55ba2d4bd1a0 <col:39, col:41> col:41 referenced parser 'P'
| | |-ParmVarDecl 0x55ba2d4bd248 <col:49, col:52> col:52 referenced x 'T &'
| | `-CompoundStmt 0x55ba2d4ef458 <col:55, line:433:5>
| |   `-ReturnStmt 0x55ba2d4ef448 <line:432:9, col:51>
| |     `-CallExpr 0x55ba2d4ef408 <col:16, col:51> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55ba2d4ef308 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55ba2d4ef388 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bd128 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55ba2d4ef3a8 <col:30> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int'
| |       |-DeclRefExpr 0x55ba2d4ef3c8 <col:42> 'P' lvalue ParmVar 0x55ba2d4bd1a0 'parser' 'P'
| |       `-DeclRefExpr 0x55ba2d4ef3e8 <col:50> 'T' lvalue ParmVar 0x55ba2d4bd248 'x' 'T &'
| `-CXXMethodDecl 0x55ba2d530948 <line:431:5, line:433:5> line:431:11 used read_p 'Args &(const char *, AnnoArg, int &)'
|   |-TemplateArgument type 'AnnoArg'
|   |-TemplateArgument type 'int'
|   |-ParmVarDecl 0x55ba2d5306b0 <col:18, col:30> col:30 keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d530758 <col:39, col:41> col:41 parser 'AnnoArg':'AnnoArg'
|   `-ParmVarDecl 0x55ba2d530828 <col:49, col:52> col:52 x 'int &'
|-FunctionTemplateDecl 0x55ba2d4bd818 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55ba2d4bd438 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bd4b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4bd778 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4bd578 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bd5f0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bd698 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ef680 <col:56, line:437:5>
|     `-ReturnStmt 0x55ba2d4ef670 <line:436:9, col:63>
|       `-CallExpr 0x55ba2d4ef630 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ef480 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ef500 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bd578 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba2d4ef5d0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba2d4ef580 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba2d4ef560 <col:30> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba2d4ef5b8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba2d4ef598 <col:42> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55ba2d4ef5f0 <col:54> 'P' lvalue ParmVar 0x55ba2d4bd5f0 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4ef610 <col:62> 'T' lvalue ParmVar 0x55ba2d4bd698 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4bdd48 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55ba2d4bd888 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bd908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4bdca8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba2d4bd9c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bda48 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4bdac0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bdb68 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4ef7e8 <col:64, line:442:5>
|     |-CallExpr 0x55ba2d4ef768 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4ef698 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ba2d4ef6d8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4ef6e8 <col:30> 'const char *' lvalue ParmVar 0x55ba2d4bd9c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba2d4ef708 <col:39> 'int' lvalue ParmVar 0x55ba2d4bda48 'flags' 'int'
|     | |-DeclRefExpr 0x55ba2d4ef728 <col:46> 'P' lvalue ParmVar 0x55ba2d4bdac0 'parser' 'P'
|     | `-DeclRefExpr 0x55ba2d4ef748 <col:54> 'T' lvalue ParmVar 0x55ba2d4bdb68 'x' 'T &'
|     `-ReturnStmt 0x55ba2d4ef7d8 <line:441:9, col:17>
|       `-UnaryOperator 0x55ba2d4ef7c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4ef7b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4be348 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba2d4bddc0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bde38 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ba2d4bdeb8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba2d4be2a8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4bdf80 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bdff8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4be098 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4be168 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba2d4ef980 <col:84, line:458:5>
|     `-ReturnStmt 0x55ba2d4ef970 <line:457:9, col:64>
|       `-CallExpr 0x55ba2d4ef928 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ef818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4ef888 <col:28> 'const char *' lvalue ParmVar 0x55ba2d4bdf80 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4ef8a8 <col:37> 'int' 0
|         |-DeclRefExpr 0x55ba2d4ef8c8 <col:40> 'P' lvalue ParmVar 0x55ba2d4bdff8 'parser' 'P'
|         |-DeclRefExpr 0x55ba2d4ef8e8 <col:48> 'T' lvalue ParmVar 0x55ba2d4be098 'x' 'T &'
|         `-DeclRefExpr 0x55ba2d4ef908 <col:51> 'const V' lvalue ParmVar 0x55ba2d4be168 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba2d4be8c8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55ba2d4be3c0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4be438 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ba2d4be4b8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba2d4be828 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4be580 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4be5f8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4be698 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4be738 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba2d4efb10 <col:86, line:462:5>
|     `-ReturnStmt 0x55ba2d4efb00 <line:461:9, col:73>
|       `-CallExpr 0x55ba2d4efab8 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4ef9a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4efa18 <col:28> 'const char *' lvalue ParmVar 0x55ba2d4be580 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4efa38 <col:37> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int'
|         |-DeclRefExpr 0x55ba2d4efa58 <col:49> 'P' lvalue ParmVar 0x55ba2d4be5f8 'parser' 'P'
|         |-DeclRefExpr 0x55ba2d4efa78 <col:57> 'T' lvalue ParmVar 0x55ba2d4be698 'x' 'T &'
|         `-DeclRefExpr 0x55ba2d4efa98 <col:60> 'const V' lvalue ParmVar 0x55ba2d4be738 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55ba2d4bef28 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55ba2d4be940 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4be9b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55ba2d4bea38 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba2d4bee88 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4beb00 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4beb80 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4bebf8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bec98 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4bed38 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55ba2d4efca0 <col:95, line:467:5>
|     |-CallExpr 0x55ba2d4efc18 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4efb28 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55ba2d4efb68 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4efb78 <col:37> 'const char *' lvalue ParmVar 0x55ba2d4beb00 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba2d4efb98 <col:46> 'int' lvalue ParmVar 0x55ba2d4beb80 'flags' 'int'
|     | |-DeclRefExpr 0x55ba2d4efbb8 <col:53> 'P' lvalue ParmVar 0x55ba2d4bebf8 'parser' 'P'
|     | |-DeclRefExpr 0x55ba2d4efbd8 <col:61> 'T' lvalue ParmVar 0x55ba2d4bec98 'x' 'T &'
|     | `-DeclRefExpr 0x55ba2d4efbf8 <col:64> 'const V' lvalue ParmVar 0x55ba2d4bed38 'default_value' 'const V &'
|     `-ReturnStmt 0x55ba2d4efc90 <line:466:9, col:17>
|       `-UnaryOperator 0x55ba2d4efc78 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4efc68 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4bf508 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55ba2d4befa8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bf028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba2d4bf0a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba2d4bf468 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba2d4bf170 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bf1e8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bf288 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba2d4bf328 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba2d4efe48 <col:63, line:481:5>
|     `-ReturnStmt 0x55ba2d4efe38 <line:480:9, col:47>
|       `-CallExpr 0x55ba2d4efdf0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4efcd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4efd50 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bf170 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4efd70 <col:30> 'int' 0
|         |-DeclRefExpr 0x55ba2d4efd90 <col:33> 'P' lvalue ParmVar 0x55ba2d4bf1e8 'parser' 'P'
|         |-DeclRefExpr 0x55ba2d4efdb0 <col:41> 'T1' lvalue ParmVar 0x55ba2d4bf288 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba2d4efdd0 <col:45> 'T2' lvalue ParmVar 0x55ba2d4bf328 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba2d4bfa88 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55ba2d4bf580 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bf5f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba2d4bf678 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba2d4bf9e8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba2d4bf740 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bf7b8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bf858 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba2d4bf8f8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba2d4effe8 <col:65, line:485:5>
|     `-ReturnStmt 0x55ba2d4effd8 <line:484:9, col:55>
|       `-CallExpr 0x55ba2d4eff90 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4efe70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4efef0 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bf740 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4eff10 <col:30> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x55ba2d4eff30 <col:41> 'P' lvalue ParmVar 0x55ba2d4bf7b8 'parser' 'P'
|         |-DeclRefExpr 0x55ba2d4eff50 <col:49> 'T1' lvalue ParmVar 0x55ba2d4bf858 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba2d4eff70 <col:53> 'T2' lvalue ParmVar 0x55ba2d4bf8f8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba2d4c0008 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55ba2d4bfb00 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4bfb78 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba2d4bfbf8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba2d4bff68 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba2d4bfcc0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4bfd38 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4bfdd8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba2d4bfe78 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba2d4f0188 <col:65, line:489:5>
|     `-ReturnStmt 0x55ba2d4f0178 <line:488:9, col:56>
|       `-CallExpr 0x55ba2d4f0130 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0010 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0090 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4bfcc0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f00b0 <col:30> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int'
|         |-DeclRefExpr 0x55ba2d4f00d0 <col:42> 'P' lvalue ParmVar 0x55ba2d4bfd38 'parser' 'P'
|         |-DeclRefExpr 0x55ba2d4f00f0 <col:50> 'T1' lvalue ParmVar 0x55ba2d4bfdd8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba2d4f0110 <col:54> 'T2' lvalue ParmVar 0x55ba2d4bfe78 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba2d4c5a68 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55ba2d4c0080 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c00f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba2d4c5660 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba2d4c59c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba2d4c5720 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c5798 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c5838 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba2d4c58d8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba2d4f03d8 <col:66, line:493:5>
|     `-ReturnStmt 0x55ba2d4f03c8 <line:492:9, col:68>
|       `-CallExpr 0x55ba2d4f0380 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f01b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0230 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4c5720 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba2d4f0300 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba2d4f02b0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba2d4f0290 <col:30> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba2d4f02e8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba2d4f02c8 <col:42> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55ba2d4f0320 <col:54> 'P' lvalue ParmVar 0x55ba2d4c5798 'parser' 'P'
|         |-DeclRefExpr 0x55ba2d4f0340 <col:62> 'T1' lvalue ParmVar 0x55ba2d4c5838 'x1' 'T1 &'
|         `-DeclRefExpr 0x55ba2d4f0360 <col:66> 'T2' lvalue ParmVar 0x55ba2d4c58d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55ba2d4c60c8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55ba2d4c5ae0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c5b58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba2d4c5bd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba2d4c6028 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba2d4c5ca0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c5d20 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4c5d98 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c5e38 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55ba2d4c5ed8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55ba2d4f0568 <col:74, line:498:5>
|     |-CallExpr 0x55ba2d4f04e0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4f03f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55ba2d4f0430 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4f0440 <col:30> 'const char *' lvalue ParmVar 0x55ba2d4c5ca0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba2d4f0460 <col:39> 'int' lvalue ParmVar 0x55ba2d4c5d20 'flags' 'int'
|     | |-DeclRefExpr 0x55ba2d4f0480 <col:46> 'P' lvalue ParmVar 0x55ba2d4c5d98 'parser' 'P'
|     | |-DeclRefExpr 0x55ba2d4f04a0 <col:54> 'T1' lvalue ParmVar 0x55ba2d4c5e38 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55ba2d4f04c0 <col:58> 'T2' lvalue ParmVar 0x55ba2d4c5ed8 'x2' 'T2 &'
|     `-ReturnStmt 0x55ba2d4f0558 <line:497:9, col:17>
|       `-UnaryOperator 0x55ba2d4f0540 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4f0530 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4c6428 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55ba2d4c6148 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c6388 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba2d4c6200 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c6278 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f06b0 <col:52, line:509:5>
|     `-ReturnStmt 0x55ba2d4f06a0 <line:508:9, col:44>
|       `-CallExpr 0x55ba2d4f0668 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0598 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0608 <col:26> 'const char *' lvalue ParmVar 0x55ba2d4c6200 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4f0628 <col:35> 'int' 0
|         `-DeclRefExpr 0x55ba2d4f0648 <col:38> 'P' lvalue ParmVar 0x55ba2d4c6278 'parser' 'P'
|-FunctionTemplateDecl 0x55ba2d4c6728 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55ba2d4c6490 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c6688 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba2d4c6540 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c65b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f07f0 <col:54, line:513:5>
|     `-ReturnStmt 0x55ba2d4f07e0 <line:512:9, col:52>
|       `-CallExpr 0x55ba2d4f07a8 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f06d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0748 <col:26> 'const char *' lvalue ParmVar 0x55ba2d4c6540 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f0768 <col:35> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x55ba2d4f0788 <col:46> 'P' lvalue ParmVar 0x55ba2d4c65b8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba2d4c6a28 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55ba2d4c6790 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c6988 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba2d4c6840 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c68b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f0930 <col:54, line:517:5>
|     `-ReturnStmt 0x55ba2d4f0920 <line:516:9, col:53>
|       `-CallExpr 0x55ba2d4f08e8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0818 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0888 <col:26> 'const char *' lvalue ParmVar 0x55ba2d4c6840 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f08a8 <col:35> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int'
|         `-DeclRefExpr 0x55ba2d4f08c8 <col:47> 'P' lvalue ParmVar 0x55ba2d4c68b8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba2d4c6d28 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55ba2d4c6a90 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c6c88 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba2d4c6b40 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c6bb8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f0b20 <col:55, line:521:5>
|     `-ReturnStmt 0x55ba2d4f0b10 <line:520:9, col:65>
|       `-CallExpr 0x55ba2d4f0ad8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0958 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f09c8 <col:26> 'const char *' lvalue ParmVar 0x55ba2d4c6b40 'keyword' 'const char *'
|         |-BinaryOperator 0x55ba2d4f0a98 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55ba2d4f0a48 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55ba2d4f0a28 <col:35> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55ba2d4f0a80 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55ba2d4f0a60 <col:47> 'const int' lvalue Var 0x55ba2d4ba4c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55ba2d4f0ab8 <col:59> 'P' lvalue ParmVar 0x55ba2d4c6bb8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba2d4c70f8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55ba2d4c6d90 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c7058 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55ba2d4c6e40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c6ec0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4c6f38 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f0c60 <col:63, line:526:5>
|     |-CallExpr 0x55ba2d4f0be8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4f0b38 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55ba2d4f0b78 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4f0b88 <col:35> 'const char *' lvalue ParmVar 0x55ba2d4c6e40 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55ba2d4f0ba8 <col:44> 'int' lvalue ParmVar 0x55ba2d4c6ec0 'flags' 'int'
|     | `-DeclRefExpr 0x55ba2d4f0bc8 <col:51> 'P' lvalue ParmVar 0x55ba2d4c6f38 'parser' 'P'
|     `-ReturnStmt 0x55ba2d4f0c50 <line:525:9, col:17>
|       `-UnaryOperator 0x55ba2d4f0c38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4f0c28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4c7548 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55ba2d4c7168 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c71e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c74a8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c72a8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c7320 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c73c8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f0db8 <col:58, line:541:5>
|     `-ReturnStmt 0x55ba2d4f0da8 <line:540:9, col:39>
|       `-CallExpr 0x55ba2d4f0d70 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0c90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0d10 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4c72a8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f0d30 <col:30> 'P' lvalue ParmVar 0x55ba2d4c7320 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f0d50 <col:38> 'T' lvalue ParmVar 0x55ba2d4c73c8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4c7998 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55ba2d4c75b8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c7638 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c78f8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c76f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c7770 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c7818 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f0ef0 <col:60, line:545:5>
|     `-ReturnStmt 0x55ba2d4f0ee0 <line:544:9, col:41>
|       `-CallExpr 0x55ba2d4f0ea8 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0e48 <col:23> 'const char *' lvalue ParmVar 0x55ba2d4c76f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f0e68 <col:32> 'P' lvalue ParmVar 0x55ba2d4c7770 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f0e88 <col:40> 'T' lvalue ParmVar 0x55ba2d4c7818 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4c7de8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55ba2d4c7a08 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c7a88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c7d48 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c7b48 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c7bc0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c7c68 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f1028 <col:60, line:549:5>
|     `-ReturnStmt 0x55ba2d4f1018 <line:548:9, col:41>
|       `-CallExpr 0x55ba2d4f0fe0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f0f18 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f0f80 <col:23> 'const char *' lvalue ParmVar 0x55ba2d4c7b48 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f0fa0 <col:32> 'P' lvalue ParmVar 0x55ba2d4c7bc0 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f0fc0 <col:40> 'T' lvalue ParmVar 0x55ba2d4c7c68 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4c8238 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55ba2d4c7e58 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c7ed8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c8198 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c7f98 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c8010 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c80b8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f1160 <col:61, line:553:5>
|     `-ReturnStmt 0x55ba2d4f1150 <line:552:9, col:42>
|       `-CallExpr 0x55ba2d4f1118 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1050 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f10b8 <col:24> 'const char *' lvalue ParmVar 0x55ba2d4c7f98 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f10d8 <col:33> 'P' lvalue ParmVar 0x55ba2d4c8010 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f10f8 <col:41> 'T' lvalue ParmVar 0x55ba2d4c80b8 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4c8718 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55ba2d4c82a8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c8328 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c8678 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c83e8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c8468 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4c84e0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c8588 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f12d8 <col:69, line:557:5>
|     `-ReturnStmt 0x55ba2d4f12c8 <line:556:9, col:46>
|       `-CallExpr 0x55ba2d4f1288 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1188 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f1208 <col:21> 'const char *' lvalue ParmVar 0x55ba2d4c83e8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f1228 <col:30> 'int' lvalue ParmVar 0x55ba2d4c8468 'flags' 'int'
|         |-DeclRefExpr 0x55ba2d4f1248 <col:37> 'P' lvalue ParmVar 0x55ba2d4c84e0 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f1268 <col:45> 'T' lvalue ParmVar 0x55ba2d4c8588 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4c8a28 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba2d4c8790 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c8988 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55ba2d4c8840 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c88b8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f1418 <col:56, line:571:5>
|     `-ReturnStmt 0x55ba2d4f1408 <line:570:9, col:48>
|       `-CallExpr 0x55ba2d4f13d0 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1300 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f1370 <col:30> 'const char *' lvalue ParmVar 0x55ba2d4c8840 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4f1390 <col:39> 'int' 0
|         `-DeclRefExpr 0x55ba2d4f13b0 <col:42> 'P' lvalue ParmVar 0x55ba2d4c88b8 'parser' 'P'
|-FunctionTemplateDecl 0x55ba2d4c8db8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba2d4c8a90 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4c8d18 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55ba2d4c8b40 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c8bc0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4c8c38 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f15e8 <col:67, line:576:5>
|     |-CallExpr 0x55ba2d4f1570 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4f1430 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55ba2d4f1470 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4f1480 <col:39> 'const char *' lvalue ParmVar 0x55ba2d4c8b40 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ba2d4f1530 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ba2d4f14e0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ba2d4f14a0 <col:48> 'int' lvalue ParmVar 0x55ba2d4c8bc0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ba2d4f1518 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ba2d4f14f8 <col:56> 'const int' lvalue Var 0x55ba2d4ba6b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55ba2d4f1550 <col:68> 'P' lvalue ParmVar 0x55ba2d4c8c38 'parser' 'P'
|     `-ReturnStmt 0x55ba2d4f15d8 <line:575:9, col:17>
|       `-UnaryOperator 0x55ba2d4f15c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4f15b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4c9208 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba2d4c8e28 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c8ea8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c9168 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c8f68 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c8fe0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c9088 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f1758 <col:62, line:592:5>
|     `-ReturnStmt 0x55ba2d4f1748 <line:591:9, col:51>
|       `-CallExpr 0x55ba2d4f1708 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1618 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f1688 <col:30> 'const char *' lvalue ParmVar 0x55ba2d4c8f68 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4f16a8 <col:39> 'int' 0
|         |-DeclRefExpr 0x55ba2d4f16c8 <col:42> 'P' lvalue ParmVar 0x55ba2d4c8fe0 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f16e8 <col:50> 'T' lvalue ParmVar 0x55ba2d4c9088 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4c96e8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55ba2d4c9278 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c92f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c9648 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba2d4c93b8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c9438 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4c94b0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c9558 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f1950 <col:73, line:597:5>
|     |-CallExpr 0x55ba2d4f18d0 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4f1770 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55ba2d4f17b0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4f17c0 <col:39> 'const char *' lvalue ParmVar 0x55ba2d4c93b8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ba2d4f1870 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ba2d4f1820 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ba2d4f17e0 <col:48> 'int' lvalue ParmVar 0x55ba2d4c9438 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ba2d4f1858 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ba2d4f1838 <col:56> 'const int' lvalue Var 0x55ba2d4ba6b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55ba2d4f1890 <col:68> 'P' lvalue ParmVar 0x55ba2d4c94b0 'parser' 'P'
|     | `-DeclRefExpr 0x55ba2d4f18b0 <col:76> 'T' lvalue ParmVar 0x55ba2d4c9558 'x' 'T &'
|     `-ReturnStmt 0x55ba2d4f1940 <line:596:9, col:17>
|       `-UnaryOperator 0x55ba2d4f1928 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4f1918 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4c9c98 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55ba2d4c9760 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4c97d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4c9bf8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ba2d4c9898 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c9910 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4c9ad0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba2d4f1ac0 <col:65, line:614:5>
|     `-ReturnStmt 0x55ba2d4f1ab0 <line:613:9, col:46>
|       `-CallExpr 0x55ba2d4f1a70 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1980 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f19f0 <col:25> 'const char *' lvalue ParmVar 0x55ba2d4c9898 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4f1a10 <col:34> 'int' 0
|         |-DeclRefExpr 0x55ba2d4f1a30 <col:37> 'P' lvalue ParmVar 0x55ba2d4c9910 'parser' 'P'
|         `-DeclRefExpr 0x55ba2d4f1a50 <col:45> 'Vector<T>' lvalue ParmVar 0x55ba2d4c9ad0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55ba2d4ca0c8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55ba2d4c9d08 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4ca028 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55ba2d4c9dc0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4c9f10 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba2d4f1ce0 <col:55, line:618:5>
|     `-ReturnStmt 0x55ba2d4f1cd0 <line:617:9, col:55>
|       `-CallExpr 0x55ba2d4f1c90 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f1b58 <col:25> 'const char *' lvalue ParmVar 0x55ba2d4c9dc0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55ba2d4f1b78 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55ba2d4f1c50 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55ba2d4f1c70 <col:54> 'Vector<T>' lvalue ParmVar 0x55ba2d4c9f10 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55ba2d4ca698 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55ba2d4ca130 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4ca1a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4ca5f8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ba2d4ca268 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4ca2e8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4ca360 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4ca4b0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba2d4f1ed8 <col:76, line:623:5>
|     |-CallExpr 0x55ba2d4f1e58 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55ba2d4f1cf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55ba2d4f1d38 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55ba2d4f1d48 <col:34> 'const char *' lvalue ParmVar 0x55ba2d4ca268 'keyword' 'const char *'
|     | |-BinaryOperator 0x55ba2d4f1df8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55ba2d4f1da8 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55ba2d4f1d68 <col:43> 'int' lvalue ParmVar 0x55ba2d4ca2e8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55ba2d4f1de0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55ba2d4f1dc0 <col:51> 'const int' lvalue Var 0x55ba2d4ba6b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55ba2d4f1e18 <col:63> 'P' lvalue ParmVar 0x55ba2d4ca360 'parser' 'P'
|     | `-DeclRefExpr 0x55ba2d4f1e38 <col:71> 'Vector<T>' lvalue ParmVar 0x55ba2d4ca4b0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55ba2d4f1ec8 <line:622:9, col:17>
|       `-UnaryOperator 0x55ba2d4f1eb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4f1ea0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4cabd8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55ba2d4ca710 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4ca788 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4cab38 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55ba2d4ca848 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4ca8c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4caa10 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55ba2d4f2140 <col:66, line:627:5>
|     `-ReturnStmt 0x55ba2d4f2130 <line:626:9, col:59>
|       `-CallExpr 0x55ba2d4f20f0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55ba2d4f1f08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55ba2d4f1f78 <col:25> 'const char *' lvalue ParmVar 0x55ba2d4ca848 'keyword' 'const char *'
|         |-DeclRefExpr 0x55ba2d4f1f98 <col:34> 'int' lvalue ParmVar 0x55ba2d4ca8c8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55ba2d4f20b0 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55ba2d4f20d0 <col:58> 'Vector<T>' lvalue ParmVar 0x55ba2d4caa10 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55ba2d4cac68 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55ba2d4f21c0 <col:25, line:633:5>
|   `-ReturnStmt 0x55ba2d4f21b0 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55ba2d4f2198 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55ba2d4f2168 <col:16> 'const bool' lvalue ->_status 0x55ba2d4d8718
|         `-CXXThisExpr 0x55ba2d4f2158 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55ba2d4cade8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55ba2d4cad20 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55ba2d4f22a8 <col:27, line:639:5>
|   |-BinaryOperator 0x55ba2d4f2250 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba2d4f21d8 <col:9> 'bool' lvalue ParmVar 0x55ba2d4cad20 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba2d4f2238 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d4f2208 <col:13> 'bool' lvalue ->_status 0x55ba2d4d8718
|   |     `-CXXThisExpr 0x55ba2d4f21f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55ba2d4f2298 <line:638:9, col:17>
|     `-UnaryOperator 0x55ba2d4f2280 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d4f2270 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba2d4caf68 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55ba2d4caea8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55ba2d4f2398 <col:39, line:644:5>
|   |-BinaryOperator 0x55ba2d4f2340 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba2d4f22c8 <col:9> 'bool' lvalue ParmVar 0x55ba2d4caea8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba2d4f2328 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d4f22f8 <col:13> 'const bool' lvalue ->_status 0x55ba2d4d8718
|   |     `-CXXThisExpr 0x55ba2d4f22e8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55ba2d4f2388 <line:643:9, col:17>
|     `-UnaryOperator 0x55ba2d4f2370 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d4f2360 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55ba2d4cb030 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55ba2d4f2440 <col:30, line:651:5>
|   `-ReturnStmt 0x55ba2d4f2430 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55ba2d4f2418 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55ba2d4f23e8 <col:16> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|         `-ImplicitCastExpr 0x55ba2d4f23c8 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55ba2d4f23b8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55ba2d4cb178 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55ba2d4cb0e8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55ba2d4f2548 <col:32, line:658:5>
|   |-BinaryOperator 0x55ba2d4f24f0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba2d4f2458 <col:9> 'bool' lvalue ParmVar 0x55ba2d4cb0e8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba2d4f24d8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d4f24a8 <col:13> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|   |     `-ImplicitCastExpr 0x55ba2d4f2488 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55ba2d4f2478 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55ba2d4f2538 <line:657:9, col:17>
|     `-UnaryOperator 0x55ba2d4f2520 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d4f2510 <col:17> 'Args *' this
|-CXXMethodDecl 0x55ba2d4cb2c8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55ba2d4cb238 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55ba2d4f2658 <col:44, line:663:5>
|   |-BinaryOperator 0x55ba2d4f2600 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55ba2d4f2568 <col:9> 'bool' lvalue ParmVar 0x55ba2d4cb238 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55ba2d4f25e8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55ba2d4f25b8 <col:13> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|   |     `-ImplicitCastExpr 0x55ba2d4f2598 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55ba2d4f2588 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55ba2d4f2648 <line:662:9, col:17>
|     `-UnaryOperator 0x55ba2d4f2630 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d4f2620 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55ba2d4cb390 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55ba2d4cb458 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55ba2d4cb520 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55ba2d4cb5e8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55ba2d4cb8f8 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55ba2d4cb688 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4cb858 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55ba2d4cb768 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f2a10 <col:19, line:706:5>
|     `-IfStmt 0x55ba2d4f29e8 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55ba2d4f2758 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55ba2d4f2918 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55ba2d4f28e8 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55ba2d4f28a8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55ba2d4f27b0 <col:42> '<bound member function type>' ->simple_slot 0x55ba2d4ebb20
|       |     | `-CXXThisExpr 0x55ba2d4f27a0 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55ba2d4f2848 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55ba2d4f2800 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55ba2d258528
|       |     | `-DeclRefExpr 0x55ba2d4f27e0 <col:55> 'T' lvalue ParmVar 0x55ba2d4cb768 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55ba2d4f2888 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55ba2d4f29d8 <line:705:13, col:34>
|         `-CallExpr 0x55ba2d4f29b0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55ba2d4f2938 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55ba2d4f2990 <col:33> 'T' lvalue ParmVar 0x55ba2d4cb768 'x' 'T &'
|-FunctionTemplateDecl 0x55ba2d4cbbc8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55ba2d4cb958 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4cbb28 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55ba2d4cba38 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55ba2d4f2df0 <col:31, line:717:5>
|     |-DeclStmt 0x55ba2d4f2b50 <line:713:9, col:23>
|     | `-VarDecl 0x55ba2d4f2a38 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55ba2d4f2b28 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55ba2d4f2ab0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55ba2d4f2b08 <col:21> 'T' lvalue ParmVar 0x55ba2d4cba38 'x' 'T &'
|     |-IfStmt 0x55ba2d4f2da0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55ba2d4f2c48 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55ba2d4f2d80 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55ba2d4f2d20 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55ba2d4f2cb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|     |   | `-DeclRefExpr 0x55ba2d4f2c90 <col:14> 'T *' lvalue Var 0x55ba2d4f2a38 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55ba2d4f2d60 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55ba2d4f2dd8 <line:716:9, col:16>
|       `-DeclRefExpr 0x55ba2d4f2db8 <col:16> 'T *' lvalue Var 0x55ba2d4f2a38 's' 'T *'
|-FunctionTemplateDecl 0x55ba2d4cbfd8 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55ba2d4cbc28 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba2d4cbca8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba2d4cbf38 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4cbd88 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55ba2d4cbe28 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55ba2d4f3100 <col:37, line:726:5>
|     |-IfStmt 0x55ba2d4f3090 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55ba2d4f30b0 <line:723:13, col:26>
|     | | `-VarDecl 0x55ba2d4f2e58 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55ba2d4f2f48 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55ba2d4f2ed0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55ba2d4f2f28 <col:25> 'T' lvalue ParmVar 0x55ba2d4cbd88 'x' 'T &'
|     | |-DeclRefExpr 0x55ba2d4f2f70 <col:16> 'T *' lvalue Var 0x55ba2d4f2e58 's' 'T *'
|     | `-BinaryOperator 0x55ba2d4f3070 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55ba2d4f3020 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55ba2d4f2fb0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|     |   | `-DeclRefExpr 0x55ba2d4f2f90 <col:14> 'T *' lvalue Var 0x55ba2d4f2e58 's' 'T *'
|     |   `-DeclRefExpr 0x55ba2d4f3050 <col:18> 'const V' lvalue ParmVar 0x55ba2d4cbe28 'value' 'const V &'
|     `-ReturnStmt 0x55ba2d4f30f0 <line:725:9, col:17>
|       `-UnaryOperator 0x55ba2d4f30d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55ba2d4f30c8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55ba2d4cc3d8 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55ba2d4cc040 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55ba2d4cc338 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55ba2d4cc0f0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4cc170 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4cc218 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55ba2d4f3f20 <col:65, line:737:5>
|     |-DeclStmt 0x55ba2d4f3198 <line:732:9, col:26>
|     | `-VarDecl 0x55ba2d4f3130 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba2d4f3ee8 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55ba2d4f3f08 <line:733:13, col:58>
|       | `-VarDecl 0x55ba2d4f31c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba2d4f33a0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba2d4f3370 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba2d4f3358 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba2d4f3338 <col:26, col:58> 'String' (CXXTemporary 0x55ba2d4f3338)
|       |           `-CXXMemberCallExpr 0x55ba2d4f32c8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba2d4f3238 <col:26> '<bound member function type>' ->find 0x55ba2d4eb138
|       |             | `-CXXThisExpr 0x55ba2d4f3228 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba2d4f3300 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f3268 <col:31> 'const char *' lvalue ParmVar 0x55ba2d4cc0f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba2d4f3318 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f3288 <col:40> 'int' lvalue ParmVar 0x55ba2d4cc170 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba2d4f32a8 <col:47> 'Args::Slot *' lvalue Var 0x55ba2d4f3130 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba2d4f3458 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba2d4f3440 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba2d4f3420 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba2d4f33f0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |       `-ImplicitCastExpr 0x55ba2d4f33d8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba2d4f33b8 <col:20> 'String' lvalue Var 0x55ba2d4f31c0 'str' 'String'
|       `-CompoundStmt 0x55ba2d4f3ec8 <col:61, line:736:9>
|         |-DeclStmt 0x55ba2d4f3910 <line:734:13, col:76>
|         | `-VarDecl 0x55ba2d4f34a8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55ba2d4f38e0 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba2d4f3850 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba2d4f3898 <col:60> 'T' lvalue ParmVar 0x55ba2d4cc218 'variable' 'T &'
|         |     `-UnaryOperator 0x55ba2d4f38c8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba2d4f38b8 <col:71> 'Args *' this
|         `-CallExpr 0x55ba2d4f3e98 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55ba2d4f3938 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|           | `-CXXThisExpr 0x55ba2d4f3928 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ba2d4f3e58 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55ba2d4f3968 <col:23> 'T *' lvalue Var 0x55ba2d4f34a8 's' 'T *'
|           | `-CallExpr 0x55ba2d4f3e18 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ba2d4f3bf0 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55ba2d4f3cf0 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55ba2d4f3d10 <col:86> 'String' lvalue Var 0x55ba2d4f31c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ba2d4f3dc0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba2d4f3d50 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|           |   | `-DeclRefExpr 0x55ba2d4f3d30 <col:92> 'T *' lvalue Var 0x55ba2d4f34a8 's' 'T *'
|           |   `-UnaryOperator 0x55ba2d4f3e00 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ba2d4f3df0 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55ba2d4f3e78 <col:103> 'Args::Slot *' lvalue Var 0x55ba2d4f3130 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba2d4cc928 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55ba2d4cc448 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba2d4cc4c8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55ba2d4cc888 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4cc588 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4cc608 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4cc6a8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55ba2d4cc748 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55ba2d4f4dc0 <col:88, line:745:5>
|     |-DeclStmt 0x55ba2d4f3fb8 <line:741:9, col:26>
|     | `-VarDecl 0x55ba2d4f3f50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4f41d8 <line:742:9, col:55>
|     | `-VarDecl 0x55ba2d4f3fe0 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55ba2d4f41c0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55ba2d4f4190 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55ba2d4f4178 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55ba2d4f4158 <col:22, col:54> 'String' (CXXTemporary 0x55ba2d4f4158)
|     |           `-CXXMemberCallExpr 0x55ba2d4f40e8 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55ba2d4f4058 <col:22> '<bound member function type>' ->find 0x55ba2d4eb138
|     |             | `-CXXThisExpr 0x55ba2d4f4048 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55ba2d4f4120 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba2d4f4088 <col:27> 'const char *' lvalue ParmVar 0x55ba2d4cc588 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55ba2d4f4138 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba2d4f40a8 <col:36> 'int' lvalue ParmVar 0x55ba2d4cc608 'flags' 'int'
|     |             `-DeclRefExpr 0x55ba2d4f40c8 <col:43> 'Args::Slot *' lvalue Var 0x55ba2d4f3f50 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4f45b0 <line:743:9, col:72>
|     | `-VarDecl 0x55ba2d4f4228 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ba2d4f4580 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ba2d4f44f0 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55ba2d4f4538 <col:56> 'T' lvalue ParmVar 0x55ba2d4cc6a8 'variable' 'T &'
|     |     `-UnaryOperator 0x55ba2d4f4568 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ba2d4f4558 <col:67> 'Args *' this
|     `-CallExpr 0x55ba2d4f4d90 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55ba2d4f45d8 <col:9> '<bound member function type>' ->postparse 0x55ba2d4eb348
|       | `-CXXThisExpr 0x55ba2d4f45c8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55ba2d4f4d50 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55ba2d4f4608 <col:19> 'T *' lvalue Var 0x55ba2d4f4228 's' 'T *'
|       | `-ParenExpr 0x55ba2d4f4d30 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55ba2d4f4d00 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55ba2d4f4ce8 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55ba2d4f4cd0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55ba2d4f4cb0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55ba2d4f4c80 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |     |       `-ImplicitCastExpr 0x55ba2d4f4c68 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55ba2d4f4628 <col:25> 'String' lvalue Var 0x55ba2d4f3fe0 'str' 'String'
|       |     |-CallExpr 0x55ba2d4f4ad8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55ba2d4f48b0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55ba2d4f49b0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55ba2d4f49d0 <col:89> 'String' lvalue Var 0x55ba2d4f3fe0 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55ba2d4f4a80 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55ba2d4f4a10 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|       |     | | `-DeclRefExpr 0x55ba2d4f49f0 <col:95> 'T *' lvalue Var 0x55ba2d4f4228 's' 'T *'
|       |     | `-UnaryOperator 0x55ba2d4f4ac0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55ba2d4f4ab0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55ba2d4f4c48 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55ba2d4f4c28 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55ba2d4f4bf8 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55ba2d4f4ba8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55ba2d4f4b38 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|       |         | | `-DeclRefExpr 0x55ba2d4f4b18 <col:109> 'T *' lvalue Var 0x55ba2d4f4228 's' 'T *'
|       |         | `-DeclRefExpr 0x55ba2d4f4bd8 <col:113> 'const V' lvalue ParmVar 0x55ba2d4cc748 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55ba2d4f4c18 <col:120> 'bool' true
|       `-DeclRefExpr 0x55ba2d4f4d70 <col:128> 'Args::Slot *' lvalue Var 0x55ba2d4f3f50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba2d4cce58 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55ba2d4cc9a0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4cca18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4ccdb8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba2d4ccad8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4ccb58 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4ccbd0 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4ccc78 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55ba2d4f59b8 <col:75, line:754:5>
|     |-DeclStmt 0x55ba2d4f4e68 <line:749:9, col:26>
|     | `-VarDecl 0x55ba2d4f4e00 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba2d4f5980 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55ba2d4f59a0 <line:750:13, col:58>
|       | `-VarDecl 0x55ba2d4f4e90 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba2d4f5070 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba2d4f5040 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba2d4f5028 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba2d4f5008 <col:26, col:58> 'String' (CXXTemporary 0x55ba2d4f5008)
|       |           `-CXXMemberCallExpr 0x55ba2d4f4f98 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba2d4f4f08 <col:26> '<bound member function type>' ->find 0x55ba2d4eb138
|       |             | `-CXXThisExpr 0x55ba2d4f4ef8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba2d4f4fd0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f4f38 <col:31> 'const char *' lvalue ParmVar 0x55ba2d4ccad8 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba2d4f4fe8 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f4f58 <col:40> 'int' lvalue ParmVar 0x55ba2d4ccb58 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba2d4f4f78 <col:47> 'Args::Slot *' lvalue Var 0x55ba2d4f4e00 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba2d4f5128 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba2d4f5110 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba2d4f50f0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba2d4f50c0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |       `-ImplicitCastExpr 0x55ba2d4f50a8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba2d4f5088 <col:20> 'String' lvalue Var 0x55ba2d4f4e90 'str' 'String'
|       `-CompoundStmt 0x55ba2d4f5960 <col:61, line:753:9>
|         |-DeclStmt 0x55ba2d4f5500 <line:751:13, col:63>
|         | `-VarDecl 0x55ba2d4f5178 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55ba2d4f54d0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba2d4f5440 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba2d4f5488 <col:47> 'T' lvalue ParmVar 0x55ba2d4ccc78 'variable' 'T &'
|         |     `-UnaryOperator 0x55ba2d4f54b8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba2d4f54a8 <col:58> 'Args *' this
|         `-CallExpr 0x55ba2d4f5930 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55ba2d4f5528 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|           | `-CXXThisExpr 0x55ba2d4f5518 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ba2d4f58f0 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55ba2d4f5558 <col:23> 'T *' lvalue Var 0x55ba2d4f5178 's' 'T *'
|           | `-CallExpr 0x55ba2d4f58b0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ba2d4f5740 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55ba2d4f5788 <col:56> 'P' lvalue ParmVar 0x55ba2d4ccbd0 'parser' 'P'
|           |   |-DeclRefExpr 0x55ba2d4f57a8 <col:64> 'String' lvalue Var 0x55ba2d4f4e90 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ba2d4f5858 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba2d4f57e8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|           |   | `-DeclRefExpr 0x55ba2d4f57c8 <col:70> 'T *' lvalue Var 0x55ba2d4f5178 's' 'T *'
|           |   `-UnaryOperator 0x55ba2d4f5898 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ba2d4f5888 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55ba2d4f5910 <col:81> 'Args::Slot *' lvalue Var 0x55ba2d4f4e00 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba2d4cd4b8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55ba2d4cced0 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55ba2d4ccf48 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55ba2d4ccfc8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55ba2d4cd418 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55ba2d4cd090 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4cd110 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4cd188 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4cd228 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55ba2d4cd2c8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55ba2d4f8a38 <col:98, line:762:5>
|     |-DeclStmt 0x55ba2d4f5a50 <line:758:9, col:26>
|     | `-VarDecl 0x55ba2d4f59e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4f5c70 <line:759:9, col:55>
|     | `-VarDecl 0x55ba2d4f5a78 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55ba2d4f5c58 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55ba2d4f5c28 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55ba2d4f5c10 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55ba2d4f5bf0 <col:22, col:54> 'String' (CXXTemporary 0x55ba2d4f5bf0)
|     |           `-CXXMemberCallExpr 0x55ba2d4f5b80 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55ba2d4f5af0 <col:22> '<bound member function type>' ->find 0x55ba2d4eb138
|     |             | `-CXXThisExpr 0x55ba2d4f5ae0 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55ba2d4f5bb8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba2d4f5b20 <col:27> 'const char *' lvalue ParmVar 0x55ba2d4cd090 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55ba2d4f5bd0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55ba2d4f5b40 <col:36> 'int' lvalue ParmVar 0x55ba2d4cd110 'flags' 'int'
|     |             `-DeclRefExpr 0x55ba2d4f5b60 <col:43> 'Args::Slot *' lvalue Var 0x55ba2d4f59e8 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4f8380 <line:760:9, col:59>
|     | `-VarDecl 0x55ba2d4f5cc8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ba2d4f8350 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ba2d4f82c0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55ba2d4f8308 <col:43> 'T' lvalue ParmVar 0x55ba2d4cd228 'variable' 'T &'
|     |     `-UnaryOperator 0x55ba2d4f8338 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ba2d4f8328 <col:54> 'Args *' this
|     `-CallExpr 0x55ba2d4f8a08 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55ba2d4f83a8 <col:9> '<bound member function type>' ->postparse 0x55ba2d4eb348
|       | `-CXXThisExpr 0x55ba2d4f8398 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55ba2d4f89c8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55ba2d4f83d8 <col:19> 'T *' lvalue Var 0x55ba2d4f5cc8 's' 'T *'
|       | `-ParenExpr 0x55ba2d4f89a8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55ba2d4f8978 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55ba2d4f8960 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55ba2d4f8948 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55ba2d4f8928 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55ba2d4f88f8 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |     |       `-ImplicitCastExpr 0x55ba2d4f88e0 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55ba2d4f83f8 <col:25> 'String' lvalue Var 0x55ba2d4f5a78 'str' 'String'
|       |     |-CallExpr 0x55ba2d4f8750 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55ba2d4f85e0 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55ba2d4f8628 <col:59> 'P' lvalue ParmVar 0x55ba2d4cd188 'parser' 'P'
|       |     | |-DeclRefExpr 0x55ba2d4f8648 <col:67> 'String' lvalue Var 0x55ba2d4f5a78 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55ba2d4f86f8 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55ba2d4f8688 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|       |     | | `-DeclRefExpr 0x55ba2d4f8668 <col:73> 'T *' lvalue Var 0x55ba2d4f5cc8 's' 'T *'
|       |     | `-UnaryOperator 0x55ba2d4f8738 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55ba2d4f8728 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55ba2d4f88c0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55ba2d4f88a0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55ba2d4f8870 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55ba2d4f8820 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55ba2d4f87b0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|       |         | | `-DeclRefExpr 0x55ba2d4f8790 <col:87> 'T *' lvalue Var 0x55ba2d4f5cc8 's' 'T *'
|       |         | `-DeclRefExpr 0x55ba2d4f8850 <col:91> 'const V' lvalue ParmVar 0x55ba2d4cd2c8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55ba2d4f8890 <col:98> 'bool' true
|       `-DeclRefExpr 0x55ba2d4f89e8 <col:106> 'Args::Slot *' lvalue Var 0x55ba2d4f59e8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba2d4d5798 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55ba2d4cd538 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4cd5b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55ba2d4d52b0 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55ba2d4d56f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55ba2d4d5370 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4d53f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4d5468 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4d5508 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55ba2d4d55a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55ba2d4f9a18 <col:60, line:773:5>
|     |-DeclStmt 0x55ba2d4f8ae0 <line:767:9, col:26>
|     | `-VarDecl 0x55ba2d4f8a78 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba2d4f99e0 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55ba2d4f9a00 <line:768:13, col:58>
|       | `-VarDecl 0x55ba2d4f8b08 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba2d4f8ce8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba2d4f8cb8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba2d4f8ca0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba2d4f8c80 <col:26, col:58> 'String' (CXXTemporary 0x55ba2d4f8c80)
|       |           `-CXXMemberCallExpr 0x55ba2d4f8c10 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba2d4f8b80 <col:26> '<bound member function type>' ->find 0x55ba2d4eb138
|       |             | `-CXXThisExpr 0x55ba2d4f8b70 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba2d4f8c48 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f8bb0 <col:31> 'const char *' lvalue ParmVar 0x55ba2d4d5370 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba2d4f8c60 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f8bd0 <col:40> 'int' lvalue ParmVar 0x55ba2d4d53f0 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba2d4f8bf0 <col:47> 'Args::Slot *' lvalue Var 0x55ba2d4f8a78 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba2d4f8da0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba2d4f8d88 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba2d4f8d68 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba2d4f8d38 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |       `-ImplicitCastExpr 0x55ba2d4f8d20 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba2d4f8d00 <col:20> 'String' lvalue Var 0x55ba2d4f8b08 'str' 'String'
|       `-CompoundStmt 0x55ba2d4f99b8 <col:61, line:772:9>
|         |-DeclStmt 0x55ba2d4f90e0 <line:769:13, col:66>
|         | `-VarDecl 0x55ba2d4f8df8 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55ba2d4f90b0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba2d4f9020 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba2d4f9068 <col:49> 'T1' lvalue ParmVar 0x55ba2d4d5508 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55ba2d4f9098 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba2d4f9088 <col:61> 'Args *' this
|         |-DeclStmt 0x55ba2d4f9450 <line:770:13, col:66>
|         | `-VarDecl 0x55ba2d4f9168 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55ba2d4f9420 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55ba2d4f9390 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55ba2d4f93d8 <col:49> 'T2' lvalue ParmVar 0x55ba2d4d55a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55ba2d4f9408 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55ba2d4f93f8 <col:61> 'Args *' this
|         `-CallExpr 0x55ba2d4f9988 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55ba2d4f9478 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|           | `-CXXThisExpr 0x55ba2d4f9468 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55ba2d4f9948 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55ba2d4f94e8 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55ba2d4f94a8 <col:23> 'T1 *' lvalue Var 0x55ba2d4f8df8 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55ba2d4f94c8 <col:29> 'T2 *' lvalue Var 0x55ba2d4f9168 's2' 'T2 *'
|           | `-CallExpr 0x55ba2d4f9900 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55ba2d4f96d0 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55ba2d4f9718 <col:63> 'P' lvalue ParmVar 0x55ba2d4d5468 'parser' 'P'
|           |   |-DeclRefExpr 0x55ba2d4f9738 <col:71> 'String' lvalue Var 0x55ba2d4f8b08 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55ba2d4f97e8 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba2d4f9778 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|           |   | `-DeclRefExpr 0x55ba2d4f9758 <col:77> 'T1 *' lvalue Var 0x55ba2d4f8df8 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55ba2d4f98a8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55ba2d4f9838 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|           |   | `-DeclRefExpr 0x55ba2d4f9818 <col:82> 'T2 *' lvalue Var 0x55ba2d4f9168 's2' 'T2 *'
|           |   `-UnaryOperator 0x55ba2d4f98e8 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55ba2d4f98d8 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55ba2d4f9968 <col:94> 'Args::Slot *' lvalue Var 0x55ba2d4f8a78 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba2d4d5b88 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55ba2d4d5818 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4d5ae8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55ba2d4d58d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4d5950 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4d59c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4f9f30 <col:67, line:780:5>
|     |-DeclStmt 0x55ba2d4f9ab0 <line:777:9, col:26>
|     | `-VarDecl 0x55ba2d4f9a48 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55ba2d4f9ef8 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55ba2d4f9f18 <line:778:13, col:58>
|       | `-VarDecl 0x55ba2d4f9ad8 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55ba2d4f9cb8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55ba2d4f9c88 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55ba2d4f9c70 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55ba2d4f9c50 <col:26, col:58> 'String' (CXXTemporary 0x55ba2d4f9c50)
|       |           `-CXXMemberCallExpr 0x55ba2d4f9be0 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55ba2d4f9b50 <col:26> '<bound member function type>' ->find 0x55ba2d4eb138
|       |             | `-CXXThisExpr 0x55ba2d4f9b40 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55ba2d4f9c18 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f9b80 <col:31> 'const char *' lvalue ParmVar 0x55ba2d4d58d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55ba2d4f9c30 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55ba2d4f9ba0 <col:40> 'int' lvalue ParmVar 0x55ba2d4d5950 'flags' 'int'
|       |             `-DeclRefExpr 0x55ba2d4f9bc0 <col:47> 'Args::Slot *' lvalue Var 0x55ba2d4f9a48 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55ba2d4f9d70 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55ba2d4f9d58 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55ba2d4f9d38 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55ba2d4f9d08 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|       |       `-ImplicitCastExpr 0x55ba2d4f9cf0 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55ba2d4f9cd0 <col:20> 'String' lvalue Var 0x55ba2d4f9ad8 'str' 'String'
|       `-CallExpr 0x55ba2d4f9ec8 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55ba2d4f9d98 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|         | `-CXXThisExpr 0x55ba2d4f9d88 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55ba2d4f9e78 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55ba2d4f9de8 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55ba2d4f9dc8 <col:23> 'P' lvalue ParmVar 0x55ba2d4d59c8 'parser' 'P'
|         | |-DeclRefExpr 0x55ba2d4f9e30 <col:36> 'String' lvalue Var 0x55ba2d4f9ad8 'str' 'String'
|         | `-UnaryOperator 0x55ba2d4f9e60 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55ba2d4f9e50 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55ba2d4f9ea8 <col:49> 'Args::Slot *' lvalue Var 0x55ba2d4f9a48 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55ba2d4d5f28 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55ba2d4d5bf8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55ba2d4d5e88 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55ba2d4d5cb0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4d5d30 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4d5da8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55ba2d4fa8a0 <col:71, line:792:5>
|     |-DeclStmt 0x55ba2d4f9fc8 <line:784:9, col:26>
|     | `-VarDecl 0x55ba2d4f9f60 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4fa098 <line:785:9, col:29>
|     | `-VarDecl 0x55ba2d4f9ff8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ba2d4fa080 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ba2d4fa060 <col:28> 'int' 1
|     |-WhileStmt 0x55ba2d4fa750 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55ba2d4fa770 <line:786:16, col:61>
|     | | `-VarDecl 0x55ba2d4fa0c0 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ba2d4fa2a0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ba2d4fa270 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ba2d4fa258 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ba2d4fa238 <col:29, col:61> 'String' (CXXTemporary 0x55ba2d4fa238)
|     | |           `-CXXMemberCallExpr 0x55ba2d4fa1c8 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ba2d4fa138 <col:29> '<bound member function type>' ->find 0x55ba2d4eb138
|     | |             | `-CXXThisExpr 0x55ba2d4fa128 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ba2d4fa200 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba2d4fa168 <col:34> 'const char *' lvalue ParmVar 0x55ba2d4d5cb0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ba2d4fa218 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba2d4fa188 <col:43> 'int' lvalue ParmVar 0x55ba2d4d5d30 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ba2d4fa1a8 <col:50> 'Args::Slot *' lvalue Var 0x55ba2d4f9f60 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ba2d4fa358 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba2d4fa340 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba2d4fa320 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba2d4fa2f0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|     | |       `-ImplicitCastExpr 0x55ba2d4fa2d8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ba2d4fa2b8 <col:23> 'String' lvalue Var 0x55ba2d4fa0c0 'str' 'String'
|     | `-CompoundStmt 0x55ba2d4fa728 <col:64, line:790:9>
|     |   |-CallExpr 0x55ba2d4fa4b0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55ba2d4fa380 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|     |   | | `-CXXThisExpr 0x55ba2d4fa370 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55ba2d4fa460 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55ba2d4fa3d0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55ba2d4fa3b0 <col:23> 'P' lvalue ParmVar 0x55ba2d4d5da8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55ba2d4fa418 <col:36> 'String' lvalue Var 0x55ba2d4fa0c0 'str' 'String'
|     |   | | `-UnaryOperator 0x55ba2d4fa448 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55ba2d4fa438 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55ba2d4fa490 <col:49> 'Args::Slot *' lvalue Var 0x55ba2d4f9f60 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55ba2d4fa648 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ba2d4fa4e0 <col:13> 'int' lvalue Var 0x55ba2d4f9ff8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ba2d4fa630 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ba2d4fa610 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ba2d4fa578 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ba2d4fa558 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ba2d4fa540 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ba2d4fa500 <col:28> 'int' lvalue Var 0x55ba2d4f9ff8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ba2d4fa520 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ba2d4fa5f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ba2d4fa5c8 <col:49> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|     |   |         `-ImplicitCastExpr 0x55ba2d4fa5a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ba2d4fa598 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ba2d4fa6f8 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ba2d4fa668 <col:13> 'int' lvalue ParmVar 0x55ba2d4d5d30 'flags' 'int'
|     |     `-UnaryOperator 0x55ba2d4fa6e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ba2d4fa6c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba2d4fa6a8 <col:23> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ba2d4fa880 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ba2d4fa7b8 <col:9> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|       | `-ImplicitCastExpr 0x55ba2d4fa798 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ba2d4fa788 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ba2d4fa860 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ba2d4fa840 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ba2d4fa828 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ba2d4fa7e8 <col:25> 'int' lvalue Var 0x55ba2d4f9ff8 'read_status' 'int'
|           `-IntegerLiteral 0x55ba2d4fa808 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55ba2d4d6408 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55ba2d4d5f98 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4d6018 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4d6368 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55ba2d4d60d8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4d6158 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4d61d0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4d6278 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55ba2d4fb830 <col:84, line:805:5>
|     |-DeclStmt 0x55ba2d4fa948 <line:796:9, col:26>
|     | `-VarDecl 0x55ba2d4fa8e0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4faa18 <line:797:9, col:29>
|     | `-VarDecl 0x55ba2d4fa978 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ba2d4faa00 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ba2d4fa9e0 <col:28> 'int' 1
|     |-DeclStmt 0x55ba2d4fad50 <line:798:9, col:71>
|     | `-VarDecl 0x55ba2d4faa68 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55ba2d4fad20 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55ba2d4fac90 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55ba2d4facd8 <col:55> 'T' lvalue ParmVar 0x55ba2d4d6278 'variable' 'T &'
|     |     `-UnaryOperator 0x55ba2d4fad08 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55ba2d4facf8 <col:66> 'Args *' this
|     |-WhileStmt 0x55ba2d4fb6e0 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55ba2d4fb700 <line:799:16, col:61>
|     | | `-VarDecl 0x55ba2d4fad78 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ba2d4faf58 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ba2d4faf28 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ba2d4faf10 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ba2d4faef0 <col:29, col:61> 'String' (CXXTemporary 0x55ba2d4faef0)
|     | |           `-CXXMemberCallExpr 0x55ba2d4fae80 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ba2d4fadf0 <col:29> '<bound member function type>' ->find 0x55ba2d4eb138
|     | |             | `-CXXThisExpr 0x55ba2d4fade0 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ba2d4faeb8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba2d4fae20 <col:34> 'const char *' lvalue ParmVar 0x55ba2d4d60d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ba2d4faed0 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba2d4fae40 <col:43> 'int' lvalue ParmVar 0x55ba2d4d6158 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ba2d4fae60 <col:50> 'Args::Slot *' lvalue Var 0x55ba2d4fa8e0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ba2d4fb010 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba2d4faff8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba2d4fafd8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba2d4fafa8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|     | |       `-ImplicitCastExpr 0x55ba2d4faf90 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ba2d4faf70 <col:23> 'String' lvalue Var 0x55ba2d4fad78 'str' 'String'
|     | `-CompoundStmt 0x55ba2d4fb6b8 <col:64, line:803:9>
|     |   |-CallExpr 0x55ba2d4fb440 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55ba2d4fb038 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|     |   | | `-CXXThisExpr 0x55ba2d4fb028 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55ba2d4fb400 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55ba2d4fb068 <col:23> 'T *' lvalue Var 0x55ba2d4faa68 's' 'T *'
|     |   | | `-CallExpr 0x55ba2d4fb3c0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55ba2d4fb250 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55ba2d4fb298 <col:56> 'P' lvalue ParmVar 0x55ba2d4d61d0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55ba2d4fb2b8 <col:64> 'String' lvalue Var 0x55ba2d4fad78 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55ba2d4fb368 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55ba2d4fb2f8 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|     |   | |   | `-DeclRefExpr 0x55ba2d4fb2d8 <col:70> 'T *' lvalue Var 0x55ba2d4faa68 's' 'T *'
|     |   | |   `-UnaryOperator 0x55ba2d4fb3a8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55ba2d4fb398 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55ba2d4fb420 <col:81> 'Args::Slot *' lvalue Var 0x55ba2d4fa8e0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55ba2d4fb5d8 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ba2d4fb470 <col:13> 'int' lvalue Var 0x55ba2d4fa978 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ba2d4fb5c0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ba2d4fb5a0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ba2d4fb508 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ba2d4fb4e8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ba2d4fb4d0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ba2d4fb490 <col:28> 'int' lvalue Var 0x55ba2d4fa978 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ba2d4fb4b0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ba2d4fb588 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ba2d4fb558 <col:49> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|     |   |         `-ImplicitCastExpr 0x55ba2d4fb538 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ba2d4fb528 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ba2d4fb688 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ba2d4fb5f8 <col:13> 'int' lvalue ParmVar 0x55ba2d4d6158 'flags' 'int'
|     |     `-UnaryOperator 0x55ba2d4fb670 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ba2d4fb658 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba2d4fb638 <col:23> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ba2d4fb810 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ba2d4fb748 <col:9> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|       | `-ImplicitCastExpr 0x55ba2d4fb728 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ba2d4fb718 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ba2d4fb7f0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ba2d4fb7d0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ba2d4fb7b8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ba2d4fb778 <col:25> 'int' lvalue Var 0x55ba2d4fa978 'read_status' 'int'
|           `-IntegerLiteral 0x55ba2d4fb798 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55ba2d4d69e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55ba2d4d6480 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55ba2d4d64f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55ba2d4d6948 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55ba2d4d65b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55ba2d4d6638 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55ba2d4d66b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55ba2d4d6800 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55ba2d4fc638 <col:87, line:821:5>
|     |-DeclStmt 0x55ba2d4fb8e0 <line:809:9, col:26>
|     | `-VarDecl 0x55ba2d4fb878 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55ba2d4fb9b0 <line:810:9, col:29>
|     | `-VarDecl 0x55ba2d4fb910 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55ba2d4fb998 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55ba2d4fb978 <col:28> 'int' 1
|     |-DeclStmt 0x55ba2d4fbbf8 <line:811:9, col:38>
|     | `-VarDecl 0x55ba2d4fbae0 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55ba2d4fbbd0 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55ba2d4fbb58 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55ba2d4fbbb0 <col:29> 'Vector<T>' lvalue ParmVar 0x55ba2d4d6800 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55ba2d4fc4e8 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55ba2d4fc508 <line:812:16, col:61>
|     | | `-VarDecl 0x55ba2d4fbc20 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55ba2d4fbe00 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55ba2d4fbdd0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55ba2d4fbdb8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55ba2d4fbd98 <col:29, col:61> 'String' (CXXTemporary 0x55ba2d4fbd98)
|     | |           `-CXXMemberCallExpr 0x55ba2d4fbd28 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55ba2d4fbc98 <col:29> '<bound member function type>' ->find 0x55ba2d4eb138
|     | |             | `-CXXThisExpr 0x55ba2d4fbc88 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55ba2d4fbd60 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba2d4fbcc8 <col:34> 'const char *' lvalue ParmVar 0x55ba2d4d65b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55ba2d4fbd78 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55ba2d4fbce8 <col:43> 'int' lvalue ParmVar 0x55ba2d4d6638 'flags' 'int'
|     | |             `-DeclRefExpr 0x55ba2d4fbd08 <col:50> 'Args::Slot *' lvalue Var 0x55ba2d4fb878 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55ba2d4fbeb8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55ba2d4fbea0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55ba2d4fbe80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55ba2d4fbe50 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55ba2d21b4f8
|     | |       `-ImplicitCastExpr 0x55ba2d4fbe38 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55ba2d4fbe18 <col:23> 'String' lvalue Var 0x55ba2d4fbc20 'str' 'String'
|     | `-CompoundStmt 0x55ba2d4fc4b0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55ba2d4fbf78 <line:813:13, col:23>
|     |   | `-VarDecl 0x55ba2d4fbee0 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55ba2d4fbf58 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55ba2d4fc0f8 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55ba2d4fbfa0 <col:13> '<bound member function type>' ->postparse 0x55ba2d4eb348
|     |   | | `-CXXThisExpr 0x55ba2d4fbf90 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55ba2d4fc0a0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55ba2d4fbff0 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55ba2d4fbfd0 <col:23> 'P' lvalue ParmVar 0x55ba2d4d66b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55ba2d4fc038 <col:36> 'String' lvalue Var 0x55ba2d4fbc20 'str' 'String'
|     |   | | |-DeclRefExpr 0x55ba2d4fc058 <col:41> 'T' lvalue Var 0x55ba2d4fbee0 'sx' 'T'
|     |   | | `-UnaryOperator 0x55ba2d4fc088 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55ba2d4fc078 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55ba2d4fc0d8 <col:53> 'Args::Slot *' lvalue Var 0x55ba2d4fb878 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55ba2d4fc250 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55ba2d4fc188 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55ba2d4fc158 <col:17> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|     |   | |   `-ImplicitCastExpr 0x55ba2d4fc138 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55ba2d4fc128 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55ba2d4fc228 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55ba2d4fc1c0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55ba2d4fc1a0 <col:17> 'Vector<T> *' lvalue Var 0x55ba2d4fbae0 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55ba2d4fc208 <col:30> 'T' lvalue Var 0x55ba2d4fbee0 'sx' 'T'
|     |   |-BinaryOperator 0x55ba2d4fc3d0 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55ba2d4fc268 <col:13> 'int' lvalue Var 0x55ba2d4fb910 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55ba2d4fc3b8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55ba2d4fc398 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55ba2d4fc300 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55ba2d4fc2e0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55ba2d4fc2c8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55ba2d4fc288 <col:28> 'int' lvalue Var 0x55ba2d4fb910 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55ba2d4fc2a8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55ba2d4fc380 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55ba2d4fc350 <col:49> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|     |   |         `-ImplicitCastExpr 0x55ba2d4fc330 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55ba2d4fc320 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55ba2d4fc480 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55ba2d4fc3f0 <col:13> 'int' lvalue ParmVar 0x55ba2d4d6638 'flags' 'int'
|     |     `-UnaryOperator 0x55ba2d4fc468 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55ba2d4fc450 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55ba2d4fc430 <col:23> 'const int' lvalue Var 0x55ba2d4ba3c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55ba2d4fc618 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55ba2d4fc550 <col:9> 'bool' lvalue ->_read_status 0x55ba2d3ce760
|       | `-ImplicitCastExpr 0x55ba2d4fc530 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55ba2d4fc520 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55ba2d4fc5f8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55ba2d4fc5d8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55ba2d4fc5c0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55ba2d4fc580 <col:25> 'int' lvalue Var 0x55ba2d4fb910 'read_status' 'int'
|           `-IntegerLiteral 0x55ba2d4fc5a0 <col:40> 'int' 1
|-AccessSpecDecl 0x55ba2d4d6a60 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba2d4d6a88 prev 0x55ba2d4b86c8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55ba2d4d6b80 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55ba2d4d6c70 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55ba2d4fc670 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55ba2d4d6d60 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55ba2d4fc680 <col:25, line:830:9>
| |-CXXMethodDecl 0x55ba2d4d6e60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55ba2d4d6f10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55ba2d4d6fb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55ba2d4d6fb8
| | `-ParmVarDecl 0x55ba2d4d70c8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55ba2d4d7888 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55ba2d4d7888
|   `-ParmVarDecl 0x55ba2d4d7998 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55ba2d4d7138 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55ba2d4d7298 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55ba2d4d7490 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55ba2d4d7340 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55ba2d4d73b8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55ba2d4fc860 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55ba2d4d7748 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55ba2d4fc6d0 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55ba2d4fc690 <col:20> 'void *' lvalue ParmVar 0x55ba2d4d7340 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55ba2d4d77b0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55ba2d4fc758 <col:32, col:45> 'char *' array Function 0x55ba2d03e168 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55ba2d4fc740 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55ba2d4fc710 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55ba2d4d73b8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55ba2d4d7810 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55ba2d4fc820 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55ba2d4fc7e0 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55ba2d4d73b8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55ba2d4fc8e0 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55ba2d4d7590 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55ba2d4d6d60 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55ba2d4fc968 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55ba2d4fc948 <line:840:13, col:22> 'void' array Function 0x55ba2d03e4c8 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55ba2d4fc930 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55ba2d4fc900 <col:22> 'char *' lvalue ->_slot 0x55ba2d4d77b0
| |         `-CXXThisExpr 0x55ba2d4fc8f0 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55ba2d4d7690 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55ba2d4d6e60 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55ba2d4fcb58 <col:22, line:844:9>
| |   `-CallExpr 0x55ba2d4fcac0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55ba2d4fcaa8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55ba2d4fca88 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55ba2d149f48 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55ba2d4fcaf8 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55ba2d4fc9d8 <col:20> 'void *' lvalue ->_ptr 0x55ba2d4d7748
| |     |   `-CXXThisExpr 0x55ba2d4fc9c8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55ba2d4fcb28 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55ba2d4fcb10 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55ba2d4fca18 <col:26> 'char *' lvalue ->_slot 0x55ba2d4d77b0
| |     |     `-CXXThisExpr 0x55ba2d4fca08 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55ba2d4fcb40 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55ba2d4fca58 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55ba2d4d7810
| |         `-CXXThisExpr 0x55ba2d4fca48 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55ba2d4d7748 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55ba2d4d77b0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55ba2d4d7810 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55ba2d4d7a08 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55ba2d4d7a08
| | `-ParmVarDecl 0x55ba2d4d7b18 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55ba2d4d7bb8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55ba2d4d7bb8
|   `-ParmVarDecl 0x55ba2d4d7cc8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55ba2d4d7e68 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55ba2d4d7d38 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55ba2d4d7dd8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55ba2d4d8100 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55ba2d4d82f8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55ba2d4d81c8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55ba2d4d8478 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55ba2d4fcb90 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55ba2d4fcb70 <col:20> 'T *' lvalue ParmVar 0x55ba2d4d81c8 'ptr' 'T *'
|   | `-CompoundStmt 0x55ba2d4fcbe0 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55ba2d4d83c8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55ba2d4d6e60 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55ba2d4fcd90 <col:22, line:857:9>
|   |   `-CallExpr 0x55ba2d4fcd60 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55ba2d4fcbf0 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55ba2d202678 0x55ba2d1ac9a8
|   |     |-CXXOperatorCallExpr 0x55ba2d4fccf0 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55ba2d4fcc80 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55ba2d40f628 0x55ba2d40f248 0x55ba2d40ee78 0x55ba2d40ea98 0x55ba2d40e6b8 0x55ba2d40e2e8
|   |     | `-MemberExpr 0x55ba2d4fcc50 <col:29> 'T *' lvalue ->_ptr 0x55ba2d4d8478
|   |     |   `-CXXThisExpr 0x55ba2d4fcc40 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55ba2d4fcd30 <col:35> 'T' lvalue ->_slot 0x55ba2d4d84d8
|   |       `-CXXThisExpr 0x55ba2d4fcd20 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55ba2d4d8478 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55ba2d4d84d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55ba2d4d8540 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55ba2d4d8640 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55ba2d4d8690 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d4d8620 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55ba2d4d8600 <col:31> 'int' 48
|-FieldDecl 0x55ba2d4d86b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55ba2d4d8718 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55ba2d4d8778 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55ba2d4d88b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55ba2d4ea9e0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55ba2d4eaa40 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55ba2d4eaaf0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55ba2d4ead18 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55ba2d4eac20 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55ba2d4eae68 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55ba2d4eadd8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55ba2d4eb138 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55ba2d4eaf28 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55ba2d4eafa8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55ba2d4eb050 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55ba2d4eb348 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55ba2d4eb200 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55ba2d4eb278 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55ba2d4eb418 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55ba2d4eb568 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55ba2d4eb4d0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55ba2d4eb8f8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55ba2d4eb628 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55ba2d4eb6a8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55ba2d4eb750 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55ba2d4eb808 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55ba2d4ebb20 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55ba2d4eb9d0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55ba2d4eba48 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55ba2d4ebe38 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55ba2d4ebbd0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55ba2d4ebd98 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55ba2d4ebca8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class AnnoArg
         0 |   int size
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d5177d0 <../dummy_inc/click/args.hh:1294:1, line:1301:1> line:1294:7 referenced class AnnoArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d5178e8 <col:1, col:7> col:7 implicit referenced class AnnoArg
|-AccessSpecDecl 0x55ba2d517978 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55ba2d517a88 <line:1295:5, line:1297:5> line:1295:5 used AnnoArg 'void (int)'
| |-ParmVarDecl 0x55ba2d5179b8 <col:13, col:17> col:17 used s 'int'
| |-CXXCtorInitializer Field 0x55ba2d517dd8 'size' 'int'
| | `-ImplicitCastExpr 0x55ba2d517ea0 <line:1296:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba2d517e60 <col:16> 'int' lvalue ParmVar 0x55ba2d5179b8 's' 'int'
| `-CompoundStmt 0x55ba2d517ee8 <col:19, line:1297:5>
|-CXXMethodDecl 0x55ba2d517ce0 <line:1298:5, col:83> col:10 parse 'bool (const String &, int &, const ArgContext &)'
| |-ParmVarDecl 0x55ba2d517b48 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x55ba2d517bc8 <col:35, col:40> col:40 result 'int &'
| `-ParmVarDecl 0x55ba2d517c40 <col:48, col:73> col:66 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x55ba2d517e40 <col:73> 'const ArgContext' lvalue Var 0x55ba2d4fcdb8 'blank_args' 'const ArgContext'
|-AccessSpecDecl 0x55ba2d517d98 <line:1299:3, col:10> col:3 private
|-FieldDecl 0x55ba2d517dd8 <line:1300:5, col:9> col:9 referenced size 'int'
|-CXXConstructorDecl 0x55ba2d530138 <line:1294:7> col:7 implicit constexpr AnnoArg 'void (const AnnoArg &)' inline default trivial noexcept-unevaluated 0x55ba2d530138
| `-ParmVarDecl 0x55ba2d530248 <col:7> col:7 'const AnnoArg &'
|-CXXConstructorDecl 0x55ba2d5302e8 <col:7> col:7 implicit used constexpr AnnoArg 'void (AnnoArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d5303f8 <col:7> col:7 used 'AnnoArg &&'
| |-CXXCtorInitializer Field 0x55ba2d517dd8 'size' 'int'
| | `-ImplicitCastExpr 0x55ba2d530bf8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ba2d530bb0 <col:7> 'int' xvalue .size 0x55ba2d517dd8
| |     `-CXXStaticCastExpr 0x55ba2d530b80 <col:7> 'AnnoArg' xvalue static_cast<class AnnoArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2d530b50 <col:7> 'AnnoArg' lvalue ParmVar 0x55ba2d5303f8 '' 'AnnoArg &&'
| `-CompoundStmt 0x55ba2d530c40 <col:7>
`-CXXDestructorDecl 0x55ba2d530498 <col:7> col:7 implicit referenced ~AnnoArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.AnnoArg = type { i32 }
  NonVirtualBaseLLVMType:%class.AnnoArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d20b3a0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d20b4b8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55ba2d20b548 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55ba2d20b618 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55ba2d20b700 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d20b918 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ba2d20b7c0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20bac8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55ba2d20b9d0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55ba2d20bc10 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55ba2d20bb80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55ba2d20bd58 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ba2d20bcc8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20bea0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55ba2d20be10 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20bf68 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55ba2d20c0b0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55ba2d20c020 <col:28> col:31 'int'
|-CXXMethodDecl 0x55ba2d20c178 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55ba2d20c2c0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55ba2d20c230 <col:28> col:31 'int'
|-CXXMethodDecl 0x55ba2d20c438 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55ba2d20c378 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20c580 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55ba2d20c4f0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20c648 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55ba2d20c808 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d20c6f8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2d20c770 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20ca58 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d20c8c8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2d20c940 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba2d20cb08 <col:86> "" ""
|-CXXMethodDecl 0x55ba2d20cd78 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55ba2d20cbe8 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55ba2d20cc60 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20cf28 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55ba2d20ce38 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55ba2d20d0d8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55ba2d20cfe0 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55ba2d20d3a8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55ba2d20d190 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55ba2d20d208 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2d20d280 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20d688 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55ba2d20d470 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55ba2d20d4e8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2d20d560 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba2d20d740 <col:115> "" ""
|-AccessSpecDecl 0x55ba2d20d7b0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55ba2d20d7e8 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d20ed00 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55ba2d20ed00
| `-ParmVarDecl 0x55ba2d20ee08 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55ba2d20eea8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55ba2d20eea8
| `-ParmVarDecl 0x55ba2d20efb8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55ba2d2445e8 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba2d4363e0 <col:7>
|-CXXConstructorDecl 0x55ba2d2446c0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55ba2d2446c0
| `-ParmVarDecl 0x55ba2d2447d8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55ba2d244848 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55ba2d244848
| `-ParmVarDecl 0x55ba2d244958 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55ba2d438de0 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d424f88 prev 0x55ba2d41a190 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d425080 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55ba2d425170 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55ba2d425298 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55ba2d425418 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55ba2d425598 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55ba2d425718 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55ba2d436548 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba2d436db8 <col:11>
|-CXXDestructorDecl 0x55ba2d436620 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55ba2d436758 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55ba2d436758
| `-ParmVarDecl 0x55ba2d436868 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55ba2d436908 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba2d436908
| `-ParmVarDecl 0x55ba2d436a18 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55ba2d4397d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d4398e8 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55ba2d439b68 <col:11>
|   `-ReturnStmt 0x55ba2d439b58 <col:11>
|     `-UnaryOperator 0x55ba2d439b40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55ba2d439b30 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55ba2d439958 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba2d439958
  `-ParmVarDecl 0x55ba2d439a68 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d425780 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d425898 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55ba2d425938 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55ba2d4259a0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55ba2d425a08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55ba2d425a70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55ba2d425ad0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55ba2d425b90 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55ba2d425bf0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55ba2d425c50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55ba2d436458 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55ba2d425938 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55ba2d436dc8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55ba2d436e20 <col:12>
|-CXXConstructorDecl 0x55ba2d436a88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55ba2d436a88
| `-ParmVarDecl 0x55ba2d436b98 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55ba2d436c38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55ba2d436c38
| `-ParmVarDecl 0x55ba2d436d48 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55ba2d438ec0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d4138a0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55ba2d4139b8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55ba2d413a48 <col:16, col:22> col:16 public
|-EnumDecl 0x55ba2d413a70 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55ba2d413b70 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55ba2d413c50 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d413b50 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55ba2d413b30 <col:21> 'int' 28
| `-EnumConstantDecl 0x55ba2d413c00 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55ba2d413c68 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d413be0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55ba2d413bc0 <col:22> 'int' 64
|-CXXMethodDecl 0x55ba2d413fa8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55ba2d413c90 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2d413d10 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55ba2d413d88 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2d413e00 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba2d414068 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d414268 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55ba2d4140e0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55ba2d414158 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba2d414318 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d414478 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55ba2d414388 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba2d414520 <col:72> warn_unused_result ""
|-TypedefDecl 0x55ba2d414880 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55ba2d414810 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55ba2d4147b0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55ba2d414770 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55ba2ceeb2d0 'void'
|       |-PointerType 0x55ba2d193c40 'unsigned char *'
|       | `-BuiltinType 0x55ba2ceeb3d0 'unsigned char'
|       |-TypedefType 0x55ba2cf901b0 'size_t' sugar
|       | |-Typedef 0x55ba2cf5bb20 'size_t'
|       | `-BuiltinType 0x55ba2ceeb430 'unsigned long'
|       `-PointerType 0x55ba2ceebad0 'void *'
|         `-BuiltinType 0x55ba2ceeb2d0 'void'
|-CXXMethodDecl 0x55ba2d414cf8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55ba2d4148f0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55ba2d414968 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2d414a00 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55ba2d414a80 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55ba2d42f3f0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55ba2d42f3d8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55ba2d42f3a0 <col:58> 'int' 0
| |-ParmVarDecl 0x55ba2d414b00 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55ba2d42f418 <col:76> 'int' 0
| |-ParmVarDecl 0x55ba2d414b80 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55ba2d42f438 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55ba2d414dc8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d414e48 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55ba2d414f08 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55ba2d414fa8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d415000 <col:30>
|-CXXMethodDecl 0x55ba2d415078 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55ba2d415118 <col:20>
| `-OptimizeNoneAttr 0x55ba2d415170 <col:30>
|-CXXMethodDecl 0x55ba2d4151e8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55ba2d415288 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d415338 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55ba2d4153d8 <col:20>
| |-OptimizeNoneAttr 0x55ba2d415430 <col:30>
| `-WarnUnusedResultAttr 0x55ba2d415458 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d4154b0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba2d415550 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4155a8 <col:30>
|-CXXMethodDecl 0x55ba2d4155f8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba2d415698 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4156f0 <col:30>
|-CXXMethodDecl 0x55ba2d415738 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55ba2d4157d8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d415830 <col:30>
|-CXXMethodDecl 0x55ba2d415878 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d415938 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d415a00 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2d415ac8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2d415b88 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d415ca8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55ba2d42f500 <col:54, line:99:5>
|   `-ReturnStmt 0x55ba2d42f4f0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55ba2d42f4d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55ba2d42f4a8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ba2d425f88
|         `-CXXThisExpr 0x55ba2d42f498 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55ba2d415e48 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55ba2d415d58 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55ba2d42f5b0 <col:67, line:103:5>
|   `-BinaryOperator 0x55ba2d42f590 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55ba2d42f528 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ba2d425f88
|     | `-CXXThisExpr 0x55ba2d42f518 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55ba2d42f578 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d42f558 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55ba2d415d58 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55ba2d415f40 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55ba2d42f630 <col:33, line:107:5>
|   `-ReturnStmt 0x55ba2d42f620 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55ba2d42f608 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55ba2d42f5d8 <col:16> 'void *' lvalue ->_destructor_argument 0x55ba2d425ff0
|         `-CXXThisExpr 0x55ba2d42f5c8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55ba2d416000 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55ba2d42fc60 <col:25, line:113:5>
|   |-ParenExpr 0x55ba2d42f9a8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55ba2d42f978 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d42f6e8 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55ba2d42f6c0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55ba2d42f688 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55ba2d42f658 <col:24> '<bound member function type>' ->shared 0x55ba2d415078
|   |   |       `-ImplicitCastExpr 0x55ba2d42f6a8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55ba2d42f648 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55ba2d42f748 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d42f728 <col:42> 'int' 0
|   |   `-CallExpr 0x55ba2d42f8d8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d42f8c0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d42f8a0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d42f918 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d42f7b8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55ba2d42f930 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d42f7e0 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d42f948 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d42f818 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55ba2d42f960 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d42f888 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d42f870 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d42f838 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55ba2d42fba8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55ba2d42f9d8 <col:2> 'unsigned char *' lvalue ->_head 0x55ba2d425d90
|   | | `-CXXThisExpr 0x55ba2d42f9c8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55ba2d42fb90 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55ba2d42fb70 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55ba2d42fa18 <col:10> 'unsigned char *' lvalue ->_data 0x55ba2d425df8
|   |     | `-CXXThisExpr 0x55ba2d42fa08 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55ba2d42fb58 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55ba2d42fb38 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55ba2d42fa58 <col:18> 'unsigned char *' lvalue ->_tail 0x55ba2d425e60
|   |         | `-CXXThisExpr 0x55ba2d42fa48 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55ba2d42fb20 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55ba2d42fb00 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55ba2d42fa98 <col:26> 'unsigned char *' lvalue ->_end 0x55ba2d425ec8
|   |             | `-CXXThisExpr 0x55ba2d42fa88 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55ba2d42fae8 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55ba2d42fac8 <col:33> 'int' 0
|   `-BinaryOperator 0x55ba2d42fc40 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55ba2d42fbd8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55ba2d425f88
|     | `-CXXThisExpr 0x55ba2d42fbc8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55ba2d42fc28 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55ba2d42fc08 <col:16> 'int' 0
|-CXXMethodDecl 0x55ba2d416140 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ba2d4160b0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d4161e8 <col:20>
| |-OptimizeNoneAttr 0x55ba2d416240 <col:30>
| `-WarnUnusedResultAttr 0x55ba2d416268 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d416338 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ba2d4162a8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d4163e0 <col:20>
| |-OptimizeNoneAttr 0x55ba2d416438 <col:30>
| `-WarnUnusedResultAttr 0x55ba2d416460 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d416598 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55ba2d4164a0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba2d416640 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d416740 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55ba2d4166b0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d4167e8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d416840 <col:30>
|-CXXMethodDecl 0x55ba2d416908 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55ba2d416878 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba2d4169b0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d416ab0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55ba2d416a20 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55ba2d416b58 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d416c58 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55ba2d416bc8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d416d00 <col:20>
| `-OptimizeNoneAttr 0x55ba2d416d58 <col:30>
|-CXXMethodDecl 0x55ba2d416ee8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55ba2d416d98 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55ba2d416e10 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55ba2d42f458 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55ba2d416f98 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55ba2d417198 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d417010 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d417088 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d4173a8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d417258 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2d4172d0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d4175b8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55ba2d417468 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55ba2d4174e8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55ba2d42f468 <col:39> 'int' 0
|-CXXMethodDecl 0x55ba2d417688 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55ba2d417750 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55ba2d417818 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2d4178d8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d4179a0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55ba2d417ae8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55ba2d417a58 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55ba2d417cb8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d417ba8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d417c20 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d417d88 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55ba2d417e48 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55ba2d417ee8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d417f40 <col:30>
|-CXXMethodDecl 0x55ba2d417f90 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba2d418030 <col:20>
| `-OptimizeNoneAttr 0x55ba2d418088 <col:30>
|-CXXMethodDecl 0x55ba2d4180d8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2d418198 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d418260 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55ba2d418300 <col:20>
| `-OptimizeNoneAttr 0x55ba2d418358 <col:30>
|-CXXMethodDecl 0x55ba2d4184a8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d418398 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d418410 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d4185f8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55ba2d418568 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d4186d0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55ba2d418790 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55ba2d418830 <col:20>
| `-OptimizeNoneAttr 0x55ba2d418888 <col:30>
|-CXXMethodDecl 0x55ba2d4188d8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55ba2d418978 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4189d0 <col:30>
|-CXXMethodDecl 0x55ba2d418a20 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2d418ae8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55ba2d418b88 <col:20>
| `-OptimizeNoneAttr 0x55ba2d418be0 <col:30>
|-CXXMethodDecl 0x55ba2d418c28 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55ba2d418d48 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55ba2d418eb8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55ba2d418df8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55ba2d418fa8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55ba2d419048 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4190a0 <col:30>
|-CXXMethodDecl 0x55ba2d4190f0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55ba2d4191b0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55ba2d4193e8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55ba2d419260 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55ba2d4192d8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d419498 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4194f0 <col:30>
|-CXXMethodDecl 0x55ba2d419598 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55ba2d419638 <col:20>
| `-OptimizeNoneAttr 0x55ba2d419690 <col:30>
|-CXXMethodDecl 0x55ba2d4196e0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55ba2d419780 <col:20>
| `-OptimizeNoneAttr 0x55ba2d4197d8 <col:30>
|-CXXMethodDecl 0x55ba2d419820 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55ba2d4198c0 <col:20>
| `-OptimizeNoneAttr 0x55ba2d419918 <col:30>
|-CXXMethodDecl 0x55ba2d419a18 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55ba2d419950 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55ba2d419ac0 <col:20>
| `-OptimizeNoneAttr 0x55ba2d419b18 <col:30>
|-CXXMethodDecl 0x55ba2d419cd8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55ba2d419b50 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55ba2d419bc8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d419d88 <col:20>
| `-OptimizeNoneAttr 0x55ba2d419de0 <col:30>
|-CXXMethodDecl 0x55ba2d419e88 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55ba2d419fa8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55ba2d41a0c8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55ba2d41a168 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba2d41a190 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55ba2d41a2b8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55ba2d41a358 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41a3b0 <col:30>
|-CXXMethodDecl 0x55ba2d41a458 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55ba2d41a4f8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41a550 <col:30>
|-AccessSpecDecl 0x55ba2d41a578 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55ba2d41a5a0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55ba2d41a6a0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55ba2d41a6f0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d41a680 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55ba2d41a660 <col:14> 'int' 48
|-CXXMethodDecl 0x55ba2d41a758 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55ba2d41a7f8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41a850 <col:30>
|-CXXMethodDecl 0x55ba2d41a8c8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55ba2d41a968 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41a9c0 <col:30>
|-CXXMethodDecl 0x55ba2d41aa88 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55ba2d41a9f8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55ba2d41ac28 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55ba2d41adc8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55ba2d41acd8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55ba2d41ae70 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55ba2d41af70 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2d41b320 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41af50 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2d41af30 <col:9> 'int' 0
| |-EnumConstantDecl 0x55ba2d41b000 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2d41b338 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41afe0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55ba2d41afc0 <col:14> 'int' 1
| |-EnumConstantDecl 0x55ba2d41b090 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2d41b350 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41b070 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55ba2d41b050 <col:14> 'int' 2
| |-EnumConstantDecl 0x55ba2d41b120 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2d41b368 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41b100 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55ba2d41b0e0 <col:14> 'int' 3
| |-EnumConstantDecl 0x55ba2d41b1b0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2d41b380 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41b190 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba2d41b170 <col:13> 'int' 4
| |-EnumConstantDecl 0x55ba2d41b240 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55ba2d41b398 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41b220 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55ba2d41b200 <col:13> 'int' 5
| `-EnumConstantDecl 0x55ba2d41b2d0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55ba2d41b3b0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d41b2b0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55ba2d41b290 <col:14> 'int' 6
|-CXXMethodDecl 0x55ba2d41b418 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55ba2d41b4b8 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41b510 <col:30>
|-CXXMethodDecl 0x55ba2d41b608 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55ba2d41b548 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55ba2d41b6b0 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41b708 <col:30>
|-CXXMethodDecl 0x55ba2d41b778 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55ba2d41b8a0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55ba2d41ba18 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55ba2d41b950 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55ba2d41bae0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55ba2d41bba8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55ba2d41bce8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55ba2d41bc58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55ba2d41bd90 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55ba2d41be90 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ba2d41c090 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41be70 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2d41be50 <col:23> 'int' 0
| |-EnumConstantDecl 0x55ba2d41bf20 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ba2d41c0a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41bf00 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55ba2d41bee0 <col:45> 'int' 4
| |-EnumConstantDecl 0x55ba2d41bfb0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55ba2d41c0c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41bf90 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2d41bf70 <col:24> 'int' 0
| `-EnumConstantDecl 0x55ba2d41c040 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55ba2d41c0d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d41c020 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55ba2d41c000 <col:47> 'int' 16
|-CXXMethodDecl 0x55ba2d41c138 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55ba2d41c2a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55ba2d41c1e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55ba2d41c350 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41c3a8 <col:30>
|-CXXMethodDecl 0x55ba2d41c3f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55ba2d42fd80 <col:18, col:36>
|   `-ReturnStmt 0x55ba2d42fd70 <col:20, col:33>
|     `-ImplicitCastExpr 0x55ba2d42fd58 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55ba2d42fd38 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55ba2d42fd08 <col:27> '<bound member function type>' ->xanno 0x55ba2d41a458
|           `-CXXThisExpr 0x55ba2d42fcf8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55ba2d41c4f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55ba2d42fe90 <col:30, col:48>
|   `-ReturnStmt 0x55ba2d42fe80 <col:32, col:45>
|     `-ImplicitCastExpr 0x55ba2d42fe68 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55ba2d42fe48 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55ba2d42fe18 <col:39> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|           `-CXXThisExpr 0x55ba2d42fe08 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55ba2d41c5d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55ba2d430028 <col:24, col:50>
|   `-ReturnStmt 0x55ba2d430018 <col:26, col:47>
|     `-UnaryOperator 0x55ba2d430000 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba2d42ffe0 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ba2d42ffc8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba2d42ff78 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55ba2d425298
|         |   `-CXXMemberCallExpr 0x55ba2d42ff58 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55ba2d42ff28 <col:34> '<bound member function type>' ->xanno 0x55ba2d41a458
|         |       `-CXXThisExpr 0x55ba2d42ff18 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55ba2d42ffa8 <col:46> 'int' 0
|-CXXMethodDecl 0x55ba2d41c6e0 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55ba2d4301f8 <col:36, col:62>
|   `-ReturnStmt 0x55ba2d4301e8 <col:38, col:59>
|     `-UnaryOperator 0x55ba2d4301d0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba2d4301b0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ba2d430198 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba2d430110 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55ba2d425298
|         |   `-CXXMemberCallExpr 0x55ba2d4300f0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ba2d4300c0 <col:46> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|         |       `-CXXThisExpr 0x55ba2d4300b0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55ba2d430140 <col:58> 'int' 0
|-CXXMethodDecl 0x55ba2d41c7f8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55ba2d430390 <col:26, col:53>
|   `-ReturnStmt 0x55ba2d430380 <col:28, col:50>
|     `-UnaryOperator 0x55ba2d430368 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba2d430348 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55ba2d430330 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba2d4302e0 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55ba2d425598
|         |   `-CXXMemberCallExpr 0x55ba2d4302c0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55ba2d430290 <col:36> '<bound member function type>' ->xanno 0x55ba2d41a458
|         |       `-CXXThisExpr 0x55ba2d430280 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55ba2d430310 <col:49> 'int' 0
|-CXXMethodDecl 0x55ba2d41c918 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55ba2d430568 <col:38, col:65>
|   `-ReturnStmt 0x55ba2d430558 <col:40, col:62>
|     `-UnaryOperator 0x55ba2d430540 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55ba2d430520 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55ba2d430508 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba2d430478 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55ba2d425598
|         |   `-CXXMemberCallExpr 0x55ba2d430458 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ba2d430428 <col:48> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|         |       `-CXXThisExpr 0x55ba2d430418 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55ba2d4304a8 <col:61> 'int' 0
|-CXXMethodDecl 0x55ba2d41cac8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55ba2d41c9d0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55ba2d430c38 <col:34, line:463:5>
|   |-ParenExpr 0x55ba2d430a80 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55ba2d430a50 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d4306b8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d430688 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d4305d8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d4305c0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d430580 <col:23> 'int' lvalue ParmVar 0x55ba2d41c9d0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d4305a0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d430668 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d430638 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d4305f8 <col:33> 'int' lvalue ParmVar 0x55ba2d41c9d0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55ba2d430650 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55ba2d430618 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55ba2d430718 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d4306f8 <col:56> 'int' 0
|   |   `-CallExpr 0x55ba2d4309b0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d430998 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d430978 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d4309f0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d430808 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55ba2d430a08 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d430838 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d430a20 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d430870 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55ba2d430a38 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d430960 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d430948 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d430908 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55ba2d430c28 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55ba2d430c10 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55ba2d430bf0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55ba2d430bc0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55ba2d430b70 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55ba2d425298
|         |   `-CXXMemberCallExpr 0x55ba2d430b50 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55ba2d430b20 <col:9> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|         |       `-CXXThisExpr 0x55ba2d430b10 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55ba2d430bd8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55ba2d430ba0 <col:21> 'int' lvalue ParmVar 0x55ba2d41c9d0 'i' 'int'
|-CXXMethodDecl 0x55ba2d41cd18 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55ba2d41cb88 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55ba2d41cc00 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55ba2d4312c8 <col:40, line:472:5>
|   |-ParenExpr 0x55ba2d4310e0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55ba2d4310b0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d430d90 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d430d60 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d430cb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d430c98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d430c58 <col:23> 'int' lvalue ParmVar 0x55ba2d41cb88 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d430c78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d430d40 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d430d10 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d430cd0 <col:33> 'int' lvalue ParmVar 0x55ba2d41cb88 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55ba2d430d28 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55ba2d430cf0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55ba2d430df0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d430dd0 <col:56> 'int' 0
|   |   `-CallExpr 0x55ba2d431010 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d430ff8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d430fd8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d431050 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d430e60 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55ba2d431068 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d430e90 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d431080 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d430ec8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55ba2d431098 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d430fc0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d430fa8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d430f68 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55ba2d4312a8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55ba2d431250 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55ba2d431220 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55ba2d4311d0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55ba2d425298
|     | |   `-CXXMemberCallExpr 0x55ba2d4311b0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55ba2d431180 <col:2> '<bound member function type>' ->xanno 0x55ba2d41a458
|     | |       `-CXXThisExpr 0x55ba2d431170 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55ba2d431238 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55ba2d431200 <col:14> 'int' lvalue ParmVar 0x55ba2d41cb88 'i' 'int'
|     `-ImplicitCastExpr 0x55ba2d431290 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d431270 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55ba2d41cc00 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55ba2d41ced8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55ba2d41cde0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ba2d431a48 <col:36, line:485:5>
|   |-ParenExpr 0x55ba2d4317b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d431780 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d431460 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d431430 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d431340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d431328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d4312e8 <col:23> 'int' lvalue ParmVar 0x55ba2d41cde0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d431308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d431410 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d4313f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d431360 <col:33> 'int' lvalue ParmVar 0x55ba2d41cde0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d4313d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d4313c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d431380 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d4313a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba2d4314c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d4314a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d4316e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d4316c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d4316a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d431720 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d431530 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba2d431738 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d431568 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d431750 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d4315a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55ba2d431768 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d431690 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d431678 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d431638 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55ba2d431a38 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55ba2d431a20 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55ba2d431a08 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba2d4319d8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55ba2d431978 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba2d431948 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba2d4318c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ba2d425170
|             |   `-CXXMemberCallExpr 0x55ba2d4318a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba2d431870 <col:61> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|             |       `-CXXThisExpr 0x55ba2d431860 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba2d431960 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba2d4318f0 <col:74> 'int' lvalue ParmVar 0x55ba2d41cde0 'i' 'int'
|-CXXMethodDecl 0x55ba2d41d128 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55ba2d41cf98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba2d41d010 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55ba2d432198 <col:42, line:500:5>
|   |-ParenExpr 0x55ba2d431f30 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d431f00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d431be0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d431bb0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d431ac0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d431aa8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d431a68 <col:23> 'int' lvalue ParmVar 0x55ba2d41cf98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d431a88 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d431b90 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d431b78 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d431ae0 <col:33> 'int' lvalue ParmVar 0x55ba2d41cf98 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d431b58 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d431b40 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d431b00 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d431b20 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba2d431c40 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d431c20 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d431e60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d431e48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d431e28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d431ea0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d431cb0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba2d431eb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d431ce8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d431ed0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d431d20 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55ba2d431ee8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d431e10 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d431df8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d431db8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55ba2d432178 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55ba2d432128 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba2d4320f8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba2d4320a0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba2d432070 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba2d432020 <col:48, col:57> 'char [48]' lvalue ->c 0x55ba2d425170
|     |     |   `-CXXMemberCallExpr 0x55ba2d432000 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba2d431fd0 <col:48> '<bound member function type>' ->xanno 0x55ba2d41a458
|     |     |       `-CXXThisExpr 0x55ba2d431fc0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba2d432088 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba2d432050 <col:61> 'int' lvalue ParmVar 0x55ba2d41cf98 'i' 'int'
|     `-ImplicitCastExpr 0x55ba2d432160 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d432140 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55ba2d41d010 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55ba2d41d2e8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55ba2d41d1f0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55ba2d4328f8 <col:35, line:513:5>
|   |-ParenExpr 0x55ba2d432608 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d4325d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d432330 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d432300 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d432210 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d4321f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d4321b8 <col:23> 'int' lvalue ParmVar 0x55ba2d41d1f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d4321d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d4322e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d4322c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d432230 <col:33> 'int' lvalue ParmVar 0x55ba2d41d1f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d4322a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d432290 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d432250 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d432270 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba2d432390 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d432370 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d432538 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d432520 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d432500 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d432578 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d432400 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba2d432590 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d432438 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d4325a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d432470 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55ba2d4325c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d4324e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d4324d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d432490 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55ba2d4328e8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55ba2d4328d0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55ba2d4328b8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba2d432888 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55ba2d432800 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba2d4327d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba2d432780 <col:60, col:69> 'char const[48]' lvalue ->c 0x55ba2d425170
|             |   `-CXXMemberCallExpr 0x55ba2d432760 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba2d432730 <col:60> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|             |       `-CXXThisExpr 0x55ba2d432720 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba2d4327e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba2d4327b0 <col:73> 'int' lvalue ParmVar 0x55ba2d41d1f0 'i' 'int'
|-CXXMethodDecl 0x55ba2d41d538 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55ba2d41d3a8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba2d41d420 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55ba2d433018 <col:41, line:528:5>
|   |-ParenExpr 0x55ba2d432da0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d432d70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d432a90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d432a60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d432970 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d432958 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d432918 <col:23> 'int' lvalue ParmVar 0x55ba2d41d3a8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d432938 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d432a40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d432a28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d432990 <col:33> 'int' lvalue ParmVar 0x55ba2d41d3a8 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d432a08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d4329f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d4329b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d4329d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55ba2d432af0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d432ad0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d432cd0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d432cb8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d432c98 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d432d10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d432b60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55ba2d432d28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d432b98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d432d40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d432bd0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55ba2d432d58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d432c80 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d432c68 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d432c28 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55ba2d432ff8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55ba2d432fa8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba2d432f78 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba2d432f20 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba2d432ee0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba2d432e90 <col:47, col:56> 'char [48]' lvalue ->c 0x55ba2d425170
|     |     |   `-CXXMemberCallExpr 0x55ba2d432e70 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba2d432e40 <col:47> '<bound member function type>' ->xanno 0x55ba2d41a458
|     |     |       `-CXXThisExpr 0x55ba2d432e30 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba2d432ef8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba2d432ec0 <col:60> 'int' lvalue ParmVar 0x55ba2d41d3a8 'i' 'int'
|     `-ImplicitCastExpr 0x55ba2d432fe0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d432fc0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55ba2d41d420 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55ba2d41d6f8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55ba2d41d600 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ba2d4336e8 <col:36, line:541:5>
|   |-ParenExpr 0x55ba2d433488 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d433458 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d4331b0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d433180 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d433090 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d433078 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d433038 <col:23> 'int' lvalue ParmVar 0x55ba2d41d600 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d433058 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d433160 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d433148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d4330b0 <col:33> 'int' lvalue ParmVar 0x55ba2d41d600 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d433128 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d433110 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d4330d0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d4330f0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ba2d433210 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d4331f0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d4333b8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d4333a0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d433380 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d4333f8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d433280 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ba2d433410 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d4332b8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d433428 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d4332f0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55ba2d433440 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d433368 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d433350 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d433310 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55ba2d4336d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55ba2d4336c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55ba2d4336a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba2d433678 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55ba2d433620 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba2d4335f0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba2d4335a0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ba2d425170
|             |   `-CXXMemberCallExpr 0x55ba2d433580 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba2d433550 <col:61> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|             |       `-CXXThisExpr 0x55ba2d433540 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba2d433608 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba2d4335d0 <col:74> 'int' lvalue ParmVar 0x55ba2d41d600 'i' 'int'
|-CXXMethodDecl 0x55ba2d41d8c8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55ba2d41d7b8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55ba2d41d830 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55ba2d41d978 <col:20>
| `-OptimizeNoneAttr 0x55ba2d41d9d0 <col:30>
|-CXXMethodDecl 0x55ba2d41db08 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55ba2d41da10 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55ba2d433db8 <col:35, line:562:5>
|   |-ParenExpr 0x55ba2d433b58 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d433b28 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d433880 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d433850 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d433760 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d433748 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d433708 <col:23> 'int' lvalue ParmVar 0x55ba2d41da10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d433728 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d433830 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d433818 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d433780 <col:33> 'int' lvalue ParmVar 0x55ba2d41da10 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d4337f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d4337e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d4337a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d4337c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ba2d4338e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d4338c0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d433a88 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d433a70 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d433a50 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d433ac8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d433950 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ba2d433ae0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d433988 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d433af8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d4339c0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55ba2d433b10 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d433a38 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d433a20 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d4339e0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55ba2d433da8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55ba2d433d90 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55ba2d433d78 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba2d433d48 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55ba2d433cf0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba2d433cc0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba2d433c70 <col:60, col:69> 'char const[48]' lvalue ->c 0x55ba2d425170
|             |   `-CXXMemberCallExpr 0x55ba2d433c50 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba2d433c20 <col:60> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|             |       `-CXXThisExpr 0x55ba2d433c10 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba2d433cd8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba2d433ca0 <col:73> 'int' lvalue ParmVar 0x55ba2d41da10 'i' 'int'
|-CXXMethodDecl 0x55ba2d41dd18 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55ba2d41dbc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba2d41dc40 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55ba2d434498 <col:41, line:577:5>
|   |-ParenExpr 0x55ba2d434228 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d4341f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d433f50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d433f20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d433e30 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d433e18 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d433dd8 <col:23> 'int' lvalue ParmVar 0x55ba2d41dbc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d433df8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d433f00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d433ee8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d433e50 <col:33> 'int' lvalue ParmVar 0x55ba2d41dbc8 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d433ec8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d433eb0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d433e70 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d433e90 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55ba2d433fb0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d433f90 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d434158 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d434140 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d434120 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d434198 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d434020 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55ba2d4341b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d434058 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d4341c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d434090 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55ba2d4341e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d434108 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d4340f0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d4340b0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55ba2d434478 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55ba2d434428 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba2d4343f8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba2d434398 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba2d434368 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba2d434318 <col:47, col:56> 'char [48]' lvalue ->c 0x55ba2d425170
|     |     |   `-CXXMemberCallExpr 0x55ba2d4342f8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba2d4342c8 <col:47> '<bound member function type>' ->xanno 0x55ba2d41a458
|     |     |       `-CXXThisExpr 0x55ba2d4342b8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba2d434380 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba2d434348 <col:60> 'int' lvalue ParmVar 0x55ba2d41dbc8 'i' 'int'
|     `-ImplicitCastExpr 0x55ba2d434460 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d434440 <col:65> 'int32_t':'int' lvalue ParmVar 0x55ba2d41dc40 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55ba2d41ded8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55ba2d41dde0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55ba2d434bc8 <col:36, line:591:5>
|   |-ParenExpr 0x55ba2d434908 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d4348d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d434630 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d434600 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d434510 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d4344f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d4344b8 <col:23> 'int' lvalue ParmVar 0x55ba2d41dde0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d4344d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d4345e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d4345c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d434530 <col:33> 'int' lvalue ParmVar 0x55ba2d41dde0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d4345a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d434590 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d434550 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d434570 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55ba2d434690 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d434670 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d434838 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d434820 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d434800 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d434878 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d434700 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55ba2d434890 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d434738 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d4348a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d434770 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55ba2d4348c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d4347e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d4347d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d434790 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55ba2d434bb8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55ba2d434ba0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55ba2d434b88 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba2d434b58 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55ba2d434ad0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba2d434aa0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba2d434a50 <col:61, col:70> 'char const[48]' lvalue ->c 0x55ba2d425170
|             |   `-CXXMemberCallExpr 0x55ba2d434a30 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba2d434a00 <col:61> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|             |       `-CXXThisExpr 0x55ba2d4349f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba2d434ab8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba2d434a80 <col:74> 'int' lvalue ParmVar 0x55ba2d41dde0 'i' 'int'
|-CXXMethodDecl 0x55ba2d41e128 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55ba2d41df98 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba2d41e010 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55ba2d4352a8 <col:42, line:606:5>
|   |-ParenExpr 0x55ba2d435038 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55ba2d435008 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d434d60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d434d30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d434c40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d434c28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d434be8 <col:23> 'int' lvalue ParmVar 0x55ba2d41df98 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d434c08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d434d10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55ba2d434cf8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d434c60 <col:33> 'int' lvalue ParmVar 0x55ba2d41df98 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d434cd8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d434cc0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d434c80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55ba2d434ca0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55ba2d434dc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d434da0 <col:60> 'int' 0
|   |   `-CallExpr 0x55ba2d434f68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d434f50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d434f30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d434fa8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d434e30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55ba2d434fc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d434e68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d434fd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d434ea0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55ba2d434ff0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d434f18 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d434f00 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d434ec0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55ba2d435288 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55ba2d435238 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba2d435208 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba2d4351a8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba2d435178 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba2d435128 <col:48, col:57> 'char [48]' lvalue ->c 0x55ba2d425170
|     |     |   `-CXXMemberCallExpr 0x55ba2d435108 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba2d4350d8 <col:48> '<bound member function type>' ->xanno 0x55ba2d41a458
|     |     |       `-CXXThisExpr 0x55ba2d4350c8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba2d435190 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba2d435158 <col:61> 'int' lvalue ParmVar 0x55ba2d41df98 'i' 'int'
|     `-ImplicitCastExpr 0x55ba2d435270 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55ba2d435250 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55ba2d41e010 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55ba2d41e2c0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55ba2d41e1f0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55ba2d435b18 <col:33, line:620:5>
|   |-ParenExpr 0x55ba2d435890 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55ba2d435860 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d4354b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d435480 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d435320 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d435308 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d4352c8 <col:23> 'int' lvalue ParmVar 0x55ba2d41e1f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d4352e8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d435460 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55ba2d435448 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d435340 <col:33> 'int' lvalue ParmVar 0x55ba2d41e1f0 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d435428 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d435410 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d435360 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55ba2d4353e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55ba2d4353d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55ba2d435398 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55ba2d435510 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d4354f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55ba2d4357c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d4357a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d435788 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d435800 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d4355f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55ba2d435818 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d435640 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d435830 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d435678 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55ba2d435848 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d435770 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d435758 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d435718 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55ba2d435b08 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55ba2d435af0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55ba2d435ad8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55ba2d435aa8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55ba2d435a20 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55ba2d4359f0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55ba2d4359a0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55ba2d425170
|             |   `-CXXMemberCallExpr 0x55ba2d435980 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55ba2d435950 <col:67> '<bound member function type>' ->xanno 0x55ba2d41a2b8
|             |       `-CXXThisExpr 0x55ba2d435940 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55ba2d435a08 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55ba2d4359d0 <col:80> 'int' lvalue ParmVar 0x55ba2d41e1f0 'i' 'int'
|-CXXMethodDecl 0x55ba2d41e4d8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55ba2d41e380 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55ba2d41e400 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55ba2d436340 <col:45, line:635:5>
|   |-ParenExpr 0x55ba2d436088 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55ba2d436058 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55ba2d435d20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55ba2d435cf0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55ba2d435b90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55ba2d435b78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55ba2d435b38 <col:23> 'int' lvalue ParmVar 0x55ba2d41e380 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55ba2d435b58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55ba2d435cd0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55ba2d435cb8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55ba2d435bb0 <col:33> 'int' lvalue ParmVar 0x55ba2d41e380 'i' 'int'
|   |   |     `-BinaryOperator 0x55ba2d435c98 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55ba2d435c80 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55ba2d435bd0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55ba2d41a6a0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55ba2d435c58 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55ba2d435c40 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55ba2d435c08 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55ba2d435d80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55ba2d435d60 <col:79> 'int' 0
|   |   `-CallExpr 0x55ba2d435fb8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55ba2d435fa0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55ba2d435f80 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55ba2cf86fc0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55ba2d435ff8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d435df0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55ba2d436010 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55ba2d435e38 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55ba2d436028 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55ba2d435e70 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55ba2d436040 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55ba2d435f68 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55ba2d435f50 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55ba2d435f08 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55ba2d436320 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55ba2d436288 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55ba2d436258 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55ba2d4361f8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55ba2d4361c8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55ba2d436178 <col:54, col:63> 'char [48]' lvalue ->c 0x55ba2d425170
|     |     |   `-CXXMemberCallExpr 0x55ba2d436158 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55ba2d436128 <col:54> '<bound member function type>' ->xanno 0x55ba2d41a458
|     |     |       `-CXXThisExpr 0x55ba2d436118 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55ba2d4361e0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55ba2d4361a8 <col:67> 'int' lvalue ParmVar 0x55ba2d41e380 'i' 'int'
|     `-CXXConstCastExpr 0x55ba2d4362f0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55ba2d4362d8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55ba2d4362a0 <col:91> 'const void *' lvalue ParmVar 0x55ba2d41e400 'x' 'const void *'
|-CXXMethodDecl 0x55ba2d41e5a8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55ba2d4363c8 <col:34, line:640:5>
|   `-ReturnStmt 0x55ba2d4363b8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55ba2d4363a0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55ba2d436370 <col:16> 'Packet *' lvalue ->_data_packet 0x55ba2d425d28
|         `-CXXThisExpr 0x55ba2d436360 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55ba2d41e6e8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55ba2d41e658 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55ba2d42f488 <col:46> 'bool' true
|-CXXMethodDecl 0x55ba2d41e868 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55ba2d41e7a0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55ba2d41e910 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55ba2d41f0c0 <line:660:22> "" ""
| |-EnumConstantDecl 0x55ba2d41ea10 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f130 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41e9f0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55ba2d41e9d0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55ba2d413b70 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55ba2d41eaa0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f148 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41ea80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55ba2d41ea60 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55ba2d413c00 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55ba2d41eb30 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f160 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41eb10 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2d41eaf0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55ba2d41ebc0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f178 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41eba0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55ba2d41eb80 <col:19> 'int' 16
| |-EnumConstantDecl 0x55ba2d41ec50 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f190 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41ec30 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55ba2d41ec10 <col:21> 'int' 16
| |-EnumConstantDecl 0x55ba2d41ece0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f1a8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41ecc0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55ba2d41eca0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55ba2d41ed70 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f1c0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41ed50 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55ba2d41ed30 <col:19> 'int' EnumConstant 0x55ba2d41ebc0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55ba2d41ee00 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f1d8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41ede0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55ba2d41edc0 <col:19> 'int' EnumConstant 0x55ba2d41ece0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55ba2d41eed0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f1f0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41eeb0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55ba2d41ee90 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55ba2d41ee50 <col:23> 'int' EnumConstant 0x55ba2d41ee00 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55ba2d41ee70 <col:40> 'int' 2
| |-EnumConstantDecl 0x55ba2d41efa0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55ba2d41f208 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d41ef80 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55ba2d41ef60 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55ba2d41ef20 <col:23> 'int' EnumConstant 0x55ba2d41ee00 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55ba2d41ef40 <col:40> 'int' 4
| `-EnumConstantDecl 0x55ba2d41f070 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55ba2d41f220 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55ba2d41f050 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55ba2d41f030 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55ba2d41eff0 <col:23> 'int' EnumConstant 0x55ba2d41ee00 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55ba2d41f010 <col:40> 'int' 8
|-CXXMethodDecl 0x55ba2d41f260 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55ba2d41f300 <col:68> "" ""
|-CXXMethodDecl 0x55ba2d41f398 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55ba2d41f438 <col:45> "" ""
|-CXXMethodDecl 0x55ba2d41f4d0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55ba2d41f570 <col:57> "" ""
|-CXXMethodDecl 0x55ba2d41f608 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55ba2d41f6a8 <col:45> "" ""
|-CXXMethodDecl 0x55ba2d41f740 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55ba2d41f7e0 <col:57> "" ""
|-CXXMethodDecl 0x55ba2d41f870 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55ba2d41f910 <col:51> "" ""
|-CXXMethodDecl 0x55ba2d41f9a0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55ba2d41fa40 <col:63> "" ""
|-CXXMethodDecl 0x55ba2d41fad0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55ba2d41fb70 <col:53> "" ""
|-CXXMethodDecl 0x55ba2d41fc00 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55ba2d41fca0 <col:65> "" ""
|-CXXMethodDecl 0x55ba2d41fdb8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55ba2d41fd28 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55ba2d41fe60 <col:61> "" ""
|-CXXMethodDecl 0x55ba2d41fff8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55ba2d41fee8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55ba2d41ff60 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55ba2d4200a8 <col:67> "" ""
|-CXXMethodDecl 0x55ba2d4201c0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55ba2d420130 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ba2d420268 <col:63> "" ""
|-CXXMethodDecl 0x55ba2d420400 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55ba2d4202f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba2d420368 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55ba2d4204b0 <col:69> "" ""
|-CXXMethodDecl 0x55ba2d4205c8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55ba2d420538 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ba2d420670 <col:63> "" ""
|-CXXMethodDecl 0x55ba2d422d48 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d422c38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba2d422cb0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba2d422df8 <col:69> "" ""
|-CXXMethodDecl 0x55ba2d422f10 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55ba2d422e80 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55ba2d422fb8 <col:62> "" ""
|-CXXMethodDecl 0x55ba2d423150 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55ba2d423040 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba2d4230b8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55ba2d423200 <col:68> "" ""
|-CXXMethodDecl 0x55ba2d423318 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55ba2d423288 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55ba2d4233c0 <col:63> "" ""
|-CXXMethodDecl 0x55ba2d423558 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55ba2d423448 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55ba2d4234c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55ba2d423608 <col:69> "" ""
|-CXXMethodDecl 0x55ba2d423698 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55ba2d423738 <col:64> "" ""
|-CXXMethodDecl 0x55ba2d4237c8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55ba2d423868 <col:52> "" ""
|-CXXMethodDecl 0x55ba2d4238f8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55ba2d423998 <col:67> "" ""
|-CXXMethodDecl 0x55ba2d423a28 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55ba2d423ac8 <col:55> "" ""
|-CXXMethodDecl 0x55ba2d423be0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55ba2d423b50 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ba2d423c88 <col:58> "" ""
|-CXXMethodDecl 0x55ba2d423e20 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55ba2d423d10 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba2d423d88 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55ba2d423ed0 <col:62> "" ""
|-CXXMethodDecl 0x55ba2d423fe8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55ba2d423f58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ba2d424090 <col:58> "" ""
|-CXXMethodDecl 0x55ba2d424228 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55ba2d424118 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba2d424190 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55ba2d4242d8 <col:62> "" ""
|-CXXMethodDecl 0x55ba2d4243f0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55ba2d424360 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55ba2d424498 <col:60> "" ""
|-CXXMethodDecl 0x55ba2d424630 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55ba2d424520 <col:34> col:37 'int'
| |-ParmVarDecl 0x55ba2d424598 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55ba2d4246e0 <col:64> "" ""
|-CXXMethodDecl 0x55ba2d4247f8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55ba2d424768 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55ba2d4248a0 <col:58> "" ""
|-CXXMethodDecl 0x55ba2d424a38 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55ba2d424928 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba2d4249a0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55ba2d424ae8 <col:62> "" ""
|-CXXMethodDecl 0x55ba2d424c00 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55ba2d424b70 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55ba2d424ca8 <col:59> "" ""
|-CXXMethodDecl 0x55ba2d424e40 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55ba2d424d30 <col:33> col:36 'int'
| |-ParmVarDecl 0x55ba2d424da8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55ba2d424ef0 <col:63> "" ""
|-AccessSpecDecl 0x55ba2d424f60 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55ba2d424f88 prev 0x55ba2d41a190 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba2d425080 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55ba2d425170 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55ba2d425298 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55ba2d425418 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55ba2d425598 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55ba2d425718 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55ba2d436548 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55ba2d436db8 <col:11>
| |-CXXDestructorDecl 0x55ba2d436620 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55ba2d436758 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55ba2d436758
| | `-ParmVarDecl 0x55ba2d436868 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55ba2d436908 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba2d436908
| | `-ParmVarDecl 0x55ba2d436a18 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55ba2d4397d8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55ba2d4398e8 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55ba2d439b68 <col:11>
| |   `-ReturnStmt 0x55ba2d439b58 <col:11>
| |     `-UnaryOperator 0x55ba2d439b40 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55ba2d439b30 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55ba2d439958 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55ba2d439958
|   `-ParmVarDecl 0x55ba2d439a68 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55ba2d425780 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55ba2d425898 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55ba2d425938 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55ba2d4259a0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55ba2d425a08 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55ba2d425a70 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55ba2d425ad0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55ba2d425b90 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55ba2d425bf0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55ba2d425c50 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55ba2d436458 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55ba2d425938 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55ba2d436dc8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55ba2d436e20 <col:12>
| |-CXXConstructorDecl 0x55ba2d436a88 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55ba2d436a88
| | `-ParmVarDecl 0x55ba2d436b98 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55ba2d436c38 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55ba2d436c38
| | `-ParmVarDecl 0x55ba2d436d48 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55ba2d438ec0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55ba2d425cc8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55ba2d425d28 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55ba2d425d90 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55ba2d425df8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55ba2d425e60 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55ba2d425ec8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55ba2d425f28 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55ba2d425f88 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55ba2d425ff0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55ba2d426078 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55ba2d425cc8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55ba2d4363f0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55ba2d425f28 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55ba2d436e30 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55ba2d436e90 <col:21, line:755:5>
|-CXXConstructorDecl 0x55ba2d426218 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55ba2d426158 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55ba2d426310 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55ba2d4264f8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55ba2d426400 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55ba2d4267c8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55ba2d4265b0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55ba2d426628 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55ba2d4266a0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d4269e8 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55ba2d426898 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55ba2d426910 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55ba2d42efc8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55ba2d426aa8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55ba2d426b20 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55ba2d426b98 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55ba2d42f120 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55ba2d42f090 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55ba2d42f268 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55ba2d42f1d8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55ba2d42f360 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned char>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned char * _ptr
        24 |   unsigned char _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   int * _ptr
        24 |   int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned char>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d507f80 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55ba2d508098 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55ba2d508128 <col:16, col:22> col:16 public
|-EnumDecl 0x55ba2d508150 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55ba2d508250 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ba2d5084a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d508230 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55ba2d508210 <col:21> 'int' 0
| |-EnumConstantDecl 0x55ba2d5082e0 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ba2d5084b8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d5082c0 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55ba2d5082a0 <col:24> 'int' 22
| |-EnumConstantDecl 0x55ba2d508370 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ba2d5084d0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d508350 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55ba2d508330 <col:24> 'int' 34
| |-EnumConstantDecl 0x55ba2d508400 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55ba2d5084e8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55ba2d5083e0 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55ba2d5083c0 <col:25> 'int' 95
| `-EnumConstantDecl 0x55ba2d508450 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55ba2d509e60 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55ba2d50a298 <col:7>
|-CXXConstructorDecl 0x55ba2d509f68 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55ba2d509f68
| `-ParmVarDecl 0x55ba2d50a078 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55ba2d50a118 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d50a228 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55ba2d56be80 <col:7>
`-CXXDestructorDecl 0x55ba2d50c3a8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55ba2d508518 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55ba2d508678 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55ba2d508708 <col:32, col:38> col:32 public
|-TypedefDecl 0x55ba2d508740 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55ba2d0404c0 'uint32_t' sugar
|   |-Typedef 0x55ba2cf54408 'uint32_t'
|   `-TypedefType 0x55ba2cf2d440 '__uint32_t' sugar
|     |-Typedef 0x55ba2cf2d038 '__uint32_t'
|     `-BuiltinType 0x55ba2ceeb410 'unsigned int'
|-CXXConstructorDecl 0x55ba2d508888 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55ba2d5087b0 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55ba2d509d68 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55ba2d50a2a8 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55ba2d509620 'base' 'int'
| | `-ImplicitCastExpr 0x55ba2d509e08 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55ba2d509dc8 <col:16> 'int' lvalue ParmVar 0x55ba2d5087b0 'b' 'int'
| `-CompoundStmt 0x55ba2d50a318 <col:19, line:1046:5>
|-CXXMethodDecl 0x55ba2d508d80 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55ba2d508950 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55ba2d5089d0 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55ba2d508a48 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55ba2d508ac8 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55ba2d508b88 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55ba2d508c08 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55ba2d5091d8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55ba2d508e50 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55ba2d509138 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55ba2d508ef8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55ba2d508f98 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55ba2d509010 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55ba2d509d88 <col:82> 'const ArgContext' lvalue Var 0x55ba2d4fcdb8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55ba2d50b258 <col:94, line:1067:5>
| |   |-DeclStmt 0x55ba2d50a4a8 <line:1054:9, col:64>
| |   | `-VarDecl 0x55ba2d50a338 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55ba2d50a460 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55ba2d50a6c8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55ba2d50a4d8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55ba2d50a6a0 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55ba2d50a680 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55ba2d50a630 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55ba2d50a610 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55ba2d50a5b8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55ba2d50a568 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55ba2d50a598 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55ba2d50a5f8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55ba2d50a5d8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55ba2d50a660 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55ba2d50a828 <line:1056:9, col:27>
| |   | `-VarDecl 0x55ba2d50a7c0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55ba2d50ac70 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55ba2d50aba0 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55ba2d50ab20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55ba2d40a4a8 0x55ba2d253a88 0x55ba2d253760 0x55ba2d244f40 0x55ba2d244bf0 0x55ba2d2444e0 0x55ba2d216e50 0x55ba2d1a3310
| |   | | |-CallExpr 0x55ba2d50aa60 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55ba2d50a850 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55ba2d50a900 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55ba2d50a8d0 <col:19, col:23> '<bound member function type>' .begin 0x55ba2d234148
| |   | | | |   `-DeclRefExpr 0x55ba2d50a8b0 <col:19> 'const String' lvalue ParmVar 0x55ba2d508ef8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55ba2d50a970 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55ba2d50a940 <col:32, col:36> '<bound member function type>' .end 0x55ba2d234360
| |   | | | |   `-DeclRefExpr 0x55ba2d50a920 <col:32> 'const String' lvalue ParmVar 0x55ba2d508ef8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55ba2d50a990 <col:43> 'const bool' lvalue Var 0x55ba2d50a338 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55ba2d50a9f8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55ba2d50a9d8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55ba2d50aa20 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55ba2d50a7c0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55ba2d50aa40 <col:73> 'const int' lvalue Var 0x55ba2d50a4d8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55ba2d50ab00 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55ba2d50aad0 <col:16, col:20> '<bound member function type>' .end 0x55ba2d234360
| |   | |     `-DeclRefExpr 0x55ba2d50aab0 <col:16> 'const String' lvalue ParmVar 0x55ba2d508ef8 'str' 'const String &'
| |   | `-BinaryOperator 0x55ba2d50ac50 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55ba2d50abe8 <col:13> 'int' lvalue ->status 0x55ba2d509688
| |   |   | `-CXXThisExpr 0x55ba2d50abd8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55ba2d50ac38 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55ba2d50ac18 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d5082e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55ba2d50aed8 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55ba2d50adc0 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55ba2d50ada8 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55ba2d50ad90 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55ba2d50ac98 <col:13> 'int' lvalue ->status 0x55ba2d509688
| |   | | |     `-CXXThisExpr 0x55ba2d50ac88 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55ba2d50ad70 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55ba2d50ad40 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55ba2d50acf0 <col:23> 'int' lvalue ->status 0x55ba2d509688
| |   | |   |   `-CXXThisExpr 0x55ba2d50acc8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55ba2d50ad58 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55ba2d50ad20 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d508370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55ba2d50aeb8 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55ba2d50ae58 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55ba2d50ae00 <col:13, col:18> '<bound member function type>' .error 0x55ba2d3cdd70
| |   |   | | `-DeclRefExpr 0x55ba2d50ade0 <col:13> 'const ArgContext' lvalue ParmVar 0x55ba2d509010 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55ba2d50ae80 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55ba2d50ae30 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55ba2d50aea8 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55ba2d50ae98 <col:20> 'bool' false
| |   |-DeclStmt 0x55ba2d50b0a8 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55ba2d50b050 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55ba2d50afe0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55ba2d50b208 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55ba2d50b0c0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55ba2d1d72d8
| |   | |-DeclRefExpr 0x55ba2d50b108 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55ba2d50a7c0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55ba2d50b1d8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55ba2d50b150 <col:64> 'V' lvalue ParmVar 0x55ba2d508f98 'result' 'V &'
| |   `-ReturnStmt 0x55ba2d50b248 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55ba2d50b238 <col:16> 'bool' true
| `-CXXMethodDecl 0x55ba2d56fa88 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55ba2d56f860 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55ba2d56f938 <col:46, col:49> col:49 used result 'unsigned char &'
|   |-ParmVarDecl 0x55ba2d56f9a0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55ba2d571820 <col:94, line:1067:5>
|     |-DeclStmt 0x55ba2d570298 <line:1054:9, col:64>
|     | `-VarDecl 0x55ba2d5700b8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55ba2d570228 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55ba2d5701f8 <col:36, col:55> 'const bool' lvalue Var 0x55ba2d1c0200 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55ba2d570478 <line:1055:9, col:91>
|     | `-VarDecl 0x55ba2d5702b0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55ba2d5703f8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55ba2d5703e0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55ba2d5703c0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55ba2d5703a0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55ba2d570380 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55ba2d570348 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55ba2d570328 <col:36, col:44> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55ba2d50a598 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55ba2d570368 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55ba2d50a5d8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55ba2d50a660 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55ba2d570610 <line:1056:9, col:27>
|     | `-VarDecl 0x55ba2d5705a8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55ba2d570a98 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55ba2d570a40 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55ba2d5708f8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55ba2d5708c8 <col:13> '<bound member function type>' ->parse 0x55ba2d508d80
|     | | | | `-CXXThisExpr 0x55ba2d5708b8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55ba2d570758 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55ba2d570728 <col:19, col:23> '<bound member function type>' .begin 0x55ba2d234148
|     | | | |   `-DeclRefExpr 0x55ba2d570708 <col:19> 'const String' lvalue ParmVar 0x55ba2d56f860 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55ba2d5707c8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55ba2d570798 <col:32, col:36> '<bound member function type>' .end 0x55ba2d234360
|     | | | |   `-DeclRefExpr 0x55ba2d570778 <col:32> 'const String' lvalue ParmVar 0x55ba2d56f860 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55ba2d570968 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55ba2d570948 <col:43> 'const bool' lvalue Var 0x55ba2d5700b8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55ba2d570850 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55ba2d570838 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55ba2d570818 <col:58, col:66> 'unsigned long' sizeof 'unsigned char':'unsigned char'
|     | | | |-ImplicitCastExpr 0x55ba2d570980 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55ba2d570878 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55ba2d5705a8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55ba2d5709b8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55ba2d570998 <col:73> 'const int' lvalue Var 0x55ba2d5702b0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55ba2d570a20 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55ba2d5709f0 <col:16, col:20> '<bound member function type>' .end 0x55ba2d234360
|     | |     `-DeclRefExpr 0x55ba2d5709d0 <col:16> 'const String' lvalue ParmVar 0x55ba2d56f860 'str' 'const String &'
|     | `-BinaryOperator 0x55ba2d570a78 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55ba2d50abe8 <col:13> 'int' lvalue ->status 0x55ba2d509688
|     |   | `-CXXThisExpr 0x55ba2d50abd8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55ba2d570a60 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55ba2d50ac18 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d5082e0 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55ba2d570c10 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55ba2d570b30 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55ba2d570b18 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55ba2d570b00 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55ba2d50ac98 <col:13> 'int' lvalue ->status 0x55ba2d509688
|     | | |     `-CXXThisExpr 0x55ba2d50ac88 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55ba2d570ae0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55ba2d570ab0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55ba2d50acf0 <col:23> 'int' lvalue ->status 0x55ba2d509688
|     | |   |   `-CXXThisExpr 0x55ba2d50acc8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55ba2d570ac8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55ba2d50ad20 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d508370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55ba2d570bf0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55ba2d570ba0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55ba2d570b70 <col:13, col:18> '<bound member function type>' .error 0x55ba2d3cdd70
|     |   | | `-DeclRefExpr 0x55ba2d570b50 <col:13> 'const ArgContext' lvalue ParmVar 0x55ba2d56f9a0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55ba2d570bc8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55ba2d50ae30 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55ba2d570be0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55ba2d50ae98 <col:20> 'bool' false
|     |-DeclStmt 0x55ba2d571158 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55ba2d571100 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned char>::type':'unsigned char'
|     |   `-ElaboratedType 0x55ba2d5710b0 'typename make_unsigned<unsigned char>::type' sugar
|     |     `-TypedefType 0x55ba2d571090 'make_unsigned<unsigned char>::type' sugar
|     |       |-Typedef 0x55ba2d571020 'type'
|     |       `-ElaboratedType 0x55ba2d570fd0 'typename integer_traits<unsigned char>::unsigned_type' sugar
|     |         `-TypedefType 0x55ba2d570fb0 'integer_traits<unsigned char>::unsigned_type' sugar
|     |           |-Typedef 0x55ba2d1c0358 'unsigned_type'
|     |           `-BuiltinType 0x55ba2ceeb3d0 'unsigned char'
|     |-CallExpr 0x55ba2d5717b0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55ba2d571798 <col:9> 'void (*)(const unsigned int *, unsigned char &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55ba2d571718 <col:9> 'void (const unsigned int *, unsigned char &)' lvalue Function 0x55ba2d5715f8 'extract_integer' 'void (const unsigned int *, unsigned char &)' (FunctionTemplate 0x55ba2d1d72d8 'extract_integer')
|     | |-ImplicitCastExpr 0x55ba2d5717f8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55ba2d5717e0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55ba2d5711b8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55ba2d5705a8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55ba2d571288 <col:28, col:70> 'unsigned_v_type':'unsigned char' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55ba2d571238 <col:64> 'unsigned char':'unsigned char' lvalue ParmVar 0x55ba2d56f938 'result' 'unsigned char &'
|     `-ReturnStmt 0x55ba2d571810 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55ba2d50b238 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55ba2d509598 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55ba2d509248 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55ba2d5094f8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55ba2d5092f8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55ba2d509398 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55ba2d509410 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55ba2d509da8 <col:71> 'const ArgContext' lvalue Var 0x55ba2d4fcdb8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55ba2d50b9c8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55ba2d50b320 <line:1071:9, col:12>
| |   | `-VarDecl 0x55ba2d50b2b8 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55ba2d50b9a0 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55ba2d50b5b0 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55ba2d50b438 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55ba2d50b400 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55ba2d50b348 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55ba2d50b3a0 <col:31> 'const String' lvalue ParmVar 0x55ba2d5092f8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55ba2d50b3c0 <col:36> 'V' lvalue Var 0x55ba2d50b2b8 'x' 'V'
| |     | |   `-DeclRefExpr 0x55ba2d50b3e0 <col:39> 'const ArgContext' lvalue ParmVar 0x55ba2d509410 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55ba2d50b590 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55ba2d50b570 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55ba2d50b558 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55ba2d50b540 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55ba2d50b460 <col:17> 'int' lvalue ->status 0x55ba2d509688
| |     |     |     `-CXXThisExpr 0x55ba2d50b450 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55ba2d50b520 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55ba2d50b4f0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55ba2d50b4a0 <col:27> 'int' lvalue ->status 0x55ba2d509688
| |     |       |   `-CXXThisExpr 0x55ba2d50b490 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55ba2d50b508 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55ba2d50b4d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d508370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55ba2d50b5e0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55ba2d50b5d0 <col:20> 'bool' false
| |     `-IfStmt 0x55ba2d50b978 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55ba2d50b680 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55ba2d50b650 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55ba2d50b600 <col:18> 'int' lvalue ->status 0x55ba2d509688
| |       | |   `-CXXThisExpr 0x55ba2d50b5f0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55ba2d50b668 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55ba2d50b630 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d508370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55ba2d50b8b8 <col:42, line:1079:9>
| |       | |-CallExpr 0x55ba2d50b860 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55ba2d50b6b0 <line:1076:13> '<bound member function type>' ->range_error 0x55ba2d509c98
| |       | | | `-CXXThisExpr 0x55ba2d50b6a0 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55ba2d50b6e0 <col:25> 'const ArgContext' lvalue ParmVar 0x55ba2d509410 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55ba2d50b7c0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55ba2d50b838 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55ba2d50b818 <col:43> 'V' lvalue Var 0x55ba2d50b2b8 'x' 'V'
| |       | `-ReturnStmt 0x55ba2d50b8a8 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55ba2d50b898 <col:20> 'bool' false
| |       `-CompoundStmt 0x55ba2d50b958 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55ba2d50b918 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55ba2d50b8d8 <col:13> 'V' lvalue ParmVar 0x55ba2d509398 'result' 'V &'
| |         | `-DeclRefExpr 0x55ba2d50b8f8 <col:22> 'V' lvalue Var 0x55ba2d50b2b8 'x' 'V'
| |         `-ReturnStmt 0x55ba2d50b948 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55ba2d50b938 <col:20> 'bool' true
| `-CXXMethodDecl 0x55ba2d56f448 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned char &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned char'
|   |-ParmVarDecl 0x55ba2d56f1e0 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55ba2d56f2b8 <col:35, col:38> col:38 used result 'unsigned char &'
|   |-ParmVarDecl 0x55ba2d56f320 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55ba2d570098 <col:83, line:1083:5>
|     |-DeclStmt 0x55ba2d56f6d0 <line:1071:9, col:12>
|     | `-VarDecl 0x55ba2d56f668 <col:9, col:11> col:11 used x 'unsigned char':'unsigned char'
|     `-IfStmt 0x55ba2d570070 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55ba2d56fd00 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55ba2d56fc28 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55ba2d56fbf0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55ba2d56fba8 <col:14> '<bound member function type>' ->parse_saturating 0x55ba2d56fa88
|       | |   | `-CXXThisExpr 0x55ba2d56fb98 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55ba2d56f740 <col:31> 'const String' lvalue ParmVar 0x55ba2d56f1e0 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55ba2d56f760 <col:36> 'unsigned char':'unsigned char' lvalue Var 0x55ba2d56f668 'x' 'unsigned char':'unsigned char'
|       | |   `-DeclRefExpr 0x55ba2d56f780 <col:39> 'const ArgContext' lvalue ParmVar 0x55ba2d56f320 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55ba2d56fce0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55ba2d56fcc0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55ba2d56fca8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55ba2d56fc90 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55ba2d50b460 <col:17> 'int' lvalue ->status 0x55ba2d509688
|       |     |     `-CXXThisExpr 0x55ba2d50b450 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55ba2d56fc70 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55ba2d56fc40 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55ba2d50b4a0 <col:27> 'int' lvalue ->status 0x55ba2d509688
|       |       |   `-CXXThisExpr 0x55ba2d50b490 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55ba2d56fc58 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55ba2d50b4d0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d508370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55ba2d56fd20 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55ba2d50b5d0 <col:20> 'bool' false
|       `-IfStmt 0x55ba2d570048 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55ba2d56fd60 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55ba2d56fd30 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55ba2d50b600 <col:18> 'int' lvalue ->status 0x55ba2d509688
|         | |   `-CXXThisExpr 0x55ba2d50b5f0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55ba2d56fd48 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55ba2d50b630 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55ba2d508370 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55ba2d56ff80 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55ba2d56fef0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55ba2d50b6b0 <line:1076:13> '<bound member function type>' ->range_error 0x55ba2d509c98
|         | | | `-CXXThisExpr 0x55ba2d50b6a0 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55ba2d56fd80 <col:25> 'const ArgContext' lvalue ParmVar 0x55ba2d56f320 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55ba2d56ff58 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55ba2d56ff28 <col:31, col:50> 'const bool' lvalue Var 0x55ba2d1c0200 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55ba2d56fec8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55ba2d56feb0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55ba2d56fe98 <col:43> 'unsigned char':'unsigned char' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55ba2d56fe78 <col:43> 'unsigned char':'unsigned char' lvalue Var 0x55ba2d56f668 'x' 'unsigned char':'unsigned char'
|         | `-ReturnStmt 0x55ba2d56ff70 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55ba2d50b898 <col:20> 'bool' false
|         `-CompoundStmt 0x55ba2d570028 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55ba2d56fff8 <line:1080:13, col:22> 'unsigned char':'unsigned char' lvalue '='
|           | |-DeclRefExpr 0x55ba2d56ffa0 <col:13> 'unsigned char':'unsigned char' lvalue ParmVar 0x55ba2d56f2b8 'result' 'unsigned char &'
|           | `-ImplicitCastExpr 0x55ba2d56ffe0 <col:22> 'unsigned char':'unsigned char' <LValueToRValue>
|           |   `-DeclRefExpr 0x55ba2d56ffc0 <col:22> 'unsigned char':'unsigned char' lvalue Var 0x55ba2d56f668 'x' 'unsigned char':'unsigned char'
|           `-ReturnStmt 0x55ba2d570018 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55ba2d50b938 <col:20> 'bool' true
|-FieldDecl 0x55ba2d509620 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55ba2d509688 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55ba2d5096d8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55ba2d509990 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55ba2d509718 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55ba2d509798 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55ba2d509810 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55ba2d509890 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55ba2d509c98 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55ba2d509a60 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55ba2d509ad8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55ba2d509b70 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55ba2d50c228 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55ba2d50c228
| `-ParmVarDecl 0x55ba2d50c338 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55ba2d50c4b8 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d50c5c8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55ba2d56be90 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55ba2d56be60 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55ba2d56be30 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2d56be00 <col:7> 'IntArg' lvalue ParmVar 0x55ba2d50c5c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55ba2d509620 'base' 'int'
| | `-ImplicitCastExpr 0x55ba2d56bf88 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ba2d56bf58 <col:7> 'int' xvalue .base 0x55ba2d509620
| |     `-CXXStaticCastExpr 0x55ba2d56bf28 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2d56bef8 <col:7> 'IntArg' lvalue ParmVar 0x55ba2d50c5c8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55ba2d509688 'status' 'int'
| | `-ImplicitCastExpr 0x55ba2d56c058 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55ba2d56c028 <col:7> 'int' xvalue .status 0x55ba2d509688
| |     `-CXXStaticCastExpr 0x55ba2d56bff8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2d56bfc8 <col:7> 'IntArg' lvalue ParmVar 0x55ba2d50c5c8 '' 'IntArg &&'
| `-CompoundStmt 0x55ba2d56c0b0 <col:7>
`-CXXDestructorDecl 0x55ba2d56aff0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55ba2d50f7c8 <../dummy_inc/click/args.hh:1177:1, col:62> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned char'
|-CXXRecordDecl 0x55ba2d50fa28 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55ba2d56af18 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55ba2d56b490 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55ba2d56b470 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55ba2d56b500 <col:19>
|-CXXConstructorDecl 0x55ba2d56b0f8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned char> &)' inline default trivial noexcept-unevaluated 0x55ba2d56b0f8
| `-ParmVarDecl 0x55ba2d56b208 <col:19> col:19 'const DefaultArg<unsigned char> &'
|-CXXConstructorDecl 0x55ba2d56b2a8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned char> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55ba2d56b3b8 <col:19> col:19 used 'DefaultArg<unsigned char> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55ba2d56c0c0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55ba2d56bde0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55ba2d56bdb0 <col:19> 'DefaultArg<unsigned char>' xvalue static_cast<struct DefaultArg<unsigned char> &&> <NoOp>
| |       `-DeclRefExpr 0x55ba2d56bd80 <col:19> 'DefaultArg<unsigned char>' lvalue ParmVar 0x55ba2d56b3b8 '' 'DefaultArg<unsigned char> &&'
| `-CompoundStmt 0x55ba2d56c130 <col:19>
`-CXXDestructorDecl 0x55ba2d56b540 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
