
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630163029f8 prev 0x5630162fa198 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563016302af0 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x563016302b80 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x563016302bf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x563016302cb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x563016302d80 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x563016302ef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x563016302e30 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x563016302fa0 <col:24>
| `-OptimizeNoneAttr 0x563016302ff8 <col:34>
|-CXXMethodDecl 0x563016303040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x5630163032f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x5630163030f0 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563016303168 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x5630163031e8 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x5630163033b0 <line:229:7, col:14> col:7 private
|-FieldDecl 0x5630163033e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x563016303450 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x5630163034d8 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x5630163037f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x563016303590 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x563016303608 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x563016303680 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x563016303700 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x563016303910 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56301630b288 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56301630b288
| `-ParmVarDecl 0x56301630b398 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56301630b438 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56301630b438
| `-ParmVarDecl 0x56301630b548 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x5630163d8050 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630162f5a10 prev 0x5630162f5790 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5630162f5b08 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x5630162f5b98 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x5630162f5bf8 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x5630162f5ce8 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x5630162f5de8 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x5630162f5fb8 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x5630162f5e68 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x5630162f5ee0 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x5630162f6148 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x5630162f6080 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x5630162f61f0 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x5630162f6328 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x5630162f6260 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x5630162f64c8 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x5630162f6408 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x5630162f6668 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x5630162f65a8 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x5630162f6710 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x5630162f6810 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x5630162f68f0 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162f67f0 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x5630162f67d0 <col:26> 'int' 1
| `-EnumConstantDecl 0x5630162f68a0 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x5630162f6908 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162f6880 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x5630162f6860 <col:44> 'int' 2
|-CXXMethodDecl 0x5630162f6a50 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x5630162f6938 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x5630162f69b8 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x5630162f6ba8 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x5630162f6b18 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x5630162f6de8 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x5630162f6c68 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x5630162f6ce0 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x5630162f6e98 <col:20>
| `-OptimizeNoneAttr 0x5630162f6ef0 <col:30>
|-CXXMethodDecl 0x5630162f6ff8 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x5630162f6f30 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x5630162f70a0 <col:20>
| `-OptimizeNoneAttr 0x5630162f70f8 <col:30>
|-CXXMethodDecl 0x5630162f7148 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x5630162f7210 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x5630162f7328 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x5630162f73b0 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x5630162f7438 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x5630162f74c0 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x5630162f7548 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x5630162f75d8 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x5630162f7698 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x5630162f7720 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x5630162f77a8 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x5630162f7830 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x5630162f78b8 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x5630162f7940 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x5630162f79d0 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x5630162f7a90 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x5630162f7b20 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x5630162f7c70 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x5630162f7bd8 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x5630162f7e00 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x5630162f7d30 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x5630162f80b0 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x5630162f7eb8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x5630162f7f38 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x5630162f7fb8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x5630162f8168 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x5630162f8270 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5630162f8500 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162f8250 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x5630162f8230 <col:33> 'int' 0
| |-EnumConstantDecl 0x5630162f8300 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5630162f8518 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162f82e0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x5630162f82c0 <col:32> 'int' 20
| |-EnumConstantDecl 0x5630162f8390 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5630162f8530 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162f8370 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x5630162f8350 <col:38> 'int' 90
| |-EnumConstantDecl 0x5630162f8420 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x5630162f8548 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162f8400 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x5630162f83e0 <col:35> 'int' 100
| `-EnumConstantDecl 0x5630162f84b0 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x5630162f8560 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162f8490 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x5630162f8470 <col:32> 'int' 2000
|-CXXMethodDecl 0x5630162f85a0 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x5630162f89e0 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5630162f8850 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x5630162f88c8 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5630162f8ab0 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x5630162f8c30 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x5630162f8b60 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5630162f8e38 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5630162f8ce8 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x5630162f8d60 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5630162f8f38 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x5630162f8fd8 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x5630162f90a0 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x5630162f9130 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x5630162f9360 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162f9110 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x5630162f90f0 <col:36> 'int' EnumConstant 0x5630162f90a0 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x5630162f9180 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5630162f91d0 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5630162f9220 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5630162f9270 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x5630162f92c0 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x5630162f9310 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x5630162f9448 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x5630162f9388 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x5630162f9510 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x5630162f95d0 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x5630162f9690 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x5630162f9750 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x5630162f9868 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x5630162f9930 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x5630162f9ab0 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x5630162f99e0 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x5630162f9bd8 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x5630162f9dd8 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x5630162f9c88 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x5630162f9d08 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x563016307728 <col:54, line:127:5>
|   |-ParenExpr 0x5630163075d8 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x5630163075a8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x563016307298 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x563016307270 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x563016307258 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x563016307240 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x563016307210 <col:31> 'Router *' lvalue ->_router 0x5630163050f0
|   |   |         `-CXXThisExpr 0x563016307200 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5630163072f8 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630163072d8 <col:48> 'int' 0
|   |   `-CallExpr 0x563016307508 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x5630163074f0 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630163074d0 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x563016307548 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563016307368 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x563016307560 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x563016307388 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x563016307578 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630163073c0 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x563016307590 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630163074b8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630163074a0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x563016307458 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x563016307670 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x563016307608 <col:9> 'Router *' lvalue ->_router 0x5630163050f0
|   | | `-CXXThisExpr 0x5630163075f8 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x563016307658 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x563016307638 <col:19> 'Router *' lvalue ParmVar 0x5630162f9c88 'r' 'Router *'
|   `-BinaryOperator 0x563016307708 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x5630163076a0 <col:9> 'int' lvalue ->_eindex 0x563016305158
|     | `-CXXThisExpr 0x563016307690 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x5630163076f0 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x5630163076d0 <col:19> 'int' lvalue ParmVar 0x5630162f9d08 'eindex' 'int'
|-CXXMethodDecl 0x5630162f9f60 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x5630162f9e98 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x5630162fa030 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x5630162fa0f8 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x5630162fa198 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x5630162fa3e8 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x5630162fa260 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x5630162fa2e0 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x5630162fa498 <col:20>
| `-OptimizeNoneAttr 0x5630162fa4f0 <col:30>
|-CXXMethodDecl 0x5630162fa5f8 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5630162fa530 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x5630162fa6a0 <col:20>
| `-OptimizeNoneAttr 0x5630162fa6f8 <col:30>
|-CXXMethodDecl 0x5630162fa7c8 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x5630162fa738 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x5630162fa870 <col:20>
| `-OptimizeNoneAttr 0x5630162fa8c8 <col:30>
|-CXXMethodDecl 0x5630162faa58 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x5630162fa900 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x5630162fa980 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x5630162fabe8 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5630162fab20 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5630162fad38 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5630162faca8 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x5630162fae88 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x5630162fadf8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5630162fafd8 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x5630162faf48 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x5630162fb298 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x5630162fb090 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x5630162fb110 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x5630162fb1b8 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x5630162fb370 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x5630162fb430 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x5630162fb700 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x5630162fb5b0 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x5630162fb628 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x5630162fb828 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x5630162fba00 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x5630162fb8e0 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x5630162fb960 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x5630162fbbe8 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x5630162fbac8 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x5630162fbb48 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x5630162fbf58 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5630162fbca8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5630162fbd20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5630162fbda0 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563016306d10 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563016306cf0 <col:106> 'int' 0
| `-ParmVarDecl 0x5630162fbe18 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563016306d48 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563016306d28 <col:126> 'int' 0
|-CXXMethodDecl 0x5630162fc2f8 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5630162fc028 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5630162fc0c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5630162fc140 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x5630162fc1b8 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563016306d80 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563016306d60 <col:114> 'int' 0
|-CXXMethodDecl 0x5630162fc688 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5630162fc3d0 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x5630162fc448 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x5630162fc4c8 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x563016306d98 <col:96> 'int' 0
| `-ParmVarDecl 0x5630162fc540 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563016306dd8 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563016306db8 <col:116> 'int' 0
|-CXXMethodDecl 0x5630162fca08 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x5630162fc758 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5630162fc7d0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162fc850 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563016306e10 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563016306df0 <col:109> 'int' 0
| `-ParmVarDecl 0x5630162fc8c8 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563016306e48 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563016306e28 <col:129> 'int' 0
|-CXXMethodDecl 0x5630162fcd88 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5630162fcad8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x5630162fcb50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162fcbd0 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x5630162fcc48 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563016306e80 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563016306e60 <col:117> 'int' 0
|-CXXMethodDecl 0x5630162fd118 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x5630162fce60 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162fced8 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162fcf58 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x563016306e98 <col:99> 'int' 0
| `-ParmVarDecl 0x5630162fcfd0 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x563016306ed8 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x563016306eb8 <col:119> 'int' 0
|-CXXMethodDecl 0x5630162fd538 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x5630162fd1e8 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5630162fd268 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5630162fd2e0 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162fd360 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x563016306f10 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x563016306ef0 <col:108> 'int' 0
| `-ParmVarDecl 0x5630162fd3e0 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x563016306f48 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x563016306f28 <col:141> 'int' 0
|-CXXMethodDecl 0x5630162fd958 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5630162fd610 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x5630162fd690 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x5630162fd708 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162fd788 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x5630162fd808 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563016306f60 <col:121> 'int' 0
|-CXXMethodDecl 0x5630162fdd88 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x5630162fda38 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x5630162fdab8 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x5630162fdb30 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162fdbb0 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x563016306f80 <col:98> 'int' 0
| `-ParmVarDecl 0x5630162fdc30 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x563016306fa0 <col:123> 'int' 0
|-CXXMethodDecl 0x5630162fe050 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x5630162fde60 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x5630162fdee0 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x5630162fdf60 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x563016306fc0 <col:80> 'int' 0
|-EnumDecl 0x5630162fe108 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x5630162fe210 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5630162fe4a0 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162fe1f0 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x5630162fe1d0 <col:42> 'int' 1
| |-EnumConstantDecl 0x5630162fe2a0 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5630162fe4b8 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162fe280 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x5630162fe260 <col:40> 'int' 2
| |-EnumConstantDecl 0x5630162fe330 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5630162fe4d0 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162fe310 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x5630162fe2f0 <col:44> 'int' 4
| |-EnumConstantDecl 0x5630162fe3c0 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x5630162fe4e8 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162fe3a0 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x5630162fe380 <col:36> 'int' 7
| `-EnumConstantDecl 0x5630162fe450 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x5630162fe500 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162fe430 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x5630162fe410 <col:34> 'int' 6
|-CXXMethodDecl 0x5630162fe7b8 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x5630162fe528 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x5630162fe5c8 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x5630162fe648 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x5630162fe6c0 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x563016307078 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x563016307060 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x563016307048 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x563016307028 <col:98, col:105> 'String' (CXXTemporary 0x563016307028)
|           `-CXXTemporaryObjectExpr 0x563016306ff0 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x5630162fea58 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x5630162fe888 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5630162fe900 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x5630162fe978 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x563016307128 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x563016307110 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5630163070f8 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x5630163070d8 <col:94, col:101> 'String' (CXXTemporary 0x5630163070d8)
| |         `-CXXTemporaryObjectExpr 0x5630163070a0 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x563016307910 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x563016307888 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x563016307858 <col:9> '<bound member function type>' ->add_task_handlers 0x5630162fe7b8
|     | `-CXXThisExpr 0x563016307848 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x5630163078c8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5630163077c8 <col:27> 'Task *' lvalue ParmVar 0x5630162fe888 'task' 'Task *'
|     |-ImplicitCastExpr 0x5630163078e0 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x5630163077e8 <col:33> 'NotifierSignal *' lvalue ParmVar 0x5630162fe900 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x5630163078f8 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x563016307808 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5630162fe450 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563016307828 <col:62> 'const String' lvalue ParmVar 0x5630162fe978 'prefix' 'const String &'
|-CXXMethodDecl 0x5630162fec68 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x5630162feb20 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x5630162feb98 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x5630163071d8 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x5630163071c0 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x5630163071a8 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x563016307188 <col:70, col:77> 'String' (CXXTemporary 0x563016307188)
| |         `-CXXTemporaryObjectExpr 0x563016307150 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x563016307ae8 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x563016307a60 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x563016307a30 <col:9> '<bound member function type>' ->add_task_handlers 0x5630162fe7b8
|     | `-CXXThisExpr 0x563016307a20 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x563016307aa0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x5630163079a0 <col:27> 'Task *' lvalue ParmVar 0x5630162feb20 'task' 'Task *'
|     |-ImplicitCastExpr 0x563016307ab8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x5630163079c0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x563016307ad0 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x5630163079e0 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x5630162fe450 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x563016307a00 <col:57> 'const String' lvalue ParmVar 0x5630162feb98 'prefix' 'const String &'
|-CXXMethodDecl 0x5630162fef48 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x5630162fed30 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162fedb0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162fee28 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x5630162ff1f8 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x5630162ff018 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162ff098 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162ff118 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x5630162ff4e8 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x5630162ff2c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162ff348 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162ff3c0 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x5630162ff798 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x5630162ff5b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162ff638 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162ff6b8 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x5630162ffa48 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x5630162ff868 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162ff8e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162ff968 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x5630162ffcf8 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x5630162ffb18 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162ffb98 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162ffc10 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x5630162fffa8 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x5630162ffdc8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630162ffe48 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630162ffec8 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x5630163002b8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x5630163000d0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563016300150 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630163001d0 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x563016300598 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x563016300388 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563016300408 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630163004b0 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x563016300878 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x563016300668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630163006e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563016300790 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x563016300ae0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x563016300948 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x5630163009c8 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563016300a40 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x563016300d88 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x563016300bb0 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x563016300c30 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x563016300ca8 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x563016301038 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x563016300e58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563016300ed8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563016300f58 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x5630163012e8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x563016301108 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563016301188 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563016301200 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x563016301598 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x5630163013b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x563016301438 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x5630163014b0 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x563016301868 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x563016301668 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630163016e8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x563016301788 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x563016301b98 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x563016301938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x5630163019b8 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x563016301a30 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x563016301aa8 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5630163071f0 <col:93> 'bool' false
|-CXXMethodDecl 0x563016301d80 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563016301c68 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x563016301ce8 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x563016301f58 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x563016301e40 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x563016301ec0 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x563016302238 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563016302018 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x563016302090 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x563016302110 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x563016302188 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x563016302528 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x563016302308 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x563016302380 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x563016302400 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x563016302478 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x563016302760 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x563016302600 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x563016302680 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x563016302948 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x563016302828 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x5630163028a8 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x5630163029f8 prev 0x5630162fa198 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x563016302af0 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x563016302b80 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x563016302bf8 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x563016302cb8 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x563016302d80 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x563016302ef8 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x563016302e30 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x563016302fa0 <col:24>
| | `-OptimizeNoneAttr 0x563016302ff8 <col:34>
| |-CXXMethodDecl 0x563016303040 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x5630163032f8 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x5630163030f0 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563016303168 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x5630163031e8 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x5630163033b0 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x5630163033e8 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x563016303450 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x5630163034d8 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x5630163037f8 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x563016303590 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x563016303608 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x563016303680 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x563016303700 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x563016303910 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56301630b288 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56301630b288
| | `-ParmVarDecl 0x56301630b398 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56301630b438 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56301630b438
| | `-ParmVarDecl 0x56301630b548 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x5630163d8050 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x563016303988 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x563016303a28 <col:38> "" ""
|-CXXMethodDecl 0x563016303ab8 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x563016303b58 <col:44> "" ""
|-AccessSpecDecl 0x563016303bc8 <line:260:3, col:10> col:3 private
|-EnumDecl 0x563016303bf0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x563016303cf0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x563016303d40 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563016303cd0 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x563016303cb0 <col:27> 'int' 4
|-FieldDecl 0x563016303df8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x563016303fa8 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x563016304060 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x5630163050f0 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x563016305158 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x5630163052a8 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x5630163051e8 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x563016305458 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x563016305368 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x563016305638 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x563016305518 <col:20> col:23 'int'
| `-ParmVarDecl 0x563016305598 <col:25> col:28 'int'
|-CXXMethodDecl 0x5630163058e0 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x563016305700 <col:23> col:26 'int'
| |-ParmVarDecl 0x563016305780 <col:28> col:31 'int'
| `-ParmVarDecl 0x5630163057f8 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x563016305998 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x563016305a60 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x563016305ab0 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x563016305b00 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x563016305ce0 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x563016305b90 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x563016305c08 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x563016305f88 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x563016305da8 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x563016305e28 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x563016305ea0 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x5630163061a8 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x563016306058 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x5630163060d8 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x5630163064e0 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x563016306268 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x5630163062e8 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x563016306360 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x5630163063e0 <col:57> col:60 'int'
|-CXXMethodDecl 0x5630163066c8 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x5630163065b0 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x563016306630 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x563016306818 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x563016306788 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x563016306b98 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x5630163068d8 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x563016306958 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x5630163069d0 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x563016306a50 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x563016306cb0 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Truncate
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   unsigned int _nbytes
       112 |   _Bool _extra_anno
           | [sizeof=120, dsize=113, align=8,
           |  nvsize=113, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56301630e3f8 <../elements/standard/truncate.hh:20:1, line:39:1> line:20:7 class Truncate definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x56301630e558 <col:1, col:7> col:7 implicit referenced class Truncate
|-AccessSpecDecl 0x56301630e5e8 <col:35, col:41> col:35 public
|-CXXConstructorDecl 0x56301630e670 <line:22:5, col:14> col:5 Truncate 'void ()'
|-CXXMethodDecl 0x56301630e770 <line:24:5, col:57> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x5630162f7148 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56301630f748 <col:36, col:57>
|   `-ReturnStmt 0x56301630f738 <col:38, col:45>
|     `-ImplicitCastExpr 0x56301630f720 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56301630f700 <col:45> 'const char [9]' lvalue "Truncate"
|-CXXMethodDecl 0x56301630e838 <line:25:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x5630162f7210 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56301630f7a8 <col:36, col:56>
|   `-ReturnStmt 0x56301630f798 <col:38, col:45>
|     `-ImplicitCastExpr 0x56301630f780 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56301630f760 <col:45> 'const char []' lvalue Var 0x5630162f74c0 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56301630eb10 <line:27:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x5630162f89e0 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56301630e9c0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x56301630ea38 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x56301630ebe0 <line:28:5, col:54> col:10 can_live_reconfigure 'bool () const'
| |-Overrides: [ 0x5630162fb430 Element::can_live_reconfigure 'bool () const' ]
| `-CompoundStmt 0x56301630f7e0 <col:39, col:54>
|   `-ReturnStmt 0x56301630f7d0 <col:41, col:48>
|     `-CXXBoolLiteralExpr 0x56301630f7c0 <col:48> 'bool' true
|-CXXMethodDecl 0x56301630ed20 <line:30:5, col:35> col:13 simple_action 'Packet *(Packet *)'
| |-Overrides: [ 0x5630162f6328 Element::simple_action 'Packet *(Packet *)' ]
| `-ParmVarDecl 0x56301630ec90 <col:27, col:34> col:35 'Packet *'
|-CXXMethodDecl 0x56301630ede8 <line:32:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x5630162f8ab0 Element::add_handlers 'void ()' ]
|-AccessSpecDecl 0x56301630ee88 <line:34:3, col:10> col:3 private
|-FieldDecl 0x56301630eec8 <line:36:5, col:14> col:14 _nbytes 'unsigned int'
|-FieldDecl 0x56301630ef28 <line:37:5, col:10> col:10 _extra_anno 'bool'
|-CXXConstructorDecl 0x56301630efa8 <line:20:7> col:7 implicit Truncate 'void (const Truncate &)' inline default_delete noexcept-unevaluated 0x56301630efa8
| `-ParmVarDecl 0x56301630f0b8 <col:7> col:7 'const Truncate &'
|-CXXConstructorDecl 0x56301630f158 <col:7> col:7 implicit Truncate 'void (Truncate &&)' inline default_delete noexcept-unevaluated 0x56301630f158
| `-ParmVarDecl 0x56301630f268 <col:7> col:7 'Truncate &&'
|-CXXMethodDecl 0x56301630f308 <col:7> col:7 implicit operator= 'Truncate &(const Truncate &)' inline default_delete noexcept-unevaluated 0x56301630f308
| `-ParmVarDecl 0x56301630f418 <col:7> col:7 'const Truncate &'
|-CXXMethodDecl 0x56301630f488 <col:7> col:7 implicit operator= 'Truncate &(Truncate &&)' inline default_delete noexcept-unevaluated 0x56301630f488
| `-ParmVarDecl 0x56301630f598 <col:7> col:7 'Truncate &&'
`-CXXDestructorDecl 0x56301630f620 <col:7> col:7 implicit ~Truncate 'void ()' inline default noexcept-unevaluated 0x56301630f620
  `-Overrides: [ 0x5630162f5ce8 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.Truncate = type <{ %class.Element.base, i32, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.Truncate.base = type <{ %class.Element.base, i32, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630160c98b0 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x5630160c99c8 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x5630160c9a68 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x5630160c9ac8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x5630160c9b28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x5630160c9bd8 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630160c9ee0 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5630160c9ff8 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x5630160ca0a0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x5630160ca108 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x5630160ca198 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x5630160d0230 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5630160d0668 <col:12>
|-CXXConstructorDecl 0x5630160d0338 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5630160d0448 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5630160ca0a0 'data' 'const char *'
| | `-ImplicitCastExpr 0x5630160d2bf0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x5630160d2bc0 <col:12> 'const char *const' lvalue .data 0x5630160ca0a0
| |     `-DeclRefExpr 0x5630160d2ba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160d0448 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5630160ca108 'length' 'int'
| | `-ImplicitCastExpr 0x5630160d2c80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x5630160d2c50 <col:12> 'const int' lvalue .length 0x5630160ca108
| |     `-DeclRefExpr 0x5630160d2c30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160d0448 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x5630160ca198 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x5630160d2d10 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x5630160d2ce0 <col:12> 'String::memo_t *const' lvalue .memo 0x5630160ca198
| |     `-DeclRefExpr 0x5630160d2cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160d0448 '' 'const String::rep_t &'
| `-CompoundStmt 0x5630160d2d68 <col:12>
|-CXXConstructorDecl 0x5630160d04e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5630160d04e8
| `-ParmVarDecl 0x5630160d05f8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x5630160d5b50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x5630160e1568 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x5630160e1678 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x5630160e1b90 <col:12>
|   |-BinaryOperator 0x5630160e19a8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5630160e1960 <col:12> 'const char *' lvalue ->data 0x5630160ca0a0
|   | | `-CXXThisExpr 0x5630160e1950 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5630160e1990 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x5630160e1920 <col:12> 'const char *const' lvalue .data 0x5630160ca0a0
|   |     `-DeclRefExpr 0x5630160e1900 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160e1678 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5630160e1a70 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x5630160e1a28 <col:12> 'int' lvalue ->length 0x5630160ca108
|   | | `-CXXThisExpr 0x5630160e1a18 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5630160e1a58 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x5630160e19e8 <col:12> 'const int' lvalue .length 0x5630160ca108
|   |     `-DeclRefExpr 0x5630160e19c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160e1678 '' 'const String::rep_t &'
|   |-BinaryOperator 0x5630160e1b38 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x5630160e1af0 <col:12> 'String::memo_t *' lvalue ->memo 0x5630160ca198
|   | | `-CXXThisExpr 0x5630160e1ae0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x5630160e1b20 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x5630160e1ab0 <col:12> 'String::memo_t *const' lvalue .memo 0x5630160ca198
|   |     `-DeclRefExpr 0x5630160e1a90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160e1678 '' 'const String::rep_t &'
|   `-ReturnStmt 0x5630160e1b80 <col:12>
|     `-UnaryOperator 0x5630160e1b68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5630160e1b58 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x5630160e16e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5630160e16e8
  `-ParmVarDecl 0x5630160e17f8 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630160c0e20 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5630160c0f38 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x5630160c0fc8 <col:16, col:22> col:16 public
|-TypedefDecl 0x5630160c1008 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x563015d94fd0 'const char *'
|   `-QualType 0x563015d94521 'const char' const
|     `-BuiltinType 0x563015d94520 'char'
|-TypedefDecl 0x5630160c1090 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x5630160c1060 'String::const_iterator' sugar
|   |-Typedef 0x5630160c1008 'const_iterator'
|   `-PointerType 0x563015d94fd0 'const char *'
|     `-QualType 0x563015d94521 'const char' const
|       `-BuiltinType 0x563015d94520 'char'
|-TypedefDecl 0x5630160c1200 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x5630160c1170 'int (String::*)() const'
|   |-RecordType 0x5630160c0eb0 'String'
|   | `-CXXRecord 0x5630160c0e20 'String'
|   `-ParenType 0x5630160c1110 'int () const' sugar
|     `-FunctionProtoType 0x563016094ca0 'int () const' const cdecl
|       `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x5630160c1268 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x563015ee98a0 'int64_t' sugar
|   |-Typedef 0x563015dfd390 'int64_t'
|   `-TypedefType 0x563015dd6630 '__int64_t' sugar
|     |-Typedef 0x563015dd6208 '__int64_t'
|     `-BuiltinType 0x563015d945a0 'long'
|-TypedefDecl 0x5630160c12d0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x563015ee97c0 'uint64_t' sugar
|   |-Typedef 0x563015dfd530 'uint64_t'
|   `-TypedefType 0x563015dd66c0 '__uint64_t' sugar
|     |-Typedef 0x563015dd6278 '__uint64_t'
|     `-BuiltinType 0x563015d94640 'unsigned long'
|-TypedefDecl 0x5630160c1360 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x5630160c1330 'String::intmax_t' sugar
|   |-Typedef 0x5630160c1268 'intmax_t'
|   `-TypedefType 0x563015ee98a0 'int64_t' sugar
|     |-Typedef 0x563015dfd390 'int64_t'
|     `-TypedefType 0x563015dd6630 '__int64_t' sugar
|       |-Typedef 0x563015dd6208 '__int64_t'
|       `-BuiltinType 0x563015d945a0 'long'
|-TypedefDecl 0x5630160c13f0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x5630160c13c0 'String::uintmax_t' sugar
|   |-Typedef 0x5630160c12d0 'uintmax_t'
|   `-TypedefType 0x563015ee97c0 'uint64_t' sugar
|     |-Typedef 0x563015dfd530 'uint64_t'
|     `-TypedefType 0x563015dd66c0 '__uint64_t' sugar
|       |-Typedef 0x563015dd6278 '__uint64_t'
|       `-BuiltinType 0x563015d94640 'unsigned long'
|-CXXConstructorDecl 0x5630160c14b0 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x5630160c1658 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x5630160c1598 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x5630160c1808 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x5630160c1748 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x5630160c1960 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x5630160c18d0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x5630160c1b78 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x5630160c1a28 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x5630160c1aa8 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x5630160c1d98 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x5630160c1c48 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x5630160c1cc8 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x5630160c1fb8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5630160c1e68 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x5630160c1ee8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x5630160c21d8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x5630160c2088 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x5630160c2108 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x5630160c2368 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x5630160c22a0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x5630160c24e8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x5630160c2428 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x5630160c2678 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x5630160c25b0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x5630160c27d0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x5630160c2740 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x5630160c2928 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x5630160c2898 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x5630160c2a80 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x5630160c29f0 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x5630160c2c08 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x5630160c2b48 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x5630160c2d98 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x5630160c2cd0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x5630160c2f28 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x5630160c2e60 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x5630160c30b8 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x5630160c2ff0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x5630160c31b0 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x5630160c32d8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x5630160c3458 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x5630160c3390 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x5630160c35a8 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x5630160c3518 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x5630160c3660 <col:63> "" ""
|-CXXMethodDecl 0x5630160c37a8 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x5630160c36e8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x5630160c39b8 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x5630160c3868 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x5630160c38e8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x5630160c3bd8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x5630160c3a80 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x5630160c3b00 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x5630160c3eb8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x5630160c3c98 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x5630160c3d18 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x5630160cfd00 <col:55> 'int' 10
| `-ParmVarDecl 0x5630160c3d90 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5630160cfd20 <col:76> 'bool' true
|-CXXMethodDecl 0x5630160c4198 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x5630160c3f80 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x5630160c4000 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x5630160cfd30 <col:56> 'int' 10
| `-ParmVarDecl 0x5630160c4078 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5630160cfd50 <col:77> 'bool' true
|-CXXMethodDecl 0x5630160c42a0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x5630160c4368 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x5630160c4430 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x5630160c44d0 <col:20>
| `-OptimizeNoneAttr 0x5630160c4528 <col:30>
|-CXXConversionDecl 0x5630160c4618 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x5630160c46e8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x5630160c47a8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x5630160c4898 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5630160c4958 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x5630160c4ad8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x5630160c4a10 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x5630160c4c28 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x5630160c4b98 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x5630160c4d18 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x5630160c4dd8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x5630160c5028 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x5630160c4e90 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x5630160c4f10 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x5630160c5288 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x5630160c50f0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x5630160c5170 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x5630160c5358 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x5630160c5568 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x5630160c5410 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x5630160c5490 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x5630160c5788 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x5630160c5630 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x5630160c56b0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x5630160c5918 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x5630160c5850 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x5630160c5a08 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x5630160c5b78 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x5630160c5ab8 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5630160c5d88 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x5630160c5c38 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5630160c5cb8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5630160c5fa0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x5630160c5e48 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x5630160c5ec0 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x5630160c6130 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x5630160c6060 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5630160c6350 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x5630160c61f0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x5630160c6270 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5630160c64a0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x5630160c6410 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x5630160c6678 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x5630160c6560 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5630160c65e0 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x5630160c67c8 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x5630160c6738 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x5630160c69e0 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x5630160c6880 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x5630160c6900 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x5630160cfd60 <col:39> 'int' 0
|-CXXMethodDecl 0x5630160c6c00 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x5630160c6aa0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x5630160c6b20 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x5630160cfd80 <col:48> 'int' 0
|-CXXMethodDecl 0x5630160c6de0 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x5630160c6cc0 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x5630160c6d40 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x5630160cfda0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x5630160c6eb0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x5630160c6f70 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x5630160c7030 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x5630160c70f0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x5630160c71b0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x5630160c7358 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x5630160c7260 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x5630160c74d8 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x5630160c7410 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x5630160c76b0 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x5630160c7598 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x5630160c7828 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x5630160c7768 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x5630160c7970 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x5630160c78e0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x5630160c7ac0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x5630160c7a30 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x5630160c7c98 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x5630160c7b80 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x5630160c7c00 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x5630160c7e78 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x5630160c7d60 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x5630160c7de0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x5630160c7fc8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x5630160c7f38 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x5630160c81d8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x5630160c8088 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x5630160c8108 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x5630160c8338 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x5630160c82a0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x5630160c8490 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x5630160c83f8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x5630160c8538 <col:57> "" ""
|-CXXMethodDecl 0x5630160c8648 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x5630160c85b8 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x5630160c8798 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x5630160c8708 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x5630160c8918 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x5630160c8850 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x5630160c89e0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x5630160c8aa0 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x5630160c8b60 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x5630160c8c00 <col:49> "" ""
|-CXXMethodDecl 0x5630160c8c90 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x5630160c8d50 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x5630160c8e40 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x5630160c8f08 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x5630160c8fc8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x5630160c9088 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x5630160c9180 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x5630160c9248 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x5630160c9310 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x5630160c94e8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x5630160c93c8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x5630160c9448 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x5630160c9710 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x5630160c95b0 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x5630160c9630 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x5630160c9820 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x5630160c9888 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x5630160c98b0 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5630160c99c8 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x5630160c9a68 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x5630160c9ac8 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x5630160c9b28 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x5630160c9bd8 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x5630160c9c40 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x5630160c9e78 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x5630160c9ec8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630160c9e58 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x5630160c9d68 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x5630160c9d10 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x5630160c9d50 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x5630160c9d30 <col:32> 'int' 8
|-CXXRecordDecl 0x5630160c9ee0 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5630160c9ff8 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x5630160ca0a0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x5630160ca108 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x5630160ca198 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x5630160d0230 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5630160d0668 <col:12>
| |-CXXConstructorDecl 0x5630160d0338 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5630160d0448 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5630160ca0a0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x5630160d2bf0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x5630160d2bc0 <col:12> 'const char *const' lvalue .data 0x5630160ca0a0
| | |     `-DeclRefExpr 0x5630160d2ba0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160d0448 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5630160ca108 'length' 'int'
| | | `-ImplicitCastExpr 0x5630160d2c80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x5630160d2c50 <col:12> 'const int' lvalue .length 0x5630160ca108
| | |     `-DeclRefExpr 0x5630160d2c30 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160d0448 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x5630160ca198 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x5630160d2d10 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x5630160d2ce0 <col:12> 'String::memo_t *const' lvalue .memo 0x5630160ca198
| | |     `-DeclRefExpr 0x5630160d2cc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160d0448 '' 'const String::rep_t &'
| | `-CompoundStmt 0x5630160d2d68 <col:12>
| |-CXXConstructorDecl 0x5630160d04e8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5630160d04e8
| | `-ParmVarDecl 0x5630160d05f8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x5630160d5b50 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x5630160e1568 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5630160e1678 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x5630160e1b90 <col:12>
| |   |-BinaryOperator 0x5630160e19a8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x5630160e1960 <col:12> 'const char *' lvalue ->data 0x5630160ca0a0
| |   | | `-CXXThisExpr 0x5630160e1950 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5630160e1990 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x5630160e1920 <col:12> 'const char *const' lvalue .data 0x5630160ca0a0
| |   |     `-DeclRefExpr 0x5630160e1900 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160e1678 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5630160e1a70 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x5630160e1a28 <col:12> 'int' lvalue ->length 0x5630160ca108
| |   | | `-CXXThisExpr 0x5630160e1a18 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5630160e1a58 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x5630160e19e8 <col:12> 'const int' lvalue .length 0x5630160ca108
| |   |     `-DeclRefExpr 0x5630160e19c8 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160e1678 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x5630160e1b38 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x5630160e1af0 <col:12> 'String::memo_t *' lvalue ->memo 0x5630160ca198
| |   | | `-CXXThisExpr 0x5630160e1ae0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x5630160e1b20 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x5630160e1ab0 <col:12> 'String::memo_t *const' lvalue .memo 0x5630160ca198
| |   |     `-DeclRefExpr 0x5630160e1a90 <col:12> 'const String::rep_t' lvalue ParmVar 0x5630160e1678 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x5630160e1b80 <col:12>
| |     `-UnaryOperator 0x5630160e1b68 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5630160e1b58 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x5630160e16e8 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x5630160e16e8
|   `-ParmVarDecl 0x5630160e17f8 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x5630160ca210 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x5630160ca458 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x5630160ca278 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x5630160ca2f8 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x5630160ca370 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x5630160d01f0 <col:79, line:261:5>
|   |-BinaryOperator 0x5630160cfe68 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x5630160cfe00 <col:2, col:5> 'const char *' lvalue .data 0x5630160ca0a0
|   | | `-MemberExpr 0x5630160cfdd0 <col:2> 'String::rep_t' lvalue ->_r 0x5630160ca210
|   | |   `-CXXThisExpr 0x5630160cfdc0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5630160cfe50 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x5630160cfe30 <col:12> 'const char *' lvalue ParmVar 0x5630160ca278 'data' 'const char *'
|   |-BinaryOperator 0x5630160cff30 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x5630160cfec8 <col:2, col:5> 'int' lvalue .length 0x5630160ca108
|   | | `-MemberExpr 0x5630160cfe98 <col:2> 'String::rep_t' lvalue ->_r 0x5630160ca210
|   | |   `-CXXThisExpr 0x5630160cfe88 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x5630160cff18 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x5630160cfef8 <col:14> 'int' lvalue ParmVar 0x5630160ca2f8 'length' 'int'
|   `-IfStmt 0x5630160d01d8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x5630160d0050 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5630160d0038 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x5630160d0018 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x5630160cfff8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x5630160cff90 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x5630160ca198
|     |       | `-MemberExpr 0x5630160cff60 <col:7> 'String::rep_t' lvalue ->_r 0x5630160ca210
|     |       |   `-CXXThisExpr 0x5630160cff50 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x5630160cffe0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x5630160cffc0 <col:17> 'String::memo_t *' lvalue ParmVar 0x5630160ca370 'memo' 'String::memo_t *'
|     `-CallExpr 0x5630160d01b0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x5630160d0198 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x5630160d00a0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x5630160b8e88 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x5630160d0108 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5630160c9a68
|         `-ImplicitCastExpr 0x5630160d00f0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x5630160d00d0 <col:27> 'String::memo_t *' lvalue ParmVar 0x5630160ca370 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x5630160ca708 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x5630160ca528 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x5630160ca5a8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x5630160ca620 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x5630160ca210 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x5630160d0678 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x5630160d0808 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x5630160d0770 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x5630160d06e0 <col:2> '<bound member function type>' ->assign_memo 0x5630160ca458
|     | `-ImplicitCastExpr 0x5630160d07a8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x5630160d06d0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x5630160d07c0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x5630160d0710 <col:14> 'const char *' lvalue ParmVar 0x5630160ca528 'data' 'const char *'
|     |-ImplicitCastExpr 0x5630160d07d8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x5630160d0730 <col:20> 'int' lvalue ParmVar 0x5630160ca5a8 'length' 'int'
|     `-ImplicitCastExpr 0x5630160d07f0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x5630160d0750 <col:28> 'String::memo_t *' lvalue ParmVar 0x5630160ca620 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x5630160ca898 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x5630160ca7d8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x5630160d0a60 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x5630160d09e0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x5630160d0830 <col:2> '<bound member function type>' ->assign_memo 0x5630160ca458
|     | `-CXXThisExpr 0x5630160d0820 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x5630160d0a18 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x5630160d08b0 <col:14, col:19> 'const char *' lvalue .data 0x5630160ca0a0
|     |   `-MemberExpr 0x5630160d0880 <col:14, col:16> 'String::rep_t' lvalue ._r 0x5630160ca210
|     |     `-DeclRefExpr 0x5630160d0860 <col:14> 'const String' lvalue ParmVar 0x5630160ca7d8 'x' 'const String &'
|     |-ImplicitCastExpr 0x5630160d0a30 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x5630160d0930 <col:25, col:30> 'int' lvalue .length 0x5630160ca108
|     |   `-MemberExpr 0x5630160d0900 <col:25, col:27> 'String::rep_t' lvalue ._r 0x5630160ca210
|     |     `-DeclRefExpr 0x5630160d08e0 <col:25> 'const String' lvalue ParmVar 0x5630160ca7d8 'x' 'const String &'
|     `-ImplicitCastExpr 0x5630160d0a48 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x5630160d09b0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x5630160ca198
|         `-MemberExpr 0x5630160d0980 <col:38, col:40> 'String::rep_t' lvalue ._r 0x5630160ca210
|           `-DeclRefExpr 0x5630160d0960 <col:38> 'const String' lvalue ParmVar 0x5630160ca7d8 'x' 'const String &'
|-CXXMethodDecl 0x5630160ca960 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x5630160d1420 <col:31, line:278:5>
|   `-IfStmt 0x5630160d1408 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x5630160d0b00 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x5630160d0ae8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x5630160d0ab8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5630160ca198
|     |     `-MemberExpr 0x5630160d0a88 <col:6> 'String::rep_t' lvalue ->_r 0x5630160ca210
|     |       `-CXXThisExpr 0x5630160d0a78 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x5630160d13e0 <col:15, line:277:2>
|       |-ParenExpr 0x5630160d0fb0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x5630160d0f80 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x5630160d0c10 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x5630160d0bf8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x5630160d0be0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x5630160d0ba0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5630160c9a68
|       |   |       `-ImplicitCastExpr 0x5630160d0b88 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x5630160d0b58 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x5630160ca198
|       |   |           `-MemberExpr 0x5630160d0b28 <col:27> 'String::rep_t' lvalue ->_r 0x5630160ca210
|       |   |             `-CXXThisExpr 0x5630160d0b18 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x5630160d0c70 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x5630160d0c50 <col:54> 'int' 0
|       |   `-CallExpr 0x5630160d0ee0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x5630160d0ec8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x5630160d0e48 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x5630160d0f20 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5630160d0d58 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x5630160d0f38 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x5630160d0d88 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x5630160d0f50 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x5630160d0dc0 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x5630160d0f68 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x5630160d0e30 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x5630160d0e18 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x5630160d0de0 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x5630160d1300 <line:274:6, line:275:22>
|       | |-CallExpr 0x5630160d11c0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x5630160d11a8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x5630160d1120 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x5630160ba2d0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x5630160d10f0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x5630160c9a68
|       | |   `-ImplicitCastExpr 0x5630160d10d8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x5630160d10a8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x5630160ca198
|       | |       `-MemberExpr 0x5630160d1078 <col:40> 'String::rep_t' lvalue ->_r 0x5630160ca210
|       | |         `-CXXThisExpr 0x5630160d1068 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x5630160d12c0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x5630160d12a8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x5630160d11e8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x5630160cf140 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x5630160d12e8 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x5630160d1248 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x5630160ca198
|       |       `-MemberExpr 0x5630160d1218 <col:15> 'String::rep_t' lvalue ->_r 0x5630160ca210
|       |         `-CXXThisExpr 0x5630160d1208 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x5630160d13c0 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x5630160d1358 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x5630160ca198
|         | `-MemberExpr 0x5630160d1328 <col:6> 'String::rep_t' lvalue ->_r 0x5630160ca210
|         |   `-CXXThisExpr 0x5630160d1318 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x5630160d13a8 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x5630160d1388 <col:16> 'int' 0
|-CXXMethodDecl 0x5630160cabf8 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x5630160caa18 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5630160caa98 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5630160cab10 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x5630160cacd0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x5630160caf20 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x5630160cad88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x5630160cae08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x5630160cae80 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x5630160cb108 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x5630160caff0 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x5630160cb070 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x5630160cb208 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x5630160d14f8 <col:41, line:286:5>
|   `-ReturnStmt 0x5630160d14e8 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x5630160d14b8 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x5630160d1480 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x5630160d1468 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x5630160d1448 <col:46> 'int' 1
|-CXXMethodDecl 0x5630160cb4a8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x5630160cb2c0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x5630160cb340 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x5630160cb3c0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x5630160cf140 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x5630160cb570 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x5630160cf210 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x5630160cf3e0 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x5630160cf2c8 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x5630160cf348 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x5630160cf4a0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x5630160cf568 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x5630160cf668 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x5630160cf6e0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x5630160cf758 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x5630160cf7c0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x5630160cf8c0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x5630160cf910 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630160cf8a0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x5630160cf880 <col:22> 'int' 14
|-CXXMethodDecl 0x5630160cfb28 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x5630160cf940 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x5630160cf9c0 <col:38> col:41 'int'
| `-ParmVarDecl 0x5630160cfa40 <col:43> col:46 'int'
|-FriendDecl 0x5630160cfc30 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x5630160cfcc0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563016191be0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x563016191db8 prev 0x563016191be0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563016191e48 <col:46, col:52> col:46 public
|-TypedefDecl 0x563016191e70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x5630161937d0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x563016193780 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x563016193760 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x563016192088 'type'
|     `-SubstTemplateTypeParmType 0x563016192050 'String' sugar
|       |-TemplateTypeParmType 0x5630160846c0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016084670 'T'
|       `-RecordType 0x5630160c0eb0 'String'
|         `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x563016193888 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x563016193850 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x563016193830 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x5630161937d0 'type'
|     `-ElaboratedType 0x563016193780 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x563016193760 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x563016192088 'type'
|         `-SubstTemplateTypeParmType 0x563016192050 'String' sugar
|           |-TemplateTypeParmType 0x5630160846c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563016084670 'T'
|           `-RecordType 0x5630160c0eb0 'String'
|             `-CXXRecord 0x5630160c0e20 'String'
|-CXXMethodDecl 0x563016193a08 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x563016193918 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x563016193af8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563016193bd8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x563016193bd8
|-CXXMethodDecl 0x563016193ea8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x563016193db0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x5630161940e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x563016193f60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563016193fd8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633e610 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x5630161941a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563016194220 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633e768 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56301633e838 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56301633ea88 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56301633e8f8 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56301633e970 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633ece8 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56301633eb58 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56301633ebd0 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633eea8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56301633edb8 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633f068 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56301633ef70 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633f120 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56301633f1d0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56301633f408 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56301633f280 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56301633f2f8 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56301633f6a8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56301633f5b0 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56301633f770 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56301633f7c0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56301633f810 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5630162f8650 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x563016190648 prev 0x5630162f8650 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563016191b50 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x563016191b00 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x563016191ae0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x563016191990 'type'
|     `-SubstTemplateTypeParmType 0x563016191820 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56301605a470 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56301605a418 'F'
|       `-RecordType 0x563016191480 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x5630161913a0 'typed_array_memory'
|-FieldDecl 0x56301633f860 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56301633f8b0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56301633f8e8 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|   |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563016091988 'T'
|   `-RecordType 0x5630160c0eb0 'String'
|     `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x56301633f978 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56301633f940 'String &'
|   `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|     |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563016091988 'T'
|     `-RecordType 0x5630160c0eb0 'String'
|       `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x56301633fa08 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56301633f9d0 'const String &'
|   `-QualType 0x5630161906e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-RecordType 0x5630160c0eb0 'String'
|         `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x56301633fa98 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56301633fa60 'String *'
|   `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|     |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563016091988 'T'
|     `-RecordType 0x5630160c0eb0 'String'
|       `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x56301633fb28 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56301633faf0 'const String *'
|   `-QualType 0x5630161906e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-RecordType 0x5630160c0eb0 'String'
|         `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x563016340780 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x563016340730 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x563016340710 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x563016340648 'type'
|     `-LValueReferenceType 0x563016340610 'const String &'
|       `-QualType 0x5630163403b1 'const String' const
|         `-SubstTemplateTypeParmType 0x5630163403b0 'String' sugar
|           |-TemplateTypeParmType 0x5630160643c0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x563016064368 'T'
|           `-RecordType 0x5630160c0eb0 'String'
|             `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x5630163407e8 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56301633f9d0 'const String &'
|   `-QualType 0x5630161906e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-RecordType 0x5630160c0eb0 'String'
|         `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x563016340840 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x5630163408a8 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56301633fa60 'String *'
|   `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|     |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563016091988 'T'
|     `-RecordType 0x5630160c0eb0 'String'
|       `-CXXRecord 0x5630160c0e20 'String'
|-TypedefDecl 0x563016340910 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56301633faf0 'const String *'
|   `-QualType 0x5630161906e1 'const String' const
|     `-SubstTemplateTypeParmType 0x5630161906e0 'String' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-RecordType 0x5630160c0eb0 'String'
|         `-CXXRecord 0x5630160c0e20 'String'
|-EnumDecl 0x563016340968 <line:134:5> col:5
| `-EnumConstantDecl 0x563016340a60 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x563016340a40 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563016093068 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563016093040 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563016093020 <col:40> 'int' 1
|-CXXConstructorDecl 0x563016340ae8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x563016340d78 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563016340ba0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563016340c40 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x563016341008 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x563016340ef0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x5630163412c8 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x5630163411b0 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x5630163415e0 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x5630163414c0 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x5630163418f0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x5630163417d0 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x563016341be0 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563016341a28 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563016341aa0 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563016341d08 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563016341db8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016341e10 <col:30> Inherited
|-CXXMethodDecl 0x563016341e58 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x563016341f08 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016341f60 <col:30> Inherited
|-CXXMethodDecl 0x563016342028 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5630163420d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016342130 <col:30> Inherited
|-CXXMethodDecl 0x563016342178 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563016342228 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016342280 <col:30> Inherited
|-CXXMethodDecl 0x5630163422c8 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x563016342378 <col:20> Inherited
| `-OptimizeNoneAttr 0x5630163423d0 <col:30> Inherited
|-CXXMethodDecl 0x563016342418 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x5630163424c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016342520 <col:30> Inherited
|-CXXMethodDecl 0x563016342548 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5630163425f8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x5630163426a8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563016342868 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563016342758 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x5630163427d0 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5630163429b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563016342928 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016342b68 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x563016342a70 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563016342c20 <col:20>
| `-OptimizeNoneAttr 0x563016342c78 <col:30>
|-CXXMethodDecl 0x563016342d98 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x563016342ca0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563016342e50 <col:20>
| `-OptimizeNoneAttr 0x563016342ea8 <col:30>
|-CXXMethodDecl 0x563016342f60 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563016342ed0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5630163430a8 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563016343018 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x5630163431d8 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x5630163432d8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x5630163433a8 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x563016343478 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x5630163435b8 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x563016343528 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016343700 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563016343670 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016343848 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x5630163437b8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563016343900 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563016343a00 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563016343970 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563016343ab8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563016343b78 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x563016343c78 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x563016343df8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563016343d38 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x5630163445b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563016343eb0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x563016344518 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x563016344418 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x563016344698 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x5630163447e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x563016344758 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x5630163448a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563016344ae8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x563016344960 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x5630163449d8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x563016344c78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x563016344bb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563016344e88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x563016344d40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x563016344db8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x563016344f48 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5630163451a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x5630163450b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x563016345278 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x563016345278

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630163c65e8 prev 0x563016276398 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5630163c66e0 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x5630163c6770 <col:22, col:28> col:22 public
|-EnumDecl 0x5630163c6798 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x5630163c68b8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6898 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x5630163c6880 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5630163c6860 <col:14> 'int' 999
| |-EnumConstantDecl 0x5630163c6960 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6940 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x5630163c6928 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x5630163c6908 <col:14> 'int' 1
| |-EnumConstantDecl 0x5630163c69f0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c69d0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x5630163c69b0 <col:17> 'int' 0
| |-EnumConstantDecl 0x5630163c6a80 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6a60 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x5630163c6a40 <col:13> 'int' 1
| |-EnumConstantDecl 0x5630163c6b10 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6af0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x5630163c6ad0 <col:16> 'int' 2
| |-EnumConstantDecl 0x5630163c6ba0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6b80 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x5630163c6b60 <col:13> 'int' 3
| |-EnumConstantDecl 0x5630163c6c30 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6c10 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x5630163c6bf0 <col:15> 'int' 4
| |-EnumConstantDecl 0x5630163c6cc0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6ca0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x5630163c6c80 <col:14> 'int' 5
| |-EnumConstantDecl 0x5630163c6d50 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x5630163c6d30 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x5630163c6d10 <col:12> 'int' 6
| `-EnumConstantDecl 0x5630163c6de0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x5630163c6dc0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x5630163c6da0 <col:13> 'int' 7
|-VarDecl 0x5630163c6e50 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x5630163c6ed8 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x5630163c6f60 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x5630163c6fe8 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x5630163c7070 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x5630163c70f8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x5630163c7180 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x5630163c7208 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x5630163c7290 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x5630163c7318 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x5630163c73a0 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x5630163c74a0 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x5630163cc7a8 '_nerrors' 'int'
| | `-IntegerLiteral 0x5630163ccf38 <line:128:13> 'int' 0
| `-CompoundStmt 0x5630163ccfa8 <col:16, line:129:5>
|-CXXDestructorDecl 0x5630163c7590 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x5630163ccfb8 <col:29, line:132:5>
|-CXXMethodDecl 0x5630163c7748 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x5630163c7680 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5630163c7810 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5630163c78f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5630163cd010 <col:44, line:161:5>
|   `-ReturnStmt 0x5630163cd000 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x5630163ccfe8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5630163ccfc8 <col:9> 'ErrorHandler *' lvalue Var 0x5630163cc808 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x5630163c7a38 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x5630163c79a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x5630163c7b00 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x5630163cd070 <col:43, line:173:5>
|   `-ReturnStmt 0x5630163cd060 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x5630163cd048 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x5630163cd028 <col:9> 'ErrorHandler *' lvalue Var 0x5630163cc880 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x5630163c7bb8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x5630163c7c38 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x5630163c7d48 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x5630163c7cb8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x5630163c7e98 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x5630163c7e08 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x5630163c7ff0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x5630163c7f58 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x5630163c8148 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x5630163c80b0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5630163c82a0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x5630163c8208 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x5630163c84b0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5630163c8358 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x5630163c83d8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x5630163c8688 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x5630163c8570 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x5630163c85f0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x5630163c88a8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5630163c8748 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x5630163c87c8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x5630163c8a88 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5630163c8968 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5630163c89e8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5630163c8c68 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x5630163c8b48 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x5630163c8bc8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x5630163c8df0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x5630163c8d28 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x5630163c8fc0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x5630163c8ea8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5630163c8f20 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x5630163cd2c8 <col:57, line:234:5>
|   `-ReturnStmt 0x5630163cd2b8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x5630163cd2a0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5630163cd248 <col:9, col:41> 'int'
|         |-MemberExpr 0x5630163cd218 <col:9> '<bound member function type>' ->xmessage 0x5630163c8df0
|         | `-CXXThisExpr 0x5630163cd208 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x5630163cd288 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5630163cd270 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5630163cd1e8 <col:18, col:40> 'String' (CXXTemporary 0x5630163cd1e8)
|               `-CallExpr 0x5630163cd1b0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x5630163cd198 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x5630163cd110 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5630163cafb8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x5630163cd130 <col:31> 'const String' lvalue ParmVar 0x5630163c8f20 'str' 'const String &'
|                 `-DeclRefExpr 0x5630163cd150 <col:36> 'const String' lvalue ParmVar 0x5630163c8ea8 'anno' 'const String &'
|-CXXMethodDecl 0x5630163c92a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5630163c9080 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x5630163c9100 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x5630163c9178 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5630163cd558 <col:68, line:243:5>
|   `-ReturnStmt 0x5630163cd548 <line:242:2, col:41>
|     `-ExprWithCleanups 0x5630163cd530 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x5630163cd4d0 <col:9, col:41> 'int'
|         |-MemberExpr 0x5630163cd4a0 <col:9> '<bound member function type>' ->xmessage 0x5630163c8fc0
|         | `-CXXThisExpr 0x5630163cd490 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5630163cd368 <col:18> 'const String' lvalue ParmVar 0x5630163c9080 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5630163cd518 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x5630163cd500 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5630163cd470 <col:24, col:40> 'String' (CXXTemporary 0x5630163cd470)
|               `-CXXMemberCallExpr 0x5630163cd408 <col:24, col:40> 'String'
|                 |-MemberExpr 0x5630163cd398 <col:24> '<bound member function type>' ->vformat 0x5630163ca480
|                 | `-CXXThisExpr 0x5630163cd388 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5630163cd438 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5630163cd3c8 <col:32> 'const char *' lvalue ParmVar 0x5630163c9100 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5630163cd450 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5630163cd3e8 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5630163c9178 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5630163c9540 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x5630163c9368 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5630163c93e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5630163c9458 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x5630163cd898 <col:23, line:254:5>
|   `-ReturnStmt 0x5630163cd888 <line:253:2, col:71>
|     `-ExprWithCleanups 0x5630163cd870 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x5630163cd810 <col:9, col:71> 'int'
|         |-MemberExpr 0x5630163cd7e0 <col:9> '<bound member function type>' ->xmessage 0x5630163c8fc0
|         | `-CXXThisExpr 0x5630163cd7d0 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x5630163cd858 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x5630163cd840 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x5630163cd790 <col:18, col:65> 'String' (CXXTemporary 0x5630163cd790)
|         |     `-CallExpr 0x5630163cd728 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x5630163cd710 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x5630163cd5f8 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x5630163cafb8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x5630163cd618 <col:31> 'const String' lvalue ParmVar 0x5630163c93e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x5630163cd770 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x5630163cd758 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x5630163cd6f0 <col:37, col:64> 'String' (CXXTemporary 0x5630163cd6f0)
|         |             `-CallExpr 0x5630163cd6c0 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x5630163cd6a8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x5630163cd638 <col:37> 'String (const String &)' lvalue CXXMethod 0x5630163cb608 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x5630163cd658 <col:56> 'const String' lvalue ParmVar 0x5630163c9368 'landmark' 'const String &'
|         `-DeclRefExpr 0x5630163cd7b0 <col:68> 'const String' lvalue ParmVar 0x5630163c9458 'str' 'const String &'
|-CXXMethodDecl 0x5630163c98c0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x5630163c9608 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x5630163c9680 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x5630163c9700 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x5630163c9778 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5630163cdb50 <col:34, line:267:5>
|   `-ReturnStmt 0x5630163cdb40 <line:266:2, col:51>
|     `-ExprWithCleanups 0x5630163cdb28 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x5630163cdac0 <col:9, col:51> 'int'
|         |-MemberExpr 0x5630163cda90 <col:9> '<bound member function type>' ->xmessage 0x5630163c9540
|         | `-CXXThisExpr 0x5630163cda80 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x5630163cd938 <col:18> 'const String' lvalue ParmVar 0x5630163c9608 'landmark' 'const String &'
|         |-DeclRefExpr 0x5630163cd958 <col:28> 'const String' lvalue ParmVar 0x5630163c9680 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x5630163cdb10 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x5630163cdaf8 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x5630163cda60 <col:34, col:50> 'String' (CXXTemporary 0x5630163cda60)
|               `-CXXMemberCallExpr 0x5630163cd9f8 <col:34, col:50> 'String'
|                 |-MemberExpr 0x5630163cd988 <col:34> '<bound member function type>' ->vformat 0x5630163ca480
|                 | `-CXXThisExpr 0x5630163cd978 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x5630163cda28 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x5630163cd9b8 <col:42> 'const char *' lvalue ParmVar 0x5630163c9700 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x5630163cda40 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x5630163cd9d8 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5630163c9778 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5630163c99d0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x5630163cdbd0 <col:25, line:288:5>
|   `-ReturnStmt 0x5630163cdbc0 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x5630163cdba8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x5630163cdb78 <col:9> 'const int' lvalue ->_nerrors 0x5630163cc7a8
|         `-CXXThisExpr 0x5630163cdb68 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x5630163c9be0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x5630163c9a88 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x5630163c9b08 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x5630163c9ec8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5630163c9ca8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x5630163c9d28 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x5630163c9da0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5630163ca060 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x5630163c9f98 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x5630163ca2a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x5630163ca120 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x5630163ca198 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x5630163cde30 <col:58, line:357:5>
|   `-ReturnStmt 0x5630163cde20 <line:356:2, col:29>
|     `-ExprWithCleanups 0x5630163cde08 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x5630163cddd8 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5630163cddc0 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x5630163cdda0 <col:9, col:29> 'String' (CXXTemporary 0x5630163cdda0)
|             `-CallExpr 0x5630163cdd30 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x5630163cdd18 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x5630163cdc98 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x5630163c9ec8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x5630163cdc38 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x5630163cdd68 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x5630163cdc58 <col:21> 'const char *' lvalue ParmVar 0x5630163ca120 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x5630163cdd80 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x5630163cdc78 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x5630163ca198 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5630163ca480 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x5630163ca370 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x5630163ca3e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x5630163ca5d8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x5630163ca548 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x5630163ca720 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x5630163ca690 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x5630163ca9c0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x5630163ca7d8 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x5630163ca858 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x5630163ca8d0 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x5630163cab20 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x5630163caa90 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x5630163cdf48 <col:37, line:441:5>
|   `-IfStmt 0x5630163cdf30 <line:439:2, line:440:8>
|     |-BinaryOperator 0x5630163cdeb8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x5630163cde88 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x5630163cde48 <col:6> 'int' lvalue ParmVar 0x5630163caa90 'level' 'int'
|     | `-ImplicitCastExpr 0x5630163cdea0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x5630163cde68 <col:15> 'ErrorHandler::Level' EnumConstant 0x5630163c6ba0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x5630163cdf18 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x5630163cdee8 <col:8> 'int' lvalue ->_nerrors 0x5630163cc7a8
|         `-CXXThisExpr 0x5630163cded8 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x5630163cabe8 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x5630163cdfe0 <col:26, line:448:5>
|   `-BinaryOperator 0x5630163cdfc0 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x5630163cdf70 <col:2> 'int' lvalue ->_nerrors 0x5630163cc7a8
|     | `-CXXThisExpr 0x5630163cdf60 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x5630163cdfa0 <col:13> 'int' 0
|-CXXMethodDecl 0x5630163cadb0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x5630163caca0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x5630163cad18 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x5630163cafb8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x5630163cae70 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x5630163caee8 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x5630163cb268 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x5630163cb078 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x5630163cb0f8 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x5630163cb178 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x5630163cb320 <col:59> 0 0
|-CXXMethodDecl 0x5630163cb4b8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x5630163cb398 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x5630163cb418 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x5630163ce650 <col:70, line:534:5>
|   |-DeclStmt 0x5630163ce150 <line:528:2, col:20>
|   | |-VarDecl 0x5630163ce008 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x5630163ce070 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x5630163ce0a8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x5630163ce110 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x5630163ce220 <line:529:2, col:23>
|   | `-VarDecl 0x5630163ce180 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x5630163ce208 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x5630163ce1e8 <col:18> 'const char *' lvalue ParmVar 0x5630163cb398 'begin' 'const char *'
|   |-DoStmt 0x5630163ce5e8 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x5630163ce518 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x5630163ce500 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x5630163ce4e0 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x5630163ce238 <col:6> 'const char *' lvalue Var 0x5630163ce180 'x' 'const char *'
|   | |     `-CallExpr 0x5630163ce430 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x5630163ce418 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x5630163ce3d0 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x5630163ccc80 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x5630163ce498 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x5630163ce480 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x5630163ce2f0 <col:20, col:27> 'String' (CXXTemporary 0x5630163ce2f0)
|   | |       |     `-CXXTemporaryObjectExpr 0x5630163ce2b8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x5630163ce4b0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5630163ce310 <col:30> 'const char *' lvalue Var 0x5630163ce180 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x5630163ce4c8 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x5630163ce330 <col:33> 'const char *' lvalue ParmVar 0x5630163cb418 'end' 'const char *'
|   | |       |-UnaryOperator 0x5630163ce370 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5630163ce350 <col:39> 'String' lvalue Var 0x5630163ce008 'name' 'String'
|   | |       |-UnaryOperator 0x5630163ce3a8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x5630163ce388 <col:46> 'String' lvalue Var 0x5630163ce0a8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x5630163ce3c0 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x5630163ce5d0 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x5630163ce5b8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x5630163ce598 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x5630163ce568 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|   |         `-ImplicitCastExpr 0x5630163ce550 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x5630163ce530 <col:11> 'String' lvalue Var 0x5630163ce008 'name' 'String'
|   `-ReturnStmt 0x5630163ce640 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x5630163ce628 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x5630163ce608 <col:9> 'const char *' lvalue Var 0x5630163ce180 'x' 'const char *'
|-CXXMethodDecl 0x5630163cb608 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x5630163cb578 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x5630163cec58 <col:55, line:550:5>
|   `-IfStmt 0x5630163cec30 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x5630163ce890 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x5630163ce878 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5630163ce860 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5630163ce840 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5630163ce810 <col:6> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|     | |       `-DeclRefExpr 0x5630163ce6b0 <col:6> 'const String' lvalue ParmVar 0x5630163cb578 'x' 'const String &'
|     | `-BinaryOperator 0x5630163ce7f0 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x5630163ce7c0 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x5630163ce770 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x5630163ce758 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x5630163ce710 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x5630160dde50 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x5630163ce6d0 <col:11> 'const String' lvalue ParmVar 0x5630163cb578 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x5630163ce6f0 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x5630163ce7d8 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x5630163ce7a8 <col:19> 'char' 123
|     |-ReturnStmt 0x5630163ce900 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x5630163ce8d0 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x5630163ce8b0 <col:13> 'const String' lvalue ParmVar 0x5630163cb578 'x' 'const String &'
|     `-IfStmt 0x5630163cec08 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x5630163ce998 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5630163ce980 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5630163ce960 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5630163ce930 <col:11> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |       `-DeclRefExpr 0x5630163ce910 <col:11> 'const String' lvalue ParmVar 0x5630163cb578 'x' 'const String &'
|       |-ReturnStmt 0x5630163ceb20 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x5630163ceb08 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x5630163cead8 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x5630163ceac0 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x5630163ceaa0 <col:13, col:29> 'String' (CXXTemporary 0x5630163ceaa0)
|       |         `-CallExpr 0x5630163cea50 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x5630163cea38 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x5630163ce9b0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x5630163cadb0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x5630163cea80 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x5630163ce9d0 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x5630163ce9f0 <col:28> 'const String' lvalue ParmVar 0x5630163cb578 'x' 'const String &'
|       `-ReturnStmt 0x5630163cebf8 <line:549:6, col:20>
|         `-ExprWithCleanups 0x5630163cebe0 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x5630163cebb0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x5630163ceb98 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x5630163ceb78 <col:13, col:20> 'String' (CXXTemporary 0x5630163ceb78)
|                 `-CXXTemporaryObjectExpr 0x5630163ceb40 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x5630163cb7d0 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x5630163cb6c0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x5630163cb738 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5630163ccf28 <col:71> 'bool' false
|-CXXRecordDecl 0x5630163cb880 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x5630163cbb78 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x5630163cbb10 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x5630163cbab0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x5630163cba70 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x5630160c0eb0 'String'
|       | `-CXXRecord 0x5630160c0e20 'String'
|       |-BuiltinType 0x563015d94580 'int'
|       `-DecayedType 0x5630162773e0 '__va_list_tag *' sugar
|         |-TypedefType 0x5630162773b0 'va_list' sugar
|         | |-Typedef 0x563015fb1f60 'va_list'
|         | `-TypedefType 0x563015fb1f10 '__gnuc_va_list' sugar
|         |   |-Typedef 0x563015ee9b58 '__gnuc_va_list'
|         |   `-TypedefType 0x563015ee9ac0 '__builtin_va_list' sugar
|         |     |-Typedef 0x563015dd5d38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x563015dd5ce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x563015d952d0 '__va_list_tag'
|         |         `-CXXRecord 0x563015d95238 '__va_list_tag'
|         `-PointerType 0x563015fb7800 '__va_list_tag *'
|           `-RecordType 0x563015d952d0 '__va_list_tag'
|             `-CXXRecord 0x563015d95238 '__va_list_tag'
|-EnumDecl 0x5630163cbbd0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x5630163cbcd0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc250 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cbcb0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x5630163cbc90 <col:16> 'int' 1
| |-EnumConstantDecl 0x5630163cbd80 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc268 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cbd40 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x5630163cbd20 <col:21> 'int' 2
| |-EnumConstantDecl 0x5630163cbe10 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc280 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cbdf0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x5630163cbdd0 <col:22> 'int' 4
| |-EnumConstantDecl 0x5630163cbea0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc298 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cbe80 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x5630163cbe60 <col:17> 'int' 8
| |-EnumConstantDecl 0x5630163cbf30 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc2b0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cbf10 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x5630163cbef0 <col:22> 'int' 16
| |-EnumConstantDecl 0x5630163cbfc0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc2c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cbfa0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5630163cbf80 <col:19> 'int' 32
| |-EnumConstantDecl 0x5630163cc050 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc2e0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cc030 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x5630163cc010 <col:17> 'int' 64
| |-EnumConstantDecl 0x5630163cc0e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc2f8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cc0c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x5630163cc0a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x5630163cc170 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x5630163cc310 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163cc150 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x5630163cc130 <col:16> 'int' 256
| `-EnumConstantDecl 0x5630163cc200 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x5630163cc328 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630163cc1e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x5630163cc1c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x5630163cc538 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x5630163cc350 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x5630163cc3f0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x5630163cc6c0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x5630163cc5f8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x5630163cc768 <line:580:3, col:10> col:3 private
|-FieldDecl 0x5630163cc7a8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x5630163cc808 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x5630163cc880 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x5630163ccc80 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x5630163cc8f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x5630163cc978 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x5630163cc9f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x5630163cca70 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x5630163ccae8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x5630163ccb60 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x5630163ccda8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x5630163ccda8
| `-ParmVarDecl 0x5630163cceb8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x5630163cefb8 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x5630163cefb8
  `-ParmVarDecl 0x5630163cf0c8 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563016276428 prev 0x5630162bb0f8 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x563016276520 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x5630162765b0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x5630162766e8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x5630162765e8 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563016277b10 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563016277af0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563016277688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563016277ba0 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563016277b60 <col:17> 'ErrorHandler *' lvalue ParmVar 0x5630162765e8 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5630162776f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563016277c20 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563016277be0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x563016277750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563016277c60 <col:54> 'bool' false
| `-CompoundStmt 0x563016277d68 <col:61, line:38:5>
|   `-BinaryOperator 0x563016277d48 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x563016277ce0 <col:9> 'const Element *' lvalue ->_context 0x563016277628
|     | `-CXXThisExpr 0x563016277cd0 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x563016277d30 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x563016277d10 <col:20> 'int' 0
|-CXXConstructorDecl 0x5630162768f8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x5630162767a8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x563016276820 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x563016277b48 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x563016277b28 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x563016277628 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x563016277dc0 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x563016277d80 <col:20> 'const Element *' lvalue ParmVar 0x5630162767a8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x563016277688 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x563016277e40 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x563016277e00 <col:36> 'ErrorHandler *' lvalue ParmVar 0x563016276820 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x5630162776f0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x563016277ec0 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x563016277e80 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x563016277750 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x563016277f00 <col:73> 'bool' false
| `-CompoundStmt 0x563016277f78 <col:80, line:46:5>
|-CXXMethodDecl 0x563016276a28 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x563016277ff0 <col:36, line:51:5>
|   `-ReturnStmt 0x563016277fe0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x563016277fc8 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x563016277f98 <col:16> 'const Element *const' lvalue ->_context 0x563016277628
|         `-CXXThisExpr 0x563016277f88 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563016276b18 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x563016278070 <col:32, line:57:5>
|   `-ReturnStmt 0x563016278060 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x563016278048 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x563016278018 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x563016277688
|         `-CXXThisExpr 0x563016278008 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x563016276bd8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x563016276d60 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x563016276c90 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x563016276eb0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x563016276e20 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563016277000 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x563016276f70 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x563016277208 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x5630162770b8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x563016277130 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x563016277538 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x5630162772c8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x563016277348 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x563016277410 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x5630162775f0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x563016277628 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x563016277688 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x5630162776f0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x563016277750 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x5630162777a0 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x5630162777a0
| `-ParmVarDecl 0x5630162778b8 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x563016277958 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x563016277958
| `-ParmVarDecl 0x563016277a68 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x5630163d8858 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563016382e30 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x563016383008 prev 0x563016382e30 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x563016383098 <col:46, col:52> col:46 public
|-TypedefDecl 0x5630163830c0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x563016384c90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x563016384c40 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x563016383570 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x563016383470 'type'
|     `-TemplateSpecializationType 0x563016383400 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x5630163832e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x5630163832c0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x5630163832a0 <col:24> 'unsigned long' 4
|       `-RecordType 0x5630163833e0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x563016383300 'char_array'
|-TypedefDecl 0x563016384d48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x563016384d10 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x563016384cf0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x563016384c90 'type'
|     `-ElaboratedType 0x563016384c40 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x563016383570 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x563016383470 'type'
|         `-TemplateSpecializationType 0x563016383400 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x5630163832e0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x5630163832c0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x5630163832a0 <col:24> 'unsigned long' 4
|           `-RecordType 0x5630163833e0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x563016383300 'char_array'
|-CXXMethodDecl 0x563016384ec8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x563016384dd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x563016384fb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x563016385098 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x563016385368 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x563016385270 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x5630163855a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563016385420 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x563016385498 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563016385778 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563016385668 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x5630163856e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5630163858d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x5630163859a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x563016385bf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x563016385a68 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563016385ae0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563016385e58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x563016385cc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x563016385d40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x563016386018 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x563016385f28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x5630163861d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x5630163860e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56301638d670 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56301638d720 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56301638d958 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56301638d7d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56301638d848 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56301638dbf8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56301638db00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56301638dcc0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56301638dd10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56301638dd60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x563016381838 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x563016381a48 prev 0x563016381838 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x563016382da0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x563016382d50 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x563016382d30 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x563016382be0 'type'
|     `-SubstTemplateTypeParmType 0x563016382a00 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x563016059cf0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016059c98 'T'
|       `-RecordType 0x563016382550 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x563016382468 'sized_array_memory'
|-FieldDecl 0x56301638ddb0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56301638de00 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56301638de38 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|   |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x563016091988 'T'
|   `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638dec8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56301638de90 'int &'
|   `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|     |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563016091988 'T'
|     `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638df88 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56301638df50 'const int &'
|   `-QualType 0x563016381ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638e018 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56301638dfe0 'int *'
|   `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|     |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563016091988 'T'
|     `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638e0a8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56301638e070 'const int *'
|   `-QualType 0x563016381ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638ec90 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56301638ec40 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56301638ec20 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56301638ebb0 'type'
|     `-SubstTemplateTypeParmType 0x56301638e970 'int' sugar
|       |-TemplateTypeParmType 0x563016064af0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016064aa0 'T'
|       `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638ecf8 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56301638df50 'const int &'
|   `-QualType 0x563016381ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638ed50 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638edb8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56301638dfe0 'int *'
|   `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|     |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x563016091988 'T'
|     `-BuiltinType 0x563015d94580 'int'
|-TypedefDecl 0x56301638ee20 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56301638e070 'const int *'
|   `-QualType 0x563016381ae1 'const int' const
|     `-SubstTemplateTypeParmType 0x563016381ae0 'int' sugar
|       |-TemplateTypeParmType 0x5630160919e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x563016091988 'T'
|       `-BuiltinType 0x563015d94580 'int'
|-EnumDecl 0x56301638ee78 <line:134:5> col:5
| `-EnumConstantDecl 0x56301638ef70 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56301638ef50 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x563016093068 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x563016093040 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x563016093020 <col:40> 'int' 1
|-CXXConstructorDecl 0x56301638eff8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56301638f248 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56301638f0b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56301638f150 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56301638f508 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56301638f3f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56301638f7c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56301638f6b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56301638fb10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56301638f9f0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56301638fe20 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56301638fd00 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x563016390110 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56301638ff58 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56301638ffd0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563016390238 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563016390318 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016390370 <col:30> Inherited
|-CXXMethodDecl 0x5630163903b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x563016390468 <col:20> Inherited
| `-OptimizeNoneAttr 0x5630163904c0 <col:30> Inherited
|-CXXMethodDecl 0x563016390588 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563016390638 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016390690 <col:30> Inherited
|-CXXMethodDecl 0x5630163906d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563016390788 <col:20> Inherited
| `-OptimizeNoneAttr 0x5630163907e0 <col:30> Inherited
|-CXXMethodDecl 0x563016390828 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x5630163908d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016390930 <col:30> Inherited
|-CXXMethodDecl 0x563016390978 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x563016390a28 <col:20> Inherited
| `-OptimizeNoneAttr 0x563016390a80 <col:30> Inherited
|-CXXMethodDecl 0x563016390aa8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563016390b58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x563016390c08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x563016390dc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563016390cb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x563016390d30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563016390f18 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x563016390e88 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x5630163910c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x563016390fd0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x563016391180 <col:20>
| `-OptimizeNoneAttr 0x5630163911d8 <col:30>
|-CXXMethodDecl 0x5630163912f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x563016391200 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x5630163913b0 <col:20>
| `-OptimizeNoneAttr 0x563016391408 <col:30>
|-CXXMethodDecl 0x5630163914c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563016391430 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016391608 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563016391578 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016391738 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x563016391868 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x563016391938 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x563016391a08 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x563016391b48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x563016391ab8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016391c90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x563016391c00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x563016391dd8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x563016391d48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563016391e90 <col:48> Inherited "" ""
|-CXXMethodDecl 0x563016391f90 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x563016391f00 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x563016392048 <col:60> Inherited "" ""
|-CXXMethodDecl 0x563016392108 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x563016392208 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x563016392388 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x5630163922c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x563016392b48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x563016392440 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x563016392aa8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x5630163929a8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x563016392c28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x563016392d78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x563016392ce8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563016392e30 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x563016393078 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x563016392ef0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563016392f68 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x563016393238 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x563016393148 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563016393488 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x563016393300 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x563016393378 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x563016393548 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x5630163937a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x5630163936b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x563016393878 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56301637f9a8 prev 0x5630163615f8 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56301637faa0 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56301637fb90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x5630163a55d0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56301637fc80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x5630163a55e0 <col:25, line:830:9>
|-CXXMethodDecl 0x56301637fd80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56301637fe30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56301637fed8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56301637fed8
| `-ParmVarDecl 0x56301637ffe8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x5630163807a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5630163807a8
  `-ParmVarDecl 0x5630163808b8 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x563016361410 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x563016361568 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x5630163615f8 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x5630163616b0 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x5630163617b8 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x5630163616e8 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563016394e38 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563016394e18 <col:31> 'int' 0
|-CXXConstructorDecl 0x563016361ad8 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x563016361950 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x5630163619c8 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563016394e70 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563016394e50 <col:59> 'int' 0
|-CXXConstructorDecl 0x563016361cb0 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563016361ba0 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x563016361c18 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563016394ea8 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563016394e88 <col:55> 'int' 0
|-CXXConstructorDecl 0x563016362068 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x563016361e50 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x563016361ec8 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x563016361f40 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x563016394ee0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x563016394ec0 <col:31> 'int' 0
|-CXXConstructorDecl 0x563016362228 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x563016362168 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x563016362320 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x563016362508 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x563016362410 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x5630163625f8 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x563016395290 <col:24, line:291:5>
|   `-ReturnStmt 0x563016395280 <line:290:9, col:79>
|     `-BinaryOperator 0x563016395260 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x563016395138 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x563016395090 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x563016395070 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x563016394f68 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x563016394f50 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x563016394f38 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x563016394f08 <col:18> 'Vector<String> *const' lvalue ->_conf 0x5630163817d0
|       | |   |       `-CXXThisExpr 0x563016394ef8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x563016395058 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x563016395040 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x563016395008 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x563016394fd8 <col:28, col:35> '<bound member function type>' ->size 0x563016342548
|       | |           `-ImplicitCastExpr 0x563016395028 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x563016394fc0 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x563016394f90 <col:28> 'Vector<String> *const' lvalue ->_conf 0x5630163817d0
|       | |                 `-CXXThisExpr 0x563016394f80 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x563016395120 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x563016395108 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x5630163950f0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x5630163950c0 <col:47> 'Args::Slot *const' lvalue ->_slots 0x5630163939c0
|       |         `-CXXThisExpr 0x5630163950b0 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x563016395240 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x563016395228 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x563016395210 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5630163951d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x5630163951b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563016395168 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563016393a70
|         |     |   `-CXXThisExpr 0x563016395158 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563016395198 <col:73> 'int' 0
|         `-IntegerLiteral 0x5630163951f0 <col:79> 'int' 0
|-CXXMethodDecl 0x5630163626b8 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x563016395468 <col:32, line:296:5>
|   `-ReturnStmt 0x563016395458 <line:295:9, col:49>
|     `-BinaryOperator 0x563016395438 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x563016395318 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x563016395300 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x5630163952e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x5630163952b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x5630163939c0
|       |       `-CXXThisExpr 0x5630163952a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x563016395418 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x563016395400 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x5630163953e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x5630163953a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x563016395390 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x563016395340 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x563016393a70
|         |     |   `-CXXThisExpr 0x563016395330 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x563016395370 <col:43> 'int' 0
|         `-IntegerLiteral 0x5630163953c8 <col:49> 'int' 0
|-CXXMethodDecl 0x5630163627a8 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x563016396fe0 <col:19, line:306:5>
|   |-IfStmt 0x563016395598 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x5630163954d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x5630163954c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x563016395490 <col:13> 'Vector<String> *' lvalue ->_conf 0x5630163817d0
|   | |     `-CXXThisExpr 0x563016395480 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x563016395578 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x563016395548 <col:13, col:20> '<bound member function type>' ->clear 0x563016344f48
|   |     `-ImplicitCastExpr 0x563016395530 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x563016395500 <col:13> 'Vector<String> *' lvalue ->_conf 0x5630163817d0
|   |         `-CXXThisExpr 0x5630163954f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x563016395620 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x5630163955f0 <col:9, col:16> '<bound member function type>' .clear 0x563016393548
|   |   `-MemberExpr 0x5630163955c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x563016393960
|   |     `-CXXThisExpr 0x5630163955b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x563016396fd0 <line:305:9, col:17>
|     `-UnaryOperator 0x563016395650 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x563016395640 <col:17> 'Args *' this
|-CXXMethodDecl 0x563016362a28 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x563016362930 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x563016362ba8 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x563016362ae0 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x563016362f28 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x563016362c50 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x563016362e88 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x563016362cf8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x563016362d70 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x563016397300 <col:67, line:327:5>
|     |-WhileStmt 0x5630163972b0 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x5630163970c8 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x563016397048 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5630162b35c8 0x5630160fcba8 0x5630160fc880 0x5630160ee060 0x5630160edd10 0x5630160ed600 0x5630160bff70 0x56301604c430
|     | | |-DeclRefExpr 0x563016397008 <col:16> 'Iter' lvalue ParmVar 0x563016362cf8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x563016397028 <col:25> 'Iter' lvalue ParmVar 0x563016362d70 'end' 'Iter'
|     | `-CompoundStmt 0x563016397290 <col:30, line:325:9>
|     |   |-CallExpr 0x563016397230 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x563016397110 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x563016397200 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x563016397190 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|     |   |   `-DeclRefExpr 0x563016397170 <col:24> 'Iter' lvalue ParmVar 0x563016362cf8 'begin' 'Iter'
|     |   `-UnaryOperator 0x563016397278 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x563016397258 <col:15> 'Iter' lvalue ParmVar 0x563016362cf8 'begin' 'Iter'
|     `-ReturnStmt 0x5630163972f0 <line:326:9, col:17>
|       `-UnaryOperator 0x5630163972d8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5630163972c8 <col:17> 'Args *' this
|-CXXMethodDecl 0x563016363030 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x563016362fa0 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x563016363178 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x5630163630e8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x563016363240 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x5630163973e0 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x563016397380 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x563016397330 <col:9> '<bound member function type>' ->reset_from 0x563016393de8
|   | | `-CXXThisExpr 0x563016397320 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x563016397360 <col:20> 'int' 0
|   `-ReturnStmt 0x5630163973d0 <line:352:9, col:17>
|     `-UnaryOperator 0x5630163973b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5630163973a8 <col:17> 'Args *' this
|-VarDecl 0x5630163632f8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x563016363360 <col:38> 'int' 1
|-VarDecl 0x5630163633f0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x563016363458 <col:39> 'int' 2
|-VarDecl 0x5630163634e8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x563016363550 <col:39> 'int' 4
|-VarDecl 0x5630163635e0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x563016363648 <col:39> 'int' 8
|-FunctionTemplateDecl 0x5630163639c8 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x5630163636c0 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x563016363928 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563016363770 <col:16, col:28> col:28 referenced keyword 'const char *'
| | |-ParmVarDecl 0x563016363818 <col:37, col:40> col:40 referenced x 'T &'
| | `-CompoundStmt 0x563016397538 <col:43, line:371:5>
| |   `-ReturnStmt 0x563016397528 <line:370:9, col:34>
| |     `-CallExpr 0x5630163974f0 <col:16, col:34> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563016397410 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563016397490 <col:21> 'const char *' lvalue ParmVar 0x563016363770 'keyword' 'const char *'
| |       |-IntegerLiteral 0x5630163974b0 <col:30> 'int' 0
| |       `-DeclRefExpr 0x5630163974d0 <col:33> 'T' lvalue ParmVar 0x563016363818 'x' 'T &'
| `-CXXMethodDecl 0x5630163d9208 <line:369:5, line:371:5> line:369:11 used read 'Args &(const char *, bool &)'
|   |-TemplateArgument type 'bool'
|   |-ParmVarDecl 0x5630163d9020 <col:16, col:28> col:28 keyword 'const char *'
|   `-ParmVarDecl 0x5630163d90f8 <col:37, col:40> col:40 x 'bool &'
|-FunctionTemplateDecl 0x563016363cf8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x563016363a30 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563016363c58 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563016363ae0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016363b88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x563016397688 <col:45, line:375:5>
|     `-ReturnStmt 0x563016397678 <line:374:9, col:42>
|       `-CallExpr 0x563016397640 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016397560 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5630163975e0 <col:21> 'const char *' lvalue ParmVar 0x563016363ae0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016397600 <col:30> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int'
|         `-DeclRefExpr 0x563016397620 <col:41> 'T' lvalue ParmVar 0x563016363b88 'x' 'T &'
|-FunctionTemplateDecl 0x563016364028 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x563016363d60 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563016363f88 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x563016363e10 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016363eb8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x5630163977d8 <col:45, line:379:5>
|     `-ReturnStmt 0x5630163977c8 <line:378:9, col:43>
|       `-CallExpr 0x563016397790 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5630163976b0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016397730 <col:21> 'const char *' lvalue ParmVar 0x563016363e10 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016397750 <col:30> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int'
|         `-DeclRefExpr 0x563016397770 <col:42> 'T' lvalue ParmVar 0x563016363eb8 'x' 'T &'
|-FunctionTemplateDecl 0x563016364358 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x563016364090 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x5630163642b8 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x563016364140 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x5630163641e8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x5630163979d8 <col:46, line:383:5>
| |   `-ReturnStmt 0x5630163979c8 <line:382:9, col:55>
| |     `-CallExpr 0x563016397990 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x563016397800 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x563016397880 <col:21> 'const char *' lvalue ParmVar 0x563016364140 'keyword' 'const char *'
| |       |-BinaryOperator 0x563016397950 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x563016397900 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x5630163978e0 <col:30> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x563016397938 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x563016397918 <col:42> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x563016397970 <col:54> 'T' lvalue ParmVar 0x5630163641e8 'x' 'T &'
| `-CXXMethodDecl 0x5630163d8ce8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x5630163d8b08 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x5630163d8bd8 <col:40, col:43> col:43 x 'unsigned int &'
|-FunctionTemplateDecl 0x563016364758 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x5630163643c0 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x5630163646b8 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x563016364470 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163644f0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x563016364598 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x563016397b18 <col:54, line:388:5>
|     |-CallExpr 0x563016397aa0 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x5630163979f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563016397a30 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563016397a40 <col:30> 'const char *' lvalue ParmVar 0x563016364470 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563016397a60 <col:39> 'int' lvalue ParmVar 0x5630163644f0 'flags' 'int'
|     | `-DeclRefExpr 0x563016397a80 <col:46> 'T' lvalue ParmVar 0x563016364598 'x' 'T &'
|     `-ReturnStmt 0x563016397b08 <line:387:9, col:17>
|       `-UnaryOperator 0x563016397af0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563016397ae0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016364c08 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x5630163647c8 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563016364848 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563016364b68 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563016364908 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163649a8 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x563016364a48 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x563016397c88 <col:74, line:403:5>
|     `-ReturnStmt 0x563016397c78 <line:402:9, col:56>
|       `-CallExpr 0x563016397c38 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016397b48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016397bb8 <col:28> 'const char *' lvalue ParmVar 0x563016364908 'keyword' 'const char *'
|         |-IntegerLiteral 0x563016397bd8 <col:37> 'int' 0
|         |-DeclRefExpr 0x563016397bf8 <col:40> 'T' lvalue ParmVar 0x5630163649a8 'x' 'T &'
|         `-DeclRefExpr 0x563016397c18 <col:43> 'const V' lvalue ParmVar 0x563016364a48 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563016365078 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x563016364c78 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563016364cf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563016364fd8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x563016364db8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016364e58 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x563016364ef8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x563016397df0 <col:76, line:407:5>
|     `-ReturnStmt 0x563016397de0 <line:406:9, col:65>
|       `-CallExpr 0x563016397da0 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016397cb0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016397d20 <col:28> 'const char *' lvalue ParmVar 0x563016364db8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016397d40 <col:37> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int'
|         |-DeclRefExpr 0x563016397d60 <col:49> 'T' lvalue ParmVar 0x563016364e58 'x' 'T &'
|         `-DeclRefExpr 0x563016397d80 <col:52> 'const V' lvalue ParmVar 0x563016364ef8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5630163655c8 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x5630163650e8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563016365168 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563016365528 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x563016365228 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163652a8 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563016365348 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x5630163653e8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x563016397f58 <col:85, line:412:5>
|     |-CallExpr 0x563016397ed8 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563016397e08 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563016397e48 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563016397e58 <col:37> 'const char *' lvalue ParmVar 0x563016365228 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563016397e78 <col:46> 'int' lvalue ParmVar 0x5630163652a8 'flags' 'int'
|     | |-DeclRefExpr 0x563016397e98 <col:53> 'T' lvalue ParmVar 0x563016365348 'x' 'T &'
|     | `-DeclRefExpr 0x563016397eb8 <col:56> 'const V' lvalue ParmVar 0x5630163653e8 'default_value' 'const V &'
|     `-ReturnStmt 0x563016397f48 <line:411:9, col:17>
|       `-UnaryOperator 0x563016397f30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563016397f20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016365a58 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x563016365640 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163656b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5630163659b8 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016365778 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163657f0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x563016365898 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x5630163980d8 <col:53, line:425:5>
|     `-ReturnStmt 0x5630163980c8 <line:424:9, col:42>
|       `-CallExpr 0x563016398088 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016397f88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016398008 <col:21> 'const char *' lvalue ParmVar 0x563016365778 'keyword' 'const char *'
|         |-IntegerLiteral 0x563016398028 <col:30> 'int' 0
|         |-DeclRefExpr 0x563016398048 <col:33> 'P' lvalue ParmVar 0x5630163657f0 'parser' 'P'
|         `-DeclRefExpr 0x563016398068 <col:41> 'T' lvalue ParmVar 0x563016365898 'x' 'T &'
|-FunctionTemplateDecl 0x563016365ea8 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x563016365ac8 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016365b48 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016365e08 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016365c08 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016365c80 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563016365d28 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x563016398250 <col:55, line:429:5>
|     `-ReturnStmt 0x563016398240 <line:428:9, col:50>
|       `-CallExpr 0x563016398200 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398100 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016398180 <col:21> 'const char *' lvalue ParmVar 0x563016365c08 'keyword' 'const char *'
|         |-DeclRefExpr 0x5630163981a0 <col:30> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int'
|         |-DeclRefExpr 0x5630163981c0 <col:41> 'P' lvalue ParmVar 0x563016365c80 'parser' 'P'
|         `-DeclRefExpr 0x5630163981e0 <col:49> 'T' lvalue ParmVar 0x563016365d28 'x' 'T &'
|-FunctionTemplateDecl 0x5630163662f8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x563016365f18 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016365f98 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016366258 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016366058 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163660d0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563016366178 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x5630163983c8 <col:55, line:433:5>
|     `-ReturnStmt 0x5630163983b8 <line:432:9, col:51>
|       `-CallExpr 0x563016398378 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398278 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5630163982f8 <col:21> 'const char *' lvalue ParmVar 0x563016366058 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016398318 <col:30> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int'
|         |-DeclRefExpr 0x563016398338 <col:42> 'P' lvalue ParmVar 0x5630163660d0 'parser' 'P'
|         `-DeclRefExpr 0x563016398358 <col:50> 'T' lvalue ParmVar 0x563016366178 'x' 'T &'
|-FunctionTemplateDecl 0x563016366748 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x563016366368 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163663e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5630163666a8 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5630163664a8 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016366520 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x5630163665c8 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x5630163985f0 <col:56, line:437:5>
|     `-ReturnStmt 0x5630163985e0 <line:436:9, col:63>
|       `-CallExpr 0x5630163985a0 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5630163983f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016398470 <col:21> 'const char *' lvalue ParmVar 0x5630163664a8 'keyword' 'const char *'
|         |-BinaryOperator 0x563016398540 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x5630163984f0 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x5630163984d0 <col:30> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563016398528 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563016398508 <col:42> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563016398560 <col:54> 'P' lvalue ParmVar 0x563016366520 'parser' 'P'
|         `-DeclRefExpr 0x563016398580 <col:62> 'T' lvalue ParmVar 0x5630163665c8 'x' 'T &'
|-FunctionTemplateDecl 0x563016366c78 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x5630163667b8 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016366838 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016366bd8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5630163668f8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016366978 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x5630163669f0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x563016366a98 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x563016398758 <col:64, line:442:5>
|     |-CallExpr 0x5630163986d8 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563016398608 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x563016398648 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x563016398658 <col:30> 'const char *' lvalue ParmVar 0x5630163668f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563016398678 <col:39> 'int' lvalue ParmVar 0x563016366978 'flags' 'int'
|     | |-DeclRefExpr 0x563016398698 <col:46> 'P' lvalue ParmVar 0x5630163669f0 'parser' 'P'
|     | `-DeclRefExpr 0x5630163986b8 <col:54> 'T' lvalue ParmVar 0x563016366a98 'x' 'T &'
|     `-ReturnStmt 0x563016398748 <line:441:9, col:17>
|       `-UnaryOperator 0x563016398730 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563016398720 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016367278 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x563016366cf0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016366d68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563016366de8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x5630163671d8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x563016366eb0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016366f28 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563016366fc8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x563016367098 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x5630163988f0 <col:84, line:458:5>
|     `-ReturnStmt 0x5630163988e0 <line:457:9, col:64>
|       `-CallExpr 0x563016398898 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5630163987f8 <col:28> 'const char *' lvalue ParmVar 0x563016366eb0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563016398818 <col:37> 'int' 0
|         |-DeclRefExpr 0x563016398838 <col:40> 'P' lvalue ParmVar 0x563016366f28 'parser' 'P'
|         |-DeclRefExpr 0x563016398858 <col:48> 'T' lvalue ParmVar 0x563016366fc8 'x' 'T &'
|         `-DeclRefExpr 0x563016398878 <col:51> 'const V' lvalue ParmVar 0x563016367098 'default_value' 'const V &'
|-FunctionTemplateDecl 0x5630163677f8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x5630163672f0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016367368 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x5630163673e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563016367758 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x5630163674b0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016367528 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x5630163675c8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x563016367668 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x563016398a80 <col:86, line:462:5>
|     `-ReturnStmt 0x563016398a70 <line:461:9, col:73>
|       `-CallExpr 0x563016398a28 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398918 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016398988 <col:28> 'const char *' lvalue ParmVar 0x5630163674b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x5630163989a8 <col:37> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int'
|         |-DeclRefExpr 0x5630163989c8 <col:49> 'P' lvalue ParmVar 0x563016367528 'parser' 'P'
|         |-DeclRefExpr 0x5630163989e8 <col:57> 'T' lvalue ParmVar 0x5630163675c8 'x' 'T &'
|         `-DeclRefExpr 0x563016398a08 <col:60> 'const V' lvalue ParmVar 0x563016367668 'default_value' 'const V &'
|-FunctionTemplateDecl 0x563016367e58 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x563016367870 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163678e8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x563016367968 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563016367db8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563016367a30 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016367ab0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x563016367b28 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x563016367bc8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x563016367c68 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x563016398c10 <col:95, line:467:5>
|     |-CallExpr 0x563016398b88 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563016398a98 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x563016398ad8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x563016398ae8 <col:37> 'const char *' lvalue ParmVar 0x563016367a30 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563016398b08 <col:46> 'int' lvalue ParmVar 0x563016367ab0 'flags' 'int'
|     | |-DeclRefExpr 0x563016398b28 <col:53> 'P' lvalue ParmVar 0x563016367b28 'parser' 'P'
|     | |-DeclRefExpr 0x563016398b48 <col:61> 'T' lvalue ParmVar 0x563016367bc8 'x' 'T &'
|     | `-DeclRefExpr 0x563016398b68 <col:64> 'const V' lvalue ParmVar 0x563016367c68 'default_value' 'const V &'
|     `-ReturnStmt 0x563016398c00 <line:466:9, col:17>
|       `-UnaryOperator 0x563016398be8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563016398bd8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016368438 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x563016367ed8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016367f58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563016367fd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563016368398 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x5630163680a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016368118 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x5630163681b8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563016368258 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x563016398db8 <col:63, line:481:5>
|     `-ReturnStmt 0x563016398da8 <line:480:9, col:47>
|       `-CallExpr 0x563016398d60 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398c40 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016398cc0 <col:21> 'const char *' lvalue ParmVar 0x5630163680a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x563016398ce0 <col:30> 'int' 0
|         |-DeclRefExpr 0x563016398d00 <col:33> 'P' lvalue ParmVar 0x563016368118 'parser' 'P'
|         |-DeclRefExpr 0x563016398d20 <col:41> 'T1' lvalue ParmVar 0x5630163681b8 'x1' 'T1 &'
|         `-DeclRefExpr 0x563016398d40 <col:45> 'T2' lvalue ParmVar 0x563016368258 'x2' 'T2 &'
|-FunctionTemplateDecl 0x5630163689b8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x5630163684b0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016368528 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5630163685a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563016368918 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563016368670 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163686e8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563016368788 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563016368828 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x563016398f58 <col:65, line:485:5>
|     `-ReturnStmt 0x563016398f48 <line:484:9, col:55>
|       `-CallExpr 0x563016398f00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398de0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016398e60 <col:21> 'const char *' lvalue ParmVar 0x563016368670 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016398e80 <col:30> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int'
|         |-DeclRefExpr 0x563016398ea0 <col:41> 'P' lvalue ParmVar 0x5630163686e8 'parser' 'P'
|         |-DeclRefExpr 0x563016398ec0 <col:49> 'T1' lvalue ParmVar 0x563016368788 'x1' 'T1 &'
|         `-DeclRefExpr 0x563016398ee0 <col:53> 'T2' lvalue ParmVar 0x563016368828 'x2' 'T2 &'
|-FunctionTemplateDecl 0x563016368f38 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x563016368a30 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016368aa8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563016368b28 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x563016368e98 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563016368bf0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016368c68 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x563016368d08 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x563016368da8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x5630163990f8 <col:65, line:489:5>
|     `-ReturnStmt 0x5630163990e8 <line:488:9, col:56>
|       `-CallExpr 0x5630163990a0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016398f80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016399000 <col:21> 'const char *' lvalue ParmVar 0x563016368bf0 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016399020 <col:30> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int'
|         |-DeclRefExpr 0x563016399040 <col:42> 'P' lvalue ParmVar 0x563016368c68 'parser' 'P'
|         |-DeclRefExpr 0x563016399060 <col:50> 'T1' lvalue ParmVar 0x563016368d08 'x1' 'T1 &'
|         `-DeclRefExpr 0x563016399080 <col:54> 'T2' lvalue ParmVar 0x563016368da8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56301636e998 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x563016368fb0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016369028 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x5630163690a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56301636e8f8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563016369170 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636e6c0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56301636e768 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56301636e808 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x563016399348 <col:66, line:493:5>
|     `-ReturnStmt 0x563016399338 <line:492:9, col:68>
|       `-CallExpr 0x5630163992f0 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399120 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5630163991a0 <col:21> 'const char *' lvalue ParmVar 0x563016369170 'keyword' 'const char *'
|         |-BinaryOperator 0x563016399270 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x563016399220 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563016399200 <col:30> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x563016399258 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x563016399238 <col:42> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x563016399290 <col:54> 'P' lvalue ParmVar 0x56301636e6c0 'parser' 'P'
|         |-DeclRefExpr 0x5630163992b0 <col:62> 'T1' lvalue ParmVar 0x56301636e768 'x1' 'T1 &'
|         `-DeclRefExpr 0x5630163992d0 <col:66> 'T2' lvalue ParmVar 0x56301636e808 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56301636eff8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56301636ea10 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56301636ea88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56301636eb08 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56301636ef58 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56301636ebd0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636ec50 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56301636ecc8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56301636ed68 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56301636ee08 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x5630163994d8 <col:74, line:498:5>
|     |-CallExpr 0x563016399450 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563016399360 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x5630163993a0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x5630163993b0 <col:30> 'const char *' lvalue ParmVar 0x56301636ebd0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x5630163993d0 <col:39> 'int' lvalue ParmVar 0x56301636ec50 'flags' 'int'
|     | |-DeclRefExpr 0x5630163993f0 <col:46> 'P' lvalue ParmVar 0x56301636ecc8 'parser' 'P'
|     | |-DeclRefExpr 0x563016399410 <col:54> 'T1' lvalue ParmVar 0x56301636ed68 'x1' 'T1 &'
|     | `-DeclRefExpr 0x563016399430 <col:58> 'T2' lvalue ParmVar 0x56301636ee08 'x2' 'T2 &'
|     `-ReturnStmt 0x5630163994c8 <line:497:9, col:17>
|       `-UnaryOperator 0x5630163994b0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x5630163994a0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56301636f358 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56301636f078 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301636f2b8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56301636f130 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636f1a8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x563016399620 <col:52, line:509:5>
|     `-ReturnStmt 0x563016399610 <line:508:9, col:44>
|       `-CallExpr 0x5630163995d8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399508 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016399578 <col:26> 'const char *' lvalue ParmVar 0x56301636f130 'keyword' 'const char *'
|         |-IntegerLiteral 0x563016399598 <col:35> 'int' 0
|         `-DeclRefExpr 0x5630163995b8 <col:38> 'P' lvalue ParmVar 0x56301636f1a8 'parser' 'P'
|-FunctionTemplateDecl 0x56301636f658 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56301636f3c0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301636f5b8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56301636f470 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636f4e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x563016399760 <col:54, line:513:5>
|     `-ReturnStmt 0x563016399750 <line:512:9, col:52>
|       `-CallExpr 0x563016399718 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399648 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5630163996b8 <col:26> 'const char *' lvalue ParmVar 0x56301636f470 'keyword' 'const char *'
|         |-DeclRefExpr 0x5630163996d8 <col:35> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int'
|         `-DeclRefExpr 0x5630163996f8 <col:46> 'P' lvalue ParmVar 0x56301636f4e8 'parser' 'P'
|-FunctionTemplateDecl 0x56301636f958 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56301636f6c0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301636f8b8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56301636f770 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636f7e8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x5630163998a0 <col:54, line:517:5>
|     `-ReturnStmt 0x563016399890 <line:516:9, col:53>
|       `-CallExpr 0x563016399858 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399788 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x5630163997f8 <col:26> 'const char *' lvalue ParmVar 0x56301636f770 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016399818 <col:35> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int'
|         `-DeclRefExpr 0x563016399838 <col:47> 'P' lvalue ParmVar 0x56301636f7e8 'parser' 'P'
|-FunctionTemplateDecl 0x56301636fc58 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56301636f9c0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301636fbb8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56301636fa70 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636fae8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x563016399a90 <col:55, line:521:5>
|     `-ReturnStmt 0x563016399a80 <line:520:9, col:65>
|       `-CallExpr 0x563016399a48 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x5630163998c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016399938 <col:26> 'const char *' lvalue ParmVar 0x56301636fa70 'keyword' 'const char *'
|         |-BinaryOperator 0x563016399a08 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x5630163999b8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x563016399998 <col:35> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x5630163999f0 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x5630163999d0 <col:47> 'const int' lvalue Var 0x5630163633f0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x563016399a28 <col:59> 'P' lvalue ParmVar 0x56301636fae8 'parser' 'P'
|-FunctionTemplateDecl 0x563016370028 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56301636fcc0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301636ff88 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56301636fd70 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301636fdf0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56301636fe68 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x563016399bd0 <col:63, line:526:5>
|     |-CallExpr 0x563016399b58 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x563016399aa8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x563016399ae8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x563016399af8 <col:35> 'const char *' lvalue ParmVar 0x56301636fd70 'keyword' 'const char *'
|     | |-DeclRefExpr 0x563016399b18 <col:44> 'int' lvalue ParmVar 0x56301636fdf0 'flags' 'int'
|     | `-DeclRefExpr 0x563016399b38 <col:51> 'P' lvalue ParmVar 0x56301636fe68 'parser' 'P'
|     `-ReturnStmt 0x563016399bc0 <line:525:9, col:17>
|       `-UnaryOperator 0x563016399ba8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x563016399b98 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016370478 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x563016370098 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016370118 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5630163703d8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x5630163701d8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016370250 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x5630163702f8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x563016399d28 <col:58, line:541:5>
|     `-ReturnStmt 0x563016399d18 <line:540:9, col:39>
|       `-CallExpr 0x563016399ce0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399c00 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016399c80 <col:21> 'const char *' lvalue ParmVar 0x5630163701d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016399ca0 <col:30> 'P' lvalue ParmVar 0x563016370250 'parser' 'P'
|         `-DeclRefExpr 0x563016399cc0 <col:38> 'T' lvalue ParmVar 0x5630163702f8 'x' 'T &'
|-FunctionTemplateDecl 0x5630163708c8 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x5630163704e8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016370568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016370828 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016370628 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163706a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563016370748 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563016399e60 <col:60, line:545:5>
|     `-ReturnStmt 0x563016399e50 <line:544:9, col:41>
|       `-CallExpr 0x563016399e18 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399d50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016399db8 <col:23> 'const char *' lvalue ParmVar 0x563016370628 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016399dd8 <col:32> 'P' lvalue ParmVar 0x5630163706a0 'parser' 'P'
|         `-DeclRefExpr 0x563016399df8 <col:40> 'T' lvalue ParmVar 0x563016370748 'x' 'T &'
|-FunctionTemplateDecl 0x563016370d18 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x563016370938 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163709b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016370c78 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016370a78 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016370af0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x563016370b98 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x563016399f98 <col:60, line:549:5>
|     `-ReturnStmt 0x563016399f88 <line:548:9, col:41>
|       `-CallExpr 0x563016399f50 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399e88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x563016399ef0 <col:23> 'const char *' lvalue ParmVar 0x563016370a78 'keyword' 'const char *'
|         |-DeclRefExpr 0x563016399f10 <col:32> 'P' lvalue ParmVar 0x563016370af0 'parser' 'P'
|         `-DeclRefExpr 0x563016399f30 <col:40> 'T' lvalue ParmVar 0x563016370b98 'x' 'T &'
|-FunctionTemplateDecl 0x563016371168 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x563016370d88 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016370e08 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5630163710c8 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016370ec8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016370f40 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x563016370fe8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56301639a0d0 <col:61, line:553:5>
|     `-ReturnStmt 0x56301639a0c0 <line:552:9, col:42>
|       `-CallExpr 0x56301639a088 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x563016399fc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639a028 <col:24> 'const char *' lvalue ParmVar 0x563016370ec8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56301639a048 <col:33> 'P' lvalue ParmVar 0x563016370f40 'parser' 'P'
|         `-DeclRefExpr 0x56301639a068 <col:41> 'T' lvalue ParmVar 0x563016370fe8 'x' 'T &'
|-FunctionTemplateDecl 0x563016371648 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x5630163711d8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016371258 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x5630163715a8 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x563016371318 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016371398 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x563016371410 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x5630163714b8 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56301639a248 <col:69, line:557:5>
|     `-ReturnStmt 0x56301639a238 <line:556:9, col:46>
|       `-CallExpr 0x56301639a1f8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56301639a0f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639a178 <col:21> 'const char *' lvalue ParmVar 0x563016371318 'keyword' 'const char *'
|         |-DeclRefExpr 0x56301639a198 <col:30> 'int' lvalue ParmVar 0x563016371398 'flags' 'int'
|         |-DeclRefExpr 0x56301639a1b8 <col:37> 'P' lvalue ParmVar 0x563016371410 'parser' 'P'
|         `-DeclRefExpr 0x56301639a1d8 <col:45> 'T' lvalue ParmVar 0x5630163714b8 'x' 'T &'
|-FunctionTemplateDecl 0x563016371958 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x5630163716c0 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x5630163718b8 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x563016371770 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163717e8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56301639a388 <col:56, line:571:5>
|     `-ReturnStmt 0x56301639a378 <line:570:9, col:48>
|       `-CallExpr 0x56301639a340 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56301639a270 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639a2e0 <col:30> 'const char *' lvalue ParmVar 0x563016371770 'keyword' 'const char *'
|         |-IntegerLiteral 0x56301639a300 <col:39> 'int' 0
|         `-DeclRefExpr 0x56301639a320 <col:42> 'P' lvalue ParmVar 0x5630163717e8 'parser' 'P'
|-FunctionTemplateDecl 0x563016371ce8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x5630163719c0 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x563016371c48 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x563016371a70 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016371af0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x563016371b68 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56301639a558 <col:67, line:576:5>
|     |-CallExpr 0x56301639a4e0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56301639a3a0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56301639a3e0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56301639a3f0 <col:39> 'const char *' lvalue ParmVar 0x563016371a70 'keyword' 'const char *'
|     | |-BinaryOperator 0x56301639a4a0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56301639a450 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56301639a410 <col:48> 'int' lvalue ParmVar 0x563016371af0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56301639a488 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56301639a468 <col:56> 'const int' lvalue Var 0x5630163635e0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56301639a4c0 <col:68> 'P' lvalue ParmVar 0x563016371b68 'parser' 'P'
|     `-ReturnStmt 0x56301639a548 <line:575:9, col:17>
|       `-UnaryOperator 0x56301639a530 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56301639a520 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016372138 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x563016371d58 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016371dd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016372098 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x563016371e98 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016371f10 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x563016371fb8 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56301639a6c8 <col:62, line:592:5>
|     `-ReturnStmt 0x56301639a6b8 <line:591:9, col:51>
|       `-CallExpr 0x56301639a678 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56301639a588 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639a5f8 <col:30> 'const char *' lvalue ParmVar 0x563016371e98 'keyword' 'const char *'
|         |-IntegerLiteral 0x56301639a618 <col:39> 'int' 0
|         |-DeclRefExpr 0x56301639a638 <col:42> 'P' lvalue ParmVar 0x563016371f10 'parser' 'P'
|         `-DeclRefExpr 0x56301639a658 <col:50> 'T' lvalue ParmVar 0x563016371fb8 'x' 'T &'
|-FunctionTemplateDecl 0x563016372618 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x5630163721a8 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016372228 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016372578 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x5630163722e8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016372368 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x5630163723e0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x563016372488 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56301639a8c0 <col:73, line:597:5>
|     |-CallExpr 0x56301639a840 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56301639a6e0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56301639a720 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56301639a730 <col:39> 'const char *' lvalue ParmVar 0x5630163722e8 'keyword' 'const char *'
|     | |-BinaryOperator 0x56301639a7e0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56301639a790 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56301639a750 <col:48> 'int' lvalue ParmVar 0x563016372368 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56301639a7c8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56301639a7a8 <col:56> 'const int' lvalue Var 0x5630163635e0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56301639a800 <col:68> 'P' lvalue ParmVar 0x5630163723e0 'parser' 'P'
|     | `-DeclRefExpr 0x56301639a820 <col:76> 'T' lvalue ParmVar 0x563016372488 'x' 'T &'
|     `-ReturnStmt 0x56301639a8b0 <line:596:9, col:17>
|       `-UnaryOperator 0x56301639a898 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56301639a888 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016372bc8 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x563016372690 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016372708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016372b28 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x5630163727c8 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016372840 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x563016372a00 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56301639aa30 <col:65, line:614:5>
|     `-ReturnStmt 0x56301639aa20 <line:613:9, col:46>
|       `-CallExpr 0x56301639a9e0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56301639a8f0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639a960 <col:25> 'const char *' lvalue ParmVar 0x5630163727c8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56301639a980 <col:34> 'int' 0
|         |-DeclRefExpr 0x56301639a9a0 <col:37> 'P' lvalue ParmVar 0x563016372840 'parser' 'P'
|         `-DeclRefExpr 0x56301639a9c0 <col:45> 'Vector<T>' lvalue ParmVar 0x563016372a00 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x563016372ff8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x563016372c38 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563016372f58 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x563016372cf0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016372e40 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56301639ac50 <col:55, line:618:5>
|     `-ReturnStmt 0x56301639ac40 <line:617:9, col:55>
|       `-CallExpr 0x56301639ac00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56301639aa58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639aac8 <col:25> 'const char *' lvalue ParmVar 0x563016372cf0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56301639aae8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56301639abc0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56301639abe0 <col:54> 'Vector<T>' lvalue ParmVar 0x563016372e40 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x5630163735c8 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x563016373060 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163730d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016373528 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x563016373198 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016373218 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563016373290 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x5630163733e0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56301639ae48 <col:76, line:623:5>
|     |-CallExpr 0x56301639adc8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56301639ac68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56301639aca8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56301639acb8 <col:34> 'const char *' lvalue ParmVar 0x563016373198 'keyword' 'const char *'
|     | |-BinaryOperator 0x56301639ad68 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56301639ad18 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56301639acd8 <col:43> 'int' lvalue ParmVar 0x563016373218 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56301639ad50 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56301639ad30 <col:51> 'const int' lvalue Var 0x5630163635e0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56301639ad88 <col:63> 'P' lvalue ParmVar 0x563016373290 'parser' 'P'
|     | `-DeclRefExpr 0x56301639ada8 <col:71> 'Vector<T>' lvalue ParmVar 0x5630163733e0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56301639ae38 <line:622:9, col:17>
|       `-UnaryOperator 0x56301639ae20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56301639ae10 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016373b08 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x563016373640 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163736b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016373a68 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x563016373778 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163737f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563016373940 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56301639b0b0 <col:66, line:627:5>
|     `-ReturnStmt 0x56301639b0a0 <line:626:9, col:59>
|       `-CallExpr 0x56301639b060 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56301639ae78 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56301639aee8 <col:25> 'const char *' lvalue ParmVar 0x563016373778 'keyword' 'const char *'
|         |-DeclRefExpr 0x56301639af08 <col:34> 'int' lvalue ParmVar 0x5630163737f8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56301639b020 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56301639b040 <col:58> 'Vector<T>' lvalue ParmVar 0x563016373940 'x' 'Vector<T> &'
|-CXXMethodDecl 0x563016373b98 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56301639b130 <col:25, line:633:5>
|   `-ReturnStmt 0x56301639b120 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56301639b108 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56301639b0d8 <col:16> 'const bool' lvalue ->_status 0x563016381638
|         `-CXXThisExpr 0x56301639b0c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x563016373d18 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x563016373c50 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56301639b218 <col:27, line:639:5>
|   |-BinaryOperator 0x56301639b1c0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56301639b148 <col:9> 'bool' lvalue ParmVar 0x563016373c50 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56301639b1a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56301639b178 <col:13> 'bool' lvalue ->_status 0x563016381638
|   |     `-CXXThisExpr 0x56301639b168 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56301639b208 <line:638:9, col:17>
|     `-UnaryOperator 0x56301639b1f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56301639b1e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x563016373e98 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563016373dd8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56301639b308 <col:39, line:644:5>
|   |-BinaryOperator 0x56301639b2b0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56301639b238 <col:9> 'bool' lvalue ParmVar 0x563016373dd8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56301639b298 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56301639b268 <col:13> 'const bool' lvalue ->_status 0x563016381638
|   |     `-CXXThisExpr 0x56301639b258 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56301639b2f8 <line:643:9, col:17>
|     `-UnaryOperator 0x56301639b2e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56301639b2d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x563016373f60 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56301639b3b0 <col:30, line:651:5>
|   `-ReturnStmt 0x56301639b3a0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56301639b388 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56301639b358 <col:16> 'bool' lvalue ->_read_status 0x563016277750
|         `-ImplicitCastExpr 0x56301639b338 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56301639b328 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x5630163740a8 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x563016374018 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56301639b4b8 <col:32, line:658:5>
|   |-BinaryOperator 0x56301639b460 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56301639b3c8 <col:9> 'bool' lvalue ParmVar 0x563016374018 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56301639b448 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56301639b418 <col:13> 'bool' lvalue ->_read_status 0x563016277750
|   |     `-ImplicitCastExpr 0x56301639b3f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56301639b3e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56301639b4a8 <line:657:9, col:17>
|     `-UnaryOperator 0x56301639b490 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56301639b480 <col:17> 'Args *' this
|-CXXMethodDecl 0x5630163741f8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x563016374168 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56301639b5c8 <col:44, line:663:5>
|   |-BinaryOperator 0x56301639b570 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56301639b4d8 <col:9> 'bool' lvalue ParmVar 0x563016374168 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56301639b558 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56301639b528 <col:13> 'bool' lvalue ->_read_status 0x563016277750
|   |     `-ImplicitCastExpr 0x56301639b508 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56301639b4f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56301639b5b8 <line:662:9, col:17>
|     `-UnaryOperator 0x56301639b5a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56301639b590 <col:17> 'const Args *' this
|-CXXMethodDecl 0x5630163742c0 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x563016374388 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x563016374450 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x563016374518 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x563016374828 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x5630163745b8 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563016374788 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x563016374698 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56301639b980 <col:19, line:706:5>
|     `-IfStmt 0x56301639b958 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56301639b6c8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56301639b888 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56301639b858 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56301639b818 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56301639b720 <col:42> '<bound member function type>' ->simple_slot 0x563016394aa0
|       |     | `-CXXThisExpr 0x56301639b710 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x56301639b7b8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x56301639b770 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x563016101648
|       |     | `-DeclRefExpr 0x56301639b750 <col:55> 'T' lvalue ParmVar 0x563016374698 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56301639b7f8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56301639b948 <line:705:13, col:34>
|         `-CallExpr 0x56301639b920 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56301639b8a8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56301639b900 <col:33> 'T' lvalue ParmVar 0x563016374698 'x' 'T &'
|-FunctionTemplateDecl 0x563016374af8 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x563016374888 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563016374a58 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x563016374968 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56301639bd60 <col:31, line:717:5>
|     |-DeclStmt 0x56301639bac0 <line:713:9, col:23>
|     | `-VarDecl 0x56301639b9a8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56301639ba98 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56301639ba20 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56301639ba78 <col:21> 'T' lvalue ParmVar 0x563016374968 'x' 'T &'
|     |-IfStmt 0x56301639bd10 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56301639bbb8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56301639bcf0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56301639bc90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56301639bc20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|     |   | `-DeclRefExpr 0x56301639bc00 <col:14> 'T *' lvalue Var 0x56301639b9a8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56301639bcd0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56301639bd48 <line:716:9, col:16>
|       `-DeclRefExpr 0x56301639bd28 <col:16> 'T *' lvalue Var 0x56301639b9a8 's' 'T *'
|-FunctionTemplateDecl 0x563016374f08 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x563016374b58 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563016374bd8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x563016374e68 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x563016374cb8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x563016374d58 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56301639c070 <col:37, line:726:5>
|     |-IfStmt 0x56301639c000 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56301639c020 <line:723:13, col:26>
|     | | `-VarDecl 0x56301639bdc8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56301639beb8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56301639be40 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56301639be98 <col:25> 'T' lvalue ParmVar 0x563016374cb8 'x' 'T &'
|     | |-DeclRefExpr 0x56301639bee0 <col:16> 'T *' lvalue Var 0x56301639bdc8 's' 'T *'
|     | `-BinaryOperator 0x56301639bfe0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56301639bf90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56301639bf20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|     |   | `-DeclRefExpr 0x56301639bf00 <col:14> 'T *' lvalue Var 0x56301639bdc8 's' 'T *'
|     |   `-DeclRefExpr 0x56301639bfc0 <col:18> 'const V' lvalue ParmVar 0x563016374d58 'value' 'const V &'
|     `-ReturnStmt 0x56301639c060 <line:725:9, col:17>
|       `-UnaryOperator 0x56301639c048 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56301639c038 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x563016375308 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x563016374f70 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x563016375268 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x563016375020 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x5630163750a0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563016375148 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56301639ce90 <col:65, line:737:5>
|     |-DeclStmt 0x56301639c108 <line:732:9, col:26>
|     | `-VarDecl 0x56301639c0a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56301639ce58 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56301639ce78 <line:733:13, col:58>
|       | `-VarDecl 0x56301639c130 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56301639c310 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56301639c2e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56301639c2c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56301639c2a8 <col:26, col:58> 'String' (CXXTemporary 0x56301639c2a8)
|       |           `-CXXMemberCallExpr 0x56301639c238 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56301639c1a8 <col:26> '<bound member function type>' ->find 0x5630163940b8
|       |             | `-CXXThisExpr 0x56301639c198 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56301639c270 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56301639c1d8 <col:31> 'const char *' lvalue ParmVar 0x563016375020 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56301639c288 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56301639c1f8 <col:40> 'int' lvalue ParmVar 0x5630163750a0 'flags' 'int'
|       |             `-DeclRefExpr 0x56301639c218 <col:47> 'Args::Slot *' lvalue Var 0x56301639c0a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56301639c3c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56301639c3b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56301639c390 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56301639c360 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |       `-ImplicitCastExpr 0x56301639c348 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56301639c328 <col:20> 'String' lvalue Var 0x56301639c130 'str' 'String'
|       `-CompoundStmt 0x56301639ce38 <col:61, line:736:9>
|         |-DeclStmt 0x56301639c880 <line:734:13, col:76>
|         | `-VarDecl 0x56301639c418 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56301639c850 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56301639c7c0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56301639c808 <col:60> 'T' lvalue ParmVar 0x563016375148 'variable' 'T &'
|         |     `-UnaryOperator 0x56301639c838 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56301639c828 <col:71> 'Args *' this
|         `-CallExpr 0x56301639ce08 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56301639c8a8 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|           | `-CXXThisExpr 0x56301639c898 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56301639cdc8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56301639c8d8 <col:23> 'T *' lvalue Var 0x56301639c418 's' 'T *'
|           | `-CallExpr 0x56301639cd88 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56301639cb60 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56301639cc60 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56301639cc80 <col:86> 'String' lvalue Var 0x56301639c130 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56301639cd30 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56301639ccc0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|           |   | `-DeclRefExpr 0x56301639cca0 <col:92> 'T *' lvalue Var 0x56301639c418 's' 'T *'
|           |   `-UnaryOperator 0x56301639cd70 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56301639cd60 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56301639cde8 <col:103> 'Args::Slot *' lvalue Var 0x56301639c0a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563016375858 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563016375378 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x5630163753f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x5630163757b8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x5630163754b8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016375538 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5630163755d8 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x563016375678 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56301639dd30 <col:88, line:745:5>
|     |-DeclStmt 0x56301639cf28 <line:741:9, col:26>
|     | `-VarDecl 0x56301639cec0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56301639d148 <line:742:9, col:55>
|     | `-VarDecl 0x56301639cf50 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56301639d130 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56301639d100 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56301639d0e8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56301639d0c8 <col:22, col:54> 'String' (CXXTemporary 0x56301639d0c8)
|     |           `-CXXMemberCallExpr 0x56301639d058 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56301639cfc8 <col:22> '<bound member function type>' ->find 0x5630163940b8
|     |             | `-CXXThisExpr 0x56301639cfb8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56301639d090 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56301639cff8 <col:27> 'const char *' lvalue ParmVar 0x5630163754b8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56301639d0a8 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56301639d018 <col:36> 'int' lvalue ParmVar 0x563016375538 'flags' 'int'
|     |             `-DeclRefExpr 0x56301639d038 <col:43> 'Args::Slot *' lvalue Var 0x56301639cec0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56301639d520 <line:743:9, col:72>
|     | `-VarDecl 0x56301639d198 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56301639d4f0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56301639d460 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56301639d4a8 <col:56> 'T' lvalue ParmVar 0x5630163755d8 'variable' 'T &'
|     |     `-UnaryOperator 0x56301639d4d8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56301639d4c8 <col:67> 'Args *' this
|     `-CallExpr 0x56301639dd00 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56301639d548 <col:9> '<bound member function type>' ->postparse 0x5630163942c8
|       | `-CXXThisExpr 0x56301639d538 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56301639dcc0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56301639d578 <col:19> 'T *' lvalue Var 0x56301639d198 's' 'T *'
|       | `-ParenExpr 0x56301639dca0 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56301639dc70 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56301639dc58 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56301639dc40 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56301639dc20 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56301639dbf0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |     |       `-ImplicitCastExpr 0x56301639dbd8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56301639d598 <col:25> 'String' lvalue Var 0x56301639cf50 'str' 'String'
|       |     |-CallExpr 0x56301639da48 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56301639d820 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56301639d920 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56301639d940 <col:89> 'String' lvalue Var 0x56301639cf50 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56301639d9f0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56301639d980 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|       |     | | `-DeclRefExpr 0x56301639d960 <col:95> 'T *' lvalue Var 0x56301639d198 's' 'T *'
|       |     | `-UnaryOperator 0x56301639da30 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56301639da20 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56301639dbb8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56301639db98 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56301639db68 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56301639db18 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56301639daa8 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|       |         | | `-DeclRefExpr 0x56301639da88 <col:109> 'T *' lvalue Var 0x56301639d198 's' 'T *'
|       |         | `-DeclRefExpr 0x56301639db48 <col:113> 'const V' lvalue ParmVar 0x563016375678 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56301639db88 <col:120> 'bool' true
|       `-DeclRefExpr 0x56301639dce0 <col:128> 'Args::Slot *' lvalue Var 0x56301639cec0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x563016375d88 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x5630163758d0 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x563016375948 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x563016375ce8 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x563016375a08 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016375a88 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x563016375b00 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x563016375ba8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56301639e928 <col:75, line:754:5>
|     |-DeclStmt 0x56301639ddd8 <line:749:9, col:26>
|     | `-VarDecl 0x56301639dd70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56301639e8f0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56301639e910 <line:750:13, col:58>
|       | `-VarDecl 0x56301639de00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56301639dfe0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56301639dfb0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56301639df98 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56301639df78 <col:26, col:58> 'String' (CXXTemporary 0x56301639df78)
|       |           `-CXXMemberCallExpr 0x56301639df08 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56301639de78 <col:26> '<bound member function type>' ->find 0x5630163940b8
|       |             | `-CXXThisExpr 0x56301639de68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56301639df40 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56301639dea8 <col:31> 'const char *' lvalue ParmVar 0x563016375a08 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56301639df58 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56301639dec8 <col:40> 'int' lvalue ParmVar 0x563016375a88 'flags' 'int'
|       |             `-DeclRefExpr 0x56301639dee8 <col:47> 'Args::Slot *' lvalue Var 0x56301639dd70 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56301639e098 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56301639e080 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56301639e060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56301639e030 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |       `-ImplicitCastExpr 0x56301639e018 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56301639dff8 <col:20> 'String' lvalue Var 0x56301639de00 'str' 'String'
|       `-CompoundStmt 0x56301639e8d0 <col:61, line:753:9>
|         |-DeclStmt 0x56301639e470 <line:751:13, col:63>
|         | `-VarDecl 0x56301639e0e8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56301639e440 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56301639e3b0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56301639e3f8 <col:47> 'T' lvalue ParmVar 0x563016375ba8 'variable' 'T &'
|         |     `-UnaryOperator 0x56301639e428 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56301639e418 <col:58> 'Args *' this
|         `-CallExpr 0x56301639e8a0 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56301639e498 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|           | `-CXXThisExpr 0x56301639e488 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56301639e860 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56301639e4c8 <col:23> 'T *' lvalue Var 0x56301639e0e8 's' 'T *'
|           | `-CallExpr 0x56301639e820 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56301639e6b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56301639e6f8 <col:56> 'P' lvalue ParmVar 0x563016375b00 'parser' 'P'
|           |   |-DeclRefExpr 0x56301639e718 <col:64> 'String' lvalue Var 0x56301639de00 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56301639e7c8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56301639e758 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|           |   | `-DeclRefExpr 0x56301639e738 <col:70> 'T *' lvalue Var 0x56301639e0e8 's' 'T *'
|           |   `-UnaryOperator 0x56301639e808 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56301639e7f8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56301639e880 <col:81> 'Args::Slot *' lvalue Var 0x56301639dd70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x5630163763e8 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x563016375e00 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x563016375e78 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x563016375ef8 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x563016376348 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x563016375fc0 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x563016376040 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x5630163760b8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x563016376158 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x5630163761f8 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x5630163a1998 <col:98, line:762:5>
|     |-DeclStmt 0x56301639e9c0 <line:758:9, col:26>
|     | `-VarDecl 0x56301639e958 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56301639ebe0 <line:759:9, col:55>
|     | `-VarDecl 0x56301639e9e8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56301639ebc8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56301639eb98 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56301639eb80 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56301639eb60 <col:22, col:54> 'String' (CXXTemporary 0x56301639eb60)
|     |           `-CXXMemberCallExpr 0x56301639eaf0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56301639ea60 <col:22> '<bound member function type>' ->find 0x5630163940b8
|     |             | `-CXXThisExpr 0x56301639ea50 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56301639eb28 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56301639ea90 <col:27> 'const char *' lvalue ParmVar 0x563016375fc0 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56301639eb40 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56301639eab0 <col:36> 'int' lvalue ParmVar 0x563016376040 'flags' 'int'
|     |             `-DeclRefExpr 0x56301639ead0 <col:43> 'Args::Slot *' lvalue Var 0x56301639e958 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x5630163a12e0 <line:760:9, col:59>
|     | `-VarDecl 0x56301639ec38 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5630163a12b0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56301639ef40 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56301639ef88 <col:43> 'T' lvalue ParmVar 0x563016376158 'variable' 'T &'
|     |     `-UnaryOperator 0x56301639efb8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56301639efa8 <col:54> 'Args *' this
|     `-CallExpr 0x5630163a1968 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x5630163a1308 <col:9> '<bound member function type>' ->postparse 0x5630163942c8
|       | `-CXXThisExpr 0x5630163a12f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x5630163a1928 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x5630163a1338 <col:19> 'T *' lvalue Var 0x56301639ec38 's' 'T *'
|       | `-ParenExpr 0x5630163a1908 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x5630163a18d8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x5630163a18c0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x5630163a18a8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x5630163a1888 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x5630163a1858 <col:25> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |     |       `-ImplicitCastExpr 0x5630163a1840 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x5630163a1358 <col:25> 'String' lvalue Var 0x56301639e9e8 'str' 'String'
|       |     |-CallExpr 0x5630163a16b0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x5630163a1540 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x5630163a1588 <col:59> 'P' lvalue ParmVar 0x5630163760b8 'parser' 'P'
|       |     | |-DeclRefExpr 0x5630163a15a8 <col:67> 'String' lvalue Var 0x56301639e9e8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x5630163a1658 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x5630163a15e8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|       |     | | `-DeclRefExpr 0x5630163a15c8 <col:73> 'T *' lvalue Var 0x56301639ec38 's' 'T *'
|       |     | `-UnaryOperator 0x5630163a1698 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x5630163a1688 <col:77> 'Args *' this
|       |     `-ParenExpr 0x5630163a1820 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x5630163a1800 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x5630163a17d0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x5630163a1780 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x5630163a1710 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|       |         | | `-DeclRefExpr 0x5630163a16f0 <col:87> 'T *' lvalue Var 0x56301639ec38 's' 'T *'
|       |         | `-DeclRefExpr 0x5630163a17b0 <col:91> 'const V' lvalue ParmVar 0x5630163761f8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x5630163a17f0 <col:98> 'bool' true
|       `-DeclRefExpr 0x5630163a1948 <col:106> 'Args::Slot *' lvalue Var 0x56301639e958 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56301637e6b8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x563016376468 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x5630163764e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x563016376568 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56301637e618 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x563016376630 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301637e310 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56301637e388 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56301637e428 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56301637e4c8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x5630163a2978 <col:60, line:773:5>
|     |-DeclStmt 0x5630163a1a40 <line:767:9, col:26>
|     | `-VarDecl 0x5630163a19d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5630163a2940 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x5630163a2960 <line:768:13, col:58>
|       | `-VarDecl 0x5630163a1a68 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5630163a1c48 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5630163a1c18 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5630163a1c00 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5630163a1be0 <col:26, col:58> 'String' (CXXTemporary 0x5630163a1be0)
|       |           `-CXXMemberCallExpr 0x5630163a1b70 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5630163a1ae0 <col:26> '<bound member function type>' ->find 0x5630163940b8
|       |             | `-CXXThisExpr 0x5630163a1ad0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5630163a1ba8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5630163a1b10 <col:31> 'const char *' lvalue ParmVar 0x563016376630 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5630163a1bc0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5630163a1b30 <col:40> 'int' lvalue ParmVar 0x56301637e310 'flags' 'int'
|       |             `-DeclRefExpr 0x5630163a1b50 <col:47> 'Args::Slot *' lvalue Var 0x5630163a19d8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5630163a1d00 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5630163a1ce8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5630163a1cc8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5630163a1c98 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |       `-ImplicitCastExpr 0x5630163a1c80 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5630163a1c60 <col:20> 'String' lvalue Var 0x5630163a1a68 'str' 'String'
|       `-CompoundStmt 0x5630163a2918 <col:61, line:772:9>
|         |-DeclStmt 0x5630163a2040 <line:769:13, col:66>
|         | `-VarDecl 0x5630163a1d58 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x5630163a2010 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5630163a1f80 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5630163a1fc8 <col:49> 'T1' lvalue ParmVar 0x56301637e428 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x5630163a1ff8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5630163a1fe8 <col:61> 'Args *' this
|         |-DeclStmt 0x5630163a23b0 <line:770:13, col:66>
|         | `-VarDecl 0x5630163a20c8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x5630163a2380 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x5630163a22f0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x5630163a2338 <col:49> 'T2' lvalue ParmVar 0x56301637e4c8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x5630163a2368 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x5630163a2358 <col:61> 'Args *' this
|         `-CallExpr 0x5630163a28e8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x5630163a23d8 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|           | `-CXXThisExpr 0x5630163a23c8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x5630163a28a8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x5630163a2448 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x5630163a2408 <col:23> 'T1 *' lvalue Var 0x5630163a1d58 's1' 'T1 *'
|           | | `-DeclRefExpr 0x5630163a2428 <col:29> 'T2 *' lvalue Var 0x5630163a20c8 's2' 'T2 *'
|           | `-CallExpr 0x5630163a2860 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x5630163a2630 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x5630163a2678 <col:63> 'P' lvalue ParmVar 0x56301637e388 'parser' 'P'
|           |   |-DeclRefExpr 0x5630163a2698 <col:71> 'String' lvalue Var 0x5630163a1a68 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x5630163a2748 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5630163a26d8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|           |   | `-DeclRefExpr 0x5630163a26b8 <col:77> 'T1 *' lvalue Var 0x5630163a1d58 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x5630163a2808 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x5630163a2798 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|           |   | `-DeclRefExpr 0x5630163a2778 <col:82> 'T2 *' lvalue Var 0x5630163a20c8 's2' 'T2 *'
|           |   `-UnaryOperator 0x5630163a2848 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x5630163a2838 <col:87> 'Args *' this
|           `-DeclRefExpr 0x5630163a28c8 <col:94> 'Args::Slot *' lvalue Var 0x5630163a19d8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56301637eaa8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56301637e738 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301637ea08 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56301637e7f0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301637e870 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56301637e8e8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x5630163a2e90 <col:67, line:780:5>
|     |-DeclStmt 0x5630163a2a10 <line:777:9, col:26>
|     | `-VarDecl 0x5630163a29a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x5630163a2e58 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x5630163a2e78 <line:778:13, col:58>
|       | `-VarDecl 0x5630163a2a38 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x5630163a2c18 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x5630163a2be8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x5630163a2bd0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x5630163a2bb0 <col:26, col:58> 'String' (CXXTemporary 0x5630163a2bb0)
|       |           `-CXXMemberCallExpr 0x5630163a2b40 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x5630163a2ab0 <col:26> '<bound member function type>' ->find 0x5630163940b8
|       |             | `-CXXThisExpr 0x5630163a2aa0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x5630163a2b78 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5630163a2ae0 <col:31> 'const char *' lvalue ParmVar 0x56301637e7f0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x5630163a2b90 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x5630163a2b00 <col:40> 'int' lvalue ParmVar 0x56301637e870 'flags' 'int'
|       |             `-DeclRefExpr 0x5630163a2b20 <col:47> 'Args::Slot *' lvalue Var 0x5630163a29a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x5630163a2cd0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x5630163a2cb8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x5630163a2c98 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x5630163a2c68 <col:20> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|       |       `-ImplicitCastExpr 0x5630163a2c50 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x5630163a2c30 <col:20> 'String' lvalue Var 0x5630163a2a38 'str' 'String'
|       `-CallExpr 0x5630163a2e28 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x5630163a2cf8 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|         | `-CXXThisExpr 0x5630163a2ce8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x5630163a2dd8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x5630163a2d48 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x5630163a2d28 <col:23> 'P' lvalue ParmVar 0x56301637e8e8 'parser' 'P'
|         | |-DeclRefExpr 0x5630163a2d90 <col:36> 'String' lvalue Var 0x5630163a2a38 'str' 'String'
|         | `-UnaryOperator 0x5630163a2dc0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x5630163a2db0 <col:42> 'Args *' this
|         `-DeclRefExpr 0x5630163a2e08 <col:49> 'Args::Slot *' lvalue Var 0x5630163a29a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56301637ee48 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56301637eb18 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56301637eda8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56301637ebd0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301637ec50 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56301637ecc8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x5630163a3800 <col:71, line:792:5>
|     |-DeclStmt 0x5630163a2f28 <line:784:9, col:26>
|     | `-VarDecl 0x5630163a2ec0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5630163a2ff8 <line:785:9, col:29>
|     | `-VarDecl 0x5630163a2f58 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5630163a2fe0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5630163a2fc0 <col:28> 'int' 1
|     |-WhileStmt 0x5630163a36b0 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x5630163a36d0 <line:786:16, col:61>
|     | | `-VarDecl 0x5630163a3020 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5630163a3200 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5630163a31d0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5630163a31b8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5630163a3198 <col:29, col:61> 'String' (CXXTemporary 0x5630163a3198)
|     | |           `-CXXMemberCallExpr 0x5630163a3128 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5630163a3098 <col:29> '<bound member function type>' ->find 0x5630163940b8
|     | |             | `-CXXThisExpr 0x5630163a3088 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5630163a3160 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5630163a30c8 <col:34> 'const char *' lvalue ParmVar 0x56301637ebd0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5630163a3178 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5630163a30e8 <col:43> 'int' lvalue ParmVar 0x56301637ec50 'flags' 'int'
|     | |             `-DeclRefExpr 0x5630163a3108 <col:50> 'Args::Slot *' lvalue Var 0x5630163a2ec0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5630163a32b8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5630163a32a0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5630163a3280 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5630163a3250 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|     | |       `-ImplicitCastExpr 0x5630163a3238 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5630163a3218 <col:23> 'String' lvalue Var 0x5630163a3020 'str' 'String'
|     | `-CompoundStmt 0x5630163a3688 <col:64, line:790:9>
|     |   |-CallExpr 0x5630163a3410 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x5630163a32e0 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|     |   | | `-CXXThisExpr 0x5630163a32d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5630163a33c0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5630163a3330 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5630163a3310 <col:23> 'P' lvalue ParmVar 0x56301637ecc8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5630163a3378 <col:36> 'String' lvalue Var 0x5630163a3020 'str' 'String'
|     |   | | `-UnaryOperator 0x5630163a33a8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5630163a3398 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x5630163a33f0 <col:49> 'Args::Slot *' lvalue Var 0x5630163a2ec0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5630163a35a8 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5630163a3440 <col:13> 'int' lvalue Var 0x5630163a2f58 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5630163a3590 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5630163a3570 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5630163a34d8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5630163a34b8 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5630163a34a0 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5630163a3460 <col:28> 'int' lvalue Var 0x5630163a2f58 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5630163a3480 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5630163a3558 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5630163a3528 <col:49> 'bool' lvalue ->_read_status 0x563016277750
|     |   |         `-ImplicitCastExpr 0x5630163a3508 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5630163a34f8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5630163a3658 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5630163a35c8 <col:13> 'int' lvalue ParmVar 0x56301637ec50 'flags' 'int'
|     |     `-UnaryOperator 0x5630163a3640 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5630163a3628 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5630163a3608 <col:23> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5630163a37e0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5630163a3718 <col:9> 'bool' lvalue ->_read_status 0x563016277750
|       | `-ImplicitCastExpr 0x5630163a36f8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5630163a36e8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5630163a37c0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5630163a37a0 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5630163a3788 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5630163a3748 <col:25> 'int' lvalue Var 0x5630163a2f58 'read_status' 'int'
|           `-IntegerLiteral 0x5630163a3768 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56301637f328 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56301637eeb8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56301637ef38 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56301637f288 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56301637eff8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301637f078 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56301637f0f0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56301637f198 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x5630163a4790 <col:84, line:805:5>
|     |-DeclStmt 0x5630163a38a8 <line:796:9, col:26>
|     | `-VarDecl 0x5630163a3840 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5630163a3978 <line:797:9, col:29>
|     | `-VarDecl 0x5630163a38d8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5630163a3960 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5630163a3940 <col:28> 'int' 1
|     |-DeclStmt 0x5630163a3cb0 <line:798:9, col:71>
|     | `-VarDecl 0x5630163a39c8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x5630163a3c80 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x5630163a3bf0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x5630163a3c38 <col:55> 'T' lvalue ParmVar 0x56301637f198 'variable' 'T &'
|     |     `-UnaryOperator 0x5630163a3c68 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x5630163a3c58 <col:66> 'Args *' this
|     |-WhileStmt 0x5630163a4640 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x5630163a4660 <line:799:16, col:61>
|     | | `-VarDecl 0x5630163a3cd8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5630163a3eb8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5630163a3e88 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5630163a3e70 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5630163a3e50 <col:29, col:61> 'String' (CXXTemporary 0x5630163a3e50)
|     | |           `-CXXMemberCallExpr 0x5630163a3de0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5630163a3d50 <col:29> '<bound member function type>' ->find 0x5630163940b8
|     | |             | `-CXXThisExpr 0x5630163a3d40 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5630163a3e18 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5630163a3d80 <col:34> 'const char *' lvalue ParmVar 0x56301637eff8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5630163a3e30 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5630163a3da0 <col:43> 'int' lvalue ParmVar 0x56301637f078 'flags' 'int'
|     | |             `-DeclRefExpr 0x5630163a3dc0 <col:50> 'Args::Slot *' lvalue Var 0x5630163a3840 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5630163a3f70 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5630163a3f58 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5630163a3f38 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5630163a3f08 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|     | |       `-ImplicitCastExpr 0x5630163a3ef0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5630163a3ed0 <col:23> 'String' lvalue Var 0x5630163a3cd8 'str' 'String'
|     | `-CompoundStmt 0x5630163a4618 <col:64, line:803:9>
|     |   |-CallExpr 0x5630163a43a0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x5630163a3f98 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|     |   | | `-CXXThisExpr 0x5630163a3f88 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x5630163a4360 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x5630163a3fc8 <col:23> 'T *' lvalue Var 0x5630163a39c8 's' 'T *'
|     |   | | `-CallExpr 0x5630163a4320 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x5630163a41b0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x5630163a41f8 <col:56> 'P' lvalue ParmVar 0x56301637f0f0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x5630163a4218 <col:64> 'String' lvalue Var 0x5630163a3cd8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x5630163a42c8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x5630163a4258 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|     |   | |   | `-DeclRefExpr 0x5630163a4238 <col:70> 'T *' lvalue Var 0x5630163a39c8 's' 'T *'
|     |   | |   `-UnaryOperator 0x5630163a4308 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x5630163a42f8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x5630163a4380 <col:81> 'Args::Slot *' lvalue Var 0x5630163a3840 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x5630163a4538 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5630163a43d0 <col:13> 'int' lvalue Var 0x5630163a38d8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5630163a4520 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5630163a4500 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5630163a4468 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5630163a4448 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5630163a4430 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5630163a43f0 <col:28> 'int' lvalue Var 0x5630163a38d8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5630163a4410 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5630163a44e8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5630163a44b8 <col:49> 'bool' lvalue ->_read_status 0x563016277750
|     |   |         `-ImplicitCastExpr 0x5630163a4498 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5630163a4488 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5630163a45e8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5630163a4558 <col:13> 'int' lvalue ParmVar 0x56301637f078 'flags' 'int'
|     |     `-UnaryOperator 0x5630163a45d0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5630163a45b8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5630163a4598 <col:23> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5630163a4770 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5630163a46a8 <col:9> 'bool' lvalue ->_read_status 0x563016277750
|       | `-ImplicitCastExpr 0x5630163a4688 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5630163a4678 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5630163a4750 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5630163a4730 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5630163a4718 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5630163a46d8 <col:25> 'int' lvalue Var 0x5630163a38d8 'read_status' 'int'
|           `-IntegerLiteral 0x5630163a46f8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56301637f908 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56301637f3a0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56301637f418 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56301637f868 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56301637f4d8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56301637f558 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56301637f5d0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56301637f720 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x5630163a5598 <col:87, line:821:5>
|     |-DeclStmt 0x5630163a4840 <line:809:9, col:26>
|     | `-VarDecl 0x5630163a47d8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x5630163a4910 <line:810:9, col:29>
|     | `-VarDecl 0x5630163a4870 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x5630163a48f8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x5630163a48d8 <col:28> 'int' 1
|     |-DeclStmt 0x5630163a4b58 <line:811:9, col:38>
|     | `-VarDecl 0x5630163a4a40 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x5630163a4b30 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x5630163a4ab8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x5630163a4b10 <col:29> 'Vector<T>' lvalue ParmVar 0x56301637f720 'variable' 'Vector<T> &'
|     |-WhileStmt 0x5630163a5448 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x5630163a5468 <line:812:16, col:61>
|     | | `-VarDecl 0x5630163a4b80 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x5630163a4d60 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x5630163a4d30 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x5630163a4d18 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x5630163a4cf8 <col:29, col:61> 'String' (CXXTemporary 0x5630163a4cf8)
|     | |           `-CXXMemberCallExpr 0x5630163a4c88 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x5630163a4bf8 <col:29> '<bound member function type>' ->find 0x5630163940b8
|     | |             | `-CXXThisExpr 0x5630163a4be8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x5630163a4cc0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5630163a4c28 <col:34> 'const char *' lvalue ParmVar 0x56301637f4d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x5630163a4cd8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x5630163a4c48 <col:43> 'int' lvalue ParmVar 0x56301637f558 'flags' 'int'
|     | |             `-DeclRefExpr 0x5630163a4c68 <col:50> 'Args::Slot *' lvalue Var 0x5630163a47d8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x5630163a4e18 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x5630163a4e00 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x5630163a4de0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x5630163a4db0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x5630160c4618
|     | |       `-ImplicitCastExpr 0x5630163a4d98 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x5630163a4d78 <col:23> 'String' lvalue Var 0x5630163a4b80 'str' 'String'
|     | `-CompoundStmt 0x5630163a5410 <col:64, line:819:9>
|     |   |-DeclStmt 0x5630163a4ed8 <line:813:13, col:23>
|     |   | `-VarDecl 0x5630163a4e40 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x5630163a4eb8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x5630163a5058 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x5630163a4f00 <col:13> '<bound member function type>' ->postparse 0x5630163942c8
|     |   | | `-CXXThisExpr 0x5630163a4ef0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x5630163a5000 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x5630163a4f50 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x5630163a4f30 <col:23> 'P' lvalue ParmVar 0x56301637f5d0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x5630163a4f98 <col:36> 'String' lvalue Var 0x5630163a4b80 'str' 'String'
|     |   | | |-DeclRefExpr 0x5630163a4fb8 <col:41> 'T' lvalue Var 0x5630163a4e40 'sx' 'T'
|     |   | | `-UnaryOperator 0x5630163a4fe8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x5630163a4fd8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x5630163a5038 <col:53> 'Args::Slot *' lvalue Var 0x5630163a47d8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x5630163a51b0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x5630163a50e8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x5630163a50b8 <col:17> 'bool' lvalue ->_read_status 0x563016277750
|     |   | |   `-ImplicitCastExpr 0x5630163a5098 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x5630163a5088 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x5630163a5188 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x5630163a5120 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x5630163a5100 <col:17> 'Vector<T> *' lvalue Var 0x5630163a4a40 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x5630163a5168 <col:30> 'T' lvalue Var 0x5630163a4e40 'sx' 'T'
|     |   |-BinaryOperator 0x5630163a5330 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x5630163a51c8 <col:13> 'int' lvalue Var 0x5630163a4870 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x5630163a5318 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x5630163a52f8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x5630163a5260 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x5630163a5240 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x5630163a5228 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x5630163a51e8 <col:28> 'int' lvalue Var 0x5630163a4870 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x5630163a5208 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x5630163a52e0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x5630163a52b0 <col:49> 'bool' lvalue ->_read_status 0x563016277750
|     |   |         `-ImplicitCastExpr 0x5630163a5290 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x5630163a5280 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x5630163a53e0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x5630163a5350 <col:13> 'int' lvalue ParmVar 0x56301637f558 'flags' 'int'
|     |     `-UnaryOperator 0x5630163a53c8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x5630163a53b0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x5630163a5390 <col:23> 'const int' lvalue Var 0x5630163632f8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x5630163a5578 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x5630163a54b0 <col:9> 'bool' lvalue ->_read_status 0x563016277750
|       | `-ImplicitCastExpr 0x5630163a5490 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x5630163a5480 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x5630163a5558 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x5630163a5538 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x5630163a5520 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x5630163a54e0 <col:25> 'int' lvalue Var 0x5630163a4870 'read_status' 'int'
|           `-IntegerLiteral 0x5630163a5500 <col:40> 'int' 1
|-AccessSpecDecl 0x56301637f980 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56301637f9a8 prev 0x5630163615f8 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56301637faa0 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56301637fb90 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x5630163a55d0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56301637fc80 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x5630163a55e0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56301637fd80 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56301637fe30 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56301637fed8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56301637fed8
| | `-ParmVarDecl 0x56301637ffe8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x5630163807a8 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x5630163807a8
|   `-ParmVarDecl 0x5630163808b8 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x563016380058 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x5630163801b8 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x5630163803b0 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x563016380260 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x5630163802d8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x5630163a57c0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x563016380668 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x5630163a5630 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x5630163a55f0 <col:20> 'void *' lvalue ParmVar 0x563016380260 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x5630163806d0 '_slot' 'char *'
| | | `-CXXNewExpr 0x5630163a56b8 <col:32, col:45> 'char *' array Function 0x563015ee72a8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x5630163a56a0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x5630163a5670 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x5630163802d8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x563016380730 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x5630163a5780 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x5630163a5740 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x5630163802d8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x5630163a5840 <col:61, line:838:9>
| |-CXXDestructorDecl 0x5630163804b0 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56301637fc80 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x5630163a58c8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x5630163a58a8 <line:840:13, col:22> 'void' array Function 0x563015ee7608 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x5630163a5890 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x5630163a5860 <col:22> 'char *' lvalue ->_slot 0x5630163806d0
| |         `-CXXThisExpr 0x5630163a5850 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x5630163805b0 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56301637fd80 Slot::store 'void ()' ]
| | `-CompoundStmt 0x5630163a5ab8 <col:22, line:844:9>
| |   `-CallExpr 0x5630163a5a20 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x5630163a5a08 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5630163a59e8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x563015ff3068 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x5630163a5a58 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x5630163a5938 <col:20> 'void *' lvalue ->_ptr 0x563016380668
| |     |   `-CXXThisExpr 0x5630163a5928 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x5630163a5a88 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x5630163a5a70 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x5630163a5978 <col:26> 'char *' lvalue ->_slot 0x5630163806d0
| |     |     `-CXXThisExpr 0x5630163a5968 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x5630163a5aa0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x5630163a59b8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x563016380730
| |         `-CXXThisExpr 0x5630163a59a8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x563016380668 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x5630163806d0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x563016380730 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x563016380928 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563016380928
| | `-ParmVarDecl 0x563016380a38 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x563016380ad8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x563016380ad8
|   `-ParmVarDecl 0x563016380be8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x563016380d88 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x563016380c58 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x563016380cf8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x563016381020 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x563016381218 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x5630163810e8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x563016381398 '_ptr' 'T *'
|   | | `-ParenListExpr 0x5630163a5af0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x5630163a5ad0 <col:20> 'T *' lvalue ParmVar 0x5630163810e8 'ptr' 'T *'
|   | `-CompoundStmt 0x5630163a5b40 <col:25, line:854:9>
|   |-CXXMethodDecl 0x5630163812e8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56301637fd80 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x5630163a5cf0 <col:22, line:857:9>
|   |   `-CallExpr 0x5630163a5cc0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x5630163a5b50 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x5630160ab798 0x563016055ac8
|   |     |-CXXOperatorCallExpr 0x5630163a5c50 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x5630163a5be0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x5630162b8748 0x5630162b8368 0x5630162b7f98 0x5630162b7bb8 0x5630162b77d8 0x5630162b7408
|   |     | `-MemberExpr 0x5630163a5bb0 <col:29> 'T *' lvalue ->_ptr 0x563016381398
|   |     |   `-CXXThisExpr 0x5630163a5ba0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x5630163a5c90 <col:35> 'T' lvalue ->_slot 0x5630163813f8
|   |       `-CXXThisExpr 0x5630163a5c80 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x563016381398 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x5630163813f8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x563016381460 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x563016381560 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x5630163815b0 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x563016381540 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x563016381520 <col:31> 'int' 48
|-FieldDecl 0x5630163815d8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x563016381638 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x563016381698 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x5630163817d0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x563016393960 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x5630163939c0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x563016393a70 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x563016393c98 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x563016393ba0 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x563016393de8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x563016393d58 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x5630163940b8 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x563016393ea8 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x563016393f28 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x563016393fd0 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x5630163942c8 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x563016394180 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x5630163941f8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x563016394398 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x5630163944e8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x563016394450 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x563016394878 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x5630163945a8 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x563016394628 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x5630163946d0 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x563016394788 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x563016394aa0 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x563016394950 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x5630163949c8 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x563016394db8 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x563016394b50 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x563016394d18 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x563016394c28 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630160b44c0 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5630160b45d8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x5630160b4668 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x5630160b4738 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x5630160b4820 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x5630160b4a38 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5630160b48e0 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b4be8 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5630160b4af0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5630160b4d30 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x5630160b4ca0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x5630160b4e78 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5630160b4de8 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b4fc0 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x5630160b4f30 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b5088 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x5630160b51d0 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x5630160b5140 <col:28> col:31 'int'
|-CXXMethodDecl 0x5630160b5298 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x5630160b53e0 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x5630160b5350 <col:28> col:31 'int'
|-CXXMethodDecl 0x5630160b5558 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5630160b5498 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b56a0 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x5630160b5610 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b5768 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x5630160b5928 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5630160b5818 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5630160b5890 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b5b78 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5630160b59e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5630160b5a60 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5630160b5c28 <col:86> "" ""
|-CXXMethodDecl 0x5630160b5e98 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x5630160b5d08 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x5630160b5d80 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b6048 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5630160b5f58 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5630160b61f8 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x5630160b6100 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x5630160b64c8 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5630160b62b0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5630160b6328 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5630160b63a0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b67a8 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x5630160b6590 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x5630160b6608 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5630160b6680 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5630160b6860 <col:115> "" ""
|-AccessSpecDecl 0x5630160b68d0 <line:84:3, col:10> col:3 private
|-FieldDecl 0x5630160b6908 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630160b7e20 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5630160b7e20
| `-ParmVarDecl 0x5630160b7f28 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x5630160b7fc8 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5630160b7fc8
| `-ParmVarDecl 0x5630160b80d8 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x5630160ed708 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5630162df500 <col:7>
|-CXXConstructorDecl 0x5630160ed7e0 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x5630160ed7e0
| `-ParmVarDecl 0x5630160ed8f8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x5630160ed968 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x5630160ed968
| `-ParmVarDecl 0x5630160eda78 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x5630162e1f00 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630162ce0a8 prev 0x5630162c32b0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5630162ce1a0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x5630162ce290 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x5630162ce3b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x5630162ce538 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x5630162ce6b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x5630162ce838 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x5630162df668 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5630162dfed8 <col:11>
|-CXXDestructorDecl 0x5630162df740 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x5630162df878 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5630162df878
| `-ParmVarDecl 0x5630162df988 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x5630162dfa28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5630162dfa28
| `-ParmVarDecl 0x5630162dfb38 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x5630162e28f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x5630162e2a08 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x5630162e2c88 <col:11>
|   `-ReturnStmt 0x5630162e2c78 <col:11>
|     `-UnaryOperator 0x5630162e2c60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x5630162e2c50 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x5630162e2a78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5630162e2a78
  `-ParmVarDecl 0x5630162e2b88 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630162ce8a0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5630162ce9b8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x5630162cea58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x5630162ceac0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x5630162ceb28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x5630162ceb90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x5630162cebf0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x5630162cecb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x5630162ced10 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x5630162ced70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x5630162df578 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x5630162cea58 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x5630162dfee8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x5630162dff40 <col:12>
|-CXXConstructorDecl 0x5630162dfba8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5630162dfba8
| `-ParmVarDecl 0x5630162dfcb8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x5630162dfd58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5630162dfd58
| `-ParmVarDecl 0x5630162dfe68 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x5630162e1fe0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630162bc9c0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x5630162bcad8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x5630162bcb68 <col:16, col:22> col:16 public
|-EnumDecl 0x5630162bcb90 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x5630162bcc90 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x5630162bcd70 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162bcc70 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x5630162bcc50 <col:21> 'int' 28
| `-EnumConstantDecl 0x5630162bcd20 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x5630162bcd88 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162bcd00 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x5630162bcce0 <col:22> 'int' 64
|-CXXMethodDecl 0x5630162bd0c8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x5630162bcdb0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5630162bce30 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x5630162bcea8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5630162bcf20 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5630162bd188 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5630162bd388 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x5630162bd200 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x5630162bd278 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5630162bd438 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5630162bd598 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x5630162bd4a8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5630162bd640 <col:72> warn_unused_result ""
|-TypedefDecl 0x5630162bd9a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x5630162bd930 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x5630162bd8d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x5630162bd890 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x563015d944e0 'void'
|       |-PointerType 0x56301603cd60 'unsigned char *'
|       | `-BuiltinType 0x563015d945e0 'unsigned char'
|       |-TypedefType 0x563015e39350 'size_t' sugar
|       | |-Typedef 0x563015e04be0 'size_t'
|       | `-BuiltinType 0x563015d94640 'unsigned long'
|       `-PointerType 0x563015d94ce0 'void *'
|         `-BuiltinType 0x563015d944e0 'void'
|-CXXMethodDecl 0x5630162bde18 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x5630162bda10 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x5630162bda88 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5630162bdb20 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x5630162bdba0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x5630162d8510 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x5630162d84f8 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x5630162d84c0 <col:58> 'int' 0
| |-ParmVarDecl 0x5630162bdc20 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x5630162d8538 <col:76> 'int' 0
| |-ParmVarDecl 0x5630162bdca0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x5630162d8558 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x5630162bdee8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x5630162bdf68 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x5630162be028 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x5630162be0c8 <col:20>
| `-OptimizeNoneAttr 0x5630162be120 <col:30>
|-CXXMethodDecl 0x5630162be198 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x5630162be238 <col:20>
| `-OptimizeNoneAttr 0x5630162be290 <col:30>
|-CXXMethodDecl 0x5630162be308 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x5630162be3a8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x5630162be458 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x5630162be4f8 <col:20>
| |-OptimizeNoneAttr 0x5630162be550 <col:30>
| `-WarnUnusedResultAttr 0x5630162be578 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x5630162be5d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x5630162be670 <col:20>
| `-OptimizeNoneAttr 0x5630162be6c8 <col:30>
|-CXXMethodDecl 0x5630162be718 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x5630162be7b8 <col:20>
| `-OptimizeNoneAttr 0x5630162be810 <col:30>
|-CXXMethodDecl 0x5630162be858 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x5630162be8f8 <col:20>
| `-OptimizeNoneAttr 0x5630162be950 <col:30>
|-CXXMethodDecl 0x5630162be998 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5630162bea58 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x5630162beb20 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5630162bebe8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5630162beca8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5630162bedc8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x5630162d8620 <col:54, line:99:5>
|   `-ReturnStmt 0x5630162d8610 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x5630162d85f8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x5630162d85c8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5630162cf0a8
|         `-CXXThisExpr 0x5630162d85b8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x5630162bef68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x5630162bee78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x5630162d86d0 <col:67, line:103:5>
|   `-BinaryOperator 0x5630162d86b0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5630162d8648 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5630162cf0a8
|     | `-CXXThisExpr 0x5630162d8638 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5630162d8698 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x5630162d8678 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x5630162bee78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x5630162bf060 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x5630162d8750 <col:33, line:107:5>
|   `-ReturnStmt 0x5630162d8740 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x5630162d8728 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x5630162d86f8 <col:16> 'void *' lvalue ->_destructor_argument 0x5630162cf110
|         `-CXXThisExpr 0x5630162d86e8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5630162bf120 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x5630162d8d80 <col:25, line:113:5>
|   |-ParenExpr 0x5630162d8ac8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x5630162d8a98 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x5630162d8808 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x5630162d87e0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x5630162d87a8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x5630162d8778 <col:24> '<bound member function type>' ->shared 0x5630162be198
|   |   |       `-ImplicitCastExpr 0x5630162d87c8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x5630162d8768 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x5630162d8868 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162d8848 <col:42> 'int' 0
|   |   `-CallExpr 0x5630162d89f8 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x5630162d89e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162d89c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162d8a38 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162d88d8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x5630162d8a50 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162d8900 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162d8a68 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162d8938 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x5630162d8a80 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162d89a8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162d8990 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162d8958 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x5630162d8cc8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x5630162d8af8 <col:2> 'unsigned char *' lvalue ->_head 0x5630162ceeb0
|   | | `-CXXThisExpr 0x5630162d8ae8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x5630162d8cb0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x5630162d8c90 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x5630162d8b38 <col:10> 'unsigned char *' lvalue ->_data 0x5630162cef18
|   |     | `-CXXThisExpr 0x5630162d8b28 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x5630162d8c78 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x5630162d8c58 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x5630162d8b78 <col:18> 'unsigned char *' lvalue ->_tail 0x5630162cef80
|   |         | `-CXXThisExpr 0x5630162d8b68 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x5630162d8c40 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x5630162d8c20 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x5630162d8bb8 <col:26> 'unsigned char *' lvalue ->_end 0x5630162cefe8
|   |             | `-CXXThisExpr 0x5630162d8ba8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x5630162d8c08 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x5630162d8be8 <col:33> 'int' 0
|   `-BinaryOperator 0x5630162d8d60 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x5630162d8cf8 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x5630162cf0a8
|     | `-CXXThisExpr 0x5630162d8ce8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x5630162d8d48 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x5630162d8d28 <col:16> 'int' 0
|-CXXMethodDecl 0x5630162bf260 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5630162bf1d0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162bf308 <col:20>
| |-OptimizeNoneAttr 0x5630162bf360 <col:30>
| `-WarnUnusedResultAttr 0x5630162bf388 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x5630162bf458 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5630162bf3c8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162bf500 <col:20>
| |-OptimizeNoneAttr 0x5630162bf558 <col:30>
| `-WarnUnusedResultAttr 0x5630162bf580 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x5630162bf6b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5630162bf5c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5630162bf760 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x5630162bf860 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x5630162bf7d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162bf908 <col:20>
| `-OptimizeNoneAttr 0x5630162bf960 <col:30>
|-CXXMethodDecl 0x5630162bfa28 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x5630162bf998 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5630162bfad0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x5630162bfbd0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x5630162bfb40 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x5630162bfc78 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x5630162bfd78 <line:245:5, col:62> col:45 used take 'void (uint32_t)'
| |-ParmVarDecl 0x5630162bfce8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162bfe20 <col:20>
| `-OptimizeNoneAttr 0x5630162bfe78 <col:30>
|-CXXMethodDecl 0x5630162c0008 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x5630162bfeb8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x5630162bff30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x5630162d8578 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x5630162c00b8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x5630162c02b8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5630162c0130 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x5630162c01a8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162c04c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x5630162c0378 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5630162c03f0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162c06d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x5630162c0588 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x5630162c0608 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x5630162d8588 <col:39> 'int' 0
|-CXXMethodDecl 0x5630162c07a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x5630162c0870 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x5630162c0938 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x5630162c09f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5630162c0ac0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x5630162c0c08 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x5630162c0b78 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x5630162c0dd8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5630162c0cc8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x5630162c0d40 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162c0ea8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x5630162c0f68 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x5630162c1008 <col:20>
| `-OptimizeNoneAttr 0x5630162c1060 <col:30>
|-CXXMethodDecl 0x5630162c10b0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5630162c1150 <col:20>
| `-OptimizeNoneAttr 0x5630162c11a8 <col:30>
|-CXXMethodDecl 0x5630162c11f8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x5630162c12b8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5630162c1380 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x5630162c1420 <col:20>
| `-OptimizeNoneAttr 0x5630162c1478 <col:30>
|-CXXMethodDecl 0x5630162c15c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x5630162c14b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x5630162c1530 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162c1718 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x5630162c1688 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162c17f0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x5630162c18b0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x5630162c1950 <col:20>
| `-OptimizeNoneAttr 0x5630162c19a8 <col:30>
|-CXXMethodDecl 0x5630162c19f8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x5630162c1a98 <col:20>
| `-OptimizeNoneAttr 0x5630162c1af0 <col:30>
|-CXXMethodDecl 0x5630162c1b40 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x5630162c1c08 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x5630162c1ca8 <col:20>
| `-OptimizeNoneAttr 0x5630162c1d00 <col:30>
|-CXXMethodDecl 0x5630162c1d48 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x5630162c1e68 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x5630162c1fd8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x5630162c1f18 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x5630162c20c8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x5630162c2168 <col:20>
| `-OptimizeNoneAttr 0x5630162c21c0 <col:30>
|-CXXMethodDecl 0x5630162c2210 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x5630162c22d0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x5630162c2508 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x5630162c2380 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x5630162c23f8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162c25b8 <col:20>
| `-OptimizeNoneAttr 0x5630162c2610 <col:30>
|-CXXMethodDecl 0x5630162c26b8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x5630162c2758 <col:20>
| `-OptimizeNoneAttr 0x5630162c27b0 <col:30>
|-CXXMethodDecl 0x5630162c2800 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x5630162c28a0 <col:20>
| `-OptimizeNoneAttr 0x5630162c28f8 <col:30>
|-CXXMethodDecl 0x5630162c2940 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x5630162c29e0 <col:20>
| `-OptimizeNoneAttr 0x5630162c2a38 <col:30>
|-CXXMethodDecl 0x5630162c2b38 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x5630162c2a70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x5630162c2be0 <col:20>
| `-OptimizeNoneAttr 0x5630162c2c38 <col:30>
|-CXXMethodDecl 0x5630162c2df8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x5630162c2c70 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x5630162c2ce8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162c2ea8 <col:20>
| `-OptimizeNoneAttr 0x5630162c2f00 <col:30>
|-CXXMethodDecl 0x5630162c2fa8 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x5630162c30c8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x5630162c31e8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x5630162c3288 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x5630162c32b0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x5630162c33d8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x5630162c3478 <col:20>
| `-OptimizeNoneAttr 0x5630162c34d0 <col:30>
|-CXXMethodDecl 0x5630162c3578 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x5630162c3618 <col:20>
| `-OptimizeNoneAttr 0x5630162c3670 <col:30>
|-AccessSpecDecl 0x5630162c3698 <line:344:3, col:9> col:3 public
|-EnumDecl 0x5630162c36c0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x5630162c37c0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x5630162c3810 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162c37a0 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x5630162c3780 <col:14> 'int' 48
|-CXXMethodDecl 0x5630162c3878 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x5630162c3918 <col:20>
| `-OptimizeNoneAttr 0x5630162c3970 <col:30>
|-CXXMethodDecl 0x5630162c39e8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x5630162c3a88 <col:20>
| `-OptimizeNoneAttr 0x5630162c3ae0 <col:30>
|-CXXMethodDecl 0x5630162c3ba8 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x5630162c3b18 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x5630162c3d48 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x5630162c3ee8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x5630162c3df8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x5630162c3f90 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x5630162c4090 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5630162c4440 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c4070 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x5630162c4050 <col:9> 'int' 0
| |-EnumConstantDecl 0x5630162c4120 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5630162c4458 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c4100 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x5630162c40e0 <col:14> 'int' 1
| |-EnumConstantDecl 0x5630162c41b0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5630162c4470 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c4190 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x5630162c4170 <col:14> 'int' 2
| |-EnumConstantDecl 0x5630162c4240 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5630162c4488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c4220 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x5630162c4200 <col:14> 'int' 3
| |-EnumConstantDecl 0x5630162c42d0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5630162c44a0 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c42b0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x5630162c4290 <col:13> 'int' 4
| |-EnumConstantDecl 0x5630162c4360 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x5630162c44b8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c4340 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x5630162c4320 <col:13> 'int' 5
| `-EnumConstantDecl 0x5630162c43f0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x5630162c44d0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162c43d0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x5630162c43b0 <col:14> 'int' 6
|-CXXMethodDecl 0x5630162c4538 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x5630162c45d8 <col:20>
| `-OptimizeNoneAttr 0x5630162c4630 <col:30>
|-CXXMethodDecl 0x5630162c4728 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x5630162c4668 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x5630162c47d0 <col:20>
| `-OptimizeNoneAttr 0x5630162c4828 <col:30>
|-CXXMethodDecl 0x5630162c4898 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x5630162c49c0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x5630162c4b38 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x5630162c4a70 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x5630162c4c00 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x5630162c4cc8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x5630162c4e08 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x5630162c4d78 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x5630162c4eb0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x5630162c4fb0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5630162c51b0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c4f90 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x5630162c4f70 <col:23> 'int' 0
| |-EnumConstantDecl 0x5630162c5040 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5630162c51c8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c5020 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x5630162c5000 <col:45> 'int' 4
| |-EnumConstantDecl 0x5630162c50d0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x5630162c51e0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c50b0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x5630162c5090 <col:24> 'int' 0
| `-EnumConstantDecl 0x5630162c5160 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x5630162c51f8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162c5140 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x5630162c5120 <col:47> 'int' 16
|-CXXMethodDecl 0x5630162c5258 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x5630162c53c8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x5630162c5308 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x5630162c5470 <col:20>
| `-OptimizeNoneAttr 0x5630162c54c8 <col:30>
|-CXXMethodDecl 0x5630162c5518 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x5630162d8ea0 <col:18, col:36>
|   `-ReturnStmt 0x5630162d8e90 <col:20, col:33>
|     `-ImplicitCastExpr 0x5630162d8e78 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x5630162d8e58 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x5630162d8e28 <col:27> '<bound member function type>' ->xanno 0x5630162c3578
|           `-CXXThisExpr 0x5630162d8e18 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x5630162c5610 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x5630162d8fb0 <col:30, col:48>
|   `-ReturnStmt 0x5630162d8fa0 <col:32, col:45>
|     `-ImplicitCastExpr 0x5630162d8f88 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x5630162d8f68 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x5630162d8f38 <col:39> '<bound member function type>' ->xanno 0x5630162c33d8
|           `-CXXThisExpr 0x5630162d8f28 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x5630162c56f8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x5630162d9148 <col:24, col:50>
|   `-ReturnStmt 0x5630162d9138 <col:26, col:47>
|     `-UnaryOperator 0x5630162d9120 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5630162d9100 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x5630162d90e8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5630162d9098 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x5630162ce3b8
|         |   `-CXXMemberCallExpr 0x5630162d9078 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x5630162d9048 <col:34> '<bound member function type>' ->xanno 0x5630162c3578
|         |       `-CXXThisExpr 0x5630162d9038 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x5630162d90c8 <col:46> 'int' 0
|-CXXMethodDecl 0x5630162c5800 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x5630162d9318 <col:36, col:62>
|   `-ReturnStmt 0x5630162d9308 <col:38, col:59>
|     `-UnaryOperator 0x5630162d92f0 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5630162d92d0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5630162d92b8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5630162d9230 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x5630162ce3b8
|         |   `-CXXMemberCallExpr 0x5630162d9210 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5630162d91e0 <col:46> '<bound member function type>' ->xanno 0x5630162c33d8
|         |       `-CXXThisExpr 0x5630162d91d0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5630162d9260 <col:58> 'int' 0
|-CXXMethodDecl 0x5630162c5918 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x5630162d94b0 <col:26, col:53>
|   `-ReturnStmt 0x5630162d94a0 <col:28, col:50>
|     `-UnaryOperator 0x5630162d9488 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5630162d9468 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x5630162d9450 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5630162d9400 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x5630162ce6b8
|         |   `-CXXMemberCallExpr 0x5630162d93e0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x5630162d93b0 <col:36> '<bound member function type>' ->xanno 0x5630162c3578
|         |       `-CXXThisExpr 0x5630162d93a0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x5630162d9430 <col:49> 'int' 0
|-CXXMethodDecl 0x5630162c5a38 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x5630162d9688 <col:38, col:65>
|   `-ReturnStmt 0x5630162d9678 <col:40, col:62>
|     `-UnaryOperator 0x5630162d9660 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x5630162d9640 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x5630162d9628 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5630162d9598 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x5630162ce6b8
|         |   `-CXXMemberCallExpr 0x5630162d9578 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5630162d9548 <col:48> '<bound member function type>' ->xanno 0x5630162c33d8
|         |       `-CXXThisExpr 0x5630162d9538 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x5630162d95c8 <col:61> 'int' 0
|-CXXMethodDecl 0x5630162c5be8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x5630162c5af0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x5630162d9d58 <col:34, line:463:5>
|   |-ParenExpr 0x5630162d9ba0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x5630162d9b70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5630162d97d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162d97a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162d96f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162d96e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162d96a0 <col:23> 'int' lvalue ParmVar 0x5630162c5af0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162d96c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162d9788 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162d9758 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162d9718 <col:33> 'int' lvalue ParmVar 0x5630162c5af0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5630162d9770 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5630162d9738 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5630162d9838 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162d9818 <col:56> 'int' 0
|   |   `-CallExpr 0x5630162d9ad0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5630162d9ab8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162d9a98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162d9b10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162d9928 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5630162d9b28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162d9958 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162d9b40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162d9990 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x5630162d9b58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162d9a80 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162d9a68 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162d9a28 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x5630162d9d48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x5630162d9d30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x5630162d9d10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x5630162d9ce0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x5630162d9c90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x5630162ce3b8
|         |   `-CXXMemberCallExpr 0x5630162d9c70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x5630162d9c40 <col:9> '<bound member function type>' ->xanno 0x5630162c33d8
|         |       `-CXXThisExpr 0x5630162d9c30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x5630162d9cf8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x5630162d9cc0 <col:21> 'int' lvalue ParmVar 0x5630162c5af0 'i' 'int'
|-CXXMethodDecl 0x5630162c5e38 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x5630162c5ca8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x5630162c5d20 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x5630162da3e8 <col:40, line:472:5>
|   |-ParenExpr 0x5630162da200 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x5630162da1d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x5630162d9eb0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162d9e80 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162d9dd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162d9db8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162d9d78 <col:23> 'int' lvalue ParmVar 0x5630162c5ca8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162d9d98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162d9e60 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162d9e30 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162d9df0 <col:33> 'int' lvalue ParmVar 0x5630162c5ca8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x5630162d9e48 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x5630162d9e10 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x5630162d9f10 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162d9ef0 <col:56> 'int' 0
|   |   `-CallExpr 0x5630162da130 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x5630162da118 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162da0f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162da170 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162d9f80 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x5630162da188 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162d9fb0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162da1a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162d9fe8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x5630162da1b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162da0e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162da0c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162da088 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x5630162da3c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x5630162da370 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x5630162da340 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x5630162da2f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x5630162ce3b8
|     | |   `-CXXMemberCallExpr 0x5630162da2d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x5630162da2a0 <col:2> '<bound member function type>' ->xanno 0x5630162c3578
|     | |       `-CXXThisExpr 0x5630162da290 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x5630162da358 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x5630162da320 <col:14> 'int' lvalue ParmVar 0x5630162c5ca8 'i' 'int'
|     `-ImplicitCastExpr 0x5630162da3b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x5630162da390 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x5630162c5d20 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x5630162c5ff8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x5630162c5f00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5630162dab68 <col:36, line:485:5>
|   |-ParenExpr 0x5630162da8d0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162da8a0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162da580 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162da550 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162da460 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162da448 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162da408 <col:23> 'int' lvalue ParmVar 0x5630162c5f00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162da428 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162da530 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162da518 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162da480 <col:33> 'int' lvalue ParmVar 0x5630162c5f00 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162da4f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162da4e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162da4a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162da4c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5630162da5e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162da5c0 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162da800 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162da7e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162da7c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162da840 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162da650 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5630162da858 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162da688 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162da870 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162da6c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x5630162da888 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162da7b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162da798 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162da758 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x5630162dab58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x5630162dab40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x5630162dab28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5630162daaf8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x5630162daa98 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5630162daa68 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5630162da9e0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5630162ce290
|             |   `-CXXMemberCallExpr 0x5630162da9c0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5630162da990 <col:61> '<bound member function type>' ->xanno 0x5630162c33d8
|             |       `-CXXThisExpr 0x5630162da980 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5630162daa80 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5630162daa10 <col:74> 'int' lvalue ParmVar 0x5630162c5f00 'i' 'int'
|-CXXMethodDecl 0x5630162c6248 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x5630162c60b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5630162c6130 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x5630162db2b8 <col:42, line:500:5>
|   |-ParenExpr 0x5630162db050 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162db020 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dad00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dacd0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162dabe0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dabc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dab88 <col:23> 'int' lvalue ParmVar 0x5630162c60b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162daba8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dacb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dac98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162dac00 <col:33> 'int' lvalue ParmVar 0x5630162c60b8 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dac78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162dac60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162dac20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dac40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5630162dad60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dad40 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162daf80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162daf68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162daf48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162dafc0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dadd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5630162dafd8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dae08 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162daff0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162dae40 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x5630162db008 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162daf30 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162daf18 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162daed8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x5630162db298 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x5630162db248 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5630162db218 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x5630162db1c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5630162db190 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5630162db140 <col:48, col:57> 'char [48]' lvalue ->c 0x5630162ce290
|     |     |   `-CXXMemberCallExpr 0x5630162db120 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5630162db0f0 <col:48> '<bound member function type>' ->xanno 0x5630162c3578
|     |     |       `-CXXThisExpr 0x5630162db0e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5630162db1a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5630162db170 <col:61> 'int' lvalue ParmVar 0x5630162c60b8 'i' 'int'
|     `-ImplicitCastExpr 0x5630162db280 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x5630162db260 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x5630162c6130 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x5630162c6408 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x5630162c6310 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5630162dba18 <col:35, line:513:5>
|   |-ParenExpr 0x5630162db728 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162db6f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162db450 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162db420 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162db330 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162db318 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162db2d8 <col:23> 'int' lvalue ParmVar 0x5630162c6310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162db2f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162db400 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162db3e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162db350 <col:33> 'int' lvalue ParmVar 0x5630162c6310 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162db3c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162db3b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162db370 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162db390 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5630162db4b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162db490 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162db658 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162db640 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162db620 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162db698 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162db520 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5630162db6b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162db558 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162db6c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162db590 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x5630162db6e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162db608 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162db5f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162db5b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x5630162dba08 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x5630162db9f0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x5630162db9d8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5630162db9a8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x5630162db920 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5630162db8f0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5630162db8a0 <col:60, col:69> 'char const[48]' lvalue ->c 0x5630162ce290
|             |   `-CXXMemberCallExpr 0x5630162db880 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5630162db850 <col:60> '<bound member function type>' ->xanno 0x5630162c33d8
|             |       `-CXXThisExpr 0x5630162db840 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5630162db908 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5630162db8d0 <col:73> 'int' lvalue ParmVar 0x5630162c6310 'i' 'int'
|-CXXMethodDecl 0x5630162c6658 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x5630162c64c8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5630162c6540 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x5630162dc138 <col:41, line:528:5>
|   |-ParenExpr 0x5630162dbec0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162dbe90 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dbbb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dbb80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162dba90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dba78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dba38 <col:23> 'int' lvalue ParmVar 0x5630162c64c8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162dba58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dbb60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dbb48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162dbab0 <col:33> 'int' lvalue ParmVar 0x5630162c64c8 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dbb28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162dbb10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162dbad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dbaf0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x5630162dbc10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dbbf0 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162dbdf0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162dbdd8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162dbdb8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162dbe30 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dbc80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x5630162dbe48 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dbcb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162dbe60 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162dbcf0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x5630162dbe78 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162dbda0 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162dbd88 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162dbd48 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x5630162dc118 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x5630162dc0c8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5630162dc098 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x5630162dc040 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5630162dc000 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5630162dbfb0 <col:47, col:56> 'char [48]' lvalue ->c 0x5630162ce290
|     |     |   `-CXXMemberCallExpr 0x5630162dbf90 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5630162dbf60 <col:47> '<bound member function type>' ->xanno 0x5630162c3578
|     |     |       `-CXXThisExpr 0x5630162dbf50 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5630162dc018 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5630162dbfe0 <col:60> 'int' lvalue ParmVar 0x5630162c64c8 'i' 'int'
|     `-ImplicitCastExpr 0x5630162dc100 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x5630162dc0e0 <col:65> 'int16_t':'short' lvalue ParmVar 0x5630162c6540 'x' 'int16_t':'short'
|-CXXMethodDecl 0x5630162c6818 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x5630162c6720 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5630162dc808 <col:36, line:541:5>
|   |-ParenExpr 0x5630162dc5a8 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162dc578 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dc2d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dc2a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162dc1b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dc198 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dc158 <col:23> 'int' lvalue ParmVar 0x5630162c6720 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162dc178 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dc280 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dc268 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162dc1d0 <col:33> 'int' lvalue ParmVar 0x5630162c6720 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dc248 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162dc230 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162dc1f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dc210 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5630162dc330 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dc310 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162dc4d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162dc4c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162dc4a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162dc518 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dc3a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5630162dc530 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dc3d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162dc548 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162dc410 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x5630162dc560 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162dc488 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162dc470 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162dc430 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x5630162dc7f8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x5630162dc7e0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x5630162dc7c8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5630162dc798 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x5630162dc740 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5630162dc710 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5630162dc6c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x5630162ce290
|             |   `-CXXMemberCallExpr 0x5630162dc6a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5630162dc670 <col:61> '<bound member function type>' ->xanno 0x5630162c33d8
|             |       `-CXXThisExpr 0x5630162dc660 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5630162dc728 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5630162dc6f0 <col:74> 'int' lvalue ParmVar 0x5630162c6720 'i' 'int'
|-CXXMethodDecl 0x5630162c69e8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x5630162c68d8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x5630162c6950 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x5630162c6a98 <col:20>
| `-OptimizeNoneAttr 0x5630162c6af0 <col:30>
|-CXXMethodDecl 0x5630162c6c28 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x5630162c6b30 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x5630162dced8 <col:35, line:562:5>
|   |-ParenExpr 0x5630162dcc78 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162dcc48 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dc9a0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dc970 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162dc880 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dc868 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dc828 <col:23> 'int' lvalue ParmVar 0x5630162c6b30 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162dc848 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dc950 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dc938 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162dc8a0 <col:33> 'int' lvalue ParmVar 0x5630162c6b30 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dc918 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162dc900 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162dc8c0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dc8e0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5630162dca00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dc9e0 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162dcba8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162dcb90 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162dcb70 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162dcbe8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dca70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5630162dcc00 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dcaa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162dcc18 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162dcae0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x5630162dcc30 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162dcb58 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162dcb40 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162dcb00 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x5630162dcec8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x5630162dceb0 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x5630162dce98 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5630162dce68 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x5630162dce10 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x5630162dcde0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5630162dcd90 <col:60, col:69> 'char const[48]' lvalue ->c 0x5630162ce290
|             |   `-CXXMemberCallExpr 0x5630162dcd70 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5630162dcd40 <col:60> '<bound member function type>' ->xanno 0x5630162c33d8
|             |       `-CXXThisExpr 0x5630162dcd30 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5630162dcdf8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5630162dcdc0 <col:73> 'int' lvalue ParmVar 0x5630162c6b30 'i' 'int'
|-CXXMethodDecl 0x5630162c6e38 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x5630162c6ce8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5630162c6d60 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x5630162dd5b8 <col:41, line:577:5>
|   |-ParenExpr 0x5630162dd348 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162dd318 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dd070 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dd040 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162dcf50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dcf38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dcef8 <col:23> 'int' lvalue ParmVar 0x5630162c6ce8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162dcf18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dd020 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dd008 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162dcf70 <col:33> 'int' lvalue ParmVar 0x5630162c6ce8 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dcfe8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162dcfd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162dcf90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dcfb0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x5630162dd0d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dd0b0 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162dd278 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162dd260 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162dd240 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162dd2b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dd140 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x5630162dd2d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dd178 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162dd2e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162dd1b0 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x5630162dd300 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162dd228 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162dd210 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162dd1d0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x5630162dd598 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x5630162dd548 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5630162dd518 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x5630162dd4b8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5630162dd488 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5630162dd438 <col:47, col:56> 'char [48]' lvalue ->c 0x5630162ce290
|     |     |   `-CXXMemberCallExpr 0x5630162dd418 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5630162dd3e8 <col:47> '<bound member function type>' ->xanno 0x5630162c3578
|     |     |       `-CXXThisExpr 0x5630162dd3d8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5630162dd4a0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5630162dd468 <col:60> 'int' lvalue ParmVar 0x5630162c6ce8 'i' 'int'
|     `-ImplicitCastExpr 0x5630162dd580 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x5630162dd560 <col:65> 'int32_t':'int' lvalue ParmVar 0x5630162c6d60 'x' 'int32_t':'int'
|-CXXMethodDecl 0x5630162c6ff8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x5630162c6f00 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x5630162ddce8 <col:36, line:591:5>
|   |-ParenExpr 0x5630162dda28 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162dd9f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dd750 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dd720 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162dd630 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dd618 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dd5d8 <col:23> 'int' lvalue ParmVar 0x5630162c6f00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162dd5f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dd700 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dd6e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162dd650 <col:33> 'int' lvalue ParmVar 0x5630162c6f00 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dd6c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162dd6b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162dd670 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dd690 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5630162dd7b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dd790 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162dd958 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162dd940 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162dd920 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162dd998 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dd820 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5630162dd9b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162dd858 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162dd9c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162dd890 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x5630162dd9e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162dd908 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162dd8f0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162dd8b0 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x5630162ddcd8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x5630162ddcc0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x5630162ddca8 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5630162ddc78 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x5630162ddbf0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x5630162ddbc0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5630162ddb70 <col:61, col:70> 'char const[48]' lvalue ->c 0x5630162ce290
|             |   `-CXXMemberCallExpr 0x5630162ddb50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5630162ddb20 <col:61> '<bound member function type>' ->xanno 0x5630162c33d8
|             |       `-CXXThisExpr 0x5630162ddb10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5630162ddbd8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5630162ddba0 <col:74> 'int' lvalue ParmVar 0x5630162c6f00 'i' 'int'
|-CXXMethodDecl 0x5630162c7248 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x5630162c70b8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5630162c7130 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x5630162de3c8 <col:42, line:606:5>
|   |-ParenExpr 0x5630162de158 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x5630162de128 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dde80 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dde50 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162ddd60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162ddd48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162ddd08 <col:23> 'int' lvalue ParmVar 0x5630162c70b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162ddd28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dde30 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x5630162dde18 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162ddd80 <col:33> 'int' lvalue ParmVar 0x5630162c70b8 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dddf8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162ddde0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162ddda0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x5630162dddc0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x5630162ddee0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162ddec0 <col:60> 'int' 0
|   |   `-CallExpr 0x5630162de088 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x5630162de070 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162de050 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162de0c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162ddf50 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x5630162de0e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162ddf88 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162de0f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162ddfc0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x5630162de110 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162de038 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162de020 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162ddfe0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x5630162de3a8 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x5630162de358 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5630162de328 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x5630162de2c8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5630162de298 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5630162de248 <col:48, col:57> 'char [48]' lvalue ->c 0x5630162ce290
|     |     |   `-CXXMemberCallExpr 0x5630162de228 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5630162de1f8 <col:48> '<bound member function type>' ->xanno 0x5630162c3578
|     |     |       `-CXXThisExpr 0x5630162de1e8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5630162de2b0 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5630162de278 <col:61> 'int' lvalue ParmVar 0x5630162c70b8 'i' 'int'
|     `-ImplicitCastExpr 0x5630162de390 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x5630162de370 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x5630162c7130 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x5630162c73e0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x5630162c7310 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x5630162dec38 <col:33, line:620:5>
|   |-ParenExpr 0x5630162de9b0 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x5630162de980 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5630162de5d0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162de5a0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162de440 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162de428 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162de3e8 <col:23> 'int' lvalue ParmVar 0x5630162c7310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162de408 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162de580 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5630162de568 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162de460 <col:33> 'int' lvalue ParmVar 0x5630162c7310 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162de548 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162de530 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162de480 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5630162de508 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5630162de4f0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5630162de4b8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5630162de630 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162de610 <col:79> 'int' 0
|   |   `-CallExpr 0x5630162de8e0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5630162de8c8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162de8a8 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162de920 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162de718 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5630162de938 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162de760 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162de950 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162de798 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x5630162de968 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162de890 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162de878 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162de838 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x5630162dec28 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x5630162dec10 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x5630162debf8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x5630162debc8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x5630162deb40 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x5630162deb10 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x5630162deac0 <col:67, col:76> 'char const[48]' lvalue ->c 0x5630162ce290
|             |   `-CXXMemberCallExpr 0x5630162deaa0 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x5630162dea70 <col:67> '<bound member function type>' ->xanno 0x5630162c33d8
|             |       `-CXXThisExpr 0x5630162dea60 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x5630162deb28 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x5630162deaf0 <col:80> 'int' lvalue ParmVar 0x5630162c7310 'i' 'int'
|-CXXMethodDecl 0x5630162c75f8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x5630162c74a0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x5630162c7520 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x5630162df460 <col:45, line:635:5>
|   |-ParenExpr 0x5630162df1a8 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x5630162df178 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x5630162dee40 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x5630162dee10 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x5630162decb0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x5630162dec98 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x5630162dec58 <col:23> 'int' lvalue ParmVar 0x5630162c74a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x5630162dec78 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x5630162dedf0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x5630162dedd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x5630162decd0 <col:33> 'int' lvalue ParmVar 0x5630162c74a0 'i' 'int'
|   |   |     `-BinaryOperator 0x5630162dedb8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x5630162deda0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x5630162decf0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x5630162c37c0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x5630162ded78 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x5630162ded60 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x5630162ded28 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x5630162deea0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x5630162dee80 <col:79> 'int' 0
|   |   `-CallExpr 0x5630162df0d8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x5630162df0c0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x5630162df0a0 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x563015e300b0 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x5630162df118 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162def10 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x5630162df130 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x5630162def58 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x5630162df148 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x5630162def90 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x5630162df160 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x5630162df088 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x5630162df070 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x5630162df028 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x5630162df440 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x5630162df3a8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x5630162df378 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x5630162df318 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x5630162df2e8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x5630162df298 <col:54, col:63> 'char [48]' lvalue ->c 0x5630162ce290
|     |     |   `-CXXMemberCallExpr 0x5630162df278 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x5630162df248 <col:54> '<bound member function type>' ->xanno 0x5630162c3578
|     |     |       `-CXXThisExpr 0x5630162df238 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x5630162df300 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x5630162df2c8 <col:67> 'int' lvalue ParmVar 0x5630162c74a0 'i' 'int'
|     `-CXXConstCastExpr 0x5630162df410 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x5630162df3f8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x5630162df3c0 <col:91> 'const void *' lvalue ParmVar 0x5630162c7520 'x' 'const void *'
|-CXXMethodDecl 0x5630162c76c8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x5630162df4e8 <col:34, line:640:5>
|   `-ReturnStmt 0x5630162df4d8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x5630162df4c0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x5630162df490 <col:16> 'Packet *' lvalue ->_data_packet 0x5630162cee48
|         `-CXXThisExpr 0x5630162df480 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x5630162c7808 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x5630162c7778 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x5630162d85a8 <col:46> 'bool' true
|-CXXMethodDecl 0x5630162c7988 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x5630162c78c0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x5630162c7a30 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x5630162c81e0 <line:660:22> "" ""
| |-EnumConstantDecl 0x5630162c7b30 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c8250 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7b10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x5630162c7af0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5630162bcc90 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5630162c7bc0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c8268 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7ba0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x5630162c7b80 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x5630162bcd20 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x5630162c7c50 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c8280 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7c30 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5630162c7c10 <col:21> 'int' 0
| |-EnumConstantDecl 0x5630162c7ce0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c8298 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7cc0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x5630162c7ca0 <col:19> 'int' 16
| |-EnumConstantDecl 0x5630162c7d70 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c82b0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7d50 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x5630162c7d30 <col:21> 'int' 16
| |-EnumConstantDecl 0x5630162c7e00 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c82c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7de0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x5630162c7dc0 <col:19> 'int' 32
| |-EnumConstantDecl 0x5630162c7e90 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c82e0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7e70 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x5630162c7e50 <col:19> 'int' EnumConstant 0x5630162c7ce0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5630162c7f20 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c82f8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7f00 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x5630162c7ee0 <col:19> 'int' EnumConstant 0x5630162c7e00 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x5630162c7ff0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c8310 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c7fd0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x5630162c7fb0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5630162c7f70 <col:23> 'int' EnumConstant 0x5630162c7f20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5630162c7f90 <col:40> 'int' 2
| |-EnumConstantDecl 0x5630162c80c0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x5630162c8328 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630162c80a0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x5630162c8080 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x5630162c8040 <col:23> 'int' EnumConstant 0x5630162c7f20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x5630162c8060 <col:40> 'int' 4
| `-EnumConstantDecl 0x5630162c8190 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x5630162c8340 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x5630162c8170 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x5630162c8150 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x5630162c8110 <col:23> 'int' EnumConstant 0x5630162c7f20 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x5630162c8130 <col:40> 'int' 8
|-CXXMethodDecl 0x5630162c8380 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x5630162c8420 <col:68> "" ""
|-CXXMethodDecl 0x5630162c84b8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x5630162c8558 <col:45> "" ""
|-CXXMethodDecl 0x5630162c85f0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5630162c8690 <col:57> "" ""
|-CXXMethodDecl 0x5630162c8728 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x5630162c87c8 <col:45> "" ""
|-CXXMethodDecl 0x5630162c8860 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x5630162c8900 <col:57> "" ""
|-CXXMethodDecl 0x5630162c8990 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x5630162c8a30 <col:51> "" ""
|-CXXMethodDecl 0x5630162c8ac0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5630162c8b60 <col:63> "" ""
|-CXXMethodDecl 0x5630162c8bf0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x5630162c8c90 <col:53> "" ""
|-CXXMethodDecl 0x5630162c8d20 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5630162c8dc0 <col:65> "" ""
|-CXXMethodDecl 0x5630162c8ed8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5630162c8e48 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x5630162c8f80 <col:61> "" ""
|-CXXMethodDecl 0x5630162c9118 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5630162c9008 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x5630162c9080 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5630162c91c8 <col:67> "" ""
|-CXXMethodDecl 0x5630162c92e0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5630162c9250 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5630162c9388 <col:63> "" ""
|-CXXMethodDecl 0x5630162c9520 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5630162c9410 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5630162c9488 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5630162c95d0 <col:69> "" ""
|-CXXMethodDecl 0x5630162c96e8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5630162c9658 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5630162c9790 <col:63> "" ""
|-CXXMethodDecl 0x5630162cbe68 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5630162cbd58 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5630162cbdd0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5630162cbf18 <col:69> "" ""
|-CXXMethodDecl 0x5630162cc030 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x5630162cbfa0 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x5630162cc0d8 <col:62> "" ""
|-CXXMethodDecl 0x5630162cc270 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5630162cc160 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5630162cc1d8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x5630162cc320 <col:68> "" ""
|-CXXMethodDecl 0x5630162cc438 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x5630162cc3a8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x5630162cc4e0 <col:63> "" ""
|-CXXMethodDecl 0x5630162cc678 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x5630162cc568 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x5630162cc5e0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x5630162cc728 <col:69> "" ""
|-CXXMethodDecl 0x5630162cc7b8 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x5630162cc858 <col:64> "" ""
|-CXXMethodDecl 0x5630162cc8e8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x5630162cc988 <col:52> "" ""
|-CXXMethodDecl 0x5630162cca18 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x5630162ccab8 <col:67> "" ""
|-CXXMethodDecl 0x5630162ccb48 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x5630162ccbe8 <col:55> "" ""
|-CXXMethodDecl 0x5630162ccd00 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x5630162ccc70 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5630162ccda8 <col:58> "" ""
|-CXXMethodDecl 0x5630162ccf40 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x5630162cce30 <col:33> col:36 'int'
| |-ParmVarDecl 0x5630162ccea8 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x5630162ccff0 <col:62> "" ""
|-CXXMethodDecl 0x5630162cd108 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x5630162cd078 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5630162cd1b0 <col:58> "" ""
|-CXXMethodDecl 0x5630162cd348 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x5630162cd238 <col:33> col:36 'int'
| |-ParmVarDecl 0x5630162cd2b0 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x5630162cd3f8 <col:62> "" ""
|-CXXMethodDecl 0x5630162cd510 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x5630162cd480 <col:34> col:37 'int'
| `-DeprecatedAttr 0x5630162cd5b8 <col:60> "" ""
|-CXXMethodDecl 0x5630162cd750 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x5630162cd640 <col:34> col:37 'int'
| |-ParmVarDecl 0x5630162cd6b8 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x5630162cd800 <col:64> "" ""
|-CXXMethodDecl 0x5630162cd918 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x5630162cd888 <col:32> col:35 'int'
| `-DeprecatedAttr 0x5630162cd9c0 <col:58> "" ""
|-CXXMethodDecl 0x5630162cdb58 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x5630162cda48 <col:33> col:36 'int'
| |-ParmVarDecl 0x5630162cdac0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x5630162cdc08 <col:62> "" ""
|-CXXMethodDecl 0x5630162cdd20 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x5630162cdc90 <col:33> col:36 'int'
| `-DeprecatedAttr 0x5630162cddc8 <col:59> "" ""
|-CXXMethodDecl 0x5630162cdf60 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x5630162cde50 <col:33> col:36 'int'
| |-ParmVarDecl 0x5630162cdec8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x5630162ce010 <col:63> "" ""
|-AccessSpecDecl 0x5630162ce080 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x5630162ce0a8 prev 0x5630162c32b0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5630162ce1a0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x5630162ce290 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x5630162ce3b8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x5630162ce538 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x5630162ce6b8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x5630162ce838 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x5630162df668 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5630162dfed8 <col:11>
| |-CXXDestructorDecl 0x5630162df740 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x5630162df878 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x5630162df878
| | `-ParmVarDecl 0x5630162df988 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x5630162dfa28 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5630162dfa28
| | `-ParmVarDecl 0x5630162dfb38 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x5630162e28f8 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5630162e2a08 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x5630162e2c88 <col:11>
| |   `-ReturnStmt 0x5630162e2c78 <col:11>
| |     `-UnaryOperator 0x5630162e2c60 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x5630162e2c50 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x5630162e2a78 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x5630162e2a78
|   `-ParmVarDecl 0x5630162e2b88 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x5630162ce8a0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5630162ce9b8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x5630162cea58 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x5630162ceac0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x5630162ceb28 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x5630162ceb90 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x5630162cebf0 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x5630162cecb0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x5630162ced10 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x5630162ced70 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x5630162df578 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x5630162cea58 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x5630162dfee8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x5630162dff40 <col:12>
| |-CXXConstructorDecl 0x5630162dfba8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x5630162dfba8
| | `-ParmVarDecl 0x5630162dfcb8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x5630162dfd58 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x5630162dfd58
| | `-ParmVarDecl 0x5630162dfe68 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x5630162e1fe0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x5630162cede8 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x5630162cee48 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x5630162ceeb0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x5630162cef18 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x5630162cef80 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x5630162cefe8 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x5630162cf048 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x5630162cf0a8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x5630162cf110 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x5630162cf198 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x5630162cede8 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x5630162df510 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5630162cf048 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x5630162dff50 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x5630162dffb0 <col:21, line:755:5>
|-CXXConstructorDecl 0x5630162cf338 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x5630162cf278 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x5630162cf430 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x5630162cf618 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x5630162cf520 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x5630162cf8e8 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x5630162cf6d0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x5630162cf748 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x5630162cf7c0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162cfb08 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x5630162cf9b8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x5630162cfa30 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x5630162d80e8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x5630162cfbc8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x5630162cfc40 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x5630162cfcb8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x5630162d8240 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5630162d81b0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x5630162d8388 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x5630162d82f8 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x5630162d8480 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<_Bool>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   _Bool * _ptr
        24 |   _Bool _slot
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630163b0ee0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5630163b0ff8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x5630163b1088 <col:16, col:22> col:16 public
|-EnumDecl 0x5630163b10b0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x5630163b11b0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5630163b1400 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163b1190 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x5630163b1170 <col:21> 'int' 0
| |-EnumConstantDecl 0x5630163b1240 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5630163b1418 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163b1220 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x5630163b1200 <col:24> 'int' 22
| |-EnumConstantDecl 0x5630163b12d0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5630163b1430 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163b12b0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x5630163b1290 <col:24> 'int' 34
| |-EnumConstantDecl 0x5630163b1360 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x5630163b1448 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x5630163b1340 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x5630163b1320 <col:25> 'int' 95
| `-EnumConstantDecl 0x5630163b13b0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x5630163b2dc0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x5630163b31f8 <col:7>
|-CXXConstructorDecl 0x5630163b2ec8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x5630163b2ec8
| `-ParmVarDecl 0x5630163b2fd8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x5630163b3078 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5630163b3188 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x563016410770 <col:7>
`-CXXDestructorDecl 0x5630163b5318 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630163b1478 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x5630163b15d8 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x5630163b1668 <col:32, col:38> col:32 public
|-TypedefDecl 0x5630163b16a0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x563015ee9600 'uint32_t' sugar
|   |-Typedef 0x563015dfd4c8 'uint32_t'
|   `-TypedefType 0x563015dd65a0 '__uint32_t' sugar
|     |-Typedef 0x563015dd6198 '__uint32_t'
|     `-BuiltinType 0x563015d94620 'unsigned int'
|-CXXConstructorDecl 0x5630163b17e8 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x5630163b1710 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x5630163b2cc8 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x5630163b3208 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x5630163b2580 'base' 'int'
| | `-ImplicitCastExpr 0x5630163b2d68 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x5630163b2d28 <col:16> 'int' lvalue ParmVar 0x5630163b1710 'b' 'int'
| `-CompoundStmt 0x5630163b3278 <col:19, line:1046:5>
|-CXXMethodDecl 0x5630163b1ce0 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x5630163b18b0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x5630163b1930 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x5630163b19a8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x5630163b1a28 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x5630163b1ae8 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x5630163b1b68 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x5630163b2138 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x5630163b1db0 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5630163b2098 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5630163b1e58 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x5630163b1ef8 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x5630163b1f70 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5630163b2ce8 <col:82> 'const ArgContext' lvalue Var 0x5630163a5d18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5630163b41c8 <col:94, line:1067:5>
| |   |-DeclStmt 0x5630163b3408 <line:1054:9, col:64>
| |   | `-VarDecl 0x5630163b3298 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x5630163b33c0 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x5630163b3628 <line:1055:9, col:91>
| |   | `-VarDecl 0x5630163b3438 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x5630163b3600 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x5630163b35e0 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x5630163b3590 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x5630163b3570 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x5630163b3518 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x5630163b34c8 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x5630163b34f8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x5630163b3558 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x5630163b3538 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x5630163b35c0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x5630163b3788 <line:1056:9, col:27>
| |   | `-VarDecl 0x5630163b3720 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x5630163b3bd0 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x5630163b3b00 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x5630163b3a80 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x5630162b35c8 0x5630160fcba8 0x5630160fc880 0x5630160ee060 0x5630160edd10 0x5630160ed600 0x5630160bff70 0x56301604c430
| |   | | |-CallExpr 0x5630163b39c0 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x5630163b37b0 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x5630163b3860 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5630163b3830 <col:19, col:23> '<bound member function type>' .begin 0x5630160dd268
| |   | | | |   `-DeclRefExpr 0x5630163b3810 <col:19> 'const String' lvalue ParmVar 0x5630163b1e58 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x5630163b38d0 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x5630163b38a0 <col:32, col:36> '<bound member function type>' .end 0x5630160dd480
| |   | | | |   `-DeclRefExpr 0x5630163b3880 <col:32> 'const String' lvalue ParmVar 0x5630163b1e58 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x5630163b38f0 <col:43> 'const bool' lvalue Var 0x5630163b3298 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x5630163b3958 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x5630163b3938 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x5630163b3980 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x5630163b3720 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x5630163b39a0 <col:73> 'const int' lvalue Var 0x5630163b3438 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x5630163b3a60 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x5630163b3a30 <col:16, col:20> '<bound member function type>' .end 0x5630160dd480
| |   | |     `-DeclRefExpr 0x5630163b3a10 <col:16> 'const String' lvalue ParmVar 0x5630163b1e58 'str' 'const String &'
| |   | `-BinaryOperator 0x5630163b3bb0 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x5630163b3b48 <col:13> 'int' lvalue ->status 0x5630163b25e8
| |   |   | `-CXXThisExpr 0x5630163b3b38 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x5630163b3b98 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x5630163b3b78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b1240 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x5630163b3e48 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x5630163b3d08 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x5630163b3cf0 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x5630163b3cd8 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x5630163b3bf8 <col:13> 'int' lvalue ->status 0x5630163b25e8
| |   | | |     `-CXXThisExpr 0x5630163b3be8 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x5630163b3cb8 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x5630163b3c88 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x5630163b3c38 <col:23> 'int' lvalue ->status 0x5630163b25e8
| |   | |   |   `-CXXThisExpr 0x5630163b3c28 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x5630163b3ca0 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x5630163b3c68 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b12d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x5630163b3e28 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x5630163b3dc8 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x5630163b3d70 <col:13, col:18> '<bound member function type>' .error 0x563016276d60
| |   |   | | `-DeclRefExpr 0x5630163b3d50 <col:13> 'const ArgContext' lvalue ParmVar 0x5630163b1f70 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x5630163b3df0 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x5630163b3da0 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x5630163b3e18 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x5630163b3e08 <col:20> 'bool' false
| |   |-DeclStmt 0x5630163b4018 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x5630163b3fc0 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x5630163b3f50 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x5630163b4178 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x5630163b4030 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x5630160803f8
| |   | |-DeclRefExpr 0x5630163b4078 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x5630163b3720 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x5630163b4148 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x5630163b40c0 <col:64> 'V' lvalue ParmVar 0x5630163b1ef8 'result' 'V &'
| |   `-ReturnStmt 0x5630163b41b8 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x5630163b41a8 <col:16> 'bool' true
| `-CXXMethodDecl 0x5630164171a8 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x563016416f80 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x563016417058 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x5630164170c0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x563016418f40 <col:94, line:1067:5>
|     |-DeclStmt 0x5630164179b8 <line:1054:9, col:64>
|     | `-VarDecl 0x5630164177d8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x563016417948 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x563016417918 <col:36, col:55> 'const bool' lvalue Var 0x56301606f610 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x563016417b98 <line:1055:9, col:91>
|     | `-VarDecl 0x5630164179d0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x563016417b18 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x563016417b00 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x563016417ae0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x563016417ac0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x563016417aa0 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x563016417a68 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x563016417a48 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x5630163b34f8 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x563016417a88 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x5630163b3538 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x5630163b35c0 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x563016417d30 <line:1056:9, col:27>
|     | `-VarDecl 0x563016417cc8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x5630164181b8 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x563016418160 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x563016418018 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x563016417fe8 <col:13> '<bound member function type>' ->parse 0x5630163b1ce0
|     | | | | `-CXXThisExpr 0x563016417fd8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x563016417e78 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x563016417e48 <col:19, col:23> '<bound member function type>' .begin 0x5630160dd268
|     | | | |   `-DeclRefExpr 0x563016417e28 <col:19> 'const String' lvalue ParmVar 0x563016416f80 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x563016417ee8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x563016417eb8 <col:32, col:36> '<bound member function type>' .end 0x5630160dd480
|     | | | |   `-DeclRefExpr 0x563016417e98 <col:32> 'const String' lvalue ParmVar 0x563016416f80 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x563016418088 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x563016418068 <col:43> 'const bool' lvalue Var 0x5630164177d8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x563016417f70 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x563016417f58 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x563016417f38 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x5630164180a0 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x563016417f98 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x563016417cc8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x5630164180d8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x5630164180b8 <col:73> 'const int' lvalue Var 0x5630164179d0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x563016418140 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x563016418110 <col:16, col:20> '<bound member function type>' .end 0x5630160dd480
|     | |     `-DeclRefExpr 0x5630164180f0 <col:16> 'const String' lvalue ParmVar 0x563016416f80 'str' 'const String &'
|     | `-BinaryOperator 0x563016418198 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x5630163b3b48 <col:13> 'int' lvalue ->status 0x5630163b25e8
|     |   | `-CXXThisExpr 0x5630163b3b38 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x563016418180 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x5630163b3b78 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b1240 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x563016418330 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x563016418250 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x563016418238 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x563016418220 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x5630163b3bf8 <col:13> 'int' lvalue ->status 0x5630163b25e8
|     | | |     `-CXXThisExpr 0x5630163b3be8 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x563016418200 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x5630164181d0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x5630163b3c38 <col:23> 'int' lvalue ->status 0x5630163b25e8
|     | |   |   `-CXXThisExpr 0x5630163b3c28 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x5630164181e8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x5630163b3c68 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b12d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x563016418310 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x5630164182c0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x563016418290 <col:13, col:18> '<bound member function type>' .error 0x563016276d60
|     |   | | `-DeclRefExpr 0x563016418270 <col:13> 'const ArgContext' lvalue ParmVar 0x5630164170c0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x5630164182e8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x5630163b3da0 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x563016418300 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x5630163b3e08 <col:20> 'bool' false
|     |-DeclStmt 0x563016418878 <line:1064:9, col:64>
|     | `-TypedefDecl 0x563016418820 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x5630164187d0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x5630164187b0 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x563016418740 'type'
|     |       `-ElaboratedType 0x5630164186f0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x5630164186d0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x56301606f768 'unsigned_type'
|     |           `-BuiltinType 0x563015d94620 'unsigned int'
|     |-CallExpr 0x563016418ed0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x563016418eb8 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x563016418e38 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x563016418d18 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x5630160803f8 'extract_integer')
|     | |-ImplicitCastExpr 0x563016418f18 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x563016418f00 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x5630164188d8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x563016417cc8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x5630164189a8 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x563016418958 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x563016417058 'result' 'unsigned int &'
|     `-ReturnStmt 0x563016418f30 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x5630163b41a8 <col:16> 'bool' true
|-FunctionTemplateDecl 0x5630163b24f8 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x5630163b21a8 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x5630163b2458 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x5630163b2258 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x5630163b22f8 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x5630163b2370 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x5630163b2d08 <col:71> 'const ArgContext' lvalue Var 0x5630163a5d18 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x5630163b4938 <col:83, line:1083:5>
| |   |-DeclStmt 0x5630163b4290 <line:1071:9, col:12>
| |   | `-VarDecl 0x5630163b4228 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x5630163b4910 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x5630163b4520 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x5630163b43a8 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x5630163b4370 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x5630163b42b8 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x5630163b4310 <col:31> 'const String' lvalue ParmVar 0x5630163b2258 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x5630163b4330 <col:36> 'V' lvalue Var 0x5630163b4228 'x' 'V'
| |     | |   `-DeclRefExpr 0x5630163b4350 <col:39> 'const ArgContext' lvalue ParmVar 0x5630163b2370 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x5630163b4500 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x5630163b44e0 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x5630163b44c8 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x5630163b44b0 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x5630163b43d0 <col:17> 'int' lvalue ->status 0x5630163b25e8
| |     |     |     `-CXXThisExpr 0x5630163b43c0 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x5630163b4490 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x5630163b4460 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x5630163b4410 <col:27> 'int' lvalue ->status 0x5630163b25e8
| |     |       |   `-CXXThisExpr 0x5630163b4400 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x5630163b4478 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x5630163b4440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b12d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x5630163b4550 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x5630163b4540 <col:20> 'bool' false
| |     `-IfStmt 0x5630163b48e8 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x5630163b45f0 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x5630163b45c0 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x5630163b4570 <col:18> 'int' lvalue ->status 0x5630163b25e8
| |       | |   `-CXXThisExpr 0x5630163b4560 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x5630163b45d8 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x5630163b45a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b12d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x5630163b4828 <col:42, line:1079:9>
| |       | |-CallExpr 0x5630163b47d0 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x5630163b4620 <line:1076:13> '<bound member function type>' ->range_error 0x5630163b2bf8
| |       | | | `-CXXThisExpr 0x5630163b4610 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x5630163b4650 <col:25> 'const ArgContext' lvalue ParmVar 0x5630163b2370 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x5630163b4730 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x5630163b47a8 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x5630163b4788 <col:43> 'V' lvalue Var 0x5630163b4228 'x' 'V'
| |       | `-ReturnStmt 0x5630163b4818 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x5630163b4808 <col:20> 'bool' false
| |       `-CompoundStmt 0x5630163b48c8 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x5630163b4888 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x5630163b4848 <col:13> 'V' lvalue ParmVar 0x5630163b22f8 'result' 'V &'
| |         | `-DeclRefExpr 0x5630163b4868 <col:22> 'V' lvalue Var 0x5630163b4228 'x' 'V'
| |         `-ReturnStmt 0x5630163b48b8 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x5630163b48a8 <col:20> 'bool' true
| `-CXXMethodDecl 0x563016416b68 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x563016413a70 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x563016416a18 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x563016416a80 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x5630164177b8 <col:83, line:1083:5>
|     |-DeclStmt 0x563016416df0 <line:1071:9, col:12>
|     | `-VarDecl 0x563016416d88 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x563016417790 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x563016417420 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x563016417348 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x563016417310 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x5630164172c8 <col:14> '<bound member function type>' ->parse_saturating 0x5630164171a8
|       | |   | `-CXXThisExpr 0x5630164172b8 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x563016416e60 <col:31> 'const String' lvalue ParmVar 0x563016413a70 'str' 'const String &'
|       | |   |-DeclRefExpr 0x563016416e80 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x563016416d88 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x563016416ea0 <col:39> 'const ArgContext' lvalue ParmVar 0x563016416a80 'args' 'const ArgContext &'
|       | `-ParenExpr 0x563016417400 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x5630164173e0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x5630164173c8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x5630164173b0 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x5630163b43d0 <col:17> 'int' lvalue ->status 0x5630163b25e8
|       |     |     `-CXXThisExpr 0x5630163b43c0 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x563016417390 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x563016417360 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x5630163b4410 <col:27> 'int' lvalue ->status 0x5630163b25e8
|       |       |   `-CXXThisExpr 0x5630163b4400 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x563016417378 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x5630163b4440 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b12d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x563016417440 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x5630163b4540 <col:20> 'bool' false
|       `-IfStmt 0x563016417768 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x563016417480 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x563016417450 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x5630163b4570 <col:18> 'int' lvalue ->status 0x5630163b25e8
|         | |   `-CXXThisExpr 0x5630163b4560 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x563016417468 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x5630163b45a0 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x5630163b12d0 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x5630164176a0 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x563016417610 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x5630163b4620 <line:1076:13> '<bound member function type>' ->range_error 0x5630163b2bf8
|         | | | `-CXXThisExpr 0x5630163b4610 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x5630164174a0 <col:25> 'const ArgContext' lvalue ParmVar 0x563016416a80 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x563016417678 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x563016417648 <col:31, col:50> 'const bool' lvalue Var 0x56301606f610 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x5630164175e8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x5630164175d0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x5630164175b8 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x563016417598 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x563016416d88 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x563016417690 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x5630163b4808 <col:20> 'bool' false
|         `-CompoundStmt 0x563016417748 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x563016417718 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x5630164176c0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x563016416a18 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x563016417700 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x5630164176e0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x563016416d88 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x563016417738 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x5630163b48a8 <col:20> 'bool' true
|-FieldDecl 0x5630163b2580 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x5630163b25e8 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x5630163b2638 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x5630163b28f0 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x5630163b2678 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x5630163b26f8 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x5630163b2770 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x5630163b27f0 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x5630163b2bf8 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x5630163b29c0 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x5630163b2a38 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x5630163b2ad0 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x5630163b5198 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x5630163b5198
| `-ParmVarDecl 0x5630163b52a8 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x5630163b5428 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5630163b5538 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x563016410780 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563016410750 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x563016410720 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5630164106f0 <col:7> 'IntArg' lvalue ParmVar 0x5630163b5538 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5630163b2580 'base' 'int'
| | `-ImplicitCastExpr 0x563016410878 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563016410848 <col:7> 'int' xvalue .base 0x5630163b2580
| |     `-CXXStaticCastExpr 0x563016410818 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5630164107e8 <col:7> 'IntArg' lvalue ParmVar 0x5630163b5538 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x5630163b25e8 'status' 'int'
| | `-ImplicitCastExpr 0x563016410948 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x563016410918 <col:7> 'int' xvalue .status 0x5630163b25e8
| |     `-CXXStaticCastExpr 0x5630164108e8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x5630164108b8 <col:7> 'IntArg' lvalue ParmVar 0x5630163b5538 '' 'IntArg &&'
| `-CompoundStmt 0x5630164109a0 <col:7>
`-CXXDestructorDecl 0x56301640f8e0 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5630163b9730 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x5630163b9988 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56301640f808 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x56301640fd80 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x56301640fd60 <<invalid sloc>> 'int'
| `-CompoundStmt 0x56301640fdf0 <col:19>
|-CXXConstructorDecl 0x56301640f9e8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x56301640f9e8
| `-ParmVarDecl 0x56301640faf8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x56301640fb98 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56301640fca8 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x5630164109b0 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x5630164106d0 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x5630164106a0 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x563016410670 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x56301640fca8 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x563016410a20 <col:19>
`-CXXDestructorDecl 0x56301640fe30 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class BoolArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<_Bool> (empty)
         0 |   class BoolArg (base) (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x5630163beb00 <../dummy_inc/click/args.hh:1257:1, line:1262:1> line:1257:7 referenced class BoolArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x5630163bec18 <col:1, col:7> col:7 implicit class BoolArg
|-AccessSpecDecl 0x5630163beca8 <col:17, col:23> col:17 public
|-CXXMethodDecl 0x5630163beee8 <line:1258:5, col:91> col:17 used parse 'bool (const String &, bool &, const ArgContext &)' static
| |-ParmVarDecl 0x5630163bece0 <col:23, col:37> col:37 str 'const String &'
| |-ParmVarDecl 0x5630163bed60 <col:42, col:48> col:48 result 'bool &'
| `-ParmVarDecl 0x5630163bedd8 <col:56, col:81> col:74 args 'const ArgContext &' cinit
|   `-DeclRefExpr 0x5630163bf100 <col:81> 'const ArgContext' lvalue Var 0x5630163a5d18 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x5630163bf040 <line:1259:5, line:1261:5> line:1259:19 unparse 'String (bool)' static
| |-ParmVarDecl 0x5630163befb0 <col:27, col:32> col:32 used x 'bool'
| `-CompoundStmt 0x5630163bf258 <col:35, line:1261:5>
|   `-ReturnStmt 0x5630163bf248 <line:1260:9, col:24>
|     `-ExprWithCleanups 0x5630163bf230 <col:16, col:24> 'String'
|       `-CXXConstructExpr 0x5630163bf200 <col:16, col:24> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x5630163bf1e8 <col:16, col:24> 'String' xvalue
|           `-CXXFunctionalCastExpr 0x5630163bf1c0 <col:16, col:24> 'String' functional cast to class String <ConstructorConversion>
|             `-CXXBindTemporaryExpr 0x5630163bf1a0 <col:16, col:24> 'String' (CXXTemporary 0x5630163bf1a0)
|               `-CXXConstructExpr 0x5630163bf168 <col:16, col:24> 'String' 'void (bool)'
|                 `-ImplicitCastExpr 0x5630163bf150 <col:23> 'bool' <LValueToRValue>
|                   `-DeclRefExpr 0x5630163bf130 <col:23> 'bool' lvalue ParmVar 0x5630163befb0 'x' 'bool'
|-CXXConstructorDecl 0x56301641e478 <line:1257:7> col:7 implicit constexpr BoolArg 'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x56301641e550 <col:7> col:7 implicit ~BoolArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56301641e688 <col:7> col:7 implicit constexpr BoolArg 'void (const BoolArg &)' inline default trivial noexcept-unevaluated 0x56301641e688
| `-ParmVarDecl 0x56301641e798 <col:7> col:7 'const BoolArg &'
`-CXXConstructorDecl 0x56301641e838 <col:7> col:7 implicit used constexpr BoolArg 'void (BoolArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56301641e948 <col:7> col:7 'BoolArg &&'
  `-CompoundStmt 0x563016421b00 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.BoolArg = type { i8 }
  NonVirtualBaseLLVMType:%class.BoolArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x5630163bf298 <../dummy_inc/click/args.hh:1264:1, col:54> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'BoolArg'
|-TemplateArgument type 'bool'
|-CXXRecordDecl 0x5630163bf4f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56301641e388 <col:19> col:19 implicit referenced constexpr DefaultArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x563016420f10 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<bool> &)' inline default trivial noexcept-unevaluated 0x563016420f10
| `-ParmVarDecl 0x563016421028 <col:19> col:19 'const DefaultArg<bool> &'
|-CXXConstructorDecl 0x5630164210c8 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<bool> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x5630164211d8 <col:19> col:19 used 'DefaultArg<bool> &&'
| |-CXXCtorInitializer 'BoolArg'
| | `-CXXConstructExpr 0x563016421b10 <col:19> 'BoolArg' 'void (BoolArg &&) noexcept'
| |   `-ImplicitCastExpr 0x563016421ae0 <col:19> 'BoolArg' xvalue <UncheckedDerivedToBase (BoolArg)>
| |     `-CXXStaticCastExpr 0x563016421ab0 <col:19> 'DefaultArg<bool>' xvalue static_cast<struct DefaultArg<_Bool> &&> <NoOp>
| |       `-DeclRefExpr 0x563016421a80 <col:19> 'DefaultArg<bool>' lvalue ParmVar 0x5630164211d8 '' 'DefaultArg<bool> &&'
| `-CompoundStmt 0x563016421b80 <col:19>
`-CXXDestructorDecl 0x563016421278 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg.2 = type { i8 }
  NonVirtualBaseLLVMType:%struct.DefaultArg.2 = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>
