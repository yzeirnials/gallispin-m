
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:35:5)
         0 |   unsigned char [4] c
         0 |   uint32_t u
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:39:5)
         0 |   unsigned char [4] c
         0 |   uint32_t u
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | struct Classification::Wordwise::Insn
         0 |   uint16_t offset
         2 |   uint8_t padding
         3 |   uint8_t short_output
         4 |   union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:35:5) mask
         4 |     unsigned char [4] c
         4 |     uint32_t u
         8 |   union Classification::Wordwise::Insn::(anonymous at ../elements/standard/classification.hh:39:5) value
         8 |     unsigned char [4] c
         8 |     uint32_t u
        12 |   int32_t [2] j
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | struct StringAccum::rep_t
         0 |   unsigned char * s
         8 |   int len
        12 |   int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c3cdf88 <../elements/standard/classification.hh:35:5, line:38:5> line:35:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55974c3ce110 <line:36:2, col:19> col:16 referenced c 'unsigned char [4]'
|-FieldDecl 0x55974c3ce170 <line:37:2, col:11> col:11 referenced u 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55974c70f268 <line:35:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55974c70f698 <col:5>
|-CXXConstructorDecl 0x55974c70f368 <col:5> col:5 implicit used constexpr  'void (const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c70f478 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &'
| `-CompoundStmt 0x55974c711480 <col:5>
|-CXXConstructorDecl 0x55974c70f518 <col:5> col:5 implicit used constexpr  'void (Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c70f628 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&'
| `-CompoundStmt 0x55974c712160 <col:5>
|-CXXDestructorDecl 0x55974c710e78 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55974c7dcf98 <col:5> col:5 implicit used constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &(const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c7dd0a8 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &'
| `-CompoundStmt 0x55974c7ddc40 <col:5>
|   `-ReturnStmt 0x55974c7ddc30 <col:5>
|     `-UnaryOperator 0x55974c7ddc18 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55974c7ddc08 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) *' this
`-CXXMethodDecl 0x55974c7dd118 <col:5> col:5 implicit constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &(Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&)' inline default trivial noexcept-unevaluated 0x55974c7dd118
  `-ParmVarDecl 0x55974c7dd228 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c3ce2a0 <../elements/standard/classification.hh:39:5, line:42:5> line:39:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55974c3ce420 <line:40:2, col:19> col:16 referenced c 'unsigned char [4]'
|-FieldDecl 0x55974c3ce480 <line:41:2, col:11> col:11 referenced u 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x55974c70f710 <line:39:5> col:5 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55974c70fb48 <col:5>
|-CXXConstructorDecl 0x55974c70f818 <col:5> col:5 implicit used constexpr  'void (const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c70f928 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &'
| `-CompoundStmt 0x55974c711538 <col:5>
|-CXXConstructorDecl 0x55974c70f9c8 <col:5> col:5 implicit used constexpr  'void (Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c70fad8 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&'
| `-CompoundStmt 0x55974c712258 <col:5>
|-CXXDestructorDecl 0x55974c710f60 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55974c7dd2c8 <col:5> col:5 implicit used constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &(const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c7dd3d8 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &'
| `-CompoundStmt 0x55974c7dde50 <col:5>
|   `-ReturnStmt 0x55974c7dde40 <col:5>
|     `-UnaryOperator 0x55974c7dde28 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55974c7dde18 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) *' this
`-CXXMethodDecl 0x55974c7dd448 <col:5> col:5 implicit constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &(Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&)' inline default trivial noexcept-unevaluated 0x55974c7dd448
  `-ParmVarDecl 0x55974c7dd558 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&'

Layout: <CGRecordLayout
  LLVMType:%union.anon.0 = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c3cdcc0 <../elements/standard/classification.hh:31:1, line:150:1> line:31:8 referenced struct Insn definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55974c3cddd8 <col:1, col:8> col:8 implicit referenced struct Insn
|-FieldDecl 0x55974c3cde78 <line:32:5, col:14> col:14 referenced offset 'uint16_t':'unsigned short'
|-FieldDecl 0x55974c3cded8 <line:33:5, col:13> col:13 referenced padding 'uint8_t':'unsigned char'
|-FieldDecl 0x55974c3cdf38 <line:34:5, col:13> col:13 referenced short_output 'uint8_t':'unsigned char'
|-CXXRecordDecl 0x55974c3cdf88 <line:35:5, line:38:5> line:35:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55974c3ce110 <line:36:2, col:19> col:16 referenced c 'unsigned char [4]'
| |-FieldDecl 0x55974c3ce170 <line:37:2, col:11> col:11 referenced u 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x55974c70f268 <line:35:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55974c70f698 <col:5>
| |-CXXConstructorDecl 0x55974c70f368 <col:5> col:5 implicit used constexpr  'void (const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c70f478 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &'
| | `-CompoundStmt 0x55974c711480 <col:5>
| |-CXXConstructorDecl 0x55974c70f518 <col:5> col:5 implicit used constexpr  'void (Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c70f628 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&'
| | `-CompoundStmt 0x55974c712160 <col:5>
| |-CXXDestructorDecl 0x55974c710e78 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55974c7dcf98 <col:5> col:5 implicit used constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &(const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c7dd0a8 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &'
| | `-CompoundStmt 0x55974c7ddc40 <col:5>
| |   `-ReturnStmt 0x55974c7ddc30 <col:5>
| |     `-UnaryOperator 0x55974c7ddc18 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55974c7ddc08 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) *' this
| `-CXXMethodDecl 0x55974c7dd118 <col:5> col:5 implicit constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &(Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&)' inline default trivial noexcept-unevaluated 0x55974c7dd118
|   `-ParmVarDecl 0x55974c7dd228 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&'
|-FieldDecl 0x55974c3ce238 <col:5, line:38:7> col:7 referenced mask 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)'
|-CXXRecordDecl 0x55974c3ce2a0 <line:39:5, line:42:5> line:39:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55974c3ce420 <line:40:2, col:19> col:16 referenced c 'unsigned char [4]'
| |-FieldDecl 0x55974c3ce480 <line:41:2, col:11> col:11 referenced u 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x55974c70f710 <line:39:5> col:5 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55974c70fb48 <col:5>
| |-CXXConstructorDecl 0x55974c70f818 <col:5> col:5 implicit used constexpr  'void (const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c70f928 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &'
| | `-CompoundStmt 0x55974c711538 <col:5>
| |-CXXConstructorDecl 0x55974c70f9c8 <col:5> col:5 implicit used constexpr  'void (Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c70fad8 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&'
| | `-CompoundStmt 0x55974c712258 <col:5>
| |-CXXDestructorDecl 0x55974c710f60 <col:5> col:5 implicit ~ 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55974c7dd2c8 <col:5> col:5 implicit used constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &(const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c7dd3d8 <col:5> col:5 'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &'
| | `-CompoundStmt 0x55974c7dde50 <col:5>
| |   `-ReturnStmt 0x55974c7dde40 <col:5>
| |     `-UnaryOperator 0x55974c7dde28 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55974c7dde18 <col:5> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) *' this
| `-CXXMethodDecl 0x55974c7dd448 <col:5> col:5 implicit constexpr operator= 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &(Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&)' inline default trivial noexcept-unevaluated 0x55974c7dd448
|   `-ParmVarDecl 0x55974c7dd558 <col:5> col:5 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&'
|-FieldDecl 0x55974c3ce548 <col:5, line:42:7> col:7 referenced value 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)'
|-FieldDecl 0x55974c3ce648 <line:43:5, col:16> col:13 referenced j 'int32_t [2]'
|-EnumDecl 0x55974c3ce698 <line:45:5, line:47:5> line:45:5
| `-EnumConstantDecl 0x55974c3ce7a0 <line:46:2, col:10> col:2 referenced width 'Classification::Wordwise::Insn::(anonymous enum at ../elements/standard/classification.hh:45:5)'
|   `-ImplicitCastExpr 0x55974c3ce7f0 <col:10> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c3ce780 <col:10> 'int' Int: 4
|       `-IntegerLiteral 0x55974c3ce760 <col:10> 'int' 4
|-CXXConstructorDecl 0x55974c3cec28 <line:49:5, line:57:5> line:49:5 used Insn 'void (int, uint32_t, uint32_t, int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55974c3ce820 <col:10, col:14> col:14 used offset_ 'int'
| |-ParmVarDecl 0x55974c3ce898 <col:23, col:32> col:32 used value_ 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c3ce910 <col:40, col:49> col:49 used mask_ 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c3ce988 <line:50:3, col:22> col:11 used failure_ 'int32_t':'int' cinit
| | `-ImplicitCastExpr 0x55974c70f040 <col:22> 'int32_t':'int' <IntegralCast>
| |   `-DeclRefExpr 0x55974c70f020 <col:22> 'Classification::Jumps' EnumConstant 0x55974c3cd7d8 'j_failure' 'Classification::Jumps'
| |-ParmVarDecl 0x55974c3cea00 <col:33, col:52> col:41 used success_ 'int32_t':'int' cinit
| | `-ImplicitCastExpr 0x55974c70f078 <col:52> 'int32_t':'int' <IntegralCast>
| |   `-DeclRefExpr 0x55974c70f058 <col:52> 'Classification::Jumps' EnumConstant 0x55974c3cd828 'j_success' 'Classification::Jumps'
| |-ParmVarDecl 0x55974c3cea78 <line:51:3, col:24> col:8 used short_output_ 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55974c70f090 <col:24> 'bool' false
| |-CXXCtorInitializer Field 0x55974c3cde78 'offset' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55974c70f0f8 <line:52:11> 'uint16_t':'unsigned short' <IntegralCast>
| |   `-ImplicitCastExpr 0x55974c70f0e0 <col:11> 'int' <LValueToRValue>
| |     `-DeclRefExpr 0x55974c70f0a0 <col:11> 'int' lvalue ParmVar 0x55974c3ce820 'offset_' 'int'
| |-CXXCtorInitializer Field 0x55974c3cded8 'padding' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55974c70f178 <col:29> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-IntegerLiteral 0x55974c70f138 <col:29> 'int' 0
| |-CXXCtorInitializer Field 0x55974c3cdf38 'short_output' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55974c70f210 <col:46> 'uint8_t':'unsigned char' <IntegralCast>
| |   `-ImplicitCastExpr 0x55974c70f1f8 <col:46> 'bool' <LValueToRValue>
| |     `-DeclRefExpr 0x55974c70f1b8 <col:46> 'bool' lvalue ParmVar 0x55974c3cea78 'short_output_' 'bool'
| |-CXXCtorInitializer Field 0x55974c3ce238 'mask' 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)'
| | `-CXXConstructExpr 0x55974c70f6a8 <line:49:5> 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55974c3ce548 'value' 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)'
| | `-CXXConstructExpr 0x55974c70fb58 <col:5> 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' 'void () noexcept'
| `-CompoundStmt 0x55974c70ff98 <line:52:61, line:57:5>
|   |-BinaryOperator 0x55974c70fc78 <line:53:2, col:11> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x55974c70fc10 <col:2, col:7> 'uint32_t':'unsigned int' lvalue .u 0x55974c3ce170
|   | | `-MemberExpr 0x55974c70fbe0 <col:2> 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue ->mask 0x55974c3ce238
|   | |   `-CXXThisExpr 0x55974c70fbd0 <col:2> 'Classification::Wordwise::Insn *' implicit this
|   | `-ImplicitCastExpr 0x55974c70fc60 <col:11> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55974c70fc40 <col:11> 'uint32_t':'unsigned int' lvalue ParmVar 0x55974c3ce910 'mask_' 'uint32_t':'unsigned int'
|   |-BinaryOperator 0x55974c70fd98 <line:54:2, col:21> 'uint32_t':'unsigned int' lvalue '='
|   | |-MemberExpr 0x55974c70fcd8 <col:2, col:8> 'uint32_t':'unsigned int' lvalue .u 0x55974c3ce480
|   | | `-MemberExpr 0x55974c70fca8 <col:2> 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue ->value 0x55974c3ce548
|   | |   `-CXXThisExpr 0x55974c70fc98 <col:2> 'Classification::Wordwise::Insn *' implicit this
|   | `-BinaryOperator 0x55974c70fd78 <col:12, col:21> 'unsigned int' '&'
|   |   |-ImplicitCastExpr 0x55974c70fd48 <col:12> 'uint32_t':'unsigned int' <LValueToRValue>
|   |   | `-DeclRefExpr 0x55974c70fd08 <col:12> 'uint32_t':'unsigned int' lvalue ParmVar 0x55974c3ce898 'value_' 'uint32_t':'unsigned int'
|   |   `-ImplicitCastExpr 0x55974c70fd60 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     `-DeclRefExpr 0x55974c70fd28 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x55974c3ce910 'mask_' 'uint32_t':'unsigned int'
|   |-BinaryOperator 0x55974c70fe88 <line:55:2, col:9> 'int32_t':'int' lvalue '='
|   | |-ArraySubscriptExpr 0x55974c70fe30 <col:2, col:5> 'int32_t':'int' lvalue
|   | | |-ImplicitCastExpr 0x55974c70fe18 <col:2> 'int32_t *' <ArrayToPointerDecay>
|   | | | `-MemberExpr 0x55974c70fdc8 <col:2> 'int32_t [2]' lvalue ->j 0x55974c3ce648
|   | | |   `-CXXThisExpr 0x55974c70fdb8 <col:2> 'Classification::Wordwise::Insn *' implicit this
|   | | `-IntegerLiteral 0x55974c70fdf8 <col:4> 'int' 0
|   | `-ImplicitCastExpr 0x55974c70fe70 <col:9> 'int32_t':'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55974c70fe50 <col:9> 'int32_t':'int' lvalue ParmVar 0x55974c3ce988 'failure_' 'int32_t':'int'
|   `-BinaryOperator 0x55974c70ff78 <line:56:2, col:9> 'int32_t':'int' lvalue '='
|     |-ArraySubscriptExpr 0x55974c70ff20 <col:2, col:5> 'int32_t':'int' lvalue
|     | |-ImplicitCastExpr 0x55974c70ff08 <col:2> 'int32_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55974c70feb8 <col:2> 'int32_t [2]' lvalue ->j 0x55974c3ce648
|     | |   `-CXXThisExpr 0x55974c70fea8 <col:2> 'Classification::Wordwise::Insn *' implicit this
|     | `-IntegerLiteral 0x55974c70fee8 <col:4> 'int' 1
|     `-ImplicitCastExpr 0x55974c70ff60 <col:9> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55974c70ff40 <col:9> 'int32_t':'int' lvalue ParmVar 0x55974c3cea00 'success_' 'int32_t':'int'
|-CXXMethodDecl 0x55974c3ced78 <line:59:5, col:40> col:13 used yes 'int32_t () const'
| `-CompoundStmt 0x55974c7100f8 <col:25, col:40>
|   `-ReturnStmt 0x55974c7100e8 <col:27, col:37>
|     `-ImplicitCastExpr 0x55974c7100d0 <col:34, col:37> 'int32_t':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55974c7100b0 <col:34, col:37> 'const int32_t':'const int' lvalue
|         |-ImplicitCastExpr 0x55974c710098 <col:34> 'const int32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c70ffd8 <col:34> 'int32_t const[2]' lvalue ->j 0x55974c3ce648
|         |   `-CXXThisExpr 0x55974c70ffc8 <col:34> 'const Classification::Wordwise::Insn *' implicit this
|         `-IntegerLiteral 0x55974c710008 <col:36> 'int' 1
|-CXXMethodDecl 0x55974c3cee38 <line:60:5, col:39> col:13 used no 'int32_t () const'
| `-CompoundStmt 0x55974c7101d0 <col:24, col:39>
|   `-ReturnStmt 0x55974c7101c0 <col:26, col:36>
|     `-ImplicitCastExpr 0x55974c7101a8 <col:33, col:36> 'int32_t':'int' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55974c710188 <col:33, col:36> 'const int32_t':'const int' lvalue
|         |-ImplicitCastExpr 0x55974c710170 <col:33> 'const int32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c710120 <col:33> 'int32_t const[2]' lvalue ->j 0x55974c3ce648
|         |   `-CXXThisExpr 0x55974c710110 <col:33> 'const Classification::Wordwise::Insn *' implicit this
|         `-IntegerLiteral 0x55974c710150 <col:35> 'int' 0
|-CXXMethodDecl 0x55974c3cef80 <line:62:5, col:41> col:10 used set_yes 'void (int)'
| |-ParmVarDecl 0x55974c3ceef0 <col:18, col:22> col:22 used dst 'int'
| `-CompoundStmt 0x55974c7102d8 <col:27, col:41>
|   `-BinaryOperator 0x55974c7102b8 <col:29, col:36> 'int32_t':'int' lvalue '='
|     |-ArraySubscriptExpr 0x55974c710260 <col:29, col:32> 'int32_t':'int' lvalue
|     | |-ImplicitCastExpr 0x55974c710248 <col:29> 'int32_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55974c7101f8 <col:29> 'int32_t [2]' lvalue ->j 0x55974c3ce648
|     | |   `-CXXThisExpr 0x55974c7101e8 <col:29> 'Classification::Wordwise::Insn *' implicit this
|     | `-IntegerLiteral 0x55974c710228 <col:31> 'int' 1
|     `-ImplicitCastExpr 0x55974c7102a0 <col:36> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55974c710280 <col:36> 'int' lvalue ParmVar 0x55974c3ceef0 'dst' 'int'
|-CXXMethodDecl 0x55974c3cf0d0 <line:63:5, col:40> col:10 used set_no 'void (int)'
| |-ParmVarDecl 0x55974c3cf040 <col:17, col:21> col:21 used dst 'int'
| `-CompoundStmt 0x55974c7103e0 <col:26, col:40>
|   `-BinaryOperator 0x55974c7103c0 <col:28, col:35> 'int32_t':'int' lvalue '='
|     |-ArraySubscriptExpr 0x55974c710368 <col:28, col:31> 'int32_t':'int' lvalue
|     | |-ImplicitCastExpr 0x55974c710350 <col:28> 'int32_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55974c710300 <col:28> 'int32_t [2]' lvalue ->j 0x55974c3ce648
|     | |   `-CXXThisExpr 0x55974c7102f0 <col:28> 'Classification::Wordwise::Insn *' implicit this
|     | `-IntegerLiteral 0x55974c710330 <col:30> 'int' 0
|     `-ImplicitCastExpr 0x55974c7103a8 <col:35> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55974c710388 <col:35> 'int' lvalue ParmVar 0x55974c3cf040 'dst' 'int'
|-CXXMethodDecl 0x55974c3cf1a0 <line:65:5, line:76:5> line:65:14 used required_length 'unsigned int () const'
| `-CompoundStmt 0x55974c710c40 <col:38, line:76:5>
|   `-IfStmt 0x55974c710c18 <line:66:2, line:75:22> has_else
|     |-BinaryOperator 0x55974c7104b8 <line:66:6, col:16> 'bool' '=='
|     | |-ImplicitCastExpr 0x55974c710488 <col:6, col:11> 'uint32_t':'unsigned int' <LValueToRValue>
|     | | `-MemberExpr 0x55974c710438 <col:6, col:11> 'const uint32_t':'const unsigned int' lvalue .u 0x55974c3ce170
|     | |   `-MemberExpr 0x55974c710408 <col:6> 'const union (anonymous union at ../elements/standard/classification.hh:35:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue ->mask 0x55974c3ce238
|     | |     `-CXXThisExpr 0x55974c7103f8 <col:6> 'const Classification::Wordwise::Insn *' implicit this
|     | `-ImplicitCastExpr 0x55974c7104a0 <col:16> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x55974c710468 <col:16> 'int' 0
|     |-ReturnStmt 0x55974c710510 <line:67:6, col:13>
|     | `-ImplicitCastExpr 0x55974c7104f8 <col:13> 'unsigned int' <IntegralCast>
|     |   `-IntegerLiteral 0x55974c7104d8 <col:13> 'int' 0
|     `-IfStmt 0x55974c710bf0 <line:68:7, line:75:22> has_else
|       |-ImplicitCastExpr 0x55974c710638 <line:68:11, col:19> 'bool' <IntegralToBoolean>
|       | `-ImplicitCastExpr 0x55974c710620 <col:11, col:19> 'unsigned char' <LValueToRValue>
|       |   `-ArraySubscriptExpr 0x55974c710600 <col:11, col:19> 'const unsigned char' lvalue
|       |     |-ImplicitCastExpr 0x55974c7105e8 <col:11, col:16> 'const unsigned char *' <ArrayToPointerDecay>
|       |     | `-MemberExpr 0x55974c710560 <col:11, col:16> 'unsigned char const[4]' lvalue .c 0x55974c3ce110
|       |     |   `-MemberExpr 0x55974c710530 <col:11> 'const union (anonymous union at ../elements/standard/classification.hh:35:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue ->mask 0x55974c3ce238
|       |     |     `-CXXThisExpr 0x55974c710520 <col:11> 'const Classification::Wordwise::Insn *' implicit this
|       |     `-IntegerLiteral 0x55974c710590 <col:18> 'int' 3
|       |-ReturnStmt 0x55974c710718 <line:69:6, col:22>
|       | `-ImplicitCastExpr 0x55974c710700 <col:13, col:22> 'unsigned int' <IntegralCast>
|       |   `-BinaryOperator 0x55974c7106e0 <col:13, col:22> 'int' '+'
|       |     |-ImplicitCastExpr 0x55974c7106c8 <col:13> 'int' <IntegralCast>
|       |     | `-ImplicitCastExpr 0x55974c7106b0 <col:13> 'uint16_t':'unsigned short' <LValueToRValue>
|       |     |   `-MemberExpr 0x55974c710660 <col:13> 'const uint16_t':'const unsigned short' lvalue ->offset 0x55974c3cde78
|       |     |     `-CXXThisExpr 0x55974c710650 <col:13> 'const Classification::Wordwise::Insn *' implicit this
|       |     `-IntegerLiteral 0x55974c710690 <col:22> 'int' 4
|       `-IfStmt 0x55974c710bc8 <line:70:7, line:75:22> has_else
|         |-ImplicitCastExpr 0x55974c710808 <line:70:11, col:19> 'bool' <IntegralToBoolean>
|         | `-ImplicitCastExpr 0x55974c7107f0 <col:11, col:19> 'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55974c7107d0 <col:11, col:19> 'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55974c7107b8 <col:11, col:16> 'const unsigned char *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55974c710768 <col:11, col:16> 'unsigned char const[4]' lvalue .c 0x55974c3ce110
|         |     |   `-MemberExpr 0x55974c710738 <col:11> 'const union (anonymous union at ../elements/standard/classification.hh:35:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue ->mask 0x55974c3ce238
|         |     |     `-CXXThisExpr 0x55974c710728 <col:11> 'const Classification::Wordwise::Insn *' implicit this
|         |     `-IntegerLiteral 0x55974c710798 <col:18> 'int' 2
|         |-ReturnStmt 0x55974c7108e8 <line:71:6, col:22>
|         | `-ImplicitCastExpr 0x55974c7108d0 <col:13, col:22> 'unsigned int' <IntegralCast>
|         |   `-BinaryOperator 0x55974c7108b0 <col:13, col:22> 'int' '+'
|         |     |-ImplicitCastExpr 0x55974c710898 <col:13> 'int' <IntegralCast>
|         |     | `-ImplicitCastExpr 0x55974c710880 <col:13> 'uint16_t':'unsigned short' <LValueToRValue>
|         |     |   `-MemberExpr 0x55974c710830 <col:13> 'const uint16_t':'const unsigned short' lvalue ->offset 0x55974c3cde78
|         |     |     `-CXXThisExpr 0x55974c710820 <col:13> 'const Classification::Wordwise::Insn *' implicit this
|         |     `-IntegerLiteral 0x55974c710860 <col:22> 'int' 3
|         `-IfStmt 0x55974c710ba0 <line:72:7, line:75:22> has_else
|           |-ImplicitCastExpr 0x55974c7109d8 <line:72:11, col:19> 'bool' <IntegralToBoolean>
|           | `-ImplicitCastExpr 0x55974c7109c0 <col:11, col:19> 'unsigned char' <LValueToRValue>
|           |   `-ArraySubscriptExpr 0x55974c7109a0 <col:11, col:19> 'const unsigned char' lvalue
|           |     |-ImplicitCastExpr 0x55974c710988 <col:11, col:16> 'const unsigned char *' <ArrayToPointerDecay>
|           |     | `-MemberExpr 0x55974c710938 <col:11, col:16> 'unsigned char const[4]' lvalue .c 0x55974c3ce110
|           |     |   `-MemberExpr 0x55974c710908 <col:11> 'const union (anonymous union at ../elements/standard/classification.hh:35:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue ->mask 0x55974c3ce238
|           |     |     `-CXXThisExpr 0x55974c7108f8 <col:11> 'const Classification::Wordwise::Insn *' implicit this
|           |     `-IntegerLiteral 0x55974c710968 <col:18> 'int' 1
|           |-ReturnStmt 0x55974c710ab8 <line:73:6, col:22>
|           | `-ImplicitCastExpr 0x55974c710aa0 <col:13, col:22> 'unsigned int' <IntegralCast>
|           |   `-BinaryOperator 0x55974c710a80 <col:13, col:22> 'int' '+'
|           |     |-ImplicitCastExpr 0x55974c710a68 <col:13> 'int' <IntegralCast>
|           |     | `-ImplicitCastExpr 0x55974c710a50 <col:13> 'uint16_t':'unsigned short' <LValueToRValue>
|           |     |   `-MemberExpr 0x55974c710a00 <col:13> 'const uint16_t':'const unsigned short' lvalue ->offset 0x55974c3cde78
|           |     |     `-CXXThisExpr 0x55974c7109f0 <col:13> 'const Classification::Wordwise::Insn *' implicit this
|           |     `-IntegerLiteral 0x55974c710a30 <col:22> 'int' 2
|           `-ReturnStmt 0x55974c710b90 <line:75:6, col:22>
|             `-ImplicitCastExpr 0x55974c710b78 <col:13, col:22> 'unsigned int' <IntegralCast>
|               `-BinaryOperator 0x55974c710b58 <col:13, col:22> 'int' '+'
|                 |-ImplicitCastExpr 0x55974c710b40 <col:13> 'int' <IntegralCast>
|                 | `-ImplicitCastExpr 0x55974c710b28 <col:13> 'uint16_t':'unsigned short' <LValueToRValue>
|                 |   `-MemberExpr 0x55974c710ad8 <col:13> 'const uint16_t':'const unsigned short' lvalue ->offset 0x55974c3cde78
|                 |     `-CXXThisExpr 0x55974c710ac8 <col:13> 'const Classification::Wordwise::Insn *' implicit this
|                 `-IntegerLiteral 0x55974c710b08 <col:22> 'int' 1
|-CXXMethodDecl 0x55974c3cf3c8 <line:81:5, col:56> col:10 used implies 'bool (const Classification::Wordwise::Insn &, unsigned int) const'
| |-ParmVarDecl 0x55974c3cf278 <col:18, col:30> col:30 x 'const Classification::Wordwise::Insn &'
| `-ParmVarDecl 0x55974c3cf2f8 <col:33, col:42> col:42 known_length 'unsigned int'
|-CXXMethodDecl 0x55974c3cf5a0 <line:89:5, col:60> col:10 used not_implies 'bool (const Classification::Wordwise::Insn &, unsigned int) const'
| |-ParmVarDecl 0x55974c3cf488 <col:22, col:34> col:34 x 'const Classification::Wordwise::Insn &'
| `-ParmVarDecl 0x55974c3cf508 <col:37, col:46> col:46 known_length 'unsigned int'
|-CXXMethodDecl 0x55974c3cf778 <line:93:5, col:60> col:10 used implies_not 'bool (const Classification::Wordwise::Insn &, unsigned int) const'
| |-ParmVarDecl 0x55974c3cf660 <col:22, col:34> col:34 x 'const Classification::Wordwise::Insn &'
| `-ParmVarDecl 0x55974c3cf6e0 <col:37, col:46> col:46 known_length 'unsigned int'
|-CXXMethodDecl 0x55974c3cf950 <line:98:5, col:64> col:10 used not_implies_not 'bool (const Classification::Wordwise::Insn &, unsigned int) const'
| |-ParmVarDecl 0x55974c3cf838 <col:26, col:38> col:38 x 'const Classification::Wordwise::Insn &'
| `-ParmVarDecl 0x55974c3cf8b8 <col:41, col:50> col:50 known_length 'unsigned int'
|-CXXMethodDecl 0x55974c3cfb58 <line:105:5, col:57> col:10 used compatible 'bool (const Classification::Wordwise::Insn &, bool) const'
| |-ParmVarDecl 0x55974c3cfa10 <col:21, col:33> col:33 x 'const Classification::Wordwise::Insn &'
| `-ParmVarDecl 0x55974c3cfa88 <col:36, col:41> col:41 consider_short 'bool'
|-CXXMethodDecl 0x55974c3cfcd8 <line:111:5, col:47> col:10 used generalizable_or_pair 'bool (const Classification::Wordwise::Insn &) const'
| `-ParmVarDecl 0x55974c3cfc18 <col:32, col:44> col:44 x 'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55974c3cfda0 <line:117:5, col:22> col:10 used flippable 'bool () const'
|-CXXMethodDecl 0x55974c3cfe60 <line:120:5, col:15> col:10 used flip 'void ()'
|-CXXMethodDecl 0x55974c3cffd8 <line:124:5, line:130:5> line:124:10 used offset_by 'Classification::Wordwise::Insn (int) const'
| |-ParmVarDecl 0x55974c3cff18 <col:20, col:24> col:24 used offset 'int'
| `-CompoundStmt 0x55974c712498 <col:38, line:130:5>
|   |-DeclStmt 0x55974c711720 <line:125:9, col:23>
|   | `-VarDecl 0x55974c710c68 <col:9, col:19> col:14 used i 'Classification::Wordwise::Insn' nrvo cinit
|   |   `-CXXConstructExpr 0x55974c7116f0 <col:18, col:19> 'Classification::Wordwise::Insn' 'void (const Classification::Wordwise::Insn &) noexcept'
|   |     `-UnaryOperator 0x55974c710ce0 <col:18, col:19> 'const Classification::Wordwise::Insn' lvalue prefix '*' cannot overflow
|   |       `-CXXThisExpr 0x55974c710cd0 <col:19> 'const Classification::Wordwise::Insn *' this
|   |-ForStmt 0x55974c711d58 <line:126:9, line:128:27>
|   | |-DeclStmt 0x55974c7117d8 <line:126:14, col:23>
|   | | `-VarDecl 0x55974c711750 <col:14, col:22> col:18 used k 'int' cinit
|   | |   `-IntegerLiteral 0x55974c7117b8 <col:22> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x55974c711848 <col:25, col:29> 'bool' '<'
|   | | |-ImplicitCastExpr 0x55974c711830 <col:25> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55974c7117f0 <col:25> 'int' lvalue Var 0x55974c711750 'k' 'int'
|   | | `-IntegerLiteral 0x55974c711810 <col:29> 'int' 2
|   | |-UnaryOperator 0x55974c711888 <col:32, col:34> 'int' lvalue prefix '++'
|   | | `-DeclRefExpr 0x55974c711868 <col:34> 'int' lvalue Var 0x55974c711750 'k' 'int'
|   | `-IfStmt 0x55974c711d40 <line:127:13, line:128:27>
|   |   |-BinaryOperator 0x55974c711998 <line:127:17, col:26> 'bool' '>'
|   |   | |-ImplicitCastExpr 0x55974c711980 <col:17, col:22> 'int32_t':'int' <LValueToRValue>
|   |   | | `-ArraySubscriptExpr 0x55974c711940 <col:17, col:22> 'int32_t':'int' lvalue
|   |   | |   |-ImplicitCastExpr 0x55974c711910 <col:17, col:19> 'int32_t *' <ArrayToPointerDecay>
|   |   | |   | `-MemberExpr 0x55974c7118c0 <col:17, col:19> 'int32_t [2]' lvalue .j 0x55974c3ce648
|   |   | |   |   `-DeclRefExpr 0x55974c7118a0 <col:17> 'Classification::Wordwise::Insn' lvalue Var 0x55974c710c68 'i' 'Classification::Wordwise::Insn'
|   |   | |   `-ImplicitCastExpr 0x55974c711928 <col:21> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x55974c7118f0 <col:21> 'int' lvalue Var 0x55974c711750 'k' 'int'
|   |   | `-IntegerLiteral 0x55974c711960 <col:26> 'int' 0
|   |   `-CompoundAssignOperator 0x55974c711d10 <line:128:17, col:27> 'int32_t':'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'
|   |     |-ArraySubscriptExpr 0x55974c711cb8 <col:17, col:22> 'int32_t':'int' lvalue
|   |     | |-ImplicitCastExpr 0x55974c711c88 <col:17, col:19> 'int32_t *' <ArrayToPointerDecay>
|   |     | | `-MemberExpr 0x55974c711c38 <col:17, col:19> 'int32_t [2]' lvalue .j 0x55974c3ce648
|   |     | |   `-DeclRefExpr 0x55974c711c18 <col:17> 'Classification::Wordwise::Insn' lvalue Var 0x55974c710c68 'i' 'Classification::Wordwise::Insn'
|   |     | `-ImplicitCastExpr 0x55974c711ca0 <col:21> 'int' <LValueToRValue>
|   |     |   `-DeclRefExpr 0x55974c711c68 <col:21> 'int' lvalue Var 0x55974c711750 'k' 'int'
|   |     `-ImplicitCastExpr 0x55974c711cf8 <col:27> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55974c711cd8 <col:27> 'int' lvalue ParmVar 0x55974c3cff18 'offset' 'int'
|   `-ReturnStmt 0x55974c712480 <line:129:9, col:16>
|     `-CXXConstructExpr 0x55974c712450 <col:16> 'Classification::Wordwise::Insn' 'void (Classification::Wordwise::Insn &&) noexcept' elidable
|       `-ImplicitCastExpr 0x55974c711db0 <col:16> 'Classification::Wordwise::Insn' xvalue <NoOp>
|         `-DeclRefExpr 0x55974c711d90 <col:16> 'Classification::Wordwise::Insn' lvalue Var 0x55974c710c68 'i' 'Classification::Wordwise::Insn'
|-CXXMethodDecl 0x55974c3d00a0 <line:132:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x55974c3d02a0 <line:134:5, line:136:5> line:134:16 used compare 'int (const Classification::Wordwise::Insn &, const Classification::Wordwise::Insn &)' static
| |-ParmVarDecl 0x55974c3d0150 <col:24, col:36> col:36 used a 'const Classification::Wordwise::Insn &'
| |-ParmVarDecl 0x55974c3d01c8 <col:39, col:51> col:51 used b 'const Classification::Wordwise::Insn &'
| `-CompoundStmt 0x55974c712660 <col:54, line:136:5>
|   `-ReturnStmt 0x55974c712650 <line:135:2, col:26>
|     `-CallExpr 0x55974c7125d0 <col:9, col:26> 'int'
|       |-ImplicitCastExpr 0x55974c7125b8 <col:9> 'int (*)(const void *, const void *, size_t) throw()' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55974c712598 <col:9> 'int (const void *, const void *, size_t) throw()' lvalue Function 0x55974c3e6348 'memcmp' 'int (const void *, const void *, size_t) throw()'
|       |-ImplicitCastExpr 0x55974c712608 <col:16, col:17> 'const void *' <BitCast>
|       | `-UnaryOperator 0x55974c712528 <col:16, col:17> 'const Classification::Wordwise::Insn *' prefix '&' cannot overflow
|       |   `-DeclRefExpr 0x55974c712508 <col:17> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c3d0150 'a' 'const Classification::Wordwise::Insn &'
|       |-ImplicitCastExpr 0x55974c712620 <col:20, col:21> 'const void *' <BitCast>
|       | `-UnaryOperator 0x55974c712560 <col:20, col:21> 'const Classification::Wordwise::Insn *' prefix '&' cannot overflow
|       |   `-DeclRefExpr 0x55974c712540 <col:21> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c3d01c8 'b' 'const Classification::Wordwise::Insn &'
|       `-ImplicitCastExpr 0x55974c712638 <col:24> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x55974c712578 <col:24> 'int' 12
|-AccessSpecDecl 0x55974c3d0350 <line:138:3, col:10> col:3 private
|-CXXMethodDecl 0x55974c70ec60 <line:140:5, line:146:5> line:140:17 used implies_short_ok 'bool (bool, const Classification::Wordwise::Insn &, bool, unsigned int) const' inline
| |-ParmVarDecl 0x55974c3d0388 <col:34, col:39> col:39 used direction 'bool'
| |-ParmVarDecl 0x55974c3d0400 <col:50, col:62> col:62 used x 'const Classification::Wordwise::Insn &'
| |-ParmVarDecl 0x55974c3d0478 <col:65, col:70> col:70 used next_direction 'bool'
| |-ParmVarDecl 0x55974c3d04f8 <col:86, col:95> col:95 used known_length 'unsigned int'
| `-CompoundStmt 0x55974c712a78 <col:115, line:146:5>
|   `-IfStmt 0x55974c712a50 <line:142:2, line:145:77> has_else
|     |-BinaryOperator 0x55974c7128b8 <line:142:6, col:55> 'bool' '||'
|     | |-BinaryOperator 0x55974c712738 <col:6, col:22> 'bool' '!='
|     | | |-ImplicitCastExpr 0x55974c712708 <col:6> 'int' <IntegralCast>
|     | | | `-ImplicitCastExpr 0x55974c7126d8 <col:6> 'uint8_t':'unsigned char' <LValueToRValue>
|     | | |   `-MemberExpr 0x55974c712688 <col:6> 'const uint8_t':'const unsigned char' lvalue ->short_output 0x55974c3cdf38
|     | | |     `-CXXThisExpr 0x55974c712678 <col:6> 'const Classification::Wordwise::Insn *' implicit this
|     | | `-ImplicitCastExpr 0x55974c712720 <col:22> 'int' <IntegralCast>
|     | |   `-ImplicitCastExpr 0x55974c7126f0 <col:22> 'bool' <LValueToRValue>
|     | |     `-DeclRefExpr 0x55974c7126b8 <col:22> 'bool' lvalue ParmVar 0x55974c3d0388 'direction' 'bool'
|     | `-BinaryOperator 0x55974c712898 <col:35, col:55> 'bool' '<='
|     |   |-BinaryOperator 0x55974c7127e8 <col:35, col:44> 'int' '+'
|     |   | |-ImplicitCastExpr 0x55974c7127d0 <col:35> 'int' <IntegralCast>
|     |   | | `-ImplicitCastExpr 0x55974c7127b8 <col:35> 'uint16_t':'unsigned short' <LValueToRValue>
|     |   | |   `-MemberExpr 0x55974c712768 <col:35> 'const uint16_t':'const unsigned short' lvalue ->offset 0x55974c3cde78
|     |   | |     `-CXXThisExpr 0x55974c712758 <col:35> 'const Classification::Wordwise::Insn *' implicit this
|     |   | `-IntegerLiteral 0x55974c712798 <col:44> 'int' 4
|     |   `-CStyleCastExpr 0x55974c712870 <col:49, col:55> 'int' <NoOp>
|     |     `-ImplicitCastExpr 0x55974c712858 <col:55> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-ImplicitCastExpr 0x55974c712840 <col:55> 'unsigned int' <LValueToRValue> part_of_explicit_cast
|     |         `-DeclRefExpr 0x55974c712808 <col:55> 'unsigned int' lvalue ParmVar 0x55974c3d04f8 'known_length' 'unsigned int'
|     |-ReturnStmt 0x55974c7128e8 <line:143:6, col:13>
|     | `-CXXBoolLiteralExpr 0x55974c7128d8 <col:13> 'bool' true
|     `-ReturnStmt 0x55974c712a40 <line:145:6, col:77>
|       `-CXXMemberCallExpr 0x55974c7129b8 <col:13, col:77> 'bool'
|         |-MemberExpr 0x55974c712908 <col:13> '<bound member function type>' ->hard_implies_short_ok 0x55974c70ef48
|         | `-CXXThisExpr 0x55974c7128f8 <col:13> 'const Classification::Wordwise::Insn *' implicit this
|         |-ImplicitCastExpr 0x55974c7129f8 <col:35> 'bool' <LValueToRValue>
|         | `-DeclRefExpr 0x55974c712938 <col:35> 'bool' lvalue ParmVar 0x55974c3d0388 'direction' 'bool'
|         |-DeclRefExpr 0x55974c712958 <col:46> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c3d0400 'x' 'const Classification::Wordwise::Insn &'
|         |-ImplicitCastExpr 0x55974c712a10 <col:49> 'bool' <LValueToRValue>
|         | `-DeclRefExpr 0x55974c712978 <col:49> 'bool' lvalue ParmVar 0x55974c3d0478 'next_direction' 'bool'
|         `-ImplicitCastExpr 0x55974c712a28 <col:65> 'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55974c712998 <col:65> 'unsigned int' lvalue ParmVar 0x55974c3d04f8 'known_length' 'unsigned int'
|-CXXMethodDecl 0x55974c70ef48 <line:148:5, col:107> col:10 used hard_implies_short_ok 'bool (bool, const Classification::Wordwise::Insn &, bool, unsigned int) const'
| |-ParmVarDecl 0x55974c70ed30 <col:32, col:37> col:37 direction 'bool'
| |-ParmVarDecl 0x55974c70eda8 <col:48, col:60> col:60 x 'const Classification::Wordwise::Insn &'
| |-ParmVarDecl 0x55974c70ee20 <col:63, col:68> col:68 next_direction 'bool'
| `-ParmVarDecl 0x55974c70eea0 <col:84, col:93> col:93 known_length 'unsigned int'
|-CXXConstructorDecl 0x55974c710cf8 <line:31:8> col:8 implicit used constexpr Insn 'void (const Classification::Wordwise::Insn &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c710e08 <col:8> col:8 used 'const Classification::Wordwise::Insn &'
| |-CXXCtorInitializer Field 0x55974c3cde78 'offset' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55974c7112d0 <col:8> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x55974c7112a0 <col:8> 'const uint16_t':'const unsigned short' lvalue .offset 0x55974c3cde78
| |     `-DeclRefExpr 0x55974c711280 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |-CXXCtorInitializer Field 0x55974c3cded8 'padding' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55974c711360 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55974c711330 <col:8> 'const uint8_t':'const unsigned char' lvalue .padding 0x55974c3cded8
| |     `-DeclRefExpr 0x55974c711310 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |-CXXCtorInitializer Field 0x55974c3cdf38 'short_output' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55974c7113f0 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55974c7113c0 <col:8> 'const uint8_t':'const unsigned char' lvalue .short_output 0x55974c3cdf38
| |     `-DeclRefExpr 0x55974c7113a0 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |-CXXCtorInitializer Field 0x55974c3ce238 'mask' 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)'
| | `-CXXConstructExpr 0x55974c711490 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' 'void (const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &) noexcept'
| |   `-MemberExpr 0x55974c711450 <col:8> 'const union (anonymous union at ../elements/standard/classification.hh:35:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue .mask 0x55974c3ce238
| |     `-DeclRefExpr 0x55974c711430 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |-CXXCtorInitializer Field 0x55974c3ce548 'value' 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)'
| | `-CXXConstructExpr 0x55974c711548 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' 'void (const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &) noexcept'
| |   `-MemberExpr 0x55974c711508 <col:8> 'const union (anonymous union at ../elements/standard/classification.hh:39:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue .value 0x55974c3ce548
| |     `-DeclRefExpr 0x55974c7114e8 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |-CXXCtorInitializer Field 0x55974c3ce648 'j' 'int32_t [2]'
| | `-ArrayInitLoopExpr 0x55974c711668 <col:8> 'int32_t [2]'
| |   |-OpaqueValueExpr 0x55974c7115f0 <col:8> 'int32_t const[2]' lvalue
| |   | `-MemberExpr 0x55974c7115c0 <col:8> 'int32_t const[2]' lvalue .j 0x55974c3ce648
| |   |   `-DeclRefExpr 0x55974c7115a0 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |   `-ImplicitCastExpr 0x55974c711650 <col:8> 'int32_t':'int' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55974c711630 <col:8> 'const int32_t':'const int' lvalue
| |       |-ImplicitCastExpr 0x55974c711618 <col:8> 'const int32_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55974c7115f0 <col:8> 'int32_t const[2]' lvalue
| |       |   `-MemberExpr 0x55974c7115c0 <col:8> 'int32_t const[2]' lvalue .j 0x55974c3ce648
| |       |     `-DeclRefExpr 0x55974c7115a0 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c710e08 '' 'const Classification::Wordwise::Insn &'
| |       `-ArrayInitIndexExpr 0x55974c711608 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55974c7116e0 <col:8>
|-CXXConstructorDecl 0x55974c711068 <col:8> col:8 implicit used constexpr Insn 'void (Classification::Wordwise::Insn &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c711178 <col:8> col:8 used 'Classification::Wordwise::Insn &&'
| |-CXXCtorInitializer Field 0x55974c3cde78 'offset' 'uint16_t':'unsigned short'
| | `-ImplicitCastExpr 0x55974c711ef0 <col:8> 'uint16_t':'unsigned short' <LValueToRValue>
| |   `-MemberExpr 0x55974c711ec0 <col:8> 'uint16_t':'unsigned short' xvalue .offset 0x55974c3cde78
| |     `-CXXStaticCastExpr 0x55974c711e90 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |       `-DeclRefExpr 0x55974c711e60 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |-CXXCtorInitializer Field 0x55974c3cded8 'padding' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55974c711fc0 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55974c711f90 <col:8> 'uint8_t':'unsigned char' xvalue .padding 0x55974c3cded8
| |     `-CXXStaticCastExpr 0x55974c711f60 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |       `-DeclRefExpr 0x55974c711f30 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |-CXXCtorInitializer Field 0x55974c3cdf38 'short_output' 'uint8_t':'unsigned char'
| | `-ImplicitCastExpr 0x55974c712090 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
| |   `-MemberExpr 0x55974c712060 <col:8> 'uint8_t':'unsigned char' xvalue .short_output 0x55974c3cdf38
| |     `-CXXStaticCastExpr 0x55974c712030 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |       `-DeclRefExpr 0x55974c712000 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |-CXXCtorInitializer Field 0x55974c3ce238 'mask' 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)'
| | `-CXXConstructExpr 0x55974c712170 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' 'void (Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5) &&) noexcept'
| |   `-MemberExpr 0x55974c712130 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' xvalue .mask 0x55974c3ce238
| |     `-CXXStaticCastExpr 0x55974c712100 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |       `-DeclRefExpr 0x55974c7120d0 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |-CXXCtorInitializer Field 0x55974c3ce548 'value' 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)'
| | `-CXXConstructExpr 0x55974c712268 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' 'void (Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5) &&) noexcept'
| |   `-MemberExpr 0x55974c712228 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' xvalue .value 0x55974c3ce548
| |     `-CXXStaticCastExpr 0x55974c7121f8 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |       `-DeclRefExpr 0x55974c7121c8 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |-CXXCtorInitializer Field 0x55974c3ce648 'j' 'int32_t [2]'
| | `-ArrayInitLoopExpr 0x55974c7123c8 <col:8> 'int32_t [2]'
| |   |-OpaqueValueExpr 0x55974c712350 <col:8> 'int32_t [2]' xvalue
| |   | `-MemberExpr 0x55974c712320 <col:8> 'int32_t [2]' xvalue .j 0x55974c3ce648
| |   |   `-CXXStaticCastExpr 0x55974c7122f0 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |   |     `-DeclRefExpr 0x55974c7122c0 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |   `-ImplicitCastExpr 0x55974c7123b0 <col:8> 'int32_t':'int' <LValueToRValue>
| |     `-ArraySubscriptExpr 0x55974c712390 <col:8> 'int32_t':'int' xvalue
| |       |-ImplicitCastExpr 0x55974c712378 <col:8> 'int32_t *' <ArrayToPointerDecay>
| |       | `-OpaqueValueExpr 0x55974c712350 <col:8> 'int32_t [2]' xvalue
| |       |   `-MemberExpr 0x55974c712320 <col:8> 'int32_t [2]' xvalue .j 0x55974c3ce648
| |       |     `-CXXStaticCastExpr 0x55974c7122f0 <col:8> 'Classification::Wordwise::Insn' xvalue static_cast<struct Classification::Wordwise::Insn &&> <NoOp>
| |       |       `-DeclRefExpr 0x55974c7122c0 <col:8> 'Classification::Wordwise::Insn' lvalue ParmVar 0x55974c711178 '' 'Classification::Wordwise::Insn &&'
| |       `-ArrayInitIndexExpr 0x55974c712368 <<invalid sloc>> 'unsigned long'
| `-CompoundStmt 0x55974c712440 <col:8>
|-CXXDestructorDecl 0x55974c7c2aa0 <col:8> col:8 implicit referenced ~Insn 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55974c7dcde8 <col:8> col:8 implicit used operator= 'Classification::Wordwise::Insn &(const Classification::Wordwise::Insn &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c7dcef8 <col:8> col:8 used 'const Classification::Wordwise::Insn &'
| `-CompoundStmt 0x55974c7de400 <col:8>
|   |-BinaryOperator 0x55974c7dd8b8 <col:8> 'uint16_t':'unsigned short' lvalue '='
|   | |-MemberExpr 0x55974c7dd870 <col:8> 'uint16_t':'unsigned short' lvalue ->offset 0x55974c3cde78
|   | | `-CXXThisExpr 0x55974c7dd860 <col:8> 'Classification::Wordwise::Insn *' this
|   | `-ImplicitCastExpr 0x55974c7dd8a0 <col:8> 'uint16_t':'unsigned short' <LValueToRValue>
|   |   `-MemberExpr 0x55974c7dd830 <col:8> 'const uint16_t':'const unsigned short' lvalue .offset 0x55974c3cde78
|   |     `-DeclRefExpr 0x55974c7dd810 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c7dcef8 '' 'const Classification::Wordwise::Insn &'
|   |-BinaryOperator 0x55974c7dd980 <col:8> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x55974c7dd938 <col:8> 'uint8_t':'unsigned char' lvalue ->padding 0x55974c3cded8
|   | | `-CXXThisExpr 0x55974c7dd928 <col:8> 'Classification::Wordwise::Insn *' this
|   | `-ImplicitCastExpr 0x55974c7dd968 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x55974c7dd8f8 <col:8> 'const uint8_t':'const unsigned char' lvalue .padding 0x55974c3cded8
|   |     `-DeclRefExpr 0x55974c7dd8d8 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c7dcef8 '' 'const Classification::Wordwise::Insn &'
|   |-BinaryOperator 0x55974c7dda48 <col:8> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x55974c7dda00 <col:8> 'uint8_t':'unsigned char' lvalue ->short_output 0x55974c3cdf38
|   | | `-CXXThisExpr 0x55974c7dd9f0 <col:8> 'Classification::Wordwise::Insn *' this
|   | `-ImplicitCastExpr 0x55974c7dda30 <col:8> 'uint8_t':'unsigned char' <LValueToRValue>
|   |   `-MemberExpr 0x55974c7dd9c0 <col:8> 'const uint8_t':'const unsigned char' lvalue .short_output 0x55974c3cdf38
|   |     `-DeclRefExpr 0x55974c7dd9a0 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c7dcef8 '' 'const Classification::Wordwise::Insn &'
|   |-CXXMemberCallExpr 0x55974c7ddc58 <col:8> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue
|   | |-MemberExpr 0x55974c7ddb90 <col:8> '<bound member function type>' .operator= 0x55974c7dcf98
|   | | `-MemberExpr 0x55974c7ddaa0 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:35:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue ->mask 0x55974c3ce238
|   | |   `-CXXThisExpr 0x55974c7dda90 <col:8> 'Classification::Wordwise::Insn *' this
|   | `-MemberExpr 0x55974c7ddb60 <col:8> 'const union (anonymous union at ../elements/standard/classification.hh:35:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:35:5)' lvalue .mask 0x55974c3ce238
|   |   `-DeclRefExpr 0x55974c7ddb40 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c7dcef8 '' 'const Classification::Wordwise::Insn &'
|   |-CXXMemberCallExpr 0x55974c7dde68 <col:8> 'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue
|   | |-MemberExpr 0x55974c7ddda8 <col:8> '<bound member function type>' .operator= 0x55974c7dd2c8
|   | | `-MemberExpr 0x55974c7ddcb8 <col:8> 'union (anonymous union at ../elements/standard/classification.hh:39:5)':'Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue ->value 0x55974c3ce548
|   | |   `-CXXThisExpr 0x55974c7ddca8 <col:8> 'Classification::Wordwise::Insn *' this
|   | `-MemberExpr 0x55974c7ddd78 <col:8> 'const union (anonymous union at ../elements/standard/classification.hh:39:5)':'const Classification::Wordwise::Insn::(anonymous union at ../elements/standard/classification.hh:39:5)' lvalue .value 0x55974c3ce548
|   |   `-DeclRefExpr 0x55974c7ddd58 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c7dcef8 '' 'const Classification::Wordwise::Insn &'
|   |-CallExpr 0x55974c7de360 <col:8> 'void *'
|   | |-ImplicitCastExpr 0x55974c7de348 <col:8> 'void *(*)(void *, const void *, unsigned long) noexcept' <BuiltinFnToFnPtr>
|   | | `-DeclRefExpr 0x55974c7de2d8 <col:8> '<builtin fn type>' Function 0x55974c7de090 '__builtin_memcpy' 'void *(void *, const void *, unsigned long) noexcept'
|   | |-ImplicitCastExpr 0x55974c7de398 <col:8> 'void *' <BitCast>
|   | | `-UnaryOperator 0x55974c7ddfe8 <col:8> 'int32_t (*)[2]' prefix '&' cannot overflow
|   | |   `-MemberExpr 0x55974c7ddf60 <col:8> 'int32_t [2]' lvalue ->j 0x55974c3ce648
|   | |     `-CXXThisExpr 0x55974c7ddf50 <col:8> 'Classification::Wordwise::Insn *' this
|   | |-ImplicitCastExpr 0x55974c7de3b0 <col:8> 'const void *' <BitCast>
|   | | `-UnaryOperator 0x55974c7ddf38 <col:8> 'int32_t const (*)[2]' prefix '&' cannot overflow
|   | |   `-MemberExpr 0x55974c7ddeb0 <col:8> 'int32_t const[2]' lvalue .j 0x55974c3ce648
|   | |     `-DeclRefExpr 0x55974c7dde90 <col:8> 'const Classification::Wordwise::Insn' lvalue ParmVar 0x55974c7dcef8 '' 'const Classification::Wordwise::Insn &'
|   | `-IntegerLiteral 0x55974c7de2f8 <col:8> 'unsigned long' 8
|   `-ReturnStmt 0x55974c7de3f0 <col:8>
|     `-UnaryOperator 0x55974c7de3d8 <col:8> 'Classification::Wordwise::Insn' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55974c7de3c8 <col:8> 'Classification::Wordwise::Insn *' this
`-CXXMethodDecl 0x55974c7dd5c8 <col:8> col:8 implicit operator= 'Classification::Wordwise::Insn &(Classification::Wordwise::Insn &&)' inline default trivial noexcept-unevaluated 0x55974c7dd5c8
  `-ParmVarDecl 0x55974c7dd6d8 <col:8> col:8 'Classification::Wordwise::Insn &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.Classification::Wordwise::Insn" = type { i16, i8, i8, %union.anon, %union.anon.0, [2 x i32] }
  NonVirtualBaseLLVMType:%"struct.Classification::Wordwise::Insn" = type { i16, i8, i8, %union.anon, %union.anon.0, [2 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class StringAccum
         0 |   struct StringAccum::rep_t r_
         0 |     unsigned char * s
         8 |     int len
        12 |     int cap
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c770de0 <../dummy_inc/click/straccum.hh:112:5, line:122:5> line:112:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55974c770ef8 <col:5, col:12> col:12 implicit referenced struct rep_t
|-FieldDecl 0x55974c770fa0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
|-FieldDecl 0x55974c771008 <line:114:2, col:6> col:6 referenced len 'int'
|-FieldDecl 0x55974c771070 <line:115:2, col:6> col:6 referenced cap 'int'
|-CXXConstructorDecl 0x55974c771120 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| |-CXXCtorInitializer Field 0x55974c770fa0 's' 'unsigned char *'
| | `-CXXReinterpretCastExpr 0x55974c771fa0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| |   `-CXXConstCastExpr 0x55974c771f58 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| |     `-CallExpr 0x55974c771f20 <col:63, col:82> 'const char *'
| |       `-ImplicitCastExpr 0x55974c771f08 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| |         `-DeclRefExpr 0x55974c771eb0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55974c4201a0 'empty_data' 'const char *()'
| |-CXXCtorInitializer Field 0x55974c771008 'len' 'int'
| | `-IntegerLiteral 0x55974c772018 <line:118:12> 'int' 0
| |-CXXCtorInitializer Field 0x55974c771070 'cap' 'int'
| | `-IntegerLiteral 0x55974c772080 <col:20> 'int' 0
| `-CompoundStmt 0x55974c772100 <col:23, line:119:2>
|-CXXConstructorDecl 0x55974c771298 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| |-ParmVarDecl 0x55974c7711d8 <col:17> col:35 'uninitialized_type'
| `-CompoundStmt 0x55974c772110 <col:37, line:121:2>
|-CXXConstructorDecl 0x55974c774328 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c774438 <col:12> col:12 used 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55974c770fa0 's' 'unsigned char *'
| | `-ImplicitCastExpr 0x55974c775df0 <col:12> 'unsigned char *' <LValueToRValue>
| |   `-MemberExpr 0x55974c775dc0 <col:12> 'unsigned char *const' lvalue .s 0x55974c770fa0
| |     `-DeclRefExpr 0x55974c775da0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55974c774438 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55974c771008 'len' 'int'
| | `-ImplicitCastExpr 0x55974c775e80 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55974c775e50 <col:12> 'const int' lvalue .len 0x55974c771008
| |     `-DeclRefExpr 0x55974c775e30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55974c774438 '' 'const StringAccum::rep_t &'
| |-CXXCtorInitializer Field 0x55974c771070 'cap' 'int'
| | `-ImplicitCastExpr 0x55974c775f10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55974c775ee0 <col:12> 'const int' lvalue .cap 0x55974c771070
| |     `-DeclRefExpr 0x55974c775ec0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55974c774438 '' 'const StringAccum::rep_t &'
| `-CompoundStmt 0x55974c775f68 <col:12>
|-CXXConstructorDecl 0x55974c7744d8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55974c7744d8
| `-ParmVarDecl 0x55974c7745e8 <col:12> col:12 'StringAccum::rep_t &&'
`-CXXDestructorDecl 0x55974c776220 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  NonVirtualBaseLLVMType:%"struct.StringAccum::rep_t" = type { i8*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c671838 prev 0x55974c4ea940 <../dummy_inc/click/straccum.hh:28:1, line:137:1> line:28:7 referenced class StringAccum definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55974c671930 <col:1, col:7> col:7 implicit referenced class StringAccum
|-AccessSpecDecl 0x55974c6719c0 <col:21, col:27> col:21 public
|-TypedefDecl 0x55974c671a00 <line:30:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55974c1bbe00 'const char *'
|   `-QualType 0x55974c1bb351 'const char' const
|     `-BuiltinType 0x55974c1bb350 'char'
|-TypedefDecl 0x55974c671a70 <line:31:5, col:19> col:19 referenced iterator 'char *'
| `-PointerType 0x55974c1bbfd0 'char *'
|   `-BuiltinType 0x55974c1bb350 'char'
|-TypedefDecl 0x55974c671bb0 <line:33:5, col:57> col:32 referenced unspecified_bool_type 'int (StringAccum::*)() const'
| `-MemberPointerType 0x55974c671b20 'int (StringAccum::*)() const'
|   |-RecordType 0x55974c3f5e80 'StringAccum'
|   | `-CXXRecord 0x55974c671838 'StringAccum'
|   `-ParenType 0x55974c3f61c0 'int () const' sugar
|     `-FunctionProtoType 0x55974c3f6190 'int () const' const cdecl
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-CXXConstructorDecl 0x55974c671c70 <line:35:5, col:24> col:12 used StringAccum 'void ()' inline
|-CXXConstructorDecl 0x55974c671dc0 <line:36:5, col:45> col:21 StringAccum 'void (int)' inline
| `-ParmVarDecl 0x55974c671d30 <col:33, col:37> col:37 capacity 'int'
|-CXXConstructorDecl 0x55974c671f10 <line:37:5, col:41> col:12 StringAccum 'void (const String &)' inline
| `-ParmVarDecl 0x55974c671e80 <col:24, col:38> col:38 str 'const String &'
|-CXXConstructorDecl 0x55974c6720b8 <line:38:5, col:44> col:12 StringAccum 'void (const StringAccum &)' inline
| `-ParmVarDecl 0x55974c671ff8 <col:24, col:43> col:43 x 'const StringAccum &'
|-CXXConstructorDecl 0x55974c672268 <line:40:5, col:39> col:12 StringAccum 'void (StringAccum &&)' inline
| `-ParmVarDecl 0x55974c6721a8 <col:24, col:38> col:38 x 'StringAccum &&'
|-CXXDestructorDecl 0x55974c672360 <line:42:5, col:25> col:12 used ~StringAccum 'void () noexcept' inline
|-CXXMethodDecl 0x55974c672518 <line:44:5, col:55> col:25 operator= 'StringAccum &(const StringAccum &)' inline
| `-ParmVarDecl 0x55974c672450 <col:35, col:54> col:54 x 'const StringAccum &'
|-CXXMethodDecl 0x55974c672698 <line:46:5, col:50> col:25 operator= 'StringAccum &(StringAccum &&)' inline
| `-ParmVarDecl 0x55974c6725d0 <col:35, col:49> col:49 x 'StringAccum &&'
|-CXXMethodDecl 0x55974c672790 <line:49:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55974c672858 <line:50:5, col:23> col:18 data 'char *()' inline
|-CXXMethodDecl 0x55974c672920 <line:51:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55974c6729e8 <line:52:5, col:27> col:16 used capacity 'int () const' inline
|-CXXMethodDecl 0x55974c672ab0 <line:54:5, col:23> col:17 c_str 'const char *()'
|-CXXConversionDecl 0x55974c672c18 <line:56:5, col:45> col:12 operator int (StringAccum::*)() const 'StringAccum::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55974c672ce8 <line:57:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55974c672da8 <line:58:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55974c672eb8 <line:60:5, col:35> col:27 used begin 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55974c672fc8 <line:61:5, col:27> col:21 begin 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55974c673088 <line:62:5, col:33> col:27 used end 'StringAccum::const_iterator () const' inline
|-CXXMethodDecl 0x55974c673148 <line:63:5, col:25> col:21 end 'StringAccum::iterator ()' inline
|-CXXMethodDecl 0x55974c673290 <line:65:5, col:35> col:17 operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55974c673200 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55974c673420 <line:66:5, col:34> col:18 operator[] 'char &(int)' inline
| `-ParmVarDecl 0x55974c673350 <col:29, col:33> col:33 i 'int'
|-CXXMethodDecl 0x55974c6734e8 <line:67:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55974c6735e0 <line:68:5, col:24> col:18 front 'char &()' inline
|-CXXMethodDecl 0x55974c6736a0 <line:69:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55974c673768 <line:70:5, col:23> col:18 back 'char &()' inline
|-CXXMethodDecl 0x55974c673828 <line:72:5, col:33> col:17 used out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55974c6738e8 <line:73:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55974c6739a8 <line:75:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x55974c673af8 <line:76:5, col:31> col:18 reserve 'char *(int)' inline
| `-ParmVarDecl 0x55974c673a60 <col:26, col:30> col:30 n 'int'
|-CXXMethodDecl 0x55974c673c48 <line:77:5, col:35> col:17 set_length 'void (int)' inline
| `-ParmVarDecl 0x55974c673bb8 <col:28, col:32> col:32 len 'int'
|-CXXMethodDecl 0x55974c673da0 <line:78:5, col:23> col:9 resize 'int (int)'
| `-ParmVarDecl 0x55974c673d08 <col:16, col:20> col:20 len 'int'
|-CXXMethodDecl 0x55974c673ef0 <line:79:5, col:40> col:17 used adjust_length 'void (int)' inline
| `-ParmVarDecl 0x55974c673e60 <col:31, col:35> col:35 delta 'int'
|-CXXMethodDecl 0x55974c674110 <line:80:5, col:54> col:18 extend 'char *(int, int)' inline
| |-ParmVarDecl 0x55974c673fb0 <col:25, col:29> col:29 nadjust 'int'
| `-ParmVarDecl 0x55974c674030 <col:38, col:53> col:42 nreserve 'int' cinit
|   `-IntegerLiteral 0x55974c771dd8 <col:53> 'int' 0
|-CXXMethodDecl 0x55974c674268 <line:82:5, col:35> col:17 pop_back 'void (int)' inline
| `-ParmVarDecl 0x55974c6741d8 <col:26, col:34> col:30 n 'int' cinit
|   `-IntegerLiteral 0x55974c771df8 <col:34> 'int' 1
|-CXXMethodDecl 0x55974c6743b0 <line:84:5, col:30> col:17 used append 'void (char)' inline
| `-ParmVarDecl 0x55974c674320 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55974c674500 <line:85:5, col:39> col:17 used append 'void (unsigned char)' inline
| `-ParmVarDecl 0x55974c674470 <col:24, col:38> col:38 c 'unsigned char'
|-CXXMethodDecl 0x55974c674650 <line:86:5, col:35> col:17 append_utf8 'bool (int)' inline
| `-ParmVarDecl 0x55974c6745c0 <col:29, col:33> col:33 ch 'int'
|-CXXMethodDecl 0x55974c6747a0 <line:87:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55974c674710 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55974c76f6d0 <line:88:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55974c674860 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55974c6748e0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55974c76f8b0 <line:89:5, col:55> col:17 used append 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55974c76f798 <col:24, col:45> col:45 s 'const unsigned char *'
| `-ParmVarDecl 0x55974c76f818 <col:48, col:52> col:52 len 'int'
|-CXXMethodDecl 0x55974c76fa90 <line:90:5, col:59> col:17 used append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55974c76f978 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55974c76f9f8 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55974c76fc70 <line:91:5, col:77> col:17 append 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55974c76fb58 <col:24, col:45> col:45 first 'const unsigned char *'
| `-ParmVarDecl 0x55974c76fbd8 <col:52, col:73> col:73 last 'const unsigned char *'
|-CXXMethodDecl 0x55974c76fe50 <line:92:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55974c76fd38 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55974c76fdb8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55974c7701a8 <line:93:5, col:81> col:10 used append_numeric 'void (String::intmax_t, int, bool)'
| |-ParmVarDecl 0x55974c76ff90 <col:25, col:42> col:42 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55974c770010 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55974c771e18 <col:56> 'int' 10
| `-ParmVarDecl 0x55974c770088 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c771e38 <col:77> 'bool' true
|-CXXMethodDecl 0x55974c770508 <line:94:5, col:82> col:10 used append_numeric 'void (String::uintmax_t, int, bool)'
| |-ParmVarDecl 0x55974c7702f0 <col:25, col:43> col:43 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55974c770370 <col:46, col:57> col:50 base 'int' cinit
| | `-IntegerLiteral 0x55974c771e48 <col:57> 'int' 10
| `-ParmVarDecl 0x55974c7703e8 <col:61, col:78> col:66 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c771e68 <col:78> 'bool' true
|-CXXMethodDecl 0x55974c770730 <line:96:5, col:57> col:18 snprintf 'StringAccum &(int, const char *, ...)'
| |-ParmVarDecl 0x55974c7705d8 <col:27, col:31> col:31 n 'int'
| `-ParmVarDecl 0x55974c770658 <col:34, col:46> col:46 format 'const char *'
|-CXXMethodDecl 0x55974c770828 <line:98:5, col:24> col:12 used take_string 'String ()'
|-CXXMethodDecl 0x55974c770998 <line:100:5, col:29> col:10 used swap 'void (StringAccum &)'
| `-ParmVarDecl 0x55974c7708d8 <col:15, col:28> col:28 x 'StringAccum &'
|-CXXMethodDecl 0x55974c770ae8 <line:104:5, col:62> col:17 forward 'void (int)' inline
| |-ParmVarDecl 0x55974c770a58 <col:25, col:29> col:29 delta 'int'
| `-DeprecatedAttr 0x55974c770b90 <col:51> "" ""
|-AccessSpecDecl 0x55974c770c00 <line:106:3, col:10> col:3 private
|-EnumDecl 0x55974c770c28 <line:108:5, line:110:5> line:108:5
| `-EnumConstantDecl 0x55974c770d78 <line:109:2, col:23> col:2 referenced MEMO_SPACE 'StringAccum::(anonymous enum at ../dummy_inc/click/straccum.hh:108:5)'
|   `-ImplicitCastExpr 0x55974c770dc8 <col:15, col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c770d58 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' Int: 12
|       `-DeclRefExpr 0x55974c770d28 <col:15, col:23> 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)' EnumConstant 0x55974c401ee8 'MEMO_SPACE' 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|-CXXRecordDecl 0x55974c770de0 <line:112:5, line:122:5> line:112:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55974c770ef8 <col:5, col:12> col:12 implicit referenced struct rep_t
| |-FieldDecl 0x55974c770fa0 <line:113:2, col:17> col:17 referenced s 'unsigned char *'
| |-FieldDecl 0x55974c771008 <line:114:2, col:6> col:6 referenced len 'int'
| |-FieldDecl 0x55974c771070 <line:115:2, col:6> col:6 referenced cap 'int'
| |-CXXConstructorDecl 0x55974c771120 <line:116:2, line:119:2> line:116:2 used rep_t 'void ()'
| | |-CXXCtorInitializer Field 0x55974c770fa0 's' 'unsigned char *'
| | | `-CXXReinterpretCastExpr 0x55974c771fa0 <line:117:10, col:84> 'unsigned char *' reinterpret_cast<unsigned char *> <BitCast>
| | |   `-CXXConstCastExpr 0x55974c771f58 <col:44, col:83> 'char *' const_cast<char *> <NoOp>
| | |     `-CallExpr 0x55974c771f20 <col:63, col:82> 'const char *'
| | |       `-ImplicitCastExpr 0x55974c771f08 <col:63, col:71> 'const char *(*)()' <FunctionToPointerDecay>
| | |         `-DeclRefExpr 0x55974c771eb0 <col:63, col:71> 'const char *()' lvalue CXXMethod 0x55974c4201a0 'empty_data' 'const char *()'
| | |-CXXCtorInitializer Field 0x55974c771008 'len' 'int'
| | | `-IntegerLiteral 0x55974c772018 <line:118:12> 'int' 0
| | |-CXXCtorInitializer Field 0x55974c771070 'cap' 'int'
| | | `-IntegerLiteral 0x55974c772080 <col:20> 'int' 0
| | `-CompoundStmt 0x55974c772100 <col:23, line:119:2>
| |-CXXConstructorDecl 0x55974c771298 <line:120:2, line:121:2> line:120:11 rep_t 'void (uninitialized_type)'
| | |-ParmVarDecl 0x55974c7711d8 <col:17> col:35 'uninitialized_type'
| | `-CompoundStmt 0x55974c772110 <col:37, line:121:2>
| |-CXXConstructorDecl 0x55974c774328 <line:112:12> col:12 implicit used constexpr rep_t 'void (const StringAccum::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c774438 <col:12> col:12 used 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55974c770fa0 's' 'unsigned char *'
| | | `-ImplicitCastExpr 0x55974c775df0 <col:12> 'unsigned char *' <LValueToRValue>
| | |   `-MemberExpr 0x55974c775dc0 <col:12> 'unsigned char *const' lvalue .s 0x55974c770fa0
| | |     `-DeclRefExpr 0x55974c775da0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55974c774438 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55974c771008 'len' 'int'
| | | `-ImplicitCastExpr 0x55974c775e80 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55974c775e50 <col:12> 'const int' lvalue .len 0x55974c771008
| | |     `-DeclRefExpr 0x55974c775e30 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55974c774438 '' 'const StringAccum::rep_t &'
| | |-CXXCtorInitializer Field 0x55974c771070 'cap' 'int'
| | | `-ImplicitCastExpr 0x55974c775f10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55974c775ee0 <col:12> 'const int' lvalue .cap 0x55974c771070
| | |     `-DeclRefExpr 0x55974c775ec0 <col:12> 'const StringAccum::rep_t' lvalue ParmVar 0x55974c774438 '' 'const StringAccum::rep_t &'
| | `-CompoundStmt 0x55974c775f68 <col:12>
| |-CXXConstructorDecl 0x55974c7744d8 <col:12> col:12 implicit constexpr rep_t 'void (StringAccum::rep_t &&)' inline default trivial noexcept-unevaluated 0x55974c7744d8
| | `-ParmVarDecl 0x55974c7745e8 <col:12> col:12 'StringAccum::rep_t &&'
| `-CXXDestructorDecl 0x55974c776220 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-FieldDecl 0x55974c771370 <line:124:5, col:11> col:11 referenced r_ 'StringAccum::rep_t'
|-CXXMethodDecl 0x55974c771470 <line:126:5, col:19> col:11 used grow 'char *(int)'
| `-ParmVarDecl 0x55974c7713d8 <col:16> col:19 'int'
|-CXXMethodDecl 0x55974c771650 <line:127:5, col:48> col:11 used hard_extend 'char *(int, int)'
| |-ParmVarDecl 0x55974c771530 <col:23, col:27> col:27 nadjust 'int'
| `-ParmVarDecl 0x55974c7715b0 <col:36, col:40> col:40 nreserve 'int'
|-CXXMethodDecl 0x55974c771830 <line:128:5, col:44> col:10 used hard_append 'void (const char *, int)'
| |-ParmVarDecl 0x55974c771718 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55974c771798 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55974c771988 <line:129:5, col:43> col:10 used hard_append_cstr 'void (const char *)'
| `-ParmVarDecl 0x55974c7718f8 <col:27, col:39> col:39 cstr 'const char *'
|-CXXMethodDecl 0x55974c771ad8 <line:130:5, col:33> col:10 used append_utf8_hard 'bool (int)'
| `-ParmVarDecl 0x55974c771a48 <col:27, col:31> col:31 ch 'int'
`-FriendDecl 0x55974c771d98 <line:132:5, col:70> col:25
  `-FunctionDecl 0x55974c771cd8 parent 0x55974c1bb2b8 <col:5, col:70> col:25 operator<< 'StringAccum &(StringAccum &, const String &)'
    |-ParmVarDecl 0x55974c771b90 <col:36, col:49> col:49 sa 'StringAccum &'
    `-ParmVarDecl 0x55974c771c08 <col:53, col:67> col:67 str 'const String &'

Layout: <CGRecordLayout
  LLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  NonVirtualBaseLLVMType:%class.StringAccum = type { %"struct.StringAccum::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c3ff790 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55974c401a30 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55974c401ad0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55974c401b30 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55974c401b90 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55974c401c40 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c401f50 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55974c402068 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55974c402110 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55974c402178 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55974c402208 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55974c406440 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55974c406878 <col:12>
|-CXXConstructorDecl 0x55974c406548 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c406658 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55974c402110 'data' 'const char *'
| | `-ImplicitCastExpr 0x55974c409530 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55974c409500 <col:12> 'const char *const' lvalue .data 0x55974c402110
| |     `-DeclRefExpr 0x55974c4094e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c406658 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55974c402178 'length' 'int'
| | `-ImplicitCastExpr 0x55974c4095c0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55974c409590 <col:12> 'const int' lvalue .length 0x55974c402178
| |     `-DeclRefExpr 0x55974c409570 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c406658 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55974c402208 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55974c409650 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55974c409620 <col:12> 'String::memo_t *const' lvalue .memo 0x55974c402208
| |     `-DeclRefExpr 0x55974c409600 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c406658 '' 'const String::rep_t &'
| `-CompoundStmt 0x55974c4096a8 <col:12>
|-CXXConstructorDecl 0x55974c4066f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55974c4066f8
| `-ParmVarDecl 0x55974c406808 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55974c40ec80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55974c41a5e8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c41a6f8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55974c41ac10 <col:12>
|   |-BinaryOperator 0x55974c41aa28 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55974c41a9e0 <col:12> 'const char *' lvalue ->data 0x55974c402110
|   | | `-CXXThisExpr 0x55974c41a9d0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55974c41aa10 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55974c41a9a0 <col:12> 'const char *const' lvalue .data 0x55974c402110
|   |     `-DeclRefExpr 0x55974c41a980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c41a6f8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55974c41aaf0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55974c41aaa8 <col:12> 'int' lvalue ->length 0x55974c402178
|   | | `-CXXThisExpr 0x55974c41aa98 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55974c41aad8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55974c41aa68 <col:12> 'const int' lvalue .length 0x55974c402178
|   |     `-DeclRefExpr 0x55974c41aa48 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c41a6f8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55974c41abb8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55974c41ab70 <col:12> 'String::memo_t *' lvalue ->memo 0x55974c402208
|   | | `-CXXThisExpr 0x55974c41ab60 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55974c41aba0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55974c41ab30 <col:12> 'String::memo_t *const' lvalue .memo 0x55974c402208
|   |     `-DeclRefExpr 0x55974c41ab10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c41a6f8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55974c41ac00 <col:12>
|     `-UnaryOperator 0x55974c41abe8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55974c41abd8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55974c41a768 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55974c41a768
  `-ParmVarDecl 0x55974c41a878 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c3f5ea0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55974c3f5fb8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55974c3f6048 <col:16, col:22> col:16 public
|-TypedefDecl 0x55974c3f6088 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55974c1bbe00 'const char *'
|   `-QualType 0x55974c1bb351 'const char' const
|     `-BuiltinType 0x55974c1bb350 'char'
|-TypedefDecl 0x55974c3f6110 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55974c3f60e0 'String::const_iterator' sugar
|   |-Typedef 0x55974c3f6088 'const_iterator'
|   `-PointerType 0x55974c1bbe00 'const char *'
|     `-QualType 0x55974c1bb351 'const char' const
|       `-BuiltinType 0x55974c1bb350 'char'
|-TypedefDecl 0x55974c3f62b0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55974c3f6220 'int (String::*)() const'
|   |-RecordType 0x55974c3f5f30 'String'
|   | `-CXXRecord 0x55974c3f5ea0 'String'
|   `-ParenType 0x55974c3f61c0 'int () const' sugar
|     `-FunctionProtoType 0x55974c3f6190 'int () const' const cdecl
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c3f6318 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55974c310c20 'int64_t' sugar
|   |-Typedef 0x55974c2242a0 'int64_t'
|   `-TypedefType 0x55974c1fd510 '__int64_t' sugar
|     |-Typedef 0x55974c1fd0e8 '__int64_t'
|     `-BuiltinType 0x55974c1bb3d0 'long'
|-TypedefDecl 0x55974c3f6380 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55974c310b40 'uint64_t' sugar
|   |-Typedef 0x55974c224440 'uint64_t'
|   `-TypedefType 0x55974c1fd5a0 '__uint64_t' sugar
|     |-Typedef 0x55974c1fd158 '__uint64_t'
|     `-BuiltinType 0x55974c1bb470 'unsigned long'
|-TypedefDecl 0x55974c3f6410 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55974c3f63e0 'String::intmax_t' sugar
|   |-Typedef 0x55974c3f6318 'intmax_t'
|   `-TypedefType 0x55974c310c20 'int64_t' sugar
|     |-Typedef 0x55974c2242a0 'int64_t'
|     `-TypedefType 0x55974c1fd510 '__int64_t' sugar
|       |-Typedef 0x55974c1fd0e8 '__int64_t'
|       `-BuiltinType 0x55974c1bb3d0 'long'
|-TypedefDecl 0x55974c3f64a0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55974c3f6470 'String::uintmax_t' sugar
|   |-Typedef 0x55974c3f6380 'uintmax_t'
|   `-TypedefType 0x55974c310b40 'uint64_t' sugar
|     |-Typedef 0x55974c224440 'uint64_t'
|     `-TypedefType 0x55974c1fd5a0 '__uint64_t' sugar
|       |-Typedef 0x55974c1fd158 '__uint64_t'
|       `-BuiltinType 0x55974c1bb470 'unsigned long'
|-CXXConstructorDecl 0x55974c3f6560 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55974c3f6708 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55974c3f6648 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55974c3f68b8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55974c3f67f8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55974c3f6a10 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55974c3f6980 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55974c3f6c90 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55974c3f6ad8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55974c3f6b58 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55974c3f6ee8 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55974c3f6d90 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55974c3f6e10 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55974c3f7108 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55974c3f6fb8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55974c3f7038 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55974c3f7328 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55974c3f71d8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55974c3f7258 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55974c3f74b8 <line:49:5, col:34> col:21 String 'void (bool)' inline
| `-ParmVarDecl 0x55974c3f73f0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55974c3f7638 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55974c3f7578 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55974c3f77c8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55974c3f7700 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55974c3f7920 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55974c3f7890 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55974c3f7aa8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55974c3f79e8 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55974c3f7c38 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55974c3f7b70 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55974c3f7dc8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55974c3f7d00 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55974c3f7f58 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55974c3f7e90 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55974c3f80e8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55974c3f8020 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55974c3f8278 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55974c3f81b0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55974c3f8370 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55974c3f8498 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55974c3f8618 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55974c3f8550 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55974c3f8768 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55974c3f86d8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55974c3f8810 <col:63> "" ""
|-CXXMethodDecl 0x55974c3f8958 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55974c3f8898 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55974c3f8b68 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55974c3f8a18 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55974c3f8a98 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55974c3f9208 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55974c3f90b0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55974c3f9130 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55974c3f94e8 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55974c3f92c8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55974c3f9348 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55974c405f10 <col:55> 'int' 10
| `-ParmVarDecl 0x55974c3f93c0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c405f30 <col:76> 'bool' true
|-CXXMethodDecl 0x55974c3f97c8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55974c3f95b0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55974c3f9630 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55974c405f40 <col:56> 'int' 10
| `-ParmVarDecl 0x55974c3f96a8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c405f60 <col:77> 'bool' true
|-CXXMethodDecl 0x55974c3f98d0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55974c3f9998 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55974c3f9a60 <line:81:5, col:60> col:52 used c_str 'const char *() const'
| |-NoInlineAttr 0x55974c3f9b00 <col:20>
| `-OptimizeNoneAttr 0x55974c3f9b58 <col:30>
|-CXXConversionDecl 0x55974c3f9c48 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55974c3f9d18 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55974c3f9dd8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55974c3f9ec8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55974c3f9f88 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55974c3fa108 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55974c3fa040 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55974c3fa258 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55974c3fa1c8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55974c3fa348 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55974c3fa408 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55974c3fa658 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55974c3fa4c0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55974c3fa540 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55974c3fa8b8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55974c3fa720 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55974c3fa7a0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55974c3fa988 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c3fab98 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55974c3faa40 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55974c3faac0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55974c3fadb8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55974c3fac60 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55974c3face0 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55974c3faf48 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55974c3fae80 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55974c3fb590 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55974c3fb708 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55974c3fb640 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55974c3fb918 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55974c3fb7c8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55974c3fb848 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55974c3fbb30 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55974c3fb9d8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55974c3fba50 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55974c3fbcc0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55974c3fbbf0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55974c3fbee0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55974c3fbd80 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55974c3fbe00 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55974c3fc030 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55974c3fbfa0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55974c3fc208 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55974c3fc0f0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55974c3fc170 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55974c3fc358 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55974c3fc2c8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55974c3fc570 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55974c3fc410 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55974c3fc490 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55974c405f70 <col:39> 'int' 0
|-CXXMethodDecl 0x55974c3fc790 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55974c3fc630 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55974c3fc6b0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55974c405f90 <col:48> 'int' 0
|-CXXMethodDecl 0x55974c3fc970 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55974c3fc850 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55974c3fc8d0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55974c405fb0 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55974c3fca40 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55974c3fcb00 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55974c3fcbc0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55974c3fcc80 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55974c3fcd40 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55974c3fcee8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55974c3fcdf0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55974c3fd068 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55974c3fcfa0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55974c3fd1e8 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55974c3fd128 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55974c3fd368 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55974c3fd2a0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55974c3fd4b0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55974c3fd420 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55974c3fd9a0 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55974c3fd910 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55974c3fdb78 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55974c3fda60 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55974c3fdae0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55974c3fdd58 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55974c3fdc40 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55974c3fdcc0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55974c3fdea8 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55974c3fde18 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55974c3fe0b8 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55974c3fdf68 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55974c3fdfe8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55974c3fe218 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55974c3fe180 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55974c3fe370 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55974c3fe2d8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55974c3fe418 <col:57> "" ""
|-CXXMethodDecl 0x55974c3fe528 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55974c3fe498 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55974c3fe678 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55974c3fe5e8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55974c3fe7f8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55974c3fe730 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55974c3fe8c0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55974c3fe980 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55974c3fea40 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55974c3feae0 <col:49> "" ""
|-CXXMethodDecl 0x55974c3feb70 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55974c3fec30 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55974c3fed20 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55974c3fede8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55974c3feea8 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55974c3fef68 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55974c3ff060 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55974c3ff128 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55974c3ff1f0 <line:174:5, col:42> col:31 used empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55974c3ff3c8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55974c3ff2a8 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55974c3ff328 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55974c3ff5f0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55974c3ff490 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55974c3ff510 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55974c3ff700 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55974c3ff768 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55974c3ff790 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55974c401a30 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55974c401ad0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55974c401b30 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55974c401b90 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55974c401c40 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55974c401ca8 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55974c401ee8 <line:201:2, col:32> col:2 referenced MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55974c401f38 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c401ec8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55974c401dd8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55974c401d80 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55974c401dc0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55974c401da0 <col:32> 'int' 8
|-CXXRecordDecl 0x55974c401f50 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55974c402068 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55974c402110 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55974c402178 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55974c402208 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55974c406440 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55974c406878 <col:12>
| |-CXXConstructorDecl 0x55974c406548 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c406658 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55974c402110 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55974c409530 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55974c409500 <col:12> 'const char *const' lvalue .data 0x55974c402110
| | |     `-DeclRefExpr 0x55974c4094e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c406658 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55974c402178 'length' 'int'
| | | `-ImplicitCastExpr 0x55974c4095c0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55974c409590 <col:12> 'const int' lvalue .length 0x55974c402178
| | |     `-DeclRefExpr 0x55974c409570 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c406658 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55974c402208 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55974c409650 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55974c409620 <col:12> 'String::memo_t *const' lvalue .memo 0x55974c402208
| | |     `-DeclRefExpr 0x55974c409600 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c406658 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55974c4096a8 <col:12>
| |-CXXConstructorDecl 0x55974c4066f8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55974c4066f8
| | `-ParmVarDecl 0x55974c406808 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55974c40ec80 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55974c41a5e8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c41a6f8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55974c41ac10 <col:12>
| |   |-BinaryOperator 0x55974c41aa28 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55974c41a9e0 <col:12> 'const char *' lvalue ->data 0x55974c402110
| |   | | `-CXXThisExpr 0x55974c41a9d0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55974c41aa10 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55974c41a9a0 <col:12> 'const char *const' lvalue .data 0x55974c402110
| |   |     `-DeclRefExpr 0x55974c41a980 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c41a6f8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55974c41aaf0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55974c41aaa8 <col:12> 'int' lvalue ->length 0x55974c402178
| |   | | `-CXXThisExpr 0x55974c41aa98 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55974c41aad8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55974c41aa68 <col:12> 'const int' lvalue .length 0x55974c402178
| |   |     `-DeclRefExpr 0x55974c41aa48 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c41a6f8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55974c41abb8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55974c41ab70 <col:12> 'String::memo_t *' lvalue ->memo 0x55974c402208
| |   | | `-CXXThisExpr 0x55974c41ab60 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55974c41aba0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55974c41ab30 <col:12> 'String::memo_t *const' lvalue .memo 0x55974c402208
| |   |     `-DeclRefExpr 0x55974c41ab10 <col:12> 'const String::rep_t' lvalue ParmVar 0x55974c41a6f8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55974c41ac00 <col:12>
| |     `-UnaryOperator 0x55974c41abe8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55974c41abd8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55974c41a768 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55974c41a768
|   `-ParmVarDecl 0x55974c41a878 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55974c402280 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55974c4024c8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55974c4022e8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55974c402368 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55974c4023e0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55974c406400 <col:79, line:261:5>
|   |-BinaryOperator 0x55974c406078 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55974c406010 <col:2, col:5> 'const char *' lvalue .data 0x55974c402110
|   | | `-MemberExpr 0x55974c405fe0 <col:2> 'String::rep_t' lvalue ->_r 0x55974c402280
|   | |   `-CXXThisExpr 0x55974c405fd0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55974c406060 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55974c406040 <col:12> 'const char *' lvalue ParmVar 0x55974c4022e8 'data' 'const char *'
|   |-BinaryOperator 0x55974c406140 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55974c4060d8 <col:2, col:5> 'int' lvalue .length 0x55974c402178
|   | | `-MemberExpr 0x55974c4060a8 <col:2> 'String::rep_t' lvalue ->_r 0x55974c402280
|   | |   `-CXXThisExpr 0x55974c406098 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55974c406128 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55974c406108 <col:14> 'int' lvalue ParmVar 0x55974c402368 'length' 'int'
|   `-IfStmt 0x55974c4063e8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55974c406260 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55974c406248 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55974c406228 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55974c406208 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55974c4061a0 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55974c402208
|     |       | `-MemberExpr 0x55974c406170 <col:7> 'String::rep_t' lvalue ->_r 0x55974c402280
|     |       |   `-CXXThisExpr 0x55974c406160 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55974c4061f0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55974c4061d0 <col:17> 'String::memo_t *' lvalue ParmVar 0x55974c4023e0 'memo' 'String::memo_t *'
|     `-CallExpr 0x55974c4063c0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55974c4063a8 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55974c4062b0 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55974c3dcaf8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55974c406318 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55974c401ad0
|         `-ImplicitCastExpr 0x55974c406300 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55974c4062e0 <col:27> 'String::memo_t *' lvalue ParmVar 0x55974c4023e0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55974c402778 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55974c402598 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55974c402618 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55974c402690 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55974c402280 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55974c406888 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55974c406a18 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55974c406980 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55974c4068f0 <col:2> '<bound member function type>' ->assign_memo 0x55974c4024c8
|     | `-ImplicitCastExpr 0x55974c4069b8 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55974c4068e0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55974c4069d0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55974c406920 <col:14> 'const char *' lvalue ParmVar 0x55974c402598 'data' 'const char *'
|     |-ImplicitCastExpr 0x55974c4069e8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55974c406940 <col:20> 'int' lvalue ParmVar 0x55974c402618 'length' 'int'
|     `-ImplicitCastExpr 0x55974c406a00 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55974c406960 <col:28> 'String::memo_t *' lvalue ParmVar 0x55974c402690 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55974c402908 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55974c402848 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55974c406c70 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55974c406bf0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55974c406a40 <col:2> '<bound member function type>' ->assign_memo 0x55974c4024c8
|     | `-CXXThisExpr 0x55974c406a30 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55974c406c28 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55974c406ac0 <col:14, col:19> 'const char *' lvalue .data 0x55974c402110
|     |   `-MemberExpr 0x55974c406a90 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55974c402280
|     |     `-DeclRefExpr 0x55974c406a70 <col:14> 'const String' lvalue ParmVar 0x55974c402848 'x' 'const String &'
|     |-ImplicitCastExpr 0x55974c406c40 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55974c406b40 <col:25, col:30> 'int' lvalue .length 0x55974c402178
|     |   `-MemberExpr 0x55974c406b10 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55974c402280
|     |     `-DeclRefExpr 0x55974c406af0 <col:25> 'const String' lvalue ParmVar 0x55974c402848 'x' 'const String &'
|     `-ImplicitCastExpr 0x55974c406c58 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55974c406bc0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55974c402208
|         `-MemberExpr 0x55974c406b90 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55974c402280
|           `-DeclRefExpr 0x55974c406b70 <col:38> 'const String' lvalue ParmVar 0x55974c402848 'x' 'const String &'
|-CXXMethodDecl 0x55974c4029d0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55974c407d38 <col:31, line:278:5>
|   `-IfStmt 0x55974c407d20 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55974c406d10 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55974c406cf8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55974c406cc8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55974c402208
|     |     `-MemberExpr 0x55974c406c98 <col:6> 'String::rep_t' lvalue ->_r 0x55974c402280
|     |       `-CXXThisExpr 0x55974c406c88 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55974c407cf8 <col:15, line:277:2>
|       |-ParenExpr 0x55974c4072b0 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55974c407280 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55974c406e20 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55974c406e08 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55974c406df0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55974c406db0 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55974c401ad0
|       |   |       `-ImplicitCastExpr 0x55974c406d98 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55974c406d68 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55974c402208
|       |   |           `-MemberExpr 0x55974c406d38 <col:27> 'String::rep_t' lvalue ->_r 0x55974c402280
|       |   |             `-CXXThisExpr 0x55974c406d28 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55974c406e80 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55974c406e60 <col:54> 'int' 0
|       |   `-CallExpr 0x55974c4071e0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55974c4071c8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55974c407150 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55974c407220 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55974c406f68 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55974c407238 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55974c407018 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55974c407250 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55974c407050 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55974c407268 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55974c407138 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55974c407120 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55974c4070e8 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55974c407c18 <line:274:6, line:275:22>
|       | |-CallExpr 0x55974c4074c0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55974c4074a8 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55974c407420 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55974c3e1e90 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55974c4073f0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55974c401ad0
|       | |   `-ImplicitCastExpr 0x55974c4073d8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55974c4073a8 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55974c402208
|       | |       `-MemberExpr 0x55974c407378 <col:40> 'String::rep_t' lvalue ->_r 0x55974c402280
|       | |         `-CXXThisExpr 0x55974c407368 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55974c4075c0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55974c4075a8 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55974c4074e8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55974c4036a8 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55974c407c00 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55974c407548 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55974c402208
|       |       `-MemberExpr 0x55974c407518 <col:15> 'String::rep_t' lvalue ->_r 0x55974c402280
|       |         `-CXXThisExpr 0x55974c407508 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55974c407cd8 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55974c407c70 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55974c402208
|         | `-MemberExpr 0x55974c407c40 <col:6> 'String::rep_t' lvalue ->_r 0x55974c402280
|         |   `-CXXThisExpr 0x55974c407c30 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55974c407cc0 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55974c407ca0 <col:16> 'int' 0
|-CXXMethodDecl 0x55974c402c68 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55974c402a88 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55974c402b08 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55974c402b80 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55974c402d40 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55974c402f90 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55974c402df8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55974c402e78 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55974c402ef0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55974c403178 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55974c403060 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55974c4030e0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55974c403278 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55974c407e30 <col:41, line:286:5>
|   `-ReturnStmt 0x55974c407e20 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55974c407df0 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55974c407db8 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55974c407da0 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55974c407d80 <col:46> 'int' 1
|-CXXMethodDecl 0x55974c403518 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55974c403330 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55974c4033b0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55974c403430 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55974c4036a8 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55974c4035e0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55974c403778 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55974c403948 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55974c403830 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55974c4038b0 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55974c4055f0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55974c405738 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55974c405878 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55974c4058f0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55974c405968 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55974c4059d0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55974c405ad0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55974c405b20 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c405ab0 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55974c405a90 <col:22> 'int' 14
|-CXXMethodDecl 0x55974c405d38 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55974c405b50 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55974c405bd0 <col:38> col:41 'int'
| `-ParmVarDecl 0x55974c405c50 <col:43> col:46 'int'
|-FriendDecl 0x55974c405e40 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55974c405ed0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<20> >
         0 |   vector_memory<class sized_array_memory<20> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct Classification::Wordwise::Insn>
         0 |   class vector_memory<class sized_array_memory<20> > vm_
         0 |     vector_memory<class sized_array_memory<20> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Classification::Wordwise::Program
         0 |   class Vector<struct Classification::Wordwise::Insn> _insn
         0 |     class vector_memory<class sized_array_memory<20> > vm_
         0 |       vector_memory<class sized_array_memory<20> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   int _output_everything
        20 |   unsigned int _safe_length
        24 |   unsigned int _align_offset
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c719f50 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<20>'
|-CXXRecordDecl 0x55974c71a128 prev 0x55974c719f50 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55974c71a1b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55974c71a1e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c71bdb0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<20>::type':'char_array<20>'
| `-ElaboratedType 0x55974c71bd60 'typename sized_array_memory<20>::type' sugar
|   `-TypedefType 0x55974c71a690 'sized_array_memory<20>::type' sugar
|     |-Typedef 0x55974c71a590 'type'
|     `-TemplateSpecializationType 0x55974c71a520 'char_array<20UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55974c71a400 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 20
|       |   `-SubstNonTypeTemplateParmExpr 0x55974c71a3e0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55974c71a3c0 <col:24> 'unsigned long' 20
|       `-RecordType 0x55974c71a500 'char_array<20>'
|         `-ClassTemplateSpecialization 0x55974c71a420 'char_array'
|-TypedefDecl 0x55974c71be68 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<20> >::type *'
| `-PointerType 0x55974c71be30 'vector_memory<sized_array_memory<20> >::type *'
|   `-TypedefType 0x55974c71be10 'vector_memory<sized_array_memory<20> >::type' sugar
|     |-Typedef 0x55974c71bdb0 'type'
|     `-ElaboratedType 0x55974c71bd60 'typename sized_array_memory<20>::type' sugar
|       `-TypedefType 0x55974c71a690 'sized_array_memory<20>::type' sugar
|         |-Typedef 0x55974c71a590 'type'
|         `-TemplateSpecializationType 0x55974c71a520 'char_array<20UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55974c71a400 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 20
|           |   `-SubstNonTypeTemplateParmExpr 0x55974c71a3e0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55974c71a3c0 <col:24> 'unsigned long' 20
|           `-RecordType 0x55974c71a500 'char_array<20>'
|             `-ClassTemplateSpecialization 0x55974c71a420 'char_array'
|-CXXMethodDecl 0x55974c71bfe8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<20> >::type *) const' inline
| `-ParmVarDecl 0x55974c71bef8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXConstructorDecl 0x55974c71c0d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55974c71c1b8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55974c71c488 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<20> > &)'
| `-ParmVarDecl 0x55974c71c390 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<20> > &'
|-CXXMethodDecl 0x55974c71c6c8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55974c71c540 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55974c71c5b8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71c898 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55974c71c788 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55974c71c800 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71c9f8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<20> >::iterator ()'
|-CXXMethodDecl 0x55974c71cac8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<20> >::iterator ()'
|-CXXMethodDecl 0x55974c71cd18 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<20> >::iterator (vector_memory<sized_array_memory<20> >::iterator, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55974c71cb88 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<20> >::iterator':'vector_memory<sized_array_memory<20> >::type *'
| `-ParmVarDecl 0x55974c71cc00 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71cf78 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<20> >::iterator (vector_memory<sized_array_memory<20> >::iterator, vector_memory<sized_array_memory<20> >::iterator)'
| |-ParmVarDecl 0x55974c71cde8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<20> >::iterator':'vector_memory<sized_array_memory<20> >::type *'
| `-ParmVarDecl 0x55974c71ce60 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<20> >::iterator':'vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71d138 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<20> >::type *)' inline
| `-ParmVarDecl 0x55974c71d048 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71d2f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<20> >::type *)' inline
| `-ParmVarDecl 0x55974c71d200 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71d3b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55974c71d460 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55974c71d720 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<20> >::type *)'
| |-ParmVarDecl 0x55974c71d510 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55974c71d588 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<20> >::type *'
|-CXXMethodDecl 0x55974c71d9b8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<20> > &)'
| `-ParmVarDecl 0x55974c71d8c0 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<20> > &'
|-FieldDecl 0x55974c71da80 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<20> >::type *'
|-FieldDecl 0x55974c71dad0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55974c71db20 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c717890 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Classification::Wordwise::Insn'
|-CXXRecordDecl 0x55974c717a98 prev 0x55974c717890 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55974c719ec0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Insn>::type':'sized_array_memory<20>'
| `-ElaboratedType 0x55974c719e70 'typename array_memory<Insn>::type' sugar
|   `-TypedefType 0x55974c719e50 'conditional<true, sized_array_memory<20>, typed_array_memory<Classification::Wordwise::Insn> >::type' sugar
|     |-Typedef 0x55974c719d00 'type'
|     `-SubstTemplateTypeParmType 0x55974c719b20 'sized_array_memory<20>' sugar
|       |-TemplateTypeParmType 0x55974c4c3570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c4c3518 'T'
|       `-RecordType 0x55974c7185d0 'sized_array_memory<20>'
|         `-ClassTemplateSpecialization 0x55974c7184e8 'sized_array_memory'
|-FieldDecl 0x55974c71db70 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Classification::Wordwise::Insn>::array_memory_type>':'vector_memory<sized_array_memory<20> >' mutable
|-AccessSpecDecl 0x55974c71dbc0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55974c71dbf8 <line:118:5, col:15> col:15 value_type 'Classification::Wordwise::Insn':'Classification::Wordwise::Insn'
| `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|   |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|   `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|     `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71dc88 <line:119:5, col:16> col:16 reference 'Classification::Wordwise::Insn &'
| `-LValueReferenceType 0x55974c71dc50 'Classification::Wordwise::Insn &'
|   `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|       `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71dd18 <line:120:5, col:22> col:22 const_reference 'const Classification::Wordwise::Insn &'
| `-LValueReferenceType 0x55974c71dce0 'const Classification::Wordwise::Insn &'
|   `-QualType 0x55974c717b31 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71dda8 <line:121:5, col:16> col:16 pointer 'Classification::Wordwise::Insn *'
| `-PointerType 0x55974c71dd70 'Classification::Wordwise::Insn *'
|   `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|       `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71de38 <line:122:5, col:22> col:22 const_pointer 'const Classification::Wordwise::Insn *'
| `-PointerType 0x55974c71de00 'const Classification::Wordwise::Insn *'
|   `-QualType 0x55974c717b31 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71eca0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Insn>::type':'const Classification::Wordwise::Insn &'
| `-ElaboratedType 0x55974c71ec50 'typename fast_argument<Insn>::type' sugar
|   `-TypedefType 0x55974c71ec30 'fast_argument<Classification::Wordwise::Insn, true>::type' sugar
|     |-Typedef 0x55974c71eb68 'type'
|     `-LValueReferenceType 0x55974c71eb30 'const Classification::Wordwise::Insn &'
|       `-QualType 0x55974c71e8d1 'const Classification::Wordwise::Insn' const
|         `-SubstTemplateTypeParmType 0x55974c71e8d0 'Classification::Wordwise::Insn' sugar
|           |-TemplateTypeParmType 0x55974c4cc980 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55974c4cc928 'T'
|           `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|             `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71ed08 <line:126:5, col:22> col:22 const_access_type 'const Classification::Wordwise::Insn &'
| `-LValueReferenceType 0x55974c71dce0 'const Classification::Wordwise::Insn &'
|   `-QualType 0x55974c717b31 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71ed60 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c71edc8 <line:130:5, col:16> col:16 iterator 'Classification::Wordwise::Insn *'
| `-PointerType 0x55974c71dd70 'Classification::Wordwise::Insn *'
|   `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|       `-CXXRecord 0x55974c3cdcc0 'Insn'
|-TypedefDecl 0x55974c71ee30 <line:131:5, col:22> col:22 const_iterator 'const Classification::Wordwise::Insn *'
| `-PointerType 0x55974c71de00 'const Classification::Wordwise::Insn *'
|   `-QualType 0x55974c717b31 'const Classification::Wordwise::Insn' const
|     `-SubstTemplateTypeParmType 0x55974c717b30 'Classification::Wordwise::Insn' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-RecordType 0x55974c3cdd50 'Classification::Wordwise::Insn'
|         `-CXXRecord 0x55974c3cdcc0 'Insn'
|-EnumDecl 0x55974c71ee88 <line:134:5> col:5
| `-EnumConstantDecl 0x55974c71ef80 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Classification::Wordwise::Insn>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55974c71ef60 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55974c6f9048 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55974c6f9020 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55974c6f9000 <col:40> 'int' 1
|-CXXConstructorDecl 0x55974c71f008 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55974c71f298 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c71f0c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c71f160 <col:41, col:61> col:61 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXConstructorDecl 0x55974c71f558 <line:139:5, col:37> col:12 Vector 'void (const Vector<Classification::Wordwise::Insn> &)' inline
| `-ParmVarDecl 0x55974c71f440 <col:19, col:36> col:36 x 'const Vector<Classification::Wordwise::Insn> &'
|-CXXConstructorDecl 0x55974c71f818 <line:141:5, col:32> col:12 Vector 'void (Vector<Classification::Wordwise::Insn> &&)' inline
| `-ParmVarDecl 0x55974c71f700 <col:19, col:31> col:31 x 'Vector<Classification::Wordwise::Insn> &&'
|-CXXMethodDecl 0x55974c71fb60 <line:144:5, col:51> col:23 operator= 'Vector<Classification::Wordwise::Insn> &(const Vector<Classification::Wordwise::Insn> &)' inline
| `-ParmVarDecl 0x55974c71fa40 <col:33, col:50> col:50 x 'const Vector<Classification::Wordwise::Insn> &'
|-CXXMethodDecl 0x55974c71fe70 <line:146:5, col:46> col:23 operator= 'Vector<Classification::Wordwise::Insn> &(Vector<Classification::Wordwise::Insn> &&)' inline
| `-ParmVarDecl 0x55974c71fd50 <col:33, col:45> col:45 x 'Vector<Classification::Wordwise::Insn> &&'
|-CXXMethodDecl 0x55974c720160 <line:148:5, col:70> col:23 assign 'Vector<Classification::Wordwise::Insn> &(Vector::size_type, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c71ffa8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c720020 <col:43, col:69> col:63 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55974c7202b8 <line:150:5, col:55> col:49 used begin 'Vector<Classification::Wordwise::Insn>::iterator ()'
| |-NoInlineAttr 0x55974c720398 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c7203f0 <col:30> Inherited
|-CXXMethodDecl 0x55974c720438 <line:151:5, col:53> col:49 used end 'Vector<Classification::Wordwise::Insn>::iterator ()'
| |-NoInlineAttr 0x55974c7204e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c720540 <col:30> Inherited
|-CXXMethodDecl 0x55974c7205d8 <line:152:5, col:63> col:55 used begin 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55974c720688 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c7206e0 <col:30> Inherited
|-CXXMethodDecl 0x55974c720728 <line:153:5, col:61> col:55 used end 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55974c7207d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c720830 <col:30> Inherited
|-CXXMethodDecl 0x55974c720878 <line:154:5, col:64> col:55 cbegin 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55974c720928 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c720980 <col:30> Inherited
|-CXXMethodDecl 0x55974c7209c8 <line:155:5, col:62> col:55 cend 'Vector<Classification::Wordwise::Insn>::const_iterator () const'
| |-NoInlineAttr 0x55974c720a78 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c720ad0 <col:30> Inherited
|-CXXMethodDecl 0x55974c720af8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55974c720ba8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55974c720c58 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55974c720e18 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c720d08 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c720d80 <col:37, col:63> col:57 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55974c720f68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55974c720ed8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c721118 <line:163:5, col:65> col:43 used operator[] 'Classification::Wordwise::Insn &(Vector::size_type)'
| |-ParmVarDecl 0x55974c721020 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55974c7211d0 <col:20>
| `-OptimizeNoneAttr 0x55974c721228 <col:30>
|-CXXMethodDecl 0x55974c721318 <line:164:5, col:73> col:49 used operator[] 'const Classification::Wordwise::Insn &(Vector::size_type) const'
| |-ParmVarDecl 0x55974c721250 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55974c7213d0 <col:20>
| `-OptimizeNoneAttr 0x55974c721428 <col:30>
|-CXXMethodDecl 0x55974c7214e0 <line:165:5, col:29> col:15 at 'Classification::Wordwise::Insn &(Vector::size_type)' inline
| `-ParmVarDecl 0x55974c721450 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c721628 <line:166:5, col:37> col:21 at 'const Classification::Wordwise::Insn &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55974c721598 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c721750 <line:167:5, col:21> col:15 front 'Classification::Wordwise::Insn &()' inline
|-CXXMethodDecl 0x55974c721878 <line:168:5, col:29> col:21 front 'const Classification::Wordwise::Insn &() const' inline
|-CXXMethodDecl 0x55974c721948 <line:169:5, col:20> col:15 used back 'Classification::Wordwise::Insn &()' inline
|-CXXMethodDecl 0x55974c721a18 <line:170:5, col:28> col:21 back 'const Classification::Wordwise::Insn &() const' inline
|-CXXMethodDecl 0x55974c721b58 <line:172:5, col:39> col:15 unchecked_at 'Classification::Wordwise::Insn &(Vector::size_type)' inline
| `-ParmVarDecl 0x55974c721ac8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c721ca0 <line:173:5, col:47> col:21 unchecked_at 'const Classification::Wordwise::Insn &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55974c721c10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c721de8 <line:174:5, col:59> col:15 at_u 'Classification::Wordwise::Insn &(Vector::size_type)' inline
| |-ParmVarDecl 0x55974c721d58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55974c721ea0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55974c721fa0 <line:175:5, col:71> col:21 at_u 'const Classification::Wordwise::Insn &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55974c721f10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55974c722058 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55974c722118 <line:177:5, col:20> col:15 data 'Classification::Wordwise::Insn *()' inline
|-CXXMethodDecl 0x55974c722218 <line:178:5, col:28> col:21 data 'const Classification::Wordwise::Insn *() const' inline
|-CXXMethodDecl 0x55974c722398 <line:180:5, col:48> col:17 push_back 'void (Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| `-ParmVarDecl 0x55974c7222d8 <col:27, col:47> col:47 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-FunctionTemplateDecl 0x55974c722b58 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55974c722450 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Classification::Wordwise::Insn>':'fast_argument<Classification::Wordwise::Insn, true>'
| |-CXXMethodDecl 0x55974c722ab8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Classification::Wordwise::Insn &&)' inline
| | `-ParmVarDecl 0x55974c7229b8 <col:58, col:62> col:62 v 'Classification::Wordwise::Insn &&'
| `-CXXMethodDecl 0x55974c7c2d38 <col:5, col:63> col:48 used push_back 'typename fast_argument<Insn, true>::enable_rvalue_reference (Classification::Wordwise::Insn &&)' inline
|   |-TemplateArgument type 'fast_argument<Classification::Wordwise::Insn, true>'
|   `-ParmVarDecl 0x55974c7c2c60 <col:58, col:62> col:62 v 'Classification::Wordwise::Insn &&'
|-CXXMethodDecl 0x55974c722c38 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55974c722d88 <line:186:5, col:49> col:17 push_front 'void (Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| `-ParmVarDecl 0x55974c722cf8 <col:28, col:48> col:48 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55974c722e40 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55974c723088 <line:189:5, col:62> col:21 insert 'Vector<Classification::Wordwise::Insn>::iterator (Vector<Classification::Wordwise::Insn>::iterator, Vector<Classification::Wordwise::Insn>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c722f00 <col:28, col:37> col:37 it 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
| `-ParmVarDecl 0x55974c722f78 <col:41, col:61> col:61 v 'Vector<Classification::Wordwise::Insn>::value_argument_type':'const Classification::Wordwise::Insn &'
|-CXXMethodDecl 0x55974c723248 <line:190:5, col:38> col:21 erase 'Vector<Classification::Wordwise::Insn>::iterator (Vector<Classification::Wordwise::Insn>::iterator)' inline
| `-ParmVarDecl 0x55974c723158 <col:27, col:36> col:36 it 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
|-CXXMethodDecl 0x55974c723498 <line:191:5, col:49> col:21 used erase 'Vector<Classification::Wordwise::Insn>::iterator (Vector<Classification::Wordwise::Insn>::iterator, Vector<Classification::Wordwise::Insn>::iterator)' inline
| |-ParmVarDecl 0x55974c723310 <col:27, col:36> col:36 a 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
| `-ParmVarDecl 0x55974c723388 <col:39, col:48> col:48 b 'Vector<Classification::Wordwise::Insn>::iterator':'Classification::Wordwise::Insn *'
|-CXXMethodDecl 0x55974c723558 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55974c7237b8 <line:195:5, col:34> col:17 swap 'void (Vector<Classification::Wordwise::Insn> &)' inline
| `-ParmVarDecl 0x55974c7236c0 <col:22, col:33> col:33 x 'Vector<Classification::Wordwise::Insn> &'
`-CXXDestructorDecl 0x55974c723888 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55974c724e58 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c7147a0 <../elements/standard/classification.hh:155:1, line:235:1> line:155:7 referenced class Program definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_implicit
|-CXXRecordDecl 0x55974c7148b8 <col:1, col:7> col:7 implicit referenced class Program
|-AccessSpecDecl 0x55974c714948 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55974c714a58 <line:157:5, line:160:5> line:157:5 Program 'void (unsigned int)'
| |-ParmVarDecl 0x55974c714988 <col:13, col:37> col:22 used align_offset 'unsigned int' cinit
| | `-ImplicitCastExpr 0x55974c724bd0 <col:37> 'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55974c724bb0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55974c723970 '_insn' 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>'
| | `-CXXConstructExpr 0x55974c724de8 <col:5> 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>' 'void ()'
| |-CXXCtorInitializer Field 0x55974c7239d8 '_output_everything' 'int'
| | `-UnaryOperator 0x55974c724c30 <line:158:23, col:24> 'int' prefix '-'
| |   `-ImplicitCastExpr 0x55974c724c18 <col:24> 'int' <IntegralCast>
| |     `-DeclRefExpr 0x55974c724bf8 <col:24> 'Classification::Jumps' EnumConstant 0x55974c3cd788 'j_never' 'Classification::Jumps'
| |-CXXCtorInitializer Field 0x55974c723a40 '_safe_length' 'unsigned int'
| | `-CStyleCastExpr 0x55974c724cf8 <col:47, col:59> 'unsigned int' <NoOp>
| |   `-ImplicitCastExpr 0x55974c724ce0 <col:58, col:59> 'unsigned int' <IntegralCast> part_of_explicit_cast
| |     `-UnaryOperator 0x55974c724cb0 <col:58, col:59> 'int' prefix '-'
| |       `-IntegerLiteral 0x55974c724c90 <col:59> 'int' 1
| |-CXXCtorInitializer Field 0x55974c723aa8 '_align_offset' 'unsigned int'
| | `-ImplicitCastExpr 0x55974c724da8 <line:159:18> 'unsigned int' <LValueToRValue>
| |   `-DeclRefExpr 0x55974c724d68 <col:18> 'unsigned int' lvalue ParmVar 0x55974c714988 'align_offset' 'unsigned int'
| `-CompoundStmt 0x55974c724e68 <col:32, line:160:5>
|-CXXMethodDecl 0x55974c714b60 <line:162:5, line:164:5> line:162:14 used align_offset 'unsigned int () const'
| `-CompoundStmt 0x55974c724ee0 <col:35, line:164:5>
|   `-ReturnStmt 0x55974c724ed0 <line:163:2, col:9>
|     `-ImplicitCastExpr 0x55974c724eb8 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55974c724e88 <col:9> 'const unsigned int' lvalue ->_align_offset 0x55974c723aa8
|         `-CXXThisExpr 0x55974c724e78 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c714c28 <line:165:5, line:167:5> line:165:9 used output_everything 'int () const'
| `-CompoundStmt 0x55974c724f60 <col:35, line:167:5>
|   `-ReturnStmt 0x55974c724f50 <line:166:2, col:9>
|     `-ImplicitCastExpr 0x55974c724f38 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55974c724f08 <col:9> 'const int' lvalue ->_output_everything 0x55974c7239d8
|         `-CXXThisExpr 0x55974c724ef8 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c714cf0 <line:168:5, line:170:5> line:168:14 used safe_length 'unsigned int () const'
| `-CompoundStmt 0x55974c724fe0 <col:34, line:170:5>
|   `-ReturnStmt 0x55974c724fd0 <line:169:2, col:9>
|     `-ImplicitCastExpr 0x55974c724fb8 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55974c724f88 <col:9> 'const unsigned int' lvalue ->_safe_length 0x55974c723a40
|         `-CXXThisExpr 0x55974c724f78 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c714db8 <line:172:5, line:174:5> line:172:9 used ninsn 'int () const'
| `-CompoundStmt 0x55974c7250c8 <col:23, line:174:5>
|   `-ReturnStmt 0x55974c7250b8 <line:173:2, col:20>
|     `-CXXMemberCallExpr 0x55974c725068 <col:9, col:20> 'Vector::size_type':'int'
|       `-MemberExpr 0x55974c725038 <col:9, col:15> '<bound member function type>' .size 0x55974c720af8
|         `-MemberExpr 0x55974c725008 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|           `-CXXThisExpr 0x55974c724ff8 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c714f38 <line:175:5, line:177:5> line:175:17 used insn 'const Classification::Wordwise::Insn &(int) const'
| |-ParmVarDecl 0x55974c714e70 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55974c725238 <col:35, line:177:5>
|   `-ReturnStmt 0x55974c725228 <line:176:2, col:16>
|     `-CXXOperatorCallExpr 0x55974c7251f0 <col:9, col:16> 'const Classification::Wordwise::Insn':'const Classification::Wordwise::Insn' lvalue
|       |-ImplicitCastExpr 0x55974c7251d8 <col:14, col:16> 'const Classification::Wordwise::Insn &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55974c725158 <col:14, col:16> 'const Classification::Wordwise::Insn &(Vector::size_type) const' lvalue CXXMethod 0x55974c721318 'operator[]' 'const Classification::Wordwise::Insn &(Vector::size_type) const'
|       |-MemberExpr 0x55974c7250f0 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|       | `-CXXThisExpr 0x55974c7250e0 <col:9> 'const Classification::Wordwise::Program *' implicit this
|       `-ImplicitCastExpr 0x55974c725140 <col:15> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55974c725120 <col:15> 'int' lvalue ParmVar 0x55974c714e70 'i' 'int'
|-CXXMethodDecl 0x55974c715028 <line:178:5, line:180:5> line:178:17 used begin 'const Classification::Wordwise::Insn *() const'
| `-CompoundStmt 0x55974c725350 <col:31, line:180:5>
|   `-ReturnStmt 0x55974c725340 <line:179:2, col:21>
|     `-CXXMemberCallExpr 0x55974c725320 <col:9, col:21> 'Vector<Classification::Wordwise::Insn>::const_iterator':'const Classification::Wordwise::Insn *'
|       `-MemberExpr 0x55974c7252f0 <col:9, col:15> '<bound member function type>' .begin 0x55974c7205d8
|         `-MemberExpr 0x55974c725260 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|           `-CXXThisExpr 0x55974c725250 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c7150e8 <line:181:5, line:183:5> line:181:17 used end 'const Classification::Wordwise::Insn *() const'
| `-CompoundStmt 0x55974c725468 <col:29, line:183:5>
|   `-ReturnStmt 0x55974c725458 <line:182:2, col:19>
|     `-CXXMemberCallExpr 0x55974c725438 <col:9, col:19> 'Vector<Classification::Wordwise::Insn>::const_iterator':'const Classification::Wordwise::Insn *'
|       `-MemberExpr 0x55974c725408 <col:9, col:15> '<bound member function type>' .end 0x55974c720728
|         `-MemberExpr 0x55974c725378 <col:9> 'const Vector<Classification::Wordwise::Insn>':'const Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|           `-CXXThisExpr 0x55974c725368 <col:9> 'const Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c715208 <line:185:5, line:187:5> line:185:11 back 'Classification::Wordwise::Insn &()'
| `-CompoundStmt 0x55974c725580 <col:18, line:187:5>
|   `-ReturnStmt 0x55974c725570 <line:186:2, col:20>
|     `-CXXMemberCallExpr 0x55974c725550 <col:9, col:20> 'Classification::Wordwise::Insn':'Classification::Wordwise::Insn' lvalue
|       `-MemberExpr 0x55974c725520 <col:9, col:15> '<bound member function type>' .back 0x55974c721948
|         `-MemberExpr 0x55974c725490 <col:9> 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|           `-CXXThisExpr 0x55974c725480 <col:9> 'Classification::Wordwise::Program *' implicit this
|-CXXMethodDecl 0x55974c715778 <line:189:5, col:79> col:10 add_insn 'void (Vector<int> &, int, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55974c7154c0 <col:19, col:32> col:32 tree 'Vector<int> &'
| |-ParmVarDecl 0x55974c715540 <col:38, col:42> col:42 offset 'int'
| |-ParmVarDecl 0x55974c7155b8 <col:50, col:59> col:59 value 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55974c715630 <col:66, col:75> col:75 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c715958 <line:191:5, col:32> col:17 init_subtree 'Vector<int> () const'
|-CXXMethodDecl 0x55974c715bd8 <line:192:5, col:43> col:10 start_subtree 'void (Vector<int> &) const'
| `-ParmVarDecl 0x55974c715ae0 <col:24, col:37> col:37 tree 'Vector<int> &'
|-CXXMethodDecl 0x55974c715ef8 <line:198:5, col:67> col:10 negate_subtree 'void (Vector<int> &, bool)'
| |-ParmVarDecl 0x55974c715d70 <col:25, col:38> col:38 tree 'Vector<int> &'
| `-ParmVarDecl 0x55974c715de8 <col:44, col:62> col:49 flip_short 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c724be8 <col:62> 'bool' false
|-CXXMethodDecl 0x55974c716218 <line:199:5, line:201:5> line:199:17 finish_subtree 'void (Vector<int> &, Classification::Combiner)' inline
| |-ParmVarDecl 0x55974c716090 <col:32, col:45> col:45 used tree 'Vector<int> &'
| |-ParmVarDecl 0x55974c716108 <col:51, col:60> col:60 used op 'Classification::Combiner'
| `-CompoundStmt 0x55974c727cf0 <col:64, line:201:5>
|   `-CXXMemberCallExpr 0x55974c7256c8 <line:200:9, col:54> 'void'
|     |-MemberExpr 0x55974c725698 <col:9> '<bound member function type>' ->finish_subtree 0x55974c716668
|     | `-CXXThisExpr 0x55974c725688 <col:9> 'Classification::Wordwise::Program *' implicit this
|     |-DeclRefExpr 0x55974c725608 <col:24> 'Vector<int>':'Vector<int>' lvalue ParmVar 0x55974c716090 'tree' 'Vector<int> &'
|     |-ImplicitCastExpr 0x55974c725708 <col:30> 'Classification::Combiner' <LValueToRValue>
|     | `-DeclRefExpr 0x55974c725628 <col:30> 'Classification::Combiner' lvalue ParmVar 0x55974c716108 'op' 'Classification::Combiner'
|     |-ImplicitCastExpr 0x55974c727cc0 <col:34> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55974c725648 <col:34> 'Classification::Jumps' EnumConstant 0x55974c3cd828 'j_success' 'Classification::Jumps'
|     `-ImplicitCastExpr 0x55974c727cd8 <col:45> 'int' <IntegralCast>
|       `-DeclRefExpr 0x55974c725668 <col:45> 'Classification::Jumps' EnumConstant 0x55974c3cd7d8 'j_failure' 'Classification::Jumps'
|-CXXMethodDecl 0x55974c716668 <line:202:5, col:81> col:10 used finish_subtree 'void (Vector<int> &, Classification::Combiner, int, int)'
| |-ParmVarDecl 0x55974c7163b0 <col:25, col:38> col:38 tree 'Vector<int> &'
| |-ParmVarDecl 0x55974c716428 <col:44, col:53> col:53 op 'Classification::Combiner'
| |-ParmVarDecl 0x55974c7164a8 <col:57, col:61> col:61 success 'int'
| `-ParmVarDecl 0x55974c716528 <col:70, col:74> col:74 failure 'int'
|-CXXMethodDecl 0x55974c7167d0 <line:204:5, col:33> col:10 used set_failure 'void (int)'
| `-ParmVarDecl 0x55974c716740 <col:22, col:26> col:26 failure 'int'
|-CXXMethodDecl 0x55974c716978 <line:205:5, col:52> col:10 add_or_program 'void (const Classification::Wordwise::Program &)'
| `-ParmVarDecl 0x55974c7168b8 <col:25, col:40> col:40 next_program 'const Classification::Wordwise::Program &'
|-CXXMethodDecl 0x55974c716a40 <line:207:5, col:36> col:10 used combine_compatible_states 'void ()'
|-CXXMethodDecl 0x55974c716b00 <line:208:5, col:31> col:10 used remove_unused_states 'void ()'
|-CXXMethodDecl 0x55974c716bc0 <line:209:5, col:29> col:10 unaligned_optimize 'void ()'
|-CXXMethodDecl 0x55974c716e18 <line:210:5, col:52> col:10 used count_inbranches 'void (Vector<int> &) const'
| `-ParmVarDecl 0x55974c716d50 <col:27, col:40> col:40 inbranches 'Vector<int> &'
|-CXXMethodDecl 0x55974c7170b8 <line:211:5, col:103> col:10 used bubble_sort_and_exprs 'void (const int *, const int *, int)'
| |-ParmVarDecl 0x55974c716ed8 <col:32, col:43> col:43 offset_map_begin 'const int *'
| |-ParmVarDecl 0x55974c716f58 <col:61, col:72> col:72 offset_map_end 'const int *'
| `-ParmVarDecl 0x55974c716fd8 <col:88, col:92> col:92 last_offset 'int'
|-CXXMethodDecl 0x55974c717328 <line:212:5, col:90> col:10 optimize 'void (const int *, const int *, int)'
| |-ParmVarDecl 0x55974c717188 <col:19, col:30> col:30 offset_map_begin 'const int *'
| |-ParmVarDecl 0x55974c717208 <col:48, col:59> col:59 offset_map_end 'const int *'
| `-ParmVarDecl 0x55974c717288 <col:75, col:79> col:79 last_offset 'int'
|-CXXMethodDecl 0x55974c717568 <line:214:5, col:64> col:10 warn_unused_outputs 'void (int, ErrorHandler *) const'
| |-ParmVarDecl 0x55974c7173f8 <col:30, col:34> col:34 noutputs 'int'
| `-ParmVarDecl 0x55974c717498 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55974c7176f0 <line:216:5, col:30> col:9 match 'int (const Packet *)'
| `-ParmVarDecl 0x55974c717628 <col:15, col:29> col:29 p 'const Packet *'
|-CXXMethodDecl 0x55974c7177b8 <line:218:5, col:22> col:12 used unparse 'String () const'
|-AccessSpecDecl 0x55974c717858 <line:220:3, col:10> col:3 private
|-FieldDecl 0x55974c723970 <line:222:5, col:18> col:18 referenced _insn 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>'
|-FieldDecl 0x55974c7239d8 <line:223:5, col:9> col:9 referenced _output_everything 'int'
|-FieldDecl 0x55974c723a40 <line:224:5, col:14> col:14 referenced _safe_length 'unsigned int'
|-FieldDecl 0x55974c723aa8 <line:225:5, col:14> col:14 referenced _align_offset 'unsigned int'
|-CXXMethodDecl 0x55974c723d88 <line:227:5, col:72> col:10 used redirect_subtree 'void (int, int, int, int)'
| |-ParmVarDecl 0x55974c723b10 <col:27, col:31> col:31 first 'int'
| |-ParmVarDecl 0x55974c723b90 <col:38, col:42> col:42 next 'int'
| |-ParmVarDecl 0x55974c723c10 <col:48, col:52> col:52 success 'int'
| `-ParmVarDecl 0x55974c723c90 <col:61, col:65> col:65 failure 'int'
|-CXXMethodDecl 0x55974c723ef0 <line:229:5, col:45> col:9 used length_checked_match 'int (const Packet *)'
| `-ParmVarDecl 0x55974c723e58 <col:30, col:44> col:44 p 'const Packet *'
|-CXXMethodDecl 0x55974c7241a0 <line:230:5, col:78> col:23 used map_offset 'int (int, const int *, const int *)' static inline
| |-ParmVarDecl 0x55974c723fb0 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55974c724030 <col:46, col:57> col:57 begin 'const int *'
| `-ParmVarDecl 0x55974c7240b0 <col:64, col:75> col:75 end 'const int *'
|-CXXMethodDecl 0x55974c724418 <line:231:5, col:76> col:16 used hard_map_offset 'int (int, const int *, const int *)' static
| |-ParmVarDecl 0x55974c724270 <col:32, col:36> col:36 offset 'int'
| |-ParmVarDecl 0x55974c7242f0 <col:44, col:55> col:55 begin 'const int *'
| `-ParmVarDecl 0x55974c724370 <col:62, col:73> col:73 end 'const int *'
|-FriendDecl 0x55974c724520 <line:233:5, col:18> col:12 'class DominatorOptimizer':'Classification::Wordwise::DominatorOptimizer'
|-CXXConstructorDecl 0x55974c724560 <line:155:7> col:7 implicit Program 'void (const Classification::Wordwise::Program &)' inline default noexcept-unevaluated 0x55974c724560
| `-ParmVarDecl 0x55974c724648 <col:7> col:7 'const Classification::Wordwise::Program &'
|-CXXConstructorDecl 0x55974c7246e8 <col:7> col:7 implicit Program 'void (Classification::Wordwise::Program &&)' inline default noexcept-unevaluated 0x55974c7246e8
| `-ParmVarDecl 0x55974c7247f8 <col:7> col:7 'Classification::Wordwise::Program &&'
|-CXXMethodDecl 0x55974c724898 <col:7> col:7 implicit operator= 'Classification::Wordwise::Program &(const Classification::Wordwise::Program &)' inline default noexcept-unevaluated 0x55974c724898
| `-ParmVarDecl 0x55974c7249a8 <col:7> col:7 'const Classification::Wordwise::Program &'
`-CXXMethodDecl 0x55974c724a18 <col:7> col:7 implicit operator= 'Classification::Wordwise::Program &(Classification::Wordwise::Program &&)' inline default noexcept-unevaluated 0x55974c724a18
  `-ParmVarDecl 0x55974c724b28 <col:7> col:7 'Classification::Wordwise::Program &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Classification::Wordwise::Program" = type <{ %class.Vector, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Classification::Wordwise::Program.base" = type <{ %class.Vector, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c729d40 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55974c729f18 prev 0x55974c729d40 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55974c729fa8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55974c729fd0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c72bba0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55974c72bb50 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55974c72a480 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55974c72a380 'type'
|     `-TemplateSpecializationType 0x55974c72a310 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55974c72a1f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55974c72a1d0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55974c72a1b0 <col:24> 'unsigned long' 4
|       `-RecordType 0x55974c72a2f0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55974c72a210 'char_array'
|-TypedefDecl 0x55974c72bc58 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55974c72bc20 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55974c72bc00 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55974c72bba0 'type'
|     `-ElaboratedType 0x55974c72bb50 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55974c72a480 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55974c72a380 'type'
|         `-TemplateSpecializationType 0x55974c72a310 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55974c72a1f0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55974c72a1d0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55974c72a1b0 <col:24> 'unsigned long' 4
|           `-RecordType 0x55974c72a2f0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55974c72a210 'char_array'
|-CXXMethodDecl 0x55974c72bdf8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55974c72bd08 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55974c72bee8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55974c72bfc8 <line:23:5, col:20> col:5 used ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55974c72c298 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55974c72c1a0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55974c72c4d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55974c72c350 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55974c72c3c8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72c6a8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55974c72c598 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55974c72c610 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72c808 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55974c72c8d8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55974c72cb28 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55974c72c998 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55974c72ca10 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72cd88 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55974c72cbf8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55974c72cc70 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72cf48 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55974c72ce58 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72d108 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55974c72d010 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72d1c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55974c72d270 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55974c72d4a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55974c72d320 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55974c72d398 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55974c72d748 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55974c72d650 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55974c72d810 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55974c72d860 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55974c72d8b0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.2 = type { %struct.char_array.3*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.2 = type { %struct.char_array.3*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c7152c0 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55974c735bc8 prev 0x55974c7152c0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55974c736be0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55974c736b90 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55974c736b70 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55974c736a20 'type'
|     `-SubstTemplateTypeParmType 0x55974c729910 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55974c4c3570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c4c3518 'T'
|       `-RecordType 0x55974c729460 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55974c729378 'sized_array_memory'
|-FieldDecl 0x55974c736ce0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55974c736d30 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55974c736d68 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|   |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|   `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c736df8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55974c736dc0 'int &'
|   `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c736eb8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55974c736e80 'const int &'
|   `-QualType 0x55974c735c61 'const int' const
|     `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c736f48 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55974c736f10 'int *'
|   `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c736fd8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55974c736fa0 'const int *'
|   `-QualType 0x55974c735c61 'const int' const
|     `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c737bc0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55974c737b70 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55974c737b50 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55974c737ae0 'type'
|     `-SubstTemplateTypeParmType 0x55974c7378a0 'int' sugar
|       |-TemplateTypeParmType 0x55974c4cd0b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c4cd060 'T'
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c737c28 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55974c736e80 'const int &'
|   `-QualType 0x55974c735c61 'const int' const
|     `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c737c80 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c737ce8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55974c736f10 'int *'
|   `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c737d50 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55974c736fa0 'const int *'
|   `-QualType 0x55974c735c61 'const int' const
|     `-SubstTemplateTypeParmType 0x55974c735c60 'int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb3b0 'int'
|-EnumDecl 0x55974c737da8 <line:134:5> col:5
| `-EnumConstantDecl 0x55974c737ea0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55974c737e80 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55974c6f9048 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55974c6f9020 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55974c6f9000 <col:40> 'int' 1
|-CXXConstructorDecl 0x55974c737f28 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55974c738178 <line:138:5, col:62> col:21 used Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c737fe0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c738080 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55974c738438 <line:139:5, col:37> col:12 used Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55974c738320 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55974c73b3e8 <line:141:5, col:32> col:12 used Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55974c73b2d0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55974c73b700 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55974c73b5e0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55974c73ba10 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55974c73b8f0 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55974c73bd00 <line:148:5, col:70> col:23 used assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c73bb48 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c73bbc0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55974c73be28 <line:150:5, col:55> col:49 used begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55974c73bf08 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c73bf60 <col:30> Inherited
|-CXXMethodDecl 0x55974c73bfa8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55974c73c058 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c73c0b0 <col:30> Inherited
|-CXXMethodDecl 0x55974c73c178 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55974c73c228 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c73c280 <col:30> Inherited
|-CXXMethodDecl 0x55974c73c2c8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55974c73c378 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c73c3d0 <col:30> Inherited
|-CXXMethodDecl 0x55974c73c418 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55974c73c4c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c73c520 <col:30> Inherited
|-CXXMethodDecl 0x55974c73c568 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55974c73c618 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c73c670 <col:30> Inherited
|-CXXMethodDecl 0x55974c73c698 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55974c73c748 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55974c73c7f8 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55974c73c9b8 <line:160:5, col:64> col:17 used resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c73c8a8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c73c920 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int' cinit
|   `-CXXScalarValueInitExpr 0x55974c7d15b0 <col:61, col:63> 'int':'int'
|-CXXMethodDecl 0x55974c73cb08 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55974c73ca78 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c73ccb8 <line:163:5, col:65> col:43 used operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55974c73cbc0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55974c73cd70 <col:20>
| `-OptimizeNoneAttr 0x55974c73cdc8 <col:30>
|-CXXMethodDecl 0x55974c73cee8 <line:164:5, col:73> col:49 used operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55974c73cdf0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55974c73cfa0 <col:20>
| `-OptimizeNoneAttr 0x55974c73cff8 <col:30>
|-CXXMethodDecl 0x55974c73d0b0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55974c73d020 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c73d1f8 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55974c73d168 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c73d328 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55974c73d458 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55974c73d528 <line:169:5, col:20> col:15 used back 'int &()' inline
|-CXXMethodDecl 0x55974c73d5f8 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55974c73d738 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55974c73d6a8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c73d880 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55974c73d7f0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c73d9c8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55974c73d938 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55974c73da80 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55974c73db80 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55974c73daf0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55974c73dc38 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55974c73dcf8 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55974c73ddf8 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55974c73df78 <line:180:5, col:48> col:17 used push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55974c73deb8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55974c73e738 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55974c73e030 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55974c73e698 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55974c73e598 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55974c73e818 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55974c73e968 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55974c73e8d8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55974c73ea20 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55974c73ec68 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c73eae0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55974c73eb58 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55974c73ee28 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55974c73ed38 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55974c73f078 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55974c73eef0 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55974c73ef68 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55974c73f138 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55974c73f398 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55974c73f2a0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55974c73f468 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55974c7c1ed0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.1 = type { %class.vector_memory.2 }
  NonVirtualBaseLLVMType:%class.Vector.1 = type { %class.vector_memory.2 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Classification::Wordwise::DominatorOptimizer
         0 |   class Classification::Wordwise::Program * _p
         8 |   class Vector<int> _known_length
         8 |     class vector_memory<class sized_array_memory<4> > vm_
         8 |       vector_memory<class sized_array_memory<4> >::type * l_
        16 |       vector_memory::size_type n_
        20 |       vector_memory::size_type capacity_
        24 |   class Vector<int> _insn_id
        24 |     class vector_memory<class sized_array_memory<4> > vm_
        24 |       vector_memory<class sized_array_memory<4> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<int> _dom
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class Vector<int> _dom_start
        56 |     class vector_memory<class sized_array_memory<4> > vm_
        56 |       vector_memory<class sized_array_memory<4> >::type * l_
        64 |       vector_memory::size_type n_
        68 |       vector_memory::size_type capacity_
        72 |   class Vector<int> _domlist_start
        72 |     class vector_memory<class sized_array_memory<4> > vm_
        72 |       vector_memory<class sized_array_memory<4> >::type * l_
        80 |       vector_memory::size_type n_
        84 |       vector_memory::size_type capacity_
        88 |   class Vector<int> _pred_first
        88 |     class vector_memory<class sized_array_memory<4> > vm_
        88 |       vector_memory<class sized_array_memory<4> >::type * l_
        96 |       vector_memory::size_type n_
       100 |       vector_memory::size_type capacity_
       104 |   class Vector<int> _pred_next
       104 |     class vector_memory<class sized_array_memory<4> > vm_
       104 |       vector_memory<class sized_array_memory<4> >::type * l_
       112 |       vector_memory::size_type n_
       116 |       vector_memory::size_type capacity_
       120 |   class Vector<int> _pred_prev
       120 |     class vector_memory<class sized_array_memory<4> > vm_
       120 |       vector_memory<class sized_array_memory<4> >::type * l_
       128 |       vector_memory::size_type n_
       132 |       vector_memory::size_type capacity_
           | [sizeof=136, dsize=136, align=8,
           |  nvsize=136, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c734ba8 prev 0x55974c3cdc08 <../elements/standard/classification.hh:279:1, line:369:1> line:279:7 referenced class DominatorOptimizer definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial
|-CXXRecordDecl 0x55974c734ca0 <col:1, col:7> col:7 implicit referenced class DominatorOptimizer
|-AccessSpecDecl 0x55974c734d30 <col:28, col:34> col:28 public
|-CXXConstructorDecl 0x55974c734e68 <line:281:5, col:34> col:5 used DominatorOptimizer 'void (Classification::Wordwise::Program *)'
| `-ParmVarDecl 0x55974c734d68 <col:24, col:33> col:33 p 'Classification::Wordwise::Program *'
|-CXXMethodDecl 0x55974c735080 <line:283:5, col:69> col:16 used brno 'int (int, bool)' static
| |-ParmVarDecl 0x55974c734f30 <col:21, col:25> col:25 used state 'int'
| |-ParmVarDecl 0x55974c734fa8 <col:32, col:37> col:37 used br 'bool'
| `-CompoundStmt 0x55974c742458 <col:41, col:69>
|   `-ReturnStmt 0x55974c742448 <col:43, col:65>
|     `-BinaryOperator 0x55974c742428 <col:50, col:65> 'int' '+'
|       |-ParenExpr 0x55974c7423b8 <col:50, col:61> 'int'
|       | `-BinaryOperator 0x55974c742398 <col:51, col:60> 'int' '<<'
|       |   |-ImplicitCastExpr 0x55974c742380 <col:51> 'int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x55974c742340 <col:51> 'int' lvalue ParmVar 0x55974c734f30 'state' 'int'
|       |   `-IntegerLiteral 0x55974c742360 <col:60> 'int' 1
|       `-ImplicitCastExpr 0x55974c742410 <col:65> 'int' <IntegralCast>
|         `-ImplicitCastExpr 0x55974c7423f8 <col:65> 'bool' <LValueToRValue>
|           `-DeclRefExpr 0x55974c7423d8 <col:65> 'bool' lvalue ParmVar 0x55974c734fa8 'br' 'bool'
|-CXXMethodDecl 0x55974c7351e0 <line:284:5, col:54> col:16 used stateno 'int (int)' static
| |-ParmVarDecl 0x55974c735148 <col:24, col:28> col:28 used brno 'int'
| `-CompoundStmt 0x55974c7424f8 <col:34, col:54>
|   `-ReturnStmt 0x55974c7424e8 <col:36, col:51>
|     `-BinaryOperator 0x55974c7424c8 <col:43, col:51> 'int' '>>'
|       |-ImplicitCastExpr 0x55974c7424b0 <col:43> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x55974c742470 <col:43> 'int' lvalue ParmVar 0x55974c735148 'brno' 'int'
|       `-IntegerLiteral 0x55974c742490 <col:51> 'int' 1
|-CXXMethodDecl 0x55974c735330 <line:285:5, col:53> col:17 used br_yes 'bool (int)' static
| |-ParmVarDecl 0x55974c7352a0 <col:24, col:28> col:28 used brno 'int'
| `-CompoundStmt 0x55974c7425b0 <col:34, col:53>
|   `-ReturnStmt 0x55974c7425a0 <col:36, col:50>
|     `-ImplicitCastExpr 0x55974c742588 <col:43, col:50> 'bool' <IntegralToBoolean>
|       `-BinaryOperator 0x55974c742568 <col:43, col:50> 'int' '&'
|         |-ImplicitCastExpr 0x55974c742550 <col:43> 'int' <LValueToRValue>
|         | `-DeclRefExpr 0x55974c742510 <col:43> 'int' lvalue ParmVar 0x55974c7352a0 'brno' 'int'
|         `-IntegerLiteral 0x55974c742530 <col:50> 'int' 1
|-CXXMethodDecl 0x55974c735578 <line:287:5, line:295:5> line:287:10 used br_implies 'bool (int, int) const'
| |-ParmVarDecl 0x55974c7353f0 <col:21, col:25> col:25 used brno 'int'
| |-ParmVarDecl 0x55974c735470 <col:31, col:35> col:35 used state 'int'
| `-CompoundStmt 0x55974c7481e0 <col:48, line:295:5>
|   |-ParenExpr 0x55974c7429c8 <line:288:2, col:156> 'void'
|   | `-ConditionalOperator 0x55974c742998 <col:3, col:155> 'void'
|   |   |-CXXStaticCastExpr 0x55974c742650 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c742620 <col:23, col:31> 'bool' '>'
|   |   |   |-ImplicitCastExpr 0x55974c742608 <col:23> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55974c7425c8 <col:23> 'int' lvalue ParmVar 0x55974c735470 'state' 'int'
|   |   |   `-IntegerLiteral 0x55974c7425e8 <col:31> 'int' 0
|   |   |-CXXFunctionalCastExpr 0x55974c7426b0 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c742690 <col:42> 'int' 0
|   |   `-CallExpr 0x55974c7428f8 <col:47, col:155> 'void'
|   |     |-ImplicitCastExpr 0x55974c7428e0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c7428c0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c742938 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c742720 <col:62> 'const char [10]' lvalue "state > 0"
|   |     |-ImplicitCastExpr 0x55974c742950 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c742748 <col:75> 'const char [39]' lvalue "../elements/standard/classification.hh"
|   |     |-ImplicitCastExpr 0x55974c742968 <col:117> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c742788 <col:117> 'int' 288
|   |     `-ImplicitCastExpr 0x55974c742980 <col:122, col:136> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c7428a8 <col:122, col:136> 'const char [78]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c742890 <col:136> 'const char [78]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c742828 <col:136> 'const char [78]' lvalue "bool Classification::Wordwise::DominatorOptimizer::br_implies(int, int) const"
|   |-DeclStmt 0x55974c742b00 <line:289:2, col:32>
|   | `-VarDecl 0x55974c742a00 <col:2, col:31> col:6 used from_state 'int' cinit
|   |   `-CallExpr 0x55974c742ac0 <col:19, col:31> 'int'
|   |     |-ImplicitCastExpr 0x55974c742aa8 <col:19> 'int (*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c742a68 <col:19> 'int (int)' lvalue CXXMethod 0x55974c7351e0 'stateno' 'int (int)'
|   |     `-ImplicitCastExpr 0x55974c742ae8 <col:27> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55974c742a88 <col:27> 'int' lvalue ParmVar 0x55974c7353f0 'brno' 'int'
|   |-DeclStmt 0x55974c742d38 <line:290:2, col:41>
|   | `-VarDecl 0x55974c742b30 <col:2, col:40> col:11 used kl 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x55974c742d20 <col:16, col:40> 'unsigned int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x55974c742d08 <col:16, col:40> 'int':'int' <LValueToRValue>
|   |       `-CXXOperatorCallExpr 0x55974c742cd0 <col:16, col:40> 'const int':'const int' lvalue
|   |         |-ImplicitCastExpr 0x55974c742cb8 <col:29, col:40> 'const int &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55974c742c40 <col:29, col:40> 'const int &(Vector::size_type) const' lvalue CXXMethod 0x55974c73cee8 'operator[]' 'const int &(Vector::size_type) const'
|   |         |-MemberExpr 0x55974c742ba8 <col:16> 'const Vector<int>':'const Vector<int>' lvalue ->_known_length 0x55974c73f550
|   |         | `-CXXThisExpr 0x55974c742b98 <col:16> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|   |         `-ImplicitCastExpr 0x55974c742c28 <col:30> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x55974c742bd8 <col:30> 'int' lvalue Var 0x55974c742a00 'from_state' 'int'
|   `-IfStmt 0x55974c7481b8 <line:291:2, line:294:57> has_else
|     |-CallExpr 0x55974c742dd0 <line:291:6, col:17> 'bool'
|     | |-ImplicitCastExpr 0x55974c742db8 <col:6> 'bool (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55974c742d50 <col:6> 'bool (int)' lvalue CXXMethod 0x55974c735330 'br_yes' 'bool (int)'
|     | `-ImplicitCastExpr 0x55974c742df8 <col:13> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55974c742d70 <col:13> 'int' lvalue ParmVar 0x55974c7353f0 'brno' 'int'
|     |-ReturnStmt 0x55974c743018 <line:292:6, col:53>
|     | `-CXXMemberCallExpr 0x55974c742fa0 <col:13, col:53> 'bool'
|     |   |-MemberExpr 0x55974c742eb0 <col:13, col:30> '<bound member function type>' .implies 0x55974c3cf3c8
|     |   | `-ImplicitCastExpr 0x55974c742fd0 <col:13, col:28> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|     |   |   `-CXXMemberCallExpr 0x55974c742e70 <col:13, col:28> 'Classification::Wordwise::Insn' lvalue
|     |   |     |-MemberExpr 0x55974c742e20 <col:13> '<bound member function type>' ->insn 0x55974c73ff58
|     |   |     | `-CXXThisExpr 0x55974c742e10 <col:13> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|     |   |     `-ImplicitCastExpr 0x55974c742e98 <col:18> 'int' <LValueToRValue>
|     |   |       `-DeclRefExpr 0x55974c742e50 <col:18> 'int' lvalue Var 0x55974c742a00 'from_state' 'int'
|     |   |-ImplicitCastExpr 0x55974c742fe8 <col:38, col:48> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|     |   | `-CXXMemberCallExpr 0x55974c742f40 <col:38, col:48> 'Classification::Wordwise::Insn' lvalue
|     |   |   |-MemberExpr 0x55974c742ef0 <col:38> '<bound member function type>' ->insn 0x55974c73ff58
|     |   |   | `-CXXThisExpr 0x55974c742ee0 <col:38> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|     |   |   `-ImplicitCastExpr 0x55974c742f68 <col:43> 'int' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x55974c742f20 <col:43> 'int' lvalue ParmVar 0x55974c735470 'state' 'int'
|     |   `-ImplicitCastExpr 0x55974c743000 <col:51> 'unsigned int' <LValueToRValue>
|     |     `-DeclRefExpr 0x55974c742f80 <col:51> 'unsigned int' lvalue Var 0x55974c742b30 'kl' 'unsigned int'
|     `-ReturnStmt 0x55974c7481a8 <line:294:6, col:57>
|       `-CXXMemberCallExpr 0x55974c7431b8 <col:13, col:57> 'bool'
|         |-MemberExpr 0x55974c7430c8 <col:13, col:30> '<bound member function type>' .not_implies 0x55974c3cf5a0
|         | `-ImplicitCastExpr 0x55974c748160 <col:13, col:28> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|         |   `-CXXMemberCallExpr 0x55974c743088 <col:13, col:28> 'Classification::Wordwise::Insn' lvalue
|         |     |-MemberExpr 0x55974c743038 <col:13> '<bound member function type>' ->insn 0x55974c73ff58
|         |     | `-CXXThisExpr 0x55974c743028 <col:13> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|         |     `-ImplicitCastExpr 0x55974c7430b0 <col:18> 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x55974c743068 <col:18> 'int' lvalue Var 0x55974c742a00 'from_state' 'int'
|         |-ImplicitCastExpr 0x55974c748178 <col:42, col:52> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|         | `-CXXMemberCallExpr 0x55974c743158 <col:42, col:52> 'Classification::Wordwise::Insn' lvalue
|         |   |-MemberExpr 0x55974c743108 <col:42> '<bound member function type>' ->insn 0x55974c73ff58
|         |   | `-CXXThisExpr 0x55974c7430f8 <col:42> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|         |   `-ImplicitCastExpr 0x55974c743180 <col:47> 'int' <LValueToRValue>
|         |     `-DeclRefExpr 0x55974c743138 <col:47> 'int' lvalue ParmVar 0x55974c735470 'state' 'int'
|         `-ImplicitCastExpr 0x55974c748190 <col:55> 'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55974c743198 <col:55> 'unsigned int' lvalue Var 0x55974c742b30 'kl' 'unsigned int'
|-CXXMethodDecl 0x55974c735758 <line:297:5, line:305:5> line:297:10 used br_implies_not 'bool (int, int) const'
| |-ParmVarDecl 0x55974c735640 <col:25, col:29> col:29 used brno 'int'
| |-ParmVarDecl 0x55974c7356c0 <col:35, col:39> col:39 used state 'int'
| `-CompoundStmt 0x55974c748e00 <col:52, line:305:5>
|   |-ParenExpr 0x55974c748610 <line:298:2, col:156> 'void'
|   | `-ConditionalOperator 0x55974c7485e0 <col:3, col:155> 'void'
|   |   |-CXXStaticCastExpr 0x55974c748298 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c748268 <col:23, col:31> 'bool' '>'
|   |   |   |-ImplicitCastExpr 0x55974c748250 <col:23> 'int' <LValueToRValue>
|   |   |   | `-DeclRefExpr 0x55974c748210 <col:23> 'int' lvalue ParmVar 0x55974c7356c0 'state' 'int'
|   |   |   `-IntegerLiteral 0x55974c748230 <col:31> 'int' 0
|   |   |-CXXFunctionalCastExpr 0x55974c7482f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c7482d8 <col:42> 'int' 0
|   |   `-CallExpr 0x55974c748540 <col:47, col:155> 'void'
|   |     |-ImplicitCastExpr 0x55974c748528 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c748508 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c748580 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c748368 <col:62> 'const char [10]' lvalue "state > 0"
|   |     |-ImplicitCastExpr 0x55974c748598 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c748390 <col:75> 'const char [39]' lvalue "../elements/standard/classification.hh"
|   |     |-ImplicitCastExpr 0x55974c7485b0 <col:117> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c7483d0 <col:117> 'int' 298
|   |     `-ImplicitCastExpr 0x55974c7485c8 <col:122, col:136> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c7484f0 <col:122, col:136> 'const char [82]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c7484d8 <col:136> 'const char [82]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c748468 <col:136> 'const char [82]' lvalue "bool Classification::Wordwise::DominatorOptimizer::br_implies_not(int, int) const"
|   |-DeclStmt 0x55974c748748 <line:299:2, col:32>
|   | `-VarDecl 0x55974c748648 <col:2, col:31> col:6 used from_state 'int' cinit
|   |   `-CallExpr 0x55974c748708 <col:19, col:31> 'int'
|   |     |-ImplicitCastExpr 0x55974c7486f0 <col:19> 'int (*)(int)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c7486b0 <col:19> 'int (int)' lvalue CXXMethod 0x55974c7351e0 'stateno' 'int (int)'
|   |     `-ImplicitCastExpr 0x55974c748730 <col:27> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55974c7486d0 <col:27> 'int' lvalue ParmVar 0x55974c735640 'brno' 'int'
|   |-DeclStmt 0x55974c7488f8 <line:300:2, col:41>
|   | `-VarDecl 0x55974c748778 <col:2, col:40> col:11 used kl 'unsigned int' cinit
|   |   `-ImplicitCastExpr 0x55974c7488e0 <col:16, col:40> 'unsigned int' <IntegralCast>
|   |     `-ImplicitCastExpr 0x55974c7488c8 <col:16, col:40> 'int':'int' <LValueToRValue>
|   |       `-CXXOperatorCallExpr 0x55974c748890 <col:16, col:40> 'const int':'const int' lvalue
|   |         |-ImplicitCastExpr 0x55974c748878 <col:29, col:40> 'const int &(*)(Vector::size_type) const' <FunctionToPointerDecay>
|   |         | `-DeclRefExpr 0x55974c748858 <col:29, col:40> 'const int &(Vector::size_type) const' lvalue CXXMethod 0x55974c73cee8 'operator[]' 'const int &(Vector::size_type) const'
|   |         |-MemberExpr 0x55974c7487f0 <col:16> 'const Vector<int>':'const Vector<int>' lvalue ->_known_length 0x55974c73f550
|   |         | `-CXXThisExpr 0x55974c7487e0 <col:16> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|   |         `-ImplicitCastExpr 0x55974c748840 <col:30> 'int' <LValueToRValue>
|   |           `-DeclRefExpr 0x55974c748820 <col:30> 'int' lvalue Var 0x55974c748648 'from_state' 'int'
|   `-IfStmt 0x55974c748dd8 <line:301:2, line:304:61> has_else
|     |-CallExpr 0x55974c748968 <line:301:6, col:17> 'bool'
|     | |-ImplicitCastExpr 0x55974c748950 <col:6> 'bool (*)(int)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55974c748910 <col:6> 'bool (int)' lvalue CXXMethod 0x55974c735330 'br_yes' 'bool (int)'
|     | `-ImplicitCastExpr 0x55974c748990 <col:13> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55974c748930 <col:13> 'int' lvalue ParmVar 0x55974c735640 'brno' 'int'
|     |-ReturnStmt 0x55974c748bb0 <line:302:6, col:57>
|     | `-CXXMemberCallExpr 0x55974c748b38 <col:13, col:57> 'bool'
|     |   |-MemberExpr 0x55974c748a48 <col:13, col:30> '<bound member function type>' .implies_not 0x55974c3cf778
|     |   | `-ImplicitCastExpr 0x55974c748b68 <col:13, col:28> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|     |   |   `-CXXMemberCallExpr 0x55974c748a08 <col:13, col:28> 'Classification::Wordwise::Insn' lvalue
|     |   |     |-MemberExpr 0x55974c7489b8 <col:13> '<bound member function type>' ->insn 0x55974c73ff58
|     |   |     | `-CXXThisExpr 0x55974c7489a8 <col:13> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|     |   |     `-ImplicitCastExpr 0x55974c748a30 <col:18> 'int' <LValueToRValue>
|     |   |       `-DeclRefExpr 0x55974c7489e8 <col:18> 'int' lvalue Var 0x55974c748648 'from_state' 'int'
|     |   |-ImplicitCastExpr 0x55974c748b80 <col:42, col:52> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|     |   | `-CXXMemberCallExpr 0x55974c748ad8 <col:42, col:52> 'Classification::Wordwise::Insn' lvalue
|     |   |   |-MemberExpr 0x55974c748a88 <col:42> '<bound member function type>' ->insn 0x55974c73ff58
|     |   |   | `-CXXThisExpr 0x55974c748a78 <col:42> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|     |   |   `-ImplicitCastExpr 0x55974c748b00 <col:47> 'int' <LValueToRValue>
|     |   |     `-DeclRefExpr 0x55974c748ab8 <col:47> 'int' lvalue ParmVar 0x55974c7356c0 'state' 'int'
|     |   `-ImplicitCastExpr 0x55974c748b98 <col:55> 'unsigned int' <LValueToRValue>
|     |     `-DeclRefExpr 0x55974c748b18 <col:55> 'unsigned int' lvalue Var 0x55974c748778 'kl' 'unsigned int'
|     `-ReturnStmt 0x55974c748dc8 <line:304:6, col:61>
|       `-CXXMemberCallExpr 0x55974c748d50 <col:13, col:61> 'bool'
|         |-MemberExpr 0x55974c748c60 <col:13, col:30> '<bound member function type>' .not_implies_not 0x55974c3cf950
|         | `-ImplicitCastExpr 0x55974c748d80 <col:13, col:28> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|         |   `-CXXMemberCallExpr 0x55974c748c20 <col:13, col:28> 'Classification::Wordwise::Insn' lvalue
|         |     |-MemberExpr 0x55974c748bd0 <col:13> '<bound member function type>' ->insn 0x55974c73ff58
|         |     | `-CXXThisExpr 0x55974c748bc0 <col:13> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|         |     `-ImplicitCastExpr 0x55974c748c48 <col:18> 'int' <LValueToRValue>
|         |       `-DeclRefExpr 0x55974c748c00 <col:18> 'int' lvalue Var 0x55974c748648 'from_state' 'int'
|         |-ImplicitCastExpr 0x55974c748d98 <col:46, col:56> 'const Classification::Wordwise::Insn' lvalue <NoOp>
|         | `-CXXMemberCallExpr 0x55974c748cf0 <col:46, col:56> 'Classification::Wordwise::Insn' lvalue
|         |   |-MemberExpr 0x55974c748ca0 <col:46> '<bound member function type>' ->insn 0x55974c73ff58
|         |   | `-CXXThisExpr 0x55974c748c90 <col:46> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|         |   `-ImplicitCastExpr 0x55974c748d18 <col:51> 'int' <LValueToRValue>
|         |     `-DeclRefExpr 0x55974c748cd0 <col:51> 'int' lvalue ParmVar 0x55974c7356c0 'state' 'int'
|         `-ImplicitCastExpr 0x55974c748db0 <col:59> 'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x55974c748d30 <col:59> 'unsigned int' lvalue Var 0x55974c748778 'kl' 'unsigned int'
|-CXXMethodDecl 0x55974c7358b0 <line:307:5, col:23> col:10 used run 'void (int)'
| `-ParmVarDecl 0x55974c735820 <col:14, col:18> col:18 state 'int'
|-CXXMethodDecl 0x55974c735978 <line:309:5, col:16> col:10 print 'void ()'
|-AccessSpecDecl 0x55974c735a18 <line:311:3, col:10> col:3 private
|-FieldDecl 0x55974c735a50 <line:313:5, col:14> col:14 referenced _p 'Classification::Wordwise::Program *'
|-FieldDecl 0x55974c73f550 <line:314:5, col:17> col:17 referenced _known_length 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55974c73f660 <line:315:5, col:17> col:17 referenced _insn_id 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55974c73f770 <line:316:5, col:17> col:17 referenced _dom 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55974c73f880 <line:317:5, col:17> col:17 referenced _dom_start 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55974c73f990 <line:318:5, col:17> col:17 referenced _domlist_start 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55974c73faa0 <line:320:5, col:25> col:25 referenced _pred_first 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x55974c73fbb0 <line:321:5, col:25> col:25 referenced _pred_next 'Vector<int>':'Vector<int>' mutable
|-FieldDecl 0x55974c73fcc0 <line:322:5, col:25> col:25 referenced _pred_prev 'Vector<int>':'Vector<int>' mutable
|-EnumDecl 0x55974c73fd10 <line:325:5, col:28> col:5
| `-EnumConstantDecl 0x55974c73fe10 <col:12, col:26> col:12 referenced MAX_DOMLIST 'Classification::Wordwise::DominatorOptimizer::(anonymous enum at ../elements/standard/classification.hh:325:5)'
|   `-ImplicitCastExpr 0x55974c73fe60 <col:26> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c73fdf0 <col:26> 'int' Int: 4
|       `-IntegerLiteral 0x55974c73fdd0 <col:26> 'int' 4
|-CXXMethodDecl 0x55974c73ff58 <line:327:5, line:329:5> line:327:11 used insn 'Classification::Wordwise::Insn &(int) const'
| |-ParmVarDecl 0x55974c73fe90 <col:16, col:20> col:20 used state 'int'
| `-CompoundStmt 0x55974c748fc8 <col:33, line:329:5>
|   `-ReturnStmt 0x55974c748fb8 <line:328:2, col:24>
|     `-CXXOperatorCallExpr 0x55974c748f80 <col:9, col:24> 'Classification::Wordwise::Insn':'Classification::Wordwise::Insn' lvalue
|       |-ImplicitCastExpr 0x55974c748f68 <col:18, col:24> 'Classification::Wordwise::Insn &(*)(Vector::size_type)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55974c748ef0 <col:18, col:24> 'Classification::Wordwise::Insn &(Vector::size_type)' lvalue CXXMethod 0x55974c721118 'operator[]' 'Classification::Wordwise::Insn &(Vector::size_type)'
|       |-MemberExpr 0x55974c748e88 <col:9, col:13> 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|       | `-ImplicitCastExpr 0x55974c748e70 <col:9> 'Classification::Wordwise::Program *' <LValueToRValue>
|       |   `-MemberExpr 0x55974c748e40 <col:9> 'Classification::Wordwise::Program *const' lvalue ->_p 0x55974c735a50
|       |     `-CXXThisExpr 0x55974c748e30 <col:9> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|       `-ImplicitCastExpr 0x55974c748ed8 <col:19> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x55974c748eb8 <col:19> 'int' lvalue ParmVar 0x55974c73fe90 'state' 'int'
|-CXXMethodDecl 0x55974c740028 <line:330:5, line:332:5> line:330:9 used ninsn 'int () const'
| `-CompoundStmt 0x55974c7490e0 <col:23, line:332:5>
|   `-ReturnStmt 0x55974c7490d0 <line:331:2, col:24>
|     `-CXXMemberCallExpr 0x55974c749098 <col:9, col:24> 'Vector::size_type':'int'
|       `-MemberExpr 0x55974c749068 <col:9, col:19> '<bound member function type>' .size 0x55974c720af8
|         `-ImplicitCastExpr 0x55974c7490b8 <col:9, col:13> 'const Vector<Classification::Wordwise::Insn>' lvalue <NoOp>
|           `-MemberExpr 0x55974c749038 <col:9, col:13> 'Vector<Classification::Wordwise::Insn>':'Vector<Classification::Wordwise::Insn>' lvalue ->_insn 0x55974c723970
|             `-ImplicitCastExpr 0x55974c749020 <col:9> 'Classification::Wordwise::Program *' <LValueToRValue>
|               `-MemberExpr 0x55974c748ff0 <col:9> 'Classification::Wordwise::Program *const' lvalue ->_p 0x55974c735a50
|                 `-CXXThisExpr 0x55974c748fe0 <col:9> 'const Classification::Wordwise::DominatorOptimizer *' implicit this
|-CXXMethodDecl 0x55974c740818 <line:334:5, col:129> col:17 used intersect_lists 'void (const Vector<int> &, const Vector<int> &, const Vector<int> &, int, int, Vector<int> &)' static
| |-ParmVarDecl 0x55974c7401b0 <col:33, col:51> col:52 'const Vector<int> &'
| |-ParmVarDecl 0x55974c740300 <col:54, col:72> col:73 'const Vector<int> &'
| |-ParmVarDecl 0x55974c740450 <col:75, col:93> col:94 'const Vector<int> &'
| |-ParmVarDecl 0x55974c7404d0 <col:96, col:100> col:100 pos1 'int'
| |-ParmVarDecl 0x55974c740550 <col:106, col:110> col:110 pos2 'int'
| `-ParmVarDecl 0x55974c7406a0 <col:116, col:128> col:129 'Vector<int> &'
|-CXXMethodDecl 0x55974c740da0 <line:335:5, col:104> col:16 used last_common_state_in_lists 'int (const Vector<int> &, const Vector<int> &, const Vector<int> &)' static
| |-ParmVarDecl 0x55974c7409d0 <col:43, col:61> col:62 'const Vector<int> &'
| |-ParmVarDecl 0x55974c740b20 <col:64, col:82> col:83 'const Vector<int> &'
| `-ParmVarDecl 0x55974c740c70 <col:85, col:103> col:104 'const Vector<int> &'
|-CXXMethodDecl 0x55974c7410d8 <line:336:5, col:54> col:10 used find_predecessors 'void (int, Vector<int> &) const'
| |-ParmVarDecl 0x55974c740e70 <col:28, col:32> col:32 state 'int'
| `-ParmVarDecl 0x55974c740fc0 <col:39, col:51> col:52 'Vector<int> &'
|-CXXMethodDecl 0x55974c7415d0 <line:337:5, col:94> col:9 used dom_shift_branch 'int (int, int, int, int, Vector<int> *)'
| |-ParmVarDecl 0x55974c7411a0 <col:26, col:30> col:30 brno 'int'
| |-ParmVarDecl 0x55974c741220 <col:36, col:40> col:40 to_state 'int'
| |-ParmVarDecl 0x55974c7412a0 <col:50, col:54> col:54 dom 'int'
| |-ParmVarDecl 0x55974c741320 <col:59, col:63> col:63 dom_end 'int'
| `-ParmVarDecl 0x55974c741470 <col:72, col:85> col:85 collector 'Vector<int> *'
|-CXXMethodDecl 0x55974c7417f8 <line:338:5, col:45> col:10 used shift_branch 'void (int, bool)'
| |-ParmVarDecl 0x55974c7416b0 <col:23, col:27> col:27 state 'int'
| `-ParmVarDecl 0x55974c741728 <col:34, col:39> col:39 branch 'bool'
|-CXXMethodDecl 0x55974c741950 <line:339:5, col:33> col:10 used calculate_dom 'void (int)'
| `-ParmVarDecl 0x55974c7418c0 <col:24, col:28> col:28 state 'int'
|-CXXMethodDecl 0x55974c741be8 <line:341:5, line:367:5> line:341:17 used set_branch 'void (int, bool, int)' inline
| |-ParmVarDecl 0x55974c741a10 <col:28, col:32> col:32 used from_state 'int'
| |-ParmVarDecl 0x55974c741a88 <col:44, col:49> col:49 used branch 'bool'
| |-ParmVarDecl 0x55974c741b08 <col:57, col:61> col:61 used to_state 'int'
| `-CompoundStmt 0x55974c74afd0 <col:71, line:367:5>
|   |-DeclStmt 0x55974c749280 <line:342:2, col:29>
|   | `-VarDecl 0x55974c749108 <col:2, col:28> col:8 used in 'Classification::Wordwise::Insn &' cinit
|   |   `-CXXMemberCallExpr 0x55974c7491d0 <col:13, col:28> 'Classification::Wordwise::Insn' lvalue
|   |     |-MemberExpr 0x55974c749180 <col:13> '<bound member function type>' ->insn 0x55974c73ff58
|   |     | `-ImplicitCastExpr 0x55974c7491f8 <col:13> 'const Classification::Wordwise::DominatorOptimizer *' <NoOp>
|   |     |   `-CXXThisExpr 0x55974c749170 <col:13> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |     `-ImplicitCastExpr 0x55974c749210 <col:18> 'int' <LValueToRValue>
|   |       `-DeclRefExpr 0x55974c7491b0 <col:18> 'int' lvalue ParmVar 0x55974c741a10 'from_state' 'int'
|   |-DeclStmt 0x55974c749420 <line:344:2, col:35>
|   | `-VarDecl 0x55974c7492b0 <col:2, col:34> col:6 used br 'int' cinit
|   |   `-CallExpr 0x55974c7493c0 <col:11, col:34> 'int'
|   |     |-ImplicitCastExpr 0x55974c7493a8 <col:11> 'int (*)(int, bool)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c749318 <col:11> 'int (int, bool)' lvalue CXXMethod 0x55974c735080 'brno' 'int (int, bool)'
|   |     |-ImplicitCastExpr 0x55974c7493f0 <col:16> 'int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x55974c749338 <col:16> 'int' lvalue ParmVar 0x55974c741a10 'from_state' 'int'
|   |     `-ImplicitCastExpr 0x55974c749408 <col:28> 'bool' <LValueToRValue>
|   |       `-DeclRefExpr 0x55974c749358 <col:28> 'bool' lvalue ParmVar 0x55974c741a88 'branch' 'bool'
|   |-IfStmt 0x55974c74a0d8 <line:345:2, line:352:2>
|   | |-BinaryOperator 0x55974c749530 <line:345:6, col:21> 'bool' '>'
|   | | |-ImplicitCastExpr 0x55974c749518 <col:6, col:17> 'int32_t':'int' <LValueToRValue>
|   | | | `-ArraySubscriptExpr 0x55974c7494d8 <col:6, col:17> 'int32_t':'int' lvalue
|   | | |   |-ImplicitCastExpr 0x55974c7494a8 <col:6, col:9> 'int32_t *' <ArrayToPointerDecay>
|   | | |   | `-MemberExpr 0x55974c749458 <col:6, col:9> 'int32_t [2]' lvalue .j 0x55974c3ce648
|   | | |   |   `-DeclRefExpr 0x55974c749438 <col:6> 'Classification::Wordwise::Insn' lvalue Var 0x55974c749108 'in' 'Classification::Wordwise::Insn &'
|   | | |   `-ImplicitCastExpr 0x55974c7494c0 <col:11> 'bool' <LValueToRValue>
|   | | |     `-DeclRefExpr 0x55974c749488 <col:11> 'bool' lvalue ParmVar 0x55974c741a88 'branch' 'bool'
|   | | `-IntegerLiteral 0x55974c7494f8 <col:21> 'int' 0
|   | `-CompoundStmt 0x55974c74a0b8 <col:24, line:352:2>
|   |   |-IfStmt 0x55974c749c68 <line:346:6, line:349:44> has_else
|   |   | |-BinaryOperator 0x55974c7496d0 <line:346:10, col:28> 'bool' '>='
|   |   | | |-ImplicitCastExpr 0x55974c7496b8 <col:10, col:23> 'int':'int' <LValueToRValue>
|   |   | | | `-CXXOperatorCallExpr 0x55974c749660 <col:10, col:23> 'int':'int' lvalue
|   |   | | |   |-ImplicitCastExpr 0x55974c749648 <col:20, col:23> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   | | |   | `-DeclRefExpr 0x55974c7495c8 <col:20, col:23> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   | | |   |-MemberExpr 0x55974c749560 <col:10> 'Vector<int>':'Vector<int>' lvalue ->_pred_prev 0x55974c73fcc0
|   |   | | |   | `-CXXThisExpr 0x55974c749550 <col:10> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   | | |   `-ImplicitCastExpr 0x55974c7495b0 <col:21> 'int' <LValueToRValue>
|   |   | | |     `-DeclRefExpr 0x55974c749590 <col:21> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   | | `-IntegerLiteral 0x55974c749698 <col:28> 'int' 0
|   |   | |-BinaryOperator 0x55974c7499a0 <line:347:3, col:45> 'int':'int' lvalue '='
|   |   | | |-CXXOperatorCallExpr 0x55974c749868 <col:3, col:28> 'int':'int' lvalue
|   |   | | | |-ImplicitCastExpr 0x55974c749850 <col:13, col:28> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   | | | | `-DeclRefExpr 0x55974c749830 <col:13, col:28> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   | | | |-MemberExpr 0x55974c749700 <col:3> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |   | | | | `-CXXThisExpr 0x55974c7496f0 <col:3> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   | | | `-ImplicitCastExpr 0x55974c749818 <col:14, col:27> 'int':'int' <LValueToRValue>
|   |   | | |   `-CXXOperatorCallExpr 0x55974c7497e0 <col:14, col:27> 'int':'int' lvalue
|   |   | | |     |-ImplicitCastExpr 0x55974c7497c8 <col:24, col:27> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   | | |     | `-DeclRefExpr 0x55974c7497a8 <col:24, col:27> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   | | |     |-MemberExpr 0x55974c749740 <col:14> 'Vector<int>':'Vector<int>' lvalue ->_pred_prev 0x55974c73fcc0
|   |   | | |     | `-CXXThisExpr 0x55974c749730 <col:14> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   | | |     `-ImplicitCastExpr 0x55974c749790 <col:25> 'int' <LValueToRValue>
|   |   | | |       `-DeclRefExpr 0x55974c749770 <col:25> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   | | `-ImplicitCastExpr 0x55974c749988 <col:32, col:45> 'int':'int' <LValueToRValue>
|   |   | |   `-CXXOperatorCallExpr 0x55974c749950 <col:32, col:45> 'int':'int' lvalue
|   |   | |     |-ImplicitCastExpr 0x55974c749938 <col:42, col:45> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   | |     | `-DeclRefExpr 0x55974c749918 <col:42, col:45> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   | |     |-MemberExpr 0x55974c7498b0 <col:32> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |   | |     | `-CXXThisExpr 0x55974c7498a0 <col:32> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   | |     `-ImplicitCastExpr 0x55974c749900 <col:43> 'int' <LValueToRValue>
|   |   | |       `-DeclRefExpr 0x55974c7498e0 <col:43> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   | `-BinaryOperator 0x55974c749c48 <line:349:3, col:44> 'int':'int' lvalue '='
|   |   |   |-CXXOperatorCallExpr 0x55974c749b10 <col:3, col:27> 'int':'int' lvalue
|   |   |   | |-ImplicitCastExpr 0x55974c749af8 <col:14, col:27> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   |   | | `-DeclRefExpr 0x55974c749ad8 <col:14, col:27> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   |   | |-MemberExpr 0x55974c7499d0 <col:3> 'Vector<int>':'Vector<int>' lvalue ->_pred_first 0x55974c73faa0
|   |   |   | | `-CXXThisExpr 0x55974c7499c0 <col:3> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   |   | `-ImplicitCastExpr 0x55974c749ac0 <col:15, col:26> 'int32_t':'int' <LValueToRValue>
|   |   |   |   `-ArraySubscriptExpr 0x55974c749aa0 <col:15, col:26> 'int32_t':'int' lvalue
|   |   |   |     |-ImplicitCastExpr 0x55974c749a70 <col:15, col:18> 'int32_t *' <ArrayToPointerDecay>
|   |   |   |     | `-MemberExpr 0x55974c749a20 <col:15, col:18> 'int32_t [2]' lvalue .j 0x55974c3ce648
|   |   |   |     |   `-DeclRefExpr 0x55974c749a00 <col:15> 'Classification::Wordwise::Insn' lvalue Var 0x55974c749108 'in' 'Classification::Wordwise::Insn &'
|   |   |   |     `-ImplicitCastExpr 0x55974c749a88 <col:20> 'bool' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x55974c749a50 <col:20> 'bool' lvalue ParmVar 0x55974c741a88 'branch' 'bool'
|   |   |   `-ImplicitCastExpr 0x55974c749c30 <col:31, col:44> 'int':'int' <LValueToRValue>
|   |   |     `-CXXOperatorCallExpr 0x55974c749bf8 <col:31, col:44> 'int':'int' lvalue
|   |   |       |-ImplicitCastExpr 0x55974c749be0 <col:41, col:44> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x55974c749bc0 <col:41, col:44> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   |       |-MemberExpr 0x55974c749b58 <col:31> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |   |       | `-CXXThisExpr 0x55974c749b48 <col:31> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   |       `-ImplicitCastExpr 0x55974c749ba8 <col:42> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x55974c749b88 <col:42> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   `-IfStmt 0x55974c74a0a0 <line:350:6, line:351:45>
|   |     |-BinaryOperator 0x55974c749db0 <line:350:10, col:28> 'bool' '>='
|   |     | |-ImplicitCastExpr 0x55974c749d98 <col:10, col:23> 'int':'int' <LValueToRValue>
|   |     | | `-CXXOperatorCallExpr 0x55974c749d40 <col:10, col:23> 'int':'int' lvalue
|   |     | |   |-ImplicitCastExpr 0x55974c749d28 <col:20, col:23> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x55974c749d08 <col:20, col:23> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |     | |   |-MemberExpr 0x55974c749ca0 <col:10> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |     | |   | `-CXXThisExpr 0x55974c749c90 <col:10> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |     | |   `-ImplicitCastExpr 0x55974c749cf0 <col:21> 'int' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55974c749cd0 <col:21> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |     | `-IntegerLiteral 0x55974c749d78 <col:28> 'int' 0
|   |     `-BinaryOperator 0x55974c74a080 <line:351:3, col:45> 'int':'int' lvalue '='
|   |       |-CXXOperatorCallExpr 0x55974c749f48 <col:3, col:28> 'int':'int' lvalue
|   |       | |-ImplicitCastExpr 0x55974c749f30 <col:13, col:28> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x55974c749f10 <col:13, col:28> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |       | |-MemberExpr 0x55974c749de0 <col:3> 'Vector<int>':'Vector<int>' lvalue ->_pred_prev 0x55974c73fcc0
|   |       | | `-CXXThisExpr 0x55974c749dd0 <col:3> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |       | `-ImplicitCastExpr 0x55974c749ef8 <col:14, col:27> 'int':'int' <LValueToRValue>
|   |       |   `-CXXOperatorCallExpr 0x55974c749ec0 <col:14, col:27> 'int':'int' lvalue
|   |       |     |-ImplicitCastExpr 0x55974c749ea8 <col:24, col:27> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x55974c749e88 <col:24, col:27> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |       |     |-MemberExpr 0x55974c749e20 <col:14> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |       |     | `-CXXThisExpr 0x55974c749e10 <col:14> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |       |     `-ImplicitCastExpr 0x55974c749e70 <col:25> 'int' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55974c749e50 <col:25> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |       `-ImplicitCastExpr 0x55974c74a068 <col:32, col:45> 'int':'int' <LValueToRValue>
|   |         `-CXXOperatorCallExpr 0x55974c74a030 <col:32, col:45> 'int':'int' lvalue
|   |           |-ImplicitCastExpr 0x55974c74a018 <col:42, col:45> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |           | `-DeclRefExpr 0x55974c749ff8 <col:42, col:45> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |           |-MemberExpr 0x55974c749f90 <col:32> 'Vector<int>':'Vector<int>' lvalue ->_pred_prev 0x55974c73fcc0
|   |           | `-CXXThisExpr 0x55974c749f80 <col:32> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |           `-ImplicitCastExpr 0x55974c749fe0 <col:43> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x55974c749fc0 <col:43> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |-IfStmt 0x55974c74aea0 <line:353:2, line:364:2>
|   | |-BinaryOperator 0x55974c74a148 <line:353:6, col:17> 'bool' '>'
|   | | |-ImplicitCastExpr 0x55974c74a130 <col:6> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x55974c74a0f0 <col:6> 'int' lvalue ParmVar 0x55974c741b08 'to_state' 'int'
|   | | `-IntegerLiteral 0x55974c74a110 <col:17> 'int' 0
|   | `-CompoundStmt 0x55974c74ae60 <col:20, line:364:2>
|   |   |-DeclStmt 0x55974c74a3b8 <line:354:6, col:52>
|   |   | |-VarDecl 0x55974c74a180 <col:6, col:18> col:10 used prev 'int' cinit
|   |   | | `-UnaryOperator 0x55974c74a208 <col:17, col:18> 'int' prefix '-'
|   |   | |   `-IntegerLiteral 0x55974c74a1e8 <col:18> 'int' 1
|   |   | `-VarDecl 0x55974c74a238 <col:6, col:51> col:22 used pnext 'int *' cinit
|   |   |   `-UnaryOperator 0x55974c74a388 <col:30, col:51> 'int *' prefix '&' cannot overflow
|   |   |     `-CXXOperatorCallExpr 0x55974c74a350 <col:31, col:51> 'int':'int' lvalue
|   |   |       |-ImplicitCastExpr 0x55974c74a338 <col:42, col:51> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   |       | `-DeclRefExpr 0x55974c74a318 <col:42, col:51> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   |       |-MemberExpr 0x55974c74a2b0 <col:31> 'Vector<int>':'Vector<int>' lvalue ->_pred_first 0x55974c73faa0
|   |   |       | `-CXXThisExpr 0x55974c74a2a0 <col:31> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   |       `-ImplicitCastExpr 0x55974c74a300 <col:43> 'int' <LValueToRValue>
|   |   |         `-DeclRefExpr 0x55974c74a2e0 <col:43> 'int' lvalue ParmVar 0x55974c741b08 'to_state' 'int'
|   |   |-WhileStmt 0x55974c74a790 <line:355:6, line:358:6>
|   |   | |-BinaryOperator 0x55974c74a538 <line:355:13, col:37> 'bool' '&&'
|   |   | | |-BinaryOperator 0x55974c74a458 <col:13, col:23> 'bool' '>='
|   |   | | | |-ImplicitCastExpr 0x55974c74a440 <col:13, col:14> 'int' <LValueToRValue>
|   |   | | | | `-UnaryOperator 0x55974c74a408 <col:13, col:14> 'int' lvalue prefix '*' cannot overflow
|   |   | | | |   `-ImplicitCastExpr 0x55974c74a3f0 <col:14> 'int *' <LValueToRValue>
|   |   | | | |     `-DeclRefExpr 0x55974c74a3d0 <col:14> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   | | | `-IntegerLiteral 0x55974c74a420 <col:23> 'int' 0
|   |   | | `-BinaryOperator 0x55974c74a518 <col:28, col:37> 'bool' '<'
|   |   | |   |-ImplicitCastExpr 0x55974c74a4e8 <col:28, col:29> 'int' <LValueToRValue>
|   |   | |   | `-UnaryOperator 0x55974c74a4b0 <col:28, col:29> 'int' lvalue prefix '*' cannot overflow
|   |   | |   |   `-ImplicitCastExpr 0x55974c74a498 <col:29> 'int *' <LValueToRValue>
|   |   | |   |     `-DeclRefExpr 0x55974c74a478 <col:29> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   | |   `-ImplicitCastExpr 0x55974c74a500 <col:37> 'int' <LValueToRValue>
|   |   | |     `-DeclRefExpr 0x55974c74a4c8 <col:37> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   | `-CompoundStmt 0x55974c74a770 <col:41, line:358:6>
|   |   |   |-BinaryOperator 0x55974c74a5e0 <line:356:3, col:11> 'int' lvalue '='
|   |   |   | |-DeclRefExpr 0x55974c74a558 <col:3> 'int' lvalue Var 0x55974c74a180 'prev' 'int'
|   |   |   | `-ImplicitCastExpr 0x55974c74a5c8 <col:10, col:11> 'int' <LValueToRValue>
|   |   |   |   `-UnaryOperator 0x55974c74a5b0 <col:10, col:11> 'int' lvalue prefix '*' cannot overflow
|   |   |   |     `-ImplicitCastExpr 0x55974c74a598 <col:11> 'int *' <LValueToRValue>
|   |   |   |       `-DeclRefExpr 0x55974c74a578 <col:11> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   |   `-BinaryOperator 0x55974c74a750 <line:357:3, col:29> 'int *' lvalue '='
|   |   |     |-DeclRefExpr 0x55974c74a600 <col:3> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   |     `-UnaryOperator 0x55974c74a738 <col:11, col:29> 'int *' prefix '&' cannot overflow
|   |   |       `-CXXOperatorCallExpr 0x55974c74a700 <col:12, col:29> 'int':'int' lvalue
|   |   |         |-ImplicitCastExpr 0x55974c74a6e8 <col:22, col:29> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   |         | `-DeclRefExpr 0x55974c74a6c8 <col:22, col:29> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   |         |-MemberExpr 0x55974c74a630 <col:12> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |   |         | `-CXXThisExpr 0x55974c74a620 <col:12> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   |         `-ImplicitCastExpr 0x55974c74a6b0 <col:23, col:24> 'int' <LValueToRValue>
|   |   |           `-UnaryOperator 0x55974c74a698 <col:23, col:24> 'int' lvalue prefix '*' cannot overflow
|   |   |             `-ImplicitCastExpr 0x55974c74a680 <col:24> 'int *' <LValueToRValue>
|   |   |               `-DeclRefExpr 0x55974c74a660 <col:24> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   |-BinaryOperator 0x55974c74a8c8 <line:359:6, col:23> 'int':'int' lvalue '='
|   |   | |-CXXOperatorCallExpr 0x55974c74a858 <col:6, col:19> 'int':'int' lvalue
|   |   | | |-ImplicitCastExpr 0x55974c74a840 <col:16, col:19> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x55974c74a820 <col:16, col:19> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   | | |-MemberExpr 0x55974c74a7b8 <col:6> 'Vector<int>':'Vector<int>' lvalue ->_pred_prev 0x55974c73fcc0
|   |   | | | `-CXXThisExpr 0x55974c74a7a8 <col:6> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   | | `-ImplicitCastExpr 0x55974c74a808 <col:17> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55974c74a7e8 <col:17> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   | `-ImplicitCastExpr 0x55974c74a8b0 <col:23> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55974c74a890 <col:23> 'int' lvalue Var 0x55974c74a180 'prev' 'int'
|   |   |-BinaryOperator 0x55974c74aa38 <line:360:6, col:24> 'int':'int' lvalue '='
|   |   | |-CXXOperatorCallExpr 0x55974c74a998 <col:6, col:19> 'int':'int' lvalue
|   |   | | |-ImplicitCastExpr 0x55974c74a980 <col:16, col:19> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |   | | | `-DeclRefExpr 0x55974c74a960 <col:16, col:19> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |   | | |-MemberExpr 0x55974c74a8f8 <col:6> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |   | | | `-CXXThisExpr 0x55974c74a8e8 <col:6> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |   | | `-ImplicitCastExpr 0x55974c74a948 <col:17> 'int' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55974c74a928 <col:17> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   | `-ImplicitCastExpr 0x55974c74aa20 <col:23, col:24> 'int' <LValueToRValue>
|   |   |   `-UnaryOperator 0x55974c74aa08 <col:23, col:24> 'int' lvalue prefix '*' cannot overflow
|   |   |     `-ImplicitCastExpr 0x55974c74a9f0 <col:24> 'int *' <LValueToRValue>
|   |   |       `-DeclRefExpr 0x55974c74a9d0 <col:24> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   |-BinaryOperator 0x55974c74aae0 <line:361:6, col:15> 'int' lvalue '='
|   |   | |-UnaryOperator 0x55974c74aa90 <col:6, col:7> 'int' lvalue prefix '*' cannot overflow
|   |   | | `-ImplicitCastExpr 0x55974c74aa78 <col:7> 'int *' <LValueToRValue>
|   |   | |   `-DeclRefExpr 0x55974c74aa58 <col:7> 'int *' lvalue Var 0x55974c74a238 'pnext' 'int *'
|   |   | `-ImplicitCastExpr 0x55974c74aac8 <col:15> 'int' <LValueToRValue>
|   |   |   `-DeclRefExpr 0x55974c74aaa8 <col:15> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |   `-IfStmt 0x55974c74ae48 <line:362:6, line:363:32>
|   |     |-BinaryOperator 0x55974c74ac20 <line:362:10, col:28> 'bool' '>='
|   |     | |-ImplicitCastExpr 0x55974c74ac08 <col:10, col:23> 'int':'int' <LValueToRValue>
|   |     | | `-CXXOperatorCallExpr 0x55974c74abb0 <col:10, col:23> 'int':'int' lvalue
|   |     | |   |-ImplicitCastExpr 0x55974c74ab98 <col:20, col:23> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |     | |   | `-DeclRefExpr 0x55974c74ab78 <col:20, col:23> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |     | |   |-MemberExpr 0x55974c74ab10 <col:10> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |     | |   | `-CXXThisExpr 0x55974c74ab00 <col:10> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |     | |   `-ImplicitCastExpr 0x55974c74ab60 <col:21> 'int' <LValueToRValue>
|   |     | |     `-DeclRefExpr 0x55974c74ab40 <col:21> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |     | `-IntegerLiteral 0x55974c74abe8 <col:28> 'int' 0
|   |     `-BinaryOperator 0x55974c74ae28 <line:363:3, col:32> 'int':'int' lvalue '='
|   |       |-CXXOperatorCallExpr 0x55974c74adb8 <col:3, col:28> 'int':'int' lvalue
|   |       | |-ImplicitCastExpr 0x55974c74ada0 <col:13, col:28> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |       | | `-DeclRefExpr 0x55974c74ad80 <col:13, col:28> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |       | |-MemberExpr 0x55974c74ac50 <col:3> 'Vector<int>':'Vector<int>' lvalue ->_pred_prev 0x55974c73fcc0
|   |       | | `-CXXThisExpr 0x55974c74ac40 <col:3> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |       | `-ImplicitCastExpr 0x55974c74ad68 <col:14, col:27> 'int':'int' <LValueToRValue>
|   |       |   `-CXXOperatorCallExpr 0x55974c74ad30 <col:14, col:27> 'int':'int' lvalue
|   |       |     |-ImplicitCastExpr 0x55974c74ad18 <col:24, col:27> 'int &(*)(Vector::size_type)' <FunctionToPointerDecay>
|   |       |     | `-DeclRefExpr 0x55974c74acf8 <col:24, col:27> 'int &(Vector::size_type)' lvalue CXXMethod 0x55974c73ccb8 'operator[]' 'int &(Vector::size_type)'
|   |       |     |-MemberExpr 0x55974c74ac90 <col:14> 'Vector<int>':'Vector<int>' lvalue ->_pred_next 0x55974c73fbb0
|   |       |     | `-CXXThisExpr 0x55974c74ac80 <col:14> 'Classification::Wordwise::DominatorOptimizer *' implicit this
|   |       |     `-ImplicitCastExpr 0x55974c74ace0 <col:25> 'int' <LValueToRValue>
|   |       |       `-DeclRefExpr 0x55974c74acc0 <col:25> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   |       `-ImplicitCastExpr 0x55974c74ae10 <col:32> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x55974c74adf0 <col:32> 'int' lvalue Var 0x55974c7492b0 'br' 'int'
|   `-BinaryOperator 0x55974c74afb0 <line:366:2, col:17> 'int32_t':'int' lvalue '='
|     |-ArraySubscriptExpr 0x55974c74af58 <col:2, col:13> 'int32_t':'int' lvalue
|     | |-ImplicitCastExpr 0x55974c74af28 <col:2, col:5> 'int32_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55974c74aed8 <col:2, col:5> 'int32_t [2]' lvalue .j 0x55974c3ce648
|     | |   `-DeclRefExpr 0x55974c74aeb8 <col:2> 'Classification::Wordwise::Insn' lvalue Var 0x55974c749108 'in' 'Classification::Wordwise::Insn &'
|     | `-ImplicitCastExpr 0x55974c74af40 <col:7> 'bool' <LValueToRValue>
|     |   `-DeclRefExpr 0x55974c74af08 <col:7> 'bool' lvalue ParmVar 0x55974c741a88 'branch' 'bool'
|     `-ImplicitCastExpr 0x55974c74af98 <col:17> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55974c74af78 <col:17> 'int' lvalue ParmVar 0x55974c741b08 'to_state' 'int'
|-CXXConstructorDecl 0x55974c741cc8 <line:279:7> col:7 implicit DominatorOptimizer 'void (const Classification::Wordwise::DominatorOptimizer &)' inline default noexcept-unevaluated 0x55974c741cc8
| `-ParmVarDecl 0x55974c741dd8 <col:7> col:7 'const Classification::Wordwise::DominatorOptimizer &'
|-CXXConstructorDecl 0x55974c741e78 <col:7> col:7 implicit DominatorOptimizer 'void (Classification::Wordwise::DominatorOptimizer &&)' inline default noexcept-unevaluated 0x55974c741e78
| `-ParmVarDecl 0x55974c741f88 <col:7> col:7 'Classification::Wordwise::DominatorOptimizer &&'
|-CXXMethodDecl 0x55974c742028 <col:7> col:7 implicit operator= 'Classification::Wordwise::DominatorOptimizer &(const Classification::Wordwise::DominatorOptimizer &)' inline default noexcept-unevaluated 0x55974c742028
| `-ParmVarDecl 0x55974c742138 <col:7> col:7 'const Classification::Wordwise::DominatorOptimizer &'
|-CXXMethodDecl 0x55974c7421a8 <col:7> col:7 implicit operator= 'Classification::Wordwise::DominatorOptimizer &(Classification::Wordwise::DominatorOptimizer &&)' inline default noexcept-unevaluated 0x55974c7421a8
| `-ParmVarDecl 0x55974c7422b8 <col:7> col:7 'Classification::Wordwise::DominatorOptimizer &&'
`-CXXDestructorDecl 0x55974c7f1a00 <col:7> col:7 implicit used ~DominatorOptimizer 'void () noexcept' inline default
  `-CompoundStmt 0x55974c7f1ae0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%"class.Classification::Wordwise::DominatorOptimizer" = type { %"class.Classification::Wordwise::Program"*, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1 }
  NonVirtualBaseLLVMType:%"class.Classification::Wordwise::DominatorOptimizer" = type { %"class.Classification::Wordwise::Program"*, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1, %class.Vector.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct _IO_FILE
         0 |   int _flags
         8 |   char * _IO_read_ptr
        16 |   char * _IO_read_end
        24 |   char * _IO_read_base
        32 |   char * _IO_write_base
        40 |   char * _IO_write_ptr
        48 |   char * _IO_write_end
        56 |   char * _IO_buf_base
        64 |   char * _IO_buf_end
        72 |   char * _IO_save_base
        80 |   char * _IO_backup_base
        88 |   char * _IO_save_end
        96 |   struct _IO_marker * _markers
       104 |   struct _IO_FILE * _chain
       112 |   int _fileno
       116 |   int _flags2
       120 |   __off_t _old_offset
       128 |   unsigned short _cur_column
       130 |   signed char _vtable_offset
       131 |   char [1] _shortbuf
       136 |   _IO_lock_t * _lock
       144 |   __off64_t _offset
       152 |   struct _IO_codecvt * _codecvt
       160 |   struct _IO_wide_data * _wide_data
       168 |   struct _IO_FILE * _freeres_list
       176 |   void * _freeres_buf
       184 |   size_t __pad5
       192 |   int _mode
       196 |   char [20] _unused2
           | [sizeof=216, dsize=216, align=8,
           |  nvsize=216, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c4291d8 prev 0x55974c428ed0 </usr/include/bits/types/struct_FILE.h:49:1, line:99:1> line:49:8 struct _IO_FILE definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55974c4292d0 <col:1, col:8> col:8 implicit struct _IO_FILE
|-FieldDecl 0x55974c429378 <line:51:3, col:7> col:7 _flags 'int'
|-FieldDecl 0x55974c4293e0 <line:54:3, col:9> col:9 _IO_read_ptr 'char *'
|-FieldDecl 0x55974c429448 <line:55:3, col:9> col:9 _IO_read_end 'char *'
|-FieldDecl 0x55974c4294b0 <line:56:3, col:9> col:9 _IO_read_base 'char *'
|-FieldDecl 0x55974c429518 <line:57:3, col:9> col:9 _IO_write_base 'char *'
|-FieldDecl 0x55974c429580 <line:58:3, col:9> col:9 _IO_write_ptr 'char *'
|-FieldDecl 0x55974c4295e8 <line:59:3, col:9> col:9 _IO_write_end 'char *'
|-FieldDecl 0x55974c429650 <line:60:3, col:9> col:9 _IO_buf_base 'char *'
|-FieldDecl 0x55974c4296b8 <line:61:3, col:9> col:9 _IO_buf_end 'char *'
|-FieldDecl 0x55974c429720 <line:64:3, col:9> col:9 _IO_save_base 'char *'
|-FieldDecl 0x55974c429788 <line:65:3, col:9> col:9 _IO_backup_base 'char *'
|-FieldDecl 0x55974c4297f0 <line:66:3, col:9> col:9 _IO_save_end 'char *'
|-FieldDecl 0x55974c4298f0 <line:68:3, col:22> col:22 _markers 'struct _IO_marker *'
|-FieldDecl 0x55974c4299c0 <line:70:3, col:20> col:20 _chain 'struct _IO_FILE *'
|-FieldDecl 0x55974c429a28 <line:72:3, col:7> col:7 _fileno 'int'
|-FieldDecl 0x55974c429a90 <line:73:3, col:7> col:7 _flags2 'int'
|-FieldDecl 0x55974c429af0 <line:74:3, col:11> col:11 _old_offset '__off_t':'long'
|-FieldDecl 0x55974c429b58 <line:77:3, col:18> col:18 _cur_column 'unsigned short'
|-FieldDecl 0x55974c429bc0 <line:78:3, col:15> col:15 _vtable_offset 'signed char'
|-FieldDecl 0x55974c429ca8 <line:79:3, col:19> col:8 _shortbuf 'char [1]'
|-FieldDecl 0x55974c429d58 <line:81:3, col:15> col:15 _lock '_IO_lock_t *'
|-FieldDecl 0x55974c429db8 <line:89:3, col:13> col:13 _offset '__off64_t':'long'
|-FieldDecl 0x55974c429ec0 <line:91:3, col:23> col:23 _codecvt 'struct _IO_codecvt *'
|-FieldDecl 0x55974c429fc0 <line:92:3, col:25> col:25 _wide_data 'struct _IO_wide_data *'
|-FieldDecl 0x55974c42a038 <line:93:3, col:20> col:20 _freeres_list 'struct _IO_FILE *'
|-FieldDecl 0x55974c42a0a0 <line:94:3, col:9> col:9 _freeres_buf 'void *'
|-FieldDecl 0x55974c42a100 <line:95:3, col:10> col:10 __pad5 'size_t':'unsigned long'
|-FieldDecl 0x55974c42a168 <line:96:3, col:7> col:7 _mode 'int'
`-FieldDecl 0x55974c42a388 <line:98:3, col:74> col:8 _unused2 'char [20]'

Layout: <CGRecordLayout
  LLVMType:%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
  NonVirtualBaseLLVMType:%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c74c290 prev 0x55974c3cd550 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55974c74c388 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55974c74c418 <col:22, col:28> col:22 public
|-EnumDecl 0x55974c74c440 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55974c74c558 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c538 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55974c74c520 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55974c74c500 <col:14> 'int' 999
| |-EnumConstantDecl 0x55974c74c600 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c5e0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55974c74c5c8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55974c74c5a8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55974c74c690 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c670 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55974c74c650 <col:17> 'int' 0
| |-EnumConstantDecl 0x55974c74c720 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c700 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55974c74c6e0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55974c74c7b0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c790 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55974c74c770 <col:16> 'int' 2
| |-EnumConstantDecl 0x55974c74c840 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c820 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55974c74c800 <col:13> 'int' 3
| |-EnumConstantDecl 0x55974c74c8d0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c8b0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55974c74c890 <col:15> 'int' 4
| |-EnumConstantDecl 0x55974c74c960 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c940 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55974c74c920 <col:14> 'int' 5
| |-EnumConstantDecl 0x55974c74c9f0 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55974c74c9d0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55974c74c9b0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55974c74ca80 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55974c74ca60 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55974c74ca40 <col:13> 'int' 7
|-VarDecl 0x55974c74cb48 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55974c74cbd0 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55974c74cc58 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55974c74cce0 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55974c74cd68 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55974c74cdf0 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55974c74ce78 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55974c74cf00 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55974c74cf88 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55974c74d010 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55974c74d098 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55974c74d198 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55974c756608 '_nerrors' 'int'
| | `-IntegerLiteral 0x55974c756d98 <line:128:13> 'int' 0
| `-CompoundStmt 0x55974c756e08 <col:16, line:129:5>
|-CXXDestructorDecl 0x55974c74d288 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55974c756e18 <col:29, line:132:5>
|-CXXMethodDecl 0x55974c74d448 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55974c74d380 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55974c74d510 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55974c74d5f8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55974c756e70 <col:44, line:161:5>
|   `-ReturnStmt 0x55974c756e60 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55974c756e48 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55974c756e28 <col:9> 'ErrorHandler *' lvalue Var 0x55974c756668 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55974c74d768 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55974c74d6a8 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55974c74d830 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55974c756ed0 <col:43, line:173:5>
|   `-ReturnStmt 0x55974c756ec0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55974c756ea8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55974c756e88 <col:9> 'ErrorHandler *' lvalue Var 0x55974c7566e0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55974c74d8e8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55974c74d968 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55974c74da78 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55974c74d9e8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55974c74dbc8 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55974c74db38 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55974c74dd20 <line:193:5, col:37> col:9 used warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55974c74dc88 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55974c74de78 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x55974c74dde0 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55974c74dfd0 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55974c74df38 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55974c74e1e0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55974c74e088 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55974c74e108 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55974c74e3b8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55974c74e2a0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55974c74e320 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55974c74e5d8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55974c74e478 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55974c74e4f8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55974c74e7b8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55974c74e698 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55974c74e718 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55974c74e998 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55974c74e878 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55974c74e8f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55974c74eb20 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55974c74ea58 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55974c74ecf0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55974c74ebd8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55974c74ec50 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55974c757128 <col:57, line:234:5>
|   `-ReturnStmt 0x55974c757118 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55974c757100 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55974c7570a8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55974c757078 <col:9> '<bound member function type>' ->xmessage 0x55974c74eb20
|         | `-CXXThisExpr 0x55974c757068 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55974c7570e8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55974c7570d0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55974c757048 <col:18, col:40> 'String' (CXXTemporary 0x55974c757048)
|               `-CallExpr 0x55974c757010 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55974c756ff8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55974c756f70 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55974c754df8 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55974c756f90 <col:31> 'const String' lvalue ParmVar 0x55974c74ec50 'str' 'const String &'
|                 `-DeclRefExpr 0x55974c756fb0 <col:36> 'const String' lvalue ParmVar 0x55974c74ebd8 'anno' 'const String &'
|-CXXMethodDecl 0x55974c74f030 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55974c74edb0 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55974c74ee30 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55974c74ef00 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55974c7573b8 <col:68, line:243:5>
|   `-ReturnStmt 0x55974c7573a8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55974c757390 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55974c757330 <col:9, col:41> 'int'
|         |-MemberExpr 0x55974c757300 <col:9> '<bound member function type>' ->xmessage 0x55974c74ecf0
|         | `-CXXThisExpr 0x55974c7572f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55974c7571c8 <col:18> 'const String' lvalue ParmVar 0x55974c74edb0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55974c757378 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55974c757360 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55974c7572d0 <col:24, col:40> 'String' (CXXTemporary 0x55974c7572d0)
|               `-CXXMemberCallExpr 0x55974c757268 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55974c7571f8 <col:24> '<bound member function type>' ->vformat 0x55974c754290
|                 | `-CXXThisExpr 0x55974c7571e8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55974c757298 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55974c757228 <col:32> 'const char *' lvalue ParmVar 0x55974c74ee30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55974c7572b0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55974c757248 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55974c74ef00 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55974c74f2d0 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55974c74f0f8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55974c74f170 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55974c74f1e8 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55974c7576f8 <col:23, line:254:5>
|   `-ReturnStmt 0x55974c7576e8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55974c7576d0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55974c757670 <col:9, col:71> 'int'
|         |-MemberExpr 0x55974c757640 <col:9> '<bound member function type>' ->xmessage 0x55974c74ecf0
|         | `-CXXThisExpr 0x55974c757630 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55974c7576b8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55974c7576a0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55974c7575f0 <col:18, col:65> 'String' (CXXTemporary 0x55974c7575f0)
|         |     `-CallExpr 0x55974c757588 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55974c757570 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55974c757458 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55974c754df8 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55974c757478 <col:31> 'const String' lvalue ParmVar 0x55974c74f170 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55974c7575d0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55974c7575b8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55974c757550 <col:37, col:64> 'String' (CXXTemporary 0x55974c757550)
|         |             `-CallExpr 0x55974c757520 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55974c757508 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55974c757498 <col:37> 'String (const String &)' lvalue CXXMethod 0x55974c755448 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55974c7574b8 <col:56> 'const String' lvalue ParmVar 0x55974c74f0f8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55974c757610 <col:68> 'const String' lvalue ParmVar 0x55974c74f1e8 'str' 'const String &'
|-CXXMethodDecl 0x55974c74f650 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55974c74f398 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55974c74f410 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55974c74f490 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55974c74f508 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55974c7579b0 <col:34, line:267:5>
|   `-ReturnStmt 0x55974c7579a0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55974c757988 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55974c757920 <col:9, col:51> 'int'
|         |-MemberExpr 0x55974c7578f0 <col:9> '<bound member function type>' ->xmessage 0x55974c74f2d0
|         | `-CXXThisExpr 0x55974c7578e0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55974c757798 <col:18> 'const String' lvalue ParmVar 0x55974c74f398 'landmark' 'const String &'
|         |-DeclRefExpr 0x55974c7577b8 <col:28> 'const String' lvalue ParmVar 0x55974c74f410 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55974c757970 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55974c757958 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55974c7578c0 <col:34, col:50> 'String' (CXXTemporary 0x55974c7578c0)
|               `-CXXMemberCallExpr 0x55974c757858 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55974c7577e8 <col:34> '<bound member function type>' ->vformat 0x55974c754290
|                 | `-CXXThisExpr 0x55974c7577d8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55974c757888 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55974c757818 <col:42> 'const char *' lvalue ParmVar 0x55974c74f490 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55974c7578a0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55974c757838 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55974c74f508 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55974c74f760 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55974c757a30 <col:25, line:288:5>
|   `-ReturnStmt 0x55974c757a20 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55974c757a08 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55974c7579d8 <col:9> 'const int' lvalue ->_nerrors 0x55974c756608
|         `-CXXThisExpr 0x55974c7579c8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55974c74f970 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55974c74f818 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55974c74f898 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55974c74fc58 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55974c74fa38 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55974c74fab8 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55974c74fb30 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55974c74fdf0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55974c74fd28 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55974c750038 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55974c74feb0 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55974c74ff28 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55974c757c90 <col:58, line:357:5>
|   `-ReturnStmt 0x55974c757c80 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55974c757c68 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55974c757c38 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55974c757c20 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55974c757c00 <col:9, col:29> 'String' (CXXTemporary 0x55974c757c00)
|             `-CallExpr 0x55974c757b90 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55974c757b78 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55974c757af8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55974c74fc58 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55974c757a98 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55974c757bc8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55974c757ab8 <col:21> 'const char *' lvalue ParmVar 0x55974c74feb0 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55974c757be0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55974c757ad8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55974c74ff28 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55974c754290 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55974c754180 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55974c7541f8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55974c7543e8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55974c754358 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55974c754568 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55974c7544a0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55974c754800 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55974c754620 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55974c7546a0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55974c754718 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55974c754960 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55974c7548d0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55974c757da8 <col:37, line:441:5>
|   `-IfStmt 0x55974c757d90 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55974c757d18 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55974c757ce8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55974c757ca8 <col:6> 'int' lvalue ParmVar 0x55974c7548d0 'level' 'int'
|     | `-ImplicitCastExpr 0x55974c757d00 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55974c757cc8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55974c74c840 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55974c757d78 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55974c757d48 <col:8> 'int' lvalue ->_nerrors 0x55974c756608
|         `-CXXThisExpr 0x55974c757d38 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55974c754a28 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55974c757e40 <col:26, line:448:5>
|   `-BinaryOperator 0x55974c757e20 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55974c757dd0 <col:2> 'int' lvalue ->_nerrors 0x55974c756608
|     | `-CXXThisExpr 0x55974c757dc0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55974c757e00 <col:13> 'int' 0
|-CXXMethodDecl 0x55974c754bf0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55974c754ae0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55974c754b58 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55974c754df8 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55974c754cb0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55974c754d28 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55974c7550a8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55974c754eb8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55974c754f38 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55974c754fb8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55974c755160 <col:59> 0 0
|-CXXMethodDecl 0x55974c7552f8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55974c7551d8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55974c755258 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55974c7584b0 <col:70, line:534:5>
|   |-DeclStmt 0x55974c757fb0 <line:528:2, col:20>
|   | |-VarDecl 0x55974c757e68 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55974c757ed0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55974c757f08 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55974c757f70 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55974c758080 <line:529:2, col:23>
|   | `-VarDecl 0x55974c757fe0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55974c758068 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55974c758048 <col:18> 'const char *' lvalue ParmVar 0x55974c7551d8 'begin' 'const char *'
|   |-DoStmt 0x55974c758448 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55974c758378 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55974c758360 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55974c758340 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55974c758098 <col:6> 'const char *' lvalue Var 0x55974c757fe0 'x' 'const char *'
|   | |     `-CallExpr 0x55974c758290 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55974c758278 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55974c758230 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55974c756ae0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55974c7582f8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55974c7582e0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55974c758150 <col:20, col:27> 'String' (CXXTemporary 0x55974c758150)
|   | |       |     `-CXXTemporaryObjectExpr 0x55974c758118 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55974c758310 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55974c758170 <col:30> 'const char *' lvalue Var 0x55974c757fe0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55974c758328 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55974c758190 <col:33> 'const char *' lvalue ParmVar 0x55974c755258 'end' 'const char *'
|   | |       |-UnaryOperator 0x55974c7581d0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55974c7581b0 <col:39> 'String' lvalue Var 0x55974c757e68 'name' 'String'
|   | |       |-UnaryOperator 0x55974c758208 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55974c7581e8 <col:46> 'String' lvalue Var 0x55974c757f08 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55974c758220 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55974c758430 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55974c758418 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55974c7583f8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55974c7583c8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55974c3f9c48
|   |         `-ImplicitCastExpr 0x55974c7583b0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55974c758390 <col:11> 'String' lvalue Var 0x55974c757e68 'name' 'String'
|   `-ReturnStmt 0x55974c7584a0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55974c758488 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55974c758468 <col:9> 'const char *' lvalue Var 0x55974c757fe0 'x' 'const char *'
|-CXXMethodDecl 0x55974c755448 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55974c7553b8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55974c758ab8 <col:55, line:550:5>
|   `-IfStmt 0x55974c758a90 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55974c7586f0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55974c7586d8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55974c7586c0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55974c7586a0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55974c758670 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55974c3f9c48
|     | |       `-DeclRefExpr 0x55974c758510 <col:6> 'const String' lvalue ParmVar 0x55974c7553b8 'x' 'const String &'
|     | `-BinaryOperator 0x55974c758650 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55974c758620 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55974c7585d0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55974c7585b8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55974c758570 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55974c414bd0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55974c758530 <col:11> 'const String' lvalue ParmVar 0x55974c7553b8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55974c758550 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55974c758638 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55974c758608 <col:19> 'char' 123
|     |-ReturnStmt 0x55974c758760 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55974c758730 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55974c758710 <col:13> 'const String' lvalue ParmVar 0x55974c7553b8 'x' 'const String &'
|     `-IfStmt 0x55974c758a68 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55974c7587f8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55974c7587e0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55974c7587c0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55974c758790 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55974c3f9c48
|       |       `-DeclRefExpr 0x55974c758770 <col:11> 'const String' lvalue ParmVar 0x55974c7553b8 'x' 'const String &'
|       |-ReturnStmt 0x55974c758980 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55974c758968 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55974c758938 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55974c758920 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55974c758900 <col:13, col:29> 'String' (CXXTemporary 0x55974c758900)
|       |         `-CallExpr 0x55974c7588b0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55974c758898 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55974c758810 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55974c754bf0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55974c7588e0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55974c758830 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55974c758850 <col:28> 'const String' lvalue ParmVar 0x55974c7553b8 'x' 'const String &'
|       `-ReturnStmt 0x55974c758a58 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55974c758a40 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55974c758a10 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55974c7589f8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55974c7589d8 <col:13, col:20> 'String' (CXXTemporary 0x55974c7589d8)
|                 `-CXXTemporaryObjectExpr 0x55974c7589a0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55974c755648 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55974c755500 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55974c755578 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c756d88 <col:71> 'bool' false
|-CXXRecordDecl 0x55974c7556f8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55974c7559f8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55974c755990 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55974c755930 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55974c7558f0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55974c3f5f30 'String'
|       | `-CXXRecord 0x55974c3f5ea0 'String'
|       |-BuiltinType 0x55974c1bb3b0 'int'
|       `-DecayedType 0x55974c74eed0 '__va_list_tag *' sugar
|         |-TypedefType 0x55974c74eea0 'va_list' sugar
|         | |-Typedef 0x55974c42cbe0 'va_list'
|         | `-TypedefType 0x55974c42cb90 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55974c427f68 '__gnuc_va_list'
|         |   `-TypedefType 0x55974c427ed0 '__builtin_va_list' sugar
|         |     |-Typedef 0x55974c1fcc18 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55974c1fcbc0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55974c1bc100 '__va_list_tag'
|         |         `-CXXRecord 0x55974c1bc068 '__va_list_tag'
|         `-PointerType 0x55974c432760 '__va_list_tag *'
|           `-RecordType 0x55974c1bc100 '__va_list_tag'
|             `-CXXRecord 0x55974c1bc068 '__va_list_tag'
|-EnumDecl 0x55974c755a50 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55974c755b50 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c7560b0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755b30 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55974c755b10 <col:16> 'int' 1
| |-EnumConstantDecl 0x55974c755be0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c7560c8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755bc0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55974c755ba0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55974c755c70 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c7560e0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755c50 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55974c755c30 <col:22> 'int' 4
| |-EnumConstantDecl 0x55974c755d00 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c7560f8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755ce0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55974c755cc0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55974c755d90 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c756110 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755d70 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55974c755d50 <col:22> 'int' 16
| |-EnumConstantDecl 0x55974c755e20 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c756128 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755e00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55974c755de0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55974c755eb0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c756140 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755e90 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55974c755e70 <col:17> 'int' 64
| |-EnumConstantDecl 0x55974c755f40 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c756158 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755f20 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55974c755f00 <col:14> 'int' 128
| |-EnumConstantDecl 0x55974c755fd0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55974c756170 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c755fb0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55974c755f90 <col:16> 'int' 256
| `-EnumConstantDecl 0x55974c756060 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55974c756188 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c756040 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55974c756020 <col:12> 'int' 1024
|-CXXMethodDecl 0x55974c756398 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55974c7561b0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55974c756250 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55974c756520 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55974c756458 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55974c7565c8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55974c756608 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55974c756668 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55974c7566e0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55974c756ae0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55974c756758 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55974c7567d8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55974c756858 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55974c7568d0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55974c756948 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55974c7569c0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55974c756c08 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55974c756c08
| `-ParmVarDecl 0x55974c756d18 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55974c758e18 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55974c758e18
  `-ParmVarDecl 0x55974c758f28 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Vector<unsigned int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Classification::Wordwise::CompressedProgram
         0 |   class Vector<unsigned int> _zprog
         0 |     class vector_memory<class sized_array_memory<4> > vm_
         0 |       vector_memory<class sized_array_memory<4> >::type * l_
         8 |       vector_memory::size_type n_
        12 |       vector_memory::size_type capacity_
        16 |   int _output_everything
        20 |   unsigned int _safe_length
        24 |   unsigned int _align_offset
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c728960 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55974c728b68 prev 0x55974c728960 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55974c729cb0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<unsigned int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55974c729c60 'typename array_memory<unsigned int>::type' sugar
|   `-TypedefType 0x55974c729c40 'conditional<true, sized_array_memory<4>, typed_array_memory<unsigned int> >::type' sugar
|     |-Typedef 0x55974c729af0 'type'
|     `-SubstTemplateTypeParmType 0x55974c729910 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55974c4c3570 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c4c3518 'T'
|       `-RecordType 0x55974c729460 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55974c729378 'sized_array_memory'
|-FieldDecl 0x55974c72d900 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<unsigned int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55974c72d950 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55974c72d988 <line:118:5, col:15> col:15 value_type 'unsigned int':'unsigned int'
| `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|   |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|   `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72da18 <line:119:5, col:16> col:16 reference 'unsigned int &'
| `-LValueReferenceType 0x55974c72d9e0 'unsigned int &'
|   `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72dad8 <line:120:5, col:22> col:22 const_reference 'const unsigned int &'
| `-LValueReferenceType 0x55974c72daa0 'const unsigned int &'
|   `-QualType 0x55974c728c01 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72db68 <line:121:5, col:16> col:16 pointer 'unsigned int *'
| `-PointerType 0x55974c72db30 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72dbf8 <line:122:5, col:22> col:22 const_pointer 'const unsigned int *'
| `-PointerType 0x55974c72dbc0 'const unsigned int *'
|   `-QualType 0x55974c728c01 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72e7e0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<unsigned int>::type':'unsigned int'
| `-ElaboratedType 0x55974c72e790 'typename fast_argument<unsigned int>::type' sugar
|   `-TypedefType 0x55974c72e770 'fast_argument<unsigned int, false>::type' sugar
|     |-Typedef 0x55974c72e700 'type'
|     `-SubstTemplateTypeParmType 0x55974c72e4c0 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55974c4cd0b0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c4cd060 'T'
|       `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72e848 <line:126:5, col:22> col:22 const_access_type 'const unsigned int &'
| `-LValueReferenceType 0x55974c72daa0 'const unsigned int &'
|   `-QualType 0x55974c728c01 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72e8a0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55974c1bb3b0 'int'
|-TypedefDecl 0x55974c72e908 <line:130:5, col:16> col:16 iterator 'unsigned int *'
| `-PointerType 0x55974c72db30 'unsigned int *'
|   `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|     |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|     `-BuiltinType 0x55974c1bb450 'unsigned int'
|-TypedefDecl 0x55974c72e970 <line:131:5, col:22> col:22 const_iterator 'const unsigned int *'
| `-PointerType 0x55974c72dbc0 'const unsigned int *'
|   `-QualType 0x55974c728c01 'const unsigned int' const
|     `-SubstTemplateTypeParmType 0x55974c728c00 'unsigned int' sugar
|       |-TemplateTypeParmType 0x55974c6f8010 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55974c6f7fb8 'T'
|       `-BuiltinType 0x55974c1bb450 'unsigned int'
|-EnumDecl 0x55974c72e9c8 <line:134:5> col:5
| `-EnumConstantDecl 0x55974c72eac0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<unsigned int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55974c72eaa0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55974c6f9048 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55974c6f9020 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55974c6f9000 <col:40> 'int' 1
|-CXXConstructorDecl 0x55974c72eb48 <line:137:5, col:28> col:21 used Vector 'void ()' inline
|-CXXConstructorDecl 0x55974c72ed98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c72ec00 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c72eca0 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXConstructorDecl 0x55974c72f058 <line:139:5, col:37> col:12 Vector 'void (const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x55974c72ef40 <col:19, col:36> col:36 x 'const Vector<unsigned int> &'
|-CXXConstructorDecl 0x55974c72f318 <line:141:5, col:32> col:12 Vector 'void (Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x55974c72f200 <col:19, col:31> col:31 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x55974c72f660 <line:144:5, col:51> col:23 operator= 'Vector<unsigned int> &(const Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x55974c72f540 <col:33, col:50> col:50 x 'const Vector<unsigned int> &'
|-CXXMethodDecl 0x55974c72f970 <line:146:5, col:46> col:23 operator= 'Vector<unsigned int> &(Vector<unsigned int> &&)' inline
| `-ParmVarDecl 0x55974c72f850 <col:33, col:45> col:45 x 'Vector<unsigned int> &&'
|-CXXMethodDecl 0x55974c730500 <line:148:5, col:70> col:23 assign 'Vector<unsigned int> &(Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c72faa8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c72fb20 <col:43, col:69> col:63 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x55974c730628 <line:150:5, col:55> col:49 begin 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x55974c730708 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c730760 <col:30> Inherited
|-CXXMethodDecl 0x55974c7307a8 <line:151:5, col:53> col:49 end 'Vector<unsigned int>::iterator ()'
| |-NoInlineAttr 0x55974c730858 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c7308b0 <col:30> Inherited
|-CXXMethodDecl 0x55974c730948 <line:152:5, col:63> col:55 used begin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55974c7309f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c730a50 <col:30> Inherited
|-CXXMethodDecl 0x55974c730a98 <line:153:5, col:61> col:55 used end 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55974c730b48 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c730ba0 <col:30> Inherited
|-CXXMethodDecl 0x55974c730be8 <line:154:5, col:64> col:55 cbegin 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55974c730c98 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c730cf0 <col:30> Inherited
|-CXXMethodDecl 0x55974c730d38 <line:155:5, col:62> col:55 cend 'Vector<unsigned int>::const_iterator () const'
| |-NoInlineAttr 0x55974c730de8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55974c730e40 <col:30> Inherited
|-CXXMethodDecl 0x55974c730e68 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55974c730f18 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55974c730fc8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55974c731188 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c731078 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55974c7310f0 <col:37, col:63> col:57 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x55974c7312d8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55974c731248 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c731488 <line:163:5, col:65> col:43 used operator[] 'unsigned int &(Vector::size_type)'
| |-ParmVarDecl 0x55974c731390 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55974c731540 <col:20>
| `-OptimizeNoneAttr 0x55974c731598 <col:30>
|-CXXMethodDecl 0x55974c7316b8 <line:164:5, col:73> col:49 used operator[] 'const unsigned int &(Vector::size_type) const'
| |-ParmVarDecl 0x55974c7315c0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55974c731770 <col:20>
| `-OptimizeNoneAttr 0x55974c7317c8 <col:30>
|-CXXMethodDecl 0x55974c731880 <line:165:5, col:29> col:15 at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55974c7317f0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c7319c8 <line:166:5, col:37> col:21 at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55974c731938 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c731af8 <line:167:5, col:21> col:15 front 'unsigned int &()' inline
|-CXXMethodDecl 0x55974c731c28 <line:168:5, col:29> col:21 front 'const unsigned int &() const' inline
|-CXXMethodDecl 0x55974c731cf8 <line:169:5, col:20> col:15 back 'unsigned int &()' inline
|-CXXMethodDecl 0x55974c731dc8 <line:170:5, col:28> col:21 back 'const unsigned int &() const' inline
|-CXXMethodDecl 0x55974c731f08 <line:172:5, col:39> col:15 unchecked_at 'unsigned int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55974c731e78 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c732050 <line:173:5, col:47> col:21 unchecked_at 'const unsigned int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55974c731fc0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55974c732198 <line:174:5, col:59> col:15 at_u 'unsigned int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55974c732108 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55974c732250 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55974c732350 <line:175:5, col:71> col:21 at_u 'const unsigned int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55974c7322c0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55974c732408 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55974c7324c8 <line:177:5, col:20> col:15 data 'unsigned int *()' inline
|-CXXMethodDecl 0x55974c7325c8 <line:178:5, col:28> col:21 data 'const unsigned int *() const' inline
|-CXXMethodDecl 0x55974c732748 <line:180:5, col:48> col:17 used push_back 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x55974c732688 <col:27, col:47> col:47 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-FunctionTemplateDecl 0x55974c732f08 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55974c732800 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<unsigned int>':'fast_argument<unsigned int, false>'
| `-CXXMethodDecl 0x55974c732e68 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (unsigned int &&)' inline
|   `-ParmVarDecl 0x55974c732d68 <col:58, col:62> col:62 v 'unsigned int &&'
|-CXXMethodDecl 0x55974c732fe8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55974c733138 <line:186:5, col:49> col:17 push_front 'void (Vector<unsigned int>::value_argument_type)' inline
| `-ParmVarDecl 0x55974c7330a8 <col:28, col:48> col:48 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x55974c7331f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55974c733438 <line:189:5, col:62> col:21 insert 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::value_argument_type)' inline
| |-ParmVarDecl 0x55974c7332b0 <col:28, col:37> col:37 it 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x55974c733328 <col:41, col:61> col:61 v 'Vector<unsigned int>::value_argument_type':'unsigned int'
|-CXXMethodDecl 0x55974c7335f8 <line:190:5, col:38> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator)' inline
| `-ParmVarDecl 0x55974c733508 <col:27, col:36> col:36 it 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x55974c733848 <line:191:5, col:49> col:21 erase 'Vector<unsigned int>::iterator (Vector<unsigned int>::iterator, Vector<unsigned int>::iterator)' inline
| |-ParmVarDecl 0x55974c7336c0 <col:27, col:36> col:36 a 'Vector<unsigned int>::iterator':'unsigned int *'
| `-ParmVarDecl 0x55974c733738 <col:39, col:48> col:48 b 'Vector<unsigned int>::iterator':'unsigned int *'
|-CXXMethodDecl 0x55974c733908 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55974c733b68 <line:195:5, col:34> col:17 swap 'void (Vector<unsigned int> &)' inline
| `-ParmVarDecl 0x55974c733a70 <col:22, col:33> col:33 x 'Vector<unsigned int> &'
`-CXXDestructorDecl 0x55974c733c38 <line:111:7> col:7 implicit used ~Vector 'void () noexcept' inline default
  `-CompoundStmt 0x55974c7347b0 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.2 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.2 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c727d08 <../elements/standard/classification.hh:238:1, line:276:1> line:238:7 class CompressedProgram definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_implicit
|-CXXRecordDecl 0x55974c727e28 <col:1, col:7> col:7 implicit referenced class CompressedProgram
|-AccessSpecDecl 0x55974c727eb8 <col:27, col:33> col:27 public
|-CXXConstructorDecl 0x55974c727f40 <line:240:5, line:243:5> line:240:5 CompressedProgram 'void ()'
| |-CXXCtorInitializer Field 0x55974c733d20 '_zprog' 'Vector<uint32_t>':'Vector<unsigned int>'
| | `-CXXConstructExpr 0x55974c734740 <col:5> 'Vector<uint32_t>':'Vector<unsigned int>' 'void ()'
| |-CXXCtorInitializer Field 0x55974c733d88 '_output_everything' 'int'
| | `-UnaryOperator 0x55974c734588 <line:241:23, col:24> 'int' prefix '-'
| |   `-ImplicitCastExpr 0x55974c734570 <col:24> 'int' <IntegralCast>
| |     `-DeclRefExpr 0x55974c734550 <col:24> 'Classification::Jumps' EnumConstant 0x55974c3cd788 'j_never' 'Classification::Jumps'
| |-CXXCtorInitializer Field 0x55974c733df0 '_safe_length' 'unsigned int'
| | `-CStyleCastExpr 0x55974c734650 <col:47, col:59> 'unsigned int' <NoOp>
| |   `-ImplicitCastExpr 0x55974c734638 <col:58, col:59> 'unsigned int' <IntegralCast> part_of_explicit_cast
| |     `-UnaryOperator 0x55974c734608 <col:58, col:59> 'int' prefix '-'
| |       `-IntegerLiteral 0x55974c7345e8 <col:59> 'int' 1
| |-CXXCtorInitializer Field 0x55974c733e58 '_align_offset' 'unsigned int'
| | `-ImplicitCastExpr 0x55974c734700 <line:242:18> 'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x55974c7346c0 <col:18> 'int' 0
| `-CompoundStmt 0x55974c7347c0 <col:21, line:243:5>
|-CXXMethodDecl 0x55974c728040 <line:245:5, line:247:5> line:245:14 align_offset 'unsigned int () const'
| `-CompoundStmt 0x55974c734838 <col:35, line:247:5>
|   `-ReturnStmt 0x55974c734828 <line:246:2, col:9>
|     `-ImplicitCastExpr 0x55974c734810 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55974c7347e0 <col:9> 'const unsigned int' lvalue ->_align_offset 0x55974c733e58
|         `-CXXThisExpr 0x55974c7347d0 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x55974c728108 <line:248:5, line:250:5> line:248:9 output_everything 'int () const'
| `-CompoundStmt 0x55974c7348b8 <col:35, line:250:5>
|   `-ReturnStmt 0x55974c7348a8 <line:249:2, col:9>
|     `-ImplicitCastExpr 0x55974c734890 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55974c734860 <col:9> 'const int' lvalue ->_output_everything 0x55974c733d88
|         `-CXXThisExpr 0x55974c734850 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x55974c7281d0 <line:251:5, line:253:5> line:251:14 safe_length 'unsigned int () const'
| `-CompoundStmt 0x55974c734938 <col:34, line:253:5>
|   `-ReturnStmt 0x55974c734928 <line:252:2, col:9>
|     `-ImplicitCastExpr 0x55974c734910 <col:9> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55974c7348e0 <col:9> 'const unsigned int' lvalue ->_safe_length 0x55974c733df0
|         `-CXXThisExpr 0x55974c7348d0 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x55974c728290 <line:255:5, line:257:5> line:255:21 begin 'const uint32_t *() const'
| `-CompoundStmt 0x55974c734a78 <col:35, line:257:5>
|   `-ReturnStmt 0x55974c734a68 <line:256:2, col:22>
|     `-CXXMemberCallExpr 0x55974c734a20 <col:9, col:22> 'Vector<unsigned int>::const_iterator':'const unsigned int *'
|       `-MemberExpr 0x55974c7349f0 <col:9, col:16> '<bound member function type>' .begin 0x55974c730948
|         `-MemberExpr 0x55974c734960 <col:9> 'const Vector<uint32_t>':'const Vector<unsigned int>' lvalue ->_zprog 0x55974c733d20
|           `-CXXThisExpr 0x55974c734950 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x55974c728350 <line:258:5, line:260:5> line:258:21 end 'const uint32_t *() const'
| `-CompoundStmt 0x55974c734b90 <col:33, line:260:5>
|   `-ReturnStmt 0x55974c734b80 <line:259:2, col:20>
|     `-CXXMemberCallExpr 0x55974c734b60 <col:9, col:20> 'Vector<unsigned int>::const_iterator':'const unsigned int *'
|       `-MemberExpr 0x55974c734b30 <col:9, col:16> '<bound member function type>' .end 0x55974c730a98
|         `-MemberExpr 0x55974c734aa0 <col:9> 'const Vector<uint32_t>':'const Vector<unsigned int>' lvalue ->_zprog 0x55974c733d20
|           `-CXXThisExpr 0x55974c734a90 <col:9> 'const Classification::Wordwise::CompressedProgram *' implicit this
|-CXXMethodDecl 0x55974c7285d8 <line:262:5, line:263:30> line:262:10 compile 'void (const Classification::Wordwise::Program &, bool, unsigned int)'
| |-ParmVarDecl 0x55974c728400 <col:18, col:33> col:33 prog 'const Classification::Wordwise::Program &'
| |-ParmVarDecl 0x55974c728478 <col:39, col:44> col:44 perform_binary_search 'bool'
| `-ParmVarDecl 0x55974c7284f8 <line:263:4, col:13> col:13 min_binary_search 'unsigned int'
|-CXXMethodDecl 0x55974c7287b8 <line:265:5, col:64> col:10 warn_unused_outputs 'void (int, ErrorHandler *) const'
| |-ParmVarDecl 0x55974c7286a8 <col:30, col:34> col:34 noutputs 'int'
| `-ParmVarDecl 0x55974c728720 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55974c728888 <line:267:5, col:22> col:12 unparse 'String () const'
|-AccessSpecDecl 0x55974c728928 <line:269:3, col:10> col:3 private
|-FieldDecl 0x55974c733d20 <line:271:5, col:22> col:22 referenced _zprog 'Vector<uint32_t>':'Vector<unsigned int>'
|-FieldDecl 0x55974c733d88 <line:272:5, col:9> col:9 referenced _output_everything 'int'
|-FieldDecl 0x55974c733df0 <line:273:5, col:14> col:14 referenced _safe_length 'unsigned int'
|-FieldDecl 0x55974c733e58 <line:274:5, col:14> col:14 referenced _align_offset 'unsigned int'
|-CXXConstructorDecl 0x55974c733ed8 <line:238:7> col:7 implicit CompressedProgram 'void (const Classification::Wordwise::CompressedProgram &)' inline default noexcept-unevaluated 0x55974c733ed8
| `-ParmVarDecl 0x55974c733fe8 <col:7> col:7 'const Classification::Wordwise::CompressedProgram &'
|-CXXConstructorDecl 0x55974c734088 <col:7> col:7 implicit CompressedProgram 'void (Classification::Wordwise::CompressedProgram &&)' inline default noexcept-unevaluated 0x55974c734088
| `-ParmVarDecl 0x55974c734198 <col:7> col:7 'Classification::Wordwise::CompressedProgram &&'
|-CXXMethodDecl 0x55974c734238 <col:7> col:7 implicit operator= 'Classification::Wordwise::CompressedProgram &(const Classification::Wordwise::CompressedProgram &)' inline default noexcept-unevaluated 0x55974c734238
| `-ParmVarDecl 0x55974c734348 <col:7> col:7 'const Classification::Wordwise::CompressedProgram &'
`-CXXMethodDecl 0x55974c7343b8 <col:7> col:7 implicit operator= 'Classification::Wordwise::CompressedProgram &(Classification::Wordwise::CompressedProgram &&)' inline default noexcept-unevaluated 0x55974c7343b8
  `-ParmVarDecl 0x55974c7344c8 <col:7> col:7 'Classification::Wordwise::CompressedProgram &&'

Layout: <CGRecordLayout
  LLVMType:%"class.Classification::Wordwise::CompressedProgram" = type <{ %class.Vector.4, i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Classification::Wordwise::CompressedProgram.base" = type <{ %class.Vector.4, i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c3d81a8 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55974c3d82c8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55974c3d8358 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55974c3d8428 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55974c3d8510 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c3d95c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55974c3d9470 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3d9778 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55974c3d9680 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55974c3d98c0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55974c3d9830 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55974c3d9a08 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55974c3d9978 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3d9b50 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55974c3d9ac0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3d9c18 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55974c3d9d98 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55974c3d9cd0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55974c3d9e60 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55974c3d9fa8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55974c3d9f18 <col:28> col:31 'int'
|-CXXMethodDecl 0x55974c3da128 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55974c3da060 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3da270 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55974c3da1e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3da338 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55974c3da578 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55974c3da3e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55974c3da460 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3da7c8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55974c3da638 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c3da6b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55974c3da878 <col:86> "" ""
|-CXXMethodDecl 0x55974c3daae8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55974c3da958 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55974c3da9d0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3dac98 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55974c3daba8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55974c3dae48 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55974c3dad50 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55974c3db118 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55974c3daf00 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55974c3daf78 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55974c3daff0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3db480 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55974c3db1e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55974c3db258 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c3db2d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55974c3db538 <col:115> "" ""
|-AccessSpecDecl 0x55974c3db5a8 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55974c3db5e0 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c3dba88 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55974c3dba88
| `-ParmVarDecl 0x55974c3dbb98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55974c3dbc38 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55974c3dbc38
| `-ParmVarDecl 0x55974c3dbd48 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55974c423498 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55974c6d70e0 <col:7>
|-CXXConstructorDecl 0x55974c423570 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55974c423570
| `-ParmVarDecl 0x55974c423688 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55974c4236f8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55974c4236f8
| `-ParmVarDecl 0x55974c423808 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55974c6d9a50 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c6c5cc8 prev 0x55974c6b6110 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55974c6c5dc0 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55974c6c5eb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55974c6c5fd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55974c6c6158 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55974c6c62d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55974c6c6458 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55974c6d7248 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55974c6d7ab8 <col:11>
|-CXXDestructorDecl 0x55974c6d7320 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55974c6d7458 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55974c6d7458
| `-ParmVarDecl 0x55974c6d7568 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55974c6d7608 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55974c6d7608
| `-ParmVarDecl 0x55974c6d7718 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55974c6baf08 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55974c6bb018 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55974c6bb298 <col:11>
|   `-ReturnStmt 0x55974c6bb288 <col:11>
|     `-UnaryOperator 0x55974c6bb270 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55974c6bb260 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55974c6bb088 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55974c6bb088
  `-ParmVarDecl 0x55974c6bb198 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c6c64c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55974c6c65d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55974c6c6678 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55974c6c66e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55974c6c6748 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55974c6c67b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55974c6c6810 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55974c6c68d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55974c6c6930 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55974c6c6990 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55974c6d7158 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55974c6c6678 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55974c6d7ac8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55974c6d7b20 <col:12>
|-CXXConstructorDecl 0x55974c6d7788 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55974c6d7788
| `-ParmVarDecl 0x55974c6d7898 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55974c6d7938 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55974c6d7938
| `-ParmVarDecl 0x55974c6d7a48 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55974c6ba5f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55974c6af830 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55974c6af948 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55974c6af9d8 <col:16, col:22> col:16 public
|-EnumDecl 0x55974c6afa00 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55974c6afb00 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55974c6afbe0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6afae0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55974c6afac0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55974c6afb90 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55974c6afbf8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c6afb70 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55974c6afb50 <col:22> 'int' 64
|-CXXMethodDecl 0x55974c6aff38 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55974c6afc20 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c6afca0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55974c6afd18 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c6afd90 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55974c6afff8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b01f8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55974c6b0070 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55974c6b00e8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55974c6b02a8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b0408 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55974c6b0318 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55974c6b04b0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55974c6b07e0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55974c6b0770 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55974c6b0710 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55974c6b06d0 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55974c1bb310 'void'
|       |-PointerType 0x55974c40e9b0 'unsigned char *'
|       | `-BuiltinType 0x55974c1bb410 'unsigned char'
|       |-TypedefType 0x55974c2606a0 'size_t' sugar
|       | |-Typedef 0x55974c22baf0 'size_t'
|       | `-BuiltinType 0x55974c1bb470 'unsigned long'
|       `-PointerType 0x55974c1bbb10 'void *'
|         `-BuiltinType 0x55974c1bb310 'void'
|-CXXMethodDecl 0x55974c6b0c58 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55974c6b0850 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55974c6b08c8 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c6b0960 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55974c6b09e0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55974c6c7e20 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55974c6c7e08 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55974c6c7dd0 <col:58> 'int' 0
| |-ParmVarDecl 0x55974c6b0a60 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55974c6c7e48 <col:76> 'int' 0
| |-ParmVarDecl 0x55974c6b0ae0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55974c6c7e68 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55974c6b0d28 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b0da8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55974c6b0e68 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55974c6b0f08 <col:20>
| `-OptimizeNoneAttr 0x55974c6b0f60 <col:30>
|-CXXMethodDecl 0x55974c6b0fd8 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55974c6b1078 <col:20>
| `-OptimizeNoneAttr 0x55974c6b10d0 <col:30>
|-CXXMethodDecl 0x55974c6b1148 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55974c6b11e8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b1298 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55974c6b1338 <col:20>
| |-OptimizeNoneAttr 0x55974c6b1390 <col:30>
| `-WarnUnusedResultAttr 0x55974c6b13b8 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b1410 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55974c6b14b0 <col:20>
| `-OptimizeNoneAttr 0x55974c6b1508 <col:30>
|-CXXMethodDecl 0x55974c6b1558 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55974c6b15f8 <col:20>
| `-OptimizeNoneAttr 0x55974c6b1650 <col:30>
|-CXXMethodDecl 0x55974c6b1698 <line:81:5, col:58> col:49 used length 'uint32_t () const'
| |-NoInlineAttr 0x55974c6b1738 <col:20>
| `-OptimizeNoneAttr 0x55974c6b1790 <col:30>
|-CXXMethodDecl 0x55974c6b17d8 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c6b1898 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c6b1960 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55974c6b1a28 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55974c6b1ae8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c6b1c08 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55974c6c7f30 <col:54, line:99:5>
|   `-ReturnStmt 0x55974c6c7f20 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55974c6c7f08 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55974c6c7ed8 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55974c6c6cc8
|         `-CXXThisExpr 0x55974c6c7ec8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55974c6b1da8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55974c6b1cb8 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55974c6c7fe0 <col:67, line:103:5>
|   `-BinaryOperator 0x55974c6c7fc0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55974c6c7f58 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55974c6c6cc8
|     | `-CXXThisExpr 0x55974c6c7f48 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55974c6c7fa8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55974c6c7f88 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55974c6b1cb8 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55974c6b1ea0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55974c6c8060 <col:33, line:107:5>
|   `-ReturnStmt 0x55974c6c8050 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55974c6c8038 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55974c6c8008 <col:16> 'void *' lvalue ->_destructor_argument 0x55974c6c6d30
|         `-CXXThisExpr 0x55974c6c7ff8 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55974c6b1f60 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55974c6c8690 <col:25, line:113:5>
|   |-ParenExpr 0x55974c6c83d8 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55974c6c83a8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6c8118 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55974c6c80f0 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55974c6c80b8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55974c6c8088 <col:24> '<bound member function type>' ->shared 0x55974c6b0fd8
|   |   |       `-ImplicitCastExpr 0x55974c6c80d8 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55974c6c8078 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55974c6c8178 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6c8158 <col:42> 'int' 0
|   |   `-CallExpr 0x55974c6c8308 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55974c6c82f0 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6c82d0 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6c8348 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6c81e8 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55974c6c8360 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6c8210 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6c8378 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6c8248 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55974c6c8390 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6c82b8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6c82a0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6c8268 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55974c6c85d8 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55974c6c8408 <col:2> 'unsigned char *' lvalue ->_head 0x55974c6c6ad0
|   | | `-CXXThisExpr 0x55974c6c83f8 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55974c6c85c0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55974c6c85a0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55974c6c8448 <col:10> 'unsigned char *' lvalue ->_data 0x55974c6c6b38
|   |     | `-CXXThisExpr 0x55974c6c8438 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55974c6c8588 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55974c6c8568 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55974c6c8488 <col:18> 'unsigned char *' lvalue ->_tail 0x55974c6c6ba0
|   |         | `-CXXThisExpr 0x55974c6c8478 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55974c6c8550 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55974c6c8530 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55974c6c84c8 <col:26> 'unsigned char *' lvalue ->_end 0x55974c6c6c08
|   |             | `-CXXThisExpr 0x55974c6c84b8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55974c6c8518 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55974c6c84f8 <col:33> 'int' 0
|   `-BinaryOperator 0x55974c6c8670 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55974c6c8608 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55974c6c6cc8
|     | `-CXXThisExpr 0x55974c6c85f8 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55974c6c8658 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55974c6c8638 <col:16> 'int' 0
|-CXXMethodDecl 0x55974c6b20a0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55974c6b2010 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b2148 <col:20>
| |-OptimizeNoneAttr 0x55974c6b21a0 <col:30>
| `-WarnUnusedResultAttr 0x55974c6b21c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b2298 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55974c6b2208 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b2340 <col:20>
| |-OptimizeNoneAttr 0x55974c6b2398 <col:30>
| `-WarnUnusedResultAttr 0x55974c6b23c0 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b24f8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55974c6b2400 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55974c6b25d0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b26d0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55974c6b2640 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b2778 <col:20>
| `-OptimizeNoneAttr 0x55974c6b27d0 <col:30>
|-CXXMethodDecl 0x55974c6b2898 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55974c6b2808 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55974c6b2940 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b2a40 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55974c6b29b0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55974c6b2ae8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b2be8 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55974c6b2b58 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b2c90 <col:20>
| `-OptimizeNoneAttr 0x55974c6b2ce8 <col:30>
|-CXXMethodDecl 0x55974c6b2e78 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55974c6b2d28 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55974c6b2da0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55974c6c7e88 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55974c6b2f28 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55974c6b3128 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55974c6b2fa0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55974c6b3018 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6b3338 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55974c6b31e8 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55974c6b3260 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6b3548 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55974c6b33f8 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55974c6b3478 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55974c6c7e98 <col:39> 'int' 0
|-CXXMethodDecl 0x55974c6b3618 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55974c6b36e0 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55974c6b37a8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55974c6b3868 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c6b3930 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55974c6b3a78 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55974c6b39e8 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55974c6b3c48 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55974c6b3b38 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55974c6b3bb0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6b3d18 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55974c6b3dd8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55974c6b3e78 <col:20>
| `-OptimizeNoneAttr 0x55974c6b3ed0 <col:30>
|-CXXMethodDecl 0x55974c6b3f20 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55974c6b3fc0 <col:20>
| `-OptimizeNoneAttr 0x55974c6b4018 <col:30>
|-CXXMethodDecl 0x55974c6b4068 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55974c6b4128 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c6b41f0 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55974c6b4290 <col:20>
| `-OptimizeNoneAttr 0x55974c6b42e8 <col:30>
|-CXXMethodDecl 0x55974c6b4438 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55974c6b4328 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55974c6b43a0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6b4588 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55974c6b44f8 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6b4650 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55974c6b4710 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55974c6b47b0 <col:20>
| `-OptimizeNoneAttr 0x55974c6b4808 <col:30>
|-CXXMethodDecl 0x55974c6b4858 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55974c6b48f8 <col:20>
| `-OptimizeNoneAttr 0x55974c6b4950 <col:30>
|-CXXMethodDecl 0x55974c6b49a0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55974c6b4a68 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55974c6b4b08 <col:20>
| `-OptimizeNoneAttr 0x55974c6b4b60 <col:30>
|-CXXMethodDecl 0x55974c6b4ba8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55974c6b4cc8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55974c6b4e38 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55974c6b4d78 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55974c6b4f28 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55974c6b4fc8 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5020 <col:30>
|-CXXMethodDecl 0x55974c6b5070 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55974c6b5130 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55974c6b5368 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55974c6b51e0 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55974c6b5258 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b5418 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5470 <col:30>
|-CXXMethodDecl 0x55974c6b5518 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55974c6b55b8 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5610 <col:30>
|-CXXMethodDecl 0x55974c6b5660 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55974c6b5700 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5758 <col:30>
|-CXXMethodDecl 0x55974c6b57a0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55974c6b5840 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5898 <col:30>
|-CXXMethodDecl 0x55974c6b5998 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55974c6b58d0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55974c6b5a40 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5a98 <col:30>
|-CXXMethodDecl 0x55974c6b5c58 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55974c6b5ad0 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55974c6b5b48 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b5d08 <col:20>
| `-OptimizeNoneAttr 0x55974c6b5d60 <col:30>
|-CXXMethodDecl 0x55974c6b5e08 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55974c6b5f28 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55974c6b6048 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55974c6b60e8 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55974c6b6110 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55974c6b6238 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55974c6b62d8 <col:20>
| `-OptimizeNoneAttr 0x55974c6b6330 <col:30>
|-CXXMethodDecl 0x55974c6b63d8 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55974c6b6478 <col:20>
| `-OptimizeNoneAttr 0x55974c6b64d0 <col:30>
|-AccessSpecDecl 0x55974c6b64f8 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55974c6b6520 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55974c6b6640 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55974c6b6690 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c6b6620 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55974c6b6600 <col:14> 'int' 48
|-CXXMethodDecl 0x55974c6b66f8 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55974c6b6798 <col:20>
| `-OptimizeNoneAttr 0x55974c6b67f0 <col:30>
|-CXXMethodDecl 0x55974c6b6868 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55974c6b6908 <col:20>
| `-OptimizeNoneAttr 0x55974c6b6960 <col:30>
|-CXXMethodDecl 0x55974c6b6a28 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55974c6b6998 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55974c6b6bc8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55974c6b6d68 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55974c6b6c78 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55974c6b6e10 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55974c6b6f10 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55974c6b72c0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b6ef0 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55974c6b6ed0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55974c6b6fa0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55974c6b72d8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b6f80 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55974c6b6f60 <col:14> 'int' 1
| |-EnumConstantDecl 0x55974c6b7030 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55974c6b72f0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b7010 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55974c6b6ff0 <col:14> 'int' 2
| |-EnumConstantDecl 0x55974c6b70c0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55974c6b7308 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b70a0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55974c6b7080 <col:14> 'int' 3
| |-EnumConstantDecl 0x55974c6b7150 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55974c6b7320 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b7130 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55974c6b7110 <col:13> 'int' 4
| |-EnumConstantDecl 0x55974c6b71e0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55974c6b7338 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b71c0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55974c6b71a0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55974c6b7270 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55974c6b7350 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c6b7250 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55974c6b7230 <col:14> 'int' 6
|-CXXMethodDecl 0x55974c6b73b8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55974c6b7458 <col:20>
| `-OptimizeNoneAttr 0x55974c6b74b0 <col:30>
|-CXXMethodDecl 0x55974c6b75a8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55974c6b74e8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55974c6b7650 <col:20>
| `-OptimizeNoneAttr 0x55974c6b76a8 <col:30>
|-CXXMethodDecl 0x55974c6b7718 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55974c6b7840 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55974c6b79b8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55974c6b78f0 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55974c6b7a80 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55974c6b7b48 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55974c6b7c88 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55974c6b7bf8 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55974c6b7d30 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55974c6b7e30 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55974c6b8030 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b7e10 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55974c6b7df0 <col:23> 'int' 0
| |-EnumConstantDecl 0x55974c6b7ec0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55974c6b8048 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b7ea0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55974c6b7e80 <col:45> 'int' 4
| |-EnumConstantDecl 0x55974c6b7f50 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55974c6b8060 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6b7f30 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55974c6b7f10 <col:24> 'int' 0
| `-EnumConstantDecl 0x55974c6b7fe0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55974c6b8078 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c6b7fc0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55974c6b7fa0 <col:47> 'int' 16
|-CXXMethodDecl 0x55974c6b80d8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55974c6b8248 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55974c6b8188 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55974c6b82f0 <col:20>
| `-OptimizeNoneAttr 0x55974c6b8348 <col:30>
|-CXXMethodDecl 0x55974c6b8398 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55974c6c87b0 <col:18, col:36>
|   `-ReturnStmt 0x55974c6c87a0 <col:20, col:33>
|     `-ImplicitCastExpr 0x55974c6c8788 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55974c6c8768 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55974c6c8738 <col:27> '<bound member function type>' ->xanno 0x55974c6b63d8
|           `-CXXThisExpr 0x55974c6c8728 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55974c6b8490 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55974c6c88c0 <col:30, col:48>
|   `-ReturnStmt 0x55974c6c88b0 <col:32, col:45>
|     `-ImplicitCastExpr 0x55974c6c8898 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55974c6c8878 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55974c6c8848 <col:39> '<bound member function type>' ->xanno 0x55974c6b6238
|           `-CXXThisExpr 0x55974c6c8838 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55974c6b8578 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55974c6c8a58 <col:24, col:50>
|   `-ReturnStmt 0x55974c6c8a48 <col:26, col:47>
|     `-UnaryOperator 0x55974c6c8a30 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55974c6c8a10 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55974c6c89f8 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c6c89a8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55974c6c5fd8
|         |   `-CXXMemberCallExpr 0x55974c6c8988 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55974c6c8958 <col:34> '<bound member function type>' ->xanno 0x55974c6b63d8
|         |       `-CXXThisExpr 0x55974c6c8948 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55974c6c89d8 <col:46> 'int' 0
|-CXXMethodDecl 0x55974c6b8668 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55974c6c8c28 <col:36, col:62>
|   `-ReturnStmt 0x55974c6c8c18 <col:38, col:59>
|     `-UnaryOperator 0x55974c6c8c00 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55974c6c8be0 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55974c6c8bc8 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c6c8b40 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55974c6c5fd8
|         |   `-CXXMemberCallExpr 0x55974c6c8b20 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55974c6c8af0 <col:46> '<bound member function type>' ->xanno 0x55974c6b6238
|         |       `-CXXThisExpr 0x55974c6c8ae0 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55974c6c8b70 <col:58> 'int' 0
|-CXXMethodDecl 0x55974c6b8788 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55974c6c8dc0 <col:26, col:53>
|   `-ReturnStmt 0x55974c6c8db0 <col:28, col:50>
|     `-UnaryOperator 0x55974c6c8d98 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55974c6c8d78 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55974c6c8d60 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c6c8d10 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55974c6c62d8
|         |   `-CXXMemberCallExpr 0x55974c6c8cf0 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55974c6c8cc0 <col:36> '<bound member function type>' ->xanno 0x55974c6b63d8
|         |       `-CXXThisExpr 0x55974c6c8cb0 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55974c6c8d40 <col:49> 'int' 0
|-CXXMethodDecl 0x55974c6b88a8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55974c6c8f98 <col:38, col:65>
|   `-ReturnStmt 0x55974c6c8f88 <col:40, col:62>
|     `-UnaryOperator 0x55974c6c8f70 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55974c6c8f50 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55974c6c8f38 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c6c8ea8 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55974c6c62d8
|         |   `-CXXMemberCallExpr 0x55974c6c8e88 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55974c6c8e58 <col:48> '<bound member function type>' ->xanno 0x55974c6b6238
|         |       `-CXXThisExpr 0x55974c6c8e48 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55974c6c8ed8 <col:61> 'int' 0
|-CXXMethodDecl 0x55974c6b8a58 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55974c6b8960 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55974c6c9668 <col:34, line:463:5>
|   |-ParenExpr 0x55974c6c94b0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55974c6c9480 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6c90e8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6c90b8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6c9008 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6c8ff0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6c8fb0 <col:23> 'int' lvalue ParmVar 0x55974c6b8960 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6c8fd0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6c9098 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6c9068 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6c9028 <col:33> 'int' lvalue ParmVar 0x55974c6b8960 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55974c6c9080 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55974c6c9048 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55974c6c9148 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6c9128 <col:56> 'int' 0
|   |   `-CallExpr 0x55974c6c93e0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55974c6c93c8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6c93a8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6c9420 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6c9238 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55974c6c9438 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6c9268 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6c9450 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6c92a0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55974c6c9468 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6c9390 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6c9378 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6c9338 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55974c6c9658 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55974c6c9640 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55974c6c9620 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55974c6c95f0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55974c6c95a0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55974c6c5fd8
|         |   `-CXXMemberCallExpr 0x55974c6c9580 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55974c6c9550 <col:9> '<bound member function type>' ->xanno 0x55974c6b6238
|         |       `-CXXThisExpr 0x55974c6c9540 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55974c6c9608 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55974c6c95d0 <col:21> 'int' lvalue ParmVar 0x55974c6b8960 'i' 'int'
|-CXXMethodDecl 0x55974c6b8ca8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55974c6b8b18 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55974c6b8b90 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55974c6d1fc8 <col:40, line:472:5>
|   |-ParenExpr 0x55974c6d1de0 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55974c6d1db0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6c97c0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6c9790 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6c96e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6c96c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6c9688 <col:23> 'int' lvalue ParmVar 0x55974c6b8b18 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6c96a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6c9770 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6c9740 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6c9700 <col:33> 'int' lvalue ParmVar 0x55974c6b8b18 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55974c6c9758 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55974c6c9720 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55974c6c9820 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6c9800 <col:56> 'int' 0
|   |   `-CallExpr 0x55974c6d1d10 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d1cf8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d1cd8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d1d50 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d1b60 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55974c6d1d68 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d1b90 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d1d80 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d1bc8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55974c6d1d98 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d1cc0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d1ca8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d1c68 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55974c6d1fa8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55974c6d1f50 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55974c6d1f20 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55974c6d1ed0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55974c6c5fd8
|     | |   `-CXXMemberCallExpr 0x55974c6d1eb0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55974c6d1e80 <col:2> '<bound member function type>' ->xanno 0x55974c6b63d8
|     | |       `-CXXThisExpr 0x55974c6d1e70 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55974c6d1f38 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55974c6d1f00 <col:14> 'int' lvalue ParmVar 0x55974c6b8b18 'i' 'int'
|     `-ImplicitCastExpr 0x55974c6d1f90 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55974c6d1f70 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55974c6b8b90 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55974c6b8e68 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55974c6b8d70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55974c6d2748 <col:36, line:485:5>
|   |-ParenExpr 0x55974c6d24b0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d2480 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d2160 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d2130 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d2040 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d2028 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d1fe8 <col:23> 'int' lvalue ParmVar 0x55974c6b8d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d2008 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d2110 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d20f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d2060 <col:33> 'int' lvalue ParmVar 0x55974c6b8d70 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d20d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d20c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d2080 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d20a0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55974c6d21c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d21a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d23e0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d23c8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d23a8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d2420 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d2230 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55974c6d2438 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d2268 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d2450 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d22a0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55974c6d2468 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d2390 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d2378 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d2338 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55974c6d2738 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55974c6d2720 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55974c6d2708 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55974c6d26d8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55974c6d2678 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55974c6d2648 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55974c6d25c0 <col:61, col:70> 'char const[48]' lvalue ->c 0x55974c6c5eb0
|             |   `-CXXMemberCallExpr 0x55974c6d25a0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55974c6d2570 <col:61> '<bound member function type>' ->xanno 0x55974c6b6238
|             |       `-CXXThisExpr 0x55974c6d2560 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55974c6d2660 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55974c6d25f0 <col:74> 'int' lvalue ParmVar 0x55974c6b8d70 'i' 'int'
|-CXXMethodDecl 0x55974c6b90b8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55974c6b8f28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55974c6b8fa0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55974c6d2e98 <col:42, line:500:5>
|   |-ParenExpr 0x55974c6d2c30 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d2c00 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d28e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d28b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d27c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d27a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d2768 <col:23> 'int' lvalue ParmVar 0x55974c6b8f28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d2788 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d2890 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d2878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d27e0 <col:33> 'int' lvalue ParmVar 0x55974c6b8f28 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d2858 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d2840 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d2800 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d2820 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55974c6d2940 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d2920 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d2b60 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d2b48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d2b28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d2ba0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d29b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55974c6d2bb8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d29e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d2bd0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d2a20 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55974c6d2be8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d2b10 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d2af8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d2ab8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55974c6d2e78 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55974c6d2e28 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55974c6d2df8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55974c6d2da0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55974c6d2d70 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55974c6d2d20 <col:48, col:57> 'char [48]' lvalue ->c 0x55974c6c5eb0
|     |     |   `-CXXMemberCallExpr 0x55974c6d2d00 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55974c6d2cd0 <col:48> '<bound member function type>' ->xanno 0x55974c6b63d8
|     |     |       `-CXXThisExpr 0x55974c6d2cc0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55974c6d2d88 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55974c6d2d50 <col:61> 'int' lvalue ParmVar 0x55974c6b8f28 'i' 'int'
|     `-ImplicitCastExpr 0x55974c6d2e60 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55974c6d2e40 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55974c6b8fa0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55974c6b9278 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55974c6b9180 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55974c6d35f8 <col:35, line:513:5>
|   |-ParenExpr 0x55974c6d3308 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d32d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d3030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d3000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d2f10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d2ef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d2eb8 <col:23> 'int' lvalue ParmVar 0x55974c6b9180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d2ed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d2fe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d2fc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d2f30 <col:33> 'int' lvalue ParmVar 0x55974c6b9180 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d2fa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d2f90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d2f50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d2f70 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55974c6d3090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d3070 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d3238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d3220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d3200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d3278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d3100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55974c6d3290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d3138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d32a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d3170 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55974c6d32c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d31e8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d31d0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d3190 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55974c6d35e8 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55974c6d35d0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55974c6d35b8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55974c6d3588 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55974c6d3500 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55974c6d34d0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55974c6d3480 <col:60, col:69> 'char const[48]' lvalue ->c 0x55974c6c5eb0
|             |   `-CXXMemberCallExpr 0x55974c6d3460 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55974c6d3430 <col:60> '<bound member function type>' ->xanno 0x55974c6b6238
|             |       `-CXXThisExpr 0x55974c6d3420 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55974c6d34e8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55974c6d34b0 <col:73> 'int' lvalue ParmVar 0x55974c6b9180 'i' 'int'
|-CXXMethodDecl 0x55974c6b94c8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55974c6b9338 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55974c6b93b0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55974c6d3d08 <col:41, line:528:5>
|   |-ParenExpr 0x55974c6d3aa0 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d3a70 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d3790 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d3760 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d3670 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d3658 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d3618 <col:23> 'int' lvalue ParmVar 0x55974c6b9338 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d3638 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d3740 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d3728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d3690 <col:33> 'int' lvalue ParmVar 0x55974c6b9338 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d3708 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d36f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d36b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d36d0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55974c6d37f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d37d0 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d39d0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d39b8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d3998 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d3a10 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d3860 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55974c6d3a28 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d3898 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d3a40 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d38d0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55974c6d3a58 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d3980 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d3968 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d3928 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55974c6d3ce8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55974c6d3c98 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55974c6d3c68 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55974c6d3c10 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55974c6d3be0 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55974c6d3b90 <col:47, col:56> 'char [48]' lvalue ->c 0x55974c6c5eb0
|     |     |   `-CXXMemberCallExpr 0x55974c6d3b70 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55974c6d3b40 <col:47> '<bound member function type>' ->xanno 0x55974c6b63d8
|     |     |       `-CXXThisExpr 0x55974c6d3b30 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55974c6d3bf8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55974c6d3bc0 <col:60> 'int' lvalue ParmVar 0x55974c6b9338 'i' 'int'
|     `-ImplicitCastExpr 0x55974c6d3cd0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55974c6d3cb0 <col:65> 'int16_t':'short' lvalue ParmVar 0x55974c6b93b0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55974c6b9688 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55974c6b9590 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55974c6d43d8 <col:36, line:541:5>
|   |-ParenExpr 0x55974c6d4178 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d4148 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d3ea0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d3e70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d3d80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d3d68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d3d28 <col:23> 'int' lvalue ParmVar 0x55974c6b9590 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d3d48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d3e50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d3e38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d3da0 <col:33> 'int' lvalue ParmVar 0x55974c6b9590 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d3e18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d3e00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d3dc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d3de0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55974c6d3f00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d3ee0 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d40a8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d4090 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d4070 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d40e8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d3f70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55974c6d4100 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d3fa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d4118 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d3fe0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55974c6d4130 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d4058 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d4040 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d4000 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55974c6d43c8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55974c6d43b0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55974c6d4398 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55974c6d4368 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55974c6d4310 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55974c6d42e0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55974c6d4290 <col:61, col:70> 'char const[48]' lvalue ->c 0x55974c6c5eb0
|             |   `-CXXMemberCallExpr 0x55974c6d4270 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55974c6d4240 <col:61> '<bound member function type>' ->xanno 0x55974c6b6238
|             |       `-CXXThisExpr 0x55974c6d4230 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55974c6d42f8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55974c6d42c0 <col:74> 'int' lvalue ParmVar 0x55974c6b9590 'i' 'int'
|-CXXMethodDecl 0x55974c6b9858 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55974c6b9748 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55974c6b97c0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55974c6b9908 <col:20>
| `-OptimizeNoneAttr 0x55974c6b9960 <col:30>
|-CXXMethodDecl 0x55974c6b9a98 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55974c6b99a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55974c6d4aa8 <col:35, line:562:5>
|   |-ParenExpr 0x55974c6d4848 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d4818 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d4570 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d4540 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d4450 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d4438 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d43f8 <col:23> 'int' lvalue ParmVar 0x55974c6b99a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d4418 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d4520 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d4508 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d4470 <col:33> 'int' lvalue ParmVar 0x55974c6b99a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d44e8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d44d0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d4490 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d44b0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55974c6d45d0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d45b0 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d4778 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d4760 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d4740 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d47b8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d4640 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55974c6d47d0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d4678 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d47e8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d46b0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55974c6d4800 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d4728 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d4710 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d46d0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55974c6d4a98 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55974c6d4a80 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55974c6d4a68 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55974c6d4a38 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55974c6d49e0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55974c6d49b0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55974c6d4960 <col:60, col:69> 'char const[48]' lvalue ->c 0x55974c6c5eb0
|             |   `-CXXMemberCallExpr 0x55974c6d4940 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55974c6d4910 <col:60> '<bound member function type>' ->xanno 0x55974c6b6238
|             |       `-CXXThisExpr 0x55974c6d4900 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55974c6d49c8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55974c6d4990 <col:73> 'int' lvalue ParmVar 0x55974c6b99a0 'i' 'int'
|-CXXMethodDecl 0x55974c6b9ca8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55974c6b9b58 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55974c6b9bd0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55974c6d5188 <col:41, line:577:5>
|   |-ParenExpr 0x55974c6d4f18 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d4ee8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d4c40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d4c10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d4b20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d4b08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d4ac8 <col:23> 'int' lvalue ParmVar 0x55974c6b9b58 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d4ae8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d4bf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d4bd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d4b40 <col:33> 'int' lvalue ParmVar 0x55974c6b9b58 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d4bb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d4ba0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d4b60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d4b80 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55974c6d4ca0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d4c80 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d4e48 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d4e30 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d4e10 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d4e88 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d4d10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55974c6d4ea0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d4d48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d4eb8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d4d80 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55974c6d4ed0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d4df8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d4de0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d4da0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55974c6d5168 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55974c6d5118 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55974c6d50e8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55974c6d5088 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55974c6d5058 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55974c6d5008 <col:47, col:56> 'char [48]' lvalue ->c 0x55974c6c5eb0
|     |     |   `-CXXMemberCallExpr 0x55974c6d4fe8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55974c6d4fb8 <col:47> '<bound member function type>' ->xanno 0x55974c6b63d8
|     |     |       `-CXXThisExpr 0x55974c6d4fa8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55974c6d5070 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55974c6d5038 <col:60> 'int' lvalue ParmVar 0x55974c6b9b58 'i' 'int'
|     `-ImplicitCastExpr 0x55974c6d5150 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55974c6d5130 <col:65> 'int32_t':'int' lvalue ParmVar 0x55974c6b9bd0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55974c6b9e68 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55974c6b9d70 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55974c6d58b8 <col:36, line:591:5>
|   |-ParenExpr 0x55974c6d55f8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d55c8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d5320 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d52f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d5200 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d51e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d51a8 <col:23> 'int' lvalue ParmVar 0x55974c6b9d70 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d51c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d52d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d52b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d5220 <col:33> 'int' lvalue ParmVar 0x55974c6b9d70 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d5298 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d5280 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d5240 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d5260 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55974c6d5380 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d5360 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d5528 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d5510 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d54f0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d5568 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d53f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55974c6d5580 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d5428 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d5598 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d5460 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55974c6d55b0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d54d8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d54c0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d5480 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55974c6d58a8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55974c6d5890 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55974c6d5878 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55974c6d5848 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55974c6d57c0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55974c6d5790 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55974c6d5740 <col:61, col:70> 'char const[48]' lvalue ->c 0x55974c6c5eb0
|             |   `-CXXMemberCallExpr 0x55974c6d5720 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55974c6d56f0 <col:61> '<bound member function type>' ->xanno 0x55974c6b6238
|             |       `-CXXThisExpr 0x55974c6d56e0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55974c6d57a8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55974c6d5770 <col:74> 'int' lvalue ParmVar 0x55974c6b9d70 'i' 'int'
|-CXXMethodDecl 0x55974c6ba0b8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55974c6b9f28 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55974c6b9fa0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55974c6d5fa8 <col:42, line:606:5>
|   |-ParenExpr 0x55974c6d5d40 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55974c6d5d10 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d5a50 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d5a20 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d5930 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d5918 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d58d8 <col:23> 'int' lvalue ParmVar 0x55974c6b9f28 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d58f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d5a00 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55974c6d59e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d5950 <col:33> 'int' lvalue ParmVar 0x55974c6b9f28 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d59c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d59b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d5970 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55974c6d5990 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55974c6d5ab0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d5a90 <col:60> 'int' 0
|   |   `-CallExpr 0x55974c6d5c70 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d5c58 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d5c38 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d5cb0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d5b20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55974c6d5cc8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d5b70 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d5ce0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d5ba8 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55974c6d5cf8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d5c20 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d5c08 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d5bc8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55974c6d5f88 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55974c6d5f38 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55974c6d5f08 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55974c6d5eb0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55974c6d5e80 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55974c6d5e30 <col:48, col:57> 'char [48]' lvalue ->c 0x55974c6c5eb0
|     |     |   `-CXXMemberCallExpr 0x55974c6d5e10 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55974c6d5de0 <col:48> '<bound member function type>' ->xanno 0x55974c6b63d8
|     |     |       `-CXXThisExpr 0x55974c6d5dd0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55974c6d5e98 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55974c6d5e60 <col:61> 'int' lvalue ParmVar 0x55974c6b9f28 'i' 'int'
|     `-ImplicitCastExpr 0x55974c6d5f70 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55974c6d5f50 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55974c6b9fa0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55974c6ba250 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55974c6ba180 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55974c6d6818 <col:33, line:620:5>
|   |-ParenExpr 0x55974c6d6590 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55974c6d6560 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d61b0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d6180 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d6020 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d6008 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d5fc8 <col:23> 'int' lvalue ParmVar 0x55974c6ba180 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d5fe8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d6160 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55974c6d6148 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d6040 <col:33> 'int' lvalue ParmVar 0x55974c6ba180 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d6128 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d6110 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d6060 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55974c6d60e8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55974c6d60d0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55974c6d6098 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55974c6d6210 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d61f0 <col:79> 'int' 0
|   |   `-CallExpr 0x55974c6d64c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d64a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d6488 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d6500 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d62f8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55974c6d6518 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d6340 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d6530 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d6378 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55974c6d6548 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d6470 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d6458 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d6418 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55974c6d6808 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55974c6d67f0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55974c6d67d8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55974c6d67a8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55974c6d6720 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55974c6d66f0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55974c6d66a0 <col:67, col:76> 'char const[48]' lvalue ->c 0x55974c6c5eb0
|             |   `-CXXMemberCallExpr 0x55974c6d6680 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55974c6d6650 <col:67> '<bound member function type>' ->xanno 0x55974c6b6238
|             |       `-CXXThisExpr 0x55974c6d6640 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55974c6d6708 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55974c6d66d0 <col:80> 'int' lvalue ParmVar 0x55974c6ba180 'i' 'int'
|-CXXMethodDecl 0x55974c6ba468 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55974c6ba310 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55974c6ba390 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55974c6d7040 <col:45, line:635:5>
|   |-ParenExpr 0x55974c6d6d88 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55974c6d6d58 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55974c6d6a20 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55974c6d69f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55974c6d6890 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55974c6d6878 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55974c6d6838 <col:23> 'int' lvalue ParmVar 0x55974c6ba310 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55974c6d6858 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55974c6d69d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55974c6d69b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55974c6d68b0 <col:33> 'int' lvalue ParmVar 0x55974c6ba310 'i' 'int'
|   |   |     `-BinaryOperator 0x55974c6d6998 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55974c6d6980 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55974c6d68d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55974c6b6640 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55974c6d6958 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55974c6d6940 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55974c6d6908 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55974c6d6a80 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55974c6d6a60 <col:79> 'int' 0
|   |   `-CallExpr 0x55974c6d6cb8 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55974c6d6ca0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55974c6d6c80 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55974c257460 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55974c6d6cf8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d6af0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55974c6d6d10 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55974c6d6b38 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55974c6d6d28 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55974c6d6b70 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55974c6d6d40 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55974c6d6c68 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55974c6d6c50 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55974c6d6c08 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55974c6d7020 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55974c6d6f88 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55974c6d6f58 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55974c6d6ef8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55974c6d6ec8 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55974c6d6e78 <col:54, col:63> 'char [48]' lvalue ->c 0x55974c6c5eb0
|     |     |   `-CXXMemberCallExpr 0x55974c6d6e58 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55974c6d6e28 <col:54> '<bound member function type>' ->xanno 0x55974c6b63d8
|     |     |       `-CXXThisExpr 0x55974c6d6e18 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55974c6d6ee0 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55974c6d6ea8 <col:67> 'int' lvalue ParmVar 0x55974c6ba310 'i' 'int'
|     `-CXXConstCastExpr 0x55974c6d6ff0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55974c6d6fd8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55974c6d6fa0 <col:91> 'const void *' lvalue ParmVar 0x55974c6ba390 'x' 'const void *'
|-CXXMethodDecl 0x55974c6ba538 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55974c6d70c8 <col:34, line:640:5>
|   `-ReturnStmt 0x55974c6d70b8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55974c6d70a0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55974c6d7070 <col:16> 'Packet *' lvalue ->_data_packet 0x55974c6c6a68
|         `-CXXThisExpr 0x55974c6d7060 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55974c6c0830 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55974c6c07a0 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55974c6c7eb8 <col:46> 'bool' true
|-CXXMethodDecl 0x55974c6c09a8 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55974c6c08e8 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55974c6c0a50 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55974c6c1200 <line:660:22> "" ""
| |-EnumConstantDecl 0x55974c6c0b50 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c1270 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0b30 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55974c6c0b10 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55974c6afb00 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55974c6c0be0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c1288 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0bc0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55974c6c0ba0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55974c6afb90 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55974c6c0c70 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c12a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0c50 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55974c6c0c30 <col:21> 'int' 0
| |-EnumConstantDecl 0x55974c6c0d00 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c12b8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0ce0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55974c6c0cc0 <col:19> 'int' 16
| |-EnumConstantDecl 0x55974c6c0d90 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c12d0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0d70 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55974c6c0d50 <col:21> 'int' 16
| |-EnumConstantDecl 0x55974c6c0e20 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c12e8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0e00 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55974c6c0de0 <col:19> 'int' 32
| |-EnumConstantDecl 0x55974c6c0eb0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c1300 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0e90 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55974c6c0e70 <col:19> 'int' EnumConstant 0x55974c6c0d00 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55974c6c0f40 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c1318 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0f20 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55974c6c0f00 <col:19> 'int' EnumConstant 0x55974c6c0e20 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55974c6c1010 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c1330 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c0ff0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55974c6c0fd0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55974c6c0f90 <col:23> 'int' EnumConstant 0x55974c6c0f40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55974c6c0fb0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55974c6c10e0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55974c6c1348 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55974c6c10c0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55974c6c10a0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55974c6c1060 <col:23> 'int' EnumConstant 0x55974c6c0f40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55974c6c1080 <col:40> 'int' 4
| `-EnumConstantDecl 0x55974c6c11b0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55974c6c1360 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55974c6c1190 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55974c6c1170 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55974c6c1130 <col:23> 'int' EnumConstant 0x55974c6c0f40 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55974c6c1150 <col:40> 'int' 8
|-CXXMethodDecl 0x55974c6c13a0 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55974c6c1440 <col:68> "" ""
|-CXXMethodDecl 0x55974c6c14d8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55974c6c1578 <col:45> "" ""
|-CXXMethodDecl 0x55974c6c1610 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55974c6c16b0 <col:57> "" ""
|-CXXMethodDecl 0x55974c6c1748 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55974c6c17e8 <col:45> "" ""
|-CXXMethodDecl 0x55974c6c1880 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55974c6c1920 <col:57> "" ""
|-CXXMethodDecl 0x55974c6c19b0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55974c6c1a50 <col:51> "" ""
|-CXXMethodDecl 0x55974c6c1ae0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55974c6c1b80 <col:63> "" ""
|-CXXMethodDecl 0x55974c6c1c10 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55974c6c1cb0 <col:53> "" ""
|-CXXMethodDecl 0x55974c6c1d40 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55974c6c1de0 <col:65> "" ""
|-CXXMethodDecl 0x55974c6c1ef8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55974c6c1e68 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55974c6c1fa0 <col:61> "" ""
|-CXXMethodDecl 0x55974c6c2138 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55974c6c2028 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55974c6c20a0 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55974c6c21e8 <col:67> "" ""
|-CXXMethodDecl 0x55974c6c2300 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55974c6c2270 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55974c6c23a8 <col:63> "" ""
|-CXXMethodDecl 0x55974c6c2540 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55974c6c2430 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55974c6c24a8 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55974c6c25f0 <col:69> "" ""
|-CXXMethodDecl 0x55974c6c2708 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55974c6c2678 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55974c6c27b0 <col:63> "" ""
|-CXXMethodDecl 0x55974c6c2948 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55974c6c2838 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55974c6c28b0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55974c6c29f8 <col:69> "" ""
|-CXXMethodDecl 0x55974c6c2b10 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55974c6c2a80 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55974c6c2bb8 <col:62> "" ""
|-CXXMethodDecl 0x55974c6c2d50 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55974c6c2c40 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55974c6c2cb8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55974c6c2e00 <col:68> "" ""
|-CXXMethodDecl 0x55974c6c2f18 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55974c6c2e88 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55974c6c2fc0 <col:63> "" ""
|-CXXMethodDecl 0x55974c6c3158 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55974c6c3048 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55974c6c30c0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55974c6c3208 <col:69> "" ""
|-CXXMethodDecl 0x55974c6c3298 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55974c6c3338 <col:64> "" ""
|-CXXMethodDecl 0x55974c6c33c8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55974c6c3468 <col:52> "" ""
|-CXXMethodDecl 0x55974c6c34f8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55974c6c3598 <col:67> "" ""
|-CXXMethodDecl 0x55974c6c3628 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55974c6c36c8 <col:55> "" ""
|-CXXMethodDecl 0x55974c6c37e0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55974c6c3750 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55974c6c3888 <col:58> "" ""
|-CXXMethodDecl 0x55974c6c3a20 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55974c6c3910 <col:33> col:36 'int'
| |-ParmVarDecl 0x55974c6c3988 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55974c6c3ad0 <col:62> "" ""
|-CXXMethodDecl 0x55974c6c3be8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55974c6c3b58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55974c6c3c90 <col:58> "" ""
|-CXXMethodDecl 0x55974c6c3e28 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55974c6c3d18 <col:33> col:36 'int'
| |-ParmVarDecl 0x55974c6c3d90 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55974c6c3ed8 <col:62> "" ""
|-CXXMethodDecl 0x55974c6c3ff0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55974c6c3f60 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55974c6c4098 <col:60> "" ""
|-CXXMethodDecl 0x55974c6c4230 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55974c6c4120 <col:34> col:37 'int'
| |-ParmVarDecl 0x55974c6c4198 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55974c6c42e0 <col:64> "" ""
|-CXXMethodDecl 0x55974c6c43f8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55974c6c4368 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55974c6c44a0 <col:58> "" ""
|-CXXMethodDecl 0x55974c6c4638 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55974c6c4528 <col:33> col:36 'int'
| |-ParmVarDecl 0x55974c6c45a0 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55974c6c46e8 <col:62> "" ""
|-CXXMethodDecl 0x55974c6c5940 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55974c6c58b0 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55974c6c59e8 <col:59> "" ""
|-CXXMethodDecl 0x55974c6c5b80 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55974c6c5a70 <col:33> col:36 'int'
| |-ParmVarDecl 0x55974c6c5ae8 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55974c6c5c30 <col:63> "" ""
|-AccessSpecDecl 0x55974c6c5ca0 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55974c6c5cc8 prev 0x55974c6b6110 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55974c6c5dc0 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55974c6c5eb0 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55974c6c5fd8 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55974c6c6158 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55974c6c62d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55974c6c6458 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55974c6d7248 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55974c6d7ab8 <col:11>
| |-CXXDestructorDecl 0x55974c6d7320 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55974c6d7458 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55974c6d7458
| | `-ParmVarDecl 0x55974c6d7568 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55974c6d7608 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55974c6d7608
| | `-ParmVarDecl 0x55974c6d7718 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55974c6baf08 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55974c6bb018 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55974c6bb298 <col:11>
| |   `-ReturnStmt 0x55974c6bb288 <col:11>
| |     `-UnaryOperator 0x55974c6bb270 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55974c6bb260 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55974c6bb088 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55974c6bb088
|   `-ParmVarDecl 0x55974c6bb198 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55974c6c64c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55974c6c65d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55974c6c6678 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55974c6c66e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55974c6c6748 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55974c6c67b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55974c6c6810 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55974c6c68d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55974c6c6930 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55974c6c6990 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55974c6d7158 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55974c6c6678 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55974c6d7ac8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55974c6d7b20 <col:12>
| |-CXXConstructorDecl 0x55974c6d7788 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55974c6d7788
| | `-ParmVarDecl 0x55974c6d7898 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55974c6d7938 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55974c6d7938
| | `-ParmVarDecl 0x55974c6d7a48 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55974c6ba5f0 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55974c6c6a08 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55974c6c6a68 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55974c6c6ad0 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55974c6c6b38 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55974c6c6ba0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55974c6c6c08 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55974c6c6c68 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55974c6c6cc8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55974c6c6d30 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55974c6c6db8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55974c6c6a08 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55974c6d70f0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55974c6c6c68 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55974c6d7b30 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55974c6d7b90 <col:21, line:755:5>
|-CXXConstructorDecl 0x55974c6c6f58 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55974c6c6e98 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55974c6c7050 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55974c6c7238 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55974c6c7140 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55974c6c7508 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55974c6c72f0 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55974c6c7368 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55974c6c73e0 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6c7728 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55974c6c75d8 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55974c6c7650 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55974c6c79f8 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55974c6c77e8 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55974c6c7860 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55974c6c78d8 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55974c6c7b50 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55974c6c7ac0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55974c6c7c98 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55974c6c7c08 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55974c6c7d90 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<20>
         0 |   char [20] x
           | [sizeof=20, dsize=20, align=1,
           |  nvsize=20, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c71a420 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 20
|-PackedAttr 0x55974c82bfd0 <line:167:18>
|-CXXRecordDecl 0x55974c82c090 prev 0x55974c71a420 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55974c82c1a0 <line:166:5, col:13> col:10 x 'char [20]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [20 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [20 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<4>
         0 |   char [4] x
           | [sizeof=4, dsize=4, align=1,
           |  nvsize=4, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55974c72a210 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 4
|-PackedAttr 0x55974c82d5f8 <line:167:18>
|-CXXRecordDecl 0x55974c82d6b8 prev 0x55974c72a210 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x55974c82d7c8 <line:166:5, col:13> col:10 x 'char [4]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array.3 = type { [4 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array.3 = type { [4 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>
