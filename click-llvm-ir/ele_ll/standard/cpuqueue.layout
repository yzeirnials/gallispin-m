
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct CPUQueue::(anonymous at ../elements/standard/cpuqueue.hh:23:3)
         0 |   class Packet ** _q
         8 |   unsigned int _head
        12 |   unsigned int _tail
        16 |   unsigned int [5] _pad
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b2a8b88 prev 0x55888b2a0328 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b2a8c80 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x55888b2a8d10 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x55888b2a8d88 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x55888b2a8e48 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x55888b2a8f10 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x55888b2a9088 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x55888b2a8fc0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x55888b2a9130 <col:24>
| `-OptimizeNoneAttr 0x55888b2a9188 <col:34>
|-CXXMethodDecl 0x55888b2a91d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x55888b2a9488 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x55888b2a9280 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55888b2a92f8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x55888b2a9378 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x55888b2a9540 <line:229:7, col:14> col:7 private
|-FieldDecl 0x55888b2a9578 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x55888b2a95e0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x55888b2a9668 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x55888b2a9988 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x55888b2a9720 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x55888b2a9798 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x55888b2a9810 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x55888b2a9890 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x55888b2a9aa0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x55888b2b1418 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55888b2b1418
| `-ParmVarDecl 0x55888b2b1528 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x55888b2b15c8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55888b2b15c8
| `-ParmVarDecl 0x55888b2b16d8 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x55888b386918 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b29bba0 prev 0x55888b29b920 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55888b29bc98 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x55888b29bd28 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x55888b29bd88 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x55888b29be78 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x55888b29bf78 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x55888b29c148 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x55888b29bff8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x55888b29c070 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x55888b29c2d8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x55888b29c210 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x55888b29c380 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x55888b29c4b8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x55888b29c3f0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x55888b29c658 <line:40:5, col:37> col:18 run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x55888b29c598 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x55888b29c7f8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x55888b29c738 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x55888b29c8a0 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x55888b29c9a0 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x55888b29ca80 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b29c980 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x55888b29c960 <col:26> 'int' 1
| `-EnumConstantDecl 0x55888b29ca30 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x55888b29ca98 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b29ca10 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x55888b29c9f0 <col:44> 'int' 2
|-CXXMethodDecl 0x55888b29cbe0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x55888b29cac8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x55888b29cb48 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x55888b29cd38 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x55888b29cca8 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x55888b29cf78 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x55888b29cdf8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x55888b29ce70 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x55888b29d028 <col:20>
| `-OptimizeNoneAttr 0x55888b29d080 <col:30>
|-CXXMethodDecl 0x55888b29d188 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x55888b29d0c0 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x55888b29d230 <col:20>
| `-OptimizeNoneAttr 0x55888b29d288 <col:30>
|-CXXMethodDecl 0x55888b29d2d8 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x55888b29d3a0 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x55888b29d4b8 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x55888b29d540 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x55888b29d5c8 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x55888b29d650 <line:58:5, col:33> col:23 PORTS_1_1 'const char []' static
|-VarDecl 0x55888b29d6d8 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x55888b29d768 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x55888b29d828 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x55888b29d8b0 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x55888b29d938 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x55888b29d9c0 <line:65:5, col:36> col:23 used PUSH_TO_PULL 'const char []' static
|-VarDecl 0x55888b29da48 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x55888b29dad0 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x55888b29db60 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x55888b29dc20 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x55888b29dcb0 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x55888b29de00 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x55888b29dd68 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x55888b29df90 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x55888b29dec0 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x55888b29e240 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x55888b29e048 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x55888b29e0c8 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x55888b29e148 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x55888b29e2f8 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x55888b29e400 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55888b29e690 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b29e3e0 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x55888b29e3c0 <col:33> 'int' 0
| |-EnumConstantDecl 0x55888b29e490 <line:81:9, col:32> col:9 CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55888b29e6a8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b29e470 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x55888b29e450 <col:32> 'int' 20
| |-EnumConstantDecl 0x55888b29e520 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55888b29e6c0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b29e500 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x55888b29e4e0 <col:38> 'int' 90
| |-EnumConstantDecl 0x55888b29e5b0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x55888b29e6d8 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b29e590 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x55888b29e570 <col:35> 'int' 100
| `-EnumConstantDecl 0x55888b29e640 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x55888b29e6f0 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b29e620 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x55888b29e600 <col:32> 'int' 2000
|-CXXMethodDecl 0x55888b29e730 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x55888b29eb70 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55888b29e9e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x55888b29ea58 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55888b29ec40 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x55888b29edc0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x55888b29ecf0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55888b29efc8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55888b29ee78 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x55888b29eef0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55888b29f0c8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x55888b29f168 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x55888b29f230 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x55888b29f2c0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x55888b29f4f0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b29f2a0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x55888b29f280 <col:36> 'int' EnumConstant 0x55888b29f230 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x55888b29f310 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55888b29f360 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55888b29f3b0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55888b29f400 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x55888b29f450 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x55888b29f4a0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x55888b29f5d8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x55888b29f518 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x55888b29f6a0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x55888b29f760 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x55888b29f820 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x55888b29f8e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x55888b29f9f8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x55888b29fac0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x55888b29fc40 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x55888b29fb70 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x55888b29fd68 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x55888b29ff68 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x55888b29fe18 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x55888b29fe98 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x55888b2ad8b8 <col:54, line:127:5>
|   |-ParenExpr 0x55888b2ad768 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x55888b2ad738 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x55888b2ad428 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55888b2ad400 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x55888b2ad3e8 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x55888b2ad3d0 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x55888b2ad3a0 <col:31> 'Router *' lvalue ->_router 0x55888b2ab280
|   |   |         `-CXXThisExpr 0x55888b2ad390 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55888b2ad488 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b2ad468 <col:48> 'int' 0
|   |   `-CallExpr 0x55888b2ad698 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x55888b2ad680 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b2ad660 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b2ad6d8 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2ad4f8 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x55888b2ad6f0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2ad518 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x55888b2ad708 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b2ad550 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x55888b2ad720 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b2ad648 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b2ad630 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b2ad5e8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x55888b2ad800 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x55888b2ad798 <col:9> 'Router *' lvalue ->_router 0x55888b2ab280
|   | | `-CXXThisExpr 0x55888b2ad788 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x55888b2ad7e8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55888b2ad7c8 <col:19> 'Router *' lvalue ParmVar 0x55888b29fe18 'r' 'Router *'
|   `-BinaryOperator 0x55888b2ad898 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x55888b2ad830 <col:9> 'int' lvalue ->_eindex 0x55888b2ab2e8
|     | `-CXXThisExpr 0x55888b2ad820 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x55888b2ad880 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x55888b2ad860 <col:19> 'int' lvalue ParmVar 0x55888b29fe98 'eindex' 'int'
|-CXXMethodDecl 0x55888b2a00f0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x55888b2a0028 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x55888b2a01c0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x55888b2a0288 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x55888b2a0328 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x55888b2a0578 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x55888b2a03f0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x55888b2a0470 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x55888b2a0628 <col:20>
| `-OptimizeNoneAttr 0x55888b2a0680 <col:30>
|-CXXMethodDecl 0x55888b2a0788 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55888b2a06c0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x55888b2a0830 <col:20>
| `-OptimizeNoneAttr 0x55888b2a0888 <col:30>
|-CXXMethodDecl 0x55888b2a0958 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x55888b2a08c8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x55888b2a0a00 <col:20>
| `-OptimizeNoneAttr 0x55888b2a0a58 <col:30>
|-CXXMethodDecl 0x55888b2a0be8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x55888b2a0a90 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x55888b2a0b10 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x55888b2a0d78 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55888b2a0cb0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55888b2a0ec8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55888b2a0e38 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x55888b2a1018 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x55888b2a0f88 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55888b2a1168 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x55888b2a10d8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x55888b2a1428 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x55888b2a1220 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x55888b2a12a0 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x55888b2a1348 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x55888b2a1500 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x55888b2a15c0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x55888b2a1890 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x55888b2a1740 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x55888b2a17b8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2a19b8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x55888b2a1b90 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x55888b2a1a70 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x55888b2a1af0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x55888b2a1d78 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x55888b2a1c58 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x55888b2a1cd8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x55888b2a20e8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55888b2a1e38 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55888b2a1eb0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55888b2a1f30 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55888b2acea0 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b2ace80 <col:106> 'int' 0
| `-ParmVarDecl 0x55888b2a1fa8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55888b2aced8 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55888b2aceb8 <col:126> 'int' 0
|-CXXMethodDecl 0x55888b2a2488 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55888b2a21b8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55888b2a2250 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55888b2a22d0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x55888b2a2348 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55888b2acf10 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55888b2acef0 <col:114> 'int' 0
|-CXXMethodDecl 0x55888b2a2818 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55888b2a2560 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x55888b2a25d8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x55888b2a2658 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x55888b2acf28 <col:96> 'int' 0
| `-ParmVarDecl 0x55888b2a26d0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55888b2acf68 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55888b2acf48 <col:116> 'int' 0
|-CXXMethodDecl 0x55888b2a2b98 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x55888b2a28e8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55888b2a2960 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2a29e0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55888b2acfa0 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b2acf80 <col:109> 'int' 0
| `-ParmVarDecl 0x55888b2a2a58 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55888b2acfd8 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55888b2acfb8 <col:129> 'int' 0
|-CXXMethodDecl 0x55888b2a2f18 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55888b2a2c68 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x55888b2a2ce0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2a2d60 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x55888b2a2dd8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55888b2ad010 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55888b2acff0 <col:117> 'int' 0
|-CXXMethodDecl 0x55888b2a32a8 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x55888b2a2ff0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a3068 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2a30e8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x55888b2ad028 <col:99> 'int' 0
| `-ParmVarDecl 0x55888b2a3160 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x55888b2ad068 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x55888b2ad048 <col:119> 'int' 0
|-CXXMethodDecl 0x55888b2a36c8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x55888b2a3378 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55888b2a33f8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55888b2a3470 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2a34f0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x55888b2ad0a0 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b2ad080 <col:108> 'int' 0
| `-ParmVarDecl 0x55888b2a3570 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x55888b2ad0d8 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x55888b2ad0b8 <col:141> 'int' 0
|-CXXMethodDecl 0x55888b2a3ae8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55888b2a37a0 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x55888b2a3820 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x55888b2a3898 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2a3918 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x55888b2a3998 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55888b2ad0f0 <col:121> 'int' 0
|-CXXMethodDecl 0x55888b2a3f18 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x55888b2a3bc8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x55888b2a3c48 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x55888b2a3cc0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2a3d40 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x55888b2ad110 <col:98> 'int' 0
| `-ParmVarDecl 0x55888b2a3dc0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x55888b2ad130 <col:123> 'int' 0
|-CXXMethodDecl 0x55888b2a41e0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x55888b2a3ff0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x55888b2a4070 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x55888b2a40f0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x55888b2ad150 <col:80> 'int' 0
|-EnumDecl 0x55888b2a4298 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x55888b2a43a0 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55888b2a4630 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2a4380 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x55888b2a4360 <col:42> 'int' 1
| |-EnumConstantDecl 0x55888b2a4430 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55888b2a4648 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2a4410 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x55888b2a43f0 <col:40> 'int' 2
| |-EnumConstantDecl 0x55888b2a44c0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55888b2a4660 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2a44a0 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x55888b2a4480 <col:44> 'int' 4
| |-EnumConstantDecl 0x55888b2a4550 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x55888b2a4678 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2a4530 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x55888b2a4510 <col:36> 'int' 7
| `-EnumConstantDecl 0x55888b2a45e0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x55888b2a4690 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b2a45c0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x55888b2a45a0 <col:34> 'int' 6
|-CXXMethodDecl 0x55888b2a4948 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x55888b2a46b8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x55888b2a4758 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x55888b2a47d8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x55888b2a4850 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x55888b2ad208 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x55888b2ad1f0 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x55888b2ad1d8 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x55888b2ad1b8 <col:98, col:105> 'String' (CXXTemporary 0x55888b2ad1b8)
|           `-CXXTemporaryObjectExpr 0x55888b2ad180 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x55888b2a4be8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x55888b2a4a18 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55888b2a4a90 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x55888b2a4b08 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55888b2ad2b8 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55888b2ad2a0 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55888b2ad288 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55888b2ad268 <col:94, col:101> 'String' (CXXTemporary 0x55888b2ad268)
| |         `-CXXTemporaryObjectExpr 0x55888b2ad230 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x55888b2adaa0 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x55888b2ada18 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x55888b2ad9e8 <col:9> '<bound member function type>' ->add_task_handlers 0x55888b2a4948
|     | `-CXXThisExpr 0x55888b2ad9d8 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55888b2ada58 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55888b2ad958 <col:27> 'Task *' lvalue ParmVar 0x55888b2a4a18 'task' 'Task *'
|     |-ImplicitCastExpr 0x55888b2ada70 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x55888b2ad978 <col:33> 'NotifierSignal *' lvalue ParmVar 0x55888b2a4a90 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x55888b2ada88 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55888b2ad998 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55888b2a45e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55888b2ad9b8 <col:62> 'const String' lvalue ParmVar 0x55888b2a4b08 'prefix' 'const String &'
|-CXXMethodDecl 0x55888b2a4df8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x55888b2a4cb0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x55888b2a4d28 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x55888b2ad368 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x55888b2ad350 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x55888b2ad338 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x55888b2ad318 <col:70, col:77> 'String' (CXXTemporary 0x55888b2ad318)
| |         `-CXXTemporaryObjectExpr 0x55888b2ad2e0 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x55888b2adc78 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x55888b2adbf0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x55888b2adbc0 <col:9> '<bound member function type>' ->add_task_handlers 0x55888b2a4948
|     | `-CXXThisExpr 0x55888b2adbb0 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x55888b2adc30 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x55888b2adb30 <col:27> 'Task *' lvalue ParmVar 0x55888b2a4cb0 'task' 'Task *'
|     |-ImplicitCastExpr 0x55888b2adc48 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x55888b2adb50 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x55888b2adc60 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x55888b2adb70 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x55888b2a45e0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x55888b2adb90 <col:57> 'const String' lvalue ParmVar 0x55888b2a4d28 'prefix' 'const String &'
|-CXXMethodDecl 0x55888b2a50d8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x55888b2a4ec0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a4f40 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a4fb8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x55888b2a5388 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x55888b2a51a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a5228 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a52a8 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x55888b2a5678 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55888b2a5458 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a54d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a5550 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x55888b2a5928 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x55888b2a5748 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a57c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a5848 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x55888b2a5bd8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x55888b2a59f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a5a78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a5af8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x55888b2a5e88 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x55888b2a5ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a5d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a5da0 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x55888b2a6138 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x55888b2a5f58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a5fd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a6058 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x55888b2a6448 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x55888b2a6260 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a62e0 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a6360 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x55888b2a6728 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x55888b2a6518 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a6598 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a6640 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x55888b2a6a08 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x55888b2a67f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a6878 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a6920 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x55888b2a6c70 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x55888b2a6ad8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55888b2a6b58 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55888b2a6bd0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x55888b2a6f18 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x55888b2a6d40 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x55888b2a6dc0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x55888b2a6e38 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x55888b2a71c8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x55888b2a6fe8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a7068 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a70e8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x55888b2a7478 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x55888b2a7298 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a7318 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a7390 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x55888b2a7728 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x55888b2a7548 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a75c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a7640 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x55888b2a79f8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x55888b2a77f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a7878 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x55888b2a7918 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x55888b2a7d28 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x55888b2a7ac8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x55888b2a7b48 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x55888b2a7bc0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x55888b2a7c38 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55888b2ad380 <col:93> 'bool' false
|-CXXMethodDecl 0x55888b2a7f10 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55888b2a7df8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x55888b2a7e78 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x55888b2a80e8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55888b2a7fd0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x55888b2a8050 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x55888b2a83c8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55888b2a81a8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x55888b2a8220 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x55888b2a82a0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x55888b2a8318 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2a86b8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x55888b2a8498 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x55888b2a8510 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x55888b2a8590 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x55888b2a8608 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2a88f0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x55888b2a8790 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x55888b2a8810 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x55888b2a8ad8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x55888b2a89b8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x55888b2a8a38 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x55888b2a8b88 prev 0x55888b2a0328 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55888b2a8c80 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x55888b2a8d10 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x55888b2a8d88 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x55888b2a8e48 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x55888b2a8f10 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x55888b2a9088 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x55888b2a8fc0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x55888b2a9130 <col:24>
| | `-OptimizeNoneAttr 0x55888b2a9188 <col:34>
| |-CXXMethodDecl 0x55888b2a91d0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x55888b2a9488 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x55888b2a9280 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55888b2a92f8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x55888b2a9378 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x55888b2a9540 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x55888b2a9578 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x55888b2a95e0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x55888b2a9668 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x55888b2a9988 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x55888b2a9720 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x55888b2a9798 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x55888b2a9810 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x55888b2a9890 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x55888b2a9aa0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x55888b2b1418 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x55888b2b1418
| | `-ParmVarDecl 0x55888b2b1528 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x55888b2b15c8 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x55888b2b15c8
| | `-ParmVarDecl 0x55888b2b16d8 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x55888b386918 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55888b2a9b18 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x55888b2a9bb8 <col:38> "" ""
|-CXXMethodDecl 0x55888b2a9c48 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x55888b2a9ce8 <col:44> "" ""
|-AccessSpecDecl 0x55888b2a9d58 <line:260:3, col:10> col:3 private
|-EnumDecl 0x55888b2a9d80 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x55888b2a9e80 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x55888b2a9ed0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b2a9e60 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x55888b2a9e40 <col:27> 'int' 4
|-FieldDecl 0x55888b2a9f88 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x55888b2aa138 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x55888b2aa1f0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x55888b2ab280 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x55888b2ab2e8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x55888b2ab438 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x55888b2ab378 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x55888b2ab5e8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x55888b2ab4f8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x55888b2ab7c8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x55888b2ab6a8 <col:20> col:23 'int'
| `-ParmVarDecl 0x55888b2ab728 <col:25> col:28 'int'
|-CXXMethodDecl 0x55888b2aba70 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x55888b2ab890 <col:23> col:26 'int'
| |-ParmVarDecl 0x55888b2ab910 <col:28> col:31 'int'
| `-ParmVarDecl 0x55888b2ab988 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x55888b2abb28 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x55888b2abbf0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x55888b2abc40 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x55888b2abc90 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x55888b2abe70 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x55888b2abd20 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x55888b2abd98 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2ac118 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x55888b2abf38 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x55888b2abfb8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x55888b2ac030 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2ac338 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x55888b2ac1e8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x55888b2ac268 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x55888b2ac670 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x55888b2ac3f8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x55888b2ac478 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x55888b2ac4f0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x55888b2ac570 <col:57> col:60 'int'
|-CXXMethodDecl 0x55888b2ac858 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55888b2ac740 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x55888b2ac7c0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x55888b2ac9a8 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x55888b2ac918 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x55888b2acd28 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x55888b2aca68 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x55888b2acae8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x55888b2acb60 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x55888b2acbe0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x55888b2ace40 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class CPUQueue
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   struct (anonymous struct at ../elements/standard/cpuqueue.hh:23:3) [1] _q
       152 |   unsigned int _last
       156 |   unsigned int _capacity
       160 |   unsigned int _drops
           | [sizeof=168, dsize=164, align=8,
           |  nvsize=164, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b05a650 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b05a768 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x55888b05a7f8 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x55888b05a8c8 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x55888b05a9b0 <line:58:5, col:32> col:12 operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b05abc8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55888b05aa70 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05ad78 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55888b05ac80 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55888b05aec0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x55888b05ae30 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x55888b05b008 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55888b05af78 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05b150 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x55888b05b0c0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05b218 <line:67:5, col:28> col:17 operator++ 'void ()' inline
|-CXXMethodDecl 0x55888b05b360 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x55888b05b2d0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55888b05b428 <line:69:5, col:28> col:17 operator-- 'void ()' inline
|-CXXMethodDecl 0x55888b05b570 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x55888b05b4e0 <col:28> col:31 'int'
|-CXXMethodDecl 0x55888b05b6e8 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55888b05b628 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05b830 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x55888b05b7a0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05b8f8 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x55888b05bab8 <line:75:5, col:69> col:21 compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55888b05b9a8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55888b05ba20 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05bd08 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55888b05bb78 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55888b05bbf0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55888b05bdb8 <col:86> "" ""
|-CXXMethodDecl 0x55888b05c028 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x55888b05be98 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x55888b05bf10 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05c1d8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55888b05c0e8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55888b05c388 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x55888b05c290 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x55888b05c658 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55888b05c440 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55888b05c4b8 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55888b05c530 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05c938 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x55888b05c720 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x55888b05c798 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55888b05c810 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55888b05c9f0 <col:115> "" ""
|-AccessSpecDecl 0x55888b05ca60 <line:84:3, col:10> col:3 private
|-FieldDecl 0x55888b05ca98 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b05dfb0 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55888b05dfb0
| `-ParmVarDecl 0x55888b05e0b8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x55888b05e158 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55888b05e158
| `-ParmVarDecl 0x55888b05e268 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x55888b093898 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55888b285690 <col:7>
|-CXXConstructorDecl 0x55888b093970 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x55888b093970
| `-ParmVarDecl 0x55888b093a88 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x55888b093af8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x55888b093af8
| `-ParmVarDecl 0x55888b093c08 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x55888b288090 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b274238 prev 0x55888b269440 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b274330 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x55888b274420 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x55888b274548 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x55888b2746c8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x55888b274848 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x55888b2749c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x55888b2857f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55888b286068 <col:11>
|-CXXDestructorDecl 0x55888b2858d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x55888b285a08 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55888b285a08
| `-ParmVarDecl 0x55888b285b18 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x55888b285bb8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55888b285bb8
| `-ParmVarDecl 0x55888b285cc8 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x55888b288a88 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x55888b288b98 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x55888b288e18 <col:11>
|   `-ReturnStmt 0x55888b288e08 <col:11>
|     `-UnaryOperator 0x55888b288df0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b288de0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x55888b288c08 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55888b288c08
  `-ParmVarDecl 0x55888b288d18 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b274a30 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b274b48 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x55888b274be8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x55888b274c50 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x55888b274cb8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x55888b274d20 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x55888b274d80 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x55888b274e40 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x55888b274ea0 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x55888b274f00 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x55888b285708 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x55888b274be8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x55888b286078 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x55888b2860d0 <col:12>
|-CXXConstructorDecl 0x55888b285d38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55888b285d38
| `-ParmVarDecl 0x55888b285e48 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x55888b285ee8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55888b285ee8
| `-ParmVarDecl 0x55888b285ff8 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x55888b288170 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b262b50 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55888b262c68 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x55888b262cf8 <col:16, col:22> col:16 public
|-EnumDecl 0x55888b262d20 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x55888b262e20 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x55888b262f00 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b262e00 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x55888b262de0 <col:21> 'int' 28
| `-EnumConstantDecl 0x55888b262eb0 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x55888b262f18 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b262e90 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x55888b262e70 <col:22> 'int' 64
|-CXXMethodDecl 0x55888b263258 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x55888b262f40 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55888b262fc0 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x55888b263038 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55888b2630b0 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55888b263318 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55888b263518 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x55888b263390 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x55888b263408 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55888b2635c8 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55888b263728 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x55888b263638 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55888b2637d0 <col:72> warn_unused_result ""
|-TypedefDecl 0x55888b263b30 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x55888b263ac0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x55888b263a60 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x55888b263a20 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x55888ad3a4e0 'void'
|       |-PointerType 0x55888afe2ef0 'unsigned char *'
|       | `-BuiltinType 0x55888ad3a5e0 'unsigned char'
|       |-TypedefType 0x55888addf4c0 'size_t' sugar
|       | |-Typedef 0x55888adaabe0 'size_t'
|       | `-BuiltinType 0x55888ad3a640 'unsigned long'
|       `-PointerType 0x55888ad3ace0 'void *'
|         `-BuiltinType 0x55888ad3a4e0 'void'
|-CXXMethodDecl 0x55888b263fa8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x55888b263ba0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x55888b263c18 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55888b263cb0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x55888b263d30 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x55888b27e6a0 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x55888b27e688 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x55888b27e650 <col:58> 'int' 0
| |-ParmVarDecl 0x55888b263db0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x55888b27e6c8 <col:76> 'int' 0
| |-ParmVarDecl 0x55888b263e30 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x55888b27e6e8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x55888b264078 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x55888b2640f8 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55888b2641b8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x55888b264258 <col:20>
| `-OptimizeNoneAttr 0x55888b2642b0 <col:30>
|-CXXMethodDecl 0x55888b264328 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x55888b2643c8 <col:20>
| `-OptimizeNoneAttr 0x55888b264420 <col:30>
|-CXXMethodDecl 0x55888b264498 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x55888b264538 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x55888b2645e8 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x55888b264688 <col:20>
| |-OptimizeNoneAttr 0x55888b2646e0 <col:30>
| `-WarnUnusedResultAttr 0x55888b264708 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x55888b264760 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x55888b264800 <col:20>
| `-OptimizeNoneAttr 0x55888b264858 <col:30>
|-CXXMethodDecl 0x55888b2648a8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x55888b264948 <col:20>
| `-OptimizeNoneAttr 0x55888b2649a0 <col:30>
|-CXXMethodDecl 0x55888b2649e8 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x55888b264a88 <col:20>
| `-OptimizeNoneAttr 0x55888b264ae0 <col:30>
|-CXXMethodDecl 0x55888b264b28 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b264be8 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b264cb0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55888b264d78 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55888b264e38 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b264f58 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x55888b27e7b0 <col:54, line:99:5>
|   `-ReturnStmt 0x55888b27e7a0 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x55888b27e788 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x55888b27e758 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55888b275238
|         `-CXXThisExpr 0x55888b27e748 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x55888b2650f8 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x55888b265008 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x55888b27e860 <col:67, line:103:5>
|   `-BinaryOperator 0x55888b27e840 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55888b27e7d8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55888b275238
|     | `-CXXThisExpr 0x55888b27e7c8 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55888b27e828 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x55888b27e808 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x55888b265008 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x55888b2651f0 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x55888b27e8e0 <col:33, line:107:5>
|   `-ReturnStmt 0x55888b27e8d0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x55888b27e8b8 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x55888b27e888 <col:16> 'void *' lvalue ->_destructor_argument 0x55888b2752a0
|         `-CXXThisExpr 0x55888b27e878 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55888b2652b0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x55888b27ef10 <col:25, line:113:5>
|   |-ParenExpr 0x55888b27ec58 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x55888b27ec28 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x55888b27e998 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x55888b27e970 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x55888b27e938 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x55888b27e908 <col:24> '<bound member function type>' ->shared 0x55888b264328
|   |   |       `-ImplicitCastExpr 0x55888b27e958 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x55888b27e8f8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x55888b27e9f8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b27e9d8 <col:42> 'int' 0
|   |   `-CallExpr 0x55888b27eb88 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x55888b27eb70 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b27eb50 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b27ebc8 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b27ea68 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x55888b27ebe0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b27ea90 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b27ebf8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b27eac8 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x55888b27ec10 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b27eb38 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b27eb20 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b27eae8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x55888b27ee58 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x55888b27ec88 <col:2> 'unsigned char *' lvalue ->_head 0x55888b275040
|   | | `-CXXThisExpr 0x55888b27ec78 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x55888b27ee40 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x55888b27ee20 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x55888b27ecc8 <col:10> 'unsigned char *' lvalue ->_data 0x55888b2750a8
|   |     | `-CXXThisExpr 0x55888b27ecb8 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x55888b27ee08 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x55888b27ede8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x55888b27ed08 <col:18> 'unsigned char *' lvalue ->_tail 0x55888b275110
|   |         | `-CXXThisExpr 0x55888b27ecf8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x55888b27edd0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x55888b27edb0 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x55888b27ed48 <col:26> 'unsigned char *' lvalue ->_end 0x55888b275178
|   |             | `-CXXThisExpr 0x55888b27ed38 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x55888b27ed98 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x55888b27ed78 <col:33> 'int' 0
|   `-BinaryOperator 0x55888b27eef0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x55888b27ee88 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x55888b275238
|     | `-CXXThisExpr 0x55888b27ee78 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x55888b27eed8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x55888b27eeb8 <col:16> 'int' 0
|-CXXMethodDecl 0x55888b2653f0 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55888b265360 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b265498 <col:20>
| |-OptimizeNoneAttr 0x55888b2654f0 <col:30>
| `-WarnUnusedResultAttr 0x55888b265518 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x55888b2655e8 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55888b265558 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b265690 <col:20>
| |-OptimizeNoneAttr 0x55888b2656e8 <col:30>
| `-WarnUnusedResultAttr 0x55888b265710 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x55888b265848 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55888b265750 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55888b2658f0 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x55888b2659f0 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x55888b265960 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b265a98 <col:20>
| `-OptimizeNoneAttr 0x55888b265af0 <col:30>
|-CXXMethodDecl 0x55888b265bb8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x55888b265b28 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55888b265c60 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x55888b265d60 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x55888b265cd0 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x55888b265e08 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x55888b265f08 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x55888b265e78 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b265fb0 <col:20>
| `-OptimizeNoneAttr 0x55888b266008 <col:30>
|-CXXMethodDecl 0x55888b266198 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x55888b266048 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x55888b2660c0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x55888b27e708 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x55888b266248 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x55888b266448 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55888b2662c0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x55888b266338 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b266658 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x55888b266508 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55888b266580 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b266868 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x55888b266718 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x55888b266798 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x55888b27e718 <col:39> 'int' 0
|-CXXMethodDecl 0x55888b266938 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x55888b266a00 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x55888b266ac8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x55888b266b88 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b266c50 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x55888b266d98 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x55888b266d08 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x55888b266f68 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55888b266e58 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x55888b266ed0 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b267038 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x55888b2670f8 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x55888b267198 <col:20>
| `-OptimizeNoneAttr 0x55888b2671f0 <col:30>
|-CXXMethodDecl 0x55888b267240 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55888b2672e0 <col:20>
| `-OptimizeNoneAttr 0x55888b267338 <col:30>
|-CXXMethodDecl 0x55888b267388 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x55888b267448 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b267510 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x55888b2675b0 <col:20>
| `-OptimizeNoneAttr 0x55888b267608 <col:30>
|-CXXMethodDecl 0x55888b267758 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x55888b267648 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x55888b2676c0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b2678a8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x55888b267818 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b267980 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x55888b267a40 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x55888b267ae0 <col:20>
| `-OptimizeNoneAttr 0x55888b267b38 <col:30>
|-CXXMethodDecl 0x55888b267b88 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x55888b267c28 <col:20>
| `-OptimizeNoneAttr 0x55888b267c80 <col:30>
|-CXXMethodDecl 0x55888b267cd0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x55888b267d98 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x55888b267e38 <col:20>
| `-OptimizeNoneAttr 0x55888b267e90 <col:30>
|-CXXMethodDecl 0x55888b267ed8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x55888b267ff8 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x55888b268168 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x55888b2680a8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x55888b268258 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x55888b2682f8 <col:20>
| `-OptimizeNoneAttr 0x55888b268350 <col:30>
|-CXXMethodDecl 0x55888b2683a0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x55888b268460 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b268698 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x55888b268510 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x55888b268588 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b268748 <col:20>
| `-OptimizeNoneAttr 0x55888b2687a0 <col:30>
|-CXXMethodDecl 0x55888b268848 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x55888b2688e8 <col:20>
| `-OptimizeNoneAttr 0x55888b268940 <col:30>
|-CXXMethodDecl 0x55888b268990 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x55888b268a30 <col:20>
| `-OptimizeNoneAttr 0x55888b268a88 <col:30>
|-CXXMethodDecl 0x55888b268ad0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x55888b268b70 <col:20>
| `-OptimizeNoneAttr 0x55888b268bc8 <col:30>
|-CXXMethodDecl 0x55888b268cc8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x55888b268c00 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x55888b268d70 <col:20>
| `-OptimizeNoneAttr 0x55888b268dc8 <col:30>
|-CXXMethodDecl 0x55888b268f88 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x55888b268e00 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x55888b268e78 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b269038 <col:20>
| `-OptimizeNoneAttr 0x55888b269090 <col:30>
|-CXXMethodDecl 0x55888b269138 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x55888b269258 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x55888b269378 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x55888b269418 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x55888b269440 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x55888b269568 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x55888b269608 <col:20>
| `-OptimizeNoneAttr 0x55888b269660 <col:30>
|-CXXMethodDecl 0x55888b269708 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x55888b2697a8 <col:20>
| `-OptimizeNoneAttr 0x55888b269800 <col:30>
|-AccessSpecDecl 0x55888b269828 <line:344:3, col:9> col:3 public
|-EnumDecl 0x55888b269850 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x55888b269950 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x55888b2699a0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b269930 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x55888b269910 <col:14> 'int' 48
|-CXXMethodDecl 0x55888b269a08 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x55888b269aa8 <col:20>
| `-OptimizeNoneAttr 0x55888b269b00 <col:30>
|-CXXMethodDecl 0x55888b269b78 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x55888b269c18 <col:20>
| `-OptimizeNoneAttr 0x55888b269c70 <col:30>
|-CXXMethodDecl 0x55888b269d38 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x55888b269ca8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x55888b269ed8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x55888b26a078 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x55888b269f88 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x55888b26a120 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x55888b26a220 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55888b26a5d0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26a200 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x55888b26a1e0 <col:9> 'int' 0
| |-EnumConstantDecl 0x55888b26a2b0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55888b26a5e8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26a290 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x55888b26a270 <col:14> 'int' 1
| |-EnumConstantDecl 0x55888b26a340 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55888b26a600 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26a320 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x55888b26a300 <col:14> 'int' 2
| |-EnumConstantDecl 0x55888b26a3d0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55888b26a618 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26a3b0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x55888b26a390 <col:14> 'int' 3
| |-EnumConstantDecl 0x55888b26a460 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55888b26a630 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26a440 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x55888b26a420 <col:13> 'int' 4
| |-EnumConstantDecl 0x55888b26a4f0 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x55888b26a648 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26a4d0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x55888b26a4b0 <col:13> 'int' 5
| `-EnumConstantDecl 0x55888b26a580 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x55888b26a660 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b26a560 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x55888b26a540 <col:14> 'int' 6
|-CXXMethodDecl 0x55888b26a6c8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x55888b26a768 <col:20>
| `-OptimizeNoneAttr 0x55888b26a7c0 <col:30>
|-CXXMethodDecl 0x55888b26a8b8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x55888b26a7f8 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x55888b26a960 <col:20>
| `-OptimizeNoneAttr 0x55888b26a9b8 <col:30>
|-CXXMethodDecl 0x55888b26aa28 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x55888b26ab50 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x55888b26acc8 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x55888b26ac00 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x55888b26ad90 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x55888b26ae58 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x55888b26af98 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x55888b26af08 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x55888b26b040 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x55888b26b140 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55888b26b340 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26b120 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x55888b26b100 <col:23> 'int' 0
| |-EnumConstantDecl 0x55888b26b1d0 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55888b26b358 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26b1b0 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x55888b26b190 <col:45> 'int' 4
| |-EnumConstantDecl 0x55888b26b260 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x55888b26b370 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26b240 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x55888b26b220 <col:24> 'int' 0
| `-EnumConstantDecl 0x55888b26b2f0 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x55888b26b388 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b26b2d0 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x55888b26b2b0 <col:47> 'int' 16
|-CXXMethodDecl 0x55888b26b3e8 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x55888b26b558 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x55888b26b498 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x55888b26b600 <col:20>
| `-OptimizeNoneAttr 0x55888b26b658 <col:30>
|-CXXMethodDecl 0x55888b26b6a8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x55888b27f030 <col:18, col:36>
|   `-ReturnStmt 0x55888b27f020 <col:20, col:33>
|     `-ImplicitCastExpr 0x55888b27f008 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x55888b27efe8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x55888b27efb8 <col:27> '<bound member function type>' ->xanno 0x55888b269708
|           `-CXXThisExpr 0x55888b27efa8 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x55888b26b7a0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x55888b27f140 <col:30, col:48>
|   `-ReturnStmt 0x55888b27f130 <col:32, col:45>
|     `-ImplicitCastExpr 0x55888b27f118 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x55888b27f0f8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x55888b27f0c8 <col:39> '<bound member function type>' ->xanno 0x55888b269568
|           `-CXXThisExpr 0x55888b27f0b8 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x55888b26b888 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x55888b27f2d8 <col:24, col:50>
|   `-ReturnStmt 0x55888b27f2c8 <col:26, col:47>
|     `-UnaryOperator 0x55888b27f2b0 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55888b27f290 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x55888b27f278 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55888b27f228 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x55888b274548
|         |   `-CXXMemberCallExpr 0x55888b27f208 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x55888b27f1d8 <col:34> '<bound member function type>' ->xanno 0x55888b269708
|         |       `-CXXThisExpr 0x55888b27f1c8 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x55888b27f258 <col:46> 'int' 0
|-CXXMethodDecl 0x55888b26b990 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x55888b27f4a8 <col:36, col:62>
|   `-ReturnStmt 0x55888b27f498 <col:38, col:59>
|     `-UnaryOperator 0x55888b27f480 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55888b27f460 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55888b27f448 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55888b27f3c0 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x55888b274548
|         |   `-CXXMemberCallExpr 0x55888b27f3a0 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55888b27f370 <col:46> '<bound member function type>' ->xanno 0x55888b269568
|         |       `-CXXThisExpr 0x55888b27f360 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55888b27f3f0 <col:58> 'int' 0
|-CXXMethodDecl 0x55888b26baa8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x55888b27f640 <col:26, col:53>
|   `-ReturnStmt 0x55888b27f630 <col:28, col:50>
|     `-UnaryOperator 0x55888b27f618 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55888b27f5f8 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x55888b27f5e0 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55888b27f590 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x55888b274848
|         |   `-CXXMemberCallExpr 0x55888b27f570 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x55888b27f540 <col:36> '<bound member function type>' ->xanno 0x55888b269708
|         |       `-CXXThisExpr 0x55888b27f530 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x55888b27f5c0 <col:49> 'int' 0
|-CXXMethodDecl 0x55888b26bbc8 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x55888b27f818 <col:38, col:65>
|   `-ReturnStmt 0x55888b27f808 <col:40, col:62>
|     `-UnaryOperator 0x55888b27f7f0 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x55888b27f7d0 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x55888b27f7b8 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55888b27f728 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x55888b274848
|         |   `-CXXMemberCallExpr 0x55888b27f708 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55888b27f6d8 <col:48> '<bound member function type>' ->xanno 0x55888b269568
|         |       `-CXXThisExpr 0x55888b27f6c8 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x55888b27f758 <col:61> 'int' 0
|-CXXMethodDecl 0x55888b26bd78 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x55888b26bc80 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x55888b27fee8 <col:34, line:463:5>
|   |-ParenExpr 0x55888b27fd30 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x55888b27fd00 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55888b27f968 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b27f938 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b27f888 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b27f870 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b27f830 <col:23> 'int' lvalue ParmVar 0x55888b26bc80 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b27f850 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b27f918 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b27f8e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b27f8a8 <col:33> 'int' lvalue ParmVar 0x55888b26bc80 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55888b27f900 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55888b27f8c8 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55888b27f9c8 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b27f9a8 <col:56> 'int' 0
|   |   `-CallExpr 0x55888b27fc60 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55888b27fc48 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b27fc28 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b27fca0 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b27fab8 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55888b27fcb8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b27fae8 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b27fcd0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b27fb20 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x55888b27fce8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b27fc10 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b27fbf8 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b27fbb8 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x55888b27fed8 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x55888b27fec0 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x55888b27fea0 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x55888b27fe70 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x55888b27fe20 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x55888b274548
|         |   `-CXXMemberCallExpr 0x55888b27fe00 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x55888b27fdd0 <col:9> '<bound member function type>' ->xanno 0x55888b269568
|         |       `-CXXThisExpr 0x55888b27fdc0 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x55888b27fe88 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x55888b27fe50 <col:21> 'int' lvalue ParmVar 0x55888b26bc80 'i' 'int'
|-CXXMethodDecl 0x55888b26bfc8 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x55888b26be38 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x55888b26beb0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x55888b280578 <col:40, line:472:5>
|   |-ParenExpr 0x55888b280390 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x55888b280360 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x55888b280040 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b280010 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b27ff60 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b27ff48 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b27ff08 <col:23> 'int' lvalue ParmVar 0x55888b26be38 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b27ff28 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b27fff0 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b27ffc0 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b27ff80 <col:33> 'int' lvalue ParmVar 0x55888b26be38 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x55888b27ffd8 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x55888b27ffa0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x55888b2800a0 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b280080 <col:56> 'int' 0
|   |   `-CallExpr 0x55888b2802c0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x55888b2802a8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b280288 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b280300 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b280110 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x55888b280318 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b280140 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b280330 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b280178 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x55888b280348 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b280270 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b280258 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b280218 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x55888b280558 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x55888b280500 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x55888b2804d0 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x55888b280480 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x55888b274548
|     | |   `-CXXMemberCallExpr 0x55888b280460 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x55888b280430 <col:2> '<bound member function type>' ->xanno 0x55888b269708
|     | |       `-CXXThisExpr 0x55888b280420 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x55888b2804e8 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x55888b2804b0 <col:14> 'int' lvalue ParmVar 0x55888b26be38 'i' 'int'
|     `-ImplicitCastExpr 0x55888b280540 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x55888b280520 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x55888b26beb0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x55888b26c188 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x55888b26c090 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55888b280cf8 <col:36, line:485:5>
|   |-ParenExpr 0x55888b280a60 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b280a30 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b280710 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b2806e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b2805f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b2805d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b280598 <col:23> 'int' lvalue ParmVar 0x55888b26c090 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b2805b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b2806c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b2806a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b280610 <col:33> 'int' lvalue ParmVar 0x55888b26c090 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b280688 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b280670 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b280630 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b280650 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55888b280770 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b280750 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b280990 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b280978 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b280958 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b2809d0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2807e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55888b2809e8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b280818 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b280a00 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b280850 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x55888b280a18 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b280940 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b280928 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b2808e8 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x55888b280ce8 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x55888b280cd0 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x55888b280cb8 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55888b280c88 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x55888b280c28 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55888b280bf8 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55888b280b70 <col:61, col:70> 'char const[48]' lvalue ->c 0x55888b274420
|             |   `-CXXMemberCallExpr 0x55888b280b50 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55888b280b20 <col:61> '<bound member function type>' ->xanno 0x55888b269568
|             |       `-CXXThisExpr 0x55888b280b10 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55888b280c10 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55888b280ba0 <col:74> 'int' lvalue ParmVar 0x55888b26c090 'i' 'int'
|-CXXMethodDecl 0x55888b26c3d8 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x55888b26c248 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55888b26c2c0 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x55888b281448 <col:42, line:500:5>
|   |-ParenExpr 0x55888b2811e0 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b2811b0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b280e90 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b280e60 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b280d70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b280d58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b280d18 <col:23> 'int' lvalue ParmVar 0x55888b26c248 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b280d38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b280e40 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b280e28 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b280d90 <col:33> 'int' lvalue ParmVar 0x55888b26c248 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b280e08 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b280df0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b280db0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b280dd0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55888b280ef0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b280ed0 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b281110 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b2810f8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b2810d8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b281150 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b280f60 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55888b281168 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b280f98 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b281180 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b280fd0 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x55888b281198 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b2810c0 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b2810a8 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b281068 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x55888b281428 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x55888b2813d8 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55888b2813a8 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x55888b281350 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55888b281320 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55888b2812d0 <col:48, col:57> 'char [48]' lvalue ->c 0x55888b274420
|     |     |   `-CXXMemberCallExpr 0x55888b2812b0 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55888b281280 <col:48> '<bound member function type>' ->xanno 0x55888b269708
|     |     |       `-CXXThisExpr 0x55888b281270 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55888b281338 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55888b281300 <col:61> 'int' lvalue ParmVar 0x55888b26c248 'i' 'int'
|     `-ImplicitCastExpr 0x55888b281410 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x55888b2813f0 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x55888b26c2c0 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x55888b26c598 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x55888b26c4a0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55888b281ba8 <col:35, line:513:5>
|   |-ParenExpr 0x55888b2818b8 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b281888 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b2815e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b2815b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b2814c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b2814a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b281468 <col:23> 'int' lvalue ParmVar 0x55888b26c4a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b281488 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b281590 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b281578 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b2814e0 <col:33> 'int' lvalue ParmVar 0x55888b26c4a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b281558 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b281540 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b281500 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b281520 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55888b281640 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b281620 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b2817e8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b2817d0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b2817b0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b281828 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2816b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55888b281840 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2816e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b281858 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b281720 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x55888b281870 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b281798 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b281780 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b281740 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x55888b281b98 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x55888b281b80 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x55888b281b68 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55888b281b38 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x55888b281ab0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55888b281a80 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55888b281a30 <col:60, col:69> 'char const[48]' lvalue ->c 0x55888b274420
|             |   `-CXXMemberCallExpr 0x55888b281a10 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55888b2819e0 <col:60> '<bound member function type>' ->xanno 0x55888b269568
|             |       `-CXXThisExpr 0x55888b2819d0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55888b281a98 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55888b281a60 <col:73> 'int' lvalue ParmVar 0x55888b26c4a0 'i' 'int'
|-CXXMethodDecl 0x55888b26c7e8 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x55888b26c658 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55888b26c6d0 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x55888b2822c8 <col:41, line:528:5>
|   |-ParenExpr 0x55888b282050 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b282020 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b281d40 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b281d10 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b281c20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b281c08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b281bc8 <col:23> 'int' lvalue ParmVar 0x55888b26c658 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b281be8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b281cf0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b281cd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b281c40 <col:33> 'int' lvalue ParmVar 0x55888b26c658 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b281cb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b281ca0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b281c60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b281c80 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x55888b281da0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b281d80 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b281f80 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b281f68 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b281f48 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b281fc0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b281e10 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x55888b281fd8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b281e48 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b281ff0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b281e80 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x55888b282008 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b281f30 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b281f18 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b281ed8 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x55888b2822a8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x55888b282258 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55888b282228 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x55888b2821d0 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55888b282190 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55888b282140 <col:47, col:56> 'char [48]' lvalue ->c 0x55888b274420
|     |     |   `-CXXMemberCallExpr 0x55888b282120 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55888b2820f0 <col:47> '<bound member function type>' ->xanno 0x55888b269708
|     |     |       `-CXXThisExpr 0x55888b2820e0 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55888b2821a8 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55888b282170 <col:60> 'int' lvalue ParmVar 0x55888b26c658 'i' 'int'
|     `-ImplicitCastExpr 0x55888b282290 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x55888b282270 <col:65> 'int16_t':'short' lvalue ParmVar 0x55888b26c6d0 'x' 'int16_t':'short'
|-CXXMethodDecl 0x55888b26c9a8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x55888b26c8b0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55888b282998 <col:36, line:541:5>
|   |-ParenExpr 0x55888b282738 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b282708 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b282460 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b282430 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b282340 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b282328 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b2822e8 <col:23> 'int' lvalue ParmVar 0x55888b26c8b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b282308 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b282410 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b2823f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b282360 <col:33> 'int' lvalue ParmVar 0x55888b26c8b0 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b2823d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b2823c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b282380 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b2823a0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55888b2824c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b2824a0 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b282668 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b282650 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b282630 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b2826a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b282530 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55888b2826c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b282568 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b2826d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b2825a0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x55888b2826f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b282618 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b282600 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b2825c0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x55888b282988 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x55888b282970 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x55888b282958 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55888b282928 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x55888b2828d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55888b2828a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55888b282850 <col:61, col:70> 'char const[48]' lvalue ->c 0x55888b274420
|             |   `-CXXMemberCallExpr 0x55888b282830 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55888b282800 <col:61> '<bound member function type>' ->xanno 0x55888b269568
|             |       `-CXXThisExpr 0x55888b2827f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55888b2828b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55888b282880 <col:74> 'int' lvalue ParmVar 0x55888b26c8b0 'i' 'int'
|-CXXMethodDecl 0x55888b26cb78 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x55888b26ca68 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x55888b26cae0 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x55888b26cc28 <col:20>
| `-OptimizeNoneAttr 0x55888b26cc80 <col:30>
|-CXXMethodDecl 0x55888b26cdb8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x55888b26ccc0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x55888b283068 <col:35, line:562:5>
|   |-ParenExpr 0x55888b282e08 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b282dd8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b282b30 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b282b00 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b282a10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b2829f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b2829b8 <col:23> 'int' lvalue ParmVar 0x55888b26ccc0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b2829d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b282ae0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b282ac8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b282a30 <col:33> 'int' lvalue ParmVar 0x55888b26ccc0 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b282aa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b282a90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b282a50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b282a70 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55888b282b90 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b282b70 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b282d38 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b282d20 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b282d00 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b282d78 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b282c00 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55888b282d90 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b282c38 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b282da8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b282c70 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x55888b282dc0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b282ce8 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b282cd0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b282c90 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x55888b283058 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x55888b283040 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x55888b283028 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55888b282ff8 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x55888b282fa0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x55888b282f70 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55888b282f20 <col:60, col:69> 'char const[48]' lvalue ->c 0x55888b274420
|             |   `-CXXMemberCallExpr 0x55888b282f00 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55888b282ed0 <col:60> '<bound member function type>' ->xanno 0x55888b269568
|             |       `-CXXThisExpr 0x55888b282ec0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55888b282f88 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55888b282f50 <col:73> 'int' lvalue ParmVar 0x55888b26ccc0 'i' 'int'
|-CXXMethodDecl 0x55888b26cfc8 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x55888b26ce78 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55888b26cef0 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x55888b283748 <col:41, line:577:5>
|   |-ParenExpr 0x55888b2834d8 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b2834a8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b283200 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b2831d0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b2830e0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b2830c8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b283088 <col:23> 'int' lvalue ParmVar 0x55888b26ce78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b2830a8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b2831b0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b283198 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b283100 <col:33> 'int' lvalue ParmVar 0x55888b26ce78 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b283178 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b283160 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b283120 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b283140 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x55888b283260 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b283240 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b283408 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b2833f0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b2833d0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b283448 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2832d0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x55888b283460 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b283308 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b283478 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b283340 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x55888b283490 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b2833b8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b2833a0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b283360 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x55888b283728 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x55888b2836d8 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55888b2836a8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x55888b283648 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55888b283618 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55888b2835c8 <col:47, col:56> 'char [48]' lvalue ->c 0x55888b274420
|     |     |   `-CXXMemberCallExpr 0x55888b2835a8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55888b283578 <col:47> '<bound member function type>' ->xanno 0x55888b269708
|     |     |       `-CXXThisExpr 0x55888b283568 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55888b283630 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55888b2835f8 <col:60> 'int' lvalue ParmVar 0x55888b26ce78 'i' 'int'
|     `-ImplicitCastExpr 0x55888b283710 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x55888b2836f0 <col:65> 'int32_t':'int' lvalue ParmVar 0x55888b26cef0 'x' 'int32_t':'int'
|-CXXMethodDecl 0x55888b26d188 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x55888b26d090 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x55888b283e78 <col:36, line:591:5>
|   |-ParenExpr 0x55888b283bb8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b283b88 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b2838e0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b2838b0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b2837c0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b2837a8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b283768 <col:23> 'int' lvalue ParmVar 0x55888b26d090 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b283788 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b283890 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b283878 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b2837e0 <col:33> 'int' lvalue ParmVar 0x55888b26d090 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b283858 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b283840 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b283800 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b283820 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55888b283940 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b283920 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b283ae8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b283ad0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b283ab0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b283b28 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2839b0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55888b283b40 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2839e8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b283b58 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b283a20 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x55888b283b70 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b283a98 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b283a80 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b283a40 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x55888b283e68 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x55888b283e50 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x55888b283e38 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55888b283e08 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x55888b283d80 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x55888b283d50 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55888b283d00 <col:61, col:70> 'char const[48]' lvalue ->c 0x55888b274420
|             |   `-CXXMemberCallExpr 0x55888b283ce0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55888b283cb0 <col:61> '<bound member function type>' ->xanno 0x55888b269568
|             |       `-CXXThisExpr 0x55888b283ca0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55888b283d68 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55888b283d30 <col:74> 'int' lvalue ParmVar 0x55888b26d090 'i' 'int'
|-CXXMethodDecl 0x55888b26d3d8 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x55888b26d248 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55888b26d2c0 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x55888b284558 <col:42, line:606:5>
|   |-ParenExpr 0x55888b2842e8 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x55888b2842b8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x55888b284010 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b283fe0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b283ef0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b283ed8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b283e98 <col:23> 'int' lvalue ParmVar 0x55888b26d248 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b283eb8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b283fc0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x55888b283fa8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b283f10 <col:33> 'int' lvalue ParmVar 0x55888b26d248 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b283f88 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b283f70 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b283f30 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x55888b283f50 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x55888b284070 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b284050 <col:60> 'int' 0
|   |   `-CallExpr 0x55888b284218 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x55888b284200 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b2841e0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b284258 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2840e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x55888b284270 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b284118 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b284288 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b284150 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x55888b2842a0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b2841c8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b2841b0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b284170 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x55888b284538 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x55888b2844e8 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55888b2844b8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x55888b284458 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55888b284428 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55888b2843d8 <col:48, col:57> 'char [48]' lvalue ->c 0x55888b274420
|     |     |   `-CXXMemberCallExpr 0x55888b2843b8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55888b284388 <col:48> '<bound member function type>' ->xanno 0x55888b269708
|     |     |       `-CXXThisExpr 0x55888b284378 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55888b284440 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55888b284408 <col:61> 'int' lvalue ParmVar 0x55888b26d248 'i' 'int'
|     `-ImplicitCastExpr 0x55888b284520 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x55888b284500 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x55888b26d2c0 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x55888b26d570 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x55888b26d4a0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x55888b284dc8 <col:33, line:620:5>
|   |-ParenExpr 0x55888b284b40 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x55888b284b10 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55888b284760 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b284730 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b2845d0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b2845b8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b284578 <col:23> 'int' lvalue ParmVar 0x55888b26d4a0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b284598 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b284710 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55888b2846f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b2845f0 <col:33> 'int' lvalue ParmVar 0x55888b26d4a0 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b2846d8 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b2846c0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b284610 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55888b284698 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55888b284680 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55888b284648 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55888b2847c0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b2847a0 <col:79> 'int' 0
|   |   `-CallExpr 0x55888b284a70 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55888b284a58 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b284a38 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b284ab0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2848a8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55888b284ac8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2848f0 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b284ae0 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b284928 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x55888b284af8 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b284a20 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b284a08 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b2849c8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x55888b284db8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x55888b284da0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x55888b284d88 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x55888b284d58 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x55888b284cd0 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x55888b284ca0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x55888b284c50 <col:67, col:76> 'char const[48]' lvalue ->c 0x55888b274420
|             |   `-CXXMemberCallExpr 0x55888b284c30 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x55888b284c00 <col:67> '<bound member function type>' ->xanno 0x55888b269568
|             |       `-CXXThisExpr 0x55888b284bf0 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x55888b284cb8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x55888b284c80 <col:80> 'int' lvalue ParmVar 0x55888b26d4a0 'i' 'int'
|-CXXMethodDecl 0x55888b26d788 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x55888b26d630 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x55888b26d6b0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x55888b2855f0 <col:45, line:635:5>
|   |-ParenExpr 0x55888b285338 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x55888b285308 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x55888b284fd0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x55888b284fa0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x55888b284e40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x55888b284e28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x55888b284de8 <col:23> 'int' lvalue ParmVar 0x55888b26d630 'i' 'int'
|   |   |   | `-IntegerLiteral 0x55888b284e08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x55888b284f80 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x55888b284f68 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x55888b284e60 <col:33> 'int' lvalue ParmVar 0x55888b26d630 'i' 'int'
|   |   |     `-BinaryOperator 0x55888b284f48 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x55888b284f30 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x55888b284e80 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x55888b269950 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x55888b284f08 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x55888b284ef0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x55888b284eb8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x55888b285030 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x55888b285010 <col:79> 'int' 0
|   |   `-CallExpr 0x55888b285268 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x55888b285250 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x55888b285230 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x55888b2852a8 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2850a0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x55888b2852c0 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x55888b2850e8 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x55888b2852d8 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x55888b285120 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x55888b2852f0 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x55888b285218 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x55888b285200 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x55888b2851b8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x55888b2855d0 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x55888b285538 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x55888b285508 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x55888b2854a8 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x55888b285478 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x55888b285428 <col:54, col:63> 'char [48]' lvalue ->c 0x55888b274420
|     |     |   `-CXXMemberCallExpr 0x55888b285408 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x55888b2853d8 <col:54> '<bound member function type>' ->xanno 0x55888b269708
|     |     |       `-CXXThisExpr 0x55888b2853c8 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x55888b285490 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x55888b285458 <col:67> 'int' lvalue ParmVar 0x55888b26d630 'i' 'int'
|     `-CXXConstCastExpr 0x55888b2855a0 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x55888b285588 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x55888b285550 <col:91> 'const void *' lvalue ParmVar 0x55888b26d6b0 'x' 'const void *'
|-CXXMethodDecl 0x55888b26d858 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x55888b285678 <col:34, line:640:5>
|   `-ReturnStmt 0x55888b285668 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x55888b285650 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x55888b285620 <col:16> 'Packet *' lvalue ->_data_packet 0x55888b274fd8
|         `-CXXThisExpr 0x55888b285610 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x55888b26d998 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x55888b26d908 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55888b27e738 <col:46> 'bool' true
|-CXXMethodDecl 0x55888b26db18 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x55888b26da50 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x55888b26dbc0 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x55888b26e370 <line:660:22> "" ""
| |-EnumConstantDecl 0x55888b26dcc0 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e3e0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26dca0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x55888b26dc80 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55888b262e20 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55888b26dd50 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e3f8 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26dd30 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x55888b26dd10 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x55888b262eb0 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x55888b26dde0 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e410 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26ddc0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55888b26dda0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55888b26de70 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e428 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26de50 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x55888b26de30 <col:19> 'int' 16
| |-EnumConstantDecl 0x55888b26df00 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e440 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26dee0 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x55888b26dec0 <col:21> 'int' 16
| |-EnumConstantDecl 0x55888b26df90 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e458 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26df70 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55888b26df50 <col:19> 'int' 32
| |-EnumConstantDecl 0x55888b26e020 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e470 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26e000 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x55888b26dfe0 <col:19> 'int' EnumConstant 0x55888b26de70 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55888b26e0b0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e488 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26e090 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x55888b26e070 <col:19> 'int' EnumConstant 0x55888b26df90 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x55888b26e180 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e4a0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26e160 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x55888b26e140 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55888b26e100 <col:23> 'int' EnumConstant 0x55888b26e0b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55888b26e120 <col:40> 'int' 2
| |-EnumConstantDecl 0x55888b26e250 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x55888b26e4b8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b26e230 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x55888b26e210 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x55888b26e1d0 <col:23> 'int' EnumConstant 0x55888b26e0b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x55888b26e1f0 <col:40> 'int' 4
| `-EnumConstantDecl 0x55888b26e320 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x55888b26e4d0 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b26e300 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x55888b26e2e0 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x55888b26e2a0 <col:23> 'int' EnumConstant 0x55888b26e0b0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x55888b26e2c0 <col:40> 'int' 8
|-CXXMethodDecl 0x55888b26e510 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x55888b26e5b0 <col:68> "" ""
|-CXXMethodDecl 0x55888b26e648 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x55888b26e6e8 <col:45> "" ""
|-CXXMethodDecl 0x55888b26e780 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55888b26e820 <col:57> "" ""
|-CXXMethodDecl 0x55888b26e8b8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x55888b26e958 <col:45> "" ""
|-CXXMethodDecl 0x55888b26e9f0 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x55888b26ea90 <col:57> "" ""
|-CXXMethodDecl 0x55888b26eb20 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x55888b26ebc0 <col:51> "" ""
|-CXXMethodDecl 0x55888b26ec50 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55888b26ecf0 <col:63> "" ""
|-CXXMethodDecl 0x55888b26ed80 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x55888b26ee20 <col:53> "" ""
|-CXXMethodDecl 0x55888b26eeb0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55888b26ef50 <col:65> "" ""
|-CXXMethodDecl 0x55888b26f068 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55888b26efd8 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x55888b26f110 <col:61> "" ""
|-CXXMethodDecl 0x55888b26f2a8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55888b26f198 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x55888b26f210 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55888b26f358 <col:67> "" ""
|-CXXMethodDecl 0x55888b26f470 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55888b26f3e0 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55888b26f518 <col:63> "" ""
|-CXXMethodDecl 0x55888b26f6b0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55888b26f5a0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55888b26f618 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55888b26f760 <col:69> "" ""
|-CXXMethodDecl 0x55888b26f878 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55888b26f7e8 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55888b26f920 <col:63> "" ""
|-CXXMethodDecl 0x55888b271ff8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55888b271ee8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55888b271f60 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55888b2720a8 <col:69> "" ""
|-CXXMethodDecl 0x55888b2721c0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x55888b272130 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x55888b272268 <col:62> "" ""
|-CXXMethodDecl 0x55888b272400 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55888b2722f0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55888b272368 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x55888b2724b0 <col:68> "" ""
|-CXXMethodDecl 0x55888b2725c8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x55888b272538 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x55888b272670 <col:63> "" ""
|-CXXMethodDecl 0x55888b272808 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x55888b2726f8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x55888b272770 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x55888b2728b8 <col:69> "" ""
|-CXXMethodDecl 0x55888b272948 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x55888b2729e8 <col:64> "" ""
|-CXXMethodDecl 0x55888b272a78 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x55888b272b18 <col:52> "" ""
|-CXXMethodDecl 0x55888b272ba8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x55888b272c48 <col:67> "" ""
|-CXXMethodDecl 0x55888b272cd8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x55888b272d78 <col:55> "" ""
|-CXXMethodDecl 0x55888b272e90 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x55888b272e00 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55888b272f38 <col:58> "" ""
|-CXXMethodDecl 0x55888b2730d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x55888b272fc0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55888b273038 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x55888b273180 <col:62> "" ""
|-CXXMethodDecl 0x55888b273298 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x55888b273208 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55888b273340 <col:58> "" ""
|-CXXMethodDecl 0x55888b2734d8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x55888b2733c8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55888b273440 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x55888b273588 <col:62> "" ""
|-CXXMethodDecl 0x55888b2736a0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x55888b273610 <col:34> col:37 'int'
| `-DeprecatedAttr 0x55888b273748 <col:60> "" ""
|-CXXMethodDecl 0x55888b2738e0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x55888b2737d0 <col:34> col:37 'int'
| |-ParmVarDecl 0x55888b273848 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x55888b273990 <col:64> "" ""
|-CXXMethodDecl 0x55888b273aa8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x55888b273a18 <col:32> col:35 'int'
| `-DeprecatedAttr 0x55888b273b50 <col:58> "" ""
|-CXXMethodDecl 0x55888b273ce8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x55888b273bd8 <col:33> col:36 'int'
| |-ParmVarDecl 0x55888b273c50 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x55888b273d98 <col:62> "" ""
|-CXXMethodDecl 0x55888b273eb0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x55888b273e20 <col:33> col:36 'int'
| `-DeprecatedAttr 0x55888b273f58 <col:59> "" ""
|-CXXMethodDecl 0x55888b2740f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x55888b273fe0 <col:33> col:36 'int'
| |-ParmVarDecl 0x55888b274058 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x55888b2741a0 <col:63> "" ""
|-AccessSpecDecl 0x55888b274210 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x55888b274238 prev 0x55888b269440 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55888b274330 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x55888b274420 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x55888b274548 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x55888b2746c8 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x55888b274848 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x55888b2749c8 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x55888b2857f8 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55888b286068 <col:11>
| |-CXXDestructorDecl 0x55888b2858d0 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x55888b285a08 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x55888b285a08
| | `-ParmVarDecl 0x55888b285b18 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x55888b285bb8 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55888b285bb8
| | `-ParmVarDecl 0x55888b285cc8 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x55888b288a88 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55888b288b98 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x55888b288e18 <col:11>
| |   `-ReturnStmt 0x55888b288e08 <col:11>
| |     `-UnaryOperator 0x55888b288df0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55888b288de0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x55888b288c08 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x55888b288c08
|   `-ParmVarDecl 0x55888b288d18 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x55888b274a30 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55888b274b48 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x55888b274be8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x55888b274c50 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x55888b274cb8 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x55888b274d20 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x55888b274d80 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x55888b274e40 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x55888b274ea0 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x55888b274f00 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x55888b285708 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x55888b274be8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x55888b286078 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x55888b2860d0 <col:12>
| |-CXXConstructorDecl 0x55888b285d38 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x55888b285d38
| | `-ParmVarDecl 0x55888b285e48 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x55888b285ee8 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x55888b285ee8
| | `-ParmVarDecl 0x55888b285ff8 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x55888b288170 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x55888b274f78 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x55888b274fd8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x55888b275040 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x55888b2750a8 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x55888b275110 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x55888b275178 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x55888b2751d8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x55888b275238 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x55888b2752a0 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x55888b275328 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x55888b274f78 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x55888b2856a0 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55888b2751d8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x55888b2860e0 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x55888b286140 <col:21, line:755:5>
|-CXXConstructorDecl 0x55888b2754c8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x55888b275408 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x55888b2755c0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x55888b2757a8 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x55888b2756b0 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x55888b275a78 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x55888b275860 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x55888b2758d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x55888b275950 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b275c98 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x55888b275b48 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x55888b275bc0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x55888b27e278 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x55888b275d58 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x55888b275dd0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x55888b275e48 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x55888b27e3d0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55888b27e340 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x55888b27e518 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x55888b27e488 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x55888b27e610 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b2b4778 <../elements/standard/cpuqueue.hh:23:3, line:28:3> line:23:3 struct definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x55888b2b48e0 <line:24:5, col:14> col:14 _q 'Packet **'
|-FieldDecl 0x55888b2b4948 <line:25:5, col:14> col:14 _head 'unsigned int'
|-FieldDecl 0x55888b2b49b0 <line:26:5, col:14> col:14 _tail 'unsigned int'
|-FieldDecl 0x55888b2b4aa0 <line:27:5, col:20> col:14 _pad 'unsigned int [5]'
|-CXXConstructorDecl 0x55888b386380 <line:23:3> col:3 implicit used  'void () noexcept' inline default trivial
| `-CompoundStmt 0x55888b3867b8 <col:3>
|-CXXConstructorDecl 0x55888b386488 <col:3> col:3 implicit constexpr  'void (const CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &)' inline default trivial noexcept-unevaluated 0x55888b386488
| `-ParmVarDecl 0x55888b386598 <col:3> col:3 'const CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &'
|-CXXConstructorDecl 0x55888b386638 <col:3> col:3 implicit constexpr  'void (CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &&)' inline default trivial noexcept-unevaluated 0x55888b386638
| `-ParmVarDecl 0x55888b386748 <col:3> col:3 'CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &&'
`-CXXDestructorDecl 0x55888b3867f0 <col:3> col:3 implicit referenced ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { %class.Packet**, i32, i32, [5 x i32] }
  NonVirtualBaseLLVMType:%struct.anon = type { %class.Packet**, i32, i32, [5 x i32] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b2b4588 <../elements/standard/cpuqueue.hh:22:1, line:60:1> line:22:7 class CPUQueue definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Element'
|-CXXRecordDecl 0x55888b2b46e8 <col:1, col:7> col:7 implicit referenced class CPUQueue
|-CXXRecordDecl 0x55888b2b4778 <line:23:3, line:28:3> line:23:3 struct definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x55888b2b48e0 <line:24:5, col:14> col:14 _q 'Packet **'
| |-FieldDecl 0x55888b2b4948 <line:25:5, col:14> col:14 _head 'unsigned int'
| |-FieldDecl 0x55888b2b49b0 <line:26:5, col:14> col:14 _tail 'unsigned int'
| |-FieldDecl 0x55888b2b4aa0 <line:27:5, col:20> col:14 _pad 'unsigned int [5]'
| |-CXXConstructorDecl 0x55888b386380 <line:23:3> col:3 implicit used  'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55888b3867b8 <col:3>
| |-CXXConstructorDecl 0x55888b386488 <col:3> col:3 implicit constexpr  'void (const CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &)' inline default trivial noexcept-unevaluated 0x55888b386488
| | `-ParmVarDecl 0x55888b386598 <col:3> col:3 'const CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &'
| |-CXXConstructorDecl 0x55888b386638 <col:3> col:3 implicit constexpr  'void (CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &&)' inline default trivial noexcept-unevaluated 0x55888b386638
| | `-ParmVarDecl 0x55888b386748 <col:3> col:3 'CPUQueue::(anonymous struct at ../elements/standard/cpuqueue.hh:23:3) &&'
| `-CXXDestructorDecl 0x55888b3867f0 <col:3> col:3 implicit referenced ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x55888b2b4d08 <col:3, line:28:9> col:5 referenced _q 'struct (anonymous struct at ../elements/standard/cpuqueue.hh:23:3) [1]'
|-FieldDecl 0x55888b2b4d88 <line:30:3, col:12> col:12 _last 'unsigned int'
|-FieldDecl 0x55888b2b4df0 <line:31:3, col:12> col:12 referenced _capacity 'unsigned int'
|-FieldDecl 0x55888b2b4e58 <line:32:3, col:12> col:12 referenced _drops 'unsigned int'
|-CXXMethodDecl 0x55888b2b4fc0 <line:34:3, col:67> col:7 next_i 'int (unsigned int) const'
| |-ParmVarDecl 0x55888b2b4ec0 <col:14, col:23> col:23 used i 'unsigned int'
| `-CompoundStmt 0x55888b2b69d8 <col:32, col:67>
|   `-ReturnStmt 0x55888b2b69c8 <col:34, col:64>
|     `-ImplicitCastExpr 0x55888b2b69b0 <col:41, col:64> 'int' <IntegralCast>
|       `-ParenExpr 0x55888b2b6990 <col:41, col:64> 'unsigned int'
|         `-ConditionalOperator 0x55888b2b6960 <col:42, col:63> 'unsigned int'
|           |-BinaryOperator 0x55888b2b6878 <col:42, col:45> 'bool' '!='
|           | |-ImplicitCastExpr 0x55888b2b6848 <col:42> 'unsigned int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55888b2b67e8 <col:42> 'unsigned int' lvalue ParmVar 0x55888b2b4ec0 'i' 'unsigned int'
|           | `-ImplicitCastExpr 0x55888b2b6860 <col:45> 'unsigned int' <LValueToRValue>
|           |   `-MemberExpr 0x55888b2b6818 <col:45> 'const unsigned int' lvalue ->_capacity 0x55888b2b4df0
|           |     `-CXXThisExpr 0x55888b2b6808 <col:45> 'const CPUQueue *' implicit this
|           |-BinaryOperator 0x55888b2b6908 <col:57, col:59> 'unsigned int' '+'
|           | |-ImplicitCastExpr 0x55888b2b68d8 <col:57> 'unsigned int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55888b2b6898 <col:57> 'unsigned int' lvalue ParmVar 0x55888b2b4ec0 'i' 'unsigned int'
|           | `-ImplicitCastExpr 0x55888b2b68f0 <col:59> 'unsigned int' <IntegralCast>
|           |   `-IntegerLiteral 0x55888b2b68b8 <col:59> 'int' 1
|           `-ImplicitCastExpr 0x55888b2b6948 <col:63> 'unsigned int' <IntegralCast>
|             `-IntegerLiteral 0x55888b2b6928 <col:63> 'int' 0
|-CXXMethodDecl 0x55888b2b5118 <line:35:3, col:67> col:7 prev_i 'int (unsigned int) const'
| |-ParmVarDecl 0x55888b2b5080 <col:14, col:23> col:23 used i 'unsigned int'
| `-CompoundStmt 0x55888b2b6be0 <col:32, col:67>
|   `-ReturnStmt 0x55888b2b6bd0 <col:34, col:64>
|     `-ImplicitCastExpr 0x55888b2b6bb8 <col:41, col:64> 'int' <IntegralCast>
|       `-ParenExpr 0x55888b2b6b98 <col:41, col:64> 'unsigned int'
|         `-ConditionalOperator 0x55888b2b6b68 <col:42, col:55> 'unsigned int'
|           |-BinaryOperator 0x55888b2b6a60 <col:42, col:45> 'bool' '!='
|           | |-ImplicitCastExpr 0x55888b2b6a30 <col:42> 'unsigned int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55888b2b69f0 <col:42> 'unsigned int' lvalue ParmVar 0x55888b2b5080 'i' 'unsigned int'
|           | `-ImplicitCastExpr 0x55888b2b6a48 <col:45> 'unsigned int' <IntegralCast>
|           |   `-IntegerLiteral 0x55888b2b6a10 <col:45> 'int' 0
|           |-BinaryOperator 0x55888b2b6af0 <col:49, col:51> 'unsigned int' '-'
|           | |-ImplicitCastExpr 0x55888b2b6ac0 <col:49> 'unsigned int' <LValueToRValue>
|           | | `-DeclRefExpr 0x55888b2b6a80 <col:49> 'unsigned int' lvalue ParmVar 0x55888b2b5080 'i' 'unsigned int'
|           | `-ImplicitCastExpr 0x55888b2b6ad8 <col:51> 'unsigned int' <IntegralCast>
|           |   `-IntegerLiteral 0x55888b2b6aa0 <col:51> 'int' 1
|           `-ImplicitCastExpr 0x55888b2b6b50 <col:55> 'unsigned int' <LValueToRValue>
|             `-MemberExpr 0x55888b2b6b20 <col:55> 'const unsigned int' lvalue ->_capacity 0x55888b2b4df0
|               `-CXXThisExpr 0x55888b2b6b10 <col:55> 'const CPUQueue *' implicit this
|-CXXMethodDecl 0x55888b2b5290 <line:36:3, col:18> col:11 deq 'Packet *(int)'
| `-ParmVarDecl 0x55888b2b51d8 <col:15> col:18 'int'
|-CXXMethodDecl 0x55888b2b5460 <line:38:3, col:47> col:17 read_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x55888b2b5348 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x55888b2b53c8 <col:41, col:46> col:47 'void *'
|-AccessSpecDecl 0x55888b2b5510 <line:40:2, col:8> col:2 public
|-CXXConstructorDecl 0x55888b2b5570 <line:42:3, col:12> col:3 CPUQueue 'void ()'
|-CXXDestructorDecl 0x55888b2b5660 <line:43:3, col:13> col:3 ~CPUQueue 'void ()' noexcept-unevaluated 0x55888b2b5660
| `-Overrides: [ 0x55888b29be78 Element::~Element 'void () noexcept' ]
|-CXXMethodDecl 0x55888b2b5768 <line:45:3, col:55> col:15 class_name 'const char *() const'
| |-Overrides: [ 0x55888b29d2d8 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x55888b2b6c40 <col:34, col:55>
|   `-ReturnStmt 0x55888b2b6c30 <col:36, col:43>
|     `-ImplicitCastExpr 0x55888b2b6c18 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55888b2b6bf8 <col:43> 'const char [9]' lvalue "CPUQueue"
|-CXXMethodDecl 0x55888b2b5830 <line:46:3, col:51> col:15 port_count 'const char *() const'
| |-Overrides: [ 0x55888b29d3a0 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x55888b2b6d20 <col:34, col:51>
|   `-ReturnStmt 0x55888b2b6d10 <col:36, col:43>
|     `-ImplicitCastExpr 0x55888b2b6cf8 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x55888b2b6cd8 <col:43> 'const char [5]' lvalue "1/1-"
|-CXXMethodDecl 0x55888b2b58f8 <line:47:3, col:57> col:15 processing 'const char *() const'
| |-Overrides: [ 0x55888b29d768 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x55888b2b6d80 <col:34, col:57>
|   `-ReturnStmt 0x55888b2b6d70 <col:36, col:43>
|     `-ImplicitCastExpr 0x55888b2b6d58 <col:43> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x55888b2b6d38 <col:43> 'const char []' lvalue Var 0x55888b29d9c0 'PUSH_TO_PULL' 'const char []'
|-CXXMethodDecl 0x55888b2b5a40 <line:48:3, col:32> col:7 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x55888b29edc0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x55888b2b59a8 <col:18, col:31> col:32 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2b5b88 <line:49:3, col:28> col:8 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x55888b29f5d8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x55888b2b5af8 <col:16> col:28 'Element::CleanupStage'
|-CXXMethodDecl 0x55888b2b5c58 <line:51:3, col:43> col:12 drops 'unsigned int () const'
| `-CompoundStmt 0x55888b2b6e00 <col:26, col:43>
|   `-ReturnStmt 0x55888b2b6df0 <col:28, col:35>
|     `-ImplicitCastExpr 0x55888b2b6dd8 <col:35> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55888b2b6da8 <col:35> 'const unsigned int' lvalue ->_drops 0x55888b2b4e58
|         `-CXXThisExpr 0x55888b2b6d98 <col:35> 'const CPUQueue *' implicit this
|-CXXMethodDecl 0x55888b2b5d20 <line:52:3, col:49> col:12 capacity 'unsigned int () const'
| `-CompoundStmt 0x55888b2b6e80 <col:29, col:49>
|   `-ReturnStmt 0x55888b2b6e70 <col:31, col:38>
|     `-ImplicitCastExpr 0x55888b2b6e58 <col:38> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x55888b2b6e28 <col:38> 'const unsigned int' lvalue ->_capacity 0x55888b2b4df0
|         `-CXXThisExpr 0x55888b2b6e18 <col:38> 'const CPUQueue *' implicit this
|-CXXMethodDecl 0x55888b2b5ff0 <line:54:3, col:49> col:7 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x55888b29eb70 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x55888b2b5ea0 <col:17, col:32> col:33 'Vector<String> &'
| `-ParmVarDecl 0x55888b2b5f18 <col:35, col:48> col:49 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2b61c8 <line:56:3, col:31> col:8 push 'void (int, Packet *)'
| |-Overrides: [ 0x55888b29c148 Element::push 'void (int, Packet *)' ]
| |-ParmVarDecl 0x55888b2b60b8 <col:13, col:17> col:17 port 'int'
| `-ParmVarDecl 0x55888b2b6130 <col:23, col:30> col:31 'Packet *'
|-CXXMethodDecl 0x55888b2b6320 <line:57:3, col:24> col:11 pull 'Packet *(int)'
| |-Overrides: [ 0x55888b29c2d8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x55888b2b6290 <col:16, col:20> col:20 port 'int'
|-CXXMethodDecl 0x55888b2b63e8 <line:59:3, col:21> col:8 add_handlers 'void ()'
| `-Overrides: [ 0x55888b29ec40 Element::add_handlers 'void ()' ]
|-CXXConstructorDecl 0x55888b2b64b8 <line:22:7> col:7 implicit CPUQueue 'void (const CPUQueue &)' inline default_delete noexcept-unevaluated 0x55888b2b64b8
| `-ParmVarDecl 0x55888b2b65c8 <col:7> col:7 'const CPUQueue &'
`-CXXMethodDecl 0x55888b2b6668 <col:7> col:7 implicit operator= 'CPUQueue &(const CPUQueue &)' inline default_delete noexcept-unevaluated 0x55888b2b6668
  `-ParmVarDecl 0x55888b2b6778 <col:7> col:7 'const CPUQueue &'

Layout: <CGRecordLayout
  LLVMType:%class.CPUQueue = type <{ %class.Element.base, [4 x i8], [1 x %struct.anon], i32, i32, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.CPUQueue.base = type <{ %class.Element.base, [4 x i8], [1 x %struct.anon], i32, i32, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b06fa40 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x55888b06fb58 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x55888b06fbf8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x55888b06fc58 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x55888b06fcb8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x55888b06fd68 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b070070 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b070188 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x55888b070230 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x55888b070298 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x55888b070328 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x55888b0763c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55888b0767f8 <col:12>
|-CXXConstructorDecl 0x55888b0764c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55888b0765d8 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55888b070230 'data' 'const char *'
| | `-ImplicitCastExpr 0x55888b078d80 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x55888b078d50 <col:12> 'const char *const' lvalue .data 0x55888b070230
| |     `-DeclRefExpr 0x55888b078d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b0765d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55888b070298 'length' 'int'
| | `-ImplicitCastExpr 0x55888b078e10 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55888b078de0 <col:12> 'const int' lvalue .length 0x55888b070298
| |     `-DeclRefExpr 0x55888b078dc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b0765d8 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x55888b070328 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x55888b078ea0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x55888b078e70 <col:12> 'String::memo_t *const' lvalue .memo 0x55888b070328
| |     `-DeclRefExpr 0x55888b078e50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b0765d8 '' 'const String::rep_t &'
| `-CompoundStmt 0x55888b078ef8 <col:12>
|-CXXConstructorDecl 0x55888b076678 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55888b076678
| `-ParmVarDecl 0x55888b076788 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x55888b07bce0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x55888b0876f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x55888b087808 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x55888b087d20 <col:12>
|   |-BinaryOperator 0x55888b087b38 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55888b087af0 <col:12> 'const char *' lvalue ->data 0x55888b070230
|   | | `-CXXThisExpr 0x55888b087ae0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55888b087b20 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x55888b087ab0 <col:12> 'const char *const' lvalue .data 0x55888b070230
|   |     `-DeclRefExpr 0x55888b087a90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b087808 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55888b087c00 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x55888b087bb8 <col:12> 'int' lvalue ->length 0x55888b070298
|   | | `-CXXThisExpr 0x55888b087ba8 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55888b087be8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x55888b087b78 <col:12> 'const int' lvalue .length 0x55888b070298
|   |     `-DeclRefExpr 0x55888b087b58 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b087808 '' 'const String::rep_t &'
|   |-BinaryOperator 0x55888b087cc8 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x55888b087c80 <col:12> 'String::memo_t *' lvalue ->memo 0x55888b070328
|   | | `-CXXThisExpr 0x55888b087c70 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x55888b087cb0 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x55888b087c40 <col:12> 'String::memo_t *const' lvalue .memo 0x55888b070328
|   |     `-DeclRefExpr 0x55888b087c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b087808 '' 'const String::rep_t &'
|   `-ReturnStmt 0x55888b087d10 <col:12>
|     `-UnaryOperator 0x55888b087cf8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b087ce8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x55888b087878 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55888b087878
  `-ParmVarDecl 0x55888b087988 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b066fb0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55888b0670c8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x55888b067158 <col:16, col:22> col:16 public
|-TypedefDecl 0x55888b067198 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x55888ad3afd0 'const char *'
|   `-QualType 0x55888ad3a521 'const char' const
|     `-BuiltinType 0x55888ad3a520 'char'
|-TypedefDecl 0x55888b067220 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x55888b0671f0 'String::const_iterator' sugar
|   |-Typedef 0x55888b067198 'const_iterator'
|   `-PointerType 0x55888ad3afd0 'const char *'
|     `-QualType 0x55888ad3a521 'const char' const
|       `-BuiltinType 0x55888ad3a520 'char'
|-TypedefDecl 0x55888b067390 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x55888b067300 'int (String::*)() const'
|   |-RecordType 0x55888b067040 'String'
|   | `-CXXRecord 0x55888b066fb0 'String'
|   `-ParenType 0x55888b0672a0 'int () const' sugar
|     `-FunctionProtoType 0x55888b03ae30 'int () const' const cdecl
|       `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b0673f8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x55888ae8fa10 'int64_t' sugar
|   |-Typedef 0x55888ada3390 'int64_t'
|   `-TypedefType 0x55888ad7c630 '__int64_t' sugar
|     |-Typedef 0x55888ad7c208 '__int64_t'
|     `-BuiltinType 0x55888ad3a5a0 'long'
|-TypedefDecl 0x55888b067460 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x55888ae8f930 'uint64_t' sugar
|   |-Typedef 0x55888ada3530 'uint64_t'
|   `-TypedefType 0x55888ad7c6c0 '__uint64_t' sugar
|     |-Typedef 0x55888ad7c278 '__uint64_t'
|     `-BuiltinType 0x55888ad3a640 'unsigned long'
|-TypedefDecl 0x55888b0674f0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x55888b0674c0 'String::intmax_t' sugar
|   |-Typedef 0x55888b0673f8 'intmax_t'
|   `-TypedefType 0x55888ae8fa10 'int64_t' sugar
|     |-Typedef 0x55888ada3390 'int64_t'
|     `-TypedefType 0x55888ad7c630 '__int64_t' sugar
|       |-Typedef 0x55888ad7c208 '__int64_t'
|       `-BuiltinType 0x55888ad3a5a0 'long'
|-TypedefDecl 0x55888b067580 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x55888b067550 'String::uintmax_t' sugar
|   |-Typedef 0x55888b067460 'uintmax_t'
|   `-TypedefType 0x55888ae8f930 'uint64_t' sugar
|     |-Typedef 0x55888ada3530 'uint64_t'
|     `-TypedefType 0x55888ad7c6c0 '__uint64_t' sugar
|       |-Typedef 0x55888ad7c278 '__uint64_t'
|       `-BuiltinType 0x55888ad3a640 'unsigned long'
|-CXXConstructorDecl 0x55888b067640 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x55888b0677e8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x55888b067728 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x55888b067998 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x55888b0678d8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x55888b067af0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x55888b067a60 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x55888b067d08 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x55888b067bb8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x55888b067c38 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x55888b067f28 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x55888b067dd8 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x55888b067e58 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x55888b068148 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55888b067ff8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x55888b068078 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x55888b068368 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x55888b068218 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x55888b068298 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x55888b0684f8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x55888b068430 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x55888b068678 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x55888b0685b8 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x55888b068808 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x55888b068740 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x55888b068960 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x55888b0688d0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x55888b068ab8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x55888b068a28 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x55888b068c10 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x55888b068b80 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x55888b068d98 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x55888b068cd8 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x55888b068f28 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x55888b068e60 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x55888b0690b8 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x55888b068ff0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x55888b069248 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x55888b069180 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x55888b069340 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x55888b069468 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x55888b0695e8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x55888b069520 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x55888b069738 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x55888b0696a8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x55888b0697f0 <col:63> "" ""
|-CXXMethodDecl 0x55888b069938 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x55888b069878 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x55888b069b48 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x55888b0699f8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x55888b069a78 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x55888b069d68 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x55888b069c10 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x55888b069c90 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x55888b06a048 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x55888b069e28 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x55888b069ea8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x55888b075e90 <col:55> 'int' 10
| `-ParmVarDecl 0x55888b069f20 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55888b075eb0 <col:76> 'bool' true
|-CXXMethodDecl 0x55888b06a328 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x55888b06a110 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x55888b06a190 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x55888b075ec0 <col:56> 'int' 10
| `-ParmVarDecl 0x55888b06a208 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55888b075ee0 <col:77> 'bool' true
|-CXXMethodDecl 0x55888b06a430 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x55888b06a4f8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x55888b06a5c0 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x55888b06a660 <col:20>
| `-OptimizeNoneAttr 0x55888b06a6b8 <col:30>
|-CXXConversionDecl 0x55888b06a7a8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x55888b06a878 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x55888b06a938 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x55888b06aa28 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55888b06aae8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x55888b06ac68 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x55888b06aba0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x55888b06adb8 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x55888b06ad28 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x55888b06aea8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x55888b06af68 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x55888b06b1b8 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x55888b06b020 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x55888b06b0a0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x55888b06b418 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x55888b06b280 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x55888b06b300 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x55888b06b4e8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x55888b06b6f8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x55888b06b5a0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x55888b06b620 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x55888b06b918 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x55888b06b7c0 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x55888b06b840 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x55888b06baa8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x55888b06b9e0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x55888b06bb98 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x55888b06bd08 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x55888b06bc48 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55888b06bf18 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x55888b06bdc8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55888b06be48 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55888b06c130 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x55888b06bfd8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x55888b06c050 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x55888b06c2c0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x55888b06c1f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55888b06c4e0 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x55888b06c380 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x55888b06c400 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55888b06c630 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x55888b06c5a0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x55888b06c808 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x55888b06c6f0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55888b06c770 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x55888b06c958 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x55888b06c8c8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x55888b06cb70 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x55888b06ca10 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x55888b06ca90 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x55888b075ef0 <col:39> 'int' 0
|-CXXMethodDecl 0x55888b06cd90 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x55888b06cc30 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x55888b06ccb0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x55888b075f10 <col:48> 'int' 0
|-CXXMethodDecl 0x55888b06cf70 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x55888b06ce50 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x55888b06ced0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x55888b075f30 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x55888b06d040 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x55888b06d100 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x55888b06d1c0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x55888b06d280 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x55888b06d340 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x55888b06d4e8 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x55888b06d3f0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x55888b06d668 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x55888b06d5a0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x55888b06d840 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x55888b06d728 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x55888b06d9b8 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x55888b06d8f8 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x55888b06db00 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x55888b06da70 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x55888b06dc50 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x55888b06dbc0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x55888b06de28 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x55888b06dd10 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x55888b06dd90 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x55888b06e008 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x55888b06def0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x55888b06df70 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x55888b06e158 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x55888b06e0c8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x55888b06e368 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x55888b06e218 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x55888b06e298 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x55888b06e4c8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x55888b06e430 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x55888b06e620 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x55888b06e588 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x55888b06e6c8 <col:57> "" ""
|-CXXMethodDecl 0x55888b06e7d8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x55888b06e748 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x55888b06e928 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x55888b06e898 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x55888b06eaa8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x55888b06e9e0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x55888b06eb70 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x55888b06ec30 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x55888b06ecf0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x55888b06ed90 <col:49> "" ""
|-CXXMethodDecl 0x55888b06ee20 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x55888b06eee0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x55888b06efd0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x55888b06f098 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x55888b06f158 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x55888b06f218 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x55888b06f310 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x55888b06f3d8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x55888b06f4a0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x55888b06f678 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x55888b06f558 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x55888b06f5d8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x55888b06f8a0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x55888b06f740 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x55888b06f7c0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x55888b06f9b0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x55888b06fa18 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x55888b06fa40 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x55888b06fb58 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x55888b06fbf8 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x55888b06fc58 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x55888b06fcb8 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x55888b06fd68 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x55888b06fdd0 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x55888b070008 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x55888b070058 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b06ffe8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x55888b06fef8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x55888b06fea0 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x55888b06fee0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x55888b06fec0 <col:32> 'int' 8
|-CXXRecordDecl 0x55888b070070 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x55888b070188 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x55888b070230 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x55888b070298 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x55888b070328 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x55888b0763c0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x55888b0767f8 <col:12>
| |-CXXConstructorDecl 0x55888b0764c8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55888b0765d8 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55888b070230 'data' 'const char *'
| | | `-ImplicitCastExpr 0x55888b078d80 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x55888b078d50 <col:12> 'const char *const' lvalue .data 0x55888b070230
| | |     `-DeclRefExpr 0x55888b078d30 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b0765d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55888b070298 'length' 'int'
| | | `-ImplicitCastExpr 0x55888b078e10 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x55888b078de0 <col:12> 'const int' lvalue .length 0x55888b070298
| | |     `-DeclRefExpr 0x55888b078dc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b0765d8 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x55888b070328 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x55888b078ea0 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x55888b078e70 <col:12> 'String::memo_t *const' lvalue .memo 0x55888b070328
| | |     `-DeclRefExpr 0x55888b078e50 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b0765d8 '' 'const String::rep_t &'
| | `-CompoundStmt 0x55888b078ef8 <col:12>
| |-CXXConstructorDecl 0x55888b076678 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55888b076678
| | `-ParmVarDecl 0x55888b076788 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x55888b07bce0 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x55888b0876f8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x55888b087808 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x55888b087d20 <col:12>
| |   |-BinaryOperator 0x55888b087b38 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x55888b087af0 <col:12> 'const char *' lvalue ->data 0x55888b070230
| |   | | `-CXXThisExpr 0x55888b087ae0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55888b087b20 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x55888b087ab0 <col:12> 'const char *const' lvalue .data 0x55888b070230
| |   |     `-DeclRefExpr 0x55888b087a90 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b087808 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55888b087c00 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x55888b087bb8 <col:12> 'int' lvalue ->length 0x55888b070298
| |   | | `-CXXThisExpr 0x55888b087ba8 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55888b087be8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x55888b087b78 <col:12> 'const int' lvalue .length 0x55888b070298
| |   |     `-DeclRefExpr 0x55888b087b58 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b087808 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x55888b087cc8 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x55888b087c80 <col:12> 'String::memo_t *' lvalue ->memo 0x55888b070328
| |   | | `-CXXThisExpr 0x55888b087c70 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x55888b087cb0 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x55888b087c40 <col:12> 'String::memo_t *const' lvalue .memo 0x55888b070328
| |   |     `-DeclRefExpr 0x55888b087c20 <col:12> 'const String::rep_t' lvalue ParmVar 0x55888b087808 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x55888b087d10 <col:12>
| |     `-UnaryOperator 0x55888b087cf8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x55888b087ce8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x55888b087878 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x55888b087878
|   `-ParmVarDecl 0x55888b087988 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x55888b0703a0 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x55888b0705e8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x55888b070408 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x55888b070488 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x55888b070500 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x55888b076380 <col:79, line:261:5>
|   |-BinaryOperator 0x55888b075ff8 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x55888b075f90 <col:2, col:5> 'const char *' lvalue .data 0x55888b070230
|   | | `-MemberExpr 0x55888b075f60 <col:2> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|   | |   `-CXXThisExpr 0x55888b075f50 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55888b075fe0 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x55888b075fc0 <col:12> 'const char *' lvalue ParmVar 0x55888b070408 'data' 'const char *'
|   |-BinaryOperator 0x55888b0760c0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x55888b076058 <col:2, col:5> 'int' lvalue .length 0x55888b070298
|   | | `-MemberExpr 0x55888b076028 <col:2> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|   | |   `-CXXThisExpr 0x55888b076018 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x55888b0760a8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x55888b076088 <col:14> 'int' lvalue ParmVar 0x55888b070488 'length' 'int'
|   `-IfStmt 0x55888b076368 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x55888b0761e0 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55888b0761c8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x55888b0761a8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x55888b076188 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x55888b076120 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x55888b070328
|     |       | `-MemberExpr 0x55888b0760f0 <col:7> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|     |       |   `-CXXThisExpr 0x55888b0760e0 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x55888b076170 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x55888b076150 <col:17> 'String::memo_t *' lvalue ParmVar 0x55888b070500 'memo' 'String::memo_t *'
|     `-CallExpr 0x55888b076340 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x55888b076328 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x55888b076230 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x55888b05f018 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x55888b076298 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55888b06fbf8
|         `-ImplicitCastExpr 0x55888b076280 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x55888b076260 <col:27> 'String::memo_t *' lvalue ParmVar 0x55888b070500 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x55888b070898 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x55888b0706b8 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x55888b070738 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x55888b0707b0 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x55888b0703a0 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x55888b076808 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x55888b076998 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x55888b076900 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x55888b076870 <col:2> '<bound member function type>' ->assign_memo 0x55888b0705e8
|     | `-ImplicitCastExpr 0x55888b076938 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x55888b076860 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x55888b076950 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x55888b0768a0 <col:14> 'const char *' lvalue ParmVar 0x55888b0706b8 'data' 'const char *'
|     |-ImplicitCastExpr 0x55888b076968 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x55888b0768c0 <col:20> 'int' lvalue ParmVar 0x55888b070738 'length' 'int'
|     `-ImplicitCastExpr 0x55888b076980 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x55888b0768e0 <col:28> 'String::memo_t *' lvalue ParmVar 0x55888b0707b0 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x55888b070a28 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x55888b070968 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x55888b076bf0 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x55888b076b70 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x55888b0769c0 <col:2> '<bound member function type>' ->assign_memo 0x55888b0705e8
|     | `-CXXThisExpr 0x55888b0769b0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x55888b076ba8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x55888b076a40 <col:14, col:19> 'const char *' lvalue .data 0x55888b070230
|     |   `-MemberExpr 0x55888b076a10 <col:14, col:16> 'String::rep_t' lvalue ._r 0x55888b0703a0
|     |     `-DeclRefExpr 0x55888b0769f0 <col:14> 'const String' lvalue ParmVar 0x55888b070968 'x' 'const String &'
|     |-ImplicitCastExpr 0x55888b076bc0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x55888b076ac0 <col:25, col:30> 'int' lvalue .length 0x55888b070298
|     |   `-MemberExpr 0x55888b076a90 <col:25, col:27> 'String::rep_t' lvalue ._r 0x55888b0703a0
|     |     `-DeclRefExpr 0x55888b076a70 <col:25> 'const String' lvalue ParmVar 0x55888b070968 'x' 'const String &'
|     `-ImplicitCastExpr 0x55888b076bd8 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x55888b076b40 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x55888b070328
|         `-MemberExpr 0x55888b076b10 <col:38, col:40> 'String::rep_t' lvalue ._r 0x55888b0703a0
|           `-DeclRefExpr 0x55888b076af0 <col:38> 'const String' lvalue ParmVar 0x55888b070968 'x' 'const String &'
|-CXXMethodDecl 0x55888b070af0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x55888b0775b0 <col:31, line:278:5>
|   `-IfStmt 0x55888b077598 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x55888b076c90 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x55888b076c78 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x55888b076c48 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55888b070328
|     |     `-MemberExpr 0x55888b076c18 <col:6> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|     |       `-CXXThisExpr 0x55888b076c08 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x55888b077570 <col:15, line:277:2>
|       |-ParenExpr 0x55888b077140 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x55888b077110 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x55888b076da0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x55888b076d88 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x55888b076d70 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x55888b076d30 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55888b06fbf8
|       |   |       `-ImplicitCastExpr 0x55888b076d18 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x55888b076ce8 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x55888b070328
|       |   |           `-MemberExpr 0x55888b076cb8 <col:27> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|       |   |             `-CXXThisExpr 0x55888b076ca8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x55888b076e00 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x55888b076de0 <col:54> 'int' 0
|       |   `-CallExpr 0x55888b077070 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x55888b077058 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x55888b076fd8 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x55888add6220 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x55888b0770b0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55888b076ee8 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x55888b0770c8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x55888b076f18 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x55888b0770e0 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x55888b076f50 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x55888b0770f8 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x55888b076fc0 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x55888b076fa8 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x55888b076f70 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x55888b077490 <line:274:6, line:275:22>
|       | |-CallExpr 0x55888b077350 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x55888b077338 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x55888b0772b0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x55888b060460 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x55888b077280 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x55888b06fbf8
|       | |   `-ImplicitCastExpr 0x55888b077268 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x55888b077238 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x55888b070328
|       | |       `-MemberExpr 0x55888b077208 <col:40> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|       | |         `-CXXThisExpr 0x55888b0771f8 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x55888b077450 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x55888b077438 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x55888b077378 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x55888b0752d0 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x55888b077478 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x55888b0773d8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x55888b070328
|       |       `-MemberExpr 0x55888b0773a8 <col:15> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|       |         `-CXXThisExpr 0x55888b077398 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x55888b077550 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x55888b0774e8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x55888b070328
|         | `-MemberExpr 0x55888b0774b8 <col:6> 'String::rep_t' lvalue ->_r 0x55888b0703a0
|         |   `-CXXThisExpr 0x55888b0774a8 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x55888b077538 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x55888b077518 <col:16> 'int' 0
|-CXXMethodDecl 0x55888b070d88 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x55888b070ba8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55888b070c28 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55888b070ca0 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x55888b070e60 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x55888b0710b0 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x55888b070f18 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x55888b070f98 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x55888b071010 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x55888b071298 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x55888b071180 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x55888b071200 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x55888b071398 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x55888b077688 <col:41, line:286:5>
|   `-ReturnStmt 0x55888b077678 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x55888b077648 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x55888b077610 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x55888b0775f8 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x55888b0775d8 <col:46> 'int' 1
|-CXXMethodDecl 0x55888b071638 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x55888b071450 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x55888b0714d0 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x55888b071550 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x55888b0752d0 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x55888b071700 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x55888b0753a0 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x55888b075570 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x55888b075458 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x55888b0754d8 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x55888b075630 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x55888b0756f8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x55888b0757f8 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x55888b075870 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x55888b0758e8 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x55888b075950 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x55888b075a50 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x55888b075aa0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b075a30 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x55888b075a10 <col:22> 'int' 14
|-CXXMethodDecl 0x55888b075cb8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x55888b075ad0 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x55888b075b50 <col:38> col:41 'int'
| `-ParmVarDecl 0x55888b075bd0 <col:43> col:46 'int'
|-FriendDecl 0x55888b075dc0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x55888b075e50 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55888b307470 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x55888b307648 prev 0x55888b307470 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55888b3076d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x55888b307700 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b3090c0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x55888b309070 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x55888b309050 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x55888b307918 'type'
|     `-SubstTemplateTypeParmType 0x55888b3078e0 'String' sugar
|       |-TemplateTypeParmType 0x55888b02a850 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b02a800 'T'
|       `-RecordType 0x55888b067040 'String'
|         `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b309178 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x55888b309140 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x55888b309120 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55888b3090c0 'type'
|     `-ElaboratedType 0x55888b309070 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x55888b309050 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x55888b307918 'type'
|         `-SubstTemplateTypeParmType 0x55888b3078e0 'String' sugar
|           |-TemplateTypeParmType 0x55888b02a850 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55888b02a800 'T'
|           `-RecordType 0x55888b067040 'String'
|             `-CXXRecord 0x55888b066fb0 'String'
|-CXXMethodDecl 0x55888b3092f8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x55888b309208 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x55888b3093e8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55888b3094c8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x55888b3094c8
|-CXXMethodDecl 0x55888b309798 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55888b3096a0 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x55888b3099d8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55888b309850 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55888b3098c8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b309ba8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55888b309a98 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55888b309b10 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b309d08 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55888b309dd8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x55888b30a028 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55888b309e98 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55888b309f10 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b30a288 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x55888b30a0f8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x55888b30a170 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b30a448 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55888b30a358 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b30a608 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x55888b30a510 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b30a6c0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55888b30a770 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55888b30a9a8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x55888b30a820 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55888b30a898 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x55888b30ac48 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x55888b30ab50 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x55888b30ad10 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x55888b30ad60 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55888b30adb0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55888b29e7e0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x55888b305ed8 prev 0x55888b29e7e0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55888b3073e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x55888b307390 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x55888b307370 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x55888b307220 'type'
|     `-SubstTemplateTypeParmType 0x55888b3070b0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x55888b000600 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x55888b0005a8 'F'
|       `-RecordType 0x55888b306d10 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x55888b306c30 'typed_array_memory'
|-FieldDecl 0x55888b30ae00 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x55888b30ae50 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55888b30ae88 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|   |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55888b037b18 'T'
|   `-RecordType 0x55888b067040 'String'
|     `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30af18 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x55888b30aee0 'String &'
|   `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|     |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55888b037b18 'T'
|     `-RecordType 0x55888b067040 'String'
|       `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30afa8 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x55888b30af70 'const String &'
|   `-QualType 0x55888b305f71 'const String' const
|     `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-RecordType 0x55888b067040 'String'
|         `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30b038 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x55888b30b000 'String *'
|   `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|     |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55888b037b18 'T'
|     `-RecordType 0x55888b067040 'String'
|       `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30b0c8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x55888b30b090 'const String *'
|   `-QualType 0x55888b305f71 'const String' const
|     `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-RecordType 0x55888b067040 'String'
|         `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30bd20 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x55888b30bcd0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x55888b30bcb0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x55888b30bbe8 'type'
|     `-LValueReferenceType 0x55888b30bbb0 'const String &'
|       `-QualType 0x55888b30b951 'const String' const
|         `-SubstTemplateTypeParmType 0x55888b30b950 'String' sugar
|           |-TemplateTypeParmType 0x55888b00a550 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x55888b00a4f8 'T'
|           `-RecordType 0x55888b067040 'String'
|             `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30bd88 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x55888b30af70 'const String &'
|   `-QualType 0x55888b305f71 'const String' const
|     `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-RecordType 0x55888b067040 'String'
|         `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30bde0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b30be48 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x55888b30b000 'String *'
|   `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|     |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55888b037b18 'T'
|     `-RecordType 0x55888b067040 'String'
|       `-CXXRecord 0x55888b066fb0 'String'
|-TypedefDecl 0x55888b30beb0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x55888b30b090 'const String *'
|   `-QualType 0x55888b305f71 'const String' const
|     `-SubstTemplateTypeParmType 0x55888b305f70 'String' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-RecordType 0x55888b067040 'String'
|         `-CXXRecord 0x55888b066fb0 'String'
|-EnumDecl 0x55888b30bf08 <line:134:5> col:5
| `-EnumConstantDecl 0x55888b30c000 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55888b30bfe0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55888b0391f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55888b0391d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55888b0391b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55888b30c088 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55888b30c318 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b30c140 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55888b30c1e0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x55888b30c5a8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x55888b30c490 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x55888b30c868 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x55888b30c750 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x55888b30cb80 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x55888b30ca60 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x55888b30ce90 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x55888b30cd70 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x55888b30d180 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b30cfc8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55888b30d040 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55888b30d2a8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55888b30d358 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b30d3b0 <col:30> Inherited
|-CXXMethodDecl 0x55888b30d3f8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x55888b30d4a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b30d500 <col:30> Inherited
|-CXXMethodDecl 0x55888b30d5c8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55888b30d678 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b30d6d0 <col:30> Inherited
|-CXXMethodDecl 0x55888b30d718 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55888b30d7c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b30d820 <col:30> Inherited
|-CXXMethodDecl 0x55888b30d868 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55888b30d918 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b30d970 <col:30> Inherited
|-CXXMethodDecl 0x55888b30d9b8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x55888b30da68 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b30dac0 <col:30> Inherited
|-CXXMethodDecl 0x55888b30dae8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55888b30db98 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55888b30dc48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55888b30de08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b30dcf8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55888b30dd70 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55888b30df58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55888b30dec8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b30e108 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x55888b30e010 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55888b30e1c0 <col:20>
| `-OptimizeNoneAttr 0x55888b30e218 <col:30>
|-CXXMethodDecl 0x55888b30e338 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x55888b30e240 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55888b30e3f0 <col:20>
| `-OptimizeNoneAttr 0x55888b30e448 <col:30>
|-CXXMethodDecl 0x55888b30e500 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55888b30e470 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b30e648 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55888b30e5b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b30e778 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x55888b30e878 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x55888b30e948 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x55888b30ea18 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x55888b30eb58 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x55888b30eac8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b30eca0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55888b30ec10 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b30ede8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x55888b30ed58 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55888b30eea0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55888b30efa0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55888b30ef10 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55888b30f058 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55888b30f118 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x55888b30f218 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x55888b30f398 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55888b30f2d8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x55888b30fba0 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55888b30f450 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x55888b30fb00 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x55888b30f9b8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x55888b30fc80 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55888b30fdd0 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x55888b30fd40 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55888b30fe88 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55888b3100d8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b30ff48 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55888b30ffc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x55888b310268 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x55888b3101a8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55888b310478 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x55888b310330 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x55888b3103a8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x55888b310538 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55888b310798 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x55888b3106a0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x55888b310868 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x55888b310868

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b2b6e98 prev 0x55888b29b9b0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55888b2b6f90 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x55888b2b7020 <col:22, col:28> col:22 public
|-EnumDecl 0x55888b2b7048 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x55888b2b7168 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b7148 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x55888b2b7130 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55888b2b7110 <col:14> 'int' 999
| |-EnumConstantDecl 0x55888b2b7210 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b71f0 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x55888b2b71d8 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x55888b2b71b8 <col:14> 'int' 1
| |-EnumConstantDecl 0x55888b2b72a0 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b7280 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x55888b2b7260 <col:17> 'int' 0
| |-EnumConstantDecl 0x55888b2b7330 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b7310 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x55888b2b72f0 <col:13> 'int' 1
| |-EnumConstantDecl 0x55888b2b73c0 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b73a0 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x55888b2b7380 <col:16> 'int' 2
| |-EnumConstantDecl 0x55888b2b7450 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b7430 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x55888b2b7410 <col:13> 'int' 3
| |-EnumConstantDecl 0x55888b2b74e0 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b74c0 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x55888b2b74a0 <col:15> 'int' 4
| |-EnumConstantDecl 0x55888b2b7570 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b7550 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x55888b2b7530 <col:14> 'int' 5
| |-EnumConstantDecl 0x55888b2b7600 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x55888b2b75e0 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x55888b2b75c0 <col:12> 'int' 6
| `-EnumConstantDecl 0x55888b2b7690 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x55888b2b7670 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x55888b2b7650 <col:13> 'int' 7
|-VarDecl 0x55888b2b7700 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x55888b2b7788 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x55888b2b7810 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x55888b2b7898 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x55888b2b7920 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x55888b2b79a8 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x55888b2b7a30 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x55888b2b7ab8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x55888b2b7b40 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x55888b2b7bc8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x55888b2b7c50 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x55888b2b7d50 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x55888b2c1938 '_nerrors' 'int'
| | `-IntegerLiteral 0x55888b2c20c8 <line:128:13> 'int' 0
| `-CompoundStmt 0x55888b2c2138 <col:16, line:129:5>
|-CXXDestructorDecl 0x55888b2b7e40 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x55888b2c2148 <col:29, line:132:5>
|-CXXMethodDecl 0x55888b2b7ff8 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x55888b2b7f30 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2b80c0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x55888b2b81a8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55888b2c21a0 <col:44, line:161:5>
|   `-ReturnStmt 0x55888b2c2190 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x55888b2c2178 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55888b2c2158 <col:9> 'ErrorHandler *' lvalue Var 0x55888b2c1998 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2b8318 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x55888b2b8258 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x55888b2b83e0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x55888b2c2200 <col:43, line:173:5>
|   `-ReturnStmt 0x55888b2c21f0 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x55888b2c21d8 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x55888b2c21b8 <col:9> 'ErrorHandler *' lvalue Var 0x55888b2c1a10 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x55888b2b8498 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x55888b2b8518 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x55888b2b8628 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x55888b2b8598 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b8778 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x55888b2b86e8 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b88d0 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x55888b2b8838 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b8a28 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x55888b2b8990 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b8b80 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x55888b2b8ae8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b8d90 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55888b2b8c38 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x55888b2b8cb8 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b8f68 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x55888b2b8e50 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x55888b2b8ed0 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b9188 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55888b2b9028 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x55888b2b90a8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b9368 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55888b2b9248 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55888b2b92c8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b9548 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x55888b2b9428 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x55888b2b94a8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x55888b2b96d0 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x55888b2b9608 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x55888b2b98a0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x55888b2b9788 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55888b2b9800 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x55888b2c2458 <col:57, line:234:5>
|   `-ReturnStmt 0x55888b2c2448 <line:233:2, col:41>
|     `-ExprWithCleanups 0x55888b2c2430 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55888b2c23d8 <col:9, col:41> 'int'
|         |-MemberExpr 0x55888b2c23a8 <col:9> '<bound member function type>' ->xmessage 0x55888b2b96d0
|         | `-CXXThisExpr 0x55888b2c2398 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x55888b2c2418 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55888b2c2400 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55888b2c2378 <col:18, col:40> 'String' (CXXTemporary 0x55888b2c2378)
|               `-CallExpr 0x55888b2c2340 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x55888b2c2328 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x55888b2c22a0 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55888b2c0128 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x55888b2c22c0 <col:31> 'const String' lvalue ParmVar 0x55888b2b9800 'str' 'const String &'
|                 `-DeclRefExpr 0x55888b2c22e0 <col:36> 'const String' lvalue ParmVar 0x55888b2b9788 'anno' 'const String &'
|-CXXMethodDecl 0x55888b2b9be0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55888b2b9960 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x55888b2b99e0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x55888b2b9ab0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55888b2c26e8 <col:68, line:243:5>
|   `-ReturnStmt 0x55888b2c26d8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x55888b2c26c0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x55888b2c2660 <col:9, col:41> 'int'
|         |-MemberExpr 0x55888b2c2630 <col:9> '<bound member function type>' ->xmessage 0x55888b2b98a0
|         | `-CXXThisExpr 0x55888b2c2620 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55888b2c24f8 <col:18> 'const String' lvalue ParmVar 0x55888b2b9960 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55888b2c26a8 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x55888b2c2690 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55888b2c2600 <col:24, col:40> 'String' (CXXTemporary 0x55888b2c2600)
|               `-CXXMemberCallExpr 0x55888b2c2598 <col:24, col:40> 'String'
|                 |-MemberExpr 0x55888b2c2528 <col:24> '<bound member function type>' ->vformat 0x55888b2badc0
|                 | `-CXXThisExpr 0x55888b2c2518 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55888b2c25c8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55888b2c2558 <col:32> 'const char *' lvalue ParmVar 0x55888b2b99e0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55888b2c25e0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55888b2c2578 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55888b2b9ab0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55888b2b9e80 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x55888b2b9ca8 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55888b2b9d20 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55888b2b9d98 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x55888b2c2a28 <col:23, line:254:5>
|   `-ReturnStmt 0x55888b2c2a18 <line:253:2, col:71>
|     `-ExprWithCleanups 0x55888b2c2a00 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x55888b2c29a0 <col:9, col:71> 'int'
|         |-MemberExpr 0x55888b2c2970 <col:9> '<bound member function type>' ->xmessage 0x55888b2b98a0
|         | `-CXXThisExpr 0x55888b2c2960 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x55888b2c29e8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x55888b2c29d0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x55888b2c2920 <col:18, col:65> 'String' (CXXTemporary 0x55888b2c2920)
|         |     `-CallExpr 0x55888b2c28b8 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x55888b2c28a0 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x55888b2c2788 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x55888b2c0128 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x55888b2c27a8 <col:31> 'const String' lvalue ParmVar 0x55888b2b9d20 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x55888b2c2900 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x55888b2c28e8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x55888b2c2880 <col:37, col:64> 'String' (CXXTemporary 0x55888b2c2880)
|         |             `-CallExpr 0x55888b2c2850 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x55888b2c2838 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x55888b2c27c8 <col:37> 'String (const String &)' lvalue CXXMethod 0x55888b2c0778 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x55888b2c27e8 <col:56> 'const String' lvalue ParmVar 0x55888b2b9ca8 'landmark' 'const String &'
|         `-DeclRefExpr 0x55888b2c2940 <col:68> 'const String' lvalue ParmVar 0x55888b2b9d98 'str' 'const String &'
|-CXXMethodDecl 0x55888b2ba200 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x55888b2b9f48 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x55888b2b9fc0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x55888b2ba040 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x55888b2ba0b8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55888b2c2ce0 <col:34, line:267:5>
|   `-ReturnStmt 0x55888b2c2cd0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x55888b2c2cb8 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x55888b2c2c50 <col:9, col:51> 'int'
|         |-MemberExpr 0x55888b2c2c20 <col:9> '<bound member function type>' ->xmessage 0x55888b2b9e80
|         | `-CXXThisExpr 0x55888b2c2c10 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x55888b2c2ac8 <col:18> 'const String' lvalue ParmVar 0x55888b2b9f48 'landmark' 'const String &'
|         |-DeclRefExpr 0x55888b2c2ae8 <col:28> 'const String' lvalue ParmVar 0x55888b2b9fc0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x55888b2c2ca0 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x55888b2c2c88 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x55888b2c2bf0 <col:34, col:50> 'String' (CXXTemporary 0x55888b2c2bf0)
|               `-CXXMemberCallExpr 0x55888b2c2b88 <col:34, col:50> 'String'
|                 |-MemberExpr 0x55888b2c2b18 <col:34> '<bound member function type>' ->vformat 0x55888b2badc0
|                 | `-CXXThisExpr 0x55888b2c2b08 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x55888b2c2bb8 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x55888b2c2b48 <col:42> 'const char *' lvalue ParmVar 0x55888b2ba040 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x55888b2c2bd0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x55888b2c2b68 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55888b2ba0b8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55888b2ba310 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x55888b2c2d60 <col:25, line:288:5>
|   `-ReturnStmt 0x55888b2c2d50 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x55888b2c2d38 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x55888b2c2d08 <col:9> 'const int' lvalue ->_nerrors 0x55888b2c1938
|         `-CXXThisExpr 0x55888b2c2cf8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x55888b2ba520 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x55888b2ba3c8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x55888b2ba448 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x55888b2ba808 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55888b2ba5e8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x55888b2ba668 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x55888b2ba6e0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55888b2ba9a0 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x55888b2ba8d8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x55888b2babe8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x55888b2baa60 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x55888b2baad8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x55888b2c2fc0 <col:58, line:357:5>
|   `-ReturnStmt 0x55888b2c2fb0 <line:356:2, col:29>
|     `-ExprWithCleanups 0x55888b2c2f98 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x55888b2c2f68 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x55888b2c2f50 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x55888b2c2f30 <col:9, col:29> 'String' (CXXTemporary 0x55888b2c2f30)
|             `-CallExpr 0x55888b2c2ec0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x55888b2c2ea8 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x55888b2c2e28 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x55888b2ba808 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x55888b2c2dc8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x55888b2c2ef8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x55888b2c2de8 <col:21> 'const char *' lvalue ParmVar 0x55888b2baa60 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x55888b2c2f10 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x55888b2c2e08 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x55888b2baad8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55888b2badc0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x55888b2bacb0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x55888b2bad28 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x55888b2baf18 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x55888b2bae88 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x55888b2bb098 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x55888b2bafd0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x55888b2bfb30 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x55888b2bb150 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x55888b2bb1d0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x55888b2bfa40 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x55888b2bfc90 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x55888b2bfc00 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x55888b2c30d8 <col:37, line:441:5>
|   `-IfStmt 0x55888b2c30c0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x55888b2c3048 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x55888b2c3018 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x55888b2c2fd8 <col:6> 'int' lvalue ParmVar 0x55888b2bfc00 'level' 'int'
|     | `-ImplicitCastExpr 0x55888b2c3030 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x55888b2c2ff8 <col:15> 'ErrorHandler::Level' EnumConstant 0x55888b2b7450 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x55888b2c30a8 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x55888b2c3078 <col:8> 'int' lvalue ->_nerrors 0x55888b2c1938
|         `-CXXThisExpr 0x55888b2c3068 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x55888b2bfd58 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x55888b2c3170 <col:26, line:448:5>
|   `-BinaryOperator 0x55888b2c3150 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x55888b2c3100 <col:2> 'int' lvalue ->_nerrors 0x55888b2c1938
|     | `-CXXThisExpr 0x55888b2c30f0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x55888b2c3130 <col:13> 'int' 0
|-CXXMethodDecl 0x55888b2bff20 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x55888b2bfe10 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x55888b2bfe88 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x55888b2c0128 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x55888b2bffe0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x55888b2c0058 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x55888b2c03d8 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x55888b2c01e8 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x55888b2c0268 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x55888b2c02e8 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x55888b2c0490 <col:59> 0 0
|-CXXMethodDecl 0x55888b2c0628 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x55888b2c0508 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x55888b2c0588 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x55888b2c37e0 <col:70, line:534:5>
|   |-DeclStmt 0x55888b2c32e0 <line:528:2, col:20>
|   | |-VarDecl 0x55888b2c3198 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x55888b2c3200 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x55888b2c3238 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x55888b2c32a0 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x55888b2c33b0 <line:529:2, col:23>
|   | `-VarDecl 0x55888b2c3310 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x55888b2c3398 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x55888b2c3378 <col:18> 'const char *' lvalue ParmVar 0x55888b2c0508 'begin' 'const char *'
|   |-DoStmt 0x55888b2c3778 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x55888b2c36a8 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x55888b2c3690 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x55888b2c3670 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x55888b2c33c8 <col:6> 'const char *' lvalue Var 0x55888b2c3310 'x' 'const char *'
|   | |     `-CallExpr 0x55888b2c35c0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x55888b2c35a8 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x55888b2c3560 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x55888b2c1e10 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x55888b2c3628 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x55888b2c3610 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x55888b2c3480 <col:20, col:27> 'String' (CXXTemporary 0x55888b2c3480)
|   | |       |     `-CXXTemporaryObjectExpr 0x55888b2c3448 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x55888b2c3640 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55888b2c34a0 <col:30> 'const char *' lvalue Var 0x55888b2c3310 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x55888b2c3658 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x55888b2c34c0 <col:33> 'const char *' lvalue ParmVar 0x55888b2c0588 'end' 'const char *'
|   | |       |-UnaryOperator 0x55888b2c3500 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55888b2c34e0 <col:39> 'String' lvalue Var 0x55888b2c3198 'name' 'String'
|   | |       |-UnaryOperator 0x55888b2c3538 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x55888b2c3518 <col:46> 'String' lvalue Var 0x55888b2c3238 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x55888b2c3550 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x55888b2c3760 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x55888b2c3748 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x55888b2c3728 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x55888b2c36f8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|   |         `-ImplicitCastExpr 0x55888b2c36e0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x55888b2c36c0 <col:11> 'String' lvalue Var 0x55888b2c3198 'name' 'String'
|   `-ReturnStmt 0x55888b2c37d0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x55888b2c37b8 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x55888b2c3798 <col:9> 'const char *' lvalue Var 0x55888b2c3310 'x' 'const char *'
|-CXXMethodDecl 0x55888b2c0778 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x55888b2c06e8 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x55888b2c3de8 <col:55, line:550:5>
|   `-IfStmt 0x55888b2c3dc0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x55888b2c3a20 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x55888b2c3a08 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55888b2c39f0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55888b2c39d0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55888b2c39a0 <col:6> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|     | |       `-DeclRefExpr 0x55888b2c3840 <col:6> 'const String' lvalue ParmVar 0x55888b2c06e8 'x' 'const String &'
|     | `-BinaryOperator 0x55888b2c3980 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x55888b2c3950 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x55888b2c3900 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x55888b2c38e8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x55888b2c38a0 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x55888b083fe0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x55888b2c3860 <col:11> 'const String' lvalue ParmVar 0x55888b2c06e8 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x55888b2c3880 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x55888b2c3968 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x55888b2c3938 <col:19> 'char' 123
|     |-ReturnStmt 0x55888b2c3a90 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x55888b2c3a60 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x55888b2c3a40 <col:13> 'const String' lvalue ParmVar 0x55888b2c06e8 'x' 'const String &'
|     `-IfStmt 0x55888b2c3d98 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x55888b2c3b28 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55888b2c3b10 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55888b2c3af0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55888b2c3ac0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |       `-DeclRefExpr 0x55888b2c3aa0 <col:11> 'const String' lvalue ParmVar 0x55888b2c06e8 'x' 'const String &'
|       |-ReturnStmt 0x55888b2c3cb0 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x55888b2c3c98 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x55888b2c3c68 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x55888b2c3c50 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x55888b2c3c30 <col:13, col:29> 'String' (CXXTemporary 0x55888b2c3c30)
|       |         `-CallExpr 0x55888b2c3be0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x55888b2c3bc8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x55888b2c3b40 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x55888b2bff20 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x55888b2c3c10 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x55888b2c3b60 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x55888b2c3b80 <col:28> 'const String' lvalue ParmVar 0x55888b2c06e8 'x' 'const String &'
|       `-ReturnStmt 0x55888b2c3d88 <line:549:6, col:20>
|         `-ExprWithCleanups 0x55888b2c3d70 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x55888b2c3d40 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x55888b2c3d28 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x55888b2c3d08 <col:13, col:20> 'String' (CXXTemporary 0x55888b2c3d08)
|                 `-CXXTemporaryObjectExpr 0x55888b2c3cd0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x55888b2c0978 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x55888b2c0830 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x55888b2c08a8 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x55888b2c20b8 <col:71> 'bool' false
|-CXXRecordDecl 0x55888b2c0a28 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x55888b2c0d28 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x55888b2c0cc0 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x55888b2c0c60 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x55888b2c0c20 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x55888b067040 'String'
|       | `-CXXRecord 0x55888b066fb0 'String'
|       |-BuiltinType 0x55888ad3a580 'int'
|       `-DecayedType 0x55888b2b9a80 '__va_list_tag *' sugar
|         |-TypedefType 0x55888b2b9a50 'va_list' sugar
|         | |-Typedef 0x55888af580f0 'va_list'
|         | `-TypedefType 0x55888af580a0 '__gnuc_va_list' sugar
|         |   |-Typedef 0x55888ae8fcc8 '__gnuc_va_list'
|         |   `-TypedefType 0x55888ae8fc30 '__builtin_va_list' sugar
|         |     |-Typedef 0x55888ad7bd38 '__builtin_va_list'
|         |     `-ConstantArrayType 0x55888ad7bce0 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x55888ad3b2d0 '__va_list_tag'
|         |         `-CXXRecord 0x55888ad3b238 '__va_list_tag'
|         `-PointerType 0x55888af5d990 '__va_list_tag *'
|           `-RecordType 0x55888ad3b2d0 '__va_list_tag'
|             `-CXXRecord 0x55888ad3b238 '__va_list_tag'
|-EnumDecl 0x55888b2c0d80 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x55888b2c0e80 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c13e0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c0e60 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x55888b2c0e40 <col:16> 'int' 1
| |-EnumConstantDecl 0x55888b2c0f10 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c13f8 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c0ef0 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x55888b2c0ed0 <col:21> 'int' 2
| |-EnumConstantDecl 0x55888b2c0fa0 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c1410 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c0f80 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x55888b2c0f60 <col:22> 'int' 4
| |-EnumConstantDecl 0x55888b2c1030 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c1428 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c1010 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x55888b2c0ff0 <col:17> 'int' 8
| |-EnumConstantDecl 0x55888b2c10c0 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c1440 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c10a0 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x55888b2c1080 <col:22> 'int' 16
| |-EnumConstantDecl 0x55888b2c1150 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c1458 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c1130 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x55888b2c1110 <col:19> 'int' 32
| |-EnumConstantDecl 0x55888b2c11e0 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c1470 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c11c0 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x55888b2c11a0 <col:17> 'int' 64
| |-EnumConstantDecl 0x55888b2c1270 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c1488 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c1250 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x55888b2c1230 <col:14> 'int' 128
| |-EnumConstantDecl 0x55888b2c1300 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x55888b2c14a0 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b2c12e0 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x55888b2c12c0 <col:16> 'int' 256
| `-EnumConstantDecl 0x55888b2c1390 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x55888b2c14b8 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b2c1370 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x55888b2c1350 <col:12> 'int' 1024
|-CXXMethodDecl 0x55888b2c16c8 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x55888b2c14e0 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x55888b2c1580 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x55888b2c1850 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x55888b2c1788 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x55888b2c18f8 <line:580:3, col:10> col:3 private
|-FieldDecl 0x55888b2c1938 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x55888b2c1998 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x55888b2c1a10 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x55888b2c1e10 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x55888b2c1a88 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x55888b2c1b08 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x55888b2c1b88 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x55888b2c1c00 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x55888b2c1c78 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x55888b2c1cf0 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x55888b2c1f38 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x55888b2c1f38
| `-ParmVarDecl 0x55888b2c2048 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x55888b2c4148 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x55888b2c4148
  `-ParmVarDecl 0x55888b2c4258 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b31b468 prev 0x55888b261288 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b31b560 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x55888b31b5f0 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x55888b31b6f8 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x55888b31b628 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55888b31cad0 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b31cab0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55888b31c648 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55888b31cb60 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55888b31cb20 <col:17> 'ErrorHandler *' lvalue ParmVar 0x55888b31b628 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55888b31c6b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55888b31cbe0 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b31cba0 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x55888b31c710 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55888b31cc20 <col:54> 'bool' false
| `-CompoundStmt 0x55888b31cd28 <col:61, line:38:5>
|   `-BinaryOperator 0x55888b31cd08 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x55888b31cca0 <col:9> 'const Element *' lvalue ->_context 0x55888b31c5e8
|     | `-CXXThisExpr 0x55888b31cc90 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x55888b31ccf0 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x55888b31ccd0 <col:20> 'int' 0
|-CXXConstructorDecl 0x55888b31b908 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b31b7b8 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x55888b31b830 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x55888b31cb08 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b31cae8 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x55888b31c5e8 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x55888b31cd80 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x55888b31cd40 <col:20> 'const Element *' lvalue ParmVar 0x55888b31b7b8 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x55888b31c648 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x55888b31ce00 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x55888b31cdc0 <col:36> 'ErrorHandler *' lvalue ParmVar 0x55888b31b830 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x55888b31c6b0 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x55888b31ce80 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x55888b31ce40 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x55888b31c710 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x55888b31cec0 <col:73> 'bool' false
| `-CompoundStmt 0x55888b31cf38 <col:80, line:46:5>
|-CXXMethodDecl 0x55888b31ba38 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x55888b31cfb0 <col:36, line:51:5>
|   `-ReturnStmt 0x55888b31cfa0 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x55888b31cf88 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x55888b31cf58 <col:16> 'const Element *const' lvalue ->_context 0x55888b31c5e8
|         `-CXXThisExpr 0x55888b31cf48 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55888b31bb28 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x55888b31d030 <col:32, line:57:5>
|   `-ReturnStmt 0x55888b31d020 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x55888b31d008 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x55888b31cfd8 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x55888b31c648
|         `-CXXThisExpr 0x55888b31cfc8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x55888b31bbe8 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x55888b31bd70 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x55888b31bca0 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x55888b31bec0 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x55888b31be30 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55888b31c010 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x55888b31bf80 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x55888b31c218 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x55888b31c0c8 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x55888b31c140 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x55888b31c4f8 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x55888b31c2d8 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x55888b31c358 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x55888b31c3d0 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x55888b31c5b0 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x55888b31c5e8 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x55888b31c648 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x55888b31c6b0 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x55888b31c710 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x55888b31c760 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x55888b31c760
| `-ParmVarDecl 0x55888b31c878 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x55888b31c918 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x55888b31c918
| `-ParmVarDecl 0x55888b31ca28 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x55888b387c48 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55888b33e610 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x55888b33e7e8 prev 0x55888b33e610 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x55888b33e878 <col:46, col:52> col:46 public
|-TypedefDecl 0x55888b33e8a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34bd00 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x55888b34bcb0 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x55888b33ed50 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x55888b33ec50 'type'
|     `-TemplateSpecializationType 0x55888b33ebe0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x55888b33eac0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x55888b33eaa0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x55888b33ea80 <col:24> 'unsigned long' 4
|       `-RecordType 0x55888b33ebc0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x55888b33eae0 'char_array'
|-TypedefDecl 0x55888b34bdb8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x55888b34bd80 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x55888b34bd60 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x55888b34bd00 'type'
|     `-ElaboratedType 0x55888b34bcb0 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x55888b33ed50 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x55888b33ec50 'type'
|         `-TemplateSpecializationType 0x55888b33ebe0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x55888b33eac0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x55888b33eaa0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x55888b33ea80 <col:24> 'unsigned long' 4
|           `-RecordType 0x55888b33ebc0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x55888b33eae0 'char_array'
|-CXXMethodDecl 0x55888b34bf38 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x55888b34be48 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x55888b34c028 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x55888b34c108 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x55888b34c3d8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55888b34c2e0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x55888b34c618 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55888b34c490 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55888b34c508 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34c7e8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55888b34c6d8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55888b34c750 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34c948 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55888b34ca18 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x55888b34cc68 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55888b34cad8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55888b34cb50 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34cec8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x55888b34cd38 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x55888b34cdb0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34d088 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55888b34cf98 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34d248 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x55888b34d150 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34d300 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55888b34d3b0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x55888b34d5e8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x55888b34d460 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x55888b34d4d8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x55888b34d888 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x55888b34d790 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x55888b34d950 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x55888b34d9a0 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x55888b34d9f0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55888b33d018 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x55888b33d228 prev 0x55888b33d018 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x55888b33e580 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x55888b33e530 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x55888b33e510 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x55888b33e3c0 'type'
|     `-SubstTemplateTypeParmType 0x55888b33e1e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x55888afffe80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888afffe28 'T'
|       `-RecordType 0x55888b33dd30 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x55888b33dc48 'sized_array_memory'
|-FieldDecl 0x55888b34da40 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x55888b34da90 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x55888b34dac8 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|   |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x55888b037b18 'T'
|   `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34db58 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x55888b34db20 'int &'
|   `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|     |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55888b037b18 'T'
|     `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34dc18 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x55888b34dbe0 'const int &'
|   `-QualType 0x55888b33d2c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34dca8 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x55888b34dc70 'int *'
|   `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|     |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55888b037b18 'T'
|     `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34dd38 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x55888b34dd00 'const int *'
|   `-QualType 0x55888b33d2c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34e920 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x55888b34e8d0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x55888b34e8b0 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x55888b34e840 'type'
|     `-SubstTemplateTypeParmType 0x55888b34e600 'int' sugar
|       |-TemplateTypeParmType 0x55888b00ac80 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b00ac30 'T'
|       `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34e988 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x55888b34dbe0 'const int &'
|   `-QualType 0x55888b33d2c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34e9e0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34ea48 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x55888b34dc70 'int *'
|   `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|     |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x55888b037b18 'T'
|     `-BuiltinType 0x55888ad3a580 'int'
|-TypedefDecl 0x55888b34eab0 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x55888b34dd00 'const int *'
|   `-QualType 0x55888b33d2c1 'const int' const
|     `-SubstTemplateTypeParmType 0x55888b33d2c0 'int' sugar
|       |-TemplateTypeParmType 0x55888b037b70 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x55888b037b18 'T'
|       `-BuiltinType 0x55888ad3a580 'int'
|-EnumDecl 0x55888b34eb08 <line:134:5> col:5
| `-EnumConstantDecl 0x55888b34ec00 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x55888b34ebe0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x55888b0391f8 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x55888b0391d0 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x55888b0391b0 <col:40> 'int' 1
|-CXXConstructorDecl 0x55888b34ec88 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x55888b34eed8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b34ed40 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55888b34ede0 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x55888b34f198 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x55888b34f080 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x55888b34f458 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x55888b34f340 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x55888b34f7a0 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x55888b34f680 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x55888b34fab0 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x55888b34f990 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x55888b34fda0 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b34fbe8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55888b34fc60 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55888b34fec8 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55888b34ffa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b350000 <col:30> Inherited
|-CXXMethodDecl 0x55888b350048 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x55888b3500f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b350150 <col:30> Inherited
|-CXXMethodDecl 0x55888b350218 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55888b3502c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b350320 <col:30> Inherited
|-CXXMethodDecl 0x55888b350368 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55888b350418 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b350470 <col:30> Inherited
|-CXXMethodDecl 0x55888b3504b8 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55888b350568 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b3505c0 <col:30> Inherited
|-CXXMethodDecl 0x55888b350608 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x55888b3506b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x55888b350710 <col:30> Inherited
|-CXXMethodDecl 0x55888b350738 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55888b3507e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x55888b350898 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x55888b350a58 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b350948 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x55888b3509c0 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55888b350ba8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x55888b350b18 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b350d58 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x55888b350c60 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55888b350e10 <col:20>
| `-OptimizeNoneAttr 0x55888b350e68 <col:30>
|-CXXMethodDecl 0x55888b350f88 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x55888b350e90 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x55888b351040 <col:20>
| `-OptimizeNoneAttr 0x55888b351098 <col:30>
|-CXXMethodDecl 0x55888b351150 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55888b3510c0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b351298 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55888b351208 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b3513c8 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x55888b3514f8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x55888b3515c8 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x55888b351698 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x55888b3517d8 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x55888b351748 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b351920 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x55888b351890 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x55888b351a68 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x55888b3519d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55888b351b20 <col:48> Inherited "" ""
|-CXXMethodDecl 0x55888b351c20 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x55888b351b90 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x55888b351cd8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x55888b351d98 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x55888b351e98 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x55888b352018 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55888b351f58 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x55888b3527d8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x55888b3520d0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x55888b352738 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x55888b352638 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x55888b3528b8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x55888b352a08 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x55888b352978 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55888b352ac0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x55888b352d08 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x55888b352b80 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55888b352bf8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x55888b352ec8 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x55888b352dd8 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55888b353118 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x55888b352f90 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x55888b353008 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x55888b3531d8 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x55888b354418 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x55888b354320 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x55888b3544e8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b33b188 prev 0x55888b321f68 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x55888b33b280 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x55888b33b370 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x55888b365eb0 <col:16, line:828:9>
|-CXXDestructorDecl 0x55888b33b460 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x55888b365ec0 <col:25, line:830:9>
|-CXXMethodDecl 0x55888b33b560 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x55888b33b610 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x55888b33b6b8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55888b33b6b8
| `-ParmVarDecl 0x55888b33b7c8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x55888b33bf88 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55888b33bf88
  `-ParmVarDecl 0x55888b33c098 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b321d78 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x55888b321ed8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x55888b321f68 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x55888b322020 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x55888b322128 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x55888b322058 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55888b355aa8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55888b355a88 <col:31> 'int' 0
|-CXXConstructorDecl 0x55888b322448 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x55888b3222c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x55888b322338 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55888b355ae0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55888b355ac0 <col:59> 'int' 0
|-CXXConstructorDecl 0x55888b322620 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b322510 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x55888b322588 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55888b355b18 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55888b355af8 <col:55> 'int' 0
|-CXXConstructorDecl 0x55888b3229d8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x55888b3227c0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x55888b322838 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x55888b3228b0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x55888b355b50 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x55888b355b30 <col:31> 'int' 0
|-CXXConstructorDecl 0x55888b322b98 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x55888b322ad8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x55888b322c90 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x55888b322e78 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x55888b322d80 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x55888b322f68 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x55888b355f00 <col:24, line:291:5>
|   `-ReturnStmt 0x55888b355ef0 <line:290:9, col:79>
|     `-BinaryOperator 0x55888b355ed0 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x55888b355da8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x55888b355d00 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x55888b355ce0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x55888b355bd8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x55888b355bc0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x55888b355ba8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x55888b355b78 <col:18> 'Vector<String> *const' lvalue ->_conf 0x55888b33cfb0
|       | |   |       `-CXXThisExpr 0x55888b355b68 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x55888b355cc8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x55888b355cb0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x55888b355c78 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x55888b355c48 <col:28, col:35> '<bound member function type>' ->size 0x55888b30dae8
|       | |           `-ImplicitCastExpr 0x55888b355c98 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x55888b355c30 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x55888b355c00 <col:28> 'Vector<String> *const' lvalue ->_conf 0x55888b33cfb0
|       | |                 `-CXXThisExpr 0x55888b355bf0 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x55888b355d90 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x55888b355d78 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x55888b355d60 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x55888b355d30 <col:47> 'Args::Slot *const' lvalue ->_slots 0x55888b354630
|       |         `-CXXThisExpr 0x55888b355d20 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x55888b355eb0 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x55888b355e98 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55888b355e80 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55888b355e40 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55888b355e28 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55888b355dd8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55888b3546e0
|         |     |   `-CXXThisExpr 0x55888b355dc8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55888b355e08 <col:73> 'int' 0
|         `-IntegerLiteral 0x55888b355e60 <col:79> 'int' 0
|-CXXMethodDecl 0x55888b323028 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x55888b3560d8 <col:32, line:296:5>
|   `-ReturnStmt 0x55888b3560c8 <line:295:9, col:49>
|     `-BinaryOperator 0x55888b3560a8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x55888b355f88 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x55888b355f70 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x55888b355f58 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x55888b355f28 <col:17> 'Args::Slot *const' lvalue ->_slots 0x55888b354630
|       |       `-CXXThisExpr 0x55888b355f18 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x55888b356088 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x55888b356070 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x55888b356058 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x55888b356018 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x55888b356000 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x55888b355fb0 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x55888b3546e0
|         |     |   `-CXXThisExpr 0x55888b355fa0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x55888b355fe0 <col:43> 'int' 0
|         `-IntegerLiteral 0x55888b356038 <col:49> 'int' 0
|-CXXMethodDecl 0x55888b323118 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x55888b3562e8 <col:19, line:306:5>
|   |-IfStmt 0x55888b356208 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x55888b356148 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x55888b356130 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x55888b356100 <col:13> 'Vector<String> *' lvalue ->_conf 0x55888b33cfb0
|   | |     `-CXXThisExpr 0x55888b3560f0 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x55888b3561e8 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x55888b3561b8 <col:13, col:20> '<bound member function type>' ->clear 0x55888b310538
|   |     `-ImplicitCastExpr 0x55888b3561a0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x55888b356170 <col:13> 'Vector<String> *' lvalue ->_conf 0x55888b33cfb0
|   |         `-CXXThisExpr 0x55888b356160 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x55888b356290 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x55888b356260 <col:9, col:16> '<bound member function type>' .clear 0x55888b3531d8
|   |   `-MemberExpr 0x55888b356230 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x55888b3545d0
|   |     `-CXXThisExpr 0x55888b356220 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x55888b3562d8 <line:305:9, col:17>
|     `-UnaryOperator 0x55888b3562c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b3562b0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55888b323398 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x55888b3232a0 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x55888b323518 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x55888b323450 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x55888b323898 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x55888b3235c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x55888b3237f8 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x55888b323668 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x55888b3236e0 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x55888b356608 <col:67, line:327:5>
|     |-WhileStmt 0x55888b3565b8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x55888b3563d0 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x55888b356350 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55888b259758 0x55888b0a2d38 0x55888b0a2a10 0x55888b0941f0 0x55888b093ea0 0x55888b093790 0x55888b066100 0x55888aff25c0
|     | | |-DeclRefExpr 0x55888b356310 <col:16> 'Iter' lvalue ParmVar 0x55888b323668 'begin' 'Iter'
|     | | `-DeclRefExpr 0x55888b356330 <col:25> 'Iter' lvalue ParmVar 0x55888b3236e0 'end' 'Iter'
|     | `-CompoundStmt 0x55888b356598 <col:30, line:325:9>
|     |   |-CallExpr 0x55888b356538 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x55888b356418 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x55888b356508 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x55888b356498 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|     |   |   `-DeclRefExpr 0x55888b356478 <col:24> 'Iter' lvalue ParmVar 0x55888b323668 'begin' 'Iter'
|     |   `-UnaryOperator 0x55888b356580 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x55888b356560 <col:15> 'Iter' lvalue ParmVar 0x55888b323668 'begin' 'Iter'
|     `-ReturnStmt 0x55888b3565f8 <line:326:9, col:17>
|       `-UnaryOperator 0x55888b3565e0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b3565d0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55888b3239a0 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x55888b323910 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x55888b323ae8 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x55888b323a58 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x55888b323bb0 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x55888b3566e8 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x55888b356688 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x55888b356638 <col:9> '<bound member function type>' ->reset_from 0x55888b354a58
|   | | `-CXXThisExpr 0x55888b356628 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x55888b356668 <col:20> 'int' 0
|   `-ReturnStmt 0x55888b3566d8 <line:352:9, col:17>
|     `-UnaryOperator 0x55888b3566c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b3566b0 <col:17> 'Args *' this
|-VarDecl 0x55888b323c68 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x55888b323cd0 <col:38> 'int' 1
|-VarDecl 0x55888b323d60 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x55888b323dc8 <col:39> 'int' 2
|-VarDecl 0x55888b323e58 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x55888b323ec0 <col:39> 'int' 4
|-VarDecl 0x55888b323f50 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x55888b323fb8 <col:39> 'int' 8
|-FunctionTemplateDecl 0x55888b324338 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x55888b324030 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b324298 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55888b3240e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b324188 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x55888b356840 <col:43, line:371:5>
|     `-ReturnStmt 0x55888b356830 <line:370:9, col:34>
|       `-CallExpr 0x55888b3567f8 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b356718 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b356798 <col:21> 'const char *' lvalue ParmVar 0x55888b3240e0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b3567b8 <col:30> 'int' 0
|         `-DeclRefExpr 0x55888b3567d8 <col:33> 'T' lvalue ParmVar 0x55888b324188 'x' 'T &'
|-FunctionTemplateDecl 0x55888b324668 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x55888b3243a0 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b3245c8 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55888b324450 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b3244f8 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x55888b356990 <col:45, line:375:5>
|     `-ReturnStmt 0x55888b356980 <line:374:9, col:42>
|       `-CallExpr 0x55888b356948 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b356868 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b3568e8 <col:21> 'const char *' lvalue ParmVar 0x55888b324450 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b356908 <col:30> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int'
|         `-DeclRefExpr 0x55888b356928 <col:41> 'T' lvalue ParmVar 0x55888b3244f8 'x' 'T &'
|-FunctionTemplateDecl 0x55888b324998 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x55888b3246d0 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x55888b3248f8 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x55888b324780 <col:18, col:30> col:30 referenced keyword 'const char *'
| | |-ParmVarDecl 0x55888b324828 <col:39, col:42> col:42 referenced x 'T &'
| | `-CompoundStmt 0x55888b356ae0 <col:45, line:379:5>
| |   `-ReturnStmt 0x55888b356ad0 <line:378:9, col:43>
| |     `-CallExpr 0x55888b356a98 <col:16, col:43> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x55888b3569b8 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x55888b356a38 <col:21> 'const char *' lvalue ParmVar 0x55888b324780 'keyword' 'const char *'
| |       |-DeclRefExpr 0x55888b356a58 <col:30> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int'
| |       `-DeclRefExpr 0x55888b356a78 <col:42> 'T' lvalue ParmVar 0x55888b324828 'x' 'T &'
| `-CXXMethodDecl 0x55888b3880b8 <line:377:5, line:379:5> line:377:11 used read_p 'Args &(const char *, unsigned int &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55888b387ed8 <col:18, col:30> col:30 keyword 'const char *'
|   `-ParmVarDecl 0x55888b387fa8 <col:39, col:42> col:42 x 'unsigned int &'
|-FunctionTemplateDecl 0x55888b324cc8 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x55888b324a00 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b324c28 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x55888b324ab0 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b324b58 <col:40, col:43> col:43 referenced x 'T &'
|   `-CompoundStmt 0x55888b356ce0 <col:46, line:383:5>
|     `-ReturnStmt 0x55888b356cd0 <line:382:9, col:55>
|       `-CallExpr 0x55888b356c98 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b356b08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b356b88 <col:21> 'const char *' lvalue ParmVar 0x55888b324ab0 'keyword' 'const char *'
|         |-BinaryOperator 0x55888b356c58 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55888b356c08 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55888b356be8 <col:30> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55888b356c40 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55888b356c20 <col:42> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55888b356c78 <col:54> 'T' lvalue ParmVar 0x55888b324b58 'x' 'T &'
|-FunctionTemplateDecl 0x55888b3250c8 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x55888b324d30 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b325028 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x55888b324de0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b324e60 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55888b324f08 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x55888b356e20 <col:54, line:388:5>
|     |-CallExpr 0x55888b356da8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b356cf8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55888b356d38 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55888b356d48 <col:30> 'const char *' lvalue ParmVar 0x55888b324de0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55888b356d68 <col:39> 'int' lvalue ParmVar 0x55888b324e60 'flags' 'int'
|     | `-DeclRefExpr 0x55888b356d88 <col:46> 'T' lvalue ParmVar 0x55888b324f08 'x' 'T &'
|     `-ReturnStmt 0x55888b356e10 <line:387:9, col:17>
|       `-UnaryOperator 0x55888b356df8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b356de8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b325578 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x55888b325138 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55888b3251b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55888b3254d8 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55888b325278 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b325318 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x55888b3253b8 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x55888b356f90 <col:74, line:403:5>
|     `-ReturnStmt 0x55888b356f80 <line:402:9, col:56>
|       `-CallExpr 0x55888b356f40 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b356e50 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b356ec0 <col:28> 'const char *' lvalue ParmVar 0x55888b325278 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b356ee0 <col:37> 'int' 0
|         |-DeclRefExpr 0x55888b356f00 <col:40> 'T' lvalue ParmVar 0x55888b325318 'x' 'T &'
|         `-DeclRefExpr 0x55888b356f20 <col:43> 'const V' lvalue ParmVar 0x55888b3253b8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55888b3259e8 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55888b3255e8 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55888b325668 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55888b325948 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x55888b325728 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b3257c8 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x55888b325868 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x55888b3570f8 <col:76, line:407:5>
|     `-ReturnStmt 0x55888b3570e8 <line:406:9, col:65>
|       `-CallExpr 0x55888b3570a8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b356fb8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357028 <col:28> 'const char *' lvalue ParmVar 0x55888b325728 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b357048 <col:37> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int'
|         |-DeclRefExpr 0x55888b357068 <col:49> 'T' lvalue ParmVar 0x55888b3257c8 'x' 'T &'
|         `-DeclRefExpr 0x55888b357088 <col:52> 'const V' lvalue ParmVar 0x55888b325868 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55888b325f38 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x55888b325a58 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55888b325ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55888b325e98 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55888b325b98 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b325c18 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55888b325cb8 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x55888b325d58 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x55888b357260 <col:85, line:412:5>
|     |-CallExpr 0x55888b3571e0 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b357110 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55888b357150 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55888b357160 <col:37> 'const char *' lvalue ParmVar 0x55888b325b98 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55888b357180 <col:46> 'int' lvalue ParmVar 0x55888b325c18 'flags' 'int'
|     | |-DeclRefExpr 0x55888b3571a0 <col:53> 'T' lvalue ParmVar 0x55888b325cb8 'x' 'T &'
|     | `-DeclRefExpr 0x55888b3571c0 <col:56> 'const V' lvalue ParmVar 0x55888b325d58 'default_value' 'const V &'
|     `-ReturnStmt 0x55888b357250 <line:411:9, col:17>
|       `-UnaryOperator 0x55888b357238 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b357228 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b3263c8 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x55888b325fb0 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b326028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b326328 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b3260e8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b326160 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55888b326208 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x55888b3573e0 <col:53, line:425:5>
|     `-ReturnStmt 0x55888b3573d0 <line:424:9, col:42>
|       `-CallExpr 0x55888b357390 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b357290 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357310 <col:21> 'const char *' lvalue ParmVar 0x55888b3260e8 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b357330 <col:30> 'int' 0
|         |-DeclRefExpr 0x55888b357350 <col:33> 'P' lvalue ParmVar 0x55888b326160 'parser' 'P'
|         `-DeclRefExpr 0x55888b357370 <col:41> 'T' lvalue ParmVar 0x55888b326208 'x' 'T &'
|-FunctionTemplateDecl 0x55888b326818 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x55888b326438 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b3264b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b326778 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b326578 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b3265f0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55888b326698 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55888b357558 <col:55, line:429:5>
|     `-ReturnStmt 0x55888b357548 <line:428:9, col:50>
|       `-CallExpr 0x55888b357508 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b357408 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357488 <col:21> 'const char *' lvalue ParmVar 0x55888b326578 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b3574a8 <col:30> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int'
|         |-DeclRefExpr 0x55888b3574c8 <col:41> 'P' lvalue ParmVar 0x55888b3265f0 'parser' 'P'
|         `-DeclRefExpr 0x55888b3574e8 <col:49> 'T' lvalue ParmVar 0x55888b326698 'x' 'T &'
|-FunctionTemplateDecl 0x55888b326c68 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x55888b326888 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b326908 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b326bc8 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b3269c8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b326a40 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55888b326ae8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x55888b3576d0 <col:55, line:433:5>
|     `-ReturnStmt 0x55888b3576c0 <line:432:9, col:51>
|       `-CallExpr 0x55888b357680 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b357580 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357600 <col:21> 'const char *' lvalue ParmVar 0x55888b3269c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b357620 <col:30> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int'
|         |-DeclRefExpr 0x55888b357640 <col:42> 'P' lvalue ParmVar 0x55888b326a40 'parser' 'P'
|         `-DeclRefExpr 0x55888b357660 <col:50> 'T' lvalue ParmVar 0x55888b326ae8 'x' 'T &'
|-FunctionTemplateDecl 0x55888b3270b8 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x55888b326cd8 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b326d58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b327018 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b326e18 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b326e90 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55888b326f38 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x55888b3578f8 <col:56, line:437:5>
|     `-ReturnStmt 0x55888b3578e8 <line:436:9, col:63>
|       `-CallExpr 0x55888b3578a8 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b3576f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357778 <col:21> 'const char *' lvalue ParmVar 0x55888b326e18 'keyword' 'const char *'
|         |-BinaryOperator 0x55888b357848 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55888b3577f8 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55888b3577d8 <col:30> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55888b357830 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55888b357810 <col:42> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55888b357868 <col:54> 'P' lvalue ParmVar 0x55888b326e90 'parser' 'P'
|         `-DeclRefExpr 0x55888b357888 <col:62> 'T' lvalue ParmVar 0x55888b326f38 'x' 'T &'
|-FunctionTemplateDecl 0x55888b3275e8 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x55888b327128 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b3271a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b327548 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55888b327268 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b3272e8 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55888b327360 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55888b327408 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x55888b357a60 <col:64, line:442:5>
|     |-CallExpr 0x55888b3579e0 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b357910 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55888b357950 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55888b357960 <col:30> 'const char *' lvalue ParmVar 0x55888b327268 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55888b357980 <col:39> 'int' lvalue ParmVar 0x55888b3272e8 'flags' 'int'
|     | |-DeclRefExpr 0x55888b3579a0 <col:46> 'P' lvalue ParmVar 0x55888b327360 'parser' 'P'
|     | `-DeclRefExpr 0x55888b3579c0 <col:54> 'T' lvalue ParmVar 0x55888b327408 'x' 'T &'
|     `-ReturnStmt 0x55888b357a50 <line:441:9, col:17>
|       `-UnaryOperator 0x55888b357a38 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b357a28 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b32a220 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x55888b327660 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b3276d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55888b327758 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55888b32a180 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55888b327820 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b327898 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55888b327938 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x55888b327a08 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x55888b357bf8 <col:84, line:458:5>
|     `-ReturnStmt 0x55888b357be8 <line:457:9, col:64>
|       `-CallExpr 0x55888b357ba0 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b357a90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357b00 <col:28> 'const char *' lvalue ParmVar 0x55888b327820 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b357b20 <col:37> 'int' 0
|         |-DeclRefExpr 0x55888b357b40 <col:40> 'P' lvalue ParmVar 0x55888b327898 'parser' 'P'
|         |-DeclRefExpr 0x55888b357b60 <col:48> 'T' lvalue ParmVar 0x55888b327938 'x' 'T &'
|         `-DeclRefExpr 0x55888b357b80 <col:51> 'const V' lvalue ParmVar 0x55888b327a08 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55888b32a7a8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x55888b32a298 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32a318 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55888b32a398 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55888b32a708 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x55888b32a460 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32a4d8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32a578 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x55888b32a618 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x55888b357d88 <col:86, line:462:5>
|     `-ReturnStmt 0x55888b357d78 <line:461:9, col:73>
|       `-CallExpr 0x55888b357d30 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b357c20 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357c90 <col:28> 'const char *' lvalue ParmVar 0x55888b32a460 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b357cb0 <col:37> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int'
|         |-DeclRefExpr 0x55888b357cd0 <col:49> 'P' lvalue ParmVar 0x55888b32a4d8 'parser' 'P'
|         |-DeclRefExpr 0x55888b357cf0 <col:57> 'T' lvalue ParmVar 0x55888b32a578 'x' 'T &'
|         `-DeclRefExpr 0x55888b357d10 <col:60> 'const V' lvalue ParmVar 0x55888b32a618 'default_value' 'const V &'
|-FunctionTemplateDecl 0x55888b32ae08 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x55888b32a820 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32a898 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x55888b32a918 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55888b32ad68 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55888b32a9e0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32aa60 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x55888b32aad8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32ab78 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x55888b32ac18 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x55888b357f18 <col:95, line:467:5>
|     |-CallExpr 0x55888b357e90 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b357da0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x55888b357de0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x55888b357df0 <col:37> 'const char *' lvalue ParmVar 0x55888b32a9e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55888b357e10 <col:46> 'int' lvalue ParmVar 0x55888b32aa60 'flags' 'int'
|     | |-DeclRefExpr 0x55888b357e30 <col:53> 'P' lvalue ParmVar 0x55888b32aad8 'parser' 'P'
|     | |-DeclRefExpr 0x55888b357e50 <col:61> 'T' lvalue ParmVar 0x55888b32ab78 'x' 'T &'
|     | `-DeclRefExpr 0x55888b357e70 <col:64> 'const V' lvalue ParmVar 0x55888b32ac18 'default_value' 'const V &'
|     `-ReturnStmt 0x55888b357f08 <line:466:9, col:17>
|       `-UnaryOperator 0x55888b357ef0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b357ee0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b32b3e8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x55888b32ae88 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32af08 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55888b32af88 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55888b32b348 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55888b32b050 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32b0c8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32b168 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55888b32b208 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x55888b3580c0 <col:63, line:481:5>
|     `-ReturnStmt 0x55888b3580b0 <line:480:9, col:47>
|       `-CallExpr 0x55888b358068 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b357f48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b357fc8 <col:21> 'const char *' lvalue ParmVar 0x55888b32b050 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b357fe8 <col:30> 'int' 0
|         |-DeclRefExpr 0x55888b358008 <col:33> 'P' lvalue ParmVar 0x55888b32b0c8 'parser' 'P'
|         |-DeclRefExpr 0x55888b358028 <col:41> 'T1' lvalue ParmVar 0x55888b32b168 'x1' 'T1 &'
|         `-DeclRefExpr 0x55888b358048 <col:45> 'T2' lvalue ParmVar 0x55888b32b208 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55888b32b968 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x55888b32b460 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32b4d8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55888b32b558 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55888b32b8c8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55888b32b620 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32b698 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32b738 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55888b32b7d8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55888b358260 <col:65, line:485:5>
|     `-ReturnStmt 0x55888b358250 <line:484:9, col:55>
|       `-CallExpr 0x55888b358208 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b3580e8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b358168 <col:21> 'const char *' lvalue ParmVar 0x55888b32b620 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b358188 <col:30> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int'
|         |-DeclRefExpr 0x55888b3581a8 <col:41> 'P' lvalue ParmVar 0x55888b32b698 'parser' 'P'
|         |-DeclRefExpr 0x55888b3581c8 <col:49> 'T1' lvalue ParmVar 0x55888b32b738 'x1' 'T1 &'
|         `-DeclRefExpr 0x55888b3581e8 <col:53> 'T2' lvalue ParmVar 0x55888b32b7d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55888b32bee8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x55888b32b9e0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32ba58 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55888b32bad8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55888b32be48 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55888b32bba0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32bc18 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32bcb8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55888b32bd58 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x55888b358400 <col:65, line:489:5>
|     `-ReturnStmt 0x55888b3583f0 <line:488:9, col:56>
|       `-CallExpr 0x55888b3583a8 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358288 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b358308 <col:21> 'const char *' lvalue ParmVar 0x55888b32bba0 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b358328 <col:30> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int'
|         |-DeclRefExpr 0x55888b358348 <col:42> 'P' lvalue ParmVar 0x55888b32bc18 'parser' 'P'
|         |-DeclRefExpr 0x55888b358368 <col:50> 'T1' lvalue ParmVar 0x55888b32bcb8 'x1' 'T1 &'
|         `-DeclRefExpr 0x55888b358388 <col:54> 'T2' lvalue ParmVar 0x55888b32bd58 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55888b32c468 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x55888b32bf60 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32bfd8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55888b32c058 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55888b32c3c8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55888b32c120 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32c198 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32c238 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55888b32c2d8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x55888b358650 <col:66, line:493:5>
|     `-ReturnStmt 0x55888b358640 <line:492:9, col:68>
|       `-CallExpr 0x55888b3585f8 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358428 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b3584a8 <col:21> 'const char *' lvalue ParmVar 0x55888b32c120 'keyword' 'const char *'
|         |-BinaryOperator 0x55888b358578 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x55888b358528 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55888b358508 <col:30> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55888b358560 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55888b358540 <col:42> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x55888b358598 <col:54> 'P' lvalue ParmVar 0x55888b32c198 'parser' 'P'
|         |-DeclRefExpr 0x55888b3585b8 <col:62> 'T1' lvalue ParmVar 0x55888b32c238 'x1' 'T1 &'
|         `-DeclRefExpr 0x55888b3585d8 <col:66> 'T2' lvalue ParmVar 0x55888b32c2d8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x55888b32cac8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x55888b32c4e0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32c558 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55888b32c5d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55888b32ca28 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55888b32c6a0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32c720 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x55888b32c798 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32c838 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x55888b32c8d8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x55888b3587e0 <col:74, line:498:5>
|     |-CallExpr 0x55888b358758 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b358668 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x55888b3586a8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x55888b3586b8 <col:30> 'const char *' lvalue ParmVar 0x55888b32c6a0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55888b3586d8 <col:39> 'int' lvalue ParmVar 0x55888b32c720 'flags' 'int'
|     | |-DeclRefExpr 0x55888b3586f8 <col:46> 'P' lvalue ParmVar 0x55888b32c798 'parser' 'P'
|     | |-DeclRefExpr 0x55888b358718 <col:54> 'T1' lvalue ParmVar 0x55888b32c838 'x1' 'T1 &'
|     | `-DeclRefExpr 0x55888b358738 <col:58> 'T2' lvalue ParmVar 0x55888b32c8d8 'x2' 'T2 &'
|     `-ReturnStmt 0x55888b3587d0 <line:497:9, col:17>
|       `-UnaryOperator 0x55888b3587b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b3587a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b32ce28 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x55888b32cb48 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32cd88 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55888b32cc00 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32cc78 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x55888b358928 <col:52, line:509:5>
|     `-ReturnStmt 0x55888b358918 <line:508:9, col:44>
|       `-CallExpr 0x55888b3588e0 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358810 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b358880 <col:26> 'const char *' lvalue ParmVar 0x55888b32cc00 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b3588a0 <col:35> 'int' 0
|         `-DeclRefExpr 0x55888b3588c0 <col:38> 'P' lvalue ParmVar 0x55888b32cc78 'parser' 'P'
|-FunctionTemplateDecl 0x55888b32d128 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x55888b32ce90 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32d088 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55888b32cf40 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32cfb8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55888b358a68 <col:54, line:513:5>
|     `-ReturnStmt 0x55888b358a58 <line:512:9, col:52>
|       `-CallExpr 0x55888b358a20 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358950 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b3589c0 <col:26> 'const char *' lvalue ParmVar 0x55888b32cf40 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b3589e0 <col:35> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int'
|         `-DeclRefExpr 0x55888b358a00 <col:46> 'P' lvalue ParmVar 0x55888b32cfb8 'parser' 'P'
|-FunctionTemplateDecl 0x55888b32d428 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x55888b32d190 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32d388 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55888b32d240 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32d2b8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x55888b358ba8 <col:54, line:517:5>
|     `-ReturnStmt 0x55888b358b98 <line:516:9, col:53>
|       `-CallExpr 0x55888b358b60 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358a90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b358b00 <col:26> 'const char *' lvalue ParmVar 0x55888b32d240 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b358b20 <col:35> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int'
|         `-DeclRefExpr 0x55888b358b40 <col:47> 'P' lvalue ParmVar 0x55888b32d2b8 'parser' 'P'
|-FunctionTemplateDecl 0x55888b32d728 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x55888b32d490 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32d688 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55888b32d540 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32d5b8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x55888b358d98 <col:55, line:521:5>
|     `-ReturnStmt 0x55888b358d88 <line:520:9, col:65>
|       `-CallExpr 0x55888b358d50 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358bd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b358c40 <col:26> 'const char *' lvalue ParmVar 0x55888b32d540 'keyword' 'const char *'
|         |-BinaryOperator 0x55888b358d10 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x55888b358cc0 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x55888b358ca0 <col:35> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x55888b358cf8 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x55888b358cd8 <col:47> 'const int' lvalue Var 0x55888b323d60 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x55888b358d30 <col:59> 'P' lvalue ParmVar 0x55888b32d5b8 'parser' 'P'
|-FunctionTemplateDecl 0x55888b32daf8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x55888b32d790 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32da58 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55888b32d840 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32d8c0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55888b32d938 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x55888b358ed8 <col:63, line:526:5>
|     |-CallExpr 0x55888b358e60 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b358db0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x55888b358df0 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x55888b358e00 <col:35> 'const char *' lvalue ParmVar 0x55888b32d840 'keyword' 'const char *'
|     | |-DeclRefExpr 0x55888b358e20 <col:44> 'int' lvalue ParmVar 0x55888b32d8c0 'flags' 'int'
|     | `-DeclRefExpr 0x55888b358e40 <col:51> 'P' lvalue ParmVar 0x55888b32d938 'parser' 'P'
|     `-ReturnStmt 0x55888b358ec8 <line:525:9, col:17>
|       `-UnaryOperator 0x55888b358eb0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b358ea0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b32df48 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x55888b32db68 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32dbe8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b32dea8 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b32dca8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32dd20 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32ddc8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x55888b359030 <col:58, line:541:5>
|     `-ReturnStmt 0x55888b359020 <line:540:9, col:39>
|       `-CallExpr 0x55888b358fe8 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b358f08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b358f88 <col:21> 'const char *' lvalue ParmVar 0x55888b32dca8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b358fa8 <col:30> 'P' lvalue ParmVar 0x55888b32dd20 'parser' 'P'
|         `-DeclRefExpr 0x55888b358fc8 <col:38> 'T' lvalue ParmVar 0x55888b32ddc8 'x' 'T &'
|-FunctionTemplateDecl 0x55888b32e398 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x55888b32dfb8 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32e038 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b32e2f8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b32e0f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32e170 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32e218 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55888b359168 <col:60, line:545:5>
|     `-ReturnStmt 0x55888b359158 <line:544:9, col:41>
|       `-CallExpr 0x55888b359120 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359058 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b3590c0 <col:23> 'const char *' lvalue ParmVar 0x55888b32e0f8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b3590e0 <col:32> 'P' lvalue ParmVar 0x55888b32e170 'parser' 'P'
|         `-DeclRefExpr 0x55888b359100 <col:40> 'T' lvalue ParmVar 0x55888b32e218 'x' 'T &'
|-FunctionTemplateDecl 0x55888b32e7e8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x55888b32e408 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32e488 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b32e748 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b32e548 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32e5c0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32e668 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x55888b3592a0 <col:60, line:549:5>
|     `-ReturnStmt 0x55888b359290 <line:548:9, col:41>
|       `-CallExpr 0x55888b359258 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359190 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b3591f8 <col:23> 'const char *' lvalue ParmVar 0x55888b32e548 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b359218 <col:32> 'P' lvalue ParmVar 0x55888b32e5c0 'parser' 'P'
|         `-DeclRefExpr 0x55888b359238 <col:40> 'T' lvalue ParmVar 0x55888b32e668 'x' 'T &'
|-FunctionTemplateDecl 0x55888b32ec38 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x55888b32e858 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32e8d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b32eb98 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b32e998 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32ea10 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32eab8 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x55888b3593d8 <col:61, line:553:5>
|     `-ReturnStmt 0x55888b3593c8 <line:552:9, col:42>
|       `-CallExpr 0x55888b359390 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b3592c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b359330 <col:24> 'const char *' lvalue ParmVar 0x55888b32e998 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b359350 <col:33> 'P' lvalue ParmVar 0x55888b32ea10 'parser' 'P'
|         `-DeclRefExpr 0x55888b359370 <col:41> 'T' lvalue ParmVar 0x55888b32eab8 'x' 'T &'
|-FunctionTemplateDecl 0x55888b32f118 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x55888b32eca8 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32ed28 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b32f078 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55888b32ede8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32ee68 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x55888b32eee0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32ef88 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x55888b359550 <col:69, line:557:5>
|     `-ReturnStmt 0x55888b359540 <line:556:9, col:46>
|       `-CallExpr 0x55888b359500 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359400 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b359480 <col:21> 'const char *' lvalue ParmVar 0x55888b32ede8 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b3594a0 <col:30> 'int' lvalue ParmVar 0x55888b32ee68 'flags' 'int'
|         |-DeclRefExpr 0x55888b3594c0 <col:37> 'P' lvalue ParmVar 0x55888b32eee0 'parser' 'P'
|         `-DeclRefExpr 0x55888b3594e0 <col:45> 'T' lvalue ParmVar 0x55888b32ef88 'x' 'T &'
|-FunctionTemplateDecl 0x55888b32f428 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x55888b32f190 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32f388 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x55888b32f240 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32f2b8 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x55888b359690 <col:56, line:571:5>
|     `-ReturnStmt 0x55888b359680 <line:570:9, col:48>
|       `-CallExpr 0x55888b359648 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359578 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b3595e8 <col:30> 'const char *' lvalue ParmVar 0x55888b32f240 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b359608 <col:39> 'int' 0
|         `-DeclRefExpr 0x55888b359628 <col:42> 'P' lvalue ParmVar 0x55888b32f2b8 'parser' 'P'
|-FunctionTemplateDecl 0x55888b32f7b8 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x55888b32f490 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b32f718 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x55888b32f540 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32f5c0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55888b32f638 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55888b359860 <col:67, line:576:5>
|     |-CallExpr 0x55888b3597e8 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b3596a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55888b3596e8 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55888b3596f8 <col:39> 'const char *' lvalue ParmVar 0x55888b32f540 'keyword' 'const char *'
|     | |-BinaryOperator 0x55888b3597a8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55888b359758 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55888b359718 <col:48> 'int' lvalue ParmVar 0x55888b32f5c0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55888b359790 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55888b359770 <col:56> 'const int' lvalue Var 0x55888b323f50 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x55888b3597c8 <col:68> 'P' lvalue ParmVar 0x55888b32f638 'parser' 'P'
|     `-ReturnStmt 0x55888b359850 <line:575:9, col:17>
|       `-UnaryOperator 0x55888b359838 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b359828 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b32fc08 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x55888b32f828 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32f8a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b32fb68 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x55888b32f968 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32f9e0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32fa88 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x55888b3599d0 <col:62, line:592:5>
|     `-ReturnStmt 0x55888b3599c0 <line:591:9, col:51>
|       `-CallExpr 0x55888b359980 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359890 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b359900 <col:30> 'const char *' lvalue ParmVar 0x55888b32f968 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b359920 <col:39> 'int' 0
|         |-DeclRefExpr 0x55888b359940 <col:42> 'P' lvalue ParmVar 0x55888b32f9e0 'parser' 'P'
|         `-DeclRefExpr 0x55888b359960 <col:50> 'T' lvalue ParmVar 0x55888b32fa88 'x' 'T &'
|-FunctionTemplateDecl 0x55888b3300e8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x55888b32fc78 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b32fcf8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b330048 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x55888b32fdb8 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b32fe38 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55888b32feb0 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x55888b32ff58 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x55888b359bc8 <col:73, line:597:5>
|     |-CallExpr 0x55888b359b48 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b3599e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x55888b359a28 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x55888b359a38 <col:39> 'const char *' lvalue ParmVar 0x55888b32fdb8 'keyword' 'const char *'
|     | |-BinaryOperator 0x55888b359ae8 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x55888b359a98 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55888b359a58 <col:48> 'int' lvalue ParmVar 0x55888b32fe38 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55888b359ad0 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55888b359ab0 <col:56> 'const int' lvalue Var 0x55888b323f50 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55888b359b08 <col:68> 'P' lvalue ParmVar 0x55888b32feb0 'parser' 'P'
|     | `-DeclRefExpr 0x55888b359b28 <col:76> 'T' lvalue ParmVar 0x55888b32ff58 'x' 'T &'
|     `-ReturnStmt 0x55888b359bb8 <line:596:9, col:17>
|       `-UnaryOperator 0x55888b359ba0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b359b90 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b330698 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x55888b330160 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b3301d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b3305f8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x55888b330298 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b330310 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x55888b3304d0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55888b359d38 <col:65, line:614:5>
|     `-ReturnStmt 0x55888b359d28 <line:613:9, col:46>
|       `-CallExpr 0x55888b359ce8 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359bf8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b359c68 <col:25> 'const char *' lvalue ParmVar 0x55888b330298 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b359c88 <col:34> 'int' 0
|         |-DeclRefExpr 0x55888b359ca8 <col:37> 'P' lvalue ParmVar 0x55888b330310 'parser' 'P'
|         `-DeclRefExpr 0x55888b359cc8 <col:45> 'Vector<T>' lvalue ParmVar 0x55888b3304d0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55888b330ac8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x55888b330708 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b330a28 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x55888b3307c0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b330910 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55888b359f50 <col:55, line:618:5>
|     `-ReturnStmt 0x55888b359f40 <line:617:9, col:55>
|       `-CallExpr 0x55888b359f00 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b359d60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b359dd0 <col:25> 'const char *' lvalue ParmVar 0x55888b3307c0 'keyword' 'const char *'
|         |-IntegerLiteral 0x55888b359df0 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x55888b359ec0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55888b359ee0 <col:54> 'Vector<T>' lvalue ParmVar 0x55888b330910 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x55888b331098 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x55888b330b30 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b330ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b330ff8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55888b330c68 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b330ce8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55888b330d60 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55888b330eb0 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55888b35a148 <col:76, line:623:5>
|     |-CallExpr 0x55888b35a0c8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x55888b359f68 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x55888b359fa8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x55888b359fb8 <col:34> 'const char *' lvalue ParmVar 0x55888b330c68 'keyword' 'const char *'
|     | |-BinaryOperator 0x55888b35a068 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x55888b35a018 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x55888b359fd8 <col:43> 'int' lvalue ParmVar 0x55888b330ce8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x55888b35a050 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x55888b35a030 <col:51> 'const int' lvalue Var 0x55888b323f50 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x55888b35a088 <col:63> 'P' lvalue ParmVar 0x55888b330d60 'parser' 'P'
|     | `-DeclRefExpr 0x55888b35a0a8 <col:71> 'Vector<T>' lvalue ParmVar 0x55888b330eb0 'x' 'Vector<T> &'
|     `-ReturnStmt 0x55888b35a138 <line:622:9, col:17>
|       `-UnaryOperator 0x55888b35a120 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b35a110 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b3315d8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x55888b331110 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b331188 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b331538 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x55888b331248 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b3312c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55888b331410 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x55888b35a3b0 <col:66, line:627:5>
|     `-ReturnStmt 0x55888b35a3a0 <line:626:9, col:59>
|       `-CallExpr 0x55888b35a360 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x55888b35a178 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x55888b35a1e8 <col:25> 'const char *' lvalue ParmVar 0x55888b331248 'keyword' 'const char *'
|         |-DeclRefExpr 0x55888b35a208 <col:34> 'int' lvalue ParmVar 0x55888b3312c8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x55888b35a320 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x55888b35a340 <col:58> 'Vector<T>' lvalue ParmVar 0x55888b331410 'x' 'Vector<T> &'
|-CXXMethodDecl 0x55888b331668 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x55888b35a430 <col:25, line:633:5>
|   `-ReturnStmt 0x55888b35a420 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x55888b35a408 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55888b35a3d8 <col:16> 'const bool' lvalue ->_status 0x55888b33ce18
|         `-CXXThisExpr 0x55888b35a3c8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55888b3317e8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x55888b331720 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x55888b35a518 <col:27, line:639:5>
|   |-BinaryOperator 0x55888b35a4c0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55888b35a448 <col:9> 'bool' lvalue ParmVar 0x55888b331720 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55888b35a4a8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55888b35a478 <col:13> 'bool' lvalue ->_status 0x55888b33ce18
|   |     `-CXXThisExpr 0x55888b35a468 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55888b35a508 <line:638:9, col:17>
|     `-UnaryOperator 0x55888b35a4f0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b35a4e0 <col:17> 'Args *' this
|-CXXMethodDecl 0x55888b331968 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55888b3318a8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x55888b35a608 <col:39, line:644:5>
|   |-BinaryOperator 0x55888b35a5b0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55888b35a538 <col:9> 'bool' lvalue ParmVar 0x55888b3318a8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55888b35a598 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55888b35a568 <col:13> 'const bool' lvalue ->_status 0x55888b33ce18
|   |     `-CXXThisExpr 0x55888b35a558 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55888b35a5f8 <line:643:9, col:17>
|     `-UnaryOperator 0x55888b35a5e0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b35a5d0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55888b331a30 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x55888b35a6b0 <col:30, line:651:5>
|   `-ReturnStmt 0x55888b35a6a0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x55888b35a688 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x55888b35a658 <col:16> 'bool' lvalue ->_read_status 0x55888b31c710
|         `-ImplicitCastExpr 0x55888b35a638 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x55888b35a628 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x55888b331b78 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x55888b331ae8 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x55888b35a7b8 <col:32, line:658:5>
|   |-BinaryOperator 0x55888b35a760 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55888b35a6c8 <col:9> 'bool' lvalue ParmVar 0x55888b331ae8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55888b35a748 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55888b35a718 <col:13> 'bool' lvalue ->_read_status 0x55888b31c710
|   |     `-ImplicitCastExpr 0x55888b35a6f8 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55888b35a6e8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x55888b35a7a8 <line:657:9, col:17>
|     `-UnaryOperator 0x55888b35a790 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b35a780 <col:17> 'Args *' this
|-CXXMethodDecl 0x55888b331cc8 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x55888b331c38 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x55888b35a8c8 <col:44, line:663:5>
|   |-BinaryOperator 0x55888b35a870 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x55888b35a7d8 <col:9> 'bool' lvalue ParmVar 0x55888b331c38 'x' 'bool &'
|   | `-ImplicitCastExpr 0x55888b35a858 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x55888b35a828 <col:13> 'bool' lvalue ->_read_status 0x55888b31c710
|   |     `-ImplicitCastExpr 0x55888b35a808 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x55888b35a7f8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x55888b35a8b8 <line:662:9, col:17>
|     `-UnaryOperator 0x55888b35a8a0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x55888b35a890 <col:17> 'const Args *' this
|-CXXMethodDecl 0x55888b331d90 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x55888b331e58 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x55888b331f20 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x55888b331fe8 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x55888b337c68 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x55888b332088 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b337bc8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x55888b337ad8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x55888b35ac80 <col:19, line:706:5>
|     `-IfStmt 0x55888b35ac58 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x55888b35a9c8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x55888b35ab88 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x55888b35ab58 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x55888b35ab18 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x55888b35aa20 <col:42> '<bound member function type>' ->simple_slot 0x55888b355710
|       |     | `-CXXThisExpr 0x55888b35aa10 <col:42> 'Args *' implicit this
|       |     |-CXXOperatorCallExpr 0x55888b35aab8 <col:54, col:55> '<dependent type>'
|       |     | |-UnresolvedLookupExpr 0x55888b35aa70 <col:54> '<overloaded function type>' lvalue (ADL) = 'operator&' 0x55888b0a77d8
|       |     | `-DeclRefExpr 0x55888b35aa50 <col:55> 'T' lvalue ParmVar 0x55888b337ad8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x55888b35aaf8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x55888b35ac48 <line:705:13, col:34>
|         `-CallExpr 0x55888b35ac20 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x55888b35aba8 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x55888b35ac00 <col:33> 'T' lvalue ParmVar 0x55888b337ad8 'x' 'T &'
|-FunctionTemplateDecl 0x55888b337f38 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x55888b337cc8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b337e98 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x55888b337da8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x55888b35b060 <col:31, line:717:5>
|     |-DeclStmt 0x55888b35adc0 <line:713:9, col:23>
|     | `-VarDecl 0x55888b35aca8 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x55888b35ad98 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55888b35ad20 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55888b35ad78 <col:21> 'T' lvalue ParmVar 0x55888b337da8 'x' 'T &'
|     |-IfStmt 0x55888b35b010 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x55888b35aeb8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x55888b35aff0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55888b35af90 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55888b35af20 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|     |   | `-DeclRefExpr 0x55888b35af00 <col:14> 'T *' lvalue Var 0x55888b35aca8 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x55888b35afd0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x55888b35b048 <line:716:9, col:16>
|       `-DeclRefExpr 0x55888b35b028 <col:16> 'T *' lvalue Var 0x55888b35aca8 's' 'T *'
|-FunctionTemplateDecl 0x55888b338348 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x55888b337f98 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55888b338018 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55888b3382a8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x55888b3380f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x55888b338198 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x55888b35b370 <col:37, line:726:5>
|     |-IfStmt 0x55888b35b300 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x55888b35b320 <line:723:13, col:26>
|     | | `-VarDecl 0x55888b35b0c8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x55888b35b1b8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x55888b35b140 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x55888b35b198 <col:25> 'T' lvalue ParmVar 0x55888b3380f8 'x' 'T &'
|     | |-DeclRefExpr 0x55888b35b1e0 <col:16> 'T *' lvalue Var 0x55888b35b0c8 's' 'T *'
|     | `-BinaryOperator 0x55888b35b2e0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x55888b35b290 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x55888b35b220 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|     |   | `-DeclRefExpr 0x55888b35b200 <col:14> 'T *' lvalue Var 0x55888b35b0c8 's' 'T *'
|     |   `-DeclRefExpr 0x55888b35b2c0 <col:18> 'const V' lvalue ParmVar 0x55888b338198 'value' 'const V &'
|     `-ReturnStmt 0x55888b35b360 <line:725:9, col:17>
|       `-UnaryOperator 0x55888b35b348 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x55888b35b338 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x55888b338748 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x55888b3383b0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x55888b3386a8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x55888b338460 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b3384e0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55888b338588 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x55888b35c190 <col:65, line:737:5>
|     |-DeclStmt 0x55888b35b408 <line:732:9, col:26>
|     | `-VarDecl 0x55888b35b3a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55888b35c158 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x55888b35c178 <line:733:13, col:58>
|       | `-VarDecl 0x55888b35b430 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55888b35b610 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55888b35b5e0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55888b35b5c8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55888b35b5a8 <col:26, col:58> 'String' (CXXTemporary 0x55888b35b5a8)
|       |           `-CXXMemberCallExpr 0x55888b35b538 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55888b35b4a8 <col:26> '<bound member function type>' ->find 0x55888b354d28
|       |             | `-CXXThisExpr 0x55888b35b498 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55888b35b570 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b35b4d8 <col:31> 'const char *' lvalue ParmVar 0x55888b338460 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55888b35b588 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b35b4f8 <col:40> 'int' lvalue ParmVar 0x55888b3384e0 'flags' 'int'
|       |             `-DeclRefExpr 0x55888b35b518 <col:47> 'Args::Slot *' lvalue Var 0x55888b35b3a0 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55888b35b6c8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55888b35b6b0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55888b35b690 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55888b35b660 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |       `-ImplicitCastExpr 0x55888b35b648 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55888b35b628 <col:20> 'String' lvalue Var 0x55888b35b430 'str' 'String'
|       `-CompoundStmt 0x55888b35c138 <col:61, line:736:9>
|         |-DeclStmt 0x55888b35bb80 <line:734:13, col:76>
|         | `-VarDecl 0x55888b35b718 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55888b35bb50 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55888b35bac0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55888b35bb08 <col:60> 'T' lvalue ParmVar 0x55888b338588 'variable' 'T &'
|         |     `-UnaryOperator 0x55888b35bb38 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55888b35bb28 <col:71> 'Args *' this
|         `-CallExpr 0x55888b35c108 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x55888b35bba8 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|           | `-CXXThisExpr 0x55888b35bb98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55888b35c0c8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55888b35bbd8 <col:23> 'T *' lvalue Var 0x55888b35b718 's' 'T *'
|           | `-CallExpr 0x55888b35c088 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55888b35be60 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x55888b35bf60 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x55888b35bf80 <col:86> 'String' lvalue Var 0x55888b35b430 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55888b35c030 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55888b35bfc0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|           |   | `-DeclRefExpr 0x55888b35bfa0 <col:92> 'T *' lvalue Var 0x55888b35b718 's' 'T *'
|           |   `-UnaryOperator 0x55888b35c070 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55888b35c060 <col:96> 'Args *' this
|           `-DeclRefExpr 0x55888b35c0e8 <col:103> 'Args::Slot *' lvalue Var 0x55888b35b3a0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55888b338c98 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55888b3387b8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55888b338838 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x55888b338bf8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x55888b3388f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b338978 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55888b338a18 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x55888b338ab8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x55888b3608f0 <col:88, line:745:5>
|     |-DeclStmt 0x55888b35c228 <line:741:9, col:26>
|     | `-VarDecl 0x55888b35c1c0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55888b35fd00 <line:742:9, col:55>
|     | `-VarDecl 0x55888b35c250 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55888b35fce8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55888b35fcb8 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55888b35fca0 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55888b35fc80 <col:22, col:54> 'String' (CXXTemporary 0x55888b35fc80)
|     |           `-CXXMemberCallExpr 0x55888b35fc10 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55888b35fb80 <col:22> '<bound member function type>' ->find 0x55888b354d28
|     |             | `-CXXThisExpr 0x55888b35fb70 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55888b35fc48 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55888b35fbb0 <col:27> 'const char *' lvalue ParmVar 0x55888b3388f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55888b35fc60 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55888b35fbd0 <col:36> 'int' lvalue ParmVar 0x55888b338978 'flags' 'int'
|     |             `-DeclRefExpr 0x55888b35fbf0 <col:43> 'Args::Slot *' lvalue Var 0x55888b35c1c0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55888b3600e0 <line:743:9, col:72>
|     | `-VarDecl 0x55888b35fd58 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55888b3600b0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55888b360020 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55888b360068 <col:56> 'T' lvalue ParmVar 0x55888b338a18 'variable' 'T &'
|     |     `-UnaryOperator 0x55888b360098 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55888b360088 <col:67> 'Args *' this
|     `-CallExpr 0x55888b3608c0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x55888b360108 <col:9> '<bound member function type>' ->postparse 0x55888b354f38
|       | `-CXXThisExpr 0x55888b3600f8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55888b360880 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55888b360138 <col:19> 'T *' lvalue Var 0x55888b35fd58 's' 'T *'
|       | `-ParenExpr 0x55888b360860 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x55888b360830 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55888b360818 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55888b360800 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55888b3607e0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55888b3607b0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |     |       `-ImplicitCastExpr 0x55888b360798 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55888b360158 <col:25> 'String' lvalue Var 0x55888b35c250 'str' 'String'
|       |     |-CallExpr 0x55888b360608 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55888b3603e0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x55888b3604e0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x55888b360500 <col:89> 'String' lvalue Var 0x55888b35c250 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55888b3605b0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55888b360540 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|       |     | | `-DeclRefExpr 0x55888b360520 <col:95> 'T *' lvalue Var 0x55888b35fd58 's' 'T *'
|       |     | `-UnaryOperator 0x55888b3605f0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55888b3605e0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x55888b360778 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x55888b360758 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x55888b360728 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55888b3606d8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55888b360668 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|       |         | | `-DeclRefExpr 0x55888b360648 <col:109> 'T *' lvalue Var 0x55888b35fd58 's' 'T *'
|       |         | `-DeclRefExpr 0x55888b360708 <col:113> 'const V' lvalue ParmVar 0x55888b338ab8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55888b360748 <col:120> 'bool' true
|       `-DeclRefExpr 0x55888b3608a0 <col:128> 'Args::Slot *' lvalue Var 0x55888b35c1c0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55888b3391c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x55888b338d10 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b338d88 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b339128 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55888b338e48 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b338ec8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55888b338f40 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x55888b338fe8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x55888b3614e8 <col:75, line:754:5>
|     |-DeclStmt 0x55888b360998 <line:749:9, col:26>
|     | `-VarDecl 0x55888b360930 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55888b3614b0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x55888b3614d0 <line:750:13, col:58>
|       | `-VarDecl 0x55888b3609c0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55888b360ba0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55888b360b70 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55888b360b58 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55888b360b38 <col:26, col:58> 'String' (CXXTemporary 0x55888b360b38)
|       |           `-CXXMemberCallExpr 0x55888b360ac8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55888b360a38 <col:26> '<bound member function type>' ->find 0x55888b354d28
|       |             | `-CXXThisExpr 0x55888b360a28 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55888b360b00 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b360a68 <col:31> 'const char *' lvalue ParmVar 0x55888b338e48 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55888b360b18 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b360a88 <col:40> 'int' lvalue ParmVar 0x55888b338ec8 'flags' 'int'
|       |             `-DeclRefExpr 0x55888b360aa8 <col:47> 'Args::Slot *' lvalue Var 0x55888b360930 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55888b360c58 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55888b360c40 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55888b360c20 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55888b360bf0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |       `-ImplicitCastExpr 0x55888b360bd8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55888b360bb8 <col:20> 'String' lvalue Var 0x55888b3609c0 'str' 'String'
|       `-CompoundStmt 0x55888b361490 <col:61, line:753:9>
|         |-DeclStmt 0x55888b361030 <line:751:13, col:63>
|         | `-VarDecl 0x55888b360ca8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x55888b361000 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55888b360f70 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55888b360fb8 <col:47> 'T' lvalue ParmVar 0x55888b338fe8 'variable' 'T &'
|         |     `-UnaryOperator 0x55888b360fe8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55888b360fd8 <col:58> 'Args *' this
|         `-CallExpr 0x55888b361460 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x55888b361058 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|           | `-CXXThisExpr 0x55888b361048 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55888b361420 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x55888b361088 <col:23> 'T *' lvalue Var 0x55888b360ca8 's' 'T *'
|           | `-CallExpr 0x55888b3613e0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55888b361270 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55888b3612b8 <col:56> 'P' lvalue ParmVar 0x55888b338f40 'parser' 'P'
|           |   |-DeclRefExpr 0x55888b3612d8 <col:64> 'String' lvalue Var 0x55888b3609c0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55888b361388 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55888b361318 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|           |   | `-DeclRefExpr 0x55888b3612f8 <col:70> 'T *' lvalue Var 0x55888b360ca8 's' 'T *'
|           |   `-UnaryOperator 0x55888b3613c8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55888b3613b8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x55888b361440 <col:81> 'Args::Slot *' lvalue Var 0x55888b360930 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55888b339828 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x55888b339240 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x55888b3392b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x55888b339338 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x55888b339788 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x55888b339400 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b339480 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x55888b3394f8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x55888b339598 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x55888b339638 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x55888b362278 <col:98, line:762:5>
|     |-DeclStmt 0x55888b361580 <line:758:9, col:26>
|     | `-VarDecl 0x55888b361518 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55888b3617a0 <line:759:9, col:55>
|     | `-VarDecl 0x55888b3615a8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x55888b361788 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x55888b361758 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x55888b361740 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x55888b361720 <col:22, col:54> 'String' (CXXTemporary 0x55888b361720)
|     |           `-CXXMemberCallExpr 0x55888b3616b0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x55888b361620 <col:22> '<bound member function type>' ->find 0x55888b354d28
|     |             | `-CXXThisExpr 0x55888b361610 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x55888b3616e8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55888b361650 <col:27> 'const char *' lvalue ParmVar 0x55888b339400 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x55888b361700 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x55888b361670 <col:36> 'int' lvalue ParmVar 0x55888b339480 'flags' 'int'
|     |             `-DeclRefExpr 0x55888b361690 <col:43> 'Args::Slot *' lvalue Var 0x55888b361518 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x55888b361bc0 <line:760:9, col:59>
|     | `-VarDecl 0x55888b3617f8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55888b361b90 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55888b361b00 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x55888b361b48 <col:43> 'T' lvalue ParmVar 0x55888b339598 'variable' 'T &'
|     |     `-UnaryOperator 0x55888b361b78 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55888b361b68 <col:54> 'Args *' this
|     `-CallExpr 0x55888b362248 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x55888b361be8 <col:9> '<bound member function type>' ->postparse 0x55888b354f38
|       | `-CXXThisExpr 0x55888b361bd8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x55888b362208 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x55888b361c18 <col:19> 'T *' lvalue Var 0x55888b3617f8 's' 'T *'
|       | `-ParenExpr 0x55888b3621e8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x55888b3621b8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x55888b3621a0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x55888b362188 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x55888b362168 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x55888b362138 <col:25> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |     |       `-ImplicitCastExpr 0x55888b362120 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x55888b361c38 <col:25> 'String' lvalue Var 0x55888b3615a8 'str' 'String'
|       |     |-CallExpr 0x55888b361f90 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x55888b361e20 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x55888b361e68 <col:59> 'P' lvalue ParmVar 0x55888b3394f8 'parser' 'P'
|       |     | |-DeclRefExpr 0x55888b361e88 <col:67> 'String' lvalue Var 0x55888b3615a8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x55888b361f38 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x55888b361ec8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|       |     | | `-DeclRefExpr 0x55888b361ea8 <col:73> 'T *' lvalue Var 0x55888b3617f8 's' 'T *'
|       |     | `-UnaryOperator 0x55888b361f78 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x55888b361f68 <col:77> 'Args *' this
|       |     `-ParenExpr 0x55888b362100 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x55888b3620e0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x55888b3620b0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x55888b362060 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x55888b361ff0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|       |         | | `-DeclRefExpr 0x55888b361fd0 <col:87> 'T *' lvalue Var 0x55888b3617f8 's' 'T *'
|       |         | `-DeclRefExpr 0x55888b362090 <col:91> 'const V' lvalue ParmVar 0x55888b339638 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x55888b3620d0 <col:98> 'bool' true
|       `-DeclRefExpr 0x55888b362228 <col:106> 'Args::Slot *' lvalue Var 0x55888b361518 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55888b339e98 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x55888b3398a8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b339928 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x55888b3399a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x55888b339df8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x55888b339a70 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b339af0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x55888b339b68 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x55888b339c08 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x55888b339ca8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x55888b363258 <col:60, line:773:5>
|     |-DeclStmt 0x55888b362320 <line:767:9, col:26>
|     | `-VarDecl 0x55888b3622b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55888b363220 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x55888b363240 <line:768:13, col:58>
|       | `-VarDecl 0x55888b362348 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55888b362528 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55888b3624f8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55888b3624e0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55888b3624c0 <col:26, col:58> 'String' (CXXTemporary 0x55888b3624c0)
|       |           `-CXXMemberCallExpr 0x55888b362450 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55888b3623c0 <col:26> '<bound member function type>' ->find 0x55888b354d28
|       |             | `-CXXThisExpr 0x55888b3623b0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55888b362488 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b3623f0 <col:31> 'const char *' lvalue ParmVar 0x55888b339a70 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55888b3624a0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b362410 <col:40> 'int' lvalue ParmVar 0x55888b339af0 'flags' 'int'
|       |             `-DeclRefExpr 0x55888b362430 <col:47> 'Args::Slot *' lvalue Var 0x55888b3622b8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55888b3625e0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55888b3625c8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55888b3625a8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55888b362578 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |       `-ImplicitCastExpr 0x55888b362560 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55888b362540 <col:20> 'String' lvalue Var 0x55888b362348 'str' 'String'
|       `-CompoundStmt 0x55888b3631f8 <col:61, line:772:9>
|         |-DeclStmt 0x55888b362920 <line:769:13, col:66>
|         | `-VarDecl 0x55888b362638 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x55888b3628f0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55888b362860 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55888b3628a8 <col:49> 'T1' lvalue ParmVar 0x55888b339c08 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x55888b3628d8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55888b3628c8 <col:61> 'Args *' this
|         |-DeclStmt 0x55888b362c90 <line:770:13, col:66>
|         | `-VarDecl 0x55888b3629a8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x55888b362c60 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x55888b362bd0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x55888b362c18 <col:49> 'T2' lvalue ParmVar 0x55888b339ca8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x55888b362c48 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x55888b362c38 <col:61> 'Args *' this
|         `-CallExpr 0x55888b3631c8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x55888b362cb8 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|           | `-CXXThisExpr 0x55888b362ca8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x55888b363188 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x55888b362d28 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x55888b362ce8 <col:23> 'T1 *' lvalue Var 0x55888b362638 's1' 'T1 *'
|           | | `-DeclRefExpr 0x55888b362d08 <col:29> 'T2 *' lvalue Var 0x55888b3629a8 's2' 'T2 *'
|           | `-CallExpr 0x55888b363140 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x55888b362f10 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x55888b362f58 <col:63> 'P' lvalue ParmVar 0x55888b339b68 'parser' 'P'
|           |   |-DeclRefExpr 0x55888b362f78 <col:71> 'String' lvalue Var 0x55888b362348 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x55888b363028 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55888b362fb8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|           |   | `-DeclRefExpr 0x55888b362f98 <col:77> 'T1 *' lvalue Var 0x55888b362638 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x55888b3630e8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x55888b363078 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|           |   | `-DeclRefExpr 0x55888b363058 <col:82> 'T2 *' lvalue Var 0x55888b3629a8 's2' 'T2 *'
|           |   `-UnaryOperator 0x55888b363128 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x55888b363118 <col:87> 'Args *' this
|           `-DeclRefExpr 0x55888b3631a8 <col:94> 'Args::Slot *' lvalue Var 0x55888b3622b8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55888b33a288 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x55888b339f18 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b33a1e8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55888b339fd0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b33a050 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x55888b33a0c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x55888b363770 <col:67, line:780:5>
|     |-DeclStmt 0x55888b3632f0 <line:777:9, col:26>
|     | `-VarDecl 0x55888b363288 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x55888b363738 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x55888b363758 <line:778:13, col:58>
|       | `-VarDecl 0x55888b363318 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x55888b3634f8 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x55888b3634c8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x55888b3634b0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x55888b363490 <col:26, col:58> 'String' (CXXTemporary 0x55888b363490)
|       |           `-CXXMemberCallExpr 0x55888b363420 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x55888b363390 <col:26> '<bound member function type>' ->find 0x55888b354d28
|       |             | `-CXXThisExpr 0x55888b363380 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x55888b363458 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b3633c0 <col:31> 'const char *' lvalue ParmVar 0x55888b339fd0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x55888b363470 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x55888b3633e0 <col:40> 'int' lvalue ParmVar 0x55888b33a050 'flags' 'int'
|       |             `-DeclRefExpr 0x55888b363400 <col:47> 'Args::Slot *' lvalue Var 0x55888b363288 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x55888b3635b0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x55888b363598 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x55888b363578 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x55888b363548 <col:20> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|       |       `-ImplicitCastExpr 0x55888b363530 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x55888b363510 <col:20> 'String' lvalue Var 0x55888b363318 'str' 'String'
|       `-CallExpr 0x55888b363708 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x55888b3635d8 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|         | `-CXXThisExpr 0x55888b3635c8 <col:13> 'Args *' implicit this
|         |-CallExpr 0x55888b3636b8 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x55888b363628 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x55888b363608 <col:23> 'P' lvalue ParmVar 0x55888b33a0c8 'parser' 'P'
|         | |-DeclRefExpr 0x55888b363670 <col:36> 'String' lvalue Var 0x55888b363318 'str' 'String'
|         | `-UnaryOperator 0x55888b3636a0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x55888b363690 <col:42> 'Args *' this
|         `-DeclRefExpr 0x55888b3636e8 <col:49> 'Args::Slot *' lvalue Var 0x55888b363288 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x55888b33a628 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55888b33a2f8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x55888b33a588 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x55888b33a3b0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b33a430 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55888b33a4a8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x55888b3640e0 <col:71, line:792:5>
|     |-DeclStmt 0x55888b363808 <line:784:9, col:26>
|     | `-VarDecl 0x55888b3637a0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55888b3638d8 <line:785:9, col:29>
|     | `-VarDecl 0x55888b363838 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55888b3638c0 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55888b3638a0 <col:28> 'int' 1
|     |-WhileStmt 0x55888b363f90 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x55888b363fb0 <line:786:16, col:61>
|     | | `-VarDecl 0x55888b363900 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55888b363ae0 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55888b363ab0 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55888b363a98 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55888b363a78 <col:29, col:61> 'String' (CXXTemporary 0x55888b363a78)
|     | |           `-CXXMemberCallExpr 0x55888b363a08 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55888b363978 <col:29> '<bound member function type>' ->find 0x55888b354d28
|     | |             | `-CXXThisExpr 0x55888b363968 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55888b363a40 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55888b3639a8 <col:34> 'const char *' lvalue ParmVar 0x55888b33a3b0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55888b363a58 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55888b3639c8 <col:43> 'int' lvalue ParmVar 0x55888b33a430 'flags' 'int'
|     | |             `-DeclRefExpr 0x55888b3639e8 <col:50> 'Args::Slot *' lvalue Var 0x55888b3637a0 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55888b363b98 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55888b363b80 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55888b363b60 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55888b363b30 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|     | |       `-ImplicitCastExpr 0x55888b363b18 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55888b363af8 <col:23> 'String' lvalue Var 0x55888b363900 'str' 'String'
|     | `-CompoundStmt 0x55888b363f68 <col:64, line:790:9>
|     |   |-CallExpr 0x55888b363cf0 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x55888b363bc0 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|     |   | | `-CXXThisExpr 0x55888b363bb0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55888b363ca0 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55888b363c10 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55888b363bf0 <col:23> 'P' lvalue ParmVar 0x55888b33a4a8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55888b363c58 <col:36> 'String' lvalue Var 0x55888b363900 'str' 'String'
|     |   | | `-UnaryOperator 0x55888b363c88 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55888b363c78 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x55888b363cd0 <col:49> 'Args::Slot *' lvalue Var 0x55888b3637a0 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55888b363e88 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55888b363d20 <col:13> 'int' lvalue Var 0x55888b363838 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55888b363e70 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55888b363e50 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55888b363db8 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55888b363d98 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55888b363d80 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55888b363d40 <col:28> 'int' lvalue Var 0x55888b363838 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55888b363d60 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55888b363e38 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55888b363e08 <col:49> 'bool' lvalue ->_read_status 0x55888b31c710
|     |   |         `-ImplicitCastExpr 0x55888b363de8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55888b363dd8 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55888b363f38 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55888b363ea8 <col:13> 'int' lvalue ParmVar 0x55888b33a430 'flags' 'int'
|     |     `-UnaryOperator 0x55888b363f20 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55888b363f08 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55888b363ee8 <col:23> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55888b3640c0 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55888b363ff8 <col:9> 'bool' lvalue ->_read_status 0x55888b31c710
|       | `-ImplicitCastExpr 0x55888b363fd8 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55888b363fc8 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55888b3640a0 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55888b364080 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55888b364068 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55888b364028 <col:25> 'int' lvalue Var 0x55888b363838 'read_status' 'int'
|           `-IntegerLiteral 0x55888b364048 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55888b33ab08 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x55888b33a698 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b33a718 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b33aa68 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x55888b33a7d8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b33a858 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x55888b33a8d0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x55888b33a978 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x55888b365070 <col:84, line:805:5>
|     |-DeclStmt 0x55888b364188 <line:796:9, col:26>
|     | `-VarDecl 0x55888b364120 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55888b364258 <line:797:9, col:29>
|     | `-VarDecl 0x55888b3641b8 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55888b364240 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55888b364220 <col:28> 'int' 1
|     |-DeclStmt 0x55888b364590 <line:798:9, col:71>
|     | `-VarDecl 0x55888b3642a8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x55888b364560 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x55888b3644d0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x55888b364518 <col:55> 'T' lvalue ParmVar 0x55888b33a978 'variable' 'T &'
|     |     `-UnaryOperator 0x55888b364548 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x55888b364538 <col:66> 'Args *' this
|     |-WhileStmt 0x55888b364f20 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x55888b364f40 <line:799:16, col:61>
|     | | `-VarDecl 0x55888b3645b8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55888b364798 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55888b364768 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55888b364750 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55888b364730 <col:29, col:61> 'String' (CXXTemporary 0x55888b364730)
|     | |           `-CXXMemberCallExpr 0x55888b3646c0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55888b364630 <col:29> '<bound member function type>' ->find 0x55888b354d28
|     | |             | `-CXXThisExpr 0x55888b364620 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55888b3646f8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55888b364660 <col:34> 'const char *' lvalue ParmVar 0x55888b33a7d8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55888b364710 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55888b364680 <col:43> 'int' lvalue ParmVar 0x55888b33a858 'flags' 'int'
|     | |             `-DeclRefExpr 0x55888b3646a0 <col:50> 'Args::Slot *' lvalue Var 0x55888b364120 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55888b364850 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55888b364838 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55888b364818 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55888b3647e8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|     | |       `-ImplicitCastExpr 0x55888b3647d0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55888b3647b0 <col:23> 'String' lvalue Var 0x55888b3645b8 'str' 'String'
|     | `-CompoundStmt 0x55888b364ef8 <col:64, line:803:9>
|     |   |-CallExpr 0x55888b364c80 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x55888b364878 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|     |   | | `-CXXThisExpr 0x55888b364868 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x55888b364c40 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x55888b3648a8 <col:23> 'T *' lvalue Var 0x55888b3642a8 's' 'T *'
|     |   | | `-CallExpr 0x55888b364c00 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x55888b364a90 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x55888b364ad8 <col:56> 'P' lvalue ParmVar 0x55888b33a8d0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x55888b364af8 <col:64> 'String' lvalue Var 0x55888b3645b8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x55888b364ba8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x55888b364b38 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|     |   | |   | `-DeclRefExpr 0x55888b364b18 <col:70> 'T *' lvalue Var 0x55888b3642a8 's' 'T *'
|     |   | |   `-UnaryOperator 0x55888b364be8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x55888b364bd8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x55888b364c60 <col:81> 'Args::Slot *' lvalue Var 0x55888b364120 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x55888b364e18 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55888b364cb0 <col:13> 'int' lvalue Var 0x55888b3641b8 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55888b364e00 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55888b364de0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55888b364d48 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55888b364d28 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55888b364d10 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55888b364cd0 <col:28> 'int' lvalue Var 0x55888b3641b8 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55888b364cf0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55888b364dc8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55888b364d98 <col:49> 'bool' lvalue ->_read_status 0x55888b31c710
|     |   |         `-ImplicitCastExpr 0x55888b364d78 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55888b364d68 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55888b364ec8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55888b364e38 <col:13> 'int' lvalue ParmVar 0x55888b33a858 'flags' 'int'
|     |     `-UnaryOperator 0x55888b364eb0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55888b364e98 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55888b364e78 <col:23> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55888b365050 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55888b364f88 <col:9> 'bool' lvalue ->_read_status 0x55888b31c710
|       | `-ImplicitCastExpr 0x55888b364f68 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55888b364f58 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55888b365030 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55888b365010 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55888b364ff8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55888b364fb8 <col:25> 'int' lvalue Var 0x55888b3641b8 'read_status' 'int'
|           `-IntegerLiteral 0x55888b364fd8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x55888b33b0e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x55888b33ab80 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x55888b33abf8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x55888b33b048 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x55888b33acb8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x55888b33ad38 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x55888b33adb0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x55888b33af00 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x55888b365e78 <col:87, line:821:5>
|     |-DeclStmt 0x55888b365120 <line:809:9, col:26>
|     | `-VarDecl 0x55888b3650b8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x55888b3651f0 <line:810:9, col:29>
|     | `-VarDecl 0x55888b365150 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x55888b3651d8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x55888b3651b8 <col:28> 'int' 1
|     |-DeclStmt 0x55888b365438 <line:811:9, col:38>
|     | `-VarDecl 0x55888b365320 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x55888b365410 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x55888b365398 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x55888b3653f0 <col:29> 'Vector<T>' lvalue ParmVar 0x55888b33af00 'variable' 'Vector<T> &'
|     |-WhileStmt 0x55888b365d28 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x55888b365d48 <line:812:16, col:61>
|     | | `-VarDecl 0x55888b365460 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x55888b365640 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x55888b365610 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x55888b3655f8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x55888b3655d8 <col:29, col:61> 'String' (CXXTemporary 0x55888b3655d8)
|     | |           `-CXXMemberCallExpr 0x55888b365568 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x55888b3654d8 <col:29> '<bound member function type>' ->find 0x55888b354d28
|     | |             | `-CXXThisExpr 0x55888b3654c8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x55888b3655a0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55888b365508 <col:34> 'const char *' lvalue ParmVar 0x55888b33acb8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x55888b3655b8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x55888b365528 <col:43> 'int' lvalue ParmVar 0x55888b33ad38 'flags' 'int'
|     | |             `-DeclRefExpr 0x55888b365548 <col:50> 'Args::Slot *' lvalue Var 0x55888b3650b8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x55888b3656f8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x55888b3656e0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x55888b3656c0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x55888b365690 <col:23> '<bound member function type>' .operator int (String::*)() const 0x55888b06a7a8
|     | |       `-ImplicitCastExpr 0x55888b365678 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x55888b365658 <col:23> 'String' lvalue Var 0x55888b365460 'str' 'String'
|     | `-CompoundStmt 0x55888b365cf0 <col:64, line:819:9>
|     |   |-DeclStmt 0x55888b3657b8 <line:813:13, col:23>
|     |   | `-VarDecl 0x55888b365720 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x55888b365798 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x55888b365938 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x55888b3657e0 <col:13> '<bound member function type>' ->postparse 0x55888b354f38
|     |   | | `-CXXThisExpr 0x55888b3657d0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x55888b3658e0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x55888b365830 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x55888b365810 <col:23> 'P' lvalue ParmVar 0x55888b33adb0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x55888b365878 <col:36> 'String' lvalue Var 0x55888b365460 'str' 'String'
|     |   | | |-DeclRefExpr 0x55888b365898 <col:41> 'T' lvalue Var 0x55888b365720 'sx' 'T'
|     |   | | `-UnaryOperator 0x55888b3658c8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x55888b3658b8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x55888b365918 <col:53> 'Args::Slot *' lvalue Var 0x55888b3650b8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x55888b365a90 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x55888b3659c8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x55888b365998 <col:17> 'bool' lvalue ->_read_status 0x55888b31c710
|     |   | |   `-ImplicitCastExpr 0x55888b365978 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x55888b365968 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x55888b365a68 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x55888b365a00 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x55888b3659e0 <col:17> 'Vector<T> *' lvalue Var 0x55888b365320 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x55888b365a48 <col:30> 'T' lvalue Var 0x55888b365720 'sx' 'T'
|     |   |-BinaryOperator 0x55888b365c10 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x55888b365aa8 <col:13> 'int' lvalue Var 0x55888b365150 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x55888b365bf8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x55888b365bd8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x55888b365b40 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x55888b365b20 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x55888b365b08 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x55888b365ac8 <col:28> 'int' lvalue Var 0x55888b365150 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x55888b365ae8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x55888b365bc0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x55888b365b90 <col:49> 'bool' lvalue ->_read_status 0x55888b31c710
|     |   |         `-ImplicitCastExpr 0x55888b365b70 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x55888b365b60 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x55888b365cc0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x55888b365c30 <col:13> 'int' lvalue ParmVar 0x55888b33ad38 'flags' 'int'
|     |     `-UnaryOperator 0x55888b365ca8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x55888b365c90 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x55888b365c70 <col:23> 'const int' lvalue Var 0x55888b323c68 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x55888b365e58 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x55888b365d90 <col:9> 'bool' lvalue ->_read_status 0x55888b31c710
|       | `-ImplicitCastExpr 0x55888b365d70 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x55888b365d60 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x55888b365e38 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x55888b365e18 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x55888b365e00 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x55888b365dc0 <col:25> 'int' lvalue Var 0x55888b365150 'read_status' 'int'
|           `-IntegerLiteral 0x55888b365de0 <col:40> 'int' 1
|-AccessSpecDecl 0x55888b33b160 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x55888b33b188 prev 0x55888b321f68 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x55888b33b280 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x55888b33b370 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x55888b365eb0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x55888b33b460 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x55888b365ec0 <col:25, line:830:9>
| |-CXXMethodDecl 0x55888b33b560 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x55888b33b610 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x55888b33b6b8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x55888b33b6b8
| | `-ParmVarDecl 0x55888b33b7c8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x55888b33bf88 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x55888b33bf88
|   `-ParmVarDecl 0x55888b33c098 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x55888b33b838 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x55888b33b998 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x55888b33bb90 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x55888b33ba40 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x55888b33bab8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x55888b3660a0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x55888b33be48 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x55888b365f10 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x55888b365ed0 <col:20> 'void *' lvalue ParmVar 0x55888b33ba40 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x55888b33beb0 '_slot' 'char *'
| | | `-CXXNewExpr 0x55888b365f98 <col:32, col:45> 'char *' array Function 0x55888ae8d418 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x55888b365f80 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x55888b365f50 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x55888b33bab8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x55888b33bf10 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x55888b366060 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x55888b366020 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x55888b33bab8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x55888b366120 <col:61, line:838:9>
| |-CXXDestructorDecl 0x55888b33bc90 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x55888b33b460 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x55888b3661a8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x55888b366188 <line:840:13, col:22> 'void' array Function 0x55888ae8d778 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x55888b366170 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x55888b366140 <col:22> 'char *' lvalue ->_slot 0x55888b33beb0
| |         `-CXXThisExpr 0x55888b366130 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x55888b33bd90 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x55888b33b560 Slot::store 'void ()' ]
| | `-CompoundStmt 0x55888b366398 <col:22, line:844:9>
| |   `-CallExpr 0x55888b366300 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x55888b3662e8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x55888b3662c8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x55888af991f8 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x55888b366338 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x55888b366218 <col:20> 'void *' lvalue ->_ptr 0x55888b33be48
| |     |   `-CXXThisExpr 0x55888b366208 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x55888b366368 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x55888b366350 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x55888b366258 <col:26> 'char *' lvalue ->_slot 0x55888b33beb0
| |     |     `-CXXThisExpr 0x55888b366248 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x55888b366380 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x55888b366298 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x55888b33bf10
| |         `-CXXThisExpr 0x55888b366288 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x55888b33be48 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x55888b33beb0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x55888b33bf10 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x55888b33c108 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55888b33c108
| | `-ParmVarDecl 0x55888b33c218 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x55888b33c2b8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x55888b33c2b8
|   `-ParmVarDecl 0x55888b33c3c8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x55888b33c568 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x55888b33c438 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x55888b33c4d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x55888b33c800 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x55888b33c9f8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x55888b33c8c8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x55888b33cb78 '_ptr' 'T *'
|   | | `-ParenListExpr 0x55888b3663d0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x55888b3663b0 <col:20> 'T *' lvalue ParmVar 0x55888b33c8c8 'ptr' 'T *'
|   | `-CompoundStmt 0x55888b366420 <col:25, line:854:9>
|   |-CXXMethodDecl 0x55888b33cac8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x55888b33b560 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x55888b3665d0 <col:22, line:857:9>
|   |   `-CallExpr 0x55888b3665a0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x55888b366430 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x55888b051928 0x55888affbc58
|   |     |-CXXOperatorCallExpr 0x55888b366530 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x55888b3664c0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x55888b25e8d8 0x55888b25e4f8 0x55888b25e128 0x55888b25dd48 0x55888b25d968 0x55888b25d598
|   |     | `-MemberExpr 0x55888b366490 <col:29> 'T *' lvalue ->_ptr 0x55888b33cb78
|   |     |   `-CXXThisExpr 0x55888b366480 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x55888b366570 <col:35> 'T' lvalue ->_slot 0x55888b33cbd8
|   |       `-CXXThisExpr 0x55888b366560 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x55888b33cb78 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x55888b33cbd8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x55888b33cc40 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x55888b33cd40 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x55888b33cd90 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x55888b33cd20 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x55888b33cd00 <col:31> 'int' 48
|-FieldDecl 0x55888b33cdb8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x55888b33ce18 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x55888b33ce78 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x55888b33cfb0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x55888b3545d0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x55888b354630 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x55888b3546e0 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x55888b354908 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x55888b354810 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x55888b354a58 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x55888b3549c8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x55888b354d28 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x55888b354b18 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x55888b354b98 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x55888b354c40 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x55888b354f38 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x55888b354df0 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x55888b354e68 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x55888b355008 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x55888b355158 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x55888b3550c0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x55888b3554e8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x55888b355218 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x55888b355298 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x55888b355340 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x55888b3553f8 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x55888b355710 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x55888b3555c0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x55888b355638 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x55888b355a28 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x55888b3557c0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x55888b355988 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x55888b355898 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector*, %class.Vector.0, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class IntArg
         0 |   class NumArg (base) (empty)
         0 |   int base
         4 |   int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct DefaultArg<unsigned int>
         0 |   class IntArg (base)
         0 |     class NumArg (base) (empty)
         0 |     int base
         4 |     int status
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b370c10 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x55888b370d28 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x55888b370db8 <col:16, col:22> col:16 public
|-EnumDecl 0x55888b370de0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x55888b370ee0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55888b371130 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b370ec0 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x55888b370ea0 <col:21> 'int' 0
| |-EnumConstantDecl 0x55888b370f70 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55888b371148 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b370f50 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x55888b370f30 <col:24> 'int' 22
| |-EnumConstantDecl 0x55888b371000 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55888b371160 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b370fe0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x55888b370fc0 <col:24> 'int' 34
| |-EnumConstantDecl 0x55888b371090 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x55888b371178 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x55888b371070 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x55888b371050 <col:25> 'int' 95
| `-EnumConstantDecl 0x55888b3710e0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x55888b372b50 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x55888b372f88 <col:7>
|-CXXConstructorDecl 0x55888b372c58 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x55888b372c58
| `-ParmVarDecl 0x55888b372d68 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x55888b372e08 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55888b372f18 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x55888b3d1d20 <col:7>
`-CXXDestructorDecl 0x55888b375088 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x55888b3711a8 <../dummy_inc/click/args.hh:1040:1, line:1095:1> line:1040:7 referenced class IntArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x55888b371308 <col:1, col:7> col:7 implicit referenced class IntArg
|-AccessSpecDecl 0x55888b371398 <col:32, col:38> col:32 public
|-TypedefDecl 0x55888b3713d0 <line:1042:5, col:22> col:22 referenced limb_type 'uint32_t':'unsigned int'
| `-TypedefType 0x55888ae8f770 'uint32_t' sugar
|   |-Typedef 0x55888ada34c8 'uint32_t'
|   `-TypedefType 0x55888ad7c5a0 '__uint32_t' sugar
|     |-Typedef 0x55888ad7c198 '__uint32_t'
|     `-BuiltinType 0x55888ad3a620 'unsigned int'
|-CXXConstructorDecl 0x55888b371518 <line:1044:5, line:1046:5> line:1044:5 used IntArg 'void (int)'
| |-ParmVarDecl 0x55888b371440 <col:12, col:20> col:16 used b 'int' cinit
| | `-IntegerLiteral 0x55888b372a58 <col:20> 'int' 0
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55888b372f98 <col:5> 'NumArg' 'void () noexcept'
| |-CXXCtorInitializer Field 0x55888b372310 'base' 'int'
| | `-ImplicitCastExpr 0x55888b372af8 <line:1045:16> 'int' <LValueToRValue>
| |   `-DeclRefExpr 0x55888b372ab8 <col:16> 'int' lvalue ParmVar 0x55888b371440 'b' 'int'
| `-CompoundStmt 0x55888b373008 <col:19, line:1046:5>
|-CXXMethodDecl 0x55888b371a70 <line:1048:5, line:1050:50> line:1048:17 used parse 'const char *(const char *, const char *, bool, int, IntArg::limb_type *, int)'
| |-ParmVarDecl 0x55888b3715e0 <col:23, col:35> col:35 begin 'const char *'
| |-ParmVarDecl 0x55888b371660 <col:42, col:54> col:54 end 'const char *'
| |-ParmVarDecl 0x55888b3716d8 <line:1049:23, col:28> col:28 is_signed 'bool'
| |-ParmVarDecl 0x55888b371758 <col:39, col:43> col:43 size 'int'
| |-ParmVarDecl 0x55888b371818 <line:1050:23, col:34> col:34 value 'IntArg::limb_type *'
| `-ParmVarDecl 0x55888b371898 <col:41, col:45> col:45 nlimb 'int'
|-FunctionTemplateDecl 0x55888b371ec8 <line:1052:5, line:1067:5> line:1053:10 parse_saturating
| |-TemplateTypeParmDecl 0x55888b371b40 <line:1052:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55888b371e28 <line:1053:5, line:1067:5> line:1053:10 parse_saturating 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55888b371be8 <col:27, col:41> col:41 referenced str 'const String &'
| | |-ParmVarDecl 0x55888b371c88 <col:46, col:49> col:49 referenced result 'V &'
| | |-ParmVarDecl 0x55888b371d00 <col:57, col:82> col:75 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55888b372a78 <col:82> 'const ArgContext' lvalue Var 0x55888b3665f8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55888b373f38 <col:94, line:1067:5>
| |   |-DeclStmt 0x55888b373198 <line:1054:9, col:64>
| |   | `-VarDecl 0x55888b373028 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
| |   |   `-CXXDependentScopeMemberExpr 0x55888b373150 <col:36, col:55> '<dependent type>' lvalue ->is_signed
| |   |-DeclStmt 0x55888b3733b8 <line:1055:9, col:91>
| |   | `-VarDecl 0x55888b3731c8 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
| |   |   `-CXXFunctionalCastExpr 0x55888b373390 <col:31, col:90> 'int' functional cast to int <Dependent>
| |   |     `-BinaryOperator 0x55888b373370 <col:35, col:89> 'unsigned long' '/'
| |   |       |-ParenExpr 0x55888b373320 <col:35, col:69> 'unsigned long'
| |   |       | `-BinaryOperator 0x55888b373300 <col:36, col:68> 'unsigned long' '-'
| |   |       |   |-BinaryOperator 0x55888b3732a8 <col:36, col:64> 'unsigned long' '+'
| |   |       |   | |-UnaryExprOrTypeTraitExpr 0x55888b373258 <col:36, col:44> 'unsigned long' sizeof 'V'
| |   |       |   | `-UnaryExprOrTypeTraitExpr 0x55888b373288 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |       |   `-ImplicitCastExpr 0x55888b3732e8 <col:68> 'unsigned long' <IntegralCast>
| |   |       |     `-IntegerLiteral 0x55888b3732c8 <col:68> 'int' 1
| |   |       `-UnaryExprOrTypeTraitExpr 0x55888b373350 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
| |   |-DeclStmt 0x55888b373518 <line:1056:9, col:27>
| |   | `-VarDecl 0x55888b3734b0 <col:9, col:26> col:19 referenced x 'IntArg::limb_type [nlimb]'
| |   |-IfStmt 0x55888b373960 <line:1057:9, line:1059:22>
| |   | |-CXXOperatorCallExpr 0x55888b373890 <line:1057:13, line:1058:24> '<dependent type>'
| |   | | |-UnresolvedLookupExpr 0x55888b373810 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x55888b259758 0x55888b0a2d38 0x55888b0a2a10 0x55888b0941f0 0x55888b093ea0 0x55888b093790 0x55888b066100 0x55888aff25c0
| |   | | |-CallExpr 0x55888b373750 <line:1057:13, col:78> '<dependent type>'
| |   | | | |-UnresolvedMemberExpr 0x55888b373540 <col:13> '<bound member function type>' lvalue
| |   | | | |-CXXMemberCallExpr 0x55888b3735f0 <col:19, col:29> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55888b3735c0 <col:19, col:23> '<bound member function type>' .begin 0x55888b0833f8
| |   | | | |   `-DeclRefExpr 0x55888b3735a0 <col:19> 'const String' lvalue ParmVar 0x55888b371be8 'str' 'const String &'
| |   | | | |-CXXMemberCallExpr 0x55888b373660 <col:32, col:40> 'String::const_iterator':'const char *'
| |   | | | | `-MemberExpr 0x55888b373630 <col:32, col:36> '<bound member function type>' .end 0x55888b083610
| |   | | | |   `-DeclRefExpr 0x55888b373610 <col:32> 'const String' lvalue ParmVar 0x55888b371be8 'str' 'const String &'
| |   | | | |-DeclRefExpr 0x55888b373680 <col:43> 'const bool' lvalue Var 0x55888b373028 'is_signed' 'const bool'
| |   | | | |-CXXFunctionalCastExpr 0x55888b3736e8 <col:54, col:67> 'int' functional cast to int <Dependent>
| |   | | | | `-UnaryExprOrTypeTraitExpr 0x55888b3736c8 <col:58, col:66> 'unsigned long' sizeof 'V'
| |   | | | |-DeclRefExpr 0x55888b373710 <col:70> 'IntArg::limb_type [nlimb]' lvalue Var 0x55888b3734b0 'x' 'IntArg::limb_type [nlimb]'
| |   | | | `-DeclRefExpr 0x55888b373730 <col:73> 'const int' lvalue Var 0x55888b3731c8 'nlimb' 'const int'
| |   | | `-CXXMemberCallExpr 0x55888b3737f0 <line:1058:16, col:24> 'String::const_iterator':'const char *'
| |   | |   `-MemberExpr 0x55888b3737c0 <col:16, col:20> '<bound member function type>' .end 0x55888b083610
| |   | |     `-DeclRefExpr 0x55888b3737a0 <col:16> 'const String' lvalue ParmVar 0x55888b371be8 'str' 'const String &'
| |   | `-BinaryOperator 0x55888b373940 <line:1059:13, col:22> 'int' lvalue '='
| |   |   |-MemberExpr 0x55888b3738d8 <col:13> 'int' lvalue ->status 0x55888b372378
| |   |   | `-CXXThisExpr 0x55888b3738c8 <col:13> 'IntArg *' implicit this
| |   |   `-ImplicitCastExpr 0x55888b373928 <col:22> 'int' <IntegralCast>
| |   |     `-DeclRefExpr 0x55888b373908 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b370f70 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   |-IfStmt 0x55888b373bb0 <line:1060:9, line:1063:9>
| |   | |-BinaryOperator 0x55888b373a98 <line:1060:13, col:33> 'bool' '&&'
| |   | | |-ImplicitCastExpr 0x55888b373a80 <col:13> 'bool' <IntegralToBoolean>
| |   | | | `-ImplicitCastExpr 0x55888b373a68 <col:13> 'int' <LValueToRValue>
| |   | | |   `-MemberExpr 0x55888b373988 <col:13> 'int' lvalue ->status 0x55888b372378
| |   | | |     `-CXXThisExpr 0x55888b373978 <col:13> 'IntArg *' implicit this
| |   | | `-BinaryOperator 0x55888b373a48 <col:23, col:33> 'bool' '!='
| |   | |   |-ImplicitCastExpr 0x55888b373a18 <col:23> 'int' <LValueToRValue>
| |   | |   | `-MemberExpr 0x55888b3739c8 <col:23> 'int' lvalue ->status 0x55888b372378
| |   | |   |   `-CXXThisExpr 0x55888b3739b8 <col:23> 'IntArg *' implicit this
| |   | |   `-ImplicitCastExpr 0x55888b373a30 <col:33> 'int' <IntegralCast>
| |   | |     `-DeclRefExpr 0x55888b3739f8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b371000 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |   | `-CompoundStmt 0x55888b373b90 <col:47, line:1063:9>
| |   |   |-CXXMemberCallExpr 0x55888b373b30 <line:1061:13, col:40> 'void'
| |   |   | |-MemberExpr 0x55888b373ad8 <col:13, col:18> '<bound member function type>' .error 0x55888b31bd70
| |   |   | | `-DeclRefExpr 0x55888b373ab8 <col:13> 'const ArgContext' lvalue ParmVar 0x55888b371d00 'args' 'const ArgContext &'
| |   |   | `-ImplicitCastExpr 0x55888b373b58 <col:24> 'const char *' <ArrayToPointerDecay>
| |   |   |   `-StringLiteral 0x55888b373b08 <col:24> 'const char [15]' lvalue "invalid number"
| |   |   `-ReturnStmt 0x55888b373b80 <line:1062:13, col:20>
| |   |     `-CXXBoolLiteralExpr 0x55888b373b70 <col:20> 'bool' false
| |   |-DeclStmt 0x55888b373d88 <line:1064:9, col:64>
| |   | `-TypedefDecl 0x55888b373d30 <col:9, col:49> col:49 referenced unsigned_v_type 'typename make_unsigned<V>::type'
| |   |   `-DependentNameType 0x55888b373cc0 'typename make_unsigned<V>::type' dependent
| |   |-CallExpr 0x55888b373ee8 <line:1065:9, col:71> '<dependent type>'
| |   | |-UnresolvedLookupExpr 0x55888b373da0 <col:9> '<overloaded function type>' lvalue (ADL) = 'extract_integer' 0x55888b026588
| |   | |-DeclRefExpr 0x55888b373de8 <col:25> 'IntArg::limb_type [nlimb]' lvalue Var 0x55888b3734b0 'x' 'IntArg::limb_type [nlimb]'
| |   | `-CXXReinterpretCastExpr 0x55888b373eb8 <col:28, col:70> 'unsigned_v_type':'typename make_unsigned<V>::type' lvalue reinterpret_cast<unsigned_v_type &> <Dependent>
| |   |   `-DeclRefExpr 0x55888b373e30 <col:64> 'V' lvalue ParmVar 0x55888b371c88 'result' 'V &'
| |   `-ReturnStmt 0x55888b373f28 <line:1066:9, col:16>
| |     `-CXXBoolLiteralExpr 0x55888b373f18 <col:16> 'bool' true
| `-CXXMethodDecl 0x55888b3d5888 <line:1053:5, line:1067:5> line:1053:10 used parse_saturating 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55888b3d5660 <col:27, col:41> col:41 used str 'const String &'
|   |-ParmVarDecl 0x55888b3d5738 <col:46, col:49> col:49 used result 'unsigned int &'
|   |-ParmVarDecl 0x55888b3d57a0 <col:57, col:82> col:75 used args 'const ArgContext &'
|   `-CompoundStmt 0x55888b3d7620 <col:94, line:1067:5>
|     |-DeclStmt 0x55888b3d6098 <line:1054:9, col:64>
|     | `-VarDecl 0x55888b3d5eb8 <col:9, col:55> col:24 referenced is_signed 'const bool' constexpr cinit
|     |   `-ImplicitCastExpr 0x55888b3d6028 <col:36, col:55> 'bool' <LValueToRValue>
|     |     `-DeclRefExpr 0x55888b3d5ff8 <col:36, col:55> 'const bool' lvalue Var 0x55888b0157a0 'is_signed' 'const bool' non_odr_use_constant
|     |-DeclStmt 0x55888b3d6278 <line:1055:9, col:91>
|     | `-VarDecl 0x55888b3d60b0 <col:9, col:90> col:23 referenced nlimb 'const int' constexpr cinit
|     |   `-CXXFunctionalCastExpr 0x55888b3d61f8 <col:31, col:90> 'int' functional cast to int <NoOp>
|     |     `-ImplicitCastExpr 0x55888b3d61e0 <col:35, col:89> 'int' <IntegralCast> part_of_explicit_cast
|     |       `-BinaryOperator 0x55888b3d61c0 <col:35, col:89> 'unsigned long' '/'
|     |         |-ParenExpr 0x55888b3d61a0 <col:35, col:69> 'unsigned long'
|     |         | `-BinaryOperator 0x55888b3d6180 <col:36, col:68> 'unsigned long' '-'
|     |         |   |-BinaryOperator 0x55888b3d6148 <col:36, col:64> 'unsigned long' '+'
|     |         |   | |-UnaryExprOrTypeTraitExpr 0x55888b3d6128 <col:36, col:44> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     |         |   | `-UnaryExprOrTypeTraitExpr 0x55888b373288 <col:48, col:64> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |         |   `-ImplicitCastExpr 0x55888b3d6168 <col:68> 'unsigned long' <IntegralCast>
|     |         |     `-IntegerLiteral 0x55888b3732c8 <col:68> 'int' 1
|     |         `-UnaryExprOrTypeTraitExpr 0x55888b373350 <col:73, col:89> 'unsigned long' sizeof 'IntArg::limb_type':'unsigned int'
|     |-DeclStmt 0x55888b3d6410 <line:1056:9, col:27>
|     | `-VarDecl 0x55888b3d63a8 <col:9, col:26> col:19 used x 'IntArg::limb_type [1]'
|     |-IfStmt 0x55888b3d6898 <line:1057:9, line:1059:22>
|     | |-BinaryOperator 0x55888b3d6840 <line:1057:13, line:1058:24> 'bool' '!='
|     | | |-CXXMemberCallExpr 0x55888b3d66f8 <line:1057:13, col:78> 'const char *'
|     | | | |-MemberExpr 0x55888b3d66c8 <col:13> '<bound member function type>' ->parse 0x55888b371a70
|     | | | | `-CXXThisExpr 0x55888b3d66b8 <col:13> 'IntArg *' implicit this
|     | | | |-CXXMemberCallExpr 0x55888b3d6558 <col:19, col:29> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55888b3d6528 <col:19, col:23> '<bound member function type>' .begin 0x55888b0833f8
|     | | | |   `-DeclRefExpr 0x55888b3d6508 <col:19> 'const String' lvalue ParmVar 0x55888b3d5660 'str' 'const String &'
|     | | | |-CXXMemberCallExpr 0x55888b3d65c8 <col:32, col:40> 'String::const_iterator':'const char *'
|     | | | | `-MemberExpr 0x55888b3d6598 <col:32, col:36> '<bound member function type>' .end 0x55888b083610
|     | | | |   `-DeclRefExpr 0x55888b3d6578 <col:32> 'const String' lvalue ParmVar 0x55888b3d5660 'str' 'const String &'
|     | | | |-ImplicitCastExpr 0x55888b3d6768 <col:43> 'bool' <LValueToRValue>
|     | | | | `-DeclRefExpr 0x55888b3d6748 <col:43> 'const bool' lvalue Var 0x55888b3d5eb8 'is_signed' 'const bool' non_odr_use_constant
|     | | | |-CXXFunctionalCastExpr 0x55888b3d6650 <col:54, col:67> 'int' functional cast to int <NoOp>
|     | | | | `-ImplicitCastExpr 0x55888b3d6638 <col:58, col:66> 'int' <IntegralCast> part_of_explicit_cast
|     | | | |   `-UnaryExprOrTypeTraitExpr 0x55888b3d6618 <col:58, col:66> 'unsigned long' sizeof 'unsigned int':'unsigned int'
|     | | | |-ImplicitCastExpr 0x55888b3d6780 <col:70> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | | | | `-DeclRefExpr 0x55888b3d6678 <col:70> 'IntArg::limb_type [1]' lvalue Var 0x55888b3d63a8 'x' 'IntArg::limb_type [1]'
|     | | | `-ImplicitCastExpr 0x55888b3d67b8 <col:73> 'int' <LValueToRValue>
|     | | |   `-DeclRefExpr 0x55888b3d6798 <col:73> 'const int' lvalue Var 0x55888b3d60b0 'nlimb' 'const int' non_odr_use_constant
|     | | `-CXXMemberCallExpr 0x55888b3d6820 <line:1058:16, col:24> 'String::const_iterator':'const char *'
|     | |   `-MemberExpr 0x55888b3d67f0 <col:16, col:20> '<bound member function type>' .end 0x55888b083610
|     | |     `-DeclRefExpr 0x55888b3d67d0 <col:16> 'const String' lvalue ParmVar 0x55888b3d5660 'str' 'const String &'
|     | `-BinaryOperator 0x55888b3d6878 <line:1059:13, col:22> 'int' lvalue '='
|     |   |-MemberExpr 0x55888b3738d8 <col:13> 'int' lvalue ->status 0x55888b372378
|     |   | `-CXXThisExpr 0x55888b3738c8 <col:13> 'IntArg *' implicit this
|     |   `-ImplicitCastExpr 0x55888b3d6860 <col:22> 'int' <IntegralCast>
|     |     `-DeclRefExpr 0x55888b373908 <col:22> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b370f70 'status_inval' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     |-IfStmt 0x55888b3d6a10 <line:1060:9, line:1063:9>
|     | |-BinaryOperator 0x55888b3d6930 <line:1060:13, col:33> 'bool' '&&'
|     | | |-ImplicitCastExpr 0x55888b3d6918 <col:13> 'bool' <IntegralToBoolean>
|     | | | `-ImplicitCastExpr 0x55888b3d6900 <col:13> 'int' <LValueToRValue>
|     | | |   `-MemberExpr 0x55888b373988 <col:13> 'int' lvalue ->status 0x55888b372378
|     | | |     `-CXXThisExpr 0x55888b373978 <col:13> 'IntArg *' implicit this
|     | | `-BinaryOperator 0x55888b3d68e0 <col:23, col:33> 'bool' '!='
|     | |   |-ImplicitCastExpr 0x55888b3d68b0 <col:23> 'int' <LValueToRValue>
|     | |   | `-MemberExpr 0x55888b3739c8 <col:23> 'int' lvalue ->status 0x55888b372378
|     | |   |   `-CXXThisExpr 0x55888b3739b8 <col:23> 'IntArg *' implicit this
|     | |   `-ImplicitCastExpr 0x55888b3d68c8 <col:33> 'int' <IntegralCast>
|     | |     `-DeclRefExpr 0x55888b3739f8 <col:33> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b371000 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|     | `-CompoundStmt 0x55888b3d69f0 <col:47, line:1063:9>
|     |   |-CXXMemberCallExpr 0x55888b3d69a0 <line:1061:13, col:40> 'void'
|     |   | |-MemberExpr 0x55888b3d6970 <col:13, col:18> '<bound member function type>' .error 0x55888b31bd70
|     |   | | `-DeclRefExpr 0x55888b3d6950 <col:13> 'const ArgContext' lvalue ParmVar 0x55888b3d57a0 'args' 'const ArgContext &'
|     |   | `-ImplicitCastExpr 0x55888b3d69c8 <col:24> 'const char *' <ArrayToPointerDecay>
|     |   |   `-StringLiteral 0x55888b373b08 <col:24> 'const char [15]' lvalue "invalid number"
|     |   `-ReturnStmt 0x55888b3d69e0 <line:1062:13, col:20>
|     |     `-CXXBoolLiteralExpr 0x55888b373b70 <col:20> 'bool' false
|     |-DeclStmt 0x55888b3d6f58 <line:1064:9, col:64>
|     | `-TypedefDecl 0x55888b3d6f00 <col:9, col:49> col:49 unsigned_v_type 'typename make_unsigned<unsigned int>::type':'unsigned int'
|     |   `-ElaboratedType 0x55888b3d6eb0 'typename make_unsigned<unsigned int>::type' sugar
|     |     `-TypedefType 0x55888b3d6e90 'make_unsigned<unsigned int>::type' sugar
|     |       |-Typedef 0x55888b3d6e20 'type'
|     |       `-ElaboratedType 0x55888b3d6dd0 'typename integer_traits<unsigned int>::unsigned_type' sugar
|     |         `-TypedefType 0x55888b3d6db0 'integer_traits<unsigned int>::unsigned_type' sugar
|     |           |-Typedef 0x55888b0158f8 'unsigned_type'
|     |           `-BuiltinType 0x55888ad3a620 'unsigned int'
|     |-CallExpr 0x55888b3d75b0 <line:1065:9, col:71> 'void'
|     | |-ImplicitCastExpr 0x55888b3d7598 <col:9> 'void (*)(const unsigned int *, unsigned int &)' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x55888b3d7518 <col:9> 'void (const unsigned int *, unsigned int &)' lvalue Function 0x55888b3d73f8 'extract_integer' 'void (const unsigned int *, unsigned int &)' (FunctionTemplate 0x55888b026588 'extract_integer')
|     | |-ImplicitCastExpr 0x55888b3d75f8 <col:25> 'const unsigned int *' <NoOp>
|     | | `-ImplicitCastExpr 0x55888b3d75e0 <col:25> 'IntArg::limb_type *' <ArrayToPointerDecay>
|     | |   `-DeclRefExpr 0x55888b3d6fb8 <col:25> 'IntArg::limb_type [1]' lvalue Var 0x55888b3d63a8 'x' 'IntArg::limb_type [1]'
|     | `-CXXReinterpretCastExpr 0x55888b3d7088 <col:28, col:70> 'unsigned_v_type':'unsigned int' lvalue reinterpret_cast<unsigned_v_type &> <NoOp>
|     |   `-DeclRefExpr 0x55888b3d7038 <col:64> 'unsigned int':'unsigned int' lvalue ParmVar 0x55888b3d5738 'result' 'unsigned int &'
|     `-ReturnStmt 0x55888b3d7610 <line:1066:9, col:16>
|       `-CXXBoolLiteralExpr 0x55888b373f18 <col:16> 'bool' true
|-FunctionTemplateDecl 0x55888b372288 <line:1069:5, line:1083:5> line:1070:10 parse
| |-TemplateTypeParmDecl 0x55888b371f38 <line:1069:14, col:23> col:23 referenced typename depth 0 index 0 V
| |-CXXMethodDecl 0x55888b3721e8 <line:1070:5, line:1083:5> line:1070:10 parse 'bool (const String &, V &, const ArgContext &)'
| | |-ParmVarDecl 0x55888b371fe8 <col:16, col:30> col:30 referenced str 'const String &'
| | |-ParmVarDecl 0x55888b372088 <col:35, col:38> col:38 referenced result 'V &'
| | |-ParmVarDecl 0x55888b372100 <col:46, col:71> col:64 referenced args 'const ArgContext &' cinit
| | | `-DeclRefExpr 0x55888b372a98 <col:71> 'const ArgContext' lvalue Var 0x55888b3665f8 'blank_args' 'const ArgContext'
| | `-CompoundStmt 0x55888b3746a8 <col:83, line:1083:5>
| |   |-DeclStmt 0x55888b374000 <line:1071:9, col:12>
| |   | `-VarDecl 0x55888b373f98 <col:9, col:11> col:11 referenced x 'V'
| |   `-IfStmt 0x55888b374680 <line:1072:9, line:1082:9> has_else
| |     |-BinaryOperator 0x55888b374290 <line:1072:13, line:1073:49> '<dependent type>' '||'
| |     | |-UnaryOperator 0x55888b374118 <line:1072:13, col:43> '<dependent type>' prefix '!' cannot overflow
| |     | | `-CallExpr 0x55888b3740e0 <col:14, col:43> '<dependent type>'
| |     | |   |-UnresolvedMemberExpr 0x55888b374028 <col:14> '<bound member function type>' lvalue
| |     | |   |-DeclRefExpr 0x55888b374080 <col:31> 'const String' lvalue ParmVar 0x55888b371fe8 'str' 'const String &'
| |     | |   |-DeclRefExpr 0x55888b3740a0 <col:36> 'V' lvalue Var 0x55888b373f98 'x' 'V'
| |     | |   `-DeclRefExpr 0x55888b3740c0 <col:39> 'const ArgContext' lvalue ParmVar 0x55888b372100 'args' 'const ArgContext &'
| |     | `-ParenExpr 0x55888b374270 <line:1073:16, col:49> 'bool'
| |     |   `-BinaryOperator 0x55888b374250 <col:17, col:37> 'bool' '&&'
| |     |     |-ImplicitCastExpr 0x55888b374238 <col:17> 'bool' <IntegralToBoolean>
| |     |     | `-ImplicitCastExpr 0x55888b374220 <col:17> 'int' <LValueToRValue>
| |     |     |   `-MemberExpr 0x55888b374140 <col:17> 'int' lvalue ->status 0x55888b372378
| |     |     |     `-CXXThisExpr 0x55888b374130 <col:17> 'IntArg *' implicit this
| |     |     `-BinaryOperator 0x55888b374200 <col:27, col:37> 'bool' '!='
| |     |       |-ImplicitCastExpr 0x55888b3741d0 <col:27> 'int' <LValueToRValue>
| |     |       | `-MemberExpr 0x55888b374180 <col:27> 'int' lvalue ->status 0x55888b372378
| |     |       |   `-CXXThisExpr 0x55888b374170 <col:27> 'IntArg *' implicit this
| |     |       `-ImplicitCastExpr 0x55888b3741e8 <col:37> 'int' <IntegralCast>
| |     |         `-DeclRefExpr 0x55888b3741b0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b371000 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |     |-ReturnStmt 0x55888b3742c0 <line:1074:13, col:20>
| |     | `-CXXBoolLiteralExpr 0x55888b3742b0 <col:20> 'bool' false
| |     `-IfStmt 0x55888b374658 <line:1075:14, line:1082:9> has_else
| |       |-BinaryOperator 0x55888b374360 <line:1075:18, col:28> 'bool' '=='
| |       | |-ImplicitCastExpr 0x55888b374330 <col:18> 'int' <LValueToRValue>
| |       | | `-MemberExpr 0x55888b3742e0 <col:18> 'int' lvalue ->status 0x55888b372378
| |       | |   `-CXXThisExpr 0x55888b3742d0 <col:18> 'IntArg *' implicit this
| |       | `-ImplicitCastExpr 0x55888b374348 <col:28> 'int' <IntegralCast>
| |       |   `-DeclRefExpr 0x55888b374310 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b371000 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| |       |-CompoundStmt 0x55888b374598 <col:42, line:1079:9>
| |       | |-CallExpr 0x55888b374540 <line:1076:13, line:1077:45> '<dependent type>'
| |       | | |-MemberExpr 0x55888b374390 <line:1076:13> '<bound member function type>' ->range_error 0x55888b372988
| |       | | | `-CXXThisExpr 0x55888b374380 <col:13> 'IntArg *' implicit this
| |       | | |-DeclRefExpr 0x55888b3743c0 <col:25> 'const ArgContext' lvalue ParmVar 0x55888b372100 'args' 'const ArgContext &'
| |       | | |-CXXDependentScopeMemberExpr 0x55888b3744a0 <col:31, col:50> '<dependent type>' lvalue ->is_signed
| |       | | `-CXXUnresolvedConstructExpr 0x55888b374518 <line:1077:25, col:44> 'click_int_large_t':'long long' 'click_int_large_t':'long long'
| |       | |   `-DeclRefExpr 0x55888b3744f8 <col:43> 'V' lvalue Var 0x55888b373f98 'x' 'V'
| |       | `-ReturnStmt 0x55888b374588 <line:1078:13, col:20>
| |       |   `-CXXBoolLiteralExpr 0x55888b374578 <col:20> 'bool' false
| |       `-CompoundStmt 0x55888b374638 <line:1079:16, line:1082:9>
| |         |-BinaryOperator 0x55888b3745f8 <line:1080:13, col:22> '<dependent type>' '='
| |         | |-DeclRefExpr 0x55888b3745b8 <col:13> 'V' lvalue ParmVar 0x55888b372088 'result' 'V &'
| |         | `-DeclRefExpr 0x55888b3745d8 <col:22> 'V' lvalue Var 0x55888b373f98 'x' 'V'
| |         `-ReturnStmt 0x55888b374628 <line:1081:13, col:20>
| |           `-CXXBoolLiteralExpr 0x55888b374618 <col:20> 'bool' true
| `-CXXMethodDecl 0x55888b3d5248 <line:1070:5, line:1083:5> line:1070:10 used parse 'bool (const String &, unsigned int &, const ArgContext &)'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x55888b3d5020 <col:16, col:30> col:30 used str 'const String &'
|   |-ParmVarDecl 0x55888b3d50f8 <col:35, col:38> col:38 used result 'unsigned int &'
|   |-ParmVarDecl 0x55888b3d5160 <col:46, col:71> col:64 used args 'const ArgContext &'
|   `-CompoundStmt 0x55888b3d5e98 <col:83, line:1083:5>
|     |-DeclStmt 0x55888b3d54d0 <line:1071:9, col:12>
|     | `-VarDecl 0x55888b3d5468 <col:9, col:11> col:11 used x 'unsigned int':'unsigned int'
|     `-IfStmt 0x55888b3d5e70 <line:1072:9, line:1082:9> has_else
|       |-BinaryOperator 0x55888b3d5b00 <line:1072:13, line:1073:49> 'bool' '||'
|       | |-UnaryOperator 0x55888b3d5a28 <line:1072:13, col:43> 'bool' prefix '!' cannot overflow
|       | | `-CXXMemberCallExpr 0x55888b3d59f0 <col:14, col:43> 'bool'
|       | |   |-MemberExpr 0x55888b3d59a8 <col:14> '<bound member function type>' ->parse_saturating 0x55888b3d5888
|       | |   | `-CXXThisExpr 0x55888b3d5998 <col:14> 'IntArg *' implicit this
|       | |   |-DeclRefExpr 0x55888b3d5540 <col:31> 'const String' lvalue ParmVar 0x55888b3d5020 'str' 'const String &'
|       | |   |-DeclRefExpr 0x55888b3d5560 <col:36> 'unsigned int':'unsigned int' lvalue Var 0x55888b3d5468 'x' 'unsigned int':'unsigned int'
|       | |   `-DeclRefExpr 0x55888b3d5580 <col:39> 'const ArgContext' lvalue ParmVar 0x55888b3d5160 'args' 'const ArgContext &'
|       | `-ParenExpr 0x55888b3d5ae0 <line:1073:16, col:49> 'bool'
|       |   `-BinaryOperator 0x55888b3d5ac0 <col:17, col:37> 'bool' '&&'
|       |     |-ImplicitCastExpr 0x55888b3d5aa8 <col:17> 'bool' <IntegralToBoolean>
|       |     | `-ImplicitCastExpr 0x55888b3d5a90 <col:17> 'int' <LValueToRValue>
|       |     |   `-MemberExpr 0x55888b374140 <col:17> 'int' lvalue ->status 0x55888b372378
|       |     |     `-CXXThisExpr 0x55888b374130 <col:17> 'IntArg *' implicit this
|       |     `-BinaryOperator 0x55888b3d5a70 <col:27, col:37> 'bool' '!='
|       |       |-ImplicitCastExpr 0x55888b3d5a40 <col:27> 'int' <LValueToRValue>
|       |       | `-MemberExpr 0x55888b374180 <col:27> 'int' lvalue ->status 0x55888b372378
|       |       |   `-CXXThisExpr 0x55888b374170 <col:27> 'IntArg *' implicit this
|       |       `-ImplicitCastExpr 0x55888b3d5a58 <col:37> 'int' <IntegralCast>
|       |         `-DeclRefExpr 0x55888b3741b0 <col:37> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b371000 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|       |-ReturnStmt 0x55888b3d5b20 <line:1074:13, col:20>
|       | `-CXXBoolLiteralExpr 0x55888b3742b0 <col:20> 'bool' false
|       `-IfStmt 0x55888b3d5e48 <line:1075:14, line:1082:9> has_else
|         |-BinaryOperator 0x55888b3d5b60 <line:1075:18, col:28> 'bool' '=='
|         | |-ImplicitCastExpr 0x55888b3d5b30 <col:18> 'int' <LValueToRValue>
|         | | `-MemberExpr 0x55888b3742e0 <col:18> 'int' lvalue ->status 0x55888b372378
|         | |   `-CXXThisExpr 0x55888b3742d0 <col:18> 'IntArg *' implicit this
|         | `-ImplicitCastExpr 0x55888b3d5b48 <col:28> 'int' <IntegralCast>
|         |   `-DeclRefExpr 0x55888b374310 <col:28> 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)' EnumConstant 0x55888b371000 'status_range' 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|         |-CompoundStmt 0x55888b3d5d80 <col:42, line:1079:9>
|         | |-CXXMemberCallExpr 0x55888b3d5cf0 <line:1076:13, line:1077:45> 'void'
|         | | |-MemberExpr 0x55888b374390 <line:1076:13> '<bound member function type>' ->range_error 0x55888b372988
|         | | | `-CXXThisExpr 0x55888b374380 <col:13> 'IntArg *' implicit this
|         | | |-DeclRefExpr 0x55888b3d5b80 <col:25> 'const ArgContext' lvalue ParmVar 0x55888b3d5160 'args' 'const ArgContext &'
|         | | |-ImplicitCastExpr 0x55888b3d5d58 <col:31, col:50> 'bool' <LValueToRValue>
|         | | | `-DeclRefExpr 0x55888b3d5d28 <col:31, col:50> 'const bool' lvalue Var 0x55888b0157a0 'is_signed' 'const bool' non_odr_use_constant
|         | | `-CXXFunctionalCastExpr 0x55888b3d5cc8 <line:1077:25, col:44> 'click_int_large_t':'long long' functional cast to click_int_large_t <NoOp>
|         | |   `-ImplicitCastExpr 0x55888b3d5cb0 <col:43> 'click_int_large_t':'long long' <IntegralCast> part_of_explicit_cast
|         | |     `-ImplicitCastExpr 0x55888b3d5c98 <col:43> 'unsigned int':'unsigned int' <LValueToRValue> part_of_explicit_cast
|         | |       `-DeclRefExpr 0x55888b3d5c78 <col:43> 'unsigned int':'unsigned int' lvalue Var 0x55888b3d5468 'x' 'unsigned int':'unsigned int'
|         | `-ReturnStmt 0x55888b3d5d70 <line:1078:13, col:20>
|         |   `-CXXBoolLiteralExpr 0x55888b374578 <col:20> 'bool' false
|         `-CompoundStmt 0x55888b3d5e28 <line:1079:16, line:1082:9>
|           |-BinaryOperator 0x55888b3d5df8 <line:1080:13, col:22> 'unsigned int':'unsigned int' lvalue '='
|           | |-DeclRefExpr 0x55888b3d5da0 <col:13> 'unsigned int':'unsigned int' lvalue ParmVar 0x55888b3d50f8 'result' 'unsigned int &'
|           | `-ImplicitCastExpr 0x55888b3d5de0 <col:22> 'unsigned int':'unsigned int' <LValueToRValue>
|           |   `-DeclRefExpr 0x55888b3d5dc0 <col:22> 'unsigned int':'unsigned int' lvalue Var 0x55888b3d5468 'x' 'unsigned int':'unsigned int'
|           `-ReturnStmt 0x55888b3d5e18 <line:1081:13, col:20>
|             `-CXXBoolLiteralExpr 0x55888b374618 <col:20> 'bool' true
|-FieldDecl 0x55888b372310 <line:1085:5, col:9> col:9 referenced base 'int'
|-FieldDecl 0x55888b372378 <line:1086:5, col:9> col:9 referenced status 'int'
|-AccessSpecDecl 0x55888b3723c8 <line:1088:3, col:12> col:3 protected
|-CXXMethodDecl 0x55888b372680 <line:1090:5, line:1091:51> line:1090:24 span 'const char *(const char *, const char *, bool, int &)' static
| |-ParmVarDecl 0x55888b372408 <col:29, col:41> col:41 begin 'const char *'
| |-ParmVarDecl 0x55888b372488 <col:48, col:60> col:60 end 'const char *'
| |-ParmVarDecl 0x55888b372500 <line:1091:29, col:34> col:34 is_signed 'bool'
| `-ParmVarDecl 0x55888b372580 <col:45, col:50> col:50 b 'int &'
|-CXXMethodDecl 0x55888b372988 <line:1092:5, line:1093:45> line:1092:10 used range_error 'void (const ArgContext &, bool, click_int_large_t)'
| |-ParmVarDecl 0x55888b372750 <col:22, col:40> col:40 args 'const ArgContext &'
| |-ParmVarDecl 0x55888b3727c8 <col:46, col:51> col:51 is_signed 'bool'
| `-ParmVarDecl 0x55888b372860 <line:1093:22, col:40> col:40 value 'click_int_large_t':'long long'
|-CXXConstructorDecl 0x55888b374f08 <line:1040:7> col:7 implicit constexpr IntArg 'void (const IntArg &)' inline default trivial noexcept-unevaluated 0x55888b374f08
| `-ParmVarDecl 0x55888b375018 <col:7> col:7 'const IntArg &'
|-CXXConstructorDecl 0x55888b375198 <col:7> col:7 implicit used constexpr IntArg 'void (IntArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55888b3752a8 <col:7> col:7 used 'IntArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x55888b3d1d30 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55888b3d1d00 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x55888b3d1cd0 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55888b3d1ca0 <col:7> 'IntArg' lvalue ParmVar 0x55888b3752a8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55888b372310 'base' 'int'
| | `-ImplicitCastExpr 0x55888b3d1e28 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55888b3d1df8 <col:7> 'int' xvalue .base 0x55888b372310
| |     `-CXXStaticCastExpr 0x55888b3d1dc8 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55888b3d1d98 <col:7> 'IntArg' lvalue ParmVar 0x55888b3752a8 '' 'IntArg &&'
| |-CXXCtorInitializer Field 0x55888b372378 'status' 'int'
| | `-ImplicitCastExpr 0x55888b3d1ef8 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x55888b3d1ec8 <col:7> 'int' xvalue .status 0x55888b372378
| |     `-CXXStaticCastExpr 0x55888b3d1e98 <col:7> 'IntArg' xvalue static_cast<class IntArg &&> <NoOp>
| |       `-DeclRefExpr 0x55888b3d1e68 <col:7> 'IntArg' lvalue ParmVar 0x55888b3752a8 '' 'IntArg &&'
| `-CompoundStmt 0x55888b3d1f50 <col:7>
`-CXXDestructorDecl 0x55888b3d0e90 <col:7> col:7 implicit ~IntArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.IntArg = type { i32, i32 }
  NonVirtualBaseLLVMType:%class.IntArg = type { i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x55888b3794a0 <../dummy_inc/click/args.hh:1182:1, col:61> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'IntArg'
|-TemplateArgument type 'unsigned int'
|-CXXRecordDecl 0x55888b3796f8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x55888b3d0db8 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55888b3d1330 <col:19> 'IntArg' 'void (int)'
| |   `-CXXDefaultArgExpr 0x55888b3d1310 <<invalid sloc>> 'int'
| `-CompoundStmt 0x55888b3d13a0 <col:19>
|-CXXConstructorDecl 0x55888b3d0f98 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<unsigned int> &)' inline default trivial noexcept-unevaluated 0x55888b3d0f98
| `-ParmVarDecl 0x55888b3d10a8 <col:19> col:19 'const DefaultArg<unsigned int> &'
|-CXXConstructorDecl 0x55888b3d1148 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<unsigned int> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x55888b3d1258 <col:19> col:19 used 'DefaultArg<unsigned int> &&'
| |-CXXCtorInitializer 'IntArg'
| | `-CXXConstructExpr 0x55888b3d1f60 <col:19> 'IntArg' 'void (IntArg &&) noexcept'
| |   `-ImplicitCastExpr 0x55888b3d1c80 <col:19> 'IntArg' xvalue <UncheckedDerivedToBase (IntArg)>
| |     `-CXXStaticCastExpr 0x55888b3d1c50 <col:19> 'DefaultArg<unsigned int>' xvalue static_cast<struct DefaultArg<unsigned int> &&> <NoOp>
| |       `-DeclRefExpr 0x55888b3d1c20 <col:19> 'DefaultArg<unsigned int>' lvalue ParmVar 0x55888b3d1258 '' 'DefaultArg<unsigned int> &&'
| `-CompoundStmt 0x55888b3d1fd0 <col:19>
`-CXXDestructorDecl 0x55888b3d13e0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.IntArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.IntArg }
  IsZeroInitializable:1
  BitFields:[
]>
