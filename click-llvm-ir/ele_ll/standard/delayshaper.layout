
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4e2578 prev 0x56283d4d9df8 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d4e2670 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56283d4e2700 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56283d4e2778 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56283d4e2838 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56283d4e2900 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56283d4e2a78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56283d4e29b0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56283d4e2b20 <col:24>
| `-OptimizeNoneAttr 0x56283d4e2b78 <col:34>
|-CXXMethodDecl 0x56283d4e2bc0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56283d4e2e78 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56283d4e2c70 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56283d4e2ce8 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56283d4e2d68 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56283d4e2f30 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56283d4e2f68 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56283d4e2fd0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56283d4e3058 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56283d4e3390 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56283d4e3110 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56283d4e3188 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56283d4e3200 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56283d4e3280 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56283d4e34a0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56283d4e9d88 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56283d4e9d88
| `-ParmVarDecl 0x56283d4e9e98 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56283d4e9f38 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56283d4e9f38
| `-ParmVarDecl 0x56283d4ea048 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56283d5ac400 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4d5870 prev 0x56283d4d5610 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d4d5968 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56283d4d59f8 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56283d4d5a58 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56283d4d5b48 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56283d4d5c48 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56283d4d5e18 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56283d4d5cc8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56283d4d5d40 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56283d4d5fa8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56283d4d5ee0 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56283d4d6050 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56283d4d6188 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56283d4d60c0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56283d4d6328 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56283d4d6268 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56283d4d64c8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56283d4d6408 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56283d4d6570 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56283d4d6670 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56283d4d6750 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4d6650 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56283d4d6630 <col:26> 'int' 1
| `-EnumConstantDecl 0x56283d4d6700 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56283d4d6768 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d4d66e0 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56283d4d66c0 <col:44> 'int' 2
|-CXXMethodDecl 0x56283d4d68b0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56283d4d6798 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56283d4d6818 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56283d4d6a08 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56283d4d6978 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56283d4d6c18 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56283d4d6ac8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56283d4d6b40 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56283d4d6cc8 <col:20>
| `-OptimizeNoneAttr 0x56283d4d6d20 <col:30>
|-CXXMethodDecl 0x56283d4d6e28 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56283d4d6d60 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56283d4d6ed0 <col:20>
| `-OptimizeNoneAttr 0x56283d4d6f28 <col:30>
|-CXXMethodDecl 0x56283d4d6f78 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56283d4d7040 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56283d4d7100 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56283d4d7188 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56283d4d7210 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56283d4d7298 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56283d4d7320 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56283d4d73b0 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56283d4d7470 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56283d4d74f8 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56283d4d7580 <line:64:5, col:28> col:23 used PULL 'const char []' static
|-VarDecl 0x56283d4d7608 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56283d4d7690 <line:66:5, col:36> col:23 PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56283d4d7718 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56283d4d77a8 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56283d4d7868 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56283d4d78f8 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56283d4d7a48 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56283d4d79b0 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56283d4d7bd0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56283d4d7b08 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56283d4d7e70 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56283d4d7c88 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56283d4d7d08 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56283d4d7d88 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56283d4d7f28 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56283d4d8030 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56283d4d82c0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4d8010 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d4d7ff0 <col:33> 'int' 0
| |-EnumConstantDecl 0x56283d4d80c0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56283d4d82d8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4d80a0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56283d4d8080 <col:32> 'int' 20
| |-EnumConstantDecl 0x56283d4d8150 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56283d4d82f0 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4d8130 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56283d4d8110 <col:38> 'int' 90
| |-EnumConstantDecl 0x56283d4d81e0 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56283d4d8308 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4d81c0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56283d4d81a0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56283d4d8270 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56283d4d8320 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d4d8250 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56283d4d8230 <col:32> 'int' 2000
|-CXXMethodDecl 0x56283d4d8360 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56283d4d8670 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56283d4d84e0 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56283d4d8558 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4d8740 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56283d4d88c0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56283d4d87f0 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4d8ac8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56283d4d8978 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56283d4d89f0 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4d8bc8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56283d4d8c68 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56283d4d8d30 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56283d4d8dc0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56283d4d8ff0 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4d8da0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56283d4d8d80 <col:36> 'int' EnumConstant 0x56283d4d8d30 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56283d4d8e10 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56283d4d8e60 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56283d4d8eb0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56283d4d8f00 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56283d4d8f50 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56283d4d8fa0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56283d4d90d8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56283d4d9018 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56283d4d91a0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56283d4d9260 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56283d4d9320 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56283d4d93e0 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56283d4d94c8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56283d4d9590 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56283d4d9710 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56283d4d9640 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56283d4d9838 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56283d4d9a38 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56283d4d98e8 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56283d4d9968 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56283d4e6258 <col:54, line:127:5>
|   |-ParenExpr 0x56283d4e6108 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56283d4e60d8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4e5dc0 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56283d4e5d98 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56283d4e5d80 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56283d4e5d68 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56283d4e5d38 <col:31> 'Router *' lvalue ->_router 0x56283d4e3c50
|   |   |         `-CXXThisExpr 0x56283d4e5d28 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56283d4e5e20 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4e5e00 <col:48> 'int' 0
|   |   `-CallExpr 0x56283d4e6038 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56283d4e6020 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4e6000 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4e6078 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4e5e90 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56283d4e6090 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4e5eb0 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56283d4e60a8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4e5ee8 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56283d4e60c0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4e5fe8 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4e5fd0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4e5f88 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56283d4e61a0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56283d4e6138 <col:9> 'Router *' lvalue ->_router 0x56283d4e3c50
|   | | `-CXXThisExpr 0x56283d4e6128 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56283d4e6188 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56283d4e6168 <col:19> 'Router *' lvalue ParmVar 0x56283d4d98e8 'r' 'Router *'
|   `-BinaryOperator 0x56283d4e6238 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56283d4e61d0 <col:9> 'int' lvalue ->_eindex 0x56283d4e3cb8
|     | `-CXXThisExpr 0x56283d4e61c0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56283d4e6220 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4e6200 <col:19> 'int' lvalue ParmVar 0x56283d4d9968 'eindex' 'int'
|-CXXMethodDecl 0x56283d4d9bc0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56283d4d9af8 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56283d4d9c90 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56283d4d9d58 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56283d4d9df8 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56283d4da048 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56283d4d9ec0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56283d4d9f40 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56283d4da0f8 <col:20>
| `-OptimizeNoneAttr 0x56283d4da150 <col:30>
|-CXXMethodDecl 0x56283d4da258 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56283d4da190 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56283d4da300 <col:20>
| `-OptimizeNoneAttr 0x56283d4da358 <col:30>
|-CXXMethodDecl 0x56283d4da428 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56283d4da398 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56283d4da4d0 <col:20>
| `-OptimizeNoneAttr 0x56283d4da528 <col:30>
|-CXXMethodDecl 0x56283d4da6b8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56283d4da560 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56283d4da5e0 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56283d4da848 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56283d4da780 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56283d4da998 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56283d4da908 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56283d4daae8 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56283d4daa58 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56283d4dac38 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56283d4daba8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56283d4daef8 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56283d4dacf0 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56283d4dad70 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56283d4dae18 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56283d4dafd0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56283d4db090 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56283d4db378 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56283d4db210 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56283d4db288 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4db4a8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56283d4db680 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56283d4db560 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56283d4db5e0 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56283d4db868 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56283d4db748 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56283d4db7c8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56283d4dbbd8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56283d4db928 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56283d4db9a0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56283d4dba20 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56283d4e5838 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d4e5818 <col:106> 'int' 0
| `-ParmVarDecl 0x56283d4dba98 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56283d4e5870 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56283d4e5850 <col:126> 'int' 0
|-CXXMethodDecl 0x56283d4dbf58 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56283d4dbca8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56283d4dbd20 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56283d4dbda0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56283d4dbe18 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56283d4e58a8 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56283d4e5888 <col:114> 'int' 0
|-CXXMethodDecl 0x56283d4dc2e8 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56283d4dc030 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56283d4dc0a8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56283d4dc128 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56283d4e58c0 <col:96> 'int' 0
| `-ParmVarDecl 0x56283d4dc1a0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56283d4e5900 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56283d4e58e0 <col:116> 'int' 0
|-CXXMethodDecl 0x56283d4dc668 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56283d4dc3b8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56283d4dc430 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4dc4b0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56283d4e5938 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d4e5918 <col:109> 'int' 0
| `-ParmVarDecl 0x56283d4dc528 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56283d4e5970 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56283d4e5950 <col:129> 'int' 0
|-CXXMethodDecl 0x56283d4dc9e8 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56283d4dc738 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56283d4dc7b0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4dc830 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56283d4dc8a8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56283d4e59a8 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56283d4e5988 <col:117> 'int' 0
|-CXXMethodDecl 0x56283d4dcd78 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56283d4dcac0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4dcb38 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4dcbb8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56283d4e59c0 <col:99> 'int' 0
| `-ParmVarDecl 0x56283d4dcc30 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56283d4e5a00 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56283d4e59e0 <col:119> 'int' 0
|-CXXMethodDecl 0x56283d4dd198 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56283d4dce48 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56283d4dcec8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56283d4dcf40 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4dcfc0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56283d4e5a38 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d4e5a18 <col:108> 'int' 0
| `-ParmVarDecl 0x56283d4dd040 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56283d4e5a70 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56283d4e5a50 <col:141> 'int' 0
|-CXXMethodDecl 0x56283d4dd5b8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56283d4dd270 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56283d4dd2f0 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56283d4dd368 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4dd3e8 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56283d4dd468 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56283d4e5a88 <col:121> 'int' 0
|-CXXMethodDecl 0x56283d4dd9e8 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56283d4dd698 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56283d4dd718 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56283d4dd790 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4dd810 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56283d4e5aa8 <col:98> 'int' 0
| `-ParmVarDecl 0x56283d4dd890 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56283d4e5ac8 <col:123> 'int' 0
|-CXXMethodDecl 0x56283d4ddcb0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56283d4ddac0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56283d4ddb40 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56283d4ddbc0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56283d4e5ae8 <col:80> 'int' 0
|-EnumDecl 0x56283d4ddd68 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56283d4dde70 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56283d4de100 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4dde50 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56283d4dde30 <col:42> 'int' 1
| |-EnumConstantDecl 0x56283d4ddf00 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56283d4de118 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4ddee0 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56283d4ddec0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56283d4ddf90 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56283d4de130 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4ddf70 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56283d4ddf50 <col:44> 'int' 4
| |-EnumConstantDecl 0x56283d4de020 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56283d4de148 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4de000 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56283d4ddfe0 <col:36> 'int' 7
| `-EnumConstantDecl 0x56283d4de0b0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56283d4de160 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d4de090 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56283d4de070 <col:34> 'int' 6
|-CXXMethodDecl 0x56283d4de418 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56283d4de188 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56283d4de228 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56283d4de2a8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56283d4de320 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56283d4e5ba0 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56283d4e5b88 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56283d4e5b70 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56283d4e5b50 <col:98, col:105> 'String' (CXXTemporary 0x56283d4e5b50)
|           `-CXXTemporaryObjectExpr 0x56283d4e5b18 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56283d4de6b8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56283d4de4e8 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56283d4de560 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56283d4de5d8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56283d4e5c50 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56283d4e5c38 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56283d4e5c20 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56283d4e5c00 <col:94, col:101> 'String' (CXXTemporary 0x56283d4e5c00)
| |         `-CXXTemporaryObjectExpr 0x56283d4e5bc8 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56283d4e6440 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56283d4e63b8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56283d4e6388 <col:9> '<bound member function type>' ->add_task_handlers 0x56283d4de418
|     | `-CXXThisExpr 0x56283d4e6378 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56283d4e63f8 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d4e62f8 <col:27> 'Task *' lvalue ParmVar 0x56283d4de4e8 'task' 'Task *'
|     |-ImplicitCastExpr 0x56283d4e6410 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d4e6318 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56283d4de560 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56283d4e6428 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56283d4e6338 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56283d4de0b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56283d4e6358 <col:62> 'const String' lvalue ParmVar 0x56283d4de5d8 'prefix' 'const String &'
|-CXXMethodDecl 0x56283d4de8c8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56283d4de780 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56283d4de7f8 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56283d4e5d00 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56283d4e5ce8 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56283d4e5cd0 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56283d4e5cb0 <col:70, col:77> 'String' (CXXTemporary 0x56283d4e5cb0)
| |         `-CXXTemporaryObjectExpr 0x56283d4e5c78 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56283d4e6618 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56283d4e6590 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56283d4e6560 <col:9> '<bound member function type>' ->add_task_handlers 0x56283d4de418
|     | `-CXXThisExpr 0x56283d4e6550 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56283d4e65d0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d4e64d0 <col:27> 'Task *' lvalue ParmVar 0x56283d4de780 'task' 'Task *'
|     |-ImplicitCastExpr 0x56283d4e65e8 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56283d4e64f0 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56283d4e6600 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56283d4e6510 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56283d4de0b0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56283d4e6530 <col:57> 'const String' lvalue ParmVar 0x56283d4de7f8 'prefix' 'const String &'
|-CXXMethodDecl 0x56283d4deba8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56283d4de990 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4dea10 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4dea88 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56283d4dee58 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56283d4dec78 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4decf8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4ded78 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56283d4df148 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56283d4def28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4defa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4df020 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56283d4df3f8 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56283d4df218 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4df298 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4df318 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56283d4df6a8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56283d4df4c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4df548 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4df5c8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56283d4df958 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56283d4df778 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4df7f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4df870 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56283d4dfc08 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56283d4dfa28 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4dfaa8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4dfb28 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56283d4dfeb8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56283d4dfcd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4dfd58 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4dfdd8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56283d4e0168 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56283d4dff88 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e0008 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4e0088 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56283d4e0418 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56283d4e0238 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e02b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4e0338 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56283d4e0680 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56283d4e04e8 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56283d4e0568 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56283d4e05e0 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56283d4e0928 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56283d4e0750 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56283d4e07d0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56283d4e0848 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56283d4e0bd8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56283d4e09f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e0a78 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4e0af8 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56283d4e0e88 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56283d4e0ca8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e0d28 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4e0da0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56283d4e1138 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56283d4e0f58 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e0fd8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4e1050 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56283d4e13e8 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56283d4e1208 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e1288 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56283d4e1300 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56283d4e1718 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56283d4e14b8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56283d4e1538 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56283d4e15b0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56283d4e1628 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d4e5d18 <col:93> 'bool' false
|-CXXMethodDecl 0x56283d4e1900 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56283d4e17e8 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56283d4e1868 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56283d4e1ad8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56283d4e19c0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56283d4e1a40 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56283d4e1db8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56283d4e1b98 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56283d4e1c10 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56283d4e1c90 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56283d4e1d08 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4e20a8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56283d4e1e88 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56283d4e1f00 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56283d4e1f80 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56283d4e1ff8 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4e22e0 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56283d4e2180 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56283d4e2200 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56283d4e24c8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56283d4e23a8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56283d4e2428 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56283d4e2578 prev 0x56283d4d9df8 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d4e2670 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56283d4e2700 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56283d4e2778 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56283d4e2838 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56283d4e2900 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56283d4e2a78 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56283d4e29b0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56283d4e2b20 <col:24>
| | `-OptimizeNoneAttr 0x56283d4e2b78 <col:34>
| |-CXXMethodDecl 0x56283d4e2bc0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56283d4e2e78 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56283d4e2c70 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56283d4e2ce8 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56283d4e2d68 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56283d4e2f30 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56283d4e2f68 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56283d4e2fd0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56283d4e3058 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56283d4e3390 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56283d4e3110 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56283d4e3188 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56283d4e3200 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56283d4e3280 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56283d4e34a0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56283d4e9d88 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56283d4e9d88
| | `-ParmVarDecl 0x56283d4e9e98 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56283d4e9f38 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56283d4e9f38
| | `-ParmVarDecl 0x56283d4ea048 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56283d5ac400 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56283d4e3518 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56283d4e35b8 <col:38> "" ""
|-CXXMethodDecl 0x56283d4e3648 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56283d4e36e8 <col:44> "" ""
|-AccessSpecDecl 0x56283d4e3758 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56283d4e3780 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56283d4e3880 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56283d4e38d0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d4e3860 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56283d4e3840 <col:27> 'int' 4
|-FieldDecl 0x56283d4e3988 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56283d4e3b38 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56283d4e3bf0 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56283d4e3c50 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56283d4e3cb8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56283d4e3e08 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56283d4e3d48 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56283d4e3fb8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56283d4e3ec8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56283d4e4198 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56283d4e4078 <col:20> col:23 'int'
| `-ParmVarDecl 0x56283d4e40f8 <col:25> col:28 'int'
|-CXXMethodDecl 0x56283d4e4440 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56283d4e4260 <col:23> col:26 'int'
| |-ParmVarDecl 0x56283d4e42e0 <col:28> col:31 'int'
| `-ParmVarDecl 0x56283d4e4358 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56283d4e44f8 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56283d4e45c0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56283d4e4610 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56283d4e4660 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56283d4e4840 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56283d4e46f0 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56283d4e4768 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4e4ae8 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56283d4e4908 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56283d4e4988 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56283d4e4a00 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56283d4e4d08 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56283d4e4bb8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56283d4e4c38 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56283d4e5040 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56283d4e4dc8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56283d4e4e48 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56283d4e4ec0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56283d4e4f40 <col:57> col:60 'int'
|-CXXMethodDecl 0x56283d4e5228 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56283d4e5110 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56283d4e5190 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56283d4e5378 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56283d4e52e8 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56283d4e56f8 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56283d4e5438 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56283d4e54b8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56283d4e5530 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56283d4e55b0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56283d4e57d8 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union NotifierSignal::vmvalue
         0 |   class atomic_uint32_t * v1
         0 |   struct NotifierSignal::vmpair * vm
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class NotifierSignal
         0 |   union NotifierSignal::vmvalue _v
         0 |     class atomic_uint32_t * v1
         0 |     struct NotifierSignal::vmpair * vm
         8 |   uint32_t _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class Notifier
         0 |   (Notifier vtable pointer)
         8 |   class NotifierSignal _signal
         8 |     union NotifierSignal::vmvalue _v
         8 |       class atomic_uint32_t * v1
         8 |       struct NotifierSignal::vmpair * vm
        16 |     uint32_t _mask
        24 |   enum Notifier::SearchOp _search_op
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d0cb4a8 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d0cb5c8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56283d0cb658 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56283d0cb728 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56283d0cb810 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d0cc8c8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56283d0cc770 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0cca78 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56283d0cc980 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56283d0ccbc0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56283d0ccb30 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56283d0ccd08 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56283d0ccc78 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0cce50 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56283d0ccdc0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0ccf18 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x56283d0cd098 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56283d0ccfd0 <col:28> col:31 'int'
|-CXXMethodDecl 0x56283d0cd160 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x56283d0cd2a8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56283d0cd218 <col:28> col:31 'int'
|-CXXMethodDecl 0x56283d0cd428 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56283d0cd360 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0cd570 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56283d0cd4e0 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0cd638 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56283d0cd878 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56283d0cd6e8 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56283d0cd760 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0cdac8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56283d0cd938 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56283d0cd9b0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d0cdb78 <col:86> "" ""
|-CXXMethodDecl 0x56283d0cdde8 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56283d0cdc58 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56283d0cdcd0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0cdf98 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56283d0cdea8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56283d0ce148 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56283d0ce050 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56283d0ce418 <line:81:5, col:98> col:28 compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56283d0ce200 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56283d0ce278 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56283d0ce2f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0ce780 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56283d0ce4e0 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56283d0ce558 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56283d0ce5d0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d0ce838 <col:115> "" ""
|-AccessSpecDecl 0x56283d0ce8a8 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56283d0ce8e0 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d0ced88 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56283d0ced88
| `-ParmVarDecl 0x56283d0cee98 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56283d0cef38 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56283d0cef38
| `-ParmVarDecl 0x56283d0cf048 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56283d116748 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56283d4a96f0 <col:7>
|-CXXConstructorDecl 0x56283d116820 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56283d116820
| `-ParmVarDecl 0x56283d116938 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56283d1169a8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56283d1169a8
| `-ParmVarDecl 0x56283d116ab8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56283d4ac060 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NotifierSignal::vmpair
         0 |   class atomic_uint32_t * value
         8 |   uint32_t mask
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d57d568 <../dummy_inc/click/notifier.hh:50:5, line:53:5> line:50:12 referenced struct vmpair definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d57d688 <col:5, col:12> col:12 implicit struct vmpair
|-FieldDecl 0x56283d57d728 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
|-FieldDecl 0x56283d57d788 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x56283d588348 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x56283d588348

Layout: <CGRecordLayout
  LLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  NonVirtualBaseLLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d57d7f0 <../dummy_inc/click/notifier.hh:54:5, line:57:5> line:54:11 referenced union vmvalue definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d57d908 <col:5, col:11> col:11 implicit union vmvalue
|-FieldDecl 0x56283d57d9a8 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
|-FieldDecl 0x56283d57da38 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
|-CXXConstructorDecl 0x56283d586ee0 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56283d587318 <col:11>
|-CXXConstructorDecl 0x56283d586fe8 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x56283d586fe8
| `-ParmVarDecl 0x56283d5870f8 <col:11> col:11 'const NotifierSignal::vmvalue &'
|-CXXConstructorDecl 0x56283d587198 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x56283d587198
| `-ParmVarDecl 0x56283d5872a8 <col:11> col:11 'NotifierSignal::vmvalue &&'
`-CXXDestructorDecl 0x56283d588010 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.NotifierSignal::vmvalue" = type { %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d57b4a0 prev 0x56283d4d5560 <../dummy_inc/click/notifier.hh:12:1, line:71:1> line:12:7 referenced class NotifierSignal definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d57b598 <col:1, col:7> col:7 implicit referenced class NotifierSignal
|-AccessSpecDecl 0x56283d57b628 <line:13:3, col:9> col:3 public
|-TypedefDecl 0x56283d57b758 <line:14:5, col:61> col:36 referenced unspecified_bool_type 'bool (NotifierSignal::*)() const'
| `-MemberPointerType 0x56283d57b6d0 'bool (NotifierSignal::*)() const'
|   |-RecordType 0x56283d4d55f0 'NotifierSignal'
|   | `-CXXRecord 0x56283d57b4a0 'NotifierSignal'
|   `-ParenType 0x56283d57b670 'bool () const' sugar
|     `-FunctionProtoType 0x56283cf56840 'bool () const' const cdecl
|       `-BuiltinType 0x56283ceab2f0 'bool'
|-CXXConstructorDecl 0x56283d57b7e8 <line:16:5, col:27> col:12 used NotifierSignal 'void ()' inline
|-CXXConstructorDecl 0x56283d57ba28 <line:17:5, col:64> col:12 used NotifierSignal 'void (atomic_uint32_t *, uint32_t)' inline
| |-ParmVarDecl 0x56283d57b8a0 <col:27, col:44> col:44 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x56283d57b918 <col:51, col:60> col:60 mask 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56283d57bbd8 <line:18:5, col:50> col:12 used NotifierSignal 'void (const NotifierSignal &)' inline
| `-ParmVarDecl 0x56283d57bb18 <col:27, col:49> col:49 x 'const NotifierSignal &'
|-CXXDestructorDecl 0x56283d57bcd0 <line:19:5, col:28> col:12 used ~NotifierSignal 'void () noexcept' inline
|-CXXMethodDecl 0x56283d57bdf8 <line:21:5, col:46> col:34 idle_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56283d57beb8 <line:22:5, col:46> col:34 busy_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56283d57bf78 <line:23:5, col:53> col:34 overderived_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56283d57c038 <line:24:5, col:55> col:34 used uninitialized_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56283d57c128 <line:26:5, col:26> col:17 used active 'bool () const' inline
|-CXXConversionDecl 0x56283d57c298 <line:27:5, col:45> col:12 operator bool (NotifierSignal::*)() const 'NotifierSignal::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56283d57c418 <line:29:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x56283d57c358 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x56283d57c4e0 <line:31:5, col:24> col:17 idle 'bool () const' inline
|-CXXMethodDecl 0x56283d57c5a0 <line:32:5, col:24> col:17 busy 'bool () const' inline
|-CXXMethodDecl 0x56283d57c660 <line:33:5, col:31> col:17 overderived 'bool () const' inline
|-CXXMethodDecl 0x56283d57c720 <line:34:5, col:31> col:17 used initialized 'bool () const' inline
|-FriendDecl 0x56283d57c9d8 <line:36:5, col:76> col:17
| `-FunctionDecl 0x56283d57c918 parent 0x56283ceab278 <col:5, col:76> col:17 used operator== 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x56283d57c7d0 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x56283d57c848 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-FriendDecl 0x56283d57cbf8 <line:37:5, col:76> col:17
| `-FunctionDecl 0x56283d57cb38 parent 0x56283ceab278 <col:5, col:76> col:17 operator!= 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x56283d57ca28 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x56283d57caa0 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-CXXMethodDecl 0x56283d57cd38 <line:39:5, col:54> col:21 operator= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x56283d57cc48 <col:31, col:53> col:53 x 'const NotifierSignal &'
|-CXXMethodDecl 0x56283d57ce80 <line:40:5, col:55> col:21 used operator+= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x56283d57cdf0 <col:32, col:54> col:54 x 'const NotifierSignal &'
|-FriendDecl 0x56283d57d148 <line:41:5, col:78> col:27
| `-FunctionDecl 0x56283d57d088 parent 0x56283ceab278 <col:5, col:78> col:27 operator+ 'NotifierSignal (NotifierSignal, const NotifierSignal &)'
|   |-ParmVarDecl 0x56283d57cf38 <col:37, col:52> col:52 a 'NotifierSignal' destroyed
|   `-ParmVarDecl 0x56283d57cfb0 <col:55, col:77> col:77 b 'const NotifierSignal &'
|-CXXMethodDecl 0x56283d57d258 <line:43:5, col:39> col:17 used swap 'void (NotifierSignal &)' inline
| `-ParmVarDecl 0x56283d57d198 <col:22, col:38> col:38 x 'NotifierSignal &'
|-CXXMethodDecl 0x56283d57d3d8 <line:45:5, col:36> col:12 unparse 'String (Router *) const'
| `-ParmVarDecl 0x56283d57d310 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x56283d57d4a0 <line:47:5, col:35> col:17 static_initialize 'void ()' static
|-AccessSpecDecl 0x56283d57d540 <line:49:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d57d568 <line:50:5, line:53:5> line:50:12 referenced struct vmpair definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d57d688 <col:5, col:12> col:12 implicit struct vmpair
| |-FieldDecl 0x56283d57d728 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
| |-FieldDecl 0x56283d57d788 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x56283d588348 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x56283d588348
|-CXXRecordDecl 0x56283d57d7f0 <line:54:5, line:57:5> line:54:11 referenced union vmvalue definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d57d908 <col:5, col:11> col:11 implicit union vmvalue
| |-FieldDecl 0x56283d57d9a8 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
| |-FieldDecl 0x56283d57da38 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
| |-CXXConstructorDecl 0x56283d586ee0 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56283d587318 <col:11>
| |-CXXConstructorDecl 0x56283d586fe8 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x56283d586fe8
| | `-ParmVarDecl 0x56283d5870f8 <col:11> col:11 'const NotifierSignal::vmvalue &'
| |-CXXConstructorDecl 0x56283d587198 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x56283d587198
| | `-ParmVarDecl 0x56283d5872a8 <col:11> col:11 'NotifierSignal::vmvalue &&'
| `-CXXDestructorDecl 0x56283d588010 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial
|-FieldDecl 0x56283d57dab0 <line:59:5, col:13> col:13 referenced _v 'NotifierSignal::vmvalue'
|-FieldDecl 0x56283d57db10 <line:60:5, col:14> col:14 referenced _mask 'uint32_t':'unsigned int'
|-EnumDecl 0x56283d57db60 <line:62:5, line:65:5> line:62:5
| |-EnumConstantDecl 0x56283d57dc60 <line:63:2, col:14> col:2 referenced true_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x56283d57de60 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d57dc40 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56283d57dc20 <col:14> 'int' 1
| |-EnumConstantDecl 0x56283d57dcf0 <col:17, col:30> col:17 referenced false_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x56283d57de78 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d57dcd0 <col:30> 'int' Int: 2
| |     `-IntegerLiteral 0x56283d57dcb0 <col:30> 'int' 2
| |-EnumConstantDecl 0x56283d57dd80 <col:33, col:52> col:33 referenced overderived_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x56283d57de90 <col:52> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d57dd60 <col:52> 'int' Int: 4
| |     `-IntegerLiteral 0x56283d57dd40 <col:52> 'int' 4
| `-EnumConstantDecl 0x56283d57de10 <line:64:2, col:23> col:2 referenced uninitialized_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
|   `-ImplicitCastExpr 0x56283d57dea8 <col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d57ddf0 <col:23> 'int' Int: 8
|       `-IntegerLiteral 0x56283d57ddd0 <col:23> 'int' 8
|-VarDecl 0x56283d57ded0 <line:66:5, col:28> col:28 used static_value 'atomic_uint32_t' static
|-CXXMethodDecl 0x56283d57dfd8 <line:68:5, col:48> col:10 used hard_assign_vm 'void (const NotifierSignal &)'
| `-ParmVarDecl 0x56283d57df48 <col:25, col:47> col:47 x 'const NotifierSignal &'
|-CXXMethodDecl 0x56283d57e1a0 <line:69:5, col:63> col:10 hard_derive_one 'void (atomic_uint32_t *, uint32_t)'
| |-ParmVarDecl 0x56283d57e090 <col:26, col:43> col:43 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x56283d57e108 <col:50, col:59> col:59 mask 'uint32_t':'unsigned int'
`-CXXMethodDecl 0x56283d57e3d8 <line:70:5, col:61> col:17 used hard_equals 'bool (const NotifierSignal::vmpair *, const NotifierSignal::vmpair *)' static
  |-ParmVarDecl 0x56283d57e288 <col:29, col:43> col:43 a 'const NotifierSignal::vmpair *'
  `-ParmVarDecl 0x56283d57e300 <col:46, col:60> col:60 b 'const NotifierSignal::vmpair *'

Layout: <CGRecordLayout
  LLVMType:%class.NotifierSignal = type <{ %"union.NotifierSignal::vmvalue", i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.NotifierSignal.base = type <{ %"union.NotifierSignal::vmvalue", i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d57e488 <../dummy_inc/click/notifier.hh:73:1, line:130:1> line:73:7 referenced class Notifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x56283d57e5a8 <col:1, col:7> col:7 implicit referenced class Notifier
|-AccessSpecDecl 0x56283d57e638 <col:18, col:24> col:18 public
|-EnumDecl 0x56283d57e660 <line:75:5, col:76> col:10 referenced SearchOp
| |-EnumConstantDecl 0x56283d57e760 <col:21, col:35> col:21 referenced SEARCH_STOP 'Notifier::SearchOp'
| | `-ImplicitCastExpr 0x56283d57e850 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d57e740 <col:35> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d57e720 <col:35> 'int' 0
| |-EnumConstantDecl 0x56283d57e7b0 <col:38> col:38 SEARCH_CONTINUE 'Notifier::SearchOp'
| `-EnumConstantDecl 0x56283d57e800 <col:55> col:55 referenced SEARCH_CONTINUE_WAKE 'Notifier::SearchOp'
|-TypedefDecl 0x56283d57ea98 <line:76:5, col:53> col:20 referenced callback_type 'void (*)(void *, Notifier *)'
| `-PointerType 0x56283d57ea30 'void (*)(void *, Notifier *)'
|   `-ParenType 0x56283d57e9d0 'void (void *, Notifier *)' sugar
|     `-FunctionProtoType 0x56283d57e990 'void (void *, Notifier *)' cdecl
|       |-BuiltinType 0x56283ceab2d0 'void'
|       |-PointerType 0x56283ceabad0 'void *'
|       | `-BuiltinType 0x56283ceab2d0 'void'
|       `-PointerType 0x56283d57e8f0 'Notifier *'
|         `-RecordType 0x56283d57e520 'Notifier'
|           `-CXXRecord 0x56283d57e488 'Notifier'
|-CXXConstructorDecl 0x56283d57ebd8 <line:78:5, col:46> col:12 Notifier 'void (Notifier::SearchOp)' inline
| `-ParmVarDecl 0x56283d57eb00 <col:21, col:35> col:30 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x56283d5850e8 <col:35> 'Notifier::SearchOp' EnumConstant 0x56283d57e760 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXConstructorDecl 0x56283d57ede8 <line:79:5, col:76> col:12 Notifier 'void (const NotifierSignal &, Notifier::SearchOp)' inline
| |-ParmVarDecl 0x56283d57ec98 <col:21, col:43> col:43 signal 'const NotifierSignal &'
| `-ParmVarDecl 0x56283d57ed10 <col:51, col:65> col:60 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x56283d585108 <col:65> 'Notifier::SearchOp' EnumConstant 0x56283d57e760 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x56283d57eee8 <line:80:5, col:23> col:13 ~Notifier 'void () noexcept' virtual
|-CXXMethodDecl 0x56283d57f018 <line:83:5, line:85:5> line:83:17 initialized 'bool () const' inline
| `-CompoundStmt 0x56283d5851c8 <col:37, line:85:5>
|   `-ReturnStmt 0x56283d5851b8 <line:84:2, col:29>
|     `-CXXMemberCallExpr 0x56283d585198 <col:9, col:29> 'bool'
|       `-MemberExpr 0x56283d585168 <col:9, col:17> '<bound member function type>' .initialized 0x56283d57c720
|         `-MemberExpr 0x56283d585138 <col:9> 'const NotifierSignal' lvalue ->_signal 0x56283d584b08
|           `-CXXThisExpr 0x56283d585128 <col:9> 'const Notifier *' implicit this
|-CXXMethodDecl 0x56283d57f220 <line:87:5, col:52> col:9 initialize 'int (const char *, Router *)'
| |-ParmVarDecl 0x56283d57f0d0 <col:20, col:32> col:32 name 'const char *'
| `-ParmVarDecl 0x56283d57f148 <col:38, col:46> col:46 router 'Router *'
|-CXXMethodDecl 0x56283d57f318 <line:89:5, col:43> col:34 signal 'const NotifierSignal &() const' inline
|-CXXMethodDecl 0x56283d57f408 <line:90:5, col:33> col:21 search_op 'Notifier::SearchOp () const' inline
|-CXXMethodDecl 0x56283d57f4c8 <line:92:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x56283d581b80 <line:94:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x56283d581af0 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x56283d581c48 <line:95:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x56283d581d08 <line:96:5, col:23> col:17 sleep 'void ()' inline
|-CXXMethodDecl 0x56283d581f80 <line:98:5, col:71> col:17 used add_activate_callback 'int (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x56283d581de0 <col:39, col:53> col:53 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d581e60 <col:56, col:62> col:62 user_data 'void *'
|-CXXMethodDecl 0x56283d5821d8 <line:99:5, col:75> col:18 used remove_activate_callback 'void (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x56283d582040 <col:43, col:57> col:57 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d5820c0 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x56283d582360 <line:100:5, col:39> col:16 add_listener 'int (Task *)' inline
| `-ParmVarDecl 0x56283d582298 <col:29, col:35> col:35 task 'Task *'
|-CXXMethodDecl 0x56283d5824a8 <line:101:5, col:43> col:17 remove_listener 'void (Task *)' inline
| `-ParmVarDecl 0x56283d582418 <col:33, col:39> col:39 task 'Task *'
|-CXXMethodDecl 0x56283d582630 <line:102:5, col:59> col:16 add_dependent_signal 'int (NotifierSignal *)' inline
| `-ParmVarDecl 0x56283d582560 <col:37, col:53> col:53 signal 'NotifierSignal *'
|-CXXMethodDecl 0x56283d5827a8 <line:103:5, col:63> col:17 remove_dependent_signal 'void (NotifierSignal *)' inline
| `-ParmVarDecl 0x56283d5826e8 <col:41, col:57> col:57 signal 'NotifierSignal *'
|-VarDecl 0x56283d582870 <line:105:5, col:38> col:23 EMPTY_NOTIFIER 'const char []' static
|-VarDecl 0x56283d5828f8 <line:106:5, col:37> col:23 FULL_NOTIFIER 'const char []' static
|-CXXMethodDecl 0x56283d582ac8 <line:108:5, col:76> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x56283d582970 <col:56, col:65> col:65 e 'Element *'
| `-ParmVarDecl 0x56283d5829f0 <col:68, col:72> col:72 port 'int'
|-CXXMethodDecl 0x56283d582d68 <line:109:5, col:88> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x56283d582b88 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56283d582c08 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x56283d582c80 <col:78, col:84> col:84 task 'Task *'
|-CXXMethodDecl 0x56283d583008 <line:110:5, col:106> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x56283d582e30 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56283d582eb0 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x56283d582f28 <col:78, col:88> col:88 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x56283d583388 <line:111:5, col:103> col:27 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x56283d5830d0 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x56283d583150 <col:61, col:65> col:65 port 'int'
| |-ParmVarDecl 0x56283d5831c8 <col:71, col:85> col:85 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d583248 <col:88, col:94> col:94 user_data 'void *'
|-CXXMethodDecl 0x56283d583570 <line:113:5, col:77> col:34 used downstream_full_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x56283d583458 <col:57, col:66> col:66 e 'Element *'
| `-ParmVarDecl 0x56283d5834d8 <col:69, col:73> col:73 port 'int'
|-CXXMethodDecl 0x56283d5837c8 <line:114:5, col:89> col:34 downstream_full_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x56283d583630 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56283d5836b0 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x56283d583728 <col:79, col:85> col:85 task 'Task *'
|-CXXMethodDecl 0x56283d583a28 <line:115:5, col:107> col:34 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x56283d583890 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56283d583910 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x56283d583988 <col:79, col:89> col:89 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x56283d583d10 <line:116:5, col:104> col:27 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x56283d583af0 <col:50, col:59> col:59 e 'Element *'
| |-ParmVarDecl 0x56283d583b70 <col:62, col:66> col:66 port 'int'
| |-ParmVarDecl 0x56283d583be8 <col:72, col:86> col:86 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d583c68 <col:89, col:95> col:95 user_data 'void *'
|-CXXMethodDecl 0x56283d583fc8 <line:118:5, col:109> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x56283d583de0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56283d583e60 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x56283d583ee0 <col:78> col:81 'int'
| `-DeprecatedAttr 0x56283d584080 <col:98> "" ""
|-CXXMethodDecl 0x56283d584368 <line:119:5, col:121> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x56283d584100 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56283d584180 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x56283d584200 <col:78> col:81 'int'
| |-ParmVarDecl 0x56283d584278 <col:83, col:92> col:93 'Notifier *'
| `-DeprecatedAttr 0x56283d584428 <col:110> "" ""
|-CXXMethodDecl 0x56283d584648 <line:120:5, col:110> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x56283d5844a8 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56283d584528 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x56283d5845a8 <col:79> col:82 'int'
| `-DeprecatedAttr 0x56283d584700 <col:99> "" ""
|-CXXMethodDecl 0x56283d5849a0 <line:121:5, col:122> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x56283d584780 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56283d584800 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x56283d584880 <col:79> col:82 'int'
| |-ParmVarDecl 0x56283d5848f8 <col:84, col:93> col:94 'Notifier *'
| `-DeprecatedAttr 0x56283d584a60 <col:111> "" ""
|-AccessSpecDecl 0x56283d584ad0 <line:123:3, col:10> col:3 private
|-FieldDecl 0x56283d584b08 <line:125:5, col:20> col:20 referenced _signal 'NotifierSignal'
|-FieldDecl 0x56283d584b68 <line:126:5, col:14> col:14 referenced _search_op 'Notifier::SearchOp'
|-CXXMethodDecl 0x56283d584ce0 <line:128:5, col:61> col:17 used dependent_signal_callback 'void (void *, Notifier *)' static
| |-ParmVarDecl 0x56283d584bd0 <col:43, col:48> col:49 'void *'
| `-ParmVarDecl 0x56283d584c48 <col:51, col:60> col:61 'Notifier *'
|-CXXConstructorDecl 0x56283d584db8 <line:73:7> col:7 implicit Notifier 'void (const Notifier &)' inline default noexcept-unevaluated 0x56283d584db8
| `-ParmVarDecl 0x56283d584ec8 <col:7> col:7 'const Notifier &'
`-CXXMethodDecl 0x56283d584f68 <col:7> col:7 implicit operator= 'Notifier &(const Notifier &)' inline default noexcept-unevaluated 0x56283d584f68
  `-ParmVarDecl 0x56283d585078 <col:7> col:7 'const Notifier &'

Layout: <CGRecordLayout
  LLVMType:%class.Notifier = type <{ i32 (...)**, %class.NotifierSignal, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Notifier.base = type <{ i32 (...)**, %class.NotifierSignal, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ActiveNotifier
         0 |   class Notifier (primary base)
         0 |     (Notifier vtable pointer)
         8 |     class NotifierSignal _signal
         8 |       union NotifierSignal::vmvalue _v
         8 |         class atomic_uint32_t * v1
         8 |         struct NotifierSignal::vmpair * vm
        16 |       uint32_t _mask
        24 |     enum Notifier::SearchOp _search_op
        32 |   class Task * _listener1
        40 |   ActiveNotifier::task_or_signal_t * _listeners
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4fce70 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d4fcf88 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x56283d4fd058 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x56283d4fd0b8 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x56283d4fd120 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x56283d4fd1a8 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x56283d4fd410 <col:16, line:46:5>
|   |-BinaryOperator 0x56283d4fd358 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x56283d4fd278 <col:9> 'TaskLink *' lvalue ->_prev 0x56283d4fd058
|   | | `-CXXThisExpr 0x56283d4fd268 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x56283d4fd340 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x56283d4fd320 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x56283d4fd2b8 <col:17> 'TaskLink *' lvalue ->_next 0x56283d4fd0b8
|   |     | `-CXXThisExpr 0x56283d4fd2a8 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x56283d4fd308 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x56283d4fd2e8 <col:25> 'int' 0
|   `-BinaryOperator 0x56283d4fd3f0 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x56283d4fd388 <col:9> 'unsigned int' lvalue ->_pass 0x56283d4fd120
|     | `-CXXThisExpr 0x56283d4fd378 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x56283d4fd3d8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56283d4fd3b8 <col:17> 'int' 0
|-CXXConstructorDecl 0x56283d56ebe8 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x56283d56ebe8
| `-ParmVarDecl 0x56283d56ecf8 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x56283d56ed98 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x56283d56ed98
| `-ParmVarDecl 0x56283d56eea8 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x56283d56f098 <col:8> col:8 implicit ~TaskLink 'void ()' inline default trivial noexcept-unevaluated 0x56283d56f098
|-CXXMethodDecl 0x56283d56f898 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x56283d56f898
| `-ParmVarDecl 0x56283d56f9a8 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x56283d56fa18 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x56283d56fa18
  `-ParmVarDecl 0x56283d56fb28 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d510df8 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56283d510f28 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x56283d510f88 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x56283d510fe8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x56283d575da8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x56283d575e80 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x56283d575e80
|-CXXConstructorDecl 0x56283d576138 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x56283d576138
| `-ParmVarDecl 0x56283d576248 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x56283d5762e8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x56283d5762e8
  `-ParmVarDecl 0x56283d5763f8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d510c50 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56283d510d68 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x56283d510df8 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56283d510f28 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x56283d510f88 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x56283d510fe8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x56283d575da8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x56283d575e80 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x56283d575e80
| |-CXXConstructorDecl 0x56283d576138 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x56283d576138
| | `-ParmVarDecl 0x56283d576248 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x56283d5762e8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x56283d5762e8
|   `-ParmVarDecl 0x56283d5763f8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x56283d5110a8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x56283d511108 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x56283d5110a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x56283d510f28 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x56283d511160 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x56283d5110a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x56283d510f88 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x56283d5111b8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x56283d5110a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x56283d510fe8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x56283d511210 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56283d575cb8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56283d577668 <col:11>
|-CXXConstructorDecl 0x56283d575f88 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x56283d575f88
| `-ParmVarDecl 0x56283d576098 <col:11> col:11 'const Task::Status &'
`-CXXConstructorDecl 0x56283d576498 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x56283d576498
  `-ParmVarDecl 0x56283d5775f8 <col:11> col:11 'Task::Status &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d3de220 prev 0x56283d2c4d50 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d3de318 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x56283d3de3b8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x56283d3e3458 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56283d3e3838 <col:11>
|-CXXConstructorDecl 0x56283d3e3530 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d3e3618 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56283d3e3f80 <col:11>
|-CXXConstructorDecl 0x56283d3e36b8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d3e37c8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x56283d3e5bd8 <col:11>
|-CXXDestructorDecl 0x56283d3e4ae8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56283d4b0568 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d4b0678 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56283d4b0f40 <col:11>
|   `-ReturnStmt 0x56283d4b0f30 <col:11>
|     `-UnaryOperator 0x56283d4b0f18 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d4b0f08 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x56283d4b06e8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56283d4b07f8 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x56283d4fb170 <col:11>
    `-ReturnStmt 0x56283d4fb160 <col:11>
      `-UnaryOperator 0x56283d4fb148 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56283d4fb138 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d3cb6e8 prev 0x56283d3cb450 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d3cb7e0 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x56283d3cb870 <col:19, col:25> col:19 public
|-TypedefDecl 0x56283d3cb8a8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x56283d003f50 'int32_t' sugar
|   |-Typedef 0x56283cf14268 'int32_t'
|   `-TypedefType 0x56283ceed3b0 '__int32_t' sugar
|     |-Typedef 0x56283ceecfc8 '__int32_t'
|     `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d3cb910 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x56283d004110 'int64_t' sugar
|   |-Typedef 0x56283cf142d0 'int64_t'
|   `-TypedefType 0x56283ceed4d0 '__int64_t' sugar
|     |-Typedef 0x56283ceed0a8 '__int64_t'
|     `-BuiltinType 0x56283ceab390 'long'
|-EnumDecl 0x56283d3cb968 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x56283d3cbae0 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x56283d3cbac0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x56283d3cba98 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x56283d3cba80 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x56283d3cba50 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x56283d3cbbd8 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x56283d3cbbb8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x56283d3cbb90 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x56283d3cbb78 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x56283d3cbb50 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x56283d3cbb30 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x56283d3cbc28 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x56283d3cbd30 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4aa0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3cbd10 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x56283d3cbcf0 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x56283d3cbdc0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4ab8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3cbda0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x56283d3cbd80 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x56283d3cbe50 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4ad0 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3cbe30 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x56283d3cbe10 <col:25> 'int' 1000
| |-EnumConstantDecl 0x56283d3cbee0 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4ae8 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3cbec0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x56283d3cbea0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x56283d3cbf70 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4b00 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3cbf50 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x56283d3cbf30 <col:25> 'int' 1000
| |-EnumConstantDecl 0x56283d3cc000 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4b18 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3cbfe0 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x56283d3cbfc0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x56283d2c48b0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4b30 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d2c4890 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x56283d3cc050 <col:26> 'int' EnumConstant 0x56283d3cbd30 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x56283d2c4980 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56283d2c4b48 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d2c4960 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x56283d2c4940 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x56283d2c4900 <col:27> 'int' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x56283d2c4920 <col:44> 'int' EnumConstant 0x56283d3cc000 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x56283d2c4a50 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x56283d2c4b60 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d2c4a30 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x56283d2c4a10 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x56283d2c49d0 <col:27> 'int' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x56283d2c49f0 <col:44> 'int' EnumConstant 0x56283d3cbee0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x56283d2c4b78 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x56283d2c4c80 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x56283d2c4cd0 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d2c4c60 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x56283d2c4c40 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x56283d2c4cf8 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x56283d003b80 'uninitialized_type'
|   `-CXXRecord 0x56283d003ae8 'uninitialized_type'
|-CXXRecordDecl 0x56283d2c4d50 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x56283d2c4e38 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e3848 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d3e3968 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x56283d3e3920 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x56283d3e38b0 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3e38a0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x56283d3e38e0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x56283d3e3950 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56283d3e3900 <col:19> 'int' 0
|-CXXConstructorDecl 0x56283d2c5088 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x56283d2c4ef8 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x56283d2c4f70 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56283d3e32f0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56283d3e32d0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e3980 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d3e3ad0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x56283d3e3a58 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x56283d3e39e8 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3e39d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56283d3e3aa0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56283d3e3a88 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x56283d3e3a18 <col:16> 'long' lvalue ParmVar 0x56283d2c4ef8 'sec' 'long'
|     `-ImplicitCastExpr 0x56283d3e3ab8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56283d3e3a38 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c4f70 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56283d2c52e8 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56283d2c5158 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x56283d2c51d0 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56283d3e3328 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56283d3e3308 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e3ae8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d3e3c20 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x56283d3e3bc0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x56283d3e3b50 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3e3b40 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56283d3e3bf0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d3e3b80 <col:16> 'int' lvalue ParmVar 0x56283d2c5158 'sec' 'int'
|     `-ImplicitCastExpr 0x56283d3e3c08 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56283d3e3ba0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c51d0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56283d2c5548 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x56283d2c53b8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x56283d2c5430 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56283d3e3360 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56283d3e3340 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e3c38 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d3e3d88 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x56283d3e3d10 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x56283d3e3ca0 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3e3c90 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56283d3e3d58 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56283d3e3d40 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x56283d3e3cd0 <col:16> 'unsigned long' lvalue ParmVar 0x56283d2c53b8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x56283d3e3d70 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56283d3e3cf0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c5430 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56283d2c57a8 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x56283d2c5618 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x56283d2c5690 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56283d3e3398 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56283d3e3378 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e3da0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d3e3ef0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x56283d3e3e78 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x56283d3e3e08 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3e3df8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56283d3e3ec0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56283d3e3ea8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56283d3e3e38 <col:16> 'unsigned int' lvalue ParmVar 0x56283d2c5618 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x56283d3e3ed8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56283d3e3e58 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c5690 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56283d2c5908 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x56283d2c5878 <col:31> col:37 'double'
|-CXXConstructorDecl 0x56283d2c5aa8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x56283d2c59e0 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x56283d2c5cd8 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x56283d2c5be0 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x56283d2c5e88 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x56283d2c5dc8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e3f90 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x56283d3e3f08 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x56283d2c5dc8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56283d3e3ff0 <col:19, line:214:5>
|-CXXConstructorDecl 0x56283d2c60b8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x56283d2c5fc8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e4000 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d3e40b0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x56283d3e4088 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x56283d3e4058 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x56283d2c5fc8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x56283d2c62a8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x56283d2c6220 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x56283d224050 'Timestamp'
|   | `-CXXRecord 0x56283d3cb6e8 'Timestamp'
|   `-ParenType 0x56283d2c61c0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x56283d2c6190 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x56283d3cba30 'Timestamp::seconds_type' sugar
|         |-Typedef 0x56283d3cb8a8 'seconds_type'
|         `-TypedefType 0x56283d003f50 'int32_t' sugar
|           |-Typedef 0x56283cf14268 'int32_t'
|           `-TypedefType 0x56283ceed3b0 '__int32_t' sugar
|             |-Typedef 0x56283ceecfc8 '__int32_t'
|             `-BuiltinType 0x56283ceab370 'int'
|-CXXConversionDecl 0x56283d2c63e8 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56283d2c64b8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x56283d3e41b8 <col:37, line:231:5>
|   `-ReturnStmt 0x56283d3e41a8 <line:227:9, col:23>
|     `-BinaryOperator 0x56283d3e4188 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x56283d3e4158 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56283d3e4108 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56283d3de3b8
|       |   `-MemberExpr 0x56283d3e40d8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56283d3df368
|       |     `-CXXThisExpr 0x56283d3e40c8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56283d3e4170 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x56283d3e4138 <col:23> 'int' 0
|-CXXMethodDecl 0x56283d2c6578 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x56283d2c6638 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d2c66f8 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d2c67b8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d2c6878 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d2c69e8 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x56283d2c6928 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x56283d2c6b30 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x56283d2c6aa0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d2c6bf8 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56283d2c6c98 <col:54> "" ""
|-CXXMethodDecl 0x56283d2c6d28 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56283d2c6dc8 <col:54> "" ""
|-CXXMethodDecl 0x56283d2c6e58 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56283d2c6ef8 <col:54> "" ""
|-CXXMethodDecl 0x56283d2c6ff8 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x56283d2c70c8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x56283d2c71f8 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x56283d2c72f0 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x56283d2c7428 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56283d3e43d0 <col:39, line:271:5>
|   `-ReturnStmt 0x56283d3e43c0 <line:267:9, col:61>
|     `-CallExpr 0x56283d3e4360 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x56283d3e4348 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d3e41d0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56283d3df698 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x56283d3e4390 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56283d3e4230 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56283d3de3b8
|       |   `-MemberExpr 0x56283d3e4200 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56283d3df368
|       |     `-CXXThisExpr 0x56283d3e41f0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56283d3e43a8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x56283d3e42d0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x56283d3e42a0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x56283d3e4260 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x56283d3e42b8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x56283d3e4280 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cc000 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d2c74e8 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56283d3e4590 <col:39, line:279:5>
|   `-ReturnStmt 0x56283d3e4580 <line:275:9, col:61>
|     `-CallExpr 0x56283d3e4520 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x56283d3e4508 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d3e43e8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56283d3df698 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x56283d3e4550 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56283d3e4448 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56283d3de3b8
|       |   `-MemberExpr 0x56283d3e4418 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56283d3df368
|       |     `-CXXThisExpr 0x56283d3e4408 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56283d3e4568 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x56283d3e44e8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x56283d3e44b8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x56283d3e4478 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x56283d3e44d0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x56283d3e4498 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbee0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d2c75a8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56283d3e4728 <col:39, line:287:5>
|   `-ReturnStmt 0x56283d3e4718 <line:283:9, col:53>
|     `-BinaryOperator 0x56283d3e46f8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x56283d3e46c8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56283d3e45e8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56283d3de3b8
|       |   `-MemberExpr 0x56283d3e45b8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56283d3df368
|       |     `-CXXThisExpr 0x56283d3e45a8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56283d3e46e0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x56283d3e46a8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56283d3e4688 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3e4658 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3e4618 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbd30 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3e4670 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3e4638 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d2c7698 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56283d3e5dc0 <col:40, line:293:5>
|   |-DeclStmt 0x56283d3e4870 <line:291:9, col:48>
|   | `-VarDecl 0x56283d3e4750 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x56283d3e4850 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x56283d3e47f8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x56283d3e47c8 <col:22> '<bound member function type>' ->subsec 0x56283d2c6638
|   |     |   `-CXXThisExpr 0x56283d3e47b8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x56283d3e4838 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x56283d3e4818 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c4980 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56283d3e5db0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x56283d3e5d98 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3e5d68 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3e5d50 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x56283d3e5d30 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x56283d3e5d00 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x56283d3e5a98 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x56283d3e5a80 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x56283d3e4888 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x56283d3e4750 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x56283d3e5ca0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x56283d3e5c88 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x56283d3e5c58 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x56283d3e5ab0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x56283d3e5a20 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x56283d3e5a08 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x56283d3e59b8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56283d3cb638 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x56283d3e5958 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x56283d3e48b8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x56283d3e48a8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x56283d3e59a0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x56283d3e5988 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x56283d3e4d78 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x56283d3e48e0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x56283d3e4970 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x56283d3e4940 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x56283d3e4900 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c4980 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x56283d3e4958 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x56283d3e4920 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x56283d3e4750 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x56283d3e5cd0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x56283d3e5a68 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x56283d3e5a58 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56283d2c7758 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56283d3e6318 <col:40, line:302:5>
|   |-DeclStmt 0x56283d3e5f10 <line:297:9, col:48>
|   | `-VarDecl 0x56283d3e5df0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x56283d3e5ef0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x56283d3e5e98 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x56283d3e5e68 <col:22> '<bound member function type>' ->subsec 0x56283d2c6638
|   |     |   `-CXXThisExpr 0x56283d3e5e58 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x56283d3e5ed8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x56283d3e5eb8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c4a50 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56283d3e6308 <line:298:9, col:70>
|     `-ExprWithCleanups 0x56283d3e62f0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3e62c0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3e62a8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x56283d3e6288 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x56283d3e6258 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x56283d3e6180 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x56283d3e6168 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x56283d3e5f28 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x56283d3e5df0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x56283d3e61f8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x56283d3e61e0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x56283d3e61b0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x56283d3e6198 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x56283d3e6108 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x56283d3e60f0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x56283d3e60d0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56283d3cb638 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x56283d3e6070 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x56283d3e5f58 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x56283d3e5f48 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x56283d3e60b8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x56283d3e60a0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x56283d3e6030 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x56283d3e5f80 <col:39> 'int' 0
|               |               `-BinaryOperator 0x56283d3e6010 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x56283d3e5fe0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x56283d3e5fa0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c4a50 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x56283d3e5ff8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x56283d3e5fc0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x56283d3e5df0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x56283d3e6228 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x56283d3e6150 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x56283d3e6140 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56283d2c7818 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56283d3e63a0 <col:40, line:306:5>
|   `-ReturnStmt 0x56283d3e6390 <line:305:9, col:17>
|     `-CXXConstructExpr 0x56283d3e6360 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x56283d3e6348 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d3e6338 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x56283d2c79b8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x56283d2c78c8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x56283d2c7b88 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x56283d2c7a90 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x56283d2c7c78 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x56283d2c7de8 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x56283d2c7d28 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x56283d3f09b8 <col:56, line:320:5>
|   `-ReturnStmt 0x56283d3f09a8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x56283d3f0990 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3e6490 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3e6478 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56283d3e6438 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56283d3e6408 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56283d3e63c8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d2c7d28 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x56283d3e6420 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56283d3e63e8 <col:31> 'int' 0
|-CXXMethodDecl 0x56283d2c8028 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56283d2c7ea0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d2c7f18 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f0b88 <col:72, line:326:5>
|   `-ReturnStmt 0x56283d3f0b78 <line:325:9, col:51>
|     `-ExprWithCleanups 0x56283d3f0b60 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3f0b30 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3f0b18 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56283d3f0ad8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56283d3f0ac0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56283d3f09e0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d2c7ea0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56283d3f0a80 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56283d3f0a68 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56283d3f0a00 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56283d3ddb10 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56283d3f0aa8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56283d3f0a20 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c7f18 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d2c81d8 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56283d2c80e8 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56283d3f1250 <col:56, line:337:5>
|   |-DeclStmt 0x56283d3f0e88 <line:329:9, col:51>
|   | `-VarDecl 0x56283d3f0bb0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56283d3f0e70 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56283d3f0e40 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56283d3f0e28 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56283d3f0e10 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56283d3f0de0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56283d3f0dc8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56283d3f0db0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56283d3f0ca0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56283d3f1040 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56283d3f0ef0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56283d3de3b8
|   | | `-MemberExpr 0x56283d3f0ec0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56283d3df368
|   | |   `-DeclRefExpr 0x56283d3f0ea0 <col:9> 'Timestamp' lvalue Var 0x56283d3f0bb0 't' 'Timestamp'
|   | `-BinaryOperator 0x56283d3f1020 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56283d3f0ff0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56283d3f0f20 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56283d2c80e8 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56283d3f1008 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56283d3f0fd0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56283d3f0fb0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56283d3f0f80 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56283d3f0f40 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56283d3f0f98 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56283d3f0f60 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cc000 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56283d3f1238 <line:336:9, col:16>
|     `-CXXConstructExpr 0x56283d3f1208 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56283d3f11f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56283d3f11d0 <col:16> 'Timestamp' lvalue Var 0x56283d3f0bb0 't' 'Timestamp'
|-CXXMethodDecl 0x56283d2c83a0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56283d2c8290 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d2c8308 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f1408 <col:72, line:343:5>
|   `-ReturnStmt 0x56283d3f13f8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x56283d3f13e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3f13b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3f1398 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56283d3f1358 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56283d3f1340 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56283d3f1288 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d2c8290 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56283d3f1300 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56283d3f12e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56283d3f12a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56283d3ddc58 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56283d3f1328 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56283d3f12c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c8308 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d2c84f0 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56283d2c8460 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56283d3f1850 <col:56, line:354:5>
|   |-DeclStmt 0x56283d3f15f8 <line:346:9, col:51>
|   | `-VarDecl 0x56283d3f1430 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56283d3f15e0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56283d3f15b0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56283d3f1598 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56283d3f1580 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56283d3f1550 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56283d3f1538 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56283d3f1520 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56283d3f14f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56283d3f17b0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56283d3f1660 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56283d3de3b8
|   | | `-MemberExpr 0x56283d3f1630 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56283d3df368
|   | |   `-DeclRefExpr 0x56283d3f1610 <col:9> 'Timestamp' lvalue Var 0x56283d3f1430 't' 'Timestamp'
|   | `-BinaryOperator 0x56283d3f1790 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56283d3f1760 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56283d3f1690 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56283d2c8460 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56283d3f1778 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56283d3f1740 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56283d3f1720 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56283d3f16f0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56283d3f16b0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56283d3f1708 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56283d3f16d0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbee0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56283d3f1838 <line:353:9, col:16>
|     `-CXXConstructExpr 0x56283d3f1808 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56283d3f17f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56283d3f17d0 <col:16> 'Timestamp' lvalue Var 0x56283d3f1430 't' 'Timestamp'
|-CXXMethodDecl 0x56283d2c86b8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56283d2c85a8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d2c8620 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f1a08 <col:72, line:360:5>
|   `-ReturnStmt 0x56283d3f19f8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x56283d3f19e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3f19b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3f1998 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56283d3f1958 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56283d3f1940 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56283d3f1888 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d2c85a8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56283d3f1900 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56283d3f18e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56283d3f18a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56283d3ddda0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56283d3f1928 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56283d3f18c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d2c8620 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d3dc090 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56283d2c8778 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56283d3f1e78 <col:56, line:371:5>
|   |-DeclStmt 0x56283d3f1bf8 <line:363:9, col:51>
|   | `-VarDecl 0x56283d3f1a30 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56283d3f1be0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56283d3f1bb0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56283d3f1b98 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56283d3f1b80 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56283d3f1b50 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56283d3f1b38 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56283d3f1b20 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56283d3f1af0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56283d3f1dd8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56283d3f1c60 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56283d3de3b8
|   | | `-MemberExpr 0x56283d3f1c30 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56283d3df368
|   | |   `-DeclRefExpr 0x56283d3f1c10 <col:9> 'Timestamp' lvalue Var 0x56283d3f1a30 't' 'Timestamp'
|   | `-CallExpr 0x56283d3f1d78 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x56283d3f1d60 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56283d3f1c90 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56283d3df698 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x56283d3f1da8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56283d3f1cb0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x56283d2c8778 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56283d3f1dc0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x56283d3f1d40 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x56283d3f1d10 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x56283d3f1cd0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbd30 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x56283d3f1d28 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x56283d3f1cf0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56283d3f1e60 <line:370:9, col:16>
|     `-CXXConstructExpr 0x56283d3f1e30 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56283d3f1e18 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56283d3f1df8 <col:16> 'Timestamp' lvalue Var 0x56283d3f1a30 't' 'Timestamp'
|-CXXMethodDecl 0x56283d3dc188 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x56283d3f1fb8 <col:39, line:377:5>
|   `-ReturnStmt 0x56283d3f1fa8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x56283d3f1f90 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x56283d3f1f60 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d3f1f48 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56283d3f1f08 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x56283d3f1eb0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x56283d3f1ef0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56283d3f1ed0 <col:29> 'int' 1
|-CXXMethodDecl 0x56283d3dc248 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x56283d3f2098 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x56283d3f2050 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x56283d3f1fe0 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3f1fd0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x56283d3f2010 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x56283d3f2080 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56283d3f2030 <col:19> 'int' 0
|-CXXMethodDecl 0x56283d3dc448 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56283d3dc2f8 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d3dc370 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56283d3e33d0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56283d3e33b0 <col:60> 'int' 0
| `-CompoundStmt 0x56283d3f2290 <col:63, line:395:5>
|   `-BinaryOperator 0x56283d3f2270 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x56283d3f20f0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x56283d3de3b8
|     | `-MemberExpr 0x56283d3f20c0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x56283d3df368
|     |   `-CXXThisExpr 0x56283d3f20b0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x56283d3f2250 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x56283d3f21e0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x56283d3f2180 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x56283d3f2168 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x56283d3f2150 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x56283d3f2120 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d3dc2f8 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x56283d3f21c8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x56283d3f21a8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x56283d3f2238 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x56283d3f2220 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x56283d3f2200 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3dc370 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d3dc618 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56283d3dc508 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d3dc580 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f23e8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x56283d3f23a0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x56283d3f22b8 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3f22a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56283d3f23d0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d3f22e8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d3dc508 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x56283d3f2360 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56283d3f2348 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d3f2308 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56283d3ddc58 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x56283d3f2388 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56283d3f2328 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3dc580 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d3dc7e8 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56283d3dc6d8 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d3dc750 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2540 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x56283d3f24f8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x56283d3f2410 <col:9> '<bound member function type>' ->assign 0x56283d3dc448
|     | `-CXXThisExpr 0x56283d3f2400 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56283d3f2528 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d3f2440 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56283d3dc6d8 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x56283d3f24b8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56283d3f24a0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d3f2460 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56283d3ddda0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x56283d3f24e0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56283d3f2480 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3dc750 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d3dc9b8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56283d3dc8a8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d3dc920 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56283d3e3408 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56283d3e33e8 <col:57> 'int' 0
| `-DeprecatedAttr 0x56283d3dca68 <col:75> "" ""
|-CXXMethodDecl 0x56283d3dcbf8 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56283d3dcae8 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d3dcb60 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d3dcca8 <col:74> "" ""
|-CXXMethodDecl 0x56283d3dce38 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56283d3dcd28 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56283d3dcda0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d3dcee8 <col:74> "" ""
|-CXXMethodDecl 0x56283d3dcf78 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x56283d3dd018 <col:42> "" ""
|-CXXMethodDecl 0x56283d3dd1c0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x56283d3dd0a0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56283d3dd120 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x56283d3dd290 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x56283d3dd350 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x56283d3dd3f0 <col:20>
| `-OptimizeNoneAttr 0x56283d3dd448 <col:30>
|-CXXMethodDecl 0x56283d3dd490 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x56283d3dd550 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x56283d3dd610 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56283d3dd6d0 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x56283d3dd790 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56283d3dd850 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x56283d3dd910 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x56283d3dd9d0 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x56283d3ddb10 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56283d3dda80 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2688 <col:58, line:512:5>
|   `-ReturnStmt 0x56283d3f2678 <line:511:9, col:53>
|     `-BinaryOperator 0x56283d3f2658 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56283d3f2628 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f2558 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3dda80 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56283d3f2640 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56283d3f2608 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56283d3f25e8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3f25b8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3f2578 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3f25d0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3f2598 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cc000 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d3ddc58 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56283d3ddbc8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f27d0 <col:58, line:516:5>
|   `-ReturnStmt 0x56283d3f27c0 <line:515:9, col:53>
|     `-BinaryOperator 0x56283d3f27a0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56283d3f2770 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f26a0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3ddbc8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56283d3f2788 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56283d3f2750 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56283d3f2730 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3f2700 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3f26c0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3f2718 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3f26e0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbee0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d3ddda0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56283d3ddd10 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2918 <col:58, line:520:5>
|   `-ReturnStmt 0x56283d3f2908 <line:519:9, col:53>
|     `-BinaryOperator 0x56283d3f28e8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56283d3f28b8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f27e8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3ddd10 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56283d3f28d0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56283d3f2898 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56283d3f2878 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3f2848 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3f2808 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbd30 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3f2860 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3f2828 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d3ddee8 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56283d3dde58 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2a60 <col:60, line:524:5>
|   `-ReturnStmt 0x56283d3f2a50 <line:523:9, col:55>
|     `-BinaryOperator 0x56283d3f2a30 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56283d3f2a00 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f2930 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3dde58 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56283d3f2a18 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56283d3f29e0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56283d3f29c0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3f2990 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3f2950 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3f29a8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3f2970 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cc000 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d3de030 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56283d3ddfa0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2ba8 <col:60, line:528:5>
|   `-ReturnStmt 0x56283d3f2b98 <line:527:9, col:55>
|     `-BinaryOperator 0x56283d3f2b78 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56283d3f2b48 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f2a78 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3ddfa0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56283d3f2b60 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56283d3f2b28 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56283d3f2b08 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3f2ad8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3f2a98 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3f2af0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3f2ab8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbee0 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56283d3de178 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56283d3de0e8 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2cf0 <col:60, line:532:5>
|   `-ReturnStmt 0x56283d3f2ce0 <line:531:9, col:55>
|     `-BinaryOperator 0x56283d3f2cc0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56283d3f2c90 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f2bc0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3de0e8 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56283d3f2ca8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56283d3f2c70 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56283d3f2c50 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56283d3f2c20 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56283d3f2be0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d3cbd30 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56283d3f2c38 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56283d3f2c00 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56283d2c48b0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x56283d3de220 prev 0x56283d2c4d50 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d3de318 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x56283d3de3b8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x56283d3e3458 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56283d3e3838 <col:11>
| |-CXXConstructorDecl 0x56283d3e3530 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56283d3e3618 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56283d3e3f80 <col:11>
| |-CXXConstructorDecl 0x56283d3e36b8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x56283d3e37c8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x56283d3e5bd8 <col:11>
| |-CXXDestructorDecl 0x56283d3e4ae8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56283d4b0568 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56283d4b0678 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56283d4b0f40 <col:11>
| |   `-ReturnStmt 0x56283d4b0f30 <col:11>
| |     `-UnaryOperator 0x56283d4b0f18 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56283d4b0f08 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x56283d4b06e8 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x56283d4b07f8 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x56283d4fb170 <col:11>
|     `-ReturnStmt 0x56283d4fb160 <col:11>
|       `-UnaryOperator 0x56283d4fb148 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d4fb138 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x56283d3de420 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x56283d3de520 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56283d3de720 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3de500 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d3de4e0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56283d3de5b0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56283d3de738 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3de590 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x56283d3de570 <col:23> 'int' 1
| |-EnumConstantDecl 0x56283d3de640 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56283d3de750 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d3de620 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x56283d3de600 <col:23> 'int' 2
| `-EnumConstantDecl 0x56283d3de6d0 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x56283d3de768 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d3de6b0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x56283d3de690 <col:27> 'int' 3
|-CXXMethodDecl 0x56283d3de7a8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x56283d3de870 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x56283d3dea78 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x56283d3de920 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x56283d3de9a0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x56283d3e3420 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x56283d3dec88 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x56283d3deb38 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x56283d3debb0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x56283d3ded58 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x56283d3dee18 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x56283d3def88 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x56283d3deec8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x56283d3df050 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56283d3df110 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x56283d3df1d0 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56283d3df290 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x56283d3df330 <line:670:3, col:10> col:3 private
|-FieldDecl 0x56283d3df368 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x56283d3df3d8 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x56283d3f2d08 <col:27, line:684:5>
|-CXXMethodDecl 0x56283d3df498 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x56283d3f2d18 <col:27, line:696:5>
|-CXXMethodDecl 0x56283d3df698 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56283d3df548 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56283d3df5c0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f2ea0 <col:66, line:700:5>
|   `-ReturnStmt 0x56283d3f2e90 <line:699:9, col:31>
|     `-CallExpr 0x56283d3f2e30 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x56283d3f2e18 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d3f2dc8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x56283d268b98 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x56283d3f2e60 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x56283d3f2d88 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x56283d3df548 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x56283d3f2e78 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56283d3f2da8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3df5c0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d3dfa08 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56283d3df758 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x56283d3df7d0 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x56283d3df848 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56283d3df8c0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d3f31f0 <col:64, line:707:5>
|   |-DeclStmt 0x56283d3f2f30 <line:704:9, col:24>
|   | `-VarDecl 0x56283d3f2ec8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x56283d3f3140 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x56283d3f2f48 <col:9> 'int32_t':'int' lvalue ParmVar 0x56283d3df7d0 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x56283d3f3128 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x56283d3f30c0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x56283d3f30a8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d3f3028 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x56283d26de98 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x56283d3f30f8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x56283d3f2fc8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x56283d3df848 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x56283d3f3110 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x56283d3f2fe8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d3df8c0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x56283d3f3008 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x56283d3f2ec8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x56283d3f31d0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x56283d3f3160 <col:9> 'int32_t':'int' lvalue ParmVar 0x56283d3df758 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x56283d3f31b8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x56283d3f31a0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x56283d3f3180 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x56283d3f2ec8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x56283d3dfca8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x56283d3dfad8 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x56283d3dfb50 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x56283d3dfbc8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x56283d3dff48 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x56283d3dfd70 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x56283d3dfde8 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x56283d3dfe60 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x56283d3e2518 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x56283d3e0010 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x56283d3e2718 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x56283d3e25d0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x56283d3e2648 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x56283d3e29e8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x56283d3e2928 parent 0x56283ceab278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56283d3e27d8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x56283d3e2850 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56283d3e2c08 <line:718:5, col:72> col:24
| `-FunctionDecl 0x56283d3e2b48 parent 0x56283ceab278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56283d3e2a38 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x56283d3e2ab0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x56283d3e2dd0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x56283d3e2d18 parent 0x56283ceab278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x56283d3e2c58 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x56283d3e3058 <line:720:5, col:73> col:30
| `-FunctionDecl 0x56283d3e2f98 parent 0x56283ceab278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56283d3e2e48 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56283d3e2ec0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56283d3e3278 <line:721:5, col:73> col:30
| `-FunctionDecl 0x56283d3e31b8 parent 0x56283ceab278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56283d3e30a8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56283d3e3120 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x56283d3e4990 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d3e4a78 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e58e8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x56283d3e58a0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56283d3df368
| |     `-DeclRefExpr 0x56283d3e5880 <col:7> 'const Timestamp' lvalue ParmVar 0x56283d3e4a78 '' 'const Timestamp &'
| `-CompoundStmt 0x56283d3e5948 <col:7>
|-CXXConstructorDecl 0x56283d3e4bf8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d3e4d08 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x56283d3df368 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56283d3e5be8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x56283d3e5b90 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56283d3df368
| |     `-CXXStaticCastExpr 0x56283d3e5b60 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x56283d3e5b30 <col:7> 'Timestamp' lvalue ParmVar 0x56283d3e4d08 '' 'Timestamp &&'
| `-CompoundStmt 0x56283d3e5c48 <col:7>
|-CXXDestructorDecl 0x56283d3e4db8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56283d4b03c0 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d4b04c8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x56283d4b0fb8 <col:7>
|   |-CXXMemberCallExpr 0x56283d4b0f58 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x56283d4b0e98 <col:7> '<bound member function type>' .operator= 0x56283d4b0568
|   | | `-MemberExpr 0x56283d4b0da8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56283d3df368
|   | |   `-CXXThisExpr 0x56283d4b0d98 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x56283d4b0e68 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56283d3df368
|   |   `-DeclRefExpr 0x56283d4b0e48 <col:7> 'const Timestamp' lvalue ParmVar 0x56283d4b04c8 '' 'const Timestamp &'
|   `-ReturnStmt 0x56283d4b0fa8 <col:7>
|     `-UnaryOperator 0x56283d4b0f90 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d4b0f80 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x56283d4b0868 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56283d4b0978 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x56283d4fb1e8 <col:7>
    |-CXXMemberCallExpr 0x56283d4fb188 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x56283d4fb0f0 <col:7> '<bound member function type>' .operator= 0x56283d4b06e8
    | | `-MemberExpr 0x56283d4fafc0 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56283d3df368
    | |   `-CXXThisExpr 0x56283d4fafb0 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x56283d4fb0c0 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56283d3df368
    |   `-CXXStaticCastExpr 0x56283d4fb090 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x56283d4fb060 <col:7> 'Timestamp' lvalue ParmVar 0x56283d4b0978 '' 'Timestamp &&'
    `-ReturnStmt 0x56283d4fb1d8 <col:7>
      `-UnaryOperator 0x56283d4fb1c0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56283d4fb1b0 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d5166d0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x56283d5168a8 prev 0x56283d5166d0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56283d516938 <col:46, col:52> col:46 public
|-TypedefDecl 0x56283d516960 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d518590 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x56283d518540 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x56283d516e10 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x56283d516d10 'type'
|     `-TemplateSpecializationType 0x56283d516ca0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56283d516b80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x56283d516b60 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56283d516b40 <col:24> 'unsigned long' 16
|       `-RecordType 0x56283d516c80 'char_array<16>'
|         `-ClassTemplateSpecialization 0x56283d516ba0 'char_array'
|-TypedefDecl 0x56283d518648 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x56283d518610 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x56283d5185f0 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x56283d518590 'type'
|     `-ElaboratedType 0x56283d518540 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x56283d516e10 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x56283d516d10 'type'
|         `-TemplateSpecializationType 0x56283d516ca0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56283d516b80 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x56283d516b60 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56283d516b40 <col:24> 'unsigned long' 16
|           `-RecordType 0x56283d516c80 'char_array<16>'
|             `-ClassTemplateSpecialization 0x56283d516ba0 'char_array'
|-CXXMethodDecl 0x56283d5187c8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x56283d5186d8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x56283d5188b8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56283d518998 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56283d518998
|-CXXMethodDecl 0x56283d518c68 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x56283d518b70 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x56283d518ea8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56283d518d20 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d518d98 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d519078 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56283d518f68 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d518fe0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d5191d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x56283d5192a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x56283d5194f8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56283d519368 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x56283d5193e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d519758 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x56283d5195c8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x56283d519640 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d519918 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x56283d519828 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d519ad8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x56283d5199e0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d519b90 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d519c40 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d519e78 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56283d519cf0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d519d68 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56283d51a118 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x56283d51a020 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x56283d51a1e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x56283d51a230 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56283d51a280 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d515228 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x56283d515438 prev 0x56283d515228 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56283d516640 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x56283d5165f0 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x56283d5165d0 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x56283d516480 'type'
|     `-SubstTemplateTypeParmType 0x56283d5162a0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x56283d1537d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d153778 'T'
|       `-RecordType 0x56283d515df0 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x56283d515d08 'sized_array_memory'
|-FieldDecl 0x56283d51a2d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x56283d51a320 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56283d51a358 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56283d204620 'T'
|   `-RecordType 0x56283d514430 'TimerSet::heap_element'
|     `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51a418 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x56283d51a3e0 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d514430 'TimerSet::heap_element'
|       `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51a4a8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x56283d51a470 'const TimerSet::heap_element &'
|   `-QualType 0x56283d5154d1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d514430 'TimerSet::heap_element'
|         `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51a538 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x56283d51a500 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d514430 'TimerSet::heap_element'
|       `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51a5f8 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x56283d51a5c0 'const TimerSet::heap_element *'
|   `-QualType 0x56283d5154d1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d514430 'TimerSet::heap_element'
|         `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51b250 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x56283d51b200 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x56283d51b1e0 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x56283d51b118 'type'
|     `-LValueReferenceType 0x56283d51b0e0 'const TimerSet::heap_element &'
|       `-QualType 0x56283d51ae81 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x56283d51ae80 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x56283d15cdb0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56283d15cd58 'T'
|           `-RecordType 0x56283d514430 'TimerSet::heap_element'
|             `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51b2b8 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x56283d51a470 'const TimerSet::heap_element &'
|   `-QualType 0x56283d5154d1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d514430 'TimerSet::heap_element'
|         `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51b310 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d51b378 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x56283d51a500 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d514430 'TimerSet::heap_element'
|       `-CXXRecord 0x56283d5143a0 'heap_element'
|-TypedefDecl 0x56283d51b3e0 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x56283d51a5c0 'const TimerSet::heap_element *'
|   `-QualType 0x56283d5154d1 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56283d5154d0 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d514430 'TimerSet::heap_element'
|         `-CXXRecord 0x56283d5143a0 'heap_element'
|-EnumDecl 0x56283d51b438 <line:134:5> col:5
| `-EnumConstantDecl 0x56283d51b530 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56283d51b510 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56283d205838 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56283d205810 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56283d2057f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56283d51b5b8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56283d51b848 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d51b670 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d51b710 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x56283d51bb08 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x56283d51b9f0 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x56283d51bdc8 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x56283d51bcb0 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x56283d51c110 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x56283d51bff0 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x56283d51c420 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x56283d51c300 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x56283d51c710 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d51c558 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d51c5d0 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56283d51c868 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x56283d51c948 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d51c9a0 <col:30> Inherited
|-CXXMethodDecl 0x56283d51c9e8 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x56283d51ca98 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d51caf0 <col:30> Inherited
|-CXXMethodDecl 0x56283d51cbb8 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56283d51cc68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d51ccc0 <col:30> Inherited
|-CXXMethodDecl 0x56283d51cd08 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56283d51cdb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d51ce10 <col:30> Inherited
|-CXXMethodDecl 0x56283d51ce58 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56283d51cf08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d51cf60 <col:30> Inherited
|-CXXMethodDecl 0x56283d51cfa8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56283d51d058 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d51d0b0 <col:30> Inherited
|-CXXMethodDecl 0x56283d51d0d8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d51d188 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d51d238 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56283d51d3f8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d51d2e8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d51d360 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56283d51d548 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56283d51d4b8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d51d6f8 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x56283d51d600 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d51d7b0 <col:20>
| `-OptimizeNoneAttr 0x56283d51d808 <col:30>
|-CXXMethodDecl 0x56283d51d928 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x56283d51d830 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d51d9e0 <col:20>
| `-OptimizeNoneAttr 0x56283d51da38 <col:30>
|-CXXMethodDecl 0x56283d51daf0 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d51da60 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d51dc38 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d51dba8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d51dd68 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x56283d51de98 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x56283d51df68 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x56283d51e038 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x56283d51e178 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d51e0e8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d51e2c0 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d51e230 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d51e408 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x56283d51e378 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d51e4c0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56283d51e5c0 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56283d51e530 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d51e678 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56283d51e738 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x56283d51e838 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x56283d51e9e8 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d51e8f8 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x56283d51f1a8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56283d51eaa0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x56283d51f108 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x56283d51f008 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x56283d51f288 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d51f3d8 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d51f348 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56283d51f490 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56283d51f6e8 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d51f560 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x56283d51f5d8 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56283d51f8a8 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x56283d51f7b8 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x56283d51faf8 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x56283d51f970 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x56283d51f9e8 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x56283d51fbb8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d51fe18 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x56283d51fd20 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x56283d51fee8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56283d51fee8

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d521410 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x56283d5215e8 prev 0x56283d521410 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56283d521678 <col:46, col:52> col:46 public
|-TypedefDecl 0x56283d5216a0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d523270 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x56283d523220 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x56283d521b50 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x56283d521a50 'type'
|     `-TemplateSpecializationType 0x56283d5219e0 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56283d5218c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x56283d5218a0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56283d521880 <col:24> 'unsigned long' 8
|       `-RecordType 0x56283d5219c0 'char_array<8>'
|         `-ClassTemplateSpecialization 0x56283d5218e0 'char_array'
|-TypedefDecl 0x56283d523328 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x56283d5232f0 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x56283d5232d0 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x56283d523270 'type'
|     `-ElaboratedType 0x56283d523220 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x56283d521b50 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x56283d521a50 'type'
|         `-TemplateSpecializationType 0x56283d5219e0 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56283d5218c0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x56283d5218a0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56283d521880 <col:24> 'unsigned long' 8
|           `-RecordType 0x56283d5219c0 'char_array<8>'
|             `-ClassTemplateSpecialization 0x56283d5218e0 'char_array'
|-CXXMethodDecl 0x56283d5234a8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x56283d5233b8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x56283d523598 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56283d523678 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56283d523678
|-CXXMethodDecl 0x56283d523948 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56283d523850 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x56283d523b88 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56283d523a00 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d523a78 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d523d58 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56283d523c48 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d523cc0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d523eb8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56283d523f88 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56283d5241d8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56283d524048 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56283d5240c0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d524438 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x56283d5242a8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56283d524320 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d5245f8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56283d524508 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d5247b8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56283d5246c0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d524870 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d524920 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d524b58 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56283d5249d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d524a48 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56283d524df8 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56283d524d00 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x56283d524ec0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x56283d524f10 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56283d524f60 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d520030 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x56283d520238 prev 0x56283d520030 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56283d521380 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x56283d521330 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x56283d521310 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x56283d5211c0 'type'
|     `-SubstTemplateTypeParmType 0x56283d520fe0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56283d1537d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d153778 'T'
|       `-RecordType 0x56283d520b30 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x56283d520a48 'sized_array_memory'
|-FieldDecl 0x56283d524fb0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56283d525000 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56283d525038 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|   |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56283d204620 'T'
|   `-PointerType 0x56283d4d63d0 'Timer *'
|     `-RecordType 0x56283d4d5540 'Timer'
|       `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d5250f8 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x56283d5250c0 'Timer *&'
|   `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-PointerType 0x56283d4d63d0 'Timer *'
|       `-RecordType 0x56283d4d5540 'Timer'
|         `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d5251b8 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x56283d525180 'Timer *const &'
|   `-QualType 0x56283d5202d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-PointerType 0x56283d4d63d0 'Timer *'
|         `-RecordType 0x56283d4d5540 'Timer'
|           `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d525278 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x56283d525240 'Timer **'
|   `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-PointerType 0x56283d4d63d0 'Timer *'
|       `-RecordType 0x56283d4d5540 'Timer'
|         `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d525338 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x56283d525300 'Timer *const *'
|   `-QualType 0x56283d5202d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-PointerType 0x56283d4d63d0 'Timer *'
|         `-RecordType 0x56283d4d5540 'Timer'
|           `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d525f10 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x56283d525ec0 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x56283d525ea0 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x56283d525e30 'type'
|     `-SubstTemplateTypeParmType 0x56283d525bf0 'Timer *' sugar
|       |-TemplateTypeParmType 0x56283d15d4e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d15d490 'T'
|       `-PointerType 0x56283d4d63d0 'Timer *'
|         `-RecordType 0x56283d4d5540 'Timer'
|           `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d525f78 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x56283d525180 'Timer *const &'
|   `-QualType 0x56283d5202d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-PointerType 0x56283d4d63d0 'Timer *'
|         `-RecordType 0x56283d4d5540 'Timer'
|           `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d525fd0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d526038 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x56283d525240 'Timer **'
|   `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-PointerType 0x56283d4d63d0 'Timer *'
|       `-RecordType 0x56283d4d5540 'Timer'
|         `-CXXRecord 0x56283d4f3d28 'Timer'
|-TypedefDecl 0x56283d5260a0 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x56283d525300 'Timer *const *'
|   `-QualType 0x56283d5202d1 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56283d5202d0 'Timer *' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-PointerType 0x56283d4d63d0 'Timer *'
|         `-RecordType 0x56283d4d5540 'Timer'
|           `-CXXRecord 0x56283d4f3d28 'Timer'
|-EnumDecl 0x56283d5260f8 <line:134:5> col:5
| `-EnumConstantDecl 0x56283d5261f0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56283d5261d0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56283d205838 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56283d205810 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56283d2057f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56283d526278 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56283d526508 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d526330 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d5263d0 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x56283d5267c8 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56283d5266b0 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x56283d526a88 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x56283d526970 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x56283d526dd0 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56283d526cb0 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x56283d5270e0 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x56283d526fc0 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x56283d5273d0 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d527218 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d527290 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56283d527560 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x56283d527638 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d527690 <col:30> Inherited
|-CXXMethodDecl 0x56283d5276d8 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x56283d527788 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d5277e0 <col:30> Inherited
|-CXXMethodDecl 0x56283d5278a8 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56283d527958 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d5279b0 <col:30> Inherited
|-CXXMethodDecl 0x56283d5279f8 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56283d527aa8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d527b00 <col:30> Inherited
|-CXXMethodDecl 0x56283d527b48 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56283d527bf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d527c50 <col:30> Inherited
|-CXXMethodDecl 0x56283d527c98 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56283d527d48 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d527da0 <col:30> Inherited
|-CXXMethodDecl 0x56283d527dc8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d527e78 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d527f28 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56283d5280e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d527fd8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d528050 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56283d528238 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56283d5281a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d5283e8 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x56283d5282f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d5284a0 <col:20>
| `-OptimizeNoneAttr 0x56283d5284f8 <col:30>
|-CXXMethodDecl 0x56283d528618 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x56283d528520 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d5286d0 <col:20>
| `-OptimizeNoneAttr 0x56283d528728 <col:30>
|-CXXMethodDecl 0x56283d5287e0 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d528750 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d528928 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d528898 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d528a58 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x56283d528b88 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x56283d528c58 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x56283d528d28 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x56283d528e68 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d528dd8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d528fb0 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d528f20 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d5290f8 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x56283d529068 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d5291b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56283d5292b0 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56283d529220 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d529368 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56283d529428 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x56283d529528 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x56283d5296a8 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d5295e8 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x56283d529e68 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56283d529760 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x56283d529dc8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x56283d529cc8 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x56283d529f48 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d52a098 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d52a008 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56283d52a150 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56283d52a398 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d52a210 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x56283d52a288 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56283d52a558 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x56283d52a468 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x56283d52a7a8 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x56283d52a620 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x56283d52a698 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x56283d52a868 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d52aac8 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56283d52a9d0 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x56283d52ab98 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56283d52ab98

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4f0760 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d4f0878 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x56283d4f0908 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x56283d4f0990 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x56283d4f0a80 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x56283d4f0b80 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x56283d4f0c40 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x56283d4f0d00 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x56283d4f0e28 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x56283d4f0e28
| `-ParmVarDecl 0x56283d4f0f38 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x56283d52b948 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x56283d52b948
  `-ParmVarDecl 0x56283d52ba58 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d513520 prev 0x56283d4f8c78 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x56283d513618 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x56283d5136a8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x56283d513730 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x56283d513828 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x56283d52bdc0 <col:43, col:67>
|   `-ReturnStmt 0x56283d52bdb0 <col:45, col:52>
|     `-CXXConstructExpr 0x56283d52bd80 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x56283d52bd50 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x56283d515010
|         `-CXXThisExpr 0x56283d52bd40 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x56283d5138e8 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x56283d513af0 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x56283d513998 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x56283d513a10 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x56283d513be8 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x56283d513cb0 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x56283d52be40 <col:39, col:67>
|   `-ReturnStmt 0x56283d52be30 <col:41, col:48>
|     `-ImplicitCastExpr 0x56283d52be18 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56283d52bde8 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x56283d5150f8
|         `-CXXThisExpr 0x56283d52bdd8 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x56283d513d78 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x56283d52bec0 <col:35, col:59>
|   `-ReturnStmt 0x56283d52beb0 <col:37, col:44>
|     `-ImplicitCastExpr 0x56283d52be98 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56283d52be68 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x56283d515160
|         `-CXXThisExpr 0x56283d52be58 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x56283d513ec0 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x56283d513e30 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x56283d514008 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56283d513f78 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56283d514208 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x56283d5140c0 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x56283d514138 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x56283d5142d8 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x56283d514378 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d5143a0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d5144b8 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x56283d514558 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x56283d5145b8 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x56283d5146e8 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x56283d514618 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x56283d514558 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x56283d52bf98 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x56283d52bf40 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x56283d52bf10 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x56283d4f60d0
|   |       `-ImplicitCastExpr 0x56283d52bf60 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x56283d52bef8 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x56283d52bed8 <col:17> 'Timer *' lvalue ParmVar 0x56283d514618 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x56283d5145b8 't' 'Timer *'
|   | `-ImplicitCastExpr 0x56283d52c030 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56283d52bff0 <col:41> 'Timer *' lvalue ParmVar 0x56283d514618 't_' 'Timer *'
|   `-CompoundStmt 0x56283d52c080 <col:45, line:44:2>
|-CXXRecordDecl 0x56283d5147b0 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d5148c8 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x56283d514b18 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x56283d514998 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x56283d514a10 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x56283d52c1b0 <col:71, line:49:2>
|     `-ReturnStmt 0x56283d52c1a0 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x56283d52c168 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x56283d52c150 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56283d52c130 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x56283d3ffe88 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x56283d52c0b0 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x56283d514558
|         | `-DeclRefExpr 0x56283d52c090 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x56283d514998 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x56283d52c100 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x56283d514558
|           `-DeclRefExpr 0x56283d52c0e0 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x56283d514a10 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x56283d514be0 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d514cf8 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x56283d514f18 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x56283d514d98 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x56283d514e10 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x56283d52c3b8 <col:63, line:54:2>
|     `-BinaryOperator 0x56283d52c398 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x56283d52c248 <col:6, col:12> 'int' lvalue ->_schedpos1 0x56283d4f8118
|       | `-ImplicitCastExpr 0x56283d52c230 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x56283d52c200 <col:6, col:9> 'Timer *' lvalue ->t 0x56283d5145b8
|       |     `-ImplicitCastExpr 0x56283d52c1e8 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x56283d52c1c8 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x56283d514e10 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x56283d52c380 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x56283d52c360 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x56283d52c308 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x56283d52c2e8 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x56283d52c2b8 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x56283d52c278 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x56283d514e10 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x56283d52c2d0 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x56283d52c298 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x56283d514d98 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x56283d52c348 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x56283d52c328 <col:39> 'int' 1
|-FieldDecl 0x56283d515010 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x56283d515080 <col:44, col:53> aligned
|   `-ConstantExpr 0x56283d515060 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x56283d514fe0 <col:52> 'int' 8
|-FieldDecl 0x56283d5150f8 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x56283d515160 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x56283d5151c8 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x56283d51ffd0 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x56283d52ac80 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x56283d52ace0 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x56283d52ad40 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x56283d52ada0 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d52ae90 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x56283d52ae00 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x56283d52af58 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x56283d52c810 <col:29, line:81:5>
|   `-IfStmt 0x56283d52c7e8 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x56283d52c4a0 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x56283d52c440 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x56283d52c410 <col:6, col:18> '<bound member function type>' .size 0x56283d51d0d8
|     |     `-ImplicitCastExpr 0x56283d52c488 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x56283d52c3e0 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x56283d51ffd0
|     |         `-CXXThisExpr 0x56283d52c3d0 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x56283d52c690 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x56283d52c678 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56283d52c658 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x56283d4b03c0 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x56283d52c4c8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x56283d515010
|     | | `-CXXThisExpr 0x56283d52c4b8 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x56283d52c640 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x56283d52c610 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x56283d514558
|     |     `-CXXMemberCallExpr 0x56283d52c5e8 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x56283d52c5b8 <col:22, col:34> '<bound member function type>' .unchecked_at 0x56283d51e178
|     |       | `-MemberExpr 0x56283d52c508 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x56283d51ffd0
|     |       |   `-CXXThisExpr 0x56283d52c4f8 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x56283d52c598 <col:47> 'int' 0
|     `-ExprWithCleanups 0x56283d52c7d0 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x56283d52c798 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x56283d52c780 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56283d52c760 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56283d4b0868 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x56283d52c6d8 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x56283d515010
|         | `-CXXThisExpr 0x56283d52c6c8 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x56283d52c748 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56283d52c718 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56283d52b098 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x56283d52b008 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x56283d52b160 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x56283d52b220 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x56283d52b2e0 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x56283d52b3d0 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x56283d52b438 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x56283d52b438
| `-ParmVarDecl 0x56283d52b548 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x56283d52b5e8 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x56283d52b5e8
| `-ParmVarDecl 0x56283d52b6f8 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x56283d52b798 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x56283d52b798
| `-ParmVarDecl 0x56283d52b8a8 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x56283d52bac8 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x56283d52bac8
| `-ParmVarDecl 0x56283d52bbd8 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x56283d52bc60 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x56283d52bc60

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d5542d8 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x56283d5544e8 prev 0x56283d5542d8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56283d5555c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x56283d555570 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x56283d555550 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x56283d555400 'type'
|     `-SubstTemplateTypeParmType 0x56283d520fe0 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56283d1537d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d153778 'T'
|       `-RecordType 0x56283d520b30 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x56283d520a48 'sized_array_memory'
|-FieldDecl 0x56283d5556c0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56283d555710 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56283d555748 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|   |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56283d204620 'T'
|   `-RecordType 0x56283d546b40 'pollfd'
|     `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d555808 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x56283d5557d0 'pollfd &'
|   `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d546b40 'pollfd'
|       `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d5558c8 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x56283d555890 'const pollfd &'
|   `-QualType 0x56283d554581 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d546b40 'pollfd'
|         `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d555958 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x56283d555920 'pollfd *'
|   `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d546b40 'pollfd'
|       `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d555a18 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x56283d5559e0 'const pollfd *'
|   `-QualType 0x56283d554581 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d546b40 'pollfd'
|         `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d5565f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x56283d5565a0 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x56283d556580 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x56283d556510 'type'
|     `-SubstTemplateTypeParmType 0x56283d5562d0 'pollfd' sugar
|       |-TemplateTypeParmType 0x56283d15d4e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d15d490 'T'
|       `-RecordType 0x56283d546b40 'pollfd'
|         `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d556658 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x56283d555890 'const pollfd &'
|   `-QualType 0x56283d554581 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d546b40 'pollfd'
|         `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d5566b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d556718 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x56283d555920 'pollfd *'
|   `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d546b40 'pollfd'
|       `-CXXRecord 0x56283d546ab0 'pollfd'
|-TypedefDecl 0x56283d556780 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x56283d5559e0 'const pollfd *'
|   `-QualType 0x56283d554581 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56283d554580 'pollfd' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d546b40 'pollfd'
|         `-CXXRecord 0x56283d546ab0 'pollfd'
|-EnumDecl 0x56283d5567d8 <line:134:5> col:5
| `-EnumConstantDecl 0x56283d5568d0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56283d5568b0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56283d205838 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56283d205810 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56283d2057f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56283d556958 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56283d556be8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d556a10 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d556ab0 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x56283d556ea8 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56283d556d90 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x56283d557168 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x56283d557050 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x56283d5574b0 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56283d557390 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x56283d5577c0 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x56283d5576a0 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x56283d557ab0 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d5578f8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d557970 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56283d557c08 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x56283d557ce8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d557d40 <col:30> Inherited
|-CXXMethodDecl 0x56283d557d88 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x56283d557e38 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d557e90 <col:30> Inherited
|-CXXMethodDecl 0x56283d557f58 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56283d558008 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d558060 <col:30> Inherited
|-CXXMethodDecl 0x56283d5580a8 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56283d558158 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d5581b0 <col:30> Inherited
|-CXXMethodDecl 0x56283d5581f8 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56283d5582a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d558300 <col:30> Inherited
|-CXXMethodDecl 0x56283d558348 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56283d5583f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d558450 <col:30> Inherited
|-CXXMethodDecl 0x56283d558478 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d558528 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d5585d8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56283d558798 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d558688 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d558700 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56283d5588e8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56283d558858 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d558a98 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x56283d5589a0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d558b50 <col:20>
| `-OptimizeNoneAttr 0x56283d558ba8 <col:30>
|-CXXMethodDecl 0x56283d558cc8 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x56283d558bd0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d558d80 <col:20>
| `-OptimizeNoneAttr 0x56283d558dd8 <col:30>
|-CXXMethodDecl 0x56283d558e90 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d558e00 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d558fd8 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d558f48 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d559108 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x56283d559238 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x56283d559308 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x56283d5593d8 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x56283d559518 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d559488 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d559660 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d5595d0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d5597a8 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x56283d559718 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d559860 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56283d559960 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56283d5598d0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d559a18 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56283d559ad8 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x56283d559bd8 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x56283d559d88 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d559c98 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x56283d55a548 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56283d559e40 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x56283d55a4a8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x56283d55a3a8 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x56283d55a628 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d55a778 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d55a6e8 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56283d55a830 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56283d55aa78 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d55a8f0 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x56283d55a968 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56283d55ac38 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x56283d55ab48 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x56283d55ae98 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x56283d55ad00 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x56283d55ad78 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x56283d55af58 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d55b1b8 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56283d55b0c0 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x56283d55b288 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56283d55b288

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d55c770 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x56283d55c948 prev 0x56283d55c770 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56283d55c9d8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56283d55ca00 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d55e5d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x56283d55e580 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x56283d55ceb0 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x56283d55cdb0 'type'
|     `-TemplateSpecializationType 0x56283d55cd40 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56283d55cc20 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x56283d55cc00 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56283d55cbe0 <col:24> 'unsigned long' 24
|       `-RecordType 0x56283d55cd20 'char_array<24>'
|         `-ClassTemplateSpecialization 0x56283d55cc40 'char_array'
|-TypedefDecl 0x56283d55e688 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x56283d55e650 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x56283d55e630 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x56283d55e5d0 'type'
|     `-ElaboratedType 0x56283d55e580 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x56283d55ceb0 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x56283d55cdb0 'type'
|         `-TemplateSpecializationType 0x56283d55cd40 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56283d55cc20 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x56283d55cc00 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56283d55cbe0 <col:24> 'unsigned long' 24
|           `-RecordType 0x56283d55cd20 'char_array<24>'
|             `-ClassTemplateSpecialization 0x56283d55cc40 'char_array'
|-CXXMethodDecl 0x56283d55e808 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x56283d55e718 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x56283d55e8f8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56283d55e9d8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56283d55e9d8
|-CXXMethodDecl 0x56283d55eca8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x56283d55ebb0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x56283d55eee8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56283d55ed60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d55edd8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d55f0b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56283d55efa8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d55f020 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d55f218 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x56283d55f2e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x56283d55f538 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56283d55f3a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x56283d55f420 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d55f798 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x56283d55f608 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x56283d55f680 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d55f958 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x56283d55f868 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d55fb18 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x56283d55fa20 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d55fbd0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d55fc80 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d55feb8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56283d55fd30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d55fda8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56283d560158 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x56283d560060 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x56283d560220 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x56283d560270 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56283d5602c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d55b3d0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x56283d55b5d8 prev 0x56283d55b3d0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56283d55c6e0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x56283d55c690 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x56283d55c670 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x56283d55c520 'type'
|     `-SubstTemplateTypeParmType 0x56283d55c340 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x56283d1537d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d153778 'T'
|       `-RecordType 0x56283d244eb0 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x56283d244dc8 'sized_array_memory'
|-FieldDecl 0x56283d560310 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x56283d560360 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56283d560398 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56283d204620 'T'
|   `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d560458 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56283d560420 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d560518 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56283d5604e0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x56283d55b671 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d5605a8 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x56283d560570 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d560668 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x56283d560630 'const SelectSet::SelectorInfo *'
|   `-QualType 0x56283d55b671 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d5612c0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x56283d561270 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x56283d561250 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x56283d561188 'type'
|     `-LValueReferenceType 0x56283d561150 'const SelectSet::SelectorInfo &'
|       `-QualType 0x56283d560ef1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x56283d560ef0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x56283d15cdb0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56283d15cd58 'T'
|           `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d561328 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56283d5604e0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x56283d55b671 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d561380 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d5613e8 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x56283d560570 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-TypedefDecl 0x56283d561450 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x56283d560630 'const SelectSet::SelectorInfo *'
|   `-QualType 0x56283d55b671 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56283d55b670 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d553e40 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56283d553db0 'SelectorInfo'
|-EnumDecl 0x56283d5614a8 <line:134:5> col:5
| `-EnumConstantDecl 0x56283d5615a0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56283d561580 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56283d205838 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56283d205810 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56283d2057f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56283d561628 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56283d5618b8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d5616e0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d561780 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x56283d561b78 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56283d561a60 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x56283d561e38 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x56283d561d20 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x56283d562180 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56283d562060 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x56283d562490 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x56283d562370 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x56283d562780 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d5625c8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d562640 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56283d5628d8 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x56283d5629b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d562a10 <col:30> Inherited
|-CXXMethodDecl 0x56283d562a58 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x56283d562b08 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d562b60 <col:30> Inherited
|-CXXMethodDecl 0x56283d562c28 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56283d562cd8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d562d30 <col:30> Inherited
|-CXXMethodDecl 0x56283d562e00 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56283d562eb0 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d562f08 <col:30> Inherited
|-CXXMethodDecl 0x56283d562f50 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56283d563000 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d563058 <col:30> Inherited
|-CXXMethodDecl 0x56283d5630a0 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56283d563150 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d5631a8 <col:30> Inherited
|-CXXMethodDecl 0x56283d5631d0 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d563280 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d563330 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56283d5634f0 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d5633e0 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d563458 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56283d563640 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56283d5635b0 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d5637e8 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x56283d5636f8 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d5638a0 <col:20>
| `-OptimizeNoneAttr 0x56283d5638f8 <col:30>
|-CXXMethodDecl 0x56283d563a18 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x56283d563920 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d563ad0 <col:20>
| `-OptimizeNoneAttr 0x56283d563b28 <col:30>
|-CXXMethodDecl 0x56283d563be0 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d563b50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d563d28 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d563c98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d563e58 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x56283d563f88 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x56283d564058 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x56283d564128 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x56283d564268 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d5641d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d5643b0 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d564320 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d5644f8 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x56283d564468 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d5645b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56283d5646b0 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56283d564620 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d564768 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56283d564828 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x56283d564928 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x56283d564ad8 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d5649e8 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x56283d565298 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56283d564b90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x56283d5651f8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x56283d5650f8 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x56283d565378 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d5654c8 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d565438 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56283d565580 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56283d5657c8 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d565640 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x56283d5656b8 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56283d565988 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x56283d565898 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x56283d565bd8 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x56283d565a50 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x56283d565ac8 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x56283d565c98 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d565ef8 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56283d565e00 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x56283d565fc8 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56283d565fc8

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d552f90 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d5530a8 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x56283d553138 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x56283d5531c0 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x56283d5532b0 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x56283d5532b0
|-CXXMethodDecl 0x56283d5533b0 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x56283d553650 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x56283d553468 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x56283d5534e0 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x56283d553560 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x56283d5538c0 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x56283d553720 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x56283d553798 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x56283d553818 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x56283d553a18 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x56283d553988 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x56283d553ae0 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x56283d567678 <col:34, line:50:5>
|   |-BinaryOperator 0x56283d567048 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x56283d567008 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x56283d554268
|   | | `-CXXThisExpr 0x56283d566ff8 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x56283d567038 <col:23> 'bool' true
|   `-CallExpr 0x56283d567650 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x56283d567638 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56283d5675b8 <col:2> 'void (long)' lvalue Function 0x56283d5674b8 'ignore_result' 'void (long)' (FunctionTemplate 0x56283d0c89b8 'ignore_result')
|     `-CallExpr 0x56283d567260 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x56283d567248 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d5671c8 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x56283d52fc68 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x56283d567298 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x56283d567170 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x56283d567158 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x56283d567108 <col:22> 'int [2]' lvalue ->_wake_pipe 0x56283d554208
|       |   |   `-CXXThisExpr 0x56283d5670f8 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x56283d567138 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x56283d5672c8 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x56283d5672b0 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x56283d567190 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x56283d5672e0 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x56283d5671a8 <col:41> 'int' 1
|-CXXMethodDecl 0x56283d553c20 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56283d553b90 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56283d553ce8 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x56283d553d88 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d553db0 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d553ec8 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x56283d553f68 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x56283d553fc8 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x56283d554030 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x56283d5540e0 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x56283d553f68 'read' 'Element *'
|   | `-ImplicitCastExpr 0x56283d5676d8 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x56283d567698 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x56283d553fc8 'write' 'Element *'
|   | `-ImplicitCastExpr 0x56283d567758 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x56283d567718 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x56283d554030 'pollfd' 'int'
|   | `-UnaryOperator 0x56283d5677b8 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x56283d567798 <col:35> 'int' 1
|   `-CompoundStmt 0x56283d567830 <line:64:2, line:65:2>
|-FieldDecl 0x56283d554208 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x56283d554268 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x56283d55b370 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x56283d5660b0 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x56283d5662e8 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x56283d566118 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x56283d566190 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x56283d566208 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x56283d5664d0 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x56283d5663b8 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x56283d566438 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x56283d566718 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x56283d566598 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x56283d566618 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x56283d566928 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x56283d5667d8 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x56283d566850 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x56283d566a78 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x56283d5669e8 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x56283d566b40 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x56283d566c00 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x56283d566cc8 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x56283d566cc8
| `-ParmVarDecl 0x56283d566dd8 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x56283d566e78 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x56283d566e78
  `-ParmVarDecl 0x56283d566f88 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4ef6c8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d4ef7e8 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x56283d4ef878 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x56283d4ef900 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x56283d4ef9f0 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x56283d4efaf0 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x56283d4efbb0 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x56283d4efc70 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x56283d4efd58 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x56283d4efe78 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x56283d4efe78
| `-ParmVarDecl 0x56283d4eff88 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x56283d56fbc8 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x56283d56fbc8
  `-ParmVarDecl 0x56283d56fcd8 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d5114c8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d5115e8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x56283d511688 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x56283d5116e8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x56283d56f1c8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56283d56f1c8
| `-ParmVarDecl 0x56283d56f2d8 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x56283d56f378 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56283d56f378
| `-ParmVarDecl 0x56283d56f488 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x56283d56f4f8 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x56283d56f4f8
|-CXXMethodDecl 0x56283d56fd78 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56283d56fd78
| `-ParmVarDecl 0x56283d56fe88 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x56283d56fef8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56283d56fef8
| `-ParmVarDecl 0x56283d570008 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x56283d5776c8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x56283d5777a0 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4f15c0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d4f16d8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x56283d4f1768 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x56283d4f17f0 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x56283d4f18b0 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-CXXMethodDecl 0x56283d4f1978 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x56283d4f1a18 <col:45> always_inline
|-CXXMethodDecl 0x56283d4f1b48 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x56283d4f1a80 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x56283d4f1bf0 <col:49> always_inline
|-CXXConstructorDecl 0x56283d4f1ce8 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x56283d4f1ce8
| `-ParmVarDecl 0x56283d4f1df8 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x56283d4f1e98 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x56283d4f1e98
| `-ParmVarDecl 0x56283d4f1fa8 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x56283d56f5e0 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x56283d56f5e0
|-CXXMethodDecl 0x56283d5700a8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x56283d5700a8
| `-ParmVarDecl 0x56283d5701b8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x56283d570228 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x56283d570228
  `-ParmVarDecl 0x56283d570338 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d567ca0 prev 0x56283d552f00 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x56283d567d98 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x56283d567e28 <col:22, col:28> col:22 public
|-EnumDecl 0x56283d567e50 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x56283d567f68 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x56283d567f48 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x56283d567f30 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x56283d567f10 <col:32> 'int' 1
| `-EnumConstantDecl 0x56283d568010 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x56283d567ff0 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x56283d567fd8 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x56283d567fb8 <col:53> 'int' 1000
|-CXXMethodDecl 0x56283d5680b0 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x56283d568170 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56283d568258 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x56283d5703f8 <col:34, col:52>
|   `-ReturnStmt 0x56283d5703e8 <col:36, col:43>
|     `-MemberExpr 0x56283d5703b8 <col:43> 'TimerSet' lvalue ->_timers 0x56283d569f28
|       `-CXXThisExpr 0x56283d5703a8 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x56283d568348 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x56283d570460 <col:46, col:64>
|   `-ReturnStmt 0x56283d570450 <col:48, col:55>
|     `-MemberExpr 0x56283d570420 <col:55> 'const TimerSet' lvalue ->_timers 0x56283d569f28
|       `-CXXThisExpr 0x56283d570410 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56283d568438 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x56283d5704c8 <col:36, col:55>
|   `-ReturnStmt 0x56283d5704b8 <col:38, col:45>
|     `-MemberExpr 0x56283d570488 <col:45> 'SelectSet' lvalue ->_selects 0x56283d569f88
|       `-CXXThisExpr 0x56283d570478 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x56283d568528 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x56283d570530 <col:48, col:67>
|   `-ReturnStmt 0x56283d570520 <col:50, col:57>
|     `-MemberExpr 0x56283d5704f0 <col:57> 'const SelectSet' lvalue ->_selects 0x56283d569f88
|       `-CXXThisExpr 0x56283d5704e0 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56283d5685e8 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x56283d5686d8 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x56283d568848 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x56283d568788 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x56283d568910 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x56283d568d58 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x56283d5689c0 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x56283d568c40 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x56283d568e28 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x56283d568ee8 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x56283d568fa8 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x56283d5690e8 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x56283d569058 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x56283d5691b0 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x56283d569270 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x56283d569330 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x56283d5693f0 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x56283d569530 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56283d5694a0 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56283d5695f8 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x56283d5696b8 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x56283d569758 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x56283d569820 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569870 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d5698c0 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569910 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569960 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d5699b0 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569a00 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569a50 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569aa0 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56283d569af0 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x56283d569b40 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x56283d569c38 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x56283d569ba8 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x56283d569d88 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x56283d569cf8 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x56283d569e30 <line:104:3, col:10> col:3 private
|-FieldDecl 0x56283d569e68 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x56283d569ec8 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x56283d569f28 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x56283d569f88 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x56283d56a008 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x56283d56a078 <col:40, col:50> aligned
|   `-ConstantExpr 0x56283d56a058 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x56283d569fd8 <col:48> 'int' 64
|-FieldDecl 0x56283d56a0e8 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x56283d56a148 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x56283d56a240 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x56283d56a350 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x56283d56a3b0 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x56283d56a430 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x56283d56a4a0 <col:36, col:46> aligned
|   `-ConstantExpr 0x56283d56a480 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x56283d56a400 <col:44> 'int' 64
|-FieldDecl 0x56283d56a518 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x56283d56a578 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x56283d56a5c8 <line:170:3, col:9> col:3 public
|-FieldDecl 0x56283d56a608 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x56283d56a670 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x56283d56a6c0 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x56283d56a868 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x56283d56a6f8 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x56283d56a778 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x56283d56a968 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x56283d56a968
|-CXXMethodDecl 0x56283d56aa70 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x56283d56ab38 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x56283d570628 <col:34, line:217:5>
|   `-ReturnStmt 0x56283d570618 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x56283d570600 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56283d5705d0 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x56283d4fd120
|         `-ImplicitCastExpr 0x56283d5705b8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x56283d570588 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x56283d4fd0b8
|             `-MemberExpr 0x56283d570558 <col:16> 'const TaskLink' lvalue ->_task_link 0x56283d569e68
|               `-CXXThisExpr 0x56283d570548 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56283d56abf8 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x56283d56acb8 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x56283d570d50 <col:39, line:226:5>
|   |-DeclStmt 0x56283d570878 <line:223:9, col:68>
|   | `-VarDecl 0x56283d570650 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x56283d570830 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x56283d570800 <col:24, col:38> '<bound member function type>' .compare_swap 0x56283d0d6150
|   |     | `-MemberExpr 0x56283d5706c8 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x56283d56a0e8
|   |     |   `-CXXThisExpr 0x56283d5706b8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x56283d5707b8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x56283d5707a0 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x56283d570778 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x56283d570758 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x56283d570860 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x56283d5707e0 <col:66> 'int' 0
|   |-CStyleCastExpr 0x56283d5708c0 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56283d570890 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x56283d570650 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x56283d570d30 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x56283d570d00 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x56283d5709d8 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x56283d5709a8 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x56283d570990 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x56283d5708e8 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x56283d570650 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x56283d570968 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x56283d570950 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x56283d570928 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x56283d570908 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x56283d570a38 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x56283d570a18 <col:60> 'int' 0
|       `-CallExpr 0x56283d570c60 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x56283d570c48 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56283d570c28 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x56283d570ca0 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x56283d570b28 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x56283d570cb8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x56283d570b58 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x56283d570cd0 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x56283d570b98 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x56283d570ce8 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x56283d570c10 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x56283d570bf8 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x56283d570bb8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x56283d56e5a0 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x56283d56ad70 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x56283d56e668 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x56283d56e728 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x56283d56e7e8 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x56283d56e8a8 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x56283d56e968 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x56283d56ea60 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x56283d56eac0 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x56283d56eb50 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x56283d56ef18 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x56283d56ef18
| `-ParmVarDecl 0x56283d56f028 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x56283d56f6e8 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x56283d56f6e8
  `-ParmVarDecl 0x56283d56f7f8 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4fd430 prev 0x56283d4d5400 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x56283d4fd568 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x56283d4fd5f8 <col:33, col:39> col:33 public
|-EnumDecl 0x56283d4fd620 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x56283d4fd760 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x56283d4fd740 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x56283d4fd720 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x56283d4fd6e0 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x56283d4fd700 <col:26> 'int' 16
| `-EnumConstantDecl 0x56283d4fd830 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x56283d4fd810 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x56283d4fd7f0 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x56283d4fd7b0 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x56283d4fd7d0 <col:47> 'int' 31
|-EnumDecl 0x56283d4fd880 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x56283d4fd9c0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x56283d4fdae0 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4fd9a0 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x56283d4fd980 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x56283d4fd940 <col:26> 'int' 1
| |       `-IntegerLiteral 0x56283d4fd960 <col:29> 'int' 15
| `-EnumConstantDecl 0x56283d4fda90 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x56283d4fdaf8 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d4fda70 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x56283d4fda50 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x56283d4fda10 <col:51> 'int' 1
|         `-IntegerLiteral 0x56283d4fda30 <col:54> 'int' 10
|-CXXConstructorDecl 0x56283d4fdcc8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x56283d4fdb20 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x56283d4fdba0 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x56283d4fde20 <line:86:5, col:27> col:12 Task 'void (Element *)' inline
| `-ParmVarDecl 0x56283d4fdd90 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x56283d4fdf18 <line:91:5, col:11> col:5 ~Task 'void ()' noexcept-unevaluated 0x56283d4fdf18
|-CXXMethodDecl 0x56283d50f530 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x56283d512628 <col:42, line:100:5>
|   `-ReturnStmt 0x56283d512618 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x56283d512600 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x56283d5125d0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x56283d511350
|         `-CXXThisExpr 0x56283d5125c0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56283d50f5f8 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x56283d5126a8 <col:36, line:105:5>
|   `-ReturnStmt 0x56283d512698 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x56283d512680 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56283d512650 <col:16> 'void *const' lvalue ->_thunk 0x56283d5113b8
|         `-CXXThisExpr 0x56283d512640 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56283d50f6b8 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x56283d512728 <col:37, line:110:5>
|   `-ReturnStmt 0x56283d512718 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x56283d512700 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x56283d5126d0 <col:16> 'Element *const' lvalue ->_owner 0x56283d511478
|         `-CXXThisExpr 0x56283d5126c0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56283d50f778 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x56283d50f840 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x56283d50f900 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x56283d50f9c0 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x56283d512810 <col:35, line:137:5>
|   `-ReturnStmt 0x56283d512800 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x56283d5127c8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x56283d512798 <col:16, col:24> '<bound member function type>' ->router 0x56283d4e68c0
|         `-ImplicitCastExpr 0x56283d5127e8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x56283d512780 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x56283d512750 <col:16> 'Element *const' lvalue ->_owner 0x56283d511478
|               `-CXXThisExpr 0x56283d512740 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56283d50fa80 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x56283d50fc40 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56283d50fb30 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56283d50fba8 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x56283d50fe48 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x56283d50fd00 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x56283d50fd78 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x56283d50ff18 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x56283d512920 <col:35, line:181:5>
|   `-ReturnStmt 0x56283d512910 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x56283d5128f8 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x56283d5128e0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x56283d5128b0 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x56283d510f88
|           `-MemberExpr 0x56283d512868 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|             `-MemberExpr 0x56283d512838 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x56283d5112d8
|               `-CXXThisExpr 0x56283d512828 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56283d50ffd8 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x56283d512a38 <col:30, line:192:5>
|   `-BinaryOperator 0x56283d512a18 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x56283d5129c0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56283d510f88
|     | `-MemberExpr 0x56283d512978 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|     |   `-MemberExpr 0x56283d512948 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56283d5112d8
|     |     `-CXXThisExpr 0x56283d512938 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x56283d512a00 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x56283d5129f0 <col:32> 'bool' false
|-CXXMethodDecl 0x56283d510098 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x56283d512d88 <col:30, line:206:5>
|   |-BinaryOperator 0x56283d512b30 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x56283d512ad8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56283d510f88
|   | | `-MemberExpr 0x56283d512a90 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|   | |   `-MemberExpr 0x56283d512a60 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56283d5112d8
|   | |     `-CXXThisExpr 0x56283d512a50 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x56283d512b18 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x56283d512b08 <col:32> 'bool' true
|   |-CallExpr 0x56283d512bd0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x56283d512bb8 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56283d512b98 <col:9> 'void ()' lvalue Function 0x56283d4ef280 'click_fence' 'void ()'
|   `-IfStmt 0x56283d512d70 <line:204:9, line:205:32>
|     |-BinaryOperator 0x56283d512cb0 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x56283d512c80 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x56283d512c30 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x56283d5116e8
|     | |   `-MemberExpr 0x56283d512c00 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x56283d511760
|     | |     `-CXXThisExpr 0x56283d512bf0 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x56283d512c98 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x56283d512c60 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x56283d512d30 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x56283d512ce0 <col:13> '<bound member function type>' ->complete_schedule 0x56283d512160
|       | `-CXXThisExpr 0x56283d512cd0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x56283d512d58 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x56283d512d10 <col:31> 'int' 0
|-CXXMethodDecl 0x56283d510158 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x56283d512eb0 <col:35, line:240:5>
|   `-BinaryOperator 0x56283d512e90 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x56283d512e38 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56283d510f88
|     | `-MemberExpr 0x56283d512df0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|     |   `-MemberExpr 0x56283d512dc0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56283d5112d8
|     |     `-CXXThisExpr 0x56283d512db0 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x56283d512e78 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x56283d512e68 <col:32> 'bool' true
|-CXXMethodDecl 0x56283d510218 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x56283d5130c8 <col:37, line:253:5>
|   |-BinaryOperator 0x56283d512fa8 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x56283d512f50 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56283d510f88
|   | | `-MemberExpr 0x56283d512f08 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|   | |   `-MemberExpr 0x56283d512ed8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56283d5112d8
|   | |     `-CXXThisExpr 0x56283d512ec8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x56283d512f90 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x56283d512f80 <col:32> 'bool' false
|   `-BinaryOperator 0x56283d5130a8 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x56283d513050 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x56283d510fe8
|     | `-MemberExpr 0x56283d513008 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|     |   `-MemberExpr 0x56283d512fd8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56283d5112d8
|     |     `-CXXThisExpr 0x56283d512fc8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x56283d513090 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x56283d513080 <col:41> 'bool' true
|-CXXMethodDecl 0x56283d5102d8 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x56283d513248 <col:37, line:264:5>
|   |-BinaryOperator 0x56283d5131c8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x56283d513170 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x56283d510fe8
|   | | `-MemberExpr 0x56283d513128 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56283d5110a8
|   | |   `-MemberExpr 0x56283d5130f8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56283d5112d8
|   | |     `-CXXThisExpr 0x56283d5130e8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x56283d5131b0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x56283d5131a0 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x56283d513228 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x56283d5131f8 <col:9> '<bound member function type>' ->reschedule 0x56283d510098
|       `-CXXThisExpr 0x56283d5131e8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x56283d510420 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x56283d510390 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x56283d5104f0 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x56283d510638 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x56283d5105a8 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x56283d510788 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x56283d5106f8 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x56283d510850 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x56283d510910 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x56283d5109b0 <col:53> "" ""
|-CXXMethodDecl 0x56283d510a48 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x56283d510ae8 <col:47> "" ""
|-AccessSpecDecl 0x56283d510b58 <line:303:3, col:10> col:3 private
|-FieldDecl 0x56283d510b98 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x56283d510c00 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x56283d510c50 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d510d68 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x56283d510df8 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x56283d510f28 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x56283d510f88 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x56283d510fe8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x56283d575da8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x56283d575e80 <col:9> col:9 implicit ~ 'void ()' inline default trivial noexcept-unevaluated 0x56283d575e80
| | |-CXXConstructorDecl 0x56283d576138 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x56283d576138
| | | `-ParmVarDecl 0x56283d576248 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x56283d5762e8 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x56283d5762e8
| |   `-ParmVarDecl 0x56283d5763f8 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x56283d5110a8 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x56283d511108 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x56283d5110a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x56283d510f28 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x56283d511160 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x56283d5110a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x56283d510f88 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x56283d5111b8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x56283d5110a8 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x56283d510fe8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x56283d511210 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x56283d575cb8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56283d577668 <col:11>
| |-CXXConstructorDecl 0x56283d575f88 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x56283d575f88
| | `-ParmVarDecl 0x56283d576098 <col:11> col:11 'const Task::Status &'
| `-CXXConstructorDecl 0x56283d576498 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x56283d576498
|   `-ParmVarDecl 0x56283d5775f8 <col:11> col:11 'Task::Status &&'
|-FieldDecl 0x56283d5112d8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x56283d511350 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x56283d5113b8 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56283d511418 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x56283d511478 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x56283d5114c8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d5115e8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x56283d511688 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x56283d5116e8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x56283d56f1c8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56283d56f1c8
| | `-ParmVarDecl 0x56283d56f2d8 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x56283d56f378 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56283d56f378
| | `-ParmVarDecl 0x56283d56f488 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x56283d56f4f8 <col:11> col:11 implicit ~Pending 'void ()' inline default trivial noexcept-unevaluated 0x56283d56f4f8
| |-CXXMethodDecl 0x56283d56fd78 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56283d56fd78
| | `-ParmVarDecl 0x56283d56fe88 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x56283d56fef8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56283d56fef8
| | `-ParmVarDecl 0x56283d570008 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x56283d5776c8 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x56283d5777a0 <col:11>
|-FieldDecl 0x56283d511760 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x56283d5118a8 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x56283d5117e8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x56283d511a58 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x56283d511968 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x56283d511b20 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x56283d511be0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x56283d511ca0 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x56283d513358 <col:41, line:355:5>
|   `-ReturnStmt 0x56283d513348 <line:354:9, col:38>
|     `-BinaryOperator 0x56283d513328 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x56283d5132f8 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x56283d5132a8 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x56283d5116e8
|       |   `-MemberExpr 0x56283d513278 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x56283d511760
|       |     `-CXXThisExpr 0x56283d513268 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x56283d513310 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x56283d5132d8 <col:38> 'int' 0
|-CXXMethodDecl 0x56283d511d60 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x56283d511ea0 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x56283d511e10 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x56283d512018 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x56283d511f58 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x56283d512160 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x56283d5120d0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x56283d512228 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x56283d5123f0 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x56283d5122d8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x56283d512358 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x56283d5124f0 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x56283d512580 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | ActiveNotifier::task_or_signal_t
         0 |   class Task * t
         0 |   Notifier::callback_type f
         0 |   void * v
         0 |   uintptr_t p
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d586108 <../dummy_inc/click/notifier.hh:151:13, line:156:5> line:151:13 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-FieldDecl 0x56283d586238 <line:152:2, col:8> col:8 referenced t 'Task *'
|-FieldDecl 0x56283d586298 <line:153:2, col:16> col:16 referenced f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
|-FieldDecl 0x56283d586300 <line:154:2, col:8> col:8 referenced v 'void *'
`-FieldDecl 0x56283d586360 <line:155:2, col:12> col:12 referenced p 'uintptr_t':'unsigned long'

Layout: <CGRecordLayout
  LLVMType:%"union.ActiveNotifier::task_or_signal_t" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d5851e0 <../dummy_inc/click/notifier.hh:132:1, line:167:1> line:132:7 referenced class ActiveNotifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-public 'Notifier'
|-CXXRecordDecl 0x56283d585338 <col:1, col:7> col:7 implicit referenced class ActiveNotifier
|-AccessSpecDecl 0x56283d5853c8 <col:42, col:48> col:42 public
|-CXXConstructorDecl 0x56283d5854d8 <line:134:5, col:45> col:5 used ActiveNotifier 'void (Notifier::SearchOp)'
| `-ParmVarDecl 0x56283d585400 <col:20, col:34> col:29 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x56283d586cf0 <col:34> 'Notifier::SearchOp' EnumConstant 0x56283d57e760 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x56283d5855d0 <line:135:5, col:21> col:5 used ~ActiveNotifier 'void () noexcept'
| `-Overrides: [ 0x56283d57eee8 Notifier::~Notifier 'void () noexcept' ]
|-CXXMethodDecl 0x56283d5857e0 <line:137:5, col:55> col:9 add_activate_callback 'int (Notifier::callback_type, void *)'
| |-Overrides: [ 0x56283d581f80 Notifier::add_activate_callback 'int (Notifier::callback_type, void *)' ]
| |-ParmVarDecl 0x56283d5856c0 <col:31, col:45> col:45 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d585740 <col:48, col:54> col:54 v 'void *'
|-CXXMethodDecl 0x56283d5859b8 <line:138:5, col:59> col:10 remove_activate_callback 'void (Notifier::callback_type, void *)'
| |-Overrides: [ 0x56283d5821d8 Notifier::remove_activate_callback 'void (Notifier::callback_type, void *)' ]
| |-ParmVarDecl 0x56283d5858a0 <col:35, col:49> col:49 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d585920 <col:52, col:58> col:58 v 'void *'
|-CXXMethodDecl 0x56283d585c78 <line:139:5, col:70> col:10 listeners 'void (Vector<Task *> &) const'
| |-ParmVarDecl 0x56283d585b50 <col:20, col:35> col:35 v 'Vector<Task *> &'
| `-DeprecatedAttr 0x56283d585d20 <col:59> "" ""
|-CXXMethodDecl 0x56283d585eb0 <line:141:5, col:61> col:17 used set_active 'void (bool, bool)' inline
| |-ParmVarDecl 0x56283d585da0 <col:28, col:33> col:33 active 'bool'
| `-ParmVarDecl 0x56283d585e18 <col:41, col:57> col:46 schedule 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d586d10 <col:57> 'bool' true
|-CXXMethodDecl 0x56283d585f80 <line:142:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x56283d586040 <line:143:5, col:23> col:17 sleep 'void ()' inline
|-AccessSpecDecl 0x56283d5860e0 <line:149:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d586108 <line:151:13, line:156:5> line:151:13 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-FieldDecl 0x56283d586238 <line:152:2, col:8> col:8 referenced t 'Task *'
| |-FieldDecl 0x56283d586298 <line:153:2, col:16> col:16 referenced f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| |-FieldDecl 0x56283d586300 <line:154:2, col:8> col:8 referenced v 'void *'
| `-FieldDecl 0x56283d586360 <line:155:2, col:12> col:12 referenced p 'uintptr_t':'unsigned long'
|-TypedefDecl 0x56283d586428 <line:151:5, line:156:7> col:7 referenced task_or_signal_t 'union task_or_signal_t':'ActiveNotifier::task_or_signal_t'
| `-ElaboratedType 0x56283d5863d0 'union task_or_signal_t' sugar
|   `-RecordType 0x56283d5861a0 'ActiveNotifier::task_or_signal_t'
|     `-CXXRecord 0x56283d586108 ''
|-FieldDecl 0x56283d5864a8 <line:158:5, col:11> col:11 referenced _listener1 'Task *'
|-FieldDecl 0x56283d586588 <line:159:5, col:23> col:23 referenced _listeners 'ActiveNotifier::task_or_signal_t *'
|-CXXMethodDecl 0x56283d586708 <line:161:5, col:46> col:9 listener_add 'int (Notifier::callback_type, void *)'
| |-ParmVarDecl 0x56283d5865e8 <col:22, col:36> col:36 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d586668 <col:39, col:45> col:45 v 'void *'
|-CXXMethodDecl 0x56283d5868e8 <line:162:5, col:49> col:9 listener_remove 'int (Notifier::callback_type, void *)'
| |-ParmVarDecl 0x56283d5867c8 <col:25, col:39> col:39 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56283d586848 <col:42, col:48> col:48 v 'void *'
|-CXXConstructorDecl 0x56283d586a98 <line:164:5, col:41> col:5 ActiveNotifier 'void (const ActiveNotifier &)'
| `-ParmVarDecl 0x56283d5869d8 <col:20, col:40> col:41 'const ActiveNotifier &'
`-CXXMethodDecl 0x56283d586c48 <line:165:5, col:52> col:21 operator= 'ActiveNotifier &(const ActiveNotifier &)'
  `-ParmVarDecl 0x56283d586b58 <col:31, col:51> col:52 'const ActiveNotifier &'

Layout: <CGRecordLayout
  LLVMType:%class.ActiveNotifier = type { %class.Notifier.base, %class.Task*, %"union.ActiveNotifier::task_or_signal_t"* }
  NonVirtualBaseLLVMType:%class.ActiveNotifier = type { %class.Notifier.base, %class.Task*, %"union.ActiveNotifier::task_or_signal_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class DelayShaper
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       112 |   class ActiveNotifier (base)
       112 |     class Notifier (primary base)
       112 |       (Notifier vtable pointer)
       120 |       class NotifierSignal _signal
       120 |         union NotifierSignal::vmvalue _v
       120 |           class atomic_uint32_t * v1
       120 |           struct NotifierSignal::vmpair * vm
       128 |         uint32_t _mask
       136 |       enum Notifier::SearchOp _search_op
       144 |     class Task * _listener1
       152 |     ActiveNotifier::task_or_signal_t * _listeners
       160 |   class Packet * _p
       168 |   class Timestamp _delay
       168 |     union Timestamp::rep_t _t
       168 |       int64_t x
       176 |   class Timer _timer
       176 |     int _schedpos1
       184 |     class Timestamp _expiry_s
       184 |       union Timestamp::rep_t _t
       184 |         int64_t x
       192 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       192 |       TimerCallback callback
       200 |     void * _thunk
       208 |     class Element * _owner
       216 |     class RouterThread * _thread
       224 |   class NotifierSignal _upstream_signal
       224 |     union NotifierSignal::vmvalue _v
       224 |       class atomic_uint32_t * v1
       224 |       struct NotifierSignal::vmpair * vm
       232 |     uint32_t _mask
       240 |   class ActiveNotifier _notifier
       240 |     class Notifier (primary base)
       240 |       (Notifier vtable pointer)
       248 |       class NotifierSignal _signal
       248 |         union NotifierSignal::vmvalue _v
       248 |           class atomic_uint32_t * v1
       248 |           struct NotifierSignal::vmpair * vm
       256 |         uint32_t _mask
       264 |       enum Notifier::SearchOp _search_op
       272 |     class Task * _listener1
       280 |     ActiveNotifier::task_or_signal_t * _listeners
           | [sizeof=288, dsize=288, align=8,
           |  nvsize=288, nvalign=8]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d490778 prev 0x56283d487ea0 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d490870 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56283d490960 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56283d490a10 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56283d490b98 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56283d490d18 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56283d490e98 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56283d4a9858 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56283d4aa0c8 <col:11>
|-CXXDestructorDecl 0x56283d4a9930 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56283d4a9a68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56283d4a9a68
| `-ParmVarDecl 0x56283d4a9b78 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56283d4a9c18 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56283d4a9c18
| `-ParmVarDecl 0x56283d4a9d28 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56283d4aca58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d4acb68 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56283d4acde8 <col:11>
|   `-ReturnStmt 0x56283d4acdd8 <col:11>
|     `-UnaryOperator 0x56283d4acdc0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d4acdb0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56283d4acbd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56283d4acbd8
  `-ParmVarDecl 0x56283d4acce8 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d490f00 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d491018 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56283d4910b8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56283d491120 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56283d491188 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56283d4911f0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56283d491250 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56283d491310 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56283d491370 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56283d4a12c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56283d4a9768 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56283d4910b8 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56283d4aa0d8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56283d4aa130 <col:12>
|-CXXConstructorDecl 0x56283d4a9d98 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56283d4a9d98
| `-ParmVarDecl 0x56283d4a9ea8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56283d4a9f48 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56283d4a9f48
| `-ParmVarDecl 0x56283d4aa058 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56283d4ac140 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4815f0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d481708 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56283d481798 <col:16, col:22> col:16 public
|-EnumDecl 0x56283d4817c0 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56283d4818c0 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56283d4819a0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d4818a0 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56283d481880 <col:21> 'int' 28
| `-EnumConstantDecl 0x56283d481950 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56283d4819b8 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d481930 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56283d481910 <col:22> 'int' 64
|-CXXMethodDecl 0x56283d481cf8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56283d4819e0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56283d481a60 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56283d481ad8 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56283d481b50 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56283d481db8 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56283d481fb8 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56283d481e30 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56283d481ea8 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56283d482068 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56283d4821c8 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56283d4820d8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56283d482270 <col:72> warn_unused_result ""
|-TypedefDecl 0x56283d4825a0 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56283d482530 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56283d4824d0 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56283d482490 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56283ceab2d0 'void'
|       |-PointerType 0x56283d101c60 'unsigned char *'
|       | `-BuiltinType 0x56283ceab3d0 'unsigned char'
|       |-TypedefType 0x56283cf53b00 'size_t' sugar
|       | |-Typedef 0x56283cf1bb20 'size_t'
|       | `-BuiltinType 0x56283ceab430 'unsigned long'
|       `-PointerType 0x56283ceabad0 'void *'
|         `-BuiltinType 0x56283ceab2d0 'void'
|-CXXMethodDecl 0x56283d482a18 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56283d482610 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56283d482688 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56283d482720 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56283d4827a0 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56283d4a2750 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56283d4a2738 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56283d4a2700 <col:58> 'int' 0
| |-ParmVarDecl 0x56283d482820 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56283d4a2778 <col:76> 'int' 0
| |-ParmVarDecl 0x56283d4828a0 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56283d4a2798 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56283d482ae8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56283d482b68 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56283d482c28 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56283d482cc8 <col:20>
| `-OptimizeNoneAttr 0x56283d482d20 <col:30>
|-CXXMethodDecl 0x56283d482d98 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56283d482e38 <col:20>
| `-OptimizeNoneAttr 0x56283d482e90 <col:30>
|-CXXMethodDecl 0x56283d482f08 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56283d482fa8 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56283d483058 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56283d4830f8 <col:20>
| |-OptimizeNoneAttr 0x56283d483150 <col:30>
| `-WarnUnusedResultAttr 0x56283d483178 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56283d4831d0 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56283d483270 <col:20>
| `-OptimizeNoneAttr 0x56283d4832c8 <col:30>
|-CXXMethodDecl 0x56283d483318 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56283d4833b8 <col:20>
| `-OptimizeNoneAttr 0x56283d483410 <col:30>
|-CXXMethodDecl 0x56283d483458 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56283d4834f8 <col:20>
| `-OptimizeNoneAttr 0x56283d483550 <col:30>
|-CXXMethodDecl 0x56283d483598 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d483658 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d483720 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56283d4837e8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56283d4838a8 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d4839c8 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56283d4a2860 <col:54, line:99:5>
|   `-ReturnStmt 0x56283d4a2850 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56283d4a2838 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56283d4a2808 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56283d4a15f8
|         `-CXXThisExpr 0x56283d4a27f8 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56283d483b68 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56283d483a78 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56283d4a2910 <col:67, line:103:5>
|   `-BinaryOperator 0x56283d4a28f0 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56283d4a2888 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56283d4a15f8
|     | `-CXXThisExpr 0x56283d4a2878 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56283d4a28d8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4a28b8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56283d483a78 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56283d483c60 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56283d4a2990 <col:33, line:107:5>
|   `-ReturnStmt 0x56283d4a2980 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56283d4a2968 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56283d4a2938 <col:16> 'void *' lvalue ->_destructor_argument 0x56283d4a1660
|         `-CXXThisExpr 0x56283d4a2928 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56283d483d20 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56283d4a2fc0 <col:25, line:113:5>
|   |-ParenExpr 0x56283d4a2d08 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56283d4a2cd8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a2a48 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56283d4a2a20 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56283d4a29e8 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56283d4a29b8 <col:24> '<bound member function type>' ->shared 0x56283d482d98
|   |   |       `-ImplicitCastExpr 0x56283d4a2a08 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56283d4a29a8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56283d4a2aa8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a2a88 <col:42> 'int' 0
|   |   `-CallExpr 0x56283d4a2c38 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a2c20 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a2c00 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a2c78 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a2b18 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56283d4a2c90 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a2b40 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a2ca8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a2b78 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56283d4a2cc0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a2be8 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a2bd0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a2b98 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56283d4a2f08 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56283d4a2d38 <col:2> 'unsigned char *' lvalue ->_head 0x56283d4a1400
|   | | `-CXXThisExpr 0x56283d4a2d28 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56283d4a2ef0 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56283d4a2ed0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56283d4a2d78 <col:10> 'unsigned char *' lvalue ->_data 0x56283d4a1468
|   |     | `-CXXThisExpr 0x56283d4a2d68 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56283d4a2eb8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56283d4a2e98 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56283d4a2db8 <col:18> 'unsigned char *' lvalue ->_tail 0x56283d4a14d0
|   |         | `-CXXThisExpr 0x56283d4a2da8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56283d4a2e80 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56283d4a2e60 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56283d4a2df8 <col:26> 'unsigned char *' lvalue ->_end 0x56283d4a1538
|   |             | `-CXXThisExpr 0x56283d4a2de8 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56283d4a2e48 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56283d4a2e28 <col:33> 'int' 0
|   `-BinaryOperator 0x56283d4a2fa0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56283d4a2f38 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56283d4a15f8
|     | `-CXXThisExpr 0x56283d4a2f28 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56283d4a2f88 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56283d4a2f68 <col:16> 'int' 0
|-CXXMethodDecl 0x56283d483e60 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56283d483dd0 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d483f08 <col:20>
| |-OptimizeNoneAttr 0x56283d483f60 <col:30>
| `-WarnUnusedResultAttr 0x56283d483f88 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56283d484058 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56283d483fc8 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d484100 <col:20>
| |-OptimizeNoneAttr 0x56283d484158 <col:30>
| `-WarnUnusedResultAttr 0x56283d484180 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56283d4842b8 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56283d4841c0 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56283d484360 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56283d484460 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56283d4843d0 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d484508 <col:20>
| `-OptimizeNoneAttr 0x56283d484560 <col:30>
|-CXXMethodDecl 0x56283d484628 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56283d484598 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56283d4846d0 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56283d4847d0 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56283d484740 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56283d484878 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56283d484978 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56283d4848e8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d484a20 <col:20>
| `-OptimizeNoneAttr 0x56283d484a78 <col:30>
|-CXXMethodDecl 0x56283d484c08 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56283d484ab8 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56283d484b30 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56283d4a27b8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56283d484cb8 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56283d484eb8 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56283d484d30 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56283d484da8 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4850c8 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56283d484f78 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56283d484ff0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4852d8 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56283d485188 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56283d485208 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56283d4a27c8 <col:39> 'int' 0
|-CXXMethodDecl 0x56283d4853a8 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56283d485470 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56283d485538 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56283d4855f8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d4856c0 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56283d485808 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56283d485778 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56283d4859d8 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56283d4858c8 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56283d485940 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d485aa8 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56283d485b68 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56283d485c08 <col:20>
| `-OptimizeNoneAttr 0x56283d485c60 <col:30>
|-CXXMethodDecl 0x56283d485cb0 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56283d485d50 <col:20>
| `-OptimizeNoneAttr 0x56283d485da8 <col:30>
|-CXXMethodDecl 0x56283d485df8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56283d485eb8 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d485f80 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56283d486020 <col:20>
| `-OptimizeNoneAttr 0x56283d486078 <col:30>
|-CXXMethodDecl 0x56283d4861c8 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56283d4860b8 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56283d486130 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d486318 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56283d486288 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4863e0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56283d4864a0 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56283d486540 <col:20>
| `-OptimizeNoneAttr 0x56283d486598 <col:30>
|-CXXMethodDecl 0x56283d4865e8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56283d486688 <col:20>
| `-OptimizeNoneAttr 0x56283d4866e0 <col:30>
|-CXXMethodDecl 0x56283d486730 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56283d4867f8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56283d486898 <col:20>
| `-OptimizeNoneAttr 0x56283d4868f0 <col:30>
|-CXXMethodDecl 0x56283d486938 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56283d486a58 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56283d486bc8 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56283d486b08 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56283d486cb8 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56283d486d58 <col:20>
| `-OptimizeNoneAttr 0x56283d486db0 <col:30>
|-CXXMethodDecl 0x56283d486e00 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56283d486ec0 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d4870f8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56283d486f70 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56283d486fe8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d4871a8 <col:20>
| `-OptimizeNoneAttr 0x56283d487200 <col:30>
|-CXXMethodDecl 0x56283d4872a8 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56283d487348 <col:20>
| `-OptimizeNoneAttr 0x56283d4873a0 <col:30>
|-CXXMethodDecl 0x56283d4873f0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56283d487490 <col:20>
| `-OptimizeNoneAttr 0x56283d4874e8 <col:30>
|-CXXMethodDecl 0x56283d487530 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56283d4875d0 <col:20>
| `-OptimizeNoneAttr 0x56283d487628 <col:30>
|-CXXMethodDecl 0x56283d487728 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56283d487660 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56283d4877d0 <col:20>
| `-OptimizeNoneAttr 0x56283d487828 <col:30>
|-CXXMethodDecl 0x56283d4879e8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56283d487860 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56283d4878d8 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d487a98 <col:20>
| `-OptimizeNoneAttr 0x56283d487af0 <col:30>
|-CXXMethodDecl 0x56283d487b98 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56283d487cb8 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56283d487dd8 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56283d487e78 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d487ea0 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56283d487fc8 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56283d488068 <col:20>
| `-OptimizeNoneAttr 0x56283d4880c0 <col:30>
|-CXXMethodDecl 0x56283d488168 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56283d488208 <col:20>
| `-OptimizeNoneAttr 0x56283d488260 <col:30>
|-AccessSpecDecl 0x56283d488288 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56283d4882b0 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56283d4883b0 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56283d488400 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d488390 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56283d488370 <col:14> 'int' 48
|-CXXMethodDecl 0x56283d488468 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56283d488508 <col:20>
| `-OptimizeNoneAttr 0x56283d488560 <col:30>
|-CXXMethodDecl 0x56283d4885d8 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56283d488678 <col:20>
| `-OptimizeNoneAttr 0x56283d4886d0 <col:30>
|-CXXMethodDecl 0x56283d488798 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56283d488708 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56283d488938 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56283d488ad8 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56283d4889e8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56283d488b80 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56283d488c80 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56283d489030 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d488c60 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d488c40 <col:9> 'int' 0
| |-EnumConstantDecl 0x56283d488d10 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56283d489048 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d488cf0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56283d488cd0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56283d488da0 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56283d489060 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d488d80 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56283d488d60 <col:14> 'int' 2
| |-EnumConstantDecl 0x56283d488e30 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56283d489078 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d488e10 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56283d488df0 <col:14> 'int' 3
| |-EnumConstantDecl 0x56283d488ec0 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56283d489090 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d488ea0 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56283d488e80 <col:13> 'int' 4
| |-EnumConstantDecl 0x56283d488f50 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56283d4890a8 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d488f30 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56283d488f10 <col:13> 'int' 5
| `-EnumConstantDecl 0x56283d488fe0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56283d4890c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d488fc0 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56283d488fa0 <col:14> 'int' 6
|-CXXMethodDecl 0x56283d489128 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56283d4891c8 <col:20>
| `-OptimizeNoneAttr 0x56283d489220 <col:30>
|-CXXMethodDecl 0x56283d489318 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56283d489258 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56283d4893c0 <col:20>
| `-OptimizeNoneAttr 0x56283d489440 <col:30>
|-CXXMethodDecl 0x56283d4894b8 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56283d4895e0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56283d489758 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56283d489690 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56283d489820 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56283d4898e8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56283d489a28 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56283d489998 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56283d489ad0 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56283d489bd0 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56283d489dd0 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d489bb0 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d489b90 <col:23> 'int' 0
| |-EnumConstantDecl 0x56283d489c60 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56283d489de8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d489c40 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56283d489c20 <col:45> 'int' 4
| |-EnumConstantDecl 0x56283d489cf0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56283d489e00 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d489cd0 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d489cb0 <col:24> 'int' 0
| `-EnumConstantDecl 0x56283d489d80 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56283d489e18 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d489d60 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56283d489d40 <col:47> 'int' 16
|-CXXMethodDecl 0x56283d489e78 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56283d489fe8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56283d489f28 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56283d48a090 <col:20>
| `-OptimizeNoneAttr 0x56283d48a0e8 <col:30>
|-CXXMethodDecl 0x56283d48a138 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56283d4a30e0 <col:18, col:36>
|   `-ReturnStmt 0x56283d4a30d0 <col:20, col:33>
|     `-ImplicitCastExpr 0x56283d4a30b8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56283d4a3098 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56283d4a3068 <col:27> '<bound member function type>' ->xanno 0x56283d488168
|           `-CXXThisExpr 0x56283d4a3058 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56283d48a230 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56283d4a31f0 <col:30, col:48>
|   `-ReturnStmt 0x56283d4a31e0 <col:32, col:45>
|     `-ImplicitCastExpr 0x56283d4a31c8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56283d4a31a8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56283d4a3178 <col:39> '<bound member function type>' ->xanno 0x56283d487fc8
|           `-CXXThisExpr 0x56283d4a3168 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56283d48a318 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56283d4a3388 <col:24, col:50>
|   `-ReturnStmt 0x56283d4a3378 <col:26, col:47>
|     `-UnaryOperator 0x56283d4a3360 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56283d4a3340 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56283d4a3328 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56283d4a32d8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56283d490a10
|         |   `-CXXMemberCallExpr 0x56283d4a32b8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56283d4a3288 <col:34> '<bound member function type>' ->xanno 0x56283d488168
|         |       `-CXXThisExpr 0x56283d4a3278 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56283d4a3308 <col:46> 'int' 0
|-CXXMethodDecl 0x56283d48a408 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56283d4a3520 <col:36, col:62>
|   `-ReturnStmt 0x56283d4a3510 <col:38, col:59>
|     `-UnaryOperator 0x56283d4a34f8 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56283d4a34d8 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56283d4a34c0 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56283d4a3470 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56283d490a10
|         |   `-CXXMemberCallExpr 0x56283d4a3450 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56283d4a3420 <col:46> '<bound member function type>' ->xanno 0x56283d487fc8
|         |       `-CXXThisExpr 0x56283d4a3410 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56283d4a34a0 <col:58> 'int' 0
|-CXXMethodDecl 0x56283d48a528 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56283d4a36b8 <col:26, col:53>
|   `-ReturnStmt 0x56283d4a36a8 <col:28, col:50>
|     `-UnaryOperator 0x56283d4a3690 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56283d4a3670 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56283d4a3658 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56283d4a3608 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56283d490d18
|         |   `-CXXMemberCallExpr 0x56283d4a35e8 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56283d4a35b8 <col:36> '<bound member function type>' ->xanno 0x56283d488168
|         |       `-CXXThisExpr 0x56283d4a35a8 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56283d4a3638 <col:49> 'int' 0
|-CXXMethodDecl 0x56283d48a648 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56283d4a3888 <col:38, col:65>
|   `-ReturnStmt 0x56283d4a3878 <col:40, col:62>
|     `-UnaryOperator 0x56283d4a3860 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56283d4a3840 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56283d4a3828 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56283d4a37a0 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56283d490d18
|         |   `-CXXMemberCallExpr 0x56283d4a3780 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56283d4a3750 <col:48> '<bound member function type>' ->xanno 0x56283d487fc8
|         |       `-CXXThisExpr 0x56283d4a3740 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56283d4a37d0 <col:61> 'int' 0
|-CXXMethodDecl 0x56283d48a7f8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56283d48a700 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56283d4a3f58 <col:34, line:463:5>
|   |-ParenExpr 0x56283d4a3da0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56283d4a3d70 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a39d8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a39a8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a38f8 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a38e0 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a38a0 <col:23> 'int' lvalue ParmVar 0x56283d48a700 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a38c0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a3988 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a3958 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a3918 <col:33> 'int' lvalue ParmVar 0x56283d48a700 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56283d4a3970 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56283d4a3938 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56283d4a3a38 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a3a18 <col:56> 'int' 0
|   |   `-CallExpr 0x56283d4a3cd0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a3cb8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a3c98 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a3d10 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a3b28 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56283d4a3d28 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a3b58 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a3d40 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a3b90 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56283d4a3d58 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a3c80 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a3c68 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a3c28 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56283d4a3f48 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56283d4a3f30 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56283d4a3f10 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56283d4a3ee0 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56283d4a3e90 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56283d490a10
|         |   `-CXXMemberCallExpr 0x56283d4a3e70 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56283d4a3e40 <col:9> '<bound member function type>' ->xanno 0x56283d487fc8
|         |       `-CXXThisExpr 0x56283d4a3e30 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56283d4a3ef8 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56283d4a3ec0 <col:21> 'int' lvalue ParmVar 0x56283d48a700 'i' 'int'
|-CXXMethodDecl 0x56283d48aa48 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56283d48a8b8 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56283d48a930 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56283d4a45e8 <col:40, line:472:5>
|   |-ParenExpr 0x56283d4a4400 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56283d4a43d0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a40b0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a4080 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a3fd0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a3fb8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a3f78 <col:23> 'int' lvalue ParmVar 0x56283d48a8b8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a3f98 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a4060 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a4030 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a3ff0 <col:33> 'int' lvalue ParmVar 0x56283d48a8b8 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56283d4a4048 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56283d4a4010 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56283d4a4110 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a40f0 <col:56> 'int' 0
|   |   `-CallExpr 0x56283d4a4330 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a4318 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a42f8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a4370 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a4180 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56283d4a4388 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a41b0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a43a0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a41e8 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56283d4a43b8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a42e0 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a42c8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a4288 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56283d4a45c8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56283d4a4570 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56283d4a4540 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56283d4a44f0 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56283d490a10
|     | |   `-CXXMemberCallExpr 0x56283d4a44d0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56283d4a44a0 <col:2> '<bound member function type>' ->xanno 0x56283d488168
|     | |       `-CXXThisExpr 0x56283d4a4490 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56283d4a4558 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56283d4a4520 <col:14> 'int' lvalue ParmVar 0x56283d48a8b8 'i' 'int'
|     `-ImplicitCastExpr 0x56283d4a45b0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4a4590 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56283d48a930 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56283d48ac08 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56283d48ab10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56283d4a4d68 <col:36, line:485:5>
|   |-ParenExpr 0x56283d4a4ad0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a4aa0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a4780 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a4750 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a4660 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a4648 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a4608 <col:23> 'int' lvalue ParmVar 0x56283d48ab10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a4628 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a4730 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a4718 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a4680 <col:33> 'int' lvalue ParmVar 0x56283d48ab10 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a46f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a46e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a46a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a46c0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56283d4a47e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a47c0 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a4a00 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a49e8 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a49c8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a4a40 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a4850 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56283d4a4a58 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a4888 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a4a70 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a48c0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56283d4a4a88 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a49b0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a4998 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a4958 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56283d4a4d58 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56283d4a4d40 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56283d4a4d28 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56283d4a4cf8 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56283d4a4c98 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56283d4a4c68 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56283d4a4be0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56283d490960
|             |   `-CXXMemberCallExpr 0x56283d4a4bc0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56283d4a4b90 <col:61> '<bound member function type>' ->xanno 0x56283d487fc8
|             |       `-CXXThisExpr 0x56283d4a4b80 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56283d4a4c80 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56283d4a4c10 <col:74> 'int' lvalue ParmVar 0x56283d48ab10 'i' 'int'
|-CXXMethodDecl 0x56283d48ae58 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56283d48acc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56283d48ad40 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56283d4a54b8 <col:42, line:500:5>
|   |-ParenExpr 0x56283d4a5250 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a5220 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a4f00 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a4ed0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a4de0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a4dc8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a4d88 <col:23> 'int' lvalue ParmVar 0x56283d48acc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a4da8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a4eb0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a4e98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a4e00 <col:33> 'int' lvalue ParmVar 0x56283d48acc8 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a4e78 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a4e60 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a4e20 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a4e40 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56283d4a4f60 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a4f40 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a5180 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a5168 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a5148 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a51c0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a4fd0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56283d4a51d8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a5008 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a51f0 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a5040 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56283d4a5208 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a5130 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a5118 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a50d8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56283d4a5498 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56283d4a5448 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56283d4a5418 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56283d4a53c0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56283d4a5390 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56283d4a5340 <col:48, col:57> 'char [48]' lvalue ->c 0x56283d490960
|     |     |   `-CXXMemberCallExpr 0x56283d4a5320 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56283d4a52f0 <col:48> '<bound member function type>' ->xanno 0x56283d488168
|     |     |       `-CXXThisExpr 0x56283d4a52e0 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56283d4a53a8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56283d4a5370 <col:61> 'int' lvalue ParmVar 0x56283d48acc8 'i' 'int'
|     `-ImplicitCastExpr 0x56283d4a5480 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4a5460 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56283d48ad40 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56283d48b018 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56283d48af20 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56283d4a5c18 <col:35, line:513:5>
|   |-ParenExpr 0x56283d4a5928 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a58f8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a5650 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a5620 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a5530 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a5518 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a54d8 <col:23> 'int' lvalue ParmVar 0x56283d48af20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a54f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a5600 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a55e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a5550 <col:33> 'int' lvalue ParmVar 0x56283d48af20 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a55c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a55b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a5570 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a5590 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56283d4a56b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a5690 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a5858 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a5840 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a5820 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a5898 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a5720 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56283d4a58b0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a5758 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a58c8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a5790 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56283d4a58e0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a5808 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a57f0 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a57b0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56283d4a5c08 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56283d4a5bf0 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56283d4a5bd8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56283d4a5ba8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56283d4a5b20 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56283d4a5af0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56283d4a5aa0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56283d490960
|             |   `-CXXMemberCallExpr 0x56283d4a5a80 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56283d4a5a50 <col:60> '<bound member function type>' ->xanno 0x56283d487fc8
|             |       `-CXXThisExpr 0x56283d4a5a40 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56283d4a5b08 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56283d4a5ad0 <col:73> 'int' lvalue ParmVar 0x56283d48af20 'i' 'int'
|-CXXMethodDecl 0x56283d48b268 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56283d48b0d8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56283d48b150 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56283d4a62f8 <col:41, line:528:5>
|   |-ParenExpr 0x56283d4a6088 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a6058 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a5db0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a5d80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a5c90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a5c78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a5c38 <col:23> 'int' lvalue ParmVar 0x56283d48b0d8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a5c58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a5d60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a5d48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a5cb0 <col:33> 'int' lvalue ParmVar 0x56283d48b0d8 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a5d28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a5d10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a5cd0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a5cf0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56283d4a5e10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a5df0 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a5fb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a5fa0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a5f80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a5ff8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a5e80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56283d4a6010 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a5eb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a6028 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a5ef0 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56283d4a6040 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a5f68 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a5f50 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a5f10 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56283d4a62d8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56283d4a6288 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56283d4a6258 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56283d4a61f8 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56283d4a61c8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56283d4a6178 <col:47, col:56> 'char [48]' lvalue ->c 0x56283d490960
|     |     |   `-CXXMemberCallExpr 0x56283d4a6158 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56283d4a6128 <col:47> '<bound member function type>' ->xanno 0x56283d488168
|     |     |       `-CXXThisExpr 0x56283d4a6118 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56283d4a61e0 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56283d4a61a8 <col:60> 'int' lvalue ParmVar 0x56283d48b0d8 'i' 'int'
|     `-ImplicitCastExpr 0x56283d4a62c0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4a62a0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56283d48b150 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56283d48b428 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56283d48b330 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56283d4a69c8 <col:36, line:541:5>
|   |-ParenExpr 0x56283d4a6768 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a6738 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a6490 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a6460 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a6370 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a6358 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a6318 <col:23> 'int' lvalue ParmVar 0x56283d48b330 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a6338 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a6440 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a6428 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a6390 <col:33> 'int' lvalue ParmVar 0x56283d48b330 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a6408 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a63f0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a63b0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a63d0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56283d4a64f0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a64d0 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a6698 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a6680 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a6660 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a66d8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a6560 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56283d4a66f0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a6598 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a6708 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a65d0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56283d4a6720 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a6648 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a6630 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a65f0 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56283d4a69b8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56283d4a69a0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56283d4a6988 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56283d4a6958 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56283d4a6900 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56283d4a68d0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56283d4a6880 <col:61, col:70> 'char const[48]' lvalue ->c 0x56283d490960
|             |   `-CXXMemberCallExpr 0x56283d4a6860 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56283d4a6830 <col:61> '<bound member function type>' ->xanno 0x56283d487fc8
|             |       `-CXXThisExpr 0x56283d4a6820 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56283d4a68e8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56283d4a68b0 <col:74> 'int' lvalue ParmVar 0x56283d48b330 'i' 'int'
|-CXXMethodDecl 0x56283d48b5f8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56283d48b4e8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56283d48b560 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56283d48b6a8 <col:20>
| `-OptimizeNoneAttr 0x56283d48b700 <col:30>
|-CXXMethodDecl 0x56283d48b838 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56283d48b740 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56283d4a7098 <col:35, line:562:5>
|   |-ParenExpr 0x56283d4a6e38 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a6e08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a6b60 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a6b30 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a6a40 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a6a28 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a69e8 <col:23> 'int' lvalue ParmVar 0x56283d48b740 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a6a08 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a6b10 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a6af8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a6a60 <col:33> 'int' lvalue ParmVar 0x56283d48b740 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a6ad8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a6ac0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a6a80 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a6aa0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56283d4a6bc0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a6ba0 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a6d68 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a6d50 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a6d30 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a6da8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a6c30 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56283d4a6dc0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a6c68 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a6dd8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a6ca0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56283d4a6df0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a6d18 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a6d00 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a6cc0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56283d4a7088 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56283d4a7070 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56283d4a7058 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56283d4a7028 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56283d4a6fd0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56283d4a6fa0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56283d4a6f50 <col:60, col:69> 'char const[48]' lvalue ->c 0x56283d490960
|             |   `-CXXMemberCallExpr 0x56283d4a6f30 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56283d4a6f00 <col:60> '<bound member function type>' ->xanno 0x56283d487fc8
|             |       `-CXXThisExpr 0x56283d4a6ef0 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56283d4a6fb8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56283d4a6f80 <col:73> 'int' lvalue ParmVar 0x56283d48b740 'i' 'int'
|-CXXMethodDecl 0x56283d48ba48 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56283d48b8f8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56283d48b970 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56283d4a7778 <col:41, line:577:5>
|   |-ParenExpr 0x56283d4a7508 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a74d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a7230 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a7200 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a7110 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a70f8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a70b8 <col:23> 'int' lvalue ParmVar 0x56283d48b8f8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a70d8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a71e0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a71c8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a7130 <col:33> 'int' lvalue ParmVar 0x56283d48b8f8 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a71a8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a7190 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a7150 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a7170 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56283d4a7290 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a7270 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a7438 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a7420 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a7400 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a7478 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a7300 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56283d4a7490 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a7338 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a74a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a7370 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56283d4a74c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a73e8 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a73d0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a7390 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56283d4a7758 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56283d4a7708 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56283d4a76d8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56283d4a7678 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56283d4a7648 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56283d4a75f8 <col:47, col:56> 'char [48]' lvalue ->c 0x56283d490960
|     |     |   `-CXXMemberCallExpr 0x56283d4a75d8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56283d4a75a8 <col:47> '<bound member function type>' ->xanno 0x56283d488168
|     |     |       `-CXXThisExpr 0x56283d4a7598 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56283d4a7660 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56283d4a7628 <col:60> 'int' lvalue ParmVar 0x56283d48b8f8 'i' 'int'
|     `-ImplicitCastExpr 0x56283d4a7740 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4a7720 <col:65> 'int32_t':'int' lvalue ParmVar 0x56283d48b970 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56283d48bc08 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56283d48bb10 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56283d4a7ea8 <col:36, line:591:5>
|   |-ParenExpr 0x56283d4a7be8 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a7bb8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a7910 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a78e0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a77f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a77d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a7798 <col:23> 'int' lvalue ParmVar 0x56283d48bb10 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a77b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a78c0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a78a8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a7810 <col:33> 'int' lvalue ParmVar 0x56283d48bb10 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a7888 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a7870 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a7830 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a7850 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56283d4a7970 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a7950 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a7b18 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a7b00 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a7ae0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a7b58 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a79e0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56283d4a7b70 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a7a18 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a7b88 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a7a50 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56283d4a7ba0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a7ac8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a7ab0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a7a70 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56283d4a7e98 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56283d4a7e80 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56283d4a7e68 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56283d4a7e38 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56283d4a7db0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56283d4a7d80 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56283d4a7d30 <col:61, col:70> 'char const[48]' lvalue ->c 0x56283d490960
|             |   `-CXXMemberCallExpr 0x56283d4a7d10 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56283d4a7ce0 <col:61> '<bound member function type>' ->xanno 0x56283d487fc8
|             |       `-CXXThisExpr 0x56283d4a7cd0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56283d4a7d98 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56283d4a7d60 <col:74> 'int' lvalue ParmVar 0x56283d48bb10 'i' 'int'
|-CXXMethodDecl 0x56283d48be58 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56283d48bcc8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56283d48bd40 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56283d4a8588 <col:42, line:606:5>
|   |-ParenExpr 0x56283d4a8318 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56283d4a82e8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a8040 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a8010 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a7f20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a7f08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a7ec8 <col:23> 'int' lvalue ParmVar 0x56283d48bcc8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a7ee8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a7ff0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56283d4a7fd8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a7f40 <col:33> 'int' lvalue ParmVar 0x56283d48bcc8 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a7fb8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a7fa0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a7f60 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56283d4a7f80 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56283d4a80a0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a8080 <col:60> 'int' 0
|   |   `-CallExpr 0x56283d4a8248 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a8230 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a8210 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a8288 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a8110 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56283d4a82a0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a8148 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a82b8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a8180 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56283d4a82d0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a81f8 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a81e0 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a81a0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56283d4a8568 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56283d4a8518 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56283d4a84e8 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56283d4a8488 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56283d4a8458 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56283d4a8408 <col:48, col:57> 'char [48]' lvalue ->c 0x56283d490960
|     |     |   `-CXXMemberCallExpr 0x56283d4a83e8 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56283d4a83b8 <col:48> '<bound member function type>' ->xanno 0x56283d488168
|     |     |       `-CXXThisExpr 0x56283d4a83a8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56283d4a8470 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56283d4a8438 <col:61> 'int' lvalue ParmVar 0x56283d48bcc8 'i' 'int'
|     `-ImplicitCastExpr 0x56283d4a8550 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4a8530 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56283d48bd40 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56283d48bff0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56283d48bf20 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56283d4a8df8 <col:33, line:620:5>
|   |-ParenExpr 0x56283d4a8b70 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56283d4a8b40 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a8790 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a8760 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a8600 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a85e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a85a8 <col:23> 'int' lvalue ParmVar 0x56283d48bf20 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a85c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a8740 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56283d4a8728 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a8620 <col:33> 'int' lvalue ParmVar 0x56283d48bf20 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a8708 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a86f0 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a8640 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56283d4a86c8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56283d4a86b0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56283d4a8678 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56283d4a87f0 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a87d0 <col:79> 'int' 0
|   |   `-CallExpr 0x56283d4a8aa0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a8a88 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a8a68 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a8ae0 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a88d8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56283d4a8af8 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a8920 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a8b10 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a8958 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56283d4a8b28 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a8a50 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a8a38 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a89f8 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56283d4a8de8 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56283d4a8dd0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56283d4a8db8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56283d4a8d88 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56283d4a8d00 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56283d4a8cd0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56283d4a8c80 <col:67, col:76> 'char const[48]' lvalue ->c 0x56283d490960
|             |   `-CXXMemberCallExpr 0x56283d4a8c60 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56283d4a8c30 <col:67> '<bound member function type>' ->xanno 0x56283d487fc8
|             |       `-CXXThisExpr 0x56283d4a8c20 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56283d4a8ce8 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56283d4a8cb0 <col:80> 'int' lvalue ParmVar 0x56283d48bf20 'i' 'int'
|-CXXMethodDecl 0x56283d48c208 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56283d48c0b0 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56283d48c130 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56283d4a9650 <col:45, line:635:5>
|   |-ParenExpr 0x56283d4a93a0 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56283d4a9370 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56283d4a9000 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56283d4a8fd0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56283d4a8e70 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56283d4a8e58 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56283d4a8e18 <col:23> 'int' lvalue ParmVar 0x56283d48c0b0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56283d4a8e38 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56283d4a8fb0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56283d4a8f98 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56283d4a8e90 <col:33> 'int' lvalue ParmVar 0x56283d48c0b0 'i' 'int'
|   |   |     `-BinaryOperator 0x56283d4a8f78 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56283d4a8f60 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56283d4a8eb0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56283d4883b0 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56283d4a8f38 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56283d4a8f20 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56283d4a8ee8 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56283d4a9060 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56283d4a9040 <col:79> 'int' 0
|   |   `-CallExpr 0x56283d4a92d0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56283d4a9280 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56283d4a9260 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56283d4a9310 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a90d0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56283d4a9328 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56283d4a9118 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56283d4a9340 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56283d4a9150 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56283d4a9358 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56283d4a9248 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56283d4a9230 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56283d4a91e8 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56283d4a9630 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56283d4a9598 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56283d4a9568 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56283d4a9510 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56283d4a94e0 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56283d4a9490 <col:54, col:63> 'char [48]' lvalue ->c 0x56283d490960
|     |     |   `-CXXMemberCallExpr 0x56283d4a9470 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56283d4a9440 <col:54> '<bound member function type>' ->xanno 0x56283d488168
|     |     |       `-CXXThisExpr 0x56283d4a9430 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56283d4a94f8 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56283d4a94c0 <col:67> 'int' lvalue ParmVar 0x56283d48c0b0 'i' 'int'
|     `-CXXConstCastExpr 0x56283d4a9600 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56283d4a95e8 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56283d4a95b0 <col:91> 'const void *' lvalue ParmVar 0x56283d48c130 'x' 'const void *'
|-CXXMethodDecl 0x56283d48c2d8 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56283d4a96d8 <col:34, line:640:5>
|   `-ReturnStmt 0x56283d4a96c8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56283d4a96b0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56283d4a9680 <col:16> 'Packet *' lvalue ->_data_packet 0x56283d4a1398
|         `-CXXThisExpr 0x56283d4a9670 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56283d48c418 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56283d48c388 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d4a27e8 <col:46> 'bool' true
|-CXXMethodDecl 0x56283d48c598 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56283d48c4d0 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56283d48c640 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56283d48cdf0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56283d48c740 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48ce60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48c720 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56283d48c700 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56283d4818c0 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56283d48c7d0 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48ce78 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48c7b0 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56283d48c790 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56283d481950 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56283d48c860 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48ce90 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48c840 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56283d48c820 <col:21> 'int' 0
| |-EnumConstantDecl 0x56283d48c8f0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48cea8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48c8d0 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56283d48c8b0 <col:19> 'int' 16
| |-EnumConstantDecl 0x56283d48c980 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48cec0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48c960 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56283d48c940 <col:21> 'int' 16
| |-EnumConstantDecl 0x56283d48ca10 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48ced8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48c9f0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56283d48c9d0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56283d48caa0 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48cef0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48ca80 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56283d48ca60 <col:19> 'int' EnumConstant 0x56283d48c8f0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56283d48cb30 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48cf08 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48cb10 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56283d48caf0 <col:19> 'int' EnumConstant 0x56283d48ca10 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56283d48cc00 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48cf20 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48cbe0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56283d48cbc0 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56283d48cb80 <col:23> 'int' EnumConstant 0x56283d48cb30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56283d48cba0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56283d48ccd0 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56283d48cf38 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d48ccb0 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56283d48cc90 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56283d48cc50 <col:23> 'int' EnumConstant 0x56283d48cb30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56283d48cc70 <col:40> 'int' 4
| `-EnumConstantDecl 0x56283d48cda0 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56283d48cf50 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d48cd80 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56283d48cd60 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56283d48cd20 <col:23> 'int' EnumConstant 0x56283d48cb30 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56283d48cd40 <col:40> 'int' 8
|-CXXMethodDecl 0x56283d48cf90 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56283d48d030 <col:68> "" ""
|-CXXMethodDecl 0x56283d48d0c8 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56283d48d168 <col:45> "" ""
|-CXXMethodDecl 0x56283d48d200 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56283d48d2a0 <col:57> "" ""
|-CXXMethodDecl 0x56283d48d338 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56283d48d3d8 <col:45> "" ""
|-CXXMethodDecl 0x56283d48d470 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56283d48d510 <col:57> "" ""
|-CXXMethodDecl 0x56283d48d5a0 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56283d48d640 <col:51> "" ""
|-CXXMethodDecl 0x56283d48d6d0 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56283d48d770 <col:63> "" ""
|-CXXMethodDecl 0x56283d48d800 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56283d48d8a0 <col:53> "" ""
|-CXXMethodDecl 0x56283d48d930 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56283d48d9d0 <col:65> "" ""
|-CXXMethodDecl 0x56283d48dae8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56283d48da58 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56283d48db90 <col:61> "" ""
|-CXXMethodDecl 0x56283d48dd28 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56283d48dc18 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56283d48dc90 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56283d48ddd8 <col:67> "" ""
|-CXXMethodDecl 0x56283d48def0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56283d48de60 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56283d48df98 <col:63> "" ""
|-CXXMethodDecl 0x56283d48e130 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56283d48e020 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56283d48e098 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56283d48e1e0 <col:69> "" ""
|-CXXMethodDecl 0x56283d48e2f8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56283d48e268 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56283d48e3a0 <col:63> "" ""
|-CXXMethodDecl 0x56283d48e538 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56283d48e428 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56283d48e4a0 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d48e5e8 <col:69> "" ""
|-CXXMethodDecl 0x56283d48e700 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56283d48e670 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56283d48e7a8 <col:62> "" ""
|-CXXMethodDecl 0x56283d48e940 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56283d48e830 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56283d48e8a8 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56283d48e9f0 <col:68> "" ""
|-CXXMethodDecl 0x56283d48eb08 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56283d48ea78 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56283d48ebb0 <col:63> "" ""
|-CXXMethodDecl 0x56283d48ed48 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56283d48ec38 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56283d48ecb0 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56283d48edf8 <col:69> "" ""
|-CXXMethodDecl 0x56283d48ee88 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56283d48ef28 <col:64> "" ""
|-CXXMethodDecl 0x56283d48efb8 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56283d48f058 <col:52> "" ""
|-CXXMethodDecl 0x56283d48f0e8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56283d48f188 <col:67> "" ""
|-CXXMethodDecl 0x56283d48f218 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56283d48f2b8 <col:55> "" ""
|-CXXMethodDecl 0x56283d48f3d0 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56283d48f340 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56283d48f478 <col:58> "" ""
|-CXXMethodDecl 0x56283d48f610 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56283d48f500 <col:33> col:36 'int'
| |-ParmVarDecl 0x56283d48f578 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56283d48f6c0 <col:62> "" ""
|-CXXMethodDecl 0x56283d48f7d8 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56283d48f748 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56283d48f880 <col:58> "" ""
|-CXXMethodDecl 0x56283d48fa18 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56283d48f908 <col:33> col:36 'int'
| |-ParmVarDecl 0x56283d48f980 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56283d48fac8 <col:62> "" ""
|-CXXMethodDecl 0x56283d48fbe0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56283d48fb50 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56283d48fc88 <col:60> "" ""
|-CXXMethodDecl 0x56283d48fe20 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56283d48fd10 <col:34> col:37 'int'
| |-ParmVarDecl 0x56283d48fd88 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56283d48fed0 <col:64> "" ""
|-CXXMethodDecl 0x56283d48ffe8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56283d48ff58 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56283d490090 <col:58> "" ""
|-CXXMethodDecl 0x56283d490228 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56283d490118 <col:33> col:36 'int'
| |-ParmVarDecl 0x56283d490190 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56283d4902d8 <col:62> "" ""
|-CXXMethodDecl 0x56283d4903f0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56283d490360 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56283d490498 <col:59> "" ""
|-CXXMethodDecl 0x56283d490630 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56283d490520 <col:33> col:36 'int'
| |-ParmVarDecl 0x56283d490598 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d4906e0 <col:63> "" ""
|-AccessSpecDecl 0x56283d490750 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d490778 prev 0x56283d487ea0 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d490870 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56283d490960 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56283d490a10 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56283d490b98 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56283d490d18 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56283d490e98 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56283d4a9858 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56283d4aa0c8 <col:11>
| |-CXXDestructorDecl 0x56283d4a9930 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56283d4a9a68 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56283d4a9a68
| | `-ParmVarDecl 0x56283d4a9b78 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56283d4a9c18 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56283d4a9c18
| | `-ParmVarDecl 0x56283d4a9d28 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56283d4aca58 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56283d4acb68 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56283d4acde8 <col:11>
| |   `-ReturnStmt 0x56283d4acdd8 <col:11>
| |     `-UnaryOperator 0x56283d4acdc0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56283d4acdb0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56283d4acbd8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56283d4acbd8
|   `-ParmVarDecl 0x56283d4acce8 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56283d490f00 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d491018 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56283d4910b8 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56283d491120 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56283d491188 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56283d4911f0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56283d491250 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56283d491310 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56283d491370 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56283d4a12c0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56283d4a9768 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56283d4910b8 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56283d4aa0d8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56283d4aa130 <col:12>
| |-CXXConstructorDecl 0x56283d4a9d98 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56283d4a9d98
| | `-ParmVarDecl 0x56283d4a9ea8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56283d4a9f48 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56283d4a9f48
| | `-ParmVarDecl 0x56283d4aa058 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56283d4ac140 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56283d4a1338 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56283d4a1398 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56283d4a1400 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56283d4a1468 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56283d4a14d0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56283d4a1538 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56283d4a1598 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56283d4a15f8 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56283d4a1660 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56283d4a16e8 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56283d4a1338 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56283d4a9700 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56283d4a1598 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56283d4aa140 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56283d4aa1a0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56283d4a1888 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56283d4a17c8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56283d4a1980 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56283d4a1b68 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56283d4a1a70 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56283d4a1e38 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56283d4a1c20 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56283d4a1c98 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56283d4a1d10 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4a2058 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56283d4a1f08 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56283d4a1f80 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56283d4a2328 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56283d4a2118 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56283d4a2190 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56283d4a2208 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56283d4a2480 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56283d4a23f0 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4a25c8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56283d4a2538 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56283d4a26c0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4f81c8 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56283d4f82f8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x56283d4f8de8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4f3d28 prev 0x56283d4d54b0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d4f3e20 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x56283d4f3eb0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x56283d4f3f10 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x56283d4f3fb8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d4f40d8 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x56283d5abd00 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x56283d5abd00
| |-CXXConstructorDecl 0x56283d5abde0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x56283d5abde0
| | `-ParmVarDecl 0x56283d5abec8 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x56283d5abf68 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x56283d5abf68
|   `-ParmVarDecl 0x56283d5ac078 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x56283d4f4278 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x56283d4f41b8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x56283d4f44c8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x56283d4f4338 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x56283d4f43b8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x56283d4f4658 <line:43:5, col:27> col:5 used Timer 'void (Element *)'
| `-ParmVarDecl 0x56283d4f4590 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x56283d4f47d8 <line:47:5, col:21> col:5 Timer 'void (Task *)'
| `-ParmVarDecl 0x56283d4f4718 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x56283d4f4988 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x56283d4f48c8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x56283d4f4a80 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x56283d4f8fc0 <col:21, line:58:5>
|   `-IfStmt 0x56283d4f8fa8 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x56283d4f8f10 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x56283d4f8ee0 <col:6> '<bound member function type>' ->scheduled 0x56283d4f52d8
|     |   `-ImplicitCastExpr 0x56283d4f8f30 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x56283d4f8ed0 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x56283d4f8f88 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x56283d4f8f58 <col:6> '<bound member function type>' ->unschedule 0x56283d4f7670
|         `-CXXThisExpr 0x56283d4f8f48 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x56283d4f4b80 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x56283d4f9160 <col:26, line:65:5>
|   |-BinaryOperator 0x56283d4f9080 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56283d4f9018 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56283d4f82f8
|   | | `-MemberExpr 0x56283d4f8fe8 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56283d4f83b8
|   | |   `-CXXThisExpr 0x56283d4f8fd8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56283d4f9068 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56283d4f9048 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56283d4f8818 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56283d4f9140 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x56283d4f90b0 <col:2> 'void *' lvalue ->_thunk 0x56283d4f8438
|     | `-CXXThisExpr 0x56283d4f90a0 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x56283d4f9118 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x56283d4f90e0 <col:20> 'int' 1
|-CXXMethodDecl 0x56283d4f4cc0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x56283d4f4c30 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x56283d4f92c0 <col:52, line:71:5>
|   |-CStyleCastExpr 0x56283d4f91b0 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56283d4f9180 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x56283d4f4c30 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x56283d4f92a0 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x56283d4f9270 <col:2> '<bound member function type>' ->assign 0x56283d4f4b80
|       `-CXXThisExpr 0x56283d4f9260 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x56283d4f4e90 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x56283d4f4d78 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x56283d4f4df8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x56283d4f9440 <col:58, line:79:5>
|   |-BinaryOperator 0x56283d4f9388 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56283d4f9320 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56283d4f82f8
|   | | `-MemberExpr 0x56283d4f92f0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56283d4f83b8
|   | |   `-CXXThisExpr 0x56283d4f92e0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56283d4f9370 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x56283d4f9350 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x56283d4f4d78 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x56283d4f9420 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56283d4f93b8 <col:2> 'void *' lvalue ->_thunk 0x56283d4f8438
|     | `-CXXThisExpr 0x56283d4f93a8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56283d4f9408 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56283d4f93e8 <col:11> 'void *' lvalue ParmVar 0x56283d4f4df8 'user_data' 'void *'
|-CXXMethodDecl 0x56283d4f4fe0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x56283d4f4f50 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x56283d4f95d8 <col:35, line:87:5>
|   |-BinaryOperator 0x56283d4f9508 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56283d4f94a0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56283d4f82f8
|   | | `-MemberExpr 0x56283d4f9470 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56283d4f83b8
|   | |   `-CXXThisExpr 0x56283d4f9460 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56283d4f94f0 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56283d4f94d0 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56283d4f89f0 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56283d4f95b8 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56283d4f9538 <col:2> 'void *' lvalue ->_thunk 0x56283d4f8438
|     | `-CXXThisExpr 0x56283d4f9528 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56283d4f95a0 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56283d4f9588 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x56283d4f9568 <col:11> 'Element *' lvalue ParmVar 0x56283d4f4f50 'element' 'Element *'
|-CXXMethodDecl 0x56283d4f5128 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x56283d4f5098 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x56283d4f9770 <col:29, line:94:5>
|   |-BinaryOperator 0x56283d4f96a0 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56283d4f9638 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56283d4f82f8
|   | | `-MemberExpr 0x56283d4f9608 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56283d4f83b8
|   | |   `-CXXThisExpr 0x56283d4f95f8 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56283d4f9688 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56283d4f9668 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56283d4f8bc8 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56283d4f9750 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56283d4f96d0 <col:2> 'void *' lvalue ->_thunk 0x56283d4f8438
|     | `-CXXThisExpr 0x56283d4f96c0 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56283d4f9738 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56283d4f9720 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x56283d4f9700 <col:11> 'Task *' lvalue ParmVar 0x56283d4f5098 'task' 'Task *'
|-CXXMethodDecl 0x56283d4f5218 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x56283d4f9850 <col:37, line:100:5>
|   `-ReturnStmt 0x56283d4f9840 <line:99:2, col:19>
|     `-BinaryOperator 0x56283d4f9820 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x56283d4f97f0 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x56283d4f97a0 <col:9> 'Element *const' lvalue ->_owner 0x56283d4f8498
|       |   `-CXXThisExpr 0x56283d4f9790 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x56283d4f9808 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x56283d4f97d0 <col:19> 'int' 0
|-CXXMethodDecl 0x56283d4f52d8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x56283d4f9910 <col:35, line:105:5>
|   `-ReturnStmt 0x56283d4f9900 <line:104:2, col:23>
|     `-BinaryOperator 0x56283d4f98e0 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x56283d4f98c8 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x56283d4f9878 <col:9> 'const int' lvalue ->_schedpos1 0x56283d4f8118
|       |   `-CXXThisExpr 0x56283d4f9868 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x56283d4f98a8 <col:23> 'int' 0
|-CXXMethodDecl 0x56283d4f60d0 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x56283d4f9978 <col:51, line:118:5>
|   `-ReturnStmt 0x56283d4f9968 <line:117:2, col:9>
|     `-MemberExpr 0x56283d4f9938 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|       `-CXXThisExpr 0x56283d4f9928 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56283d4f6190 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x56283d4f9ed0 <col:37, line:136:5>
|   `-IfStmt 0x56283d4f9ea8 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x56283d4f9a38 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x56283d4f9a20 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x56283d4f9a00 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x56283d4f99d0 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x56283d2c63e8
|     |       `-MemberExpr 0x56283d4f99a0 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|     |         `-CXXThisExpr 0x56283d4f9990 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x56283d4f9e18 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x56283d4f9e00 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x56283d4f9dd0 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x56283d4f9db8 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x56283d4f9d80 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x56283d4f9d68 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x56283d4f9d48 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56283d402410 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x56283d4f9ce8 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x56283d4f9cd0 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x56283d4f9bf8 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x56283d4f9be0 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x56283d4f9bc0 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56283d4020c8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x56283d4f9b60 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x56283d4f9a60 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|     |         |     |   `-CXXThisExpr 0x56283d4f9a50 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x56283d4f9ba8 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x56283d4f9b90 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x56283d4f9b40 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x56283d4f9b28 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x56283d4f9ac8 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x56283d255f50 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x56283d4f9d30 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x56283d4f9d18 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x56283d4f9cb0 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x56283d4f9c98 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x56283d4f9c68 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x56283d256c20 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x56283d4f9e98 <line:135:6, col:13>
|       `-CXXConstructExpr 0x56283d4f9e68 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x56283d4f9e38 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|           `-CXXThisExpr 0x56283d4f9e28 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x56283d4f6250 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x56283d4f9fb8 <col:35, line:141:5>
|   `-ReturnStmt 0x56283d4f9fa8 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x56283d4f9f70 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x56283d4f9f40 <col:9, col:17> '<bound member function type>' ->router 0x56283d4e68c0
|         `-ImplicitCastExpr 0x56283d4f9f90 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x56283d4f9f28 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x56283d4f9ef8 <col:9> 'Element *const' lvalue ->_owner 0x56283d4f8498
|               `-CXXThisExpr 0x56283d4f9ee8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56283d4f6310 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x56283d4fa038 <col:37, line:146:5>
|   `-ReturnStmt 0x56283d4fa028 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x56283d4fa010 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x56283d4f9fe0 <col:9> 'Element *const' lvalue ->_owner 0x56283d4f8498
|         `-CXXThisExpr 0x56283d4f9fd0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56283d4f63d0 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x56283d4fa0b8 <col:41, line:151:5>
|   `-ReturnStmt 0x56283d4fa0a8 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x56283d4fa090 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x56283d4fa060 <col:9> 'RouterThread *const' lvalue ->_thread 0x56283d4f84f8
|         `-CXXThisExpr 0x56283d4fa050 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56283d4f6498 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x56283d4f6698 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56283d4f6548 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56283d4f65c0 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d4f8dd8 <col:50> 'bool' false
|-CXXMethodDecl 0x56283d4f6818 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x56283d4f6758 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x56283d4f6960 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56283d4f68d0 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56283d4f6aa8 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56283d4f6a18 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56283d4f6bf0 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56283d4f6b60 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x56283d4f6d38 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56283d4f6ca8 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x56283d4f6e00 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x56283d4fa220 <col:32, line:223:5>
|   `-ExprWithCleanups 0x56283d4fa208 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x56283d4fa1b0 <col:2, col:47> 'void'
|       |-MemberExpr 0x56283d4fa0e0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56283d4f6960
|       | `-CXXThisExpr 0x56283d4fa0d0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4fa1f0 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56283d4fa1d8 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56283d4fa190 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x56283d4fa178 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x56283d4fa148 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x56283d256c20 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x56283d4f6f40 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x56283d4f6eb0 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x56283d4f7088 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f6ff8 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d4fa3a8 <col:56, line:241:5>
|   `-ExprWithCleanups 0x56283d4fa390 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x56283d4fa338 <col:2, col:40> 'void'
|       |-MemberExpr 0x56283d4fa248 <col:2> '<bound member function type>' ->schedule_after 0x56283d4f6f40
|       | `-CXXThisExpr 0x56283d4fa238 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4fa378 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56283d4fa360 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56283d4fa2f8 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x56283d4fa2c8 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x56283d4fa288 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d4f6ff8 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x56283d4fa2e0 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56283d4fa2a8 <col:38> 'int' 0
|-CXXMethodDecl 0x56283d4f71d0 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f7140 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d4fa618 <col:58, line:249:5>
|   `-ExprWithCleanups 0x56283d4fa600 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x56283d4fa5a8 <col:2, col:49> 'void'
|       |-MemberExpr 0x56283d4fa3d0 <col:2> '<bound member function type>' ->schedule_after 0x56283d4f6f40
|       | `-CXXThisExpr 0x56283d4fa3c0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4fa5e8 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56283d4fa5d0 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56283d4fa550 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x56283d4fa538 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56283d4fa4a8 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56283d2c81d8 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56283d4fa590 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x56283d4fa578 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56283d4fa488 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d4f7140 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4f7318 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x56283d4f7288 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x56283d4fa7f8 <col:58, line:261:5>
|   `-ExprWithCleanups 0x56283d4fa7e0 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x56283d4fa788 <col:2, col:38> 'void'
|       |-MemberExpr 0x56283d4fa640 <col:2> '<bound member function type>' ->schedule_at_steady 0x56283d4f6960
|       | `-CXXThisExpr 0x56283d4fa630 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4fa7c8 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56283d4fa7b0 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56283d4fa750 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56283d4fa738 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56283d4fa718 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56283d4020c8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56283d4fa6e8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56283d4fa6d0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56283d4fa680 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|             |     `-CXXThisExpr 0x56283d4fa670 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x56283d4fa6b0 <col:33> 'const Timestamp' lvalue ParmVar 0x56283d4f7288 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x56283d4f7460 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f73d0 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d4faad0 <col:58, line:270:5>
|   `-ExprWithCleanups 0x56283d4faab8 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x56283d4faa60 <col:2, col:79> 'void'
|       |-MemberExpr 0x56283d4fa820 <col:2> '<bound member function type>' ->schedule_at_steady 0x56283d4f6960
|       | `-CXXThisExpr 0x56283d4fa810 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4faaa0 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56283d4faa88 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56283d4faa20 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x56283d4fa958 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x56283d4fa940 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x56283d4fa8d0 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x56283d4fa8a0 <col:31, col:41> '<bound member function type>' .sec 0x56283d258718
|             | |     `-ImplicitCastExpr 0x56283d4fa8f0 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x56283d4fa870 <col:31> 'Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|             | |         `-CXXThisExpr 0x56283d4fa860 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x56283d4fa928 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x56283d4fa908 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d4f73d0 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x56283d4fa9e8 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x56283d4fa9b8 <col:60, col:70> '<bound member function type>' .subsec 0x56283d258e10
|                 `-ImplicitCastExpr 0x56283d4faa08 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x56283d4fa988 <col:60> 'Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|                     `-CXXThisExpr 0x56283d4fa978 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x56283d4f75a8 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f7518 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56283d4fae08 <col:60, line:279:5>
|   `-ExprWithCleanups 0x56283d4fadf0 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x56283d4fad98 <col:2, col:65> 'void'
|       |-MemberExpr 0x56283d4faaf8 <col:2> '<bound member function type>' ->schedule_at_steady 0x56283d4f6960
|       | `-CXXThisExpr 0x56283d4faae8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4fadd8 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56283d4fadc0 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56283d4fad60 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x56283d4fad48 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56283d4fad28 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56283d4020c8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56283d4facc8 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56283d4facb0 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56283d4fab38 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|             |     `-CXXThisExpr 0x56283d4fab28 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x56283d4fad10 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x56283d4facf8 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x56283d4fac58 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x56283d4fac40 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x56283d4fac10 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56283d2c81d8 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x56283d4fac98 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x56283d4fac80 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x56283d4fabf0 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x56283d4f7518 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56283d4f7670 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x56283d4f7730 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x56283d4fb2d0 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x56283d4fae60 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x56283d4fae30 <col:2> '<bound member function type>' ->unschedule 0x56283d4f7670
|   |   `-CXXThisExpr 0x56283d4fae20 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x56283d4fb2b8 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x56283d4fb280 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x56283d4fb268 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d4faf18 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56283d4b0868 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x56283d4fae90 <col:2> 'Timestamp' lvalue ->_expiry_s 0x56283d4f8178
|       | `-CXXThisExpr 0x56283d4fae80 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56283d4faf00 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x56283d4faed0 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56283d4f77f0 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x56283d4fb628 <col:42, line:310:5>
|   |-IfStmt 0x56283d4fb470 <line:306:2, line:307:23>
|   | |-CallExpr 0x56283d4fb3a0 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x56283d4fb388 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x56283d4fb328 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x56283d3f3bf0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x56283d4fb460 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x56283d4fb448 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x56283d4fb418 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56283d4fb400 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x56283d4fb3d0 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x56283d4fb618 <line:309:2, col:33>
|     `-ExprWithCleanups 0x56283d4fb600 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x56283d4fb5d0 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56283d4fb5b8 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x56283d4fb578 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56283d4fb560 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56283d4fb530 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56283d2c84f0 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56283d4fb5a0 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x56283d4fb510 <col:30> 'int' 500
|-CXXMethodDecl 0x56283d4f7930 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f78a0 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d4f79d8 <col:69> "" ""
|-CXXMethodDecl 0x56283d4f7ae8 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f7a58 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d4f7b90 <col:70> "" ""
|-CXXMethodDecl 0x56283d4f7ca0 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f7c10 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d4f7d48 <col:71> "" ""
|-CXXMethodDecl 0x56283d4f7e58 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56283d4f7dc8 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56283d4f7f00 <col:72> "" ""
|-EnumDecl 0x56283d4f7f70 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x56283d4f8070 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x56283d4f80c0 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d4f8050 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x56283d4f8030 <col:25> 'int' 1
|-AccessSpecDecl 0x56283d4f80d8 <line:339:3, col:10> col:3 private
|-FieldDecl 0x56283d4f8118 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x56283d4f8178 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x56283d4f81c8 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56283d4f82f8 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x56283d4f8de8 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x56283d4f83b8 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x56283d4f8438 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56283d4f8498 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x56283d4f84f8 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x56283d4f8648 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x56283d4f8558 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x56283d4f8818 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56283d4f8700 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x56283d4f8780 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x56283d4f89f0 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56283d4f88d8 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x56283d4f8958 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x56283d4f8bc8 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56283d4f8ab0 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x56283d4f8b30 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x56283d4f8d98 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d5a1288 <../elements/standard/delayshaper.hh:38:1, line:66:1> line:38:7 class DelayShaper definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-public 'ActiveNotifier'
|-CXXRecordDecl 0x56283d5a1428 <col:1, col:7> col:7 implicit referenced class DelayShaper
|-AccessSpecDecl 0x56283d5a14b8 <col:61, col:67> col:61 public
|-CXXConstructorDecl 0x56283d5a1540 <line:40:5, col:17> col:5 DelayShaper 'void ()'
|-CXXMethodDecl 0x56283d5a1640 <line:42:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x56283d4d6f78 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56283d5a3140 <col:36, col:60>
|   `-ReturnStmt 0x56283d5a3130 <col:38, col:45>
|     `-ImplicitCastExpr 0x56283d5a3118 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56283d5a30f0 <col:45> 'const char [12]' lvalue "DelayShaper"
|-CXXMethodDecl 0x56283d5a1708 <line:43:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x56283d4d7040 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56283d5a31a0 <col:36, col:56>
|   `-ReturnStmt 0x56283d5a3190 <col:38, col:45>
|     `-ImplicitCastExpr 0x56283d5a3178 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56283d5a3158 <col:45> 'const char []' lvalue Var 0x56283d4d7298 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56283d5a17d0 <line:44:5, col:51> col:17 processing 'const char *() const'
| |-Overrides: [ 0x56283d4d73b0 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56283d5a3200 <col:36, col:51>
|   `-ReturnStmt 0x56283d5a31f0 <col:38, col:45>
|     `-ImplicitCastExpr 0x56283d5a31d8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56283d5a31b8 <col:45> 'const char []' lvalue Var 0x56283d4d7580 'PULL' 'const char []'
|-CXXMethodDecl 0x56283d5a1920 <line:45:5, col:28> col:11 cast 'void *(const char *)'
| |-Overrides: [ 0x56283d4d7bd0 Element::cast 'void *(const char *)' ]
| `-ParmVarDecl 0x56283d5a1888 <col:16, col:27> col:28 'const char *'
|-CXXMethodDecl 0x56283d5a1c00 <line:47:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56283d4d8670 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56283d5a1ab0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x56283d5a1b28 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x56283d5a1d58 <line:48:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x56283d4d88c0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x56283d5a1cc0 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x56283d5a1ea0 <line:49:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x56283d4d90d8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x56283d5a1e10 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x56283d5a1f68 <line:50:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x56283d4d8740 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56283d5a20b0 <line:52:5, col:21> col:13 pull 'Packet *(int)'
| |-Overrides: [ 0x56283d4d5fa8 Element::pull 'Packet *(int)' ]
| `-ParmVarDecl 0x56283d5a2020 <col:18> col:21 'int'
|-CXXMethodDecl 0x56283d5a21f8 <line:53:5, col:27> col:10 run_timer 'void (Timer *)'
| |-Overrides: [ 0x56283d4d64c8 Element::run_timer 'void (Timer *)' ]
| `-ParmVarDecl 0x56283d5a2168 <col:20, col:26> col:27 'Timer *'
|-AccessSpecDecl 0x56283d5a22a0 <line:55:3, col:10> col:3 private
|-FieldDecl 0x56283d5a22d8 <line:57:5, col:13> col:13 _p 'Packet *'
|-FieldDecl 0x56283d5a2338 <line:58:5, col:15> col:15 _delay 'Timestamp'
|-FieldDecl 0x56283d5a2398 <line:59:5, col:11> col:11 _timer 'Timer'
|-FieldDecl 0x56283d5a23f8 <line:60:5, col:20> col:20 _upstream_signal 'NotifierSignal'
|-FieldDecl 0x56283d5a2458 <line:61:5, col:20> col:20 _notifier 'ActiveNotifier'
|-CXXMethodDecl 0x56283d5a25d0 <line:63:5, col:47> col:19 read_param 'String (Element *, void *)' static
| |-ParmVarDecl 0x56283d5a24b8 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x56283d5a2538 <col:41, col:46> col:47 'void *'
|-CXXMethodDecl 0x56283d5a28b0 <line:64:5, col:77> col:16 write_param 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56283d5a2690 <col:28, col:41> col:42 'const String &'
| |-ParmVarDecl 0x56283d5a2708 <col:44, col:52> col:53 'Element *'
| |-ParmVarDecl 0x56283d5a2788 <col:55, col:60> col:61 'void *'
| `-ParmVarDecl 0x56283d5a2800 <col:63, col:76> col:77 'ErrorHandler *'
|-CXXConstructorDecl 0x56283d5a2998 <line:38:7> col:7 implicit DelayShaper 'void (const DelayShaper &)' inline default_delete noexcept-unevaluated 0x56283d5a2998
| `-ParmVarDecl 0x56283d5a2aa8 <col:7> col:7 'const DelayShaper &'
|-CXXConstructorDecl 0x56283d5a2b48 <col:7> col:7 implicit DelayShaper 'void (DelayShaper &&)' inline default_delete noexcept-unevaluated 0x56283d5a2b48
| `-ParmVarDecl 0x56283d5a2c58 <col:7> col:7 'DelayShaper &&'
|-CXXMethodDecl 0x56283d5a2cf8 <col:7> col:7 implicit operator= 'DelayShaper &(const DelayShaper &)' inline default_delete noexcept-unevaluated 0x56283d5a2cf8
| `-ParmVarDecl 0x56283d5a2e08 <col:7> col:7 'const DelayShaper &'
|-CXXMethodDecl 0x56283d5a2e78 <col:7> col:7 implicit operator= 'DelayShaper &(DelayShaper &&)' inline default_delete noexcept-unevaluated 0x56283d5a2e78
| `-ParmVarDecl 0x56283d5a2f88 <col:7> col:7 'DelayShaper &&'
`-CXXDestructorDecl 0x56283d5a3010 <col:7> col:7 implicit ~DelayShaper 'void ()' inline default noexcept-unevaluated 0x56283d5a3010
  `-Overrides: [ 0x56283d4d5b48 Element::~Element 'void () noexcept', 0x56283d5855d0 ActiveNotifier::~ActiveNotifier 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.DelayShaper = type { %class.Element.base, %class.ActiveNotifier, %class.Packet*, %class.Timestamp, %class.Timer, %class.NotifierSignal, %class.ActiveNotifier }
  NonVirtualBaseLLVMType:%class.DelayShaper = type { %class.Element.base, %class.ActiveNotifier, %class.Packet*, %class.Timestamp, %class.Timer, %class.NotifierSignal, %class.ActiveNotifier }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d0f2a40 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56283d0f4ce0 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56283d0f4d80 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56283d0f4de0 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56283d0f4e40 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56283d0f4ef0 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d0f5200 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d0f5318 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56283d0f53c0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56283d0f5428 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56283d0f54b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56283d0f96f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56283d0f9b28 <col:12>
|-CXXConstructorDecl 0x56283d0f97f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d0f9908 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56283d0f53c0 'data' 'const char *'
| | `-ImplicitCastExpr 0x56283d0fc7e0 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56283d0fc7b0 <col:12> 'const char *const' lvalue .data 0x56283d0f53c0
| |     `-DeclRefExpr 0x56283d0fc790 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d0f9908 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56283d0f5428 'length' 'int'
| | `-ImplicitCastExpr 0x56283d0fc870 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56283d0fc840 <col:12> 'const int' lvalue .length 0x56283d0f5428
| |     `-DeclRefExpr 0x56283d0fc820 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d0f9908 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56283d0f54b8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56283d0fc900 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56283d0fc8d0 <col:12> 'String::memo_t *const' lvalue .memo 0x56283d0f54b8
| |     `-DeclRefExpr 0x56283d0fc8b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d0f9908 '' 'const String::rep_t &'
| `-CompoundStmt 0x56283d0fc958 <col:12>
|-CXXConstructorDecl 0x56283d0f99a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56283d0f99a8
| `-ParmVarDecl 0x56283d0f9ab8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56283d101f30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56283d10d898 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d10d9a8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56283d10dec0 <col:12>
|   |-BinaryOperator 0x56283d10dcd8 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56283d10dc90 <col:12> 'const char *' lvalue ->data 0x56283d0f53c0
|   | | `-CXXThisExpr 0x56283d10dc80 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56283d10dcc0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56283d10dc50 <col:12> 'const char *const' lvalue .data 0x56283d0f53c0
|   |     `-DeclRefExpr 0x56283d10dc30 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d10d9a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56283d10dda0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56283d10dd58 <col:12> 'int' lvalue ->length 0x56283d0f5428
|   | | `-CXXThisExpr 0x56283d10dd48 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56283d10dd88 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56283d10dd18 <col:12> 'const int' lvalue .length 0x56283d0f5428
|   |     `-DeclRefExpr 0x56283d10dcf8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d10d9a8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56283d10de68 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56283d10de20 <col:12> 'String::memo_t *' lvalue ->memo 0x56283d0f54b8
|   | | `-CXXThisExpr 0x56283d10de10 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56283d10de50 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56283d10dde0 <col:12> 'String::memo_t *const' lvalue .memo 0x56283d0f54b8
|   |     `-DeclRefExpr 0x56283d10ddc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d10d9a8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56283d10deb0 <col:12>
|     `-UnaryOperator 0x56283d10de98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d10de88 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56283d10da18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56283d10da18
  `-ParmVarDecl 0x56283d10db28 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d0e9150 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d0e9268 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56283d0e92f8 <col:16, col:22> col:16 public
|-TypedefDecl 0x56283d0e9338 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56283ceabdc0 'const char *'
|   `-QualType 0x56283ceab311 'const char' const
|     `-BuiltinType 0x56283ceab310 'char'
|-TypedefDecl 0x56283d0e93c0 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56283d0e9390 'String::const_iterator' sugar
|   |-Typedef 0x56283d0e9338 'const_iterator'
|   `-PointerType 0x56283ceabdc0 'const char *'
|     `-QualType 0x56283ceab311 'const char' const
|       `-BuiltinType 0x56283ceab310 'char'
|-TypedefDecl 0x56283d0e9560 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56283d0e94d0 'int (String::*)() const'
|   |-RecordType 0x56283d0e91e0 'String'
|   | `-CXXRecord 0x56283d0e9150 'String'
|   `-ParenType 0x56283d0e9470 'int () const' sugar
|     `-FunctionProtoType 0x56283d0e9440 'int () const' const cdecl
|       `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d0e95c8 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56283d004110 'int64_t' sugar
|   |-Typedef 0x56283cf142d0 'int64_t'
|   `-TypedefType 0x56283ceed4d0 '__int64_t' sugar
|     |-Typedef 0x56283ceed0a8 '__int64_t'
|     `-BuiltinType 0x56283ceab390 'long'
|-TypedefDecl 0x56283d0e9630 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56283d004030 'uint64_t' sugar
|   |-Typedef 0x56283cf14470 'uint64_t'
|   `-TypedefType 0x56283ceed560 '__uint64_t' sugar
|     |-Typedef 0x56283ceed118 '__uint64_t'
|     `-BuiltinType 0x56283ceab430 'unsigned long'
|-TypedefDecl 0x56283d0e96c0 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56283d0e9690 'String::intmax_t' sugar
|   |-Typedef 0x56283d0e95c8 'intmax_t'
|   `-TypedefType 0x56283d004110 'int64_t' sugar
|     |-Typedef 0x56283cf142d0 'int64_t'
|     `-TypedefType 0x56283ceed4d0 '__int64_t' sugar
|       |-Typedef 0x56283ceed0a8 '__int64_t'
|       `-BuiltinType 0x56283ceab390 'long'
|-TypedefDecl 0x56283d0e9750 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56283d0e9720 'String::uintmax_t' sugar
|   |-Typedef 0x56283d0e9630 'uintmax_t'
|   `-TypedefType 0x56283d004030 'uint64_t' sugar
|     |-Typedef 0x56283cf14470 'uint64_t'
|     `-TypedefType 0x56283ceed560 '__uint64_t' sugar
|       |-Typedef 0x56283ceed118 '__uint64_t'
|       `-BuiltinType 0x56283ceab430 'unsigned long'
|-CXXConstructorDecl 0x56283d0e9810 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56283d0e99b8 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56283d0e98f8 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56283d0e9b68 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56283d0e9aa8 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56283d0e9cc0 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56283d0e9c30 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56283d0e9f40 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56283d0e9d88 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56283d0e9e08 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56283d0ea198 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56283d0ea040 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56283d0ea0c0 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56283d0ea3b8 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56283d0ea268 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56283d0ea2e8 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56283d0ea5d8 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56283d0ea488 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56283d0ea508 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56283d0ea768 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56283d0ea6a0 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56283d0ea8e8 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56283d0ea828 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56283d0eaa78 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56283d0ea9b0 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56283d0eabd0 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56283d0eab40 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56283d0ead58 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56283d0eac98 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56283d0eaee8 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56283d0eae20 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56283d0eb078 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56283d0eafb0 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56283d0eb208 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56283d0eb140 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56283d0eb398 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56283d0eb2d0 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56283d0eb528 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56283d0eb460 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56283d0eb620 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56283d0eb748 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56283d0eb8c8 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56283d0eb800 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56283d0eba18 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56283d0eb988 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56283d0ebac0 <col:63> "" ""
|-CXXMethodDecl 0x56283d0ebc08 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56283d0ebb48 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56283d0ebe18 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56283d0ebcc8 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56283d0ebd48 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56283d0ec4b8 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56283d0ec360 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56283d0ec3e0 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56283d0ec798 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56283d0ec578 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56283d0ec5f8 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56283d0f91c0 <col:55> 'int' 10
| `-ParmVarDecl 0x56283d0ec670 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d0f91e0 <col:76> 'bool' true
|-CXXMethodDecl 0x56283d0eca78 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56283d0ec860 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56283d0ec8e0 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56283d0f91f0 <col:56> 'int' 10
| `-ParmVarDecl 0x56283d0ec958 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d0f9210 <col:77> 'bool' true
|-CXXMethodDecl 0x56283d0ecb80 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56283d0ecc48 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56283d0ecd10 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56283d0ecdb0 <col:20>
| `-OptimizeNoneAttr 0x56283d0ece08 <col:30>
|-CXXConversionDecl 0x56283d0ecef8 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56283d0ecfc8 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56283d0ed088 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56283d0ed178 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56283d0ed238 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56283d0ed3b8 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56283d0ed2f0 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56283d0ed508 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56283d0ed478 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56283d0ed5f8 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56283d0ed6b8 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56283d0ed908 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56283d0ed770 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56283d0ed7f0 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56283d0edb68 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56283d0ed9d0 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56283d0eda50 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56283d0edc38 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56283d0ede48 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56283d0edcf0 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56283d0edd70 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56283d0ee068 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56283d0edf10 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56283d0edf90 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56283d0ee1f8 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56283d0ee130 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56283d0ee840 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56283d0ee9b8 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56283d0ee8f0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56283d0eebc8 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56283d0eea78 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56283d0eeaf8 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56283d0eede0 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56283d0eec88 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56283d0eed00 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56283d0eef70 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56283d0eeea0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56283d0ef190 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56283d0ef030 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56283d0ef0b0 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56283d0ef2e0 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56283d0ef250 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56283d0ef4b8 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56283d0ef3a0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56283d0ef420 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56283d0ef608 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56283d0ef578 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56283d0ef820 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56283d0ef6c0 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56283d0ef740 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56283d0f9220 <col:39> 'int' 0
|-CXXMethodDecl 0x56283d0efa40 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56283d0ef8e0 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56283d0ef960 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56283d0f9240 <col:48> 'int' 0
|-CXXMethodDecl 0x56283d0efc20 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56283d0efb00 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56283d0efb80 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56283d0f9260 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56283d0efcf0 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56283d0efdb0 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56283d0efe70 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56283d0eff30 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56283d0efff0 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56283d0f0198 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56283d0f00a0 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56283d0f0318 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56283d0f0250 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56283d0f0498 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56283d0f03d8 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56283d0f0618 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56283d0f0550 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56283d0f0760 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56283d0f06d0 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56283d0f0c50 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56283d0f0bc0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56283d0f0e28 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56283d0f0d10 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56283d0f0d90 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56283d0f1008 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56283d0f0ef0 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56283d0f0f70 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56283d0f1158 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56283d0f10c8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56283d0f1368 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56283d0f1218 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56283d0f1298 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56283d0f14c8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56283d0f1430 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56283d0f1620 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56283d0f1588 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56283d0f16c8 <col:57> "" ""
|-CXXMethodDecl 0x56283d0f17d8 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56283d0f1748 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56283d0f1928 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56283d0f1898 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56283d0f1aa8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56283d0f19e0 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56283d0f1b70 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56283d0f1c30 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56283d0f1cf0 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56283d0f1d90 <col:49> "" ""
|-CXXMethodDecl 0x56283d0f1e20 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56283d0f1ee0 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56283d0f1fd0 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56283d0f2098 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56283d0f2158 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56283d0f2218 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56283d0f2310 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56283d0f23d8 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56283d0f24a0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56283d0f2678 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56283d0f2558 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56283d0f25d8 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56283d0f28a0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56283d0f2740 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56283d0f27c0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56283d0f29b0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56283d0f2a18 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d0f2a40 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56283d0f4ce0 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56283d0f4d80 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56283d0f4de0 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56283d0f4e40 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56283d0f4ef0 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56283d0f4f58 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56283d0f5198 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56283d0f51e8 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d0f5178 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56283d0f5088 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56283d0f5030 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56283d0f5070 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56283d0f5050 <col:32> 'int' 8
|-CXXRecordDecl 0x56283d0f5200 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56283d0f5318 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56283d0f53c0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56283d0f5428 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56283d0f54b8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56283d0f96f0 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56283d0f9b28 <col:12>
| |-CXXConstructorDecl 0x56283d0f97f8 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56283d0f9908 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56283d0f53c0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56283d0fc7e0 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56283d0fc7b0 <col:12> 'const char *const' lvalue .data 0x56283d0f53c0
| | |     `-DeclRefExpr 0x56283d0fc790 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d0f9908 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56283d0f5428 'length' 'int'
| | | `-ImplicitCastExpr 0x56283d0fc870 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56283d0fc840 <col:12> 'const int' lvalue .length 0x56283d0f5428
| | |     `-DeclRefExpr 0x56283d0fc820 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d0f9908 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56283d0f54b8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56283d0fc900 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56283d0fc8d0 <col:12> 'String::memo_t *const' lvalue .memo 0x56283d0f54b8
| | |     `-DeclRefExpr 0x56283d0fc8b0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d0f9908 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56283d0fc958 <col:12>
| |-CXXConstructorDecl 0x56283d0f99a8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56283d0f99a8
| | `-ParmVarDecl 0x56283d0f9ab8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56283d101f30 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56283d10d898 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56283d10d9a8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56283d10dec0 <col:12>
| |   |-BinaryOperator 0x56283d10dcd8 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56283d10dc90 <col:12> 'const char *' lvalue ->data 0x56283d0f53c0
| |   | | `-CXXThisExpr 0x56283d10dc80 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56283d10dcc0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56283d10dc50 <col:12> 'const char *const' lvalue .data 0x56283d0f53c0
| |   |     `-DeclRefExpr 0x56283d10dc30 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d10d9a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56283d10dda0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56283d10dd58 <col:12> 'int' lvalue ->length 0x56283d0f5428
| |   | | `-CXXThisExpr 0x56283d10dd48 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56283d10dd88 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56283d10dd18 <col:12> 'const int' lvalue .length 0x56283d0f5428
| |   |     `-DeclRefExpr 0x56283d10dcf8 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d10d9a8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56283d10de68 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56283d10de20 <col:12> 'String::memo_t *' lvalue ->memo 0x56283d0f54b8
| |   | | `-CXXThisExpr 0x56283d10de10 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56283d10de50 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56283d10dde0 <col:12> 'String::memo_t *const' lvalue .memo 0x56283d0f54b8
| |   |     `-DeclRefExpr 0x56283d10ddc0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56283d10d9a8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56283d10deb0 <col:12>
| |     `-UnaryOperator 0x56283d10de98 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56283d10de88 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56283d10da18 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56283d10da18
|   `-ParmVarDecl 0x56283d10db28 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56283d0f5530 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56283d0f5778 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56283d0f5598 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56283d0f5618 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56283d0f5690 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56283d0f96b0 <col:79, line:261:5>
|   |-BinaryOperator 0x56283d0f9328 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56283d0f92c0 <col:2, col:5> 'const char *' lvalue .data 0x56283d0f53c0
|   | | `-MemberExpr 0x56283d0f9290 <col:2> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|   | |   `-CXXThisExpr 0x56283d0f9280 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56283d0f9310 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56283d0f92f0 <col:12> 'const char *' lvalue ParmVar 0x56283d0f5598 'data' 'const char *'
|   |-BinaryOperator 0x56283d0f93f0 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56283d0f9388 <col:2, col:5> 'int' lvalue .length 0x56283d0f5428
|   | | `-MemberExpr 0x56283d0f9358 <col:2> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|   | |   `-CXXThisExpr 0x56283d0f9348 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56283d0f93d8 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56283d0f93b8 <col:14> 'int' lvalue ParmVar 0x56283d0f5618 'length' 'int'
|   `-IfStmt 0x56283d0f9698 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56283d0f9510 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56283d0f94f8 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56283d0f94d8 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56283d0f94b8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56283d0f9450 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|     |       | `-MemberExpr 0x56283d0f9420 <col:7> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|     |       |   `-CXXThisExpr 0x56283d0f9410 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56283d0f94a0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56283d0f9480 <col:17> 'String::memo_t *' lvalue ParmVar 0x56283d0f5690 'memo' 'String::memo_t *'
|     `-CallExpr 0x56283d0f9670 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56283d0f9658 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d0f9560 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56283d0cfdf8 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56283d0f95c8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56283d0f4d80
|         `-ImplicitCastExpr 0x56283d0f95b0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56283d0f9590 <col:27> 'String::memo_t *' lvalue ParmVar 0x56283d0f5690 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56283d0f5a28 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56283d0f5848 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56283d0f58c8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56283d0f5940 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56283d0f5530 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56283d0f9b38 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56283d0f9cc8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56283d0f9c30 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56283d0f9ba0 <col:2> '<bound member function type>' ->assign_memo 0x56283d0f5778
|     | `-ImplicitCastExpr 0x56283d0f9c68 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56283d0f9b90 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56283d0f9c80 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d0f9bd0 <col:14> 'const char *' lvalue ParmVar 0x56283d0f5848 'data' 'const char *'
|     |-ImplicitCastExpr 0x56283d0f9c98 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56283d0f9bf0 <col:20> 'int' lvalue ParmVar 0x56283d0f58c8 'length' 'int'
|     `-ImplicitCastExpr 0x56283d0f9cb0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56283d0f9c10 <col:28> 'String::memo_t *' lvalue ParmVar 0x56283d0f5940 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56283d0f5bb8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56283d0f5af8 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56283d0f9f20 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56283d0f9ea0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56283d0f9cf0 <col:2> '<bound member function type>' ->assign_memo 0x56283d0f5778
|     | `-CXXThisExpr 0x56283d0f9ce0 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56283d0f9ed8 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56283d0f9d70 <col:14, col:19> 'const char *' lvalue .data 0x56283d0f53c0
|     |   `-MemberExpr 0x56283d0f9d40 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56283d0f5530
|     |     `-DeclRefExpr 0x56283d0f9d20 <col:14> 'const String' lvalue ParmVar 0x56283d0f5af8 'x' 'const String &'
|     |-ImplicitCastExpr 0x56283d0f9ef0 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56283d0f9df0 <col:25, col:30> 'int' lvalue .length 0x56283d0f5428
|     |   `-MemberExpr 0x56283d0f9dc0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56283d0f5530
|     |     `-DeclRefExpr 0x56283d0f9da0 <col:25> 'const String' lvalue ParmVar 0x56283d0f5af8 'x' 'const String &'
|     `-ImplicitCastExpr 0x56283d0f9f08 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56283d0f9e70 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|         `-MemberExpr 0x56283d0f9e40 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56283d0f5530
|           `-DeclRefExpr 0x56283d0f9e20 <col:38> 'const String' lvalue ParmVar 0x56283d0f5af8 'x' 'const String &'
|-CXXMethodDecl 0x56283d0f5c80 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56283d0fafe8 <col:31, line:278:5>
|   `-IfStmt 0x56283d0fafd0 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56283d0f9fc0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56283d0f9fa8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56283d0f9f78 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|     |     `-MemberExpr 0x56283d0f9f48 <col:6> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|     |       `-CXXThisExpr 0x56283d0f9f38 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56283d0fafa8 <col:15, line:277:2>
|       |-ParenExpr 0x56283d0fa560 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56283d0fa530 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56283d0fa0d0 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56283d0fa0b8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56283d0fa0a0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56283d0fa060 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56283d0f4d80
|       |   |       `-ImplicitCastExpr 0x56283d0fa048 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56283d0fa018 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|       |   |           `-MemberExpr 0x56283d0f9fe8 <col:27> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|       |   |             `-CXXThisExpr 0x56283d0f9fd8 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56283d0fa130 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56283d0fa110 <col:54> 'int' 0
|       |   `-CallExpr 0x56283d0fa490 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56283d0fa478 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56283d0fa400 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56283cf4a910 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56283d0fa4d0 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56283d0fa218 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56283d0fa4e8 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56283d0fa2c8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56283d0fa500 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56283d0fa300 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56283d0fa518 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56283d0fa3e8 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56283d0fa3d0 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56283d0fa398 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56283d0faec8 <line:274:6, line:275:22>
|       | |-CallExpr 0x56283d0fa770 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56283d0fa758 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56283d0fa6d0 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56283d0d5140 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56283d0fa6a0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56283d0f4d80
|       | |   `-ImplicitCastExpr 0x56283d0fa688 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56283d0fa658 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|       | |       `-MemberExpr 0x56283d0fa628 <col:40> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|       | |         `-CXXThisExpr 0x56283d0fa618 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56283d0fa870 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56283d0fa858 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56283d0fa798 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56283d0f6958 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56283d0faeb0 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56283d0fa7f8 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|       |       `-MemberExpr 0x56283d0fa7c8 <col:15> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|       |         `-CXXThisExpr 0x56283d0fa7b8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56283d0faf88 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56283d0faf20 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56283d0f54b8
|         | `-MemberExpr 0x56283d0faef0 <col:6> 'String::rep_t' lvalue ->_r 0x56283d0f5530
|         |   `-CXXThisExpr 0x56283d0faee0 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56283d0faf70 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56283d0faf50 <col:16> 'int' 0
|-CXXMethodDecl 0x56283d0f5f18 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56283d0f5d38 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56283d0f5db8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56283d0f5e30 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56283d0f5ff0 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56283d0f6240 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56283d0f60a8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56283d0f6128 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56283d0f61a0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56283d0f6428 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56283d0f6310 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56283d0f6390 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56283d0f6528 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56283d0fb0e0 <col:41, line:286:5>
|   `-ReturnStmt 0x56283d0fb0d0 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56283d0fb0a0 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56283d0fb068 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56283d0fb050 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56283d0fb030 <col:46> 'int' 1
|-CXXMethodDecl 0x56283d0f67c8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56283d0f65e0 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56283d0f6660 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56283d0f66e0 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56283d0f6958 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56283d0f6890 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56283d0f6a28 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56283d0f6bf8 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56283d0f6ae0 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56283d0f6b60 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56283d0f88a0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56283d0f89e8 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56283d0f8b28 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56283d0f8ba0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56283d0f8c18 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56283d0f8c80 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56283d0f8d80 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56283d0f8dd0 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d0f8d60 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56283d0f8d40 <col:22> 'int' 14
|-CXXMethodDecl 0x56283d0f8fe8 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56283d0f8e00 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56283d0f8e80 <col:38> col:41 'int'
| `-ParmVarDecl 0x56283d0f8f00 <col:43> col:46 'int'
|-FriendDecl 0x56283d0f90f0 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56283d0f9180 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d245790 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56283d245968 prev 0x56283d245790 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56283d2459f8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56283d249110 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d24aa70 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56283d24aa20 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56283d24aa00 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56283d249328 'type'
|     `-SubstTemplateTypeParmType 0x56283d2492f0 'String' sugar
|       |-TemplateTypeParmType 0x56283d1f8ad0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d1f8a80 'T'
|       `-RecordType 0x56283d0e91e0 'String'
|         `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24ab28 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56283d24aaf0 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56283d24aad0 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56283d24aa70 'type'
|     `-ElaboratedType 0x56283d24aa20 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56283d24aa00 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56283d249328 'type'
|         `-SubstTemplateTypeParmType 0x56283d2492f0 'String' sugar
|           |-TemplateTypeParmType 0x56283d1f8ad0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56283d1f8a80 'T'
|           `-RecordType 0x56283d0e91e0 'String'
|             `-CXXRecord 0x56283d0e9150 'String'
|-CXXMethodDecl 0x56283d24aca8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56283d24abb8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56283d24ad98 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56283d24ae78 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56283d24ae78
|-CXXMethodDecl 0x56283d24b148 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56283d24b050 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56283d24b388 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56283d24b200 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d24b278 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24b558 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56283d24b448 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d24b4c0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24b6b8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56283d24b788 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56283d24b9d8 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56283d24b848 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56283d24b8c0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24bc38 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56283d24baa8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56283d24bb20 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24bdf8 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56283d24bd08 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24bfb8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56283d24bec0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24c070 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d24c120 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d24c358 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56283d24c1d0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d24c248 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56283d24c5f8 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56283d24c500 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56283d24c6c0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56283d24c710 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56283d24c760 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d225620 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56283d2441f8 prev 0x56283d225620 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56283d245700 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56283d2456b0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56283d245690 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56283d245540 'type'
|     `-SubstTemplateTypeParmType 0x56283d2453d0 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56283d153f80 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56283d153f28 'F'
|       `-RecordType 0x56283d245030 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56283d244f50 'typed_array_memory'
|-FieldDecl 0x56283d24c7b0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56283d24c800 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56283d24c838 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|   |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56283d204620 'T'
|   `-RecordType 0x56283d0e91e0 'String'
|     `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24c8c8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56283d24c890 'String &'
|   `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d0e91e0 'String'
|       `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24c958 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56283d24c920 'const String &'
|   `-QualType 0x56283d244291 'const String' const
|     `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d0e91e0 'String'
|         `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24c9e8 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56283d24c9b0 'String *'
|   `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d0e91e0 'String'
|       `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24ca78 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56283d24ca40 'const String *'
|   `-QualType 0x56283d244291 'const String' const
|     `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d0e91e0 'String'
|         `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24d700 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56283d24d6b0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56283d24d690 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56283d24d5c8 'type'
|     `-LValueReferenceType 0x56283d24d590 'const String &'
|       `-QualType 0x56283d24d331 'const String' const
|         `-SubstTemplateTypeParmType 0x56283d24d330 'String' sugar
|           |-TemplateTypeParmType 0x56283d15cdb0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56283d15cd58 'T'
|           `-RecordType 0x56283d0e91e0 'String'
|             `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24d768 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56283d24c920 'const String &'
|   `-QualType 0x56283d244291 'const String' const
|     `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d0e91e0 'String'
|         `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24d7c0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d24d828 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56283d24c9b0 'String *'
|   `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-RecordType 0x56283d0e91e0 'String'
|       `-CXXRecord 0x56283d0e9150 'String'
|-TypedefDecl 0x56283d24d890 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56283d24ca40 'const String *'
|   `-QualType 0x56283d244291 'const String' const
|     `-SubstTemplateTypeParmType 0x56283d244290 'String' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-RecordType 0x56283d0e91e0 'String'
|         `-CXXRecord 0x56283d0e9150 'String'
|-EnumDecl 0x56283d24d8e8 <line:134:5> col:5
| `-EnumConstantDecl 0x56283d24d9e0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56283d24d9c0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56283d205838 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56283d205810 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56283d2057f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56283d24da68 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56283d24dcf8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d24db20 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d24dbc0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56283d24df88 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56283d24de70 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56283d24e248 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56283d24e130 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56283d24e560 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56283d24e440 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56283d24e870 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56283d24e750 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56283d24eb60 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d24e9a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d24ea20 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56283d24ec88 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56283d24ed38 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d24ed90 <col:30> Inherited
|-CXXMethodDecl 0x56283d24edd8 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56283d24ee88 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d24eee0 <col:30> Inherited
|-CXXMethodDecl 0x56283d24efa8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56283d24f058 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d24f0b0 <col:30> Inherited
|-CXXMethodDecl 0x56283d24f0f8 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56283d24f1a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d24f200 <col:30> Inherited
|-CXXMethodDecl 0x56283d24f248 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56283d24f2f8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d24f350 <col:30> Inherited
|-CXXMethodDecl 0x56283d24f398 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56283d24f448 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d24f4a0 <col:30> Inherited
|-CXXMethodDecl 0x56283d24f4c8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d24f578 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d24f628 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56283d24f7e8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d24f6d8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d24f750 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56283d24f938 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56283d24f8a8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d24fae8 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56283d24f9f0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d24fba0 <col:20>
| `-OptimizeNoneAttr 0x56283d24fbf8 <col:30>
|-CXXMethodDecl 0x56283d24fd18 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56283d24fc20 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d24fdd0 <col:20>
| `-OptimizeNoneAttr 0x56283d24fe28 <col:30>
|-CXXMethodDecl 0x56283d24fee0 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d24fe50 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d250028 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d24ff98 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d250158 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56283d250288 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56283d250358 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56283d250428 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56283d250568 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d2504d8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d2506b0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d250620 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d2507f8 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56283d250768 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d2508b0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56283d2509b0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56283d250920 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d250a68 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56283d250b28 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56283d250c28 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56283d250da8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d250ce8 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56283d251588 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56283d250e60 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56283d2514e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56283d2513e8 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56283d251668 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d2517b8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d251728 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56283d251870 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56283d251ab8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d251930 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56283d2519a8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56283d251c48 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56283d251b88 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56283d251e58 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56283d251d10 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56283d251d88 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56283d251f18 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56283d252178 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56283d252080 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56283d252248 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56283d252248

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d1399e0 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d139af8 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56283d139b88 <col:22, col:28> col:22 public
|-EnumDecl 0x56283d139bb0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56283d139cc8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d139ca8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56283d139c90 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56283d139c70 <col:14> 'int' 999
| |-EnumConstantDecl 0x56283d139d70 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d139d50 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56283d139d38 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56283d139d18 <col:14> 'int' 1
| |-EnumConstantDecl 0x56283d139e00 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d139de0 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56283d139dc0 <col:17> 'int' 0
| |-EnumConstantDecl 0x56283d139e90 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d139e70 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56283d139e50 <col:13> 'int' 1
| |-EnumConstantDecl 0x56283d139f20 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d139f00 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56283d139ee0 <col:16> 'int' 2
| |-EnumConstantDecl 0x56283d139fb0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d139f90 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56283d139f70 <col:13> 'int' 3
| |-EnumConstantDecl 0x56283d13a040 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d13a020 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56283d13a000 <col:15> 'int' 4
| |-EnumConstantDecl 0x56283d13a0d0 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d13a0b0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56283d13a090 <col:14> 'int' 5
| |-EnumConstantDecl 0x56283d13a160 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56283d13a140 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56283d13a120 <col:12> 'int' 6
| `-EnumConstantDecl 0x56283d13a1f0 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56283d13a1d0 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56283d13a1b0 <col:13> 'int' 7
|-VarDecl 0x56283d13a2b8 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56283d13a340 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56283d13a3c8 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56283d13a450 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56283d13a4d8 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56283d13a560 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56283d13a610 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56283d13a698 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56283d13a720 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56283d13a7a8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56283d13a830 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56283d13a960 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56283d13ffa8 '_nerrors' 'int'
| | `-IntegerLiteral 0x56283d140738 <line:128:13> 'int' 0
| `-CompoundStmt 0x56283d1424e0 <col:16, line:129:5>
|-CXXDestructorDecl 0x56283d13aa50 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56283d1424f0 <col:29, line:132:5>
|-CXXMethodDecl 0x56283d13ac08 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56283d13ab40 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56283d13acd0 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56283d13adb8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56283d142548 <col:44, line:161:5>
|   `-ReturnStmt 0x56283d142538 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56283d142520 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56283d142500 <col:9> 'ErrorHandler *' lvalue Var 0x56283d140008 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56283d13af28 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56283d13ae68 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56283d13aff0 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56283d1425a8 <col:43, line:173:5>
|   `-ReturnStmt 0x56283d142598 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56283d142580 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56283d142560 <col:9> 'ErrorHandler *' lvalue Var 0x56283d140080 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56283d13b0a8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56283d13b128 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56283d13b270 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56283d13b1a8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56283d13b3c0 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56283d13b330 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56283d13b518 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56283d13b480 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56283d13b670 <line:196:5, col:35> col:9 error 'int (const char *, ...)'
| `-ParmVarDecl 0x56283d13b5d8 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56283d13b7c8 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56283d13b730 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56283d13b9e0 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56283d13b880 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56283d13b900 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56283d13bbb8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56283d13baa0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56283d13bb20 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56283d13bdd8 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56283d13bc78 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56283d13bcf8 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56283d13bfb8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56283d13be98 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56283d13bf18 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56283d13c198 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56283d13c078 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56283d13c0f8 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56283d13c320 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56283d13c258 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56283d13c4f0 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56283d13c3d8 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56283d13c450 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56283d142808 <col:57, line:234:5>
|   `-ReturnStmt 0x56283d1427f8 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56283d1427e0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56283d142788 <col:9, col:41> 'int'
|         |-MemberExpr 0x56283d142758 <col:9> '<bound member function type>' ->xmessage 0x56283d13c320
|         | `-CXXThisExpr 0x56283d142748 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56283d1427c8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56283d1427b0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56283d142728 <col:18, col:40> 'String' (CXXTemporary 0x56283d142728)
|               `-CallExpr 0x56283d1426f0 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56283d1426d8 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56283d142648 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56283d13e790 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56283d142668 <col:31> 'const String' lvalue ParmVar 0x56283d13c450 'str' 'const String &'
|                 `-DeclRefExpr 0x56283d142688 <col:36> 'const String' lvalue ParmVar 0x56283d13c3d8 'anno' 'const String &'
|-CXXMethodDecl 0x56283d13c8a0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56283d13c620 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56283d13c6a0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56283d13c770 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56283d142a98 <col:68, line:243:5>
|   `-ReturnStmt 0x56283d142a88 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56283d142a70 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56283d142a10 <col:9, col:41> 'int'
|         |-MemberExpr 0x56283d1429e0 <col:9> '<bound member function type>' ->xmessage 0x56283d13c4f0
|         | `-CXXThisExpr 0x56283d1429d0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56283d1428a8 <col:18> 'const String' lvalue ParmVar 0x56283d13c620 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56283d142a58 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56283d142a40 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56283d1429b0 <col:24, col:40> 'String' (CXXTemporary 0x56283d1429b0)
|               `-CXXMemberCallExpr 0x56283d142948 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56283d1428d8 <col:24> '<bound member function type>' ->vformat 0x56283d13da80
|                 | `-CXXThisExpr 0x56283d1428c8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56283d142978 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56283d142908 <col:32> 'const char *' lvalue ParmVar 0x56283d13c6a0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56283d142990 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56283d142928 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56283d13c770 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56283d13cb40 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56283d13c968 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56283d13c9e0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56283d13ca58 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56283d142dd8 <col:23, line:254:5>
|   `-ReturnStmt 0x56283d142dc8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56283d142db0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56283d142d50 <col:9, col:71> 'int'
|         |-MemberExpr 0x56283d142d20 <col:9> '<bound member function type>' ->xmessage 0x56283d13c4f0
|         | `-CXXThisExpr 0x56283d142d10 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56283d142d98 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56283d142d80 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56283d142cd0 <col:18, col:65> 'String' (CXXTemporary 0x56283d142cd0)
|         |     `-CallExpr 0x56283d142c68 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56283d142c50 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56283d142b38 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56283d13e790 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56283d142b58 <col:31> 'const String' lvalue ParmVar 0x56283d13c9e0 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56283d142cb0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56283d142c98 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56283d142c30 <col:37, col:64> 'String' (CXXTemporary 0x56283d142c30)
|         |             `-CallExpr 0x56283d142c00 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56283d142be8 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56283d142b78 <col:37> 'String (const String &)' lvalue CXXMethod 0x56283d13ede8 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56283d142b98 <col:56> 'const String' lvalue ParmVar 0x56283d13c968 'landmark' 'const String &'
|         `-DeclRefExpr 0x56283d142cf0 <col:68> 'const String' lvalue ParmVar 0x56283d13ca58 'str' 'const String &'
|-CXXMethodDecl 0x56283d13cec0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56283d13cc08 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56283d13cc80 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56283d13cd00 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56283d13cd78 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56283d143090 <col:34, line:267:5>
|   `-ReturnStmt 0x56283d143080 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56283d143068 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56283d143000 <col:9, col:51> 'int'
|         |-MemberExpr 0x56283d142fd0 <col:9> '<bound member function type>' ->xmessage 0x56283d13cb40
|         | `-CXXThisExpr 0x56283d142fc0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56283d142e78 <col:18> 'const String' lvalue ParmVar 0x56283d13cc08 'landmark' 'const String &'
|         |-DeclRefExpr 0x56283d142e98 <col:28> 'const String' lvalue ParmVar 0x56283d13cc80 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56283d143050 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56283d143038 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56283d142fa0 <col:34, col:50> 'String' (CXXTemporary 0x56283d142fa0)
|               `-CXXMemberCallExpr 0x56283d142f38 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56283d142ec8 <col:34> '<bound member function type>' ->vformat 0x56283d13da80
|                 | `-CXXThisExpr 0x56283d142eb8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56283d142f68 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56283d142ef8 <col:42> 'const char *' lvalue ParmVar 0x56283d13cd00 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56283d142f80 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56283d142f18 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56283d13cd78 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56283d13cfd0 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56283d143110 <col:25, line:288:5>
|   `-ReturnStmt 0x56283d143100 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56283d1430e8 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56283d1430b8 <col:9> 'const int' lvalue ->_nerrors 0x56283d13ffa8
|         `-CXXThisExpr 0x56283d1430a8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56283d13d1e0 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56283d13d088 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56283d13d108 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56283d13d4c8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56283d13d2a8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56283d13d328 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56283d13d3a0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56283d13d660 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56283d13d598 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56283d13d8a8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56283d13d720 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56283d13d798 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56283d143370 <col:58, line:357:5>
|   `-ReturnStmt 0x56283d143360 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56283d143348 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56283d143318 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56283d143300 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56283d1432e0 <col:9, col:29> 'String' (CXXTemporary 0x56283d1432e0)
|             `-CallExpr 0x56283d143270 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56283d143258 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56283d1431d8 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56283d13d4c8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56283d143178 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56283d1432a8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56283d143198 <col:21> 'const char *' lvalue ParmVar 0x56283d13d720 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56283d1432c0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56283d1431b8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56283d13d798 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56283d13da80 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56283d13d970 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56283d13d9e8 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56283d13dbd8 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56283d13db48 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56283d13dd58 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56283d13dc90 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56283d13dff0 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56283d13de10 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56283d13de90 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56283d13df08 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56283d13e150 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56283d13e0c0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56283d143488 <col:37, line:441:5>
|   `-IfStmt 0x56283d143470 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56283d1433f8 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56283d1433c8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56283d143388 <col:6> 'int' lvalue ParmVar 0x56283d13e0c0 'level' 'int'
|     | `-ImplicitCastExpr 0x56283d1433e0 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56283d1433a8 <col:15> 'ErrorHandler::Level' EnumConstant 0x56283d139fb0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56283d143458 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56283d143428 <col:8> 'int' lvalue ->_nerrors 0x56283d13ffa8
|         `-CXXThisExpr 0x56283d143418 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56283d13e218 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56283d143520 <col:26, line:448:5>
|   `-BinaryOperator 0x56283d143500 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56283d1434b0 <col:2> 'int' lvalue ->_nerrors 0x56283d13ffa8
|     | `-CXXThisExpr 0x56283d1434a0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56283d1434e0 <col:13> 'int' 0
|-CXXMethodDecl 0x56283d13e3e0 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56283d13e2d0 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56283d13e348 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56283d13e790 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56283d13e4a0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56283d13e518 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56283d13ea48 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56283d13e850 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56283d13e8d0 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56283d13e950 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56283d13eb00 <col:59> 0 0
|-CXXMethodDecl 0x56283d13ec98 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56283d13eb78 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56283d13ebf8 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56283d143b90 <col:70, line:534:5>
|   |-DeclStmt 0x56283d143690 <line:528:2, col:20>
|   | |-VarDecl 0x56283d143548 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56283d1435b0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56283d1435e8 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56283d143650 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56283d143760 <line:529:2, col:23>
|   | `-VarDecl 0x56283d1436c0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56283d143748 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56283d143728 <col:18> 'const char *' lvalue ParmVar 0x56283d13eb78 'begin' 'const char *'
|   |-DoStmt 0x56283d143b28 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56283d143a58 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56283d143a40 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56283d143a20 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56283d143778 <col:6> 'const char *' lvalue Var 0x56283d1436c0 'x' 'const char *'
|   | |     `-CallExpr 0x56283d143970 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56283d143958 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56283d143910 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56283d140480 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56283d1439d8 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56283d1439c0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56283d143830 <col:20, col:27> 'String' (CXXTemporary 0x56283d143830)
|   | |       |     `-CXXTemporaryObjectExpr 0x56283d1437f8 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56283d1439f0 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56283d143850 <col:30> 'const char *' lvalue Var 0x56283d1436c0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56283d143a08 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56283d143870 <col:33> 'const char *' lvalue ParmVar 0x56283d13ebf8 'end' 'const char *'
|   | |       |-UnaryOperator 0x56283d1438b0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56283d143890 <col:39> 'String' lvalue Var 0x56283d143548 'name' 'String'
|   | |       |-UnaryOperator 0x56283d1438e8 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56283d1438c8 <col:46> 'String' lvalue Var 0x56283d1435e8 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56283d143900 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56283d143b10 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56283d143af8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56283d143ad8 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56283d143aa8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|   |         `-ImplicitCastExpr 0x56283d143a90 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56283d143a70 <col:11> 'String' lvalue Var 0x56283d143548 'name' 'String'
|   `-ReturnStmt 0x56283d143b80 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56283d143b68 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56283d143b48 <col:9> 'const char *' lvalue Var 0x56283d1436c0 'x' 'const char *'
|-CXXMethodDecl 0x56283d13ede8 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56283d13ed58 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56283d144198 <col:55, line:550:5>
|   `-IfStmt 0x56283d144170 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56283d143dd0 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56283d143db8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56283d143da0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56283d143d80 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56283d143d50 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|     | |       `-DeclRefExpr 0x56283d143bf0 <col:6> 'const String' lvalue ParmVar 0x56283d13ed58 'x' 'const String &'
|     | `-BinaryOperator 0x56283d143d30 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56283d143d00 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56283d143cb0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56283d143c98 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56283d143c50 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56283d107e80 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56283d143c10 <col:11> 'const String' lvalue ParmVar 0x56283d13ed58 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56283d143c30 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56283d143d18 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56283d143ce8 <col:19> 'char' 123
|     |-ReturnStmt 0x56283d143e40 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56283d143e10 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56283d143df0 <col:13> 'const String' lvalue ParmVar 0x56283d13ed58 'x' 'const String &'
|     `-IfStmt 0x56283d144148 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56283d143ed8 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56283d143ec0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56283d143ea0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56283d143e70 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |       `-DeclRefExpr 0x56283d143e50 <col:11> 'const String' lvalue ParmVar 0x56283d13ed58 'x' 'const String &'
|       |-ReturnStmt 0x56283d144060 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56283d144048 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56283d144018 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56283d144000 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56283d143fe0 <col:13, col:29> 'String' (CXXTemporary 0x56283d143fe0)
|       |         `-CallExpr 0x56283d143f90 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56283d143f78 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56283d143ef0 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56283d13e3e0 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56283d143fc0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56283d143f10 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56283d143f30 <col:28> 'const String' lvalue ParmVar 0x56283d13ed58 'x' 'const String &'
|       `-ReturnStmt 0x56283d144138 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56283d144120 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56283d1440f0 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56283d1440d8 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56283d1440b8 <col:13, col:20> 'String' (CXXTemporary 0x56283d1440b8)
|                 `-CXXTemporaryObjectExpr 0x56283d144080 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56283d13efe8 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56283d13eea0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56283d13ef18 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56283d140728 <col:71> 'bool' false
|-CXXRecordDecl 0x56283d13f098 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56283d13f398 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56283d13f330 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56283d13f2d0 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56283d13f290 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56283d0e91e0 'String'
|       | `-CXXRecord 0x56283d0e9150 'String'
|       |-BuiltinType 0x56283ceab370 'int'
|       `-DecayedType 0x56283d13c740 '__va_list_tag *' sugar
|         |-TypedefType 0x56283d13c710 'va_list' sugar
|         | |-Typedef 0x56283d11fe90 'va_list'
|         | `-TypedefType 0x56283d11fe40 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56283d11b218 '__gnuc_va_list'
|         |   `-TypedefType 0x56283d11b180 '__builtin_va_list' sugar
|         |     |-Typedef 0x56283ceecbd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56283ceecb80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56283ceac0c0 '__va_list_tag'
|         |         `-CXXRecord 0x56283ceac028 '__va_list_tag'
|         `-PointerType 0x56283d125a10 '__va_list_tag *'
|           `-RecordType 0x56283ceac0c0 '__va_list_tag'
|             `-CXXRecord 0x56283ceac028 '__va_list_tag'
|-EnumDecl 0x56283d13f3f0 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56283d13f4f0 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fa50 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f4d0 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56283d13f4b0 <col:16> 'int' 1
| |-EnumConstantDecl 0x56283d13f580 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fa68 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f560 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56283d13f540 <col:21> 'int' 2
| |-EnumConstantDecl 0x56283d13f610 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fa80 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f5f0 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56283d13f5d0 <col:22> 'int' 4
| |-EnumConstantDecl 0x56283d13f6a0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fa98 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f680 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56283d13f660 <col:17> 'int' 8
| |-EnumConstantDecl 0x56283d13f730 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fab0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f710 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56283d13f6f0 <col:22> 'int' 16
| |-EnumConstantDecl 0x56283d13f7c0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fac8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f7a0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56283d13f780 <col:19> 'int' 32
| |-EnumConstantDecl 0x56283d13f850 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fae0 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f830 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56283d13f810 <col:17> 'int' 64
| |-EnumConstantDecl 0x56283d13f8e0 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13faf8 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f8c0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56283d13f8a0 <col:14> 'int' 128
| |-EnumConstantDecl 0x56283d13f970 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56283d13fb10 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56283d13f950 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56283d13f930 <col:16> 'int' 256
| `-EnumConstantDecl 0x56283d13fa00 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56283d13fb28 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d13f9e0 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56283d13f9c0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56283d13fd38 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56283d13fb50 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56283d13fbf0 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56283d13fec0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56283d13fdf8 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56283d13ff68 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56283d13ffa8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56283d140008 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56283d140080 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56283d140480 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56283d1400f8 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56283d140178 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56283d1401f8 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56283d140270 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56283d1402e8 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56283d140360 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56283d1405a8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56283d1405a8
| `-ParmVarDecl 0x56283d1406b8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56283d149e28 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56283d149e28
  `-ParmVarDecl 0x56283d149f38 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d408b00 prev 0x56283d407648 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d408bf8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56283d408c88 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56283d408d98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56283d408cc0 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56283d40a170 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d40a150 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56283d409ce8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56283d40a200 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56283d40a1c0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56283d408cc0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56283d409d50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56283d40a280 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d40a240 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56283d409db0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56283d40a2c0 <col:54> 'bool' false
| `-CompoundStmt 0x56283d40a3c8 <col:61, line:38:5>
|   `-BinaryOperator 0x56283d40a3a8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56283d40a340 <col:9> 'const Element *' lvalue ->_context 0x56283d409c88
|     | `-CXXThisExpr 0x56283d40a330 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56283d40a390 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56283d40a370 <col:20> 'int' 0
|-CXXConstructorDecl 0x56283d408fa8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d408e58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56283d408ed0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56283d40a1a8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d40a188 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56283d409c88 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56283d40a420 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56283d40a3e0 <col:20> 'const Element *' lvalue ParmVar 0x56283d408e58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56283d409ce8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56283d40a4a0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56283d40a460 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56283d408ed0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56283d409d50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56283d40a520 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56283d40a4e0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56283d409db0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56283d40a560 <col:73> 'bool' false
| `-CompoundStmt 0x56283d40a5d8 <col:80, line:46:5>
|-CXXMethodDecl 0x56283d4090d8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56283d40a650 <col:36, line:51:5>
|   `-ReturnStmt 0x56283d40a640 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56283d40a628 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56283d40a5f8 <col:16> 'const Element *const' lvalue ->_context 0x56283d409c88
|         `-CXXThisExpr 0x56283d40a5e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56283d4091c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56283d40a6d0 <col:32, line:57:5>
|   `-ReturnStmt 0x56283d40a6c0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56283d40a6a8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56283d40a678 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56283d409ce8
|         `-CXXThisExpr 0x56283d40a668 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56283d409288 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56283d409410 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56283d409340 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56283d409560 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56283d4094d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56283d4096b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56283d409620 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56283d4098b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56283d409768 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56283d4097e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56283d409b98 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56283d409978 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56283d4099f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56283d409a70 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56283d409c50 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56283d409c88 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56283d409ce8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56283d409d50 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56283d409db0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56283d409e00 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56283d409e00
| `-ParmVarDecl 0x56283d409f18 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56283d409fb8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56283d409fb8
| `-ParmVarDecl 0x56283d40a0c8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56283d5aed28 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d4317e0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56283d4319b8 prev 0x56283d4317e0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56283d431a48 <col:46, col:52> col:46 public
|-TypedefDecl 0x56283d431a70 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d4367d0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56283d436780 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56283d431f20 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56283d431e20 'type'
|     `-TemplateSpecializationType 0x56283d431db0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56283d431c90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56283d431c70 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56283d431c50 <col:24> 'unsigned long' 4
|       `-RecordType 0x56283d431d90 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56283d431cb0 'char_array'
|-TypedefDecl 0x56283d436888 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56283d436850 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56283d436830 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56283d4367d0 'type'
|     `-ElaboratedType 0x56283d436780 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56283d431f20 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56283d431e20 'type'
|         `-TemplateSpecializationType 0x56283d431db0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56283d431c90 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56283d431c70 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56283d431c50 <col:24> 'unsigned long' 4
|           `-RecordType 0x56283d431d90 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56283d431cb0 'char_array'
|-CXXMethodDecl 0x56283d436a08 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56283d436918 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56283d436af8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56283d436bd8 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56283d436ea8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56283d436db0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56283d4370e8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56283d436f60 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d436fd8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d4372b8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56283d4371a8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d437220 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d437418 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56283d4374e8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56283d437738 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56283d4375a8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56283d437620 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d437998 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56283d437808 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56283d437880 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d437b58 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56283d437a68 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d437d18 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56283d437c20 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d437dd0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d437e80 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56283d4380b8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56283d437f30 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56283d437fa8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56283d438358 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56283d438260 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56283d438420 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56283d438470 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56283d4384c0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d4301e8 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56283d4303f8 prev 0x56283d4301e8 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56283d431750 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56283d431700 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56283d4316e0 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56283d431590 'type'
|     `-SubstTemplateTypeParmType 0x56283d4313b0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56283d1537d0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d153778 'T'
|       `-RecordType 0x56283d430f00 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56283d430e18 'sized_array_memory'
|-FieldDecl 0x56283d438510 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56283d438560 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56283d438598 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|   |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56283d204620 'T'
|   `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d438628 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56283d4385f0 'int &'
|   `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d4386e8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56283d4386b0 'const int &'
|   `-QualType 0x56283d430491 'const int' const
|     `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d438778 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56283d438740 'int *'
|   `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d438808 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56283d4387d0 'const int *'
|   `-QualType 0x56283d430491 'const int' const
|     `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d4393f0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56283d4393a0 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56283d439380 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56283d439310 'type'
|     `-SubstTemplateTypeParmType 0x56283d4390d0 'int' sugar
|       |-TemplateTypeParmType 0x56283d15d4e0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d15d490 'T'
|       `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d439458 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56283d4386b0 'const int &'
|   `-QualType 0x56283d430491 'const int' const
|     `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d4394b0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d439518 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56283d438740 'int *'
|   `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|     |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56283d204620 'T'
|     `-BuiltinType 0x56283ceab370 'int'
|-TypedefDecl 0x56283d439580 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56283d4387d0 'const int *'
|   `-QualType 0x56283d430491 'const int' const
|     `-SubstTemplateTypeParmType 0x56283d430490 'int' sugar
|       |-TemplateTypeParmType 0x56283d204670 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56283d204620 'T'
|       `-BuiltinType 0x56283ceab370 'int'
|-EnumDecl 0x56283d43dcc0 <line:134:5> col:5
| `-EnumConstantDecl 0x56283d43ddb0 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56283d43dd90 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56283d205838 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56283d205810 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56283d2057f0 <col:40> 'int' 1
|-CXXConstructorDecl 0x56283d43de38 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56283d43e088 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d43def0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d43df90 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56283d43e348 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56283d43e230 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56283d43e608 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56283d43e4f0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56283d43e950 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56283d43e830 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56283d43ec60 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56283d43eb40 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56283d43ef50 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d43ed98 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d43ee10 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56283d43f078 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56283d43f158 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d43f1b0 <col:30> Inherited
|-CXXMethodDecl 0x56283d43f1f8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56283d43f2a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d43f300 <col:30> Inherited
|-CXXMethodDecl 0x56283d43f3c8 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56283d43f478 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d43f4d0 <col:30> Inherited
|-CXXMethodDecl 0x56283d43f518 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56283d43f5c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d43f620 <col:30> Inherited
|-CXXMethodDecl 0x56283d43f668 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56283d43f718 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d43f770 <col:30> Inherited
|-CXXMethodDecl 0x56283d43f7b8 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56283d43f868 <col:20> Inherited
| `-OptimizeNoneAttr 0x56283d43f8c0 <col:30> Inherited
|-CXXMethodDecl 0x56283d43f8e8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d43f998 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56283d43fa48 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56283d43fc08 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d43faf8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56283d43fb70 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56283d43fd58 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56283d43fcc8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d43ff08 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56283d43fe10 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d43ffc0 <col:20>
| `-OptimizeNoneAttr 0x56283d440018 <col:30>
|-CXXMethodDecl 0x56283d440138 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56283d440040 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56283d4401f0 <col:20>
| `-OptimizeNoneAttr 0x56283d440248 <col:30>
|-CXXMethodDecl 0x56283d440300 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d440270 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d440448 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d4403b8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d440578 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56283d4406a8 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56283d440778 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56283d440848 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56283d440988 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56283d4408f8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d440ad0 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56283d440a40 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56283d440c18 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56283d440b88 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d440cd0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56283d440dd0 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56283d440d40 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56283d440e88 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56283d440f48 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56283d441048 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56283d4411c8 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d441108 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56283d441988 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56283d441280 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56283d4418e8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56283d4417e8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56283d441a68 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56283d441bb8 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56283d441b28 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56283d441c70 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56283d441eb8 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56283d441d30 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56283d441da8 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56283d442078 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56283d441f88 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56283d4422c8 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56283d442140 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56283d4421b8 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56283d442388 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56283d4425e8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56283d4424f0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56283d4426b8 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d426988 prev 0x56283d40f558 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56283d42e450 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56283d42e540 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56283d4526e0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56283d42e630 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56283d4526f0 <col:25, line:830:9>
|-CXXMethodDecl 0x56283d42e730 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56283d42e7e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56283d42e888 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56283d42e888
| `-ParmVarDecl 0x56283d42e998 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56283d42f158 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56283d42f158
  `-ParmVarDecl 0x56283d42f268 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d40f368 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56283d40f4c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56283d40f558 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56283d40f610 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56283d40f718 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56283d40f648 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56283d443cf8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56283d443cd8 <col:31> 'int' 0
|-CXXConstructorDecl 0x56283d40fa38 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56283d40f8b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56283d40f928 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56283d443d30 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56283d443d10 <col:59> 'int' 0
|-CXXConstructorDecl 0x56283d40fc10 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d40fb00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56283d40fb78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56283d443d68 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56283d443d48 <col:55> 'int' 0
|-CXXConstructorDecl 0x56283d40ffc8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56283d40fdb0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56283d40fe28 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56283d40fea0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56283d443da0 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56283d443d80 <col:31> 'int' 0
|-CXXConstructorDecl 0x56283d410188 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56283d4100c8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56283d410280 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56283d410468 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56283d410370 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56283d410558 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56283d444190 <col:24, line:291:5>
|   `-ReturnStmt 0x56283d444180 <line:290:9, col:79>
|     `-BinaryOperator 0x56283d444160 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56283d443ff8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56283d443f50 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56283d443f30 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56283d443e28 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56283d443e10 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56283d443df8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56283d443dc8 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56283d430180
|       | |   |       `-CXXThisExpr 0x56283d443db8 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56283d443f18 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56283d443f00 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56283d443ec8 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56283d443e98 <col:28, col:35> '<bound member function type>' ->size 0x56283d24f4c8
|       | |           `-ImplicitCastExpr 0x56283d443ee8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56283d443e80 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56283d443e50 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56283d430180
|       | |                 `-CXXThisExpr 0x56283d443e40 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56283d443fe0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56283d443fc8 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56283d443fb0 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56283d443f80 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56283d442800
|       |         `-CXXThisExpr 0x56283d443f70 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56283d444140 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56283d444128 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56283d444110 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56283d4440d0 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56283d4440b8 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56283d444028 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56283d442928
|         |     |   `-CXXThisExpr 0x56283d444018 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56283d444058 <col:73> 'int' 0
|         `-IntegerLiteral 0x56283d4440f0 <col:79> 'int' 0
|-CXXMethodDecl 0x56283d410618 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56283d444368 <col:32, line:296:5>
|   `-ReturnStmt 0x56283d444358 <line:295:9, col:49>
|     `-BinaryOperator 0x56283d444338 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56283d444218 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56283d444200 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56283d4441e8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56283d4441b8 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56283d442800
|       |       `-CXXThisExpr 0x56283d4441a8 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56283d444318 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56283d444300 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56283d4442e8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56283d4442a8 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56283d444290 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56283d444240 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56283d442928
|         |     |   `-CXXThisExpr 0x56283d444230 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56283d444270 <col:43> 'int' 0
|         `-IntegerLiteral 0x56283d4442c8 <col:49> 'int' 0
|-CXXMethodDecl 0x56283d410708 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56283d444578 <col:19, line:306:5>
|   |-IfStmt 0x56283d444498 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56283d4443d8 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56283d4443c0 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56283d444390 <col:13> 'Vector<String> *' lvalue ->_conf 0x56283d430180
|   | |     `-CXXThisExpr 0x56283d444380 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56283d444478 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56283d444448 <col:13, col:20> '<bound member function type>' ->clear 0x56283d251f18
|   |     `-ImplicitCastExpr 0x56283d444430 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56283d444400 <col:13> 'Vector<String> *' lvalue ->_conf 0x56283d430180
|   |         `-CXXThisExpr 0x56283d4443f0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56283d444520 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56283d4444f0 <col:9, col:16> '<bound member function type>' .clear 0x56283d442388
|   |   `-MemberExpr 0x56283d4444c0 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56283d4427a0
|   |     `-CXXThisExpr 0x56283d4444b0 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56283d444568 <line:305:9, col:17>
|     `-UnaryOperator 0x56283d444550 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d444540 <col:17> 'Args *' this
|-CXXMethodDecl 0x56283d410a00 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56283d410890 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56283d410b78 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56283d410ab8 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56283d410ef8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56283d410c20 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56283d410e58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56283d410cc8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56283d410d40 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56283d444888 <col:67, line:327:5>
|     |-WhileStmt 0x56283d444838 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56283d444650 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56283d4445e0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56283d3ffb78 0x56283d1ec7f0 0x56283d1170a0 0x56283d116d50 0x56283d116640 0x56283d0d75d0
|     | | |-DeclRefExpr 0x56283d4445a0 <col:16> 'Iter' lvalue ParmVar 0x56283d410cc8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56283d4445c0 <col:25> 'Iter' lvalue ParmVar 0x56283d410d40 'end' 'Iter'
|     | `-CompoundStmt 0x56283d444818 <col:30, line:325:9>
|     |   |-CallExpr 0x56283d4447b8 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56283d444698 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56283d444788 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56283d444718 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|     |   |   `-DeclRefExpr 0x56283d4446f8 <col:24> 'Iter' lvalue ParmVar 0x56283d410cc8 'begin' 'Iter'
|     |   `-UnaryOperator 0x56283d444800 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56283d4447e0 <col:15> 'Iter' lvalue ParmVar 0x56283d410cc8 'begin' 'Iter'
|     `-ReturnStmt 0x56283d444878 <line:326:9, col:17>
|       `-UnaryOperator 0x56283d444860 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d444850 <col:17> 'Args *' this
|-CXXMethodDecl 0x56283d411000 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56283d410f70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56283d411148 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56283d4110b8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56283d411210 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56283d444968 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56283d444908 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56283d4448b8 <col:9> '<bound member function type>' ->reset_from 0x56283d442ca8
|   | | `-CXXThisExpr 0x56283d4448a8 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56283d4448e8 <col:20> 'int' 0
|   `-ReturnStmt 0x56283d444958 <line:352:9, col:17>
|     `-UnaryOperator 0x56283d444940 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d444930 <col:17> 'Args *' this
|-VarDecl 0x56283d4112c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56283d411330 <col:38> 'int' 1
|-VarDecl 0x56283d4113c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56283d411428 <col:39> 'int' 2
|-VarDecl 0x56283d4114b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56283d411520 <col:39> 'int' 4
|-VarDecl 0x56283d4115b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56283d411618 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56283d411998 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56283d411690 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d4118f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56283d411740 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4117e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56283d444ac0 <col:43, line:371:5>
|     `-ReturnStmt 0x56283d444ab0 <line:370:9, col:34>
|       `-CallExpr 0x56283d444a78 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d444998 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d444a18 <col:21> 'const char *' lvalue ParmVar 0x56283d411740 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d444a38 <col:30> 'int' 0
|         `-DeclRefExpr 0x56283d444a58 <col:33> 'T' lvalue ParmVar 0x56283d4117e8 'x' 'T &'
|-FunctionTemplateDecl 0x56283d411cc8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56283d411a00 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d411c28 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56283d411ab0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d411b58 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56283d444c10 <col:45, line:375:5>
|     `-ReturnStmt 0x56283d444c00 <line:374:9, col:42>
|       `-CallExpr 0x56283d444bc8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d444ae8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d444b68 <col:21> 'const char *' lvalue ParmVar 0x56283d411ab0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d444b88 <col:30> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x56283d444ba8 <col:41> 'T' lvalue ParmVar 0x56283d411b58 'x' 'T &'
|-FunctionTemplateDecl 0x56283d411ff8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56283d411d30 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d411f58 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56283d411de0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d411e88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56283d444d60 <col:45, line:379:5>
|     `-ReturnStmt 0x56283d444d50 <line:378:9, col:43>
|       `-CallExpr 0x56283d444d18 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d444c38 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d444cb8 <col:21> 'const char *' lvalue ParmVar 0x56283d411de0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d444cd8 <col:30> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int'
|         `-DeclRefExpr 0x56283d444cf8 <col:42> 'T' lvalue ParmVar 0x56283d411e88 'x' 'T &'
|-FunctionTemplateDecl 0x56283d412328 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56283d412060 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56283d412288 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56283d412110 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56283d4121b8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x56283d444f60 <col:46, line:383:5>
| |   `-ReturnStmt 0x56283d444f50 <line:382:9, col:55>
| |     `-CallExpr 0x56283d444f18 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56283d444d88 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56283d444e08 <col:21> 'const char *' lvalue ParmVar 0x56283d412110 'keyword' 'const char *'
| |       |-BinaryOperator 0x56283d444ed8 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56283d444e88 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56283d444e68 <col:30> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56283d444ec0 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56283d444ea0 <col:42> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x56283d444ef8 <col:54> 'T' lvalue ParmVar 0x56283d4121b8 'x' 'T &'
| `-CXXMethodDecl 0x56283d5af1b8 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, Timestamp &)'
|   |-TemplateArgument type 'Timestamp'
|   |-ParmVarDecl 0x56283d5aefd0 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x56283d5af0a8 <col:40, col:43> col:43 x 'Timestamp &'
|-FunctionTemplateDecl 0x56283d412728 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56283d412390 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d412688 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56283d412440 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4124c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56283d412568 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56283d4450a0 <col:54, line:388:5>
|     |-CallExpr 0x56283d445028 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d444f78 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56283d444fb8 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56283d444fc8 <col:30> 'const char *' lvalue ParmVar 0x56283d412440 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56283d444fe8 <col:39> 'int' lvalue ParmVar 0x56283d4124c0 'flags' 'int'
|     | `-DeclRefExpr 0x56283d445008 <col:46> 'T' lvalue ParmVar 0x56283d412568 'x' 'T &'
|     `-ReturnStmt 0x56283d445090 <line:387:9, col:17>
|       `-UnaryOperator 0x56283d445078 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d445068 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d412bd8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56283d412798 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56283d412818 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56283d412b38 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56283d4128d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d412978 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56283d412a18 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56283d445210 <col:74, line:403:5>
|     `-ReturnStmt 0x56283d445200 <line:402:9, col:56>
|       `-CallExpr 0x56283d4451c0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4450d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d445140 <col:28> 'const char *' lvalue ParmVar 0x56283d4128d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d445160 <col:37> 'int' 0
|         |-DeclRefExpr 0x56283d445180 <col:40> 'T' lvalue ParmVar 0x56283d412978 'x' 'T &'
|         `-DeclRefExpr 0x56283d4451a0 <col:43> 'const V' lvalue ParmVar 0x56283d412a18 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56283d413048 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56283d412c48 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56283d412cc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56283d412fa8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56283d412d88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d412e28 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56283d412ec8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56283d445378 <col:76, line:407:5>
|     `-ReturnStmt 0x56283d445368 <line:406:9, col:65>
|       `-CallExpr 0x56283d445328 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d445238 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d4452a8 <col:28> 'const char *' lvalue ParmVar 0x56283d412d88 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d4452c8 <col:37> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int'
|         |-DeclRefExpr 0x56283d4452e8 <col:49> 'T' lvalue ParmVar 0x56283d412e28 'x' 'T &'
|         `-DeclRefExpr 0x56283d445308 <col:52> 'const V' lvalue ParmVar 0x56283d412ec8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56283d413598 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56283d4130b8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56283d413138 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56283d4134f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56283d4131f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d413278 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56283d413318 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56283d4133b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56283d4454e0 <col:85, line:412:5>
|     |-CallExpr 0x56283d445460 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d445390 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56283d4453d0 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56283d4453e0 <col:37> 'const char *' lvalue ParmVar 0x56283d4131f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56283d445400 <col:46> 'int' lvalue ParmVar 0x56283d413278 'flags' 'int'
|     | |-DeclRefExpr 0x56283d445420 <col:53> 'T' lvalue ParmVar 0x56283d413318 'x' 'T &'
|     | `-DeclRefExpr 0x56283d445440 <col:56> 'const V' lvalue ParmVar 0x56283d4133b8 'default_value' 'const V &'
|     `-ReturnStmt 0x56283d4454d0 <line:411:9, col:17>
|       `-UnaryOperator 0x56283d4454b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d4454a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d413a28 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56283d413610 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d413688 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d413988 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d413748 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4137c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56283d413868 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56283d445660 <col:53, line:425:5>
|     `-ReturnStmt 0x56283d445650 <line:424:9, col:42>
|       `-CallExpr 0x56283d445610 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d445510 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d445590 <col:21> 'const char *' lvalue ParmVar 0x56283d413748 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d4455b0 <col:30> 'int' 0
|         |-DeclRefExpr 0x56283d4455d0 <col:33> 'P' lvalue ParmVar 0x56283d4137c0 'parser' 'P'
|         `-DeclRefExpr 0x56283d4455f0 <col:41> 'T' lvalue ParmVar 0x56283d413868 'x' 'T &'
|-FunctionTemplateDecl 0x56283d413e78 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56283d413a98 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d413b18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d413dd8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d413bd8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d413c50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56283d413cf8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56283d4457d8 <col:55, line:429:5>
|     `-ReturnStmt 0x56283d4457c8 <line:428:9, col:50>
|       `-CallExpr 0x56283d445788 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d445688 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d445708 <col:21> 'const char *' lvalue ParmVar 0x56283d413bd8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d445728 <col:30> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x56283d445748 <col:41> 'P' lvalue ParmVar 0x56283d413c50 'parser' 'P'
|         `-DeclRefExpr 0x56283d445768 <col:49> 'T' lvalue ParmVar 0x56283d413cf8 'x' 'T &'
|-FunctionTemplateDecl 0x56283d4142c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56283d413ee8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d413f68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d414228 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d414028 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4140a0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56283d414148 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56283d445950 <col:55, line:433:5>
|     `-ReturnStmt 0x56283d445940 <line:432:9, col:51>
|       `-CallExpr 0x56283d445900 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d445800 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d445880 <col:21> 'const char *' lvalue ParmVar 0x56283d414028 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d4458a0 <col:30> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int'
|         |-DeclRefExpr 0x56283d4458c0 <col:42> 'P' lvalue ParmVar 0x56283d4140a0 'parser' 'P'
|         `-DeclRefExpr 0x56283d4458e0 <col:50> 'T' lvalue ParmVar 0x56283d414148 'x' 'T &'
|-FunctionTemplateDecl 0x56283d414718 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56283d414338 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d4143b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d414678 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d414478 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4144f0 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56283d414598 <col:50, col:53> col:53 referenced x 'T &'
|   `-CompoundStmt 0x56283d445b78 <col:56, line:437:5>
|     `-ReturnStmt 0x56283d445b68 <line:436:9, col:63>
|       `-CallExpr 0x56283d445b28 <col:16, col:63> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d445978 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d4459f8 <col:21> 'const char *' lvalue ParmVar 0x56283d414478 'keyword' 'const char *'
|         |-BinaryOperator 0x56283d445ac8 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56283d445a78 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56283d445a58 <col:30> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56283d445ab0 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56283d445a90 <col:42> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56283d445ae8 <col:54> 'P' lvalue ParmVar 0x56283d4144f0 'parser' 'P'
|         `-DeclRefExpr 0x56283d445b08 <col:62> 'T' lvalue ParmVar 0x56283d414598 'x' 'T &'
|-FunctionTemplateDecl 0x56283d414e68 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56283d414788 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d414808 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d414dc8 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56283d4148c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d414948 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56283d414be0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56283d414c88 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56283d4460a8 <col:64, line:442:5>
|     |-CallExpr 0x56283d445c60 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d445b90 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56283d445bd0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56283d445be0 <col:30> 'const char *' lvalue ParmVar 0x56283d4148c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56283d445c00 <col:39> 'int' lvalue ParmVar 0x56283d414948 'flags' 'int'
|     | |-DeclRefExpr 0x56283d445c20 <col:46> 'P' lvalue ParmVar 0x56283d414be0 'parser' 'P'
|     | `-DeclRefExpr 0x56283d445c40 <col:54> 'T' lvalue ParmVar 0x56283d414c88 'x' 'T &'
|     `-ReturnStmt 0x56283d446098 <line:441:9, col:17>
|       `-UnaryOperator 0x56283d446080 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d445ca8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d415468 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56283d414ee0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d414f58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56283d414fd8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56283d4153c8 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56283d4150a0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d415118 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56283d4151b8 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56283d415288 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56283d446240 <col:84, line:458:5>
|     `-ReturnStmt 0x56283d446230 <line:457:9, col:64>
|       `-CallExpr 0x56283d4461e8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4460d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d446148 <col:28> 'const char *' lvalue ParmVar 0x56283d4150a0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d446168 <col:37> 'int' 0
|         |-DeclRefExpr 0x56283d446188 <col:40> 'P' lvalue ParmVar 0x56283d415118 'parser' 'P'
|         |-DeclRefExpr 0x56283d4461a8 <col:48> 'T' lvalue ParmVar 0x56283d4151b8 'x' 'T &'
|         `-DeclRefExpr 0x56283d4461c8 <col:51> 'const V' lvalue ParmVar 0x56283d415288 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56283d4159e8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56283d4154e0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d415558 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56283d4155d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56283d415948 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56283d4156a0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d415718 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56283d4157b8 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56283d415858 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56283d4463d0 <col:86, line:462:5>
|     `-ReturnStmt 0x56283d4463c0 <line:461:9, col:73>
|       `-CallExpr 0x56283d446378 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d446268 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d4462d8 <col:28> 'const char *' lvalue ParmVar 0x56283d4156a0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d4462f8 <col:37> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int'
|         |-DeclRefExpr 0x56283d446318 <col:49> 'P' lvalue ParmVar 0x56283d415718 'parser' 'P'
|         |-DeclRefExpr 0x56283d446338 <col:57> 'T' lvalue ParmVar 0x56283d4157b8 'x' 'T &'
|         `-DeclRefExpr 0x56283d446358 <col:60> 'const V' lvalue ParmVar 0x56283d415858 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56283d416048 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56283d415a60 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d415ad8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56283d415b58 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56283d415fa8 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56283d415c20 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d415ca0 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56283d415d18 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56283d415db8 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56283d415e58 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56283d446560 <col:95, line:467:5>
|     |-CallExpr 0x56283d4464d8 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d4463e8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56283d446428 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56283d446438 <col:37> 'const char *' lvalue ParmVar 0x56283d415c20 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56283d446458 <col:46> 'int' lvalue ParmVar 0x56283d415ca0 'flags' 'int'
|     | |-DeclRefExpr 0x56283d446478 <col:53> 'P' lvalue ParmVar 0x56283d415d18 'parser' 'P'
|     | |-DeclRefExpr 0x56283d446498 <col:61> 'T' lvalue ParmVar 0x56283d415db8 'x' 'T &'
|     | `-DeclRefExpr 0x56283d4464b8 <col:64> 'const V' lvalue ParmVar 0x56283d415e58 'default_value' 'const V &'
|     `-ReturnStmt 0x56283d446550 <line:466:9, col:17>
|       `-UnaryOperator 0x56283d446538 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d446528 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d416628 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56283d4160c8 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d416148 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56283d4161c8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56283d416588 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56283d416290 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d416308 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56283d4163a8 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56283d416448 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56283d446708 <col:63, line:481:5>
|     `-ReturnStmt 0x56283d4466f8 <line:480:9, col:47>
|       `-CallExpr 0x56283d4466b0 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d446590 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d446610 <col:21> 'const char *' lvalue ParmVar 0x56283d416290 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d446630 <col:30> 'int' 0
|         |-DeclRefExpr 0x56283d446650 <col:33> 'P' lvalue ParmVar 0x56283d416308 'parser' 'P'
|         |-DeclRefExpr 0x56283d446670 <col:41> 'T1' lvalue ParmVar 0x56283d4163a8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56283d446690 <col:45> 'T2' lvalue ParmVar 0x56283d416448 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56283d416ba8 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56283d4166a0 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d416718 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56283d416798 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56283d416b08 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56283d416860 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4168d8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56283d416978 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56283d416a18 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56283d4468a8 <col:65, line:485:5>
|     `-ReturnStmt 0x56283d446898 <line:484:9, col:55>
|       `-CallExpr 0x56283d446850 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d446730 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d4467b0 <col:21> 'const char *' lvalue ParmVar 0x56283d416860 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d4467d0 <col:30> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x56283d4467f0 <col:41> 'P' lvalue ParmVar 0x56283d4168d8 'parser' 'P'
|         |-DeclRefExpr 0x56283d446810 <col:49> 'T1' lvalue ParmVar 0x56283d416978 'x1' 'T1 &'
|         `-DeclRefExpr 0x56283d446830 <col:53> 'T2' lvalue ParmVar 0x56283d416a18 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56283d417128 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56283d416c20 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d416c98 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56283d416d18 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56283d417088 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56283d416de0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d416e58 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56283d416ef8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56283d416f98 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56283d446a48 <col:65, line:489:5>
|     `-ReturnStmt 0x56283d446a38 <line:488:9, col:56>
|       `-CallExpr 0x56283d4469f0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4468d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d446950 <col:21> 'const char *' lvalue ParmVar 0x56283d416de0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d446970 <col:30> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int'
|         |-DeclRefExpr 0x56283d446990 <col:42> 'P' lvalue ParmVar 0x56283d416e58 'parser' 'P'
|         |-DeclRefExpr 0x56283d4469b0 <col:50> 'T1' lvalue ParmVar 0x56283d416ef8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56283d4469d0 <col:54> 'T2' lvalue ParmVar 0x56283d416f98 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56283d4176a8 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56283d4171a0 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d417218 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56283d417298 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56283d417608 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56283d417360 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4173d8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56283d417478 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56283d417518 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56283d446c98 <col:66, line:493:5>
|     `-ReturnStmt 0x56283d446c88 <line:492:9, col:68>
|       `-CallExpr 0x56283d446c40 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d446a70 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d446af0 <col:21> 'const char *' lvalue ParmVar 0x56283d417360 'keyword' 'const char *'
|         |-BinaryOperator 0x56283d446bc0 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56283d446b70 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56283d446b50 <col:30> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56283d446ba8 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56283d446b88 <col:42> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56283d446be0 <col:54> 'P' lvalue ParmVar 0x56283d4173d8 'parser' 'P'
|         |-DeclRefExpr 0x56283d446c00 <col:62> 'T1' lvalue ParmVar 0x56283d417478 'x1' 'T1 &'
|         `-DeclRefExpr 0x56283d446c20 <col:66> 'T2' lvalue ParmVar 0x56283d417518 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56283d417d08 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56283d417720 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d417798 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56283d417818 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56283d417c68 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56283d4178e0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d417960 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56283d4179d8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56283d417a78 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56283d417b18 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56283d446e28 <col:74, line:498:5>
|     |-CallExpr 0x56283d446da0 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d446cb0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56283d446cf0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56283d446d00 <col:30> 'const char *' lvalue ParmVar 0x56283d4178e0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56283d446d20 <col:39> 'int' lvalue ParmVar 0x56283d417960 'flags' 'int'
|     | |-DeclRefExpr 0x56283d446d40 <col:46> 'P' lvalue ParmVar 0x56283d4179d8 'parser' 'P'
|     | |-DeclRefExpr 0x56283d446d60 <col:54> 'T1' lvalue ParmVar 0x56283d417a78 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56283d446d80 <col:58> 'T2' lvalue ParmVar 0x56283d417b18 'x2' 'T2 &'
|     `-ReturnStmt 0x56283d446e18 <line:497:9, col:17>
|       `-UnaryOperator 0x56283d446e00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d446df0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d418068 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56283d417d88 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d417fc8 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56283d417e40 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d417eb8 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56283d446f70 <col:52, line:509:5>
|     `-ReturnStmt 0x56283d446f60 <line:508:9, col:44>
|       `-CallExpr 0x56283d446f28 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d446e58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d446ec8 <col:26> 'const char *' lvalue ParmVar 0x56283d417e40 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d446ee8 <col:35> 'int' 0
|         `-DeclRefExpr 0x56283d446f08 <col:38> 'P' lvalue ParmVar 0x56283d417eb8 'parser' 'P'
|-FunctionTemplateDecl 0x56283d418368 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56283d4180d0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d4182c8 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56283d418180 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4181f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56283d4470b0 <col:54, line:513:5>
|     `-ReturnStmt 0x56283d4470a0 <line:512:9, col:52>
|       `-CallExpr 0x56283d447068 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d446f98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447008 <col:26> 'const char *' lvalue ParmVar 0x56283d418180 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d447028 <col:35> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x56283d447048 <col:46> 'P' lvalue ParmVar 0x56283d4181f8 'parser' 'P'
|-FunctionTemplateDecl 0x56283d418668 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56283d4183d0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d4185c8 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56283d418480 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4184f8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56283d4471f0 <col:54, line:517:5>
|     `-ReturnStmt 0x56283d4471e0 <line:516:9, col:53>
|       `-CallExpr 0x56283d4471a8 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4470d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447148 <col:26> 'const char *' lvalue ParmVar 0x56283d418480 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d447168 <col:35> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int'
|         `-DeclRefExpr 0x56283d447188 <col:47> 'P' lvalue ParmVar 0x56283d4184f8 'parser' 'P'
|-FunctionTemplateDecl 0x56283d418968 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56283d4186d0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d4188c8 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56283d418780 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4187f8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56283d4473e0 <col:55, line:521:5>
|     `-ReturnStmt 0x56283d4473d0 <line:520:9, col:65>
|       `-CallExpr 0x56283d447398 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d447218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447288 <col:26> 'const char *' lvalue ParmVar 0x56283d418780 'keyword' 'const char *'
|         |-BinaryOperator 0x56283d447358 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56283d447308 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56283d4472e8 <col:35> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56283d447340 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56283d447320 <col:47> 'const int' lvalue Var 0x56283d4113c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56283d447378 <col:59> 'P' lvalue ParmVar 0x56283d4187f8 'parser' 'P'
|-FunctionTemplateDecl 0x56283d41aed8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56283d4189d0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d41ae38 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56283d418a80 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d418b00 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56283d418b78 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56283d447520 <col:63, line:526:5>
|     |-CallExpr 0x56283d4474a8 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d4473f8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56283d447438 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56283d447448 <col:35> 'const char *' lvalue ParmVar 0x56283d418a80 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56283d447468 <col:44> 'int' lvalue ParmVar 0x56283d418b00 'flags' 'int'
|     | `-DeclRefExpr 0x56283d447488 <col:51> 'P' lvalue ParmVar 0x56283d418b78 'parser' 'P'
|     `-ReturnStmt 0x56283d447510 <line:525:9, col:17>
|       `-UnaryOperator 0x56283d4474f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d4474e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d41b328 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56283d41af48 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41afc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41b288 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d41b088 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41b100 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41b1a8 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56283d447678 <col:58, line:541:5>
|     `-ReturnStmt 0x56283d447668 <line:540:9, col:39>
|       `-CallExpr 0x56283d447630 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d447550 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d4475d0 <col:21> 'const char *' lvalue ParmVar 0x56283d41b088 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d4475f0 <col:30> 'P' lvalue ParmVar 0x56283d41b100 'parser' 'P'
|         `-DeclRefExpr 0x56283d447610 <col:38> 'T' lvalue ParmVar 0x56283d41b1a8 'x' 'T &'
|-FunctionTemplateDecl 0x56283d41b778 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56283d41b398 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41b418 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41b6d8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d41b4d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41b550 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41b5f8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56283d4477b0 <col:60, line:545:5>
|     `-ReturnStmt 0x56283d4477a0 <line:544:9, col:41>
|       `-CallExpr 0x56283d447768 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4476a0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447708 <col:23> 'const char *' lvalue ParmVar 0x56283d41b4d8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d447728 <col:32> 'P' lvalue ParmVar 0x56283d41b550 'parser' 'P'
|         `-DeclRefExpr 0x56283d447748 <col:40> 'T' lvalue ParmVar 0x56283d41b5f8 'x' 'T &'
|-FunctionTemplateDecl 0x56283d41bbc8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56283d41b7e8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41b868 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41bb28 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d41b928 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41b9a0 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41ba48 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56283d4478e8 <col:60, line:549:5>
|     `-ReturnStmt 0x56283d4478d8 <line:548:9, col:41>
|       `-CallExpr 0x56283d4478a0 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4477d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447840 <col:23> 'const char *' lvalue ParmVar 0x56283d41b928 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d447860 <col:32> 'P' lvalue ParmVar 0x56283d41b9a0 'parser' 'P'
|         `-DeclRefExpr 0x56283d447880 <col:40> 'T' lvalue ParmVar 0x56283d41ba48 'x' 'T &'
|-FunctionTemplateDecl 0x56283d41c018 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56283d41bc38 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41bcb8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41bf78 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d41bd78 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41bdf0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41be98 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56283d447a20 <col:61, line:553:5>
|     `-ReturnStmt 0x56283d447a10 <line:552:9, col:42>
|       `-CallExpr 0x56283d4479d8 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d447910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447978 <col:24> 'const char *' lvalue ParmVar 0x56283d41bd78 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d447998 <col:33> 'P' lvalue ParmVar 0x56283d41bdf0 'parser' 'P'
|         `-DeclRefExpr 0x56283d4479b8 <col:41> 'T' lvalue ParmVar 0x56283d41be98 'x' 'T &'
|-FunctionTemplateDecl 0x56283d41c4f8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56283d41c088 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41c108 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41c458 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56283d41c1c8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41c248 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56283d41c2c0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41c368 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56283d447b98 <col:69, line:557:5>
|     `-ReturnStmt 0x56283d447b88 <line:556:9, col:46>
|       `-CallExpr 0x56283d447b48 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d447a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447ac8 <col:21> 'const char *' lvalue ParmVar 0x56283d41c1c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d447ae8 <col:30> 'int' lvalue ParmVar 0x56283d41c248 'flags' 'int'
|         |-DeclRefExpr 0x56283d447b08 <col:37> 'P' lvalue ParmVar 0x56283d41c2c0 'parser' 'P'
|         `-DeclRefExpr 0x56283d447b28 <col:45> 'T' lvalue ParmVar 0x56283d41c368 'x' 'T &'
|-FunctionTemplateDecl 0x56283d41c808 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56283d41c570 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d41c768 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56283d41c620 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41c698 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56283d447cd8 <col:56, line:571:5>
|     `-ReturnStmt 0x56283d447cc8 <line:570:9, col:48>
|       `-CallExpr 0x56283d447c90 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d447bc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447c30 <col:30> 'const char *' lvalue ParmVar 0x56283d41c620 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d447c50 <col:39> 'int' 0
|         `-DeclRefExpr 0x56283d447c70 <col:42> 'P' lvalue ParmVar 0x56283d41c698 'parser' 'P'
|-FunctionTemplateDecl 0x56283d41cb98 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56283d41c870 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d41caf8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56283d41c920 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41c9a0 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56283d41ca18 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56283d447ea8 <col:67, line:576:5>
|     |-CallExpr 0x56283d447e30 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d447cf0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56283d447d30 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56283d447d40 <col:39> 'const char *' lvalue ParmVar 0x56283d41c920 'keyword' 'const char *'
|     | |-BinaryOperator 0x56283d447df0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56283d447da0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56283d447d60 <col:48> 'int' lvalue ParmVar 0x56283d41c9a0 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56283d447dd8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56283d447db8 <col:56> 'const int' lvalue Var 0x56283d4115b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56283d447e10 <col:68> 'P' lvalue ParmVar 0x56283d41ca18 'parser' 'P'
|     `-ReturnStmt 0x56283d447e98 <line:575:9, col:17>
|       `-UnaryOperator 0x56283d447e80 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d447e70 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d41cfe8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56283d41cc08 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41cc88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41cf48 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56283d41cd48 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41cdc0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41ce68 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56283d448018 <col:62, line:592:5>
|     `-ReturnStmt 0x56283d448008 <line:591:9, col:51>
|       `-CallExpr 0x56283d447fc8 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d447ed8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d447f48 <col:30> 'const char *' lvalue ParmVar 0x56283d41cd48 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d447f68 <col:39> 'int' 0
|         |-DeclRefExpr 0x56283d447f88 <col:42> 'P' lvalue ParmVar 0x56283d41cdc0 'parser' 'P'
|         `-DeclRefExpr 0x56283d447fa8 <col:50> 'T' lvalue ParmVar 0x56283d41ce68 'x' 'T &'
|-FunctionTemplateDecl 0x56283d41d4c8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56283d41d058 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41d0d8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41d428 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56283d41d198 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41d218 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56283d41d290 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41d338 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56283d448210 <col:73, line:597:5>
|     |-CallExpr 0x56283d448190 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d448030 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56283d448070 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56283d448080 <col:39> 'const char *' lvalue ParmVar 0x56283d41d198 'keyword' 'const char *'
|     | |-BinaryOperator 0x56283d448130 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56283d4480e0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56283d4480a0 <col:48> 'int' lvalue ParmVar 0x56283d41d218 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56283d448118 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56283d4480f8 <col:56> 'const int' lvalue Var 0x56283d4115b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56283d448150 <col:68> 'P' lvalue ParmVar 0x56283d41d290 'parser' 'P'
|     | `-DeclRefExpr 0x56283d448170 <col:76> 'T' lvalue ParmVar 0x56283d41d338 'x' 'T &'
|     `-ReturnStmt 0x56283d448200 <line:596:9, col:17>
|       `-UnaryOperator 0x56283d4481e8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d4481d8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d41da78 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56283d41d540 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41d5b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41d9d8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56283d41d678 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41d6f0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41d8b0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56283d448380 <col:65, line:614:5>
|     `-ReturnStmt 0x56283d448370 <line:613:9, col:46>
|       `-CallExpr 0x56283d448330 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d448240 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d4482b0 <col:25> 'const char *' lvalue ParmVar 0x56283d41d678 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d4482d0 <col:34> 'int' 0
|         |-DeclRefExpr 0x56283d4482f0 <col:37> 'P' lvalue ParmVar 0x56283d41d6f0 'parser' 'P'
|         `-DeclRefExpr 0x56283d448310 <col:45> 'Vector<T>' lvalue ParmVar 0x56283d41d8b0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56283d41dea8 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56283d41dae8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d41de08 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56283d41dba0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41dcf0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56283d4485a0 <col:55, line:618:5>
|     `-ReturnStmt 0x56283d448590 <line:617:9, col:55>
|       `-CallExpr 0x56283d448550 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4483a8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d448418 <col:25> 'const char *' lvalue ParmVar 0x56283d41dba0 'keyword' 'const char *'
|         |-IntegerLiteral 0x56283d448438 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56283d448510 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56283d448530 <col:54> 'Vector<T>' lvalue ParmVar 0x56283d41dcf0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56283d41e478 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56283d41df10 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41df88 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41e3d8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56283d41e048 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41e0c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56283d41e140 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56283d41e290 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56283d448798 <col:76, line:623:5>
|     |-CallExpr 0x56283d448718 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56283d4485b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56283d4485f8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56283d448608 <col:34> 'const char *' lvalue ParmVar 0x56283d41e048 'keyword' 'const char *'
|     | |-BinaryOperator 0x56283d4486b8 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56283d448668 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56283d448628 <col:43> 'int' lvalue ParmVar 0x56283d41e0c8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56283d4486a0 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56283d448680 <col:51> 'const int' lvalue Var 0x56283d4115b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56283d4486d8 <col:63> 'P' lvalue ParmVar 0x56283d41e140 'parser' 'P'
|     | `-DeclRefExpr 0x56283d4486f8 <col:71> 'Vector<T>' lvalue ParmVar 0x56283d41e290 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56283d448788 <line:622:9, col:17>
|       `-UnaryOperator 0x56283d448770 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d448760 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d41e9b8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56283d41e4f0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d41e568 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d41e918 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56283d41e628 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d41e6a8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56283d41e7f0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56283d448a00 <col:66, line:627:5>
|     `-ReturnStmt 0x56283d4489f0 <line:626:9, col:59>
|       `-CallExpr 0x56283d4489b0 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56283d4487c8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56283d448838 <col:25> 'const char *' lvalue ParmVar 0x56283d41e628 'keyword' 'const char *'
|         |-DeclRefExpr 0x56283d448858 <col:34> 'int' lvalue ParmVar 0x56283d41e6a8 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56283d448970 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56283d448990 <col:58> 'Vector<T>' lvalue ParmVar 0x56283d41e7f0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56283d41ea48 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56283d448a80 <col:25, line:633:5>
|   `-ReturnStmt 0x56283d448a70 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56283d448a58 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56283d448a28 <col:16> 'const bool' lvalue ->_status 0x56283d42ffe8
|         `-CXXThisExpr 0x56283d448a18 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56283d41ebf8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56283d41eb30 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56283d448b68 <col:27, line:639:5>
|   |-BinaryOperator 0x56283d448b10 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56283d448a98 <col:9> 'bool' lvalue ParmVar 0x56283d41eb30 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56283d448af8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56283d448ac8 <col:13> 'bool' lvalue ->_status 0x56283d42ffe8
|   |     `-CXXThisExpr 0x56283d448ab8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56283d448b58 <line:638:9, col:17>
|     `-UnaryOperator 0x56283d448b40 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d448b30 <col:17> 'Args *' this
|-CXXMethodDecl 0x56283d422ae0 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56283d41ecb8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56283d448c58 <col:39, line:644:5>
|   |-BinaryOperator 0x56283d448c00 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56283d448b88 <col:9> 'bool' lvalue ParmVar 0x56283d41ecb8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56283d448be8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56283d448bb8 <col:13> 'const bool' lvalue ->_status 0x56283d42ffe8
|   |     `-CXXThisExpr 0x56283d448ba8 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56283d448c48 <line:643:9, col:17>
|     `-UnaryOperator 0x56283d448c30 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d448c20 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56283d422ba8 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56283d448d00 <col:30, line:651:5>
|   `-ReturnStmt 0x56283d448cf0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56283d448cd8 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56283d448ca8 <col:16> 'bool' lvalue ->_read_status 0x56283d409db0
|         `-ImplicitCastExpr 0x56283d448c88 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56283d448c78 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56283d422cf0 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56283d422c60 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56283d448e08 <col:32, line:658:5>
|   |-BinaryOperator 0x56283d448db0 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56283d448d18 <col:9> 'bool' lvalue ParmVar 0x56283d422c60 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56283d448d98 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56283d448d68 <col:13> 'bool' lvalue ->_read_status 0x56283d409db0
|   |     `-ImplicitCastExpr 0x56283d448d48 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56283d448d38 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56283d448df8 <line:657:9, col:17>
|     `-UnaryOperator 0x56283d448de0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d448dd0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56283d422e40 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56283d422db0 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56283d448f18 <col:44, line:663:5>
|   |-BinaryOperator 0x56283d448ec0 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56283d448e28 <col:9> 'bool' lvalue ParmVar 0x56283d422db0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56283d448ea8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56283d448e78 <col:13> 'bool' lvalue ->_read_status 0x56283d409db0
|   |     `-ImplicitCastExpr 0x56283d448e58 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56283d448e48 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56283d448f08 <line:662:9, col:17>
|     `-UnaryOperator 0x56283d448ef0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56283d448ee0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56283d422f08 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56283d422fd0 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56283d423098 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56283d423160 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56283d423468 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56283d423200 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d4233c8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56283d4232d8 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56283d449270 <col:19, line:706:5>
|     `-IfStmt 0x56283d449248 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56283d449018 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56283d449178 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56283d449148 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56283d449108 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56283d449070 <col:42> '<bound member function type>' ->simple_slot 0x56283d443960
|       |     | `-CXXThisExpr 0x56283d449060 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x56283d4490c0 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x56283d4490a0 <col:55> 'T' lvalue ParmVar 0x56283d4232d8 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56283d4490e8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56283d449238 <line:705:13, col:34>
|         `-CallExpr 0x56283d449210 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56283d449198 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56283d4491f0 <col:33> 'T' lvalue ParmVar 0x56283d4232d8 'x' 'T &'
|-FunctionTemplateDecl 0x56283d423738 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56283d4234c8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d423698 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56283d4235a8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56283d449650 <col:31, line:717:5>
|     |-DeclStmt 0x56283d4493b0 <line:713:9, col:23>
|     | `-VarDecl 0x56283d449298 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56283d449388 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56283d449310 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56283d449368 <col:21> 'T' lvalue ParmVar 0x56283d4235a8 'x' 'T &'
|     |-IfStmt 0x56283d449600 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56283d4494a8 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56283d4495e0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56283d449580 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56283d449510 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|     |   | `-DeclRefExpr 0x56283d4494f0 <col:14> 'T *' lvalue Var 0x56283d449298 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56283d4495c0 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56283d449638 <line:716:9, col:16>
|       `-DeclRefExpr 0x56283d449618 <col:16> 'T *' lvalue Var 0x56283d449298 's' 'T *'
|-FunctionTemplateDecl 0x56283d423b48 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56283d423798 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56283d423818 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56283d423aa8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56283d4238f8 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56283d423998 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56283d449960 <col:37, line:726:5>
|     |-IfStmt 0x56283d4498f0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56283d449910 <line:723:13, col:26>
|     | | `-VarDecl 0x56283d4496b8 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56283d4497a8 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56283d449730 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56283d449788 <col:25> 'T' lvalue ParmVar 0x56283d4238f8 'x' 'T &'
|     | |-DeclRefExpr 0x56283d4497d0 <col:16> 'T *' lvalue Var 0x56283d4496b8 's' 'T *'
|     | `-BinaryOperator 0x56283d4498d0 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56283d449880 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56283d449810 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|     |   | `-DeclRefExpr 0x56283d4497f0 <col:14> 'T *' lvalue Var 0x56283d4496b8 's' 'T *'
|     |   `-DeclRefExpr 0x56283d4498b0 <col:18> 'const V' lvalue ParmVar 0x56283d423998 'value' 'const V &'
|     `-ReturnStmt 0x56283d449950 <line:725:9, col:17>
|       `-UnaryOperator 0x56283d449938 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56283d449928 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56283d423f48 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56283d423bb0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56283d423ea8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56283d423c60 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d423ce0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56283d423d88 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56283d44a780 <col:65, line:737:5>
|     |-DeclStmt 0x56283d4499f8 <line:732:9, col:26>
|     | `-VarDecl 0x56283d449990 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56283d44a748 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56283d44a768 <line:733:13, col:58>
|       | `-VarDecl 0x56283d449a20 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56283d449c00 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56283d449bd0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56283d449bb8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56283d449b98 <col:26, col:58> 'String' (CXXTemporary 0x56283d449b98)
|       |           `-CXXMemberCallExpr 0x56283d449b28 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56283d449a98 <col:26> '<bound member function type>' ->find 0x56283d442f78
|       |             | `-CXXThisExpr 0x56283d449a88 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56283d449b60 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d449ac8 <col:31> 'const char *' lvalue ParmVar 0x56283d423c60 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56283d449b78 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d449ae8 <col:40> 'int' lvalue ParmVar 0x56283d423ce0 'flags' 'int'
|       |             `-DeclRefExpr 0x56283d449b08 <col:47> 'Args::Slot *' lvalue Var 0x56283d449990 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56283d449cb8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56283d449ca0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56283d449c80 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56283d449c50 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |       `-ImplicitCastExpr 0x56283d449c38 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56283d449c18 <col:20> 'String' lvalue Var 0x56283d449a20 'str' 'String'
|       `-CompoundStmt 0x56283d44a728 <col:61, line:736:9>
|         |-DeclStmt 0x56283d44a170 <line:734:13, col:76>
|         | `-VarDecl 0x56283d449d08 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56283d44a140 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56283d44a0b0 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56283d44a0f8 <col:60> 'T' lvalue ParmVar 0x56283d423d88 'variable' 'T &'
|         |     `-UnaryOperator 0x56283d44a128 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56283d44a118 <col:71> 'Args *' this
|         `-CallExpr 0x56283d44a6f8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56283d44a198 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|           | `-CXXThisExpr 0x56283d44a188 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56283d44a6b8 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56283d44a1c8 <col:23> 'T *' lvalue Var 0x56283d449d08 's' 'T *'
|           | `-CallExpr 0x56283d44a678 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56283d44a450 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56283d44a550 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56283d44a570 <col:86> 'String' lvalue Var 0x56283d449a20 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56283d44a620 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56283d44a5b0 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|           |   | `-DeclRefExpr 0x56283d44a590 <col:92> 'T *' lvalue Var 0x56283d449d08 's' 'T *'
|           |   `-UnaryOperator 0x56283d44a660 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56283d44a650 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56283d44a6d8 <col:103> 'Args::Slot *' lvalue Var 0x56283d449990 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56283d424498 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56283d423fb8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56283d424038 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56283d4243f8 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56283d4240f8 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d424178 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56283d424218 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56283d4242b8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56283d44b620 <col:88, line:745:5>
|     |-DeclStmt 0x56283d44a818 <line:741:9, col:26>
|     | `-VarDecl 0x56283d44a7b0 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56283d44aa38 <line:742:9, col:55>
|     | `-VarDecl 0x56283d44a840 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56283d44aa20 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56283d44a9f0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56283d44a9d8 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56283d44a9b8 <col:22, col:54> 'String' (CXXTemporary 0x56283d44a9b8)
|     |           `-CXXMemberCallExpr 0x56283d44a948 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56283d44a8b8 <col:22> '<bound member function type>' ->find 0x56283d442f78
|     |             | `-CXXThisExpr 0x56283d44a8a8 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56283d44a980 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56283d44a8e8 <col:27> 'const char *' lvalue ParmVar 0x56283d4240f8 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56283d44a998 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56283d44a908 <col:36> 'int' lvalue ParmVar 0x56283d424178 'flags' 'int'
|     |             `-DeclRefExpr 0x56283d44a928 <col:43> 'Args::Slot *' lvalue Var 0x56283d44a7b0 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56283d44ae10 <line:743:9, col:72>
|     | `-VarDecl 0x56283d44aa88 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56283d44ade0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56283d44ad50 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56283d44ad98 <col:56> 'T' lvalue ParmVar 0x56283d424218 'variable' 'T &'
|     |     `-UnaryOperator 0x56283d44adc8 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56283d44adb8 <col:67> 'Args *' this
|     `-CallExpr 0x56283d44b5f0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56283d44ae38 <col:9> '<bound member function type>' ->postparse 0x56283d443188
|       | `-CXXThisExpr 0x56283d44ae28 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56283d44b5b0 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56283d44ae68 <col:19> 'T *' lvalue Var 0x56283d44aa88 's' 'T *'
|       | `-ParenExpr 0x56283d44b590 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56283d44b560 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56283d44b548 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56283d44b530 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56283d44b510 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56283d44b4e0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |     |       `-ImplicitCastExpr 0x56283d44b4c8 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56283d44ae88 <col:25> 'String' lvalue Var 0x56283d44a840 'str' 'String'
|       |     |-CallExpr 0x56283d44b338 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56283d44b110 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56283d44b210 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56283d44b230 <col:89> 'String' lvalue Var 0x56283d44a840 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56283d44b2e0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56283d44b270 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|       |     | | `-DeclRefExpr 0x56283d44b250 <col:95> 'T *' lvalue Var 0x56283d44aa88 's' 'T *'
|       |     | `-UnaryOperator 0x56283d44b320 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56283d44b310 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56283d44b4a8 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56283d44b488 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56283d44b458 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56283d44b408 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56283d44b398 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|       |         | | `-DeclRefExpr 0x56283d44b378 <col:109> 'T *' lvalue Var 0x56283d44aa88 's' 'T *'
|       |         | `-DeclRefExpr 0x56283d44b438 <col:113> 'const V' lvalue ParmVar 0x56283d4242b8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56283d44b478 <col:120> 'bool' true
|       `-DeclRefExpr 0x56283d44b5d0 <col:128> 'Args::Slot *' lvalue Var 0x56283d44a7b0 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56283d4249c8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56283d424510 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d424588 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d424928 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56283d424648 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4246c8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56283d424740 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56283d4247e8 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56283d44c218 <col:75, line:754:5>
|     |-DeclStmt 0x56283d44b6c8 <line:749:9, col:26>
|     | `-VarDecl 0x56283d44b660 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56283d44c1e0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56283d44c200 <line:750:13, col:58>
|       | `-VarDecl 0x56283d44b6f0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56283d44b8d0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56283d44b8a0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56283d44b888 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56283d44b868 <col:26, col:58> 'String' (CXXTemporary 0x56283d44b868)
|       |           `-CXXMemberCallExpr 0x56283d44b7f8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56283d44b768 <col:26> '<bound member function type>' ->find 0x56283d442f78
|       |             | `-CXXThisExpr 0x56283d44b758 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56283d44b830 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d44b798 <col:31> 'const char *' lvalue ParmVar 0x56283d424648 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56283d44b848 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d44b7b8 <col:40> 'int' lvalue ParmVar 0x56283d4246c8 'flags' 'int'
|       |             `-DeclRefExpr 0x56283d44b7d8 <col:47> 'Args::Slot *' lvalue Var 0x56283d44b660 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56283d44b988 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56283d44b970 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56283d44b950 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56283d44b920 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |       `-ImplicitCastExpr 0x56283d44b908 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56283d44b8e8 <col:20> 'String' lvalue Var 0x56283d44b6f0 'str' 'String'
|       `-CompoundStmt 0x56283d44c1c0 <col:61, line:753:9>
|         |-DeclStmt 0x56283d44bd60 <line:751:13, col:63>
|         | `-VarDecl 0x56283d44b9d8 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56283d44bd30 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56283d44bca0 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56283d44bce8 <col:47> 'T' lvalue ParmVar 0x56283d4247e8 'variable' 'T &'
|         |     `-UnaryOperator 0x56283d44bd18 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56283d44bd08 <col:58> 'Args *' this
|         `-CallExpr 0x56283d44c190 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56283d44bd88 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|           | `-CXXThisExpr 0x56283d44bd78 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56283d44c150 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56283d44bdb8 <col:23> 'T *' lvalue Var 0x56283d44b9d8 's' 'T *'
|           | `-CallExpr 0x56283d44c110 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56283d44bfa0 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56283d44bfe8 <col:56> 'P' lvalue ParmVar 0x56283d424740 'parser' 'P'
|           |   |-DeclRefExpr 0x56283d44c008 <col:64> 'String' lvalue Var 0x56283d44b6f0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56283d44c0b8 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56283d44c048 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|           |   | `-DeclRefExpr 0x56283d44c028 <col:70> 'T *' lvalue Var 0x56283d44b9d8 's' 'T *'
|           |   `-UnaryOperator 0x56283d44c0f8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56283d44c0e8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56283d44c170 <col:81> 'Args::Slot *' lvalue Var 0x56283d44b660 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56283d425028 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56283d424a40 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56283d424ab8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56283d424b38 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56283d424f88 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56283d424c00 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d424c80 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56283d424cf8 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56283d424d98 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56283d424e38 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56283d44cfa8 <col:98, line:762:5>
|     |-DeclStmt 0x56283d44c2b0 <line:758:9, col:26>
|     | `-VarDecl 0x56283d44c248 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56283d44c4d0 <line:759:9, col:55>
|     | `-VarDecl 0x56283d44c2d8 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56283d44c4b8 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56283d44c488 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56283d44c470 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56283d44c450 <col:22, col:54> 'String' (CXXTemporary 0x56283d44c450)
|     |           `-CXXMemberCallExpr 0x56283d44c3e0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56283d44c350 <col:22> '<bound member function type>' ->find 0x56283d442f78
|     |             | `-CXXThisExpr 0x56283d44c340 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56283d44c418 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56283d44c380 <col:27> 'const char *' lvalue ParmVar 0x56283d424c00 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56283d44c430 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56283d44c3a0 <col:36> 'int' lvalue ParmVar 0x56283d424c80 'flags' 'int'
|     |             `-DeclRefExpr 0x56283d44c3c0 <col:43> 'Args::Slot *' lvalue Var 0x56283d44c248 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56283d44c8f0 <line:760:9, col:59>
|     | `-VarDecl 0x56283d44c528 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56283d44c8c0 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56283d44c830 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56283d44c878 <col:43> 'T' lvalue ParmVar 0x56283d424d98 'variable' 'T &'
|     |     `-UnaryOperator 0x56283d44c8a8 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56283d44c898 <col:54> 'Args *' this
|     `-CallExpr 0x56283d44cf78 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56283d44c918 <col:9> '<bound member function type>' ->postparse 0x56283d443188
|       | `-CXXThisExpr 0x56283d44c908 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56283d44cf38 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56283d44c948 <col:19> 'T *' lvalue Var 0x56283d44c528 's' 'T *'
|       | `-ParenExpr 0x56283d44cf18 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56283d44cee8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56283d44ced0 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56283d44ceb8 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56283d44ce98 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56283d44ce68 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |     |       `-ImplicitCastExpr 0x56283d44ce50 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56283d44c968 <col:25> 'String' lvalue Var 0x56283d44c2d8 'str' 'String'
|       |     |-CallExpr 0x56283d44ccc0 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56283d44cb50 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56283d44cb98 <col:59> 'P' lvalue ParmVar 0x56283d424cf8 'parser' 'P'
|       |     | |-DeclRefExpr 0x56283d44cbb8 <col:67> 'String' lvalue Var 0x56283d44c2d8 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56283d44cc68 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56283d44cbf8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|       |     | | `-DeclRefExpr 0x56283d44cbd8 <col:73> 'T *' lvalue Var 0x56283d44c528 's' 'T *'
|       |     | `-UnaryOperator 0x56283d44cca8 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56283d44cc98 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56283d44ce30 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56283d44ce10 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56283d44cde0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56283d44cd90 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56283d44cd20 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|       |         | | `-DeclRefExpr 0x56283d44cd00 <col:87> 'T *' lvalue Var 0x56283d44c528 's' 'T *'
|       |         | `-DeclRefExpr 0x56283d44cdc0 <col:91> 'const V' lvalue ParmVar 0x56283d424e38 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56283d44ce00 <col:98> 'bool' true
|       `-DeclRefExpr 0x56283d44cf58 <col:106> 'Args::Slot *' lvalue Var 0x56283d44c248 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56283d425698 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56283d4250a8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d425128 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56283d4251a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56283d4255f8 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56283d425270 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d4252f0 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56283d425368 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56283d425408 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56283d4254a8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56283d44df88 <col:60, line:773:5>
|     |-DeclStmt 0x56283d44d050 <line:767:9, col:26>
|     | `-VarDecl 0x56283d44cfe8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56283d44df50 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56283d44df70 <line:768:13, col:58>
|       | `-VarDecl 0x56283d44d078 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56283d44d258 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56283d44d228 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56283d44d210 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56283d44d1f0 <col:26, col:58> 'String' (CXXTemporary 0x56283d44d1f0)
|       |           `-CXXMemberCallExpr 0x56283d44d180 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56283d44d0f0 <col:26> '<bound member function type>' ->find 0x56283d442f78
|       |             | `-CXXThisExpr 0x56283d44d0e0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56283d44d1b8 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d44d120 <col:31> 'const char *' lvalue ParmVar 0x56283d425270 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56283d44d1d0 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d44d140 <col:40> 'int' lvalue ParmVar 0x56283d4252f0 'flags' 'int'
|       |             `-DeclRefExpr 0x56283d44d160 <col:47> 'Args::Slot *' lvalue Var 0x56283d44cfe8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56283d44d310 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56283d44d2f8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56283d44d2d8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56283d44d2a8 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |       `-ImplicitCastExpr 0x56283d44d290 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56283d44d270 <col:20> 'String' lvalue Var 0x56283d44d078 'str' 'String'
|       `-CompoundStmt 0x56283d44df28 <col:61, line:772:9>
|         |-DeclStmt 0x56283d44d650 <line:769:13, col:66>
|         | `-VarDecl 0x56283d44d368 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56283d44d620 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56283d44d590 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56283d44d5d8 <col:49> 'T1' lvalue ParmVar 0x56283d425408 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56283d44d608 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56283d44d5f8 <col:61> 'Args *' this
|         |-DeclStmt 0x56283d44d9c0 <line:770:13, col:66>
|         | `-VarDecl 0x56283d44d6d8 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56283d44d990 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56283d44d900 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56283d44d948 <col:49> 'T2' lvalue ParmVar 0x56283d4254a8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56283d44d978 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56283d44d968 <col:61> 'Args *' this
|         `-CallExpr 0x56283d44def8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56283d44d9e8 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|           | `-CXXThisExpr 0x56283d44d9d8 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56283d44deb8 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56283d44da58 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56283d44da18 <col:23> 'T1 *' lvalue Var 0x56283d44d368 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56283d44da38 <col:29> 'T2 *' lvalue Var 0x56283d44d6d8 's2' 'T2 *'
|           | `-CallExpr 0x56283d44de70 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56283d44dc40 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56283d44dc88 <col:63> 'P' lvalue ParmVar 0x56283d425368 'parser' 'P'
|           |   |-DeclRefExpr 0x56283d44dca8 <col:71> 'String' lvalue Var 0x56283d44d078 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56283d44dd58 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56283d44dce8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|           |   | `-DeclRefExpr 0x56283d44dcc8 <col:77> 'T1 *' lvalue Var 0x56283d44d368 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56283d44de18 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56283d44dda8 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|           |   | `-DeclRefExpr 0x56283d44dd88 <col:82> 'T2 *' lvalue Var 0x56283d44d6d8 's2' 'T2 *'
|           |   `-UnaryOperator 0x56283d44de58 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56283d44de48 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56283d44ded8 <col:94> 'Args::Slot *' lvalue Var 0x56283d44cfe8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56283d425a88 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56283d425718 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d4259e8 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56283d4257d0 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d425850 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56283d4258c8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56283d44ff98 <col:67, line:780:5>
|     |-DeclStmt 0x56283d44e020 <line:777:9, col:26>
|     | `-VarDecl 0x56283d44dfb8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56283d44ff60 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56283d44ff80 <line:778:13, col:58>
|       | `-VarDecl 0x56283d44fb40 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56283d44fd20 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56283d44fcf0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56283d44fcd8 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56283d44fcb8 <col:26, col:58> 'String' (CXXTemporary 0x56283d44fcb8)
|       |           `-CXXMemberCallExpr 0x56283d44fc48 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56283d44fbb8 <col:26> '<bound member function type>' ->find 0x56283d442f78
|       |             | `-CXXThisExpr 0x56283d44fba8 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56283d44fc80 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d44fbe8 <col:31> 'const char *' lvalue ParmVar 0x56283d4257d0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56283d44fc98 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56283d44fc08 <col:40> 'int' lvalue ParmVar 0x56283d425850 'flags' 'int'
|       |             `-DeclRefExpr 0x56283d44fc28 <col:47> 'Args::Slot *' lvalue Var 0x56283d44dfb8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56283d44fdd8 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56283d44fdc0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56283d44fda0 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56283d44fd70 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|       |       `-ImplicitCastExpr 0x56283d44fd58 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56283d44fd38 <col:20> 'String' lvalue Var 0x56283d44fb40 'str' 'String'
|       `-CallExpr 0x56283d44ff30 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56283d44fe00 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|         | `-CXXThisExpr 0x56283d44fdf0 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56283d44fee0 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56283d44fe50 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56283d44fe30 <col:23> 'P' lvalue ParmVar 0x56283d4258c8 'parser' 'P'
|         | |-DeclRefExpr 0x56283d44fe98 <col:36> 'String' lvalue Var 0x56283d44fb40 'str' 'String'
|         | `-UnaryOperator 0x56283d44fec8 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56283d44feb8 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56283d44ff10 <col:49> 'Args::Slot *' lvalue Var 0x56283d44dfb8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56283d425e28 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56283d425af8 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56283d425d88 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56283d425bb0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d425c30 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56283d425ca8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56283d450908 <col:71, line:792:5>
|     |-DeclStmt 0x56283d450030 <line:784:9, col:26>
|     | `-VarDecl 0x56283d44ffc8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56283d450100 <line:785:9, col:29>
|     | `-VarDecl 0x56283d450060 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56283d4500e8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56283d4500c8 <col:28> 'int' 1
|     |-WhileStmt 0x56283d4507b8 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56283d4507d8 <line:786:16, col:61>
|     | | `-VarDecl 0x56283d450128 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56283d450308 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56283d4502d8 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56283d4502c0 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56283d4502a0 <col:29, col:61> 'String' (CXXTemporary 0x56283d4502a0)
|     | |           `-CXXMemberCallExpr 0x56283d450230 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56283d4501a0 <col:29> '<bound member function type>' ->find 0x56283d442f78
|     | |             | `-CXXThisExpr 0x56283d450190 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56283d450268 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56283d4501d0 <col:34> 'const char *' lvalue ParmVar 0x56283d425bb0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56283d450280 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56283d4501f0 <col:43> 'int' lvalue ParmVar 0x56283d425c30 'flags' 'int'
|     | |             `-DeclRefExpr 0x56283d450210 <col:50> 'Args::Slot *' lvalue Var 0x56283d44ffc8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56283d4503c0 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56283d4503a8 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56283d450388 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56283d450358 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|     | |       `-ImplicitCastExpr 0x56283d450340 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56283d450320 <col:23> 'String' lvalue Var 0x56283d450128 'str' 'String'
|     | `-CompoundStmt 0x56283d450790 <col:64, line:790:9>
|     |   |-CallExpr 0x56283d450518 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56283d4503e8 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|     |   | | `-CXXThisExpr 0x56283d4503d8 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56283d4504c8 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56283d450438 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56283d450418 <col:23> 'P' lvalue ParmVar 0x56283d425ca8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56283d450480 <col:36> 'String' lvalue Var 0x56283d450128 'str' 'String'
|     |   | | `-UnaryOperator 0x56283d4504b0 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56283d4504a0 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56283d4504f8 <col:49> 'Args::Slot *' lvalue Var 0x56283d44ffc8 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56283d4506b0 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56283d450548 <col:13> 'int' lvalue Var 0x56283d450060 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56283d450698 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56283d450678 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56283d4505e0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56283d4505c0 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56283d4505a8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56283d450568 <col:28> 'int' lvalue Var 0x56283d450060 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56283d450588 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56283d450660 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56283d450630 <col:49> 'bool' lvalue ->_read_status 0x56283d409db0
|     |   |         `-ImplicitCastExpr 0x56283d450610 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56283d450600 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56283d450760 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56283d4506d0 <col:13> 'int' lvalue ParmVar 0x56283d425c30 'flags' 'int'
|     |     `-UnaryOperator 0x56283d450748 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56283d450730 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56283d450710 <col:23> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56283d4508e8 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56283d450820 <col:9> 'bool' lvalue ->_read_status 0x56283d409db0
|       | `-ImplicitCastExpr 0x56283d450800 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56283d4507f0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56283d4508c8 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56283d4508a8 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56283d450890 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56283d450850 <col:25> 'int' lvalue Var 0x56283d450060 'read_status' 'int'
|           `-IntegerLiteral 0x56283d450870 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56283d426308 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56283d425e98 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d425f18 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d426268 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56283d425fd8 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d426058 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56283d4260d0 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56283d426178 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56283d4518a0 <col:84, line:805:5>
|     |-DeclStmt 0x56283d4509b0 <line:796:9, col:26>
|     | `-VarDecl 0x56283d450948 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56283d450a80 <line:797:9, col:29>
|     | `-VarDecl 0x56283d4509e0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56283d450a68 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56283d450a48 <col:28> 'int' 1
|     |-DeclStmt 0x56283d450dc0 <line:798:9, col:71>
|     | `-VarDecl 0x56283d450ad8 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56283d450d90 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56283d450d00 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56283d450d48 <col:55> 'T' lvalue ParmVar 0x56283d426178 'variable' 'T &'
|     |     `-UnaryOperator 0x56283d450d78 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56283d450d68 <col:66> 'Args *' this
|     |-WhileStmt 0x56283d451750 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56283d451770 <line:799:16, col:61>
|     | | `-VarDecl 0x56283d450de8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56283d450fc8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56283d450f98 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56283d450f80 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56283d450f60 <col:29, col:61> 'String' (CXXTemporary 0x56283d450f60)
|     | |           `-CXXMemberCallExpr 0x56283d450ef0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56283d450e60 <col:29> '<bound member function type>' ->find 0x56283d442f78
|     | |             | `-CXXThisExpr 0x56283d450e50 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56283d450f28 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56283d450e90 <col:34> 'const char *' lvalue ParmVar 0x56283d425fd8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56283d450f40 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56283d450eb0 <col:43> 'int' lvalue ParmVar 0x56283d426058 'flags' 'int'
|     | |             `-DeclRefExpr 0x56283d450ed0 <col:50> 'Args::Slot *' lvalue Var 0x56283d450948 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56283d451080 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56283d451068 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56283d451048 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56283d451018 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|     | |       `-ImplicitCastExpr 0x56283d451000 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56283d450fe0 <col:23> 'String' lvalue Var 0x56283d450de8 'str' 'String'
|     | `-CompoundStmt 0x56283d451728 <col:64, line:803:9>
|     |   |-CallExpr 0x56283d4514b0 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56283d4510a8 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|     |   | | `-CXXThisExpr 0x56283d451098 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56283d451470 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56283d4510d8 <col:23> 'T *' lvalue Var 0x56283d450ad8 's' 'T *'
|     |   | | `-CallExpr 0x56283d451430 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56283d4512c0 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56283d451308 <col:56> 'P' lvalue ParmVar 0x56283d4260d0 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56283d451328 <col:64> 'String' lvalue Var 0x56283d450de8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56283d4513d8 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56283d451368 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|     |   | |   | `-DeclRefExpr 0x56283d451348 <col:70> 'T *' lvalue Var 0x56283d450ad8 's' 'T *'
|     |   | |   `-UnaryOperator 0x56283d451418 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56283d451408 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56283d451490 <col:81> 'Args::Slot *' lvalue Var 0x56283d450948 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56283d451648 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56283d4514e0 <col:13> 'int' lvalue Var 0x56283d4509e0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56283d451630 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56283d451610 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56283d451578 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56283d451558 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56283d451540 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56283d451500 <col:28> 'int' lvalue Var 0x56283d4509e0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56283d451520 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56283d4515f8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56283d4515c8 <col:49> 'bool' lvalue ->_read_status 0x56283d409db0
|     |   |         `-ImplicitCastExpr 0x56283d4515a8 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56283d451598 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56283d4516f8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56283d451668 <col:13> 'int' lvalue ParmVar 0x56283d426058 'flags' 'int'
|     |     `-UnaryOperator 0x56283d4516e0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56283d4516c8 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56283d4516a8 <col:23> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56283d451880 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56283d4517b8 <col:9> 'bool' lvalue ->_read_status 0x56283d409db0
|       | `-ImplicitCastExpr 0x56283d451798 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56283d451788 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56283d451860 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56283d451840 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56283d451828 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56283d4517e8 <col:25> 'int' lvalue Var 0x56283d4509e0 'read_status' 'int'
|           `-IntegerLiteral 0x56283d451808 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56283d4268e8 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56283d426380 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56283d4263f8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56283d426848 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56283d4264b8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56283d426538 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56283d4265b0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56283d426700 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56283d4526a8 <col:87, line:821:5>
|     |-DeclStmt 0x56283d451950 <line:809:9, col:26>
|     | `-VarDecl 0x56283d4518e8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56283d451a20 <line:810:9, col:29>
|     | `-VarDecl 0x56283d451980 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56283d451a08 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56283d4519e8 <col:28> 'int' 1
|     |-DeclStmt 0x56283d451c68 <line:811:9, col:38>
|     | `-VarDecl 0x56283d451b50 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56283d451c40 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56283d451bc8 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56283d451c20 <col:29> 'Vector<T>' lvalue ParmVar 0x56283d426700 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56283d452558 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56283d452578 <line:812:16, col:61>
|     | | `-VarDecl 0x56283d451c90 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56283d451e70 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56283d451e40 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56283d451e28 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56283d451e08 <col:29, col:61> 'String' (CXXTemporary 0x56283d451e08)
|     | |           `-CXXMemberCallExpr 0x56283d451d98 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56283d451d08 <col:29> '<bound member function type>' ->find 0x56283d442f78
|     | |             | `-CXXThisExpr 0x56283d451cf8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56283d451dd0 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56283d451d38 <col:34> 'const char *' lvalue ParmVar 0x56283d4264b8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56283d451de8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56283d451d58 <col:43> 'int' lvalue ParmVar 0x56283d426538 'flags' 'int'
|     | |             `-DeclRefExpr 0x56283d451d78 <col:50> 'Args::Slot *' lvalue Var 0x56283d4518e8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56283d451f28 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56283d451f10 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56283d451ef0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56283d451ec0 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56283d0ecef8
|     | |       `-ImplicitCastExpr 0x56283d451ea8 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56283d451e88 <col:23> 'String' lvalue Var 0x56283d451c90 'str' 'String'
|     | `-CompoundStmt 0x56283d452520 <col:64, line:819:9>
|     |   |-DeclStmt 0x56283d451fe8 <line:813:13, col:23>
|     |   | `-VarDecl 0x56283d451f50 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56283d451fc8 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56283d452168 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56283d452010 <col:13> '<bound member function type>' ->postparse 0x56283d443188
|     |   | | `-CXXThisExpr 0x56283d452000 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56283d452110 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56283d452060 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56283d452040 <col:23> 'P' lvalue ParmVar 0x56283d4265b0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56283d4520a8 <col:36> 'String' lvalue Var 0x56283d451c90 'str' 'String'
|     |   | | |-DeclRefExpr 0x56283d4520c8 <col:41> 'T' lvalue Var 0x56283d451f50 'sx' 'T'
|     |   | | `-UnaryOperator 0x56283d4520f8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56283d4520e8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56283d452148 <col:53> 'Args::Slot *' lvalue Var 0x56283d4518e8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56283d4522c0 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56283d4521f8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56283d4521c8 <col:17> 'bool' lvalue ->_read_status 0x56283d409db0
|     |   | |   `-ImplicitCastExpr 0x56283d4521a8 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56283d452198 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56283d452298 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56283d452230 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56283d452210 <col:17> 'Vector<T> *' lvalue Var 0x56283d451b50 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56283d452278 <col:30> 'T' lvalue Var 0x56283d451f50 'sx' 'T'
|     |   |-BinaryOperator 0x56283d452440 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56283d4522d8 <col:13> 'int' lvalue Var 0x56283d451980 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56283d452428 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56283d452408 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56283d452370 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56283d452350 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56283d452338 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56283d4522f8 <col:28> 'int' lvalue Var 0x56283d451980 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56283d452318 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56283d4523f0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56283d4523c0 <col:49> 'bool' lvalue ->_read_status 0x56283d409db0
|     |   |         `-ImplicitCastExpr 0x56283d4523a0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56283d452390 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56283d4524f0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56283d452460 <col:13> 'int' lvalue ParmVar 0x56283d426538 'flags' 'int'
|     |     `-UnaryOperator 0x56283d4524d8 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56283d4524c0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56283d4524a0 <col:23> 'const int' lvalue Var 0x56283d4112c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56283d452688 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56283d4525c0 <col:9> 'bool' lvalue ->_read_status 0x56283d409db0
|       | `-ImplicitCastExpr 0x56283d4525a0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56283d452590 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56283d452668 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56283d452648 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56283d452630 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56283d4525f0 <col:25> 'int' lvalue Var 0x56283d451980 'read_status' 'int'
|           `-IntegerLiteral 0x56283d452610 <col:40> 'int' 1
|-AccessSpecDecl 0x56283d426960 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56283d426988 prev 0x56283d40f558 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56283d42e450 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56283d42e540 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56283d4526e0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56283d42e630 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56283d4526f0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56283d42e730 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56283d42e7e0 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56283d42e888 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56283d42e888
| | `-ParmVarDecl 0x56283d42e998 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56283d42f158 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56283d42f158
|   `-ParmVarDecl 0x56283d42f268 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56283d42ea08 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56283d42eb68 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56283d42ed60 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56283d42ec10 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56283d42ec88 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56283d4528d0 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56283d42f018 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56283d452740 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56283d452700 <col:20> 'void *' lvalue ParmVar 0x56283d42ec10 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56283d42f080 '_slot' 'char *'
| | | `-CXXNewExpr 0x56283d4527c8 <col:32, col:45> 'char *' array Function 0x56283d001ab8 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56283d4527b0 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56283d452780 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56283d42ec88 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56283d42f0e0 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56283d452890 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56283d452850 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56283d42ec88 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56283d452950 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56283d42ee60 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56283d42e630 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56283d4529d8 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56283d4529b8 <line:840:13, col:22> 'void' array Function 0x56283d001e18 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56283d4529a0 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56283d452970 <col:22> 'char *' lvalue ->_slot 0x56283d42f080
| |         `-CXXThisExpr 0x56283d452960 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56283d42ef60 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56283d42e730 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56283d452bc8 <col:22, line:844:9>
| |   `-CallExpr 0x56283d452b30 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56283d452b18 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56283d452af8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56283d0d8728 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56283d452b68 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56283d452a48 <col:20> 'void *' lvalue ->_ptr 0x56283d42f018
| |     |   `-CXXThisExpr 0x56283d452a38 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56283d452b98 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56283d452b80 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56283d452a88 <col:26> 'char *' lvalue ->_slot 0x56283d42f080
| |     |     `-CXXThisExpr 0x56283d452a78 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56283d452bb0 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56283d452ac8 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56283d42f0e0
| |         `-CXXThisExpr 0x56283d452ab8 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56283d42f018 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56283d42f080 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56283d42f0e0 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56283d42f2d8 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56283d42f2d8
| | `-ParmVarDecl 0x56283d42f3e8 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56283d42f488 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56283d42f488
|   `-ParmVarDecl 0x56283d42f598 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56283d42f738 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56283d42f608 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56283d42f6a8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56283d42f9d0 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56283d42fbc8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56283d42fa98 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56283d42fd48 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56283d452c00 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56283d452be0 <col:20> 'T *' lvalue ParmVar 0x56283d42fa98 'ptr' 'T *'
|   | `-CompoundStmt 0x56283d452c50 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56283d42fc98 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56283d42e730 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56283d452e00 <col:22, line:857:9>
|   |   `-CallExpr 0x56283d452dd0 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56283d452c60 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56283d21b168 0x56283d0c97e8
|   |     |-CXXOperatorCallExpr 0x56283d452d60 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56283d452cf0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56283d404ca8 0x56283d404898 0x56283d4044c8 0x56283d4040e8 0x56283d403d08 0x56283d403938
|   |     | `-MemberExpr 0x56283d452cc0 <col:29> 'T *' lvalue ->_ptr 0x56283d42fd48
|   |     |   `-CXXThisExpr 0x56283d452cb0 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56283d452da0 <col:35> 'T' lvalue ->_slot 0x56283d42fda8
|   |       `-CXXThisExpr 0x56283d452d90 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56283d42fd48 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56283d42fda8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56283d42fe10 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56283d42ff10 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56283d42ff60 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56283d42fef0 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56283d42fed0 <col:31> 'int' 48
|-FieldDecl 0x56283d42ff88 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56283d42ffe8 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56283d430048 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56283d430180 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56283d4427a0 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56283d442800 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56283d442928 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56283d442b58 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56283d442a60 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56283d442ca8 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56283d442c18 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56283d442f78 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56283d442d68 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56283d442de8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56283d442e90 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56283d443188 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56283d443040 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56283d4430b8 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56283d443258 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56283d4433a8 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56283d443310 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56283d443738 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56283d443468 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56283d4434e8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56283d443590 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56283d443648 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56283d443960 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56283d443810 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56283d443888 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56283d443c78 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56283d443a10 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56283d443bd8 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56283d443ae8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d516ba0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x56283d605e38 <line:167:18>
|-CXXRecordDecl 0x56283d605ef8 prev 0x56283d516ba0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x56283d606008 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Timestamp>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Timestamp * _ptr
        24 |   class Timestamp _slot
        24 |     union Timestamp::rep_t _t
        24 |       int64_t x
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d003ae8 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d003c08 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x56283d3e5460 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56283d3e5540 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x56283d3e5540
| `-ParmVarDecl 0x56283d3e5628 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x56283d3e56c8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x56283d3e56c8
| `-ParmVarDecl 0x56283d3e57d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x56283d3f0cd0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class TimestampArg
         0 |   _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class Timestamp>
         0 |   class TimestampArg (base)
         0 |     _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56283d4079d0 <../dummy_inc/click/timestamp.hh:1525:1, line:1534:1> line:1525:7 referenced class TimestampArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56283d407ae8 <col:1, col:7> col:7 implicit referenced class TimestampArg
|-AccessSpecDecl 0x56283d407b78 <col:22, col:28> col:22 public
|-CXXConstructorDecl 0x56283d407c88 <line:1526:5, line:1528:5> line:1526:5 used TimestampArg 'void (bool)'
| |-ParmVarDecl 0x56283d407bb0 <col:18, col:35> col:23 used is_signed 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56283d408078 <col:35> 'bool' false
| |-CXXCtorInitializer Field 0x56283d408010 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x56283d4080e8 <line:1527:21> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x56283d4080a8 <col:21> 'bool' lvalue ParmVar 0x56283d407bb0 'is_signed' 'bool'
| `-CompoundStmt 0x56283d408130 <col:32, line:1528:5>
|-CXXMethodDecl 0x56283d407f48 <line:1529:5, line:1532:5> line:1529:10 used parse 'bool (const String &, Timestamp &, const ArgContext &)'
| |-ParmVarDecl 0x56283d407d48 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x56283d407dc0 <col:35, col:46> col:46 used value 'Timestamp &'
| |-ParmVarDecl 0x56283d407e68 <col:53, col:78> col:71 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56283d408088 <col:78> 'const ArgContext' lvalue Var 0x56283d407710 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56283d408340 <col:90, line:1532:5>
|   |-CStyleCastExpr 0x56283d408170 <line:1530:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56283d408140 <col:16> 'const ArgContext' lvalue ParmVar 0x56283d407e68 'args' 'const ArgContext &'
|   `-ReturnStmt 0x56283d408330 <line:1531:9, col:46>
|     `-CallExpr 0x56283d4082e0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x56283d4082c8 <col:16> 'bool (*)(const String &, Timestamp *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56283d408280 <col:16> 'bool (const String &, Timestamp *, bool)' lvalue Function 0x56283d407918 'cp_time' 'bool (const String &, Timestamp *, bool)'
|       |-DeclRefExpr 0x56283d4081e8 <col:24> 'const String' lvalue ParmVar 0x56283d407d48 'str' 'const String &'
|       |-UnaryOperator 0x56283d408228 <col:29, col:30> 'Timestamp *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x56283d408208 <col:30> 'Timestamp' lvalue ParmVar 0x56283d407dc0 'value' 'Timestamp &'
|       `-ImplicitCastExpr 0x56283d408318 <col:37> 'bool' <LValueToRValue>
|         `-MemberExpr 0x56283d408250 <col:37> 'bool' lvalue ->is_signed 0x56283d408010
|           `-CXXThisExpr 0x56283d408240 <col:37> 'TimestampArg *' implicit this
|-FieldDecl 0x56283d408010 <line:1533:5, col:10> col:10 referenced is_signed 'bool'
|-CXXDestructorDecl 0x56283d60ba60 <line:1525:7> col:7 implicit ~TimestampArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56283d60bb98 <col:7> col:7 implicit constexpr TimestampArg 'void (const TimestampArg &)' inline default trivial noexcept-unevaluated 0x56283d60bb98
| `-ParmVarDecl 0x56283d60bca8 <col:7> col:7 'const TimestampArg &'
`-CXXConstructorDecl 0x56283d60bd48 <col:7> col:7 implicit used constexpr TimestampArg 'void (TimestampArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56283d60be58 <col:7> col:7 used 'TimestampArg &&'
  |-CXXCtorInitializer Field 0x56283d408010 'is_signed' 'bool'
  | `-ImplicitCastExpr 0x56283d60cc20 <col:7> 'bool' <LValueToRValue>
  |   `-MemberExpr 0x56283d60cbf0 <col:7> 'bool' xvalue .is_signed 0x56283d408010
  |     `-CXXStaticCastExpr 0x56283d60cbc0 <col:7> 'TimestampArg' xvalue static_cast<class TimestampArg &&> <NoOp>
  |       `-DeclRefExpr 0x56283d60cb90 <col:7> 'TimestampArg' lvalue ParmVar 0x56283d60be58 '' 'TimestampArg &&'
  `-CompoundStmt 0x56283d60cc68 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.TimestampArg = type { i8 }
  NonVirtualBaseLLVMType:%class.TimestampArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56283d408388 <../dummy_inc/click/timestamp.hh:1536:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'TimestampArg'
|-TemplateArgument type 'Timestamp'
|-CXXRecordDecl 0x56283d4085e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56283d60b988 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x56283d60c260 <col:19> 'TimestampArg' 'void (bool)'
| |   `-CXXDefaultArgExpr 0x56283d60c240 <<invalid sloc>> 'bool'
| `-CompoundStmt 0x56283d60c2d0 <col:19>
|-CXXConstructorDecl 0x56283d60bec8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Timestamp> &)' inline default trivial noexcept-unevaluated 0x56283d60bec8
| `-ParmVarDecl 0x56283d60bfd8 <col:19> col:19 'const DefaultArg<Timestamp> &'
|-CXXConstructorDecl 0x56283d60c078 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Timestamp> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56283d60c188 <col:19> col:19 used 'DefaultArg<Timestamp> &&'
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x56283d60cc78 <col:19> 'TimestampArg' 'void (TimestampArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56283d60cb70 <col:19> 'TimestampArg' xvalue <UncheckedDerivedToBase (TimestampArg)>
| |     `-CXXStaticCastExpr 0x56283d60cb40 <col:19> 'DefaultArg<Timestamp>' xvalue static_cast<struct DefaultArg<class Timestamp> &&> <NoOp>
| |       `-DeclRefExpr 0x56283d60cb10 <col:19> 'DefaultArg<Timestamp>' lvalue ParmVar 0x56283d60c188 '' 'DefaultArg<Timestamp> &&'
| `-CompoundStmt 0x56283d60cce8 <col:19>
`-CXXDestructorDecl 0x56283d60c310 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  IsZeroInitializable:1
  BitFields:[
]>
