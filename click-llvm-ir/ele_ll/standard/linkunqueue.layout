
*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17)
         0 |   unsigned long long __wseq
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_internal_list
         0 |   struct __pthread_internal_list * __prev
         8 |   struct __pthread_internal_list * __next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_mutex_s
         0 |   int __lock
         4 |   unsigned int __count
         8 |   int __owner
        12 |   unsigned int __nusers
        16 |   int __kind
        20 |   short __spins
        22 |   short __elision
        24 |   struct __pthread_internal_list __list
        24 |     struct __pthread_internal_list * __prev
        32 |     struct __pthread_internal_list * __next
           | [sizeof=40, dsize=40, align=8,
           |  nvsize=40, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5)
         0 |   unsigned int __low
         4 |   unsigned int __high
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17)
         0 |   unsigned long long __g1_start
         0 |   struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         0 |     unsigned int __low
         4 |     unsigned int __high
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_cond_s
         0 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:94:17) 
         0 |     unsigned long long __wseq
         0 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:97:5) __wseq32
         0 |       unsigned int __low
         4 |       unsigned int __high
         8 |   union __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:103:17) 
         8 |     unsigned long long __g1_start
         8 |     struct __pthread_cond_s::(anonymous at /usr/include/bits/thread-shared-types.h:106:5) __g1_start32
         8 |       unsigned int __low
        12 |       unsigned int __high
        16 |   unsigned int [2] __g_refs
        24 |   unsigned int [2] __g_size
        32 |   unsigned int __g1_orig_size
        36 |   unsigned int __wrefs
        40 |   unsigned int [2] __g_signals
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct __pthread_rwlock_arch_t
         0 |   unsigned int __readers
         4 |   unsigned int __writers
         8 |   unsigned int __wrphase_futex
        12 |   unsigned int __writers_futex
        16 |   unsigned int __pad3
        20 |   unsigned int __pad4
        24 |   int __cur_writer
        28 |   int __shared
        32 |   signed char __rwelision
        33 |   unsigned char [7] __pad1
        40 |   unsigned long __pad2
        48 |   unsigned int __flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::memo_t
         0 |   volatile uint32_t refcount
         4 |   uint32_t capacity
         8 |   volatile uint32_t dirty
        12 |   char [8] real_data
           | [sizeof=20, dsize=20, align=4,
           |  nvsize=20, nvalign=4]

*** Dumping AST Record Layout
         0 | lldiv_t
         0 |   long long quot
         8 |   long long rem
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct msghdr
         0 |   void * msg_name
         8 |   socklen_t msg_namelen
        16 |   struct iovec * msg_iov
        24 |   size_t msg_iovlen
        32 |   void * msg_control
        40 |   size_t msg_controllen
        48 |   int msg_flags
           | [sizeof=56, dsize=56, align=8,
           |  nvsize=56, nvalign=8]

*** Dumping AST Record Layout
         0 | struct in_addr
         0 |   in_addr_t s_addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5)
         0 |   uint8_t [16] __u6_addr8
         0 |   uint16_t [8] __u6_addr16
         0 |   uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr
         0 |   sa_family_t sa_family
         2 |   char [14] sa_data
           | [sizeof=16, dsize=16, align=2,
           |  nvsize=16, nvalign=2]

*** Dumping AST Record Layout
         0 | struct in6_addr
         0 |   union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         0 |     uint8_t [16] __u6_addr8
         0 |     uint16_t [8] __u6_addr16
         0 |     uint32_t [4] __u6_addr32
           | [sizeof=16, dsize=16, align=4,
           |  nvsize=16, nvalign=4]

*** Dumping AST Record Layout
         0 | struct sockaddr_storage
         0 |   sa_family_t ss_family
         2 |   char [118] __ss_padding
       120 |   unsigned long __ss_align
           | [sizeof=128, dsize=128, align=8,
           |  nvsize=128, nvalign=8]

*** Dumping AST Record Layout
         0 | struct sockaddr_in6
         0 |   sa_family_t sin6_family
         2 |   in_port_t sin6_port
         4 |   uint32_t sin6_flowinfo
         8 |   struct in6_addr sin6_addr
         8 |     union in6_addr::(anonymous at /usr/include/netinet/in.h:214:5) __in6_u
         8 |       uint8_t [16] __u6_addr8
         8 |       uint16_t [8] __u6_addr16
         8 |       uint32_t [4] __u6_addr32
        24 |   uint32_t sin6_scope_id
           | [sizeof=28, dsize=28, align=4,
           |  nvsize=28, nvalign=4]

*** Dumping AST Record Layout
         0 | struct timeval
         0 |   __time_t tv_sec
         8 |   __suseconds_t tv_usec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct String::rep_t
         0 |   const char * data
         8 |   int length
        16 |   struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | class String
         0 |   struct String::rep_t _r
         0 |     const char * data
         8 |     int length
        16 |     struct String::memo_t * memo
           | [sizeof=24, dsize=24, align=8,
           |  nvsize=24, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timestamp::rep_t
         0 |   int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timestamp
         0 |   union Timestamp::rep_t _t
         0 |     int64_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | struct timespec
         0 |   __time_t tv_sec
         8 |   __syscall_slong_t tv_nsec
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class IPAddress
         0 |   uint32_t _addr
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | class Element::Port
         0 |   class Element * _e
         8 |   int _port
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | struct TimerSet::heap_element
         0 |   class Timestamp expiry_s
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   class Timer * t
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | struct pollfd
         0 |   int fd
         4 |   short events
         6 |   short revents
           | [sizeof=8, dsize=8, align=4,
           |  nvsize=8, nvalign=4]

*** Dumping AST Record Layout
         0 | struct SelectSet::SelectorInfo
         0 |   class Element * read
         8 |   class Element * write
        16 |   int pollfd
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | class Element
         0 |   (Element vtable pointer)
         8 |   class Element::Port *[2] _ports
        24 |   class Element::Port [4] _inline_ports
        88 |   int [2] _nports
        96 |   class Router * _router
       104 |   int _eindex
           | [sizeof=112, dsize=108, align=8,
           |  nvsize=108, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0c6c98 prev 0x56490e0be518 <../dummy_inc/click/element.hh:214:5, line:252:5> line:214:11 referenced class Port definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0c6d90 <col:5, col:11> col:11 implicit referenced class Port
|-AccessSpecDecl 0x56490e0c6e20 <col:18, col:24> col:18 public
|-CXXMethodDecl 0x56490e0c6e98 <line:216:9, col:30> col:21 used active 'bool () const' inline
|-CXXMethodDecl 0x56490e0c6f58 <line:217:9, col:35> col:25 element 'Element *() const' inline
|-CXXMethodDecl 0x56490e0c7020 <line:218:9, col:27> col:20 port 'int () const' inline
|-CXXMethodDecl 0x56490e0c7198 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| |-ParmVarDecl 0x56490e0c70d0 <col:54, col:62> col:62 p 'Packet *'
| |-NoInlineAttr 0x56490e0c7240 <col:24>
| `-OptimizeNoneAttr 0x56490e0c7298 <col:34>
|-CXXMethodDecl 0x56490e0c72e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
|-CXXMethodDecl 0x56490e0c7598 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| |-ParmVarDecl 0x56490e0c7390 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56490e0c7408 <col:43, col:52> col:52 e 'Element *'
| `-ParmVarDecl 0x56490e0c7488 <col:55, col:59> col:59 port 'int'
|-AccessSpecDecl 0x56490e0c7650 <line:229:7, col:14> col:7 private
|-FieldDecl 0x56490e0c7688 <line:231:9, col:18> col:18 referenced _e 'Element *'
|-FieldDecl 0x56490e0c76f0 <line:232:9, col:13> col:13 referenced _port 'int'
|-CXXConstructorDecl 0x56490e0c7778 <line:247:9, col:21> col:16 Port 'void ()' inline
|-CXXMethodDecl 0x56490e0c7ab0 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| |-ParmVarDecl 0x56490e0c7830 <col:28, col:33> col:33 isoutput 'bool'
| |-ParmVarDecl 0x56490e0c78a8 <col:43, col:52> col:52 owner 'Element *'
| |-ParmVarDecl 0x56490e0c7920 <col:59, col:68> col:68 e 'Element *'
| `-ParmVarDecl 0x56490e0c79a0 <col:71, col:75> col:75 port 'int'
|-FriendDecl 0x56490e0c7bc0 <line:250:9, col:22> col:16 'class Element':'Element'
|-CXXConstructorDecl 0x56490e0ce4a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56490e0ce4a8
| `-ParmVarDecl 0x56490e0ce5b8 <col:11> col:11 'const Element::Port &'
|-CXXConstructorDecl 0x56490e0ce658 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56490e0ce658
| `-ParmVarDecl 0x56490e0ce768 <col:11> col:11 'Element::Port &&'
`-CXXDestructorDecl 0x56490e194be0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"class.Element::Port" = type <{ %class.Element*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%"class.Element::Port.base" = type <{ %class.Element*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0b9f90 prev 0x56490e0b9d30 <../dummy_inc/click/element.hh:29:1, line:319:1> line:29:7 referenced class Element definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e0ba088 <col:1, col:7> col:7 implicit referenced class Element
|-AccessSpecDecl 0x56490e0ba118 <col:17, col:23> col:17 public
|-CXXConstructorDecl 0x56490e0ba178 <line:31:5, col:13> col:5 used Element 'void ()'
|-CXXDestructorDecl 0x56490e0ba268 <line:32:5, col:22> col:13 used ~Element 'void () noexcept' virtual
|-VarDecl 0x56490e0ba368 <line:33:5, col:16> col:16 nelements_allocated 'int' static
|-CXXMethodDecl 0x56490e0ba538 <line:36:5, col:42> col:18 used push 'void (int, Packet *)' virtual
| |-ParmVarDecl 0x56490e0ba3e8 <col:23, col:27> col:27 port 'int'
| `-ParmVarDecl 0x56490e0ba460 <col:33, col:41> col:41 p 'Packet *'
|-CXXMethodDecl 0x56490e0ba6c8 <line:37:5, col:70> col:21 used pull 'Packet *(int)' virtual
| |-ParmVarDecl 0x56490e0ba600 <col:26, col:30> col:30 port 'int'
| `-WarnUnusedResultAttr 0x56490e0ba770 <col:51> warn_unused_result ""
|-CXXMethodDecl 0x56490e0ba8a8 <line:38:5, col:44> col:21 simple_action 'Packet *(Packet *)' virtual
| `-ParmVarDecl 0x56490e0ba7e0 <col:35, col:43> col:43 p 'Packet *'
|-CXXMethodDecl 0x56490e0baa48 <line:40:5, col:37> col:18 used run_task 'bool (Task *)' virtual
| `-ParmVarDecl 0x56490e0ba988 <col:27, col:33> col:33 task 'Task *'
|-CXXMethodDecl 0x56490e0babe8 <line:41:5, col:40> col:18 run_timer 'void (Timer *)' virtual
| `-ParmVarDecl 0x56490e0bab28 <col:28, col:35> col:35 timer 'Timer *'
|-EnumDecl 0x56490e0bac90 <line:43:5, col:46> col:5
| |-EnumConstantDecl 0x56490e0bad90 <col:12, col:26> col:12 SELECT_READ 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
| | `-ImplicitCastExpr 0x56490e0bae70 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0bad70 <col:26> 'int' Int: 1
| |     `-IntegerLiteral 0x56490e0bad50 <col:26> 'int' 1
| `-EnumConstantDecl 0x56490e0bae20 <col:29, col:44> col:29 SELECT_WRITE 'Element::(anonymous enum at ../dummy_inc/click/element.hh:43:5)'
|   `-ImplicitCastExpr 0x56490e0bae88 <col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e0bae00 <col:44> 'int' Int: 2
|       `-IntegerLiteral 0x56490e0bade0 <col:44> 'int' 2
|-CXXMethodDecl 0x56490e0bafd0 <line:44:5, col:43> col:18 selected 'void (int, int)' virtual
| |-ParmVarDecl 0x56490e0baeb8 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56490e0baf38 <col:35, col:39> col:39 mask 'int'
|-CXXMethodDecl 0x56490e0bb128 <line:45:5, col:33> col:18 selected 'void (int)' virtual
| `-ParmVarDecl 0x56490e0bb098 <col:27, col:31> col:31 fd 'int'
|-CXXMethodDecl 0x56490e0bb338 <line:48:5, col:86> col:45 checked_output_push 'void (int, Packet *) const'
| |-ParmVarDecl 0x56490e0bb1e8 <col:65, col:69> col:69 port 'int'
| |-ParmVarDecl 0x56490e0bb260 <col:75, col:83> col:83 p 'Packet *'
| |-NoInlineAttr 0x56490e0bb3e8 <col:20>
| `-OptimizeNoneAttr 0x56490e0bb440 <col:30>
|-CXXMethodDecl 0x56490e0bb548 <line:49:5, col:77> col:48 checked_input_pull 'Packet *(int) const'
| |-ParmVarDecl 0x56490e0bb480 <col:67, col:71> col:71 port 'int'
| |-NoInlineAttr 0x56490e0bb5f0 <col:20>
| `-OptimizeNoneAttr 0x56490e0bb648 <col:30>
|-CXXMethodDecl 0x56490e0bb698 <line:52:5, col:46> col:25 class_name 'const char *() const' virtual pure
|-CXXMethodDecl 0x56490e0bb760 <line:54:5, col:38> col:25 port_count 'const char *() const' virtual
|-VarDecl 0x56490e0bb820 <line:55:5, col:33> col:23 PORTS_0_0 'const char []' static
|-VarDecl 0x56490e0bb8a8 <line:56:5, col:33> col:23 PORTS_0_1 'const char []' static
|-VarDecl 0x56490e0bb930 <line:57:5, col:33> col:23 PORTS_1_0 'const char []' static
|-VarDecl 0x56490e0bb9b8 <line:58:5, col:33> col:23 used PORTS_1_1 'const char []' static
|-VarDecl 0x56490e0bba40 <line:59:5, col:35> col:23 PORTS_1_1X2 'const char []' static
|-CXXMethodDecl 0x56490e0bbad0 <line:61:5, col:38> col:25 processing 'const char *() const' virtual
|-VarDecl 0x56490e0bbb90 <line:62:5, col:32> col:23 AGNOSTIC 'const char []' static
|-VarDecl 0x56490e0bbc18 <line:63:5, col:28> col:23 PUSH 'const char []' static
|-VarDecl 0x56490e0bbca0 <line:64:5, col:28> col:23 PULL 'const char []' static
|-VarDecl 0x56490e0bbd28 <line:65:5, col:36> col:23 PUSH_TO_PULL 'const char []' static
|-VarDecl 0x56490e0bbdb0 <line:66:5, col:36> col:23 used PULL_TO_PUSH 'const char []' static
|-VarDecl 0x56490e0bbe38 <line:67:5, col:39> col:23 PROCESSING_A_AH 'const char []' static
|-CXXMethodDecl 0x56490e0bbec8 <line:69:5, col:37> col:25 flow_code 'const char *() const' virtual
|-VarDecl 0x56490e0bbf88 <line:70:5, col:37> col:23 COMPLETE_FLOW 'const char []' static
|-CXXMethodDecl 0x56490e0bc018 <line:72:5, col:33> col:25 flags 'const char *() const' virtual
|-CXXMethodDecl 0x56490e0bc168 <line:73:5, col:30> col:9 flag_value 'int (int) const'
| `-ParmVarDecl 0x56490e0bc0d0 <col:20, col:24> col:24 flag 'int'
|-CXXMethodDecl 0x56490e0bc2f0 <line:75:5, col:40> col:19 cast 'void *(const char *)' virtual
| `-ParmVarDecl 0x56490e0bc228 <col:24, col:36> col:36 name 'const char *'
|-CXXMethodDecl 0x56490e0bc590 <line:76:5, col:70> col:19 port_cast 'void *(bool, int, const char *)' virtual
| |-ParmVarDecl 0x56490e0bc3a8 <col:29, col:34> col:34 isoutput 'bool'
| |-ParmVarDecl 0x56490e0bc428 <col:44, col:48> col:48 port 'int'
| `-ParmVarDecl 0x56490e0bc4a8 <col:54, col:66> col:66 name 'const char *'
|-EnumDecl 0x56490e0bc648 <line:79:5, line:85:5> line:79:10 ConfigurePhase
| |-EnumConstantDecl 0x56490e0bc750 <line:80:9, col:33> col:9 CONFIGURE_PHASE_FIRST 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56490e0bc9e0 <col:33> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0bc730 <col:33> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e0bc710 <col:33> 'int' 0
| |-EnumConstantDecl 0x56490e0bc7e0 <line:81:9, col:32> col:9 referenced CONFIGURE_PHASE_INFO 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56490e0bc9f8 <col:32> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0bc7c0 <col:32> 'int' Int: 20
| |     `-IntegerLiteral 0x56490e0bc7a0 <col:32> 'int' 20
| |-EnumConstantDecl 0x56490e0bc870 <line:82:9, col:38> col:9 CONFIGURE_PHASE_PRIVILEGED 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56490e0bca10 <col:38> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0bc850 <col:38> 'int' Int: 90
| |     `-IntegerLiteral 0x56490e0bc830 <col:38> 'int' 90
| |-EnumConstantDecl 0x56490e0bc900 <line:83:9, col:35> col:9 CONFIGURE_PHASE_DEFAULT 'Element::ConfigurePhase'
| | `-ImplicitCastExpr 0x56490e0bca28 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0bc8e0 <col:35> 'int' Int: 100
| |     `-IntegerLiteral 0x56490e0bc8c0 <col:35> 'int' 100
| `-EnumConstantDecl 0x56490e0bc990 <line:84:9, col:32> col:9 CONFIGURE_PHASE_LAST 'Element::ConfigurePhase'
|   `-ImplicitCastExpr 0x56490e0bca40 <col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e0bc970 <col:32> 'int' Int: 2000
|       `-IntegerLiteral 0x56490e0bc950 <col:32> 'int' 2000
|-CXXMethodDecl 0x56490e0bca80 <line:86:5, col:35> col:17 configure_phase 'int () const' virtual
|-CXXMethodDecl 0x56490e0bcd90 <line:88:5, col:67> col:17 configure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56490e0bcc00 <col:27, col:43> col:43 conf 'Vector<String> &'
| `-ParmVarDecl 0x56490e0bcc78 <col:49, col:63> col:63 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0bce60 <line:90:5, col:31> col:18 add_handlers 'void ()' virtual
|-CXXMethodDecl 0x56490e0bcfe0 <line:92:5, col:46> col:17 initialize 'int (ErrorHandler *)' virtual
| `-ParmVarDecl 0x56490e0bcf10 <col:28, col:42> col:42 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0bd1e8 <line:94:5, col:69> col:18 take_state 'void (Element *, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56490e0bd098 <col:29, col:38> col:38 old_element 'Element *'
| `-ParmVarDecl 0x56490e0bd110 <col:51, col:65> col:65 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0bd2e8 <line:95:5, col:40> col:22 hotswap_element 'Element *() const' virtual
|-EnumDecl 0x56490e0bd388 <line:97:5, line:106:5> line:97:10 referenced CleanupStage
| |-EnumConstantDecl 0x56490e0bd450 <line:98:9> col:9 referenced CLEANUP_NO_ROUTER 'Element::CleanupStage'
| |-EnumConstantDecl 0x56490e0bd4e0 <line:99:9, col:36> col:9 CLEANUP_BEFORE_CONFIGURE 'Element::CleanupStage'
| | `-ImplicitCastExpr 0x56490e0bd710 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0bd4c0 <col:36> 'int' Int: 0
| |     `-DeclRefExpr 0x56490e0bd4a0 <col:36> 'int' EnumConstant 0x56490e0bd450 'CLEANUP_NO_ROUTER' 'Element::CleanupStage'
| |-EnumConstantDecl 0x56490e0bd530 <line:100:9> col:9 CLEANUP_CONFIGURE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56490e0bd580 <line:101:9> col:9 CLEANUP_CONFIGURED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56490e0bd5d0 <line:102:9> col:9 CLEANUP_INITIALIZE_FAILED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56490e0bd620 <line:103:9> col:9 CLEANUP_INITIALIZED 'Element::CleanupStage'
| |-EnumConstantDecl 0x56490e0bd670 <line:104:9> col:9 CLEANUP_ROUTER_INITIALIZED 'Element::CleanupStage'
| `-EnumConstantDecl 0x56490e0bd6c0 <line:105:9> col:9 CLEANUP_MANUAL 'Element::CleanupStage'
|-CXXMethodDecl 0x56490e0bd7f8 <line:107:5, col:44> col:18 cleanup 'void (Element::CleanupStage)' virtual
| `-ParmVarDecl 0x56490e0bd738 <col:26, col:39> col:39 stage 'Element::CleanupStage'
|-CXXMethodDecl 0x56490e0bd8c0 <line:109:5, col:42> col:24 static_initialize 'void ()' static inline
|-CXXMethodDecl 0x56490e0bd980 <line:110:5, col:39> col:24 static_cleanup 'void ()' static inline
|-CXXMethodDecl 0x56490e0bda40 <line:113:5, col:19> col:12 name 'String () const'
|-CXXMethodDecl 0x56490e0bdb00 <line:114:5, col:34> col:20 declaration 'String () const' virtual
|-CXXMethodDecl 0x56490e0bdbe8 <line:116:5, col:29> col:20 used router 'Router *() const' inline
|-CXXMethodDecl 0x56490e0bdcb0 <line:117:5, col:25> col:16 eindex 'int () const' inline
|-CXXMethodDecl 0x56490e0bde30 <line:118:5, col:34> col:16 eindex 'int (Router *) const' inline
| `-ParmVarDecl 0x56490e0bdd60 <col:23, col:31> col:31 r 'Router *'
|-CXXMethodDecl 0x56490e0bdf58 <line:121:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56490e0be158 <line:123:5, line:127:5> line:123:17 attach_router 'void (Router *, int)' inline
| |-ParmVarDecl 0x56490e0be008 <col:31, col:39> col:39 used r 'Router *'
| |-ParmVarDecl 0x56490e0be088 <col:42, col:46> col:46 used eindex 'int'
| `-CompoundStmt 0x56490e0ca978 <col:54, line:127:5>
|   |-ParenExpr 0x56490e0ca828 <line:124:9, col:152> 'void'
|   | `-ConditionalOperator 0x56490e0ca7f8 <col:10, col:151> 'void'
|   |   |-CXXStaticCastExpr 0x56490e0ca4e0 <col:10, col:38> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56490e0ca4b8 <col:30, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-ImplicitCastExpr 0x56490e0ca4a0 <col:31> 'bool' <PointerToBoolean>
|   |   |     `-ImplicitCastExpr 0x56490e0ca488 <col:31> 'Router *' <LValueToRValue>
|   |   |       `-MemberExpr 0x56490e0ca458 <col:31> 'Router *' lvalue ->_router 0x56490e0c8370
|   |   |         `-CXXThisExpr 0x56490e0ca448 <col:31> 'Element *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56490e0ca540 <col:42, col:49> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e0ca520 <col:48> 'int' 0
|   |   `-CallExpr 0x56490e0ca758 <col:53, col:151> 'void'
|   |     |-ImplicitCastExpr 0x56490e0ca740 <col:53> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e0ca720 <col:53> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e0ca798 <col:68> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e0ca5b0 <col:68> 'const char [9]' lvalue "!_router"
|   |     |-ImplicitCastExpr 0x56490e0ca7b0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e0ca5d0 <col:80> 'const char [30]' lvalue "../dummy_inc/click/element.hh"
|   |     |-ImplicitCastExpr 0x56490e0ca7c8 <col:113> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e0ca608 <col:113> 'int' 124
|   |     `-ImplicitCastExpr 0x56490e0ca7e0 <col:118, col:132> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e0ca708 <col:118, col:132> 'const char [43]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e0ca6f0 <col:132> 'const char [43]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e0ca6a8 <col:132> 'const char [43]' lvalue "void Element::attach_router(Router *, int)"
|   |-BinaryOperator 0x56490e0ca8c0 <line:125:9, col:19> 'Router *' lvalue '='
|   | |-MemberExpr 0x56490e0ca858 <col:9> 'Router *' lvalue ->_router 0x56490e0c8370
|   | | `-CXXThisExpr 0x56490e0ca848 <col:9> 'Element *' implicit this
|   | `-ImplicitCastExpr 0x56490e0ca8a8 <col:19> 'Router *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56490e0ca888 <col:19> 'Router *' lvalue ParmVar 0x56490e0be008 'r' 'Router *'
|   `-BinaryOperator 0x56490e0ca958 <line:126:9, col:19> 'int' lvalue '='
|     |-MemberExpr 0x56490e0ca8f0 <col:9> 'int' lvalue ->_eindex 0x56490e0c83d8
|     | `-CXXThisExpr 0x56490e0ca8e0 <col:9> 'Element *' implicit this
|     `-ImplicitCastExpr 0x56490e0ca940 <col:19> 'int' <LValueToRValue>
|       `-DeclRefExpr 0x56490e0ca920 <col:19> 'int' lvalue ParmVar 0x56490e0be088 'eindex' 'int'
|-CXXMethodDecl 0x56490e0be2e0 <line:130:5, col:38> col:16 used nports 'int (bool) const' inline
| `-ParmVarDecl 0x56490e0be218 <col:23, col:28> col:28 isoutput 'bool'
|-CXXMethodDecl 0x56490e0be3b0 <line:131:5, col:26> col:16 used ninputs 'int () const' inline
|-CXXMethodDecl 0x56490e0be478 <line:132:5, col:27> col:16 used noutputs 'int () const' inline
|-CXXRecordDecl 0x56490e0be518 <line:134:5, col:11> col:11 referenced class Port
|-CXXMethodDecl 0x56490e0be768 <line:135:5, col:82> col:52 used port 'const Element::Port &(bool, int) const'
| |-ParmVarDecl 0x56490e0be5e0 <col:57, col:62> col:62 isoutput 'bool'
| |-ParmVarDecl 0x56490e0be660 <col:72, col:76> col:76 port 'int'
| |-NoInlineAttr 0x56490e0be818 <col:20>
| `-OptimizeNoneAttr 0x56490e0be870 <col:30>
|-CXXMethodDecl 0x56490e0be978 <line:136:5, col:68> col:52 input 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56490e0be8b0 <col:58, col:62> col:62 port 'int'
| |-NoInlineAttr 0x56490e0bea20 <col:20>
| `-OptimizeNoneAttr 0x56490e0bea78 <col:30>
|-CXXMethodDecl 0x56490e0beb48 <line:137:5, col:69> col:52 output 'const Element::Port &(int) const'
| |-ParmVarDecl 0x56490e0beab8 <col:59, col:63> col:63 port 'int'
| |-NoInlineAttr 0x56490e0bebf0 <col:20>
| `-OptimizeNoneAttr 0x56490e0bec48 <col:30>
|-CXXMethodDecl 0x56490e0bedd8 <line:139:5, col:54> col:17 used port_active 'bool (bool, int) const' inline
| |-ParmVarDecl 0x56490e0bec80 <col:29, col:34> col:34 isoutput 'bool'
| `-ParmVarDecl 0x56490e0bed00 <col:44, col:48> col:48 port 'int'
|-CXXMethodDecl 0x56490e0bef68 <line:140:5, col:41> col:17 input_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56490e0beea0 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56490e0bf0b8 <line:141:5, col:41> col:17 input_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56490e0bf028 <col:31, col:35> col:35 port 'int'
|-CXXMethodDecl 0x56490e0bf208 <line:142:5, col:42> col:17 output_is_push 'bool (int) const' inline
| `-ParmVarDecl 0x56490e0bf178 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56490e0bf358 <line:143:5, col:42> col:17 output_is_pull 'bool (int) const' inline
| `-ParmVarDecl 0x56490e0bf2c8 <col:32, col:36> col:36 port 'int'
|-CXXMethodDecl 0x56490e0bf618 <line:144:5, col:57> col:10 port_flow 'void (bool, int, Bitvector *) const'
| |-ParmVarDecl 0x56490e0bf410 <col:20, col:25> col:25 isoutput 'bool'
| |-ParmVarDecl 0x56490e0bf490 <col:35, col:39> col:39 port 'int'
| `-ParmVarDecl 0x56490e0bf538 <col:45, col:54> col:55 'Bitvector *'
|-CXXMethodDecl 0x56490e0bf6f0 <line:147:5, col:28> col:12 configuration 'String () const'
|-CXXMethodDecl 0x56490e0bf7b0 <line:149:5, col:41> col:18 can_live_reconfigure 'bool () const' virtual
|-CXXMethodDecl 0x56490e0bfa98 <line:150:5, col:64> col:17 live_reconfigure 'int (Vector<String> &, ErrorHandler *)' virtual
| |-ParmVarDecl 0x56490e0bf930 <col:34, col:48> col:49 'Vector<String> &'
| `-ParmVarDecl 0x56490e0bf9a8 <col:51, col:63> col:64 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0bfbc8 <line:152:5, col:33> col:19 home_thread 'RouterThread *() const'
|-CXXMethodDecl 0x56490e0bfda0 <line:156:5, col:36> col:9 add_select 'int (int, int)'
| |-ParmVarDecl 0x56490e0bfc80 <col:20, col:24> col:24 fd 'int'
| `-ParmVarDecl 0x56490e0bfd00 <col:28, col:32> col:32 mask 'int'
|-CXXMethodDecl 0x56490e0bff88 <line:157:5, col:39> col:9 remove_select 'int (int, int)'
| |-ParmVarDecl 0x56490e0bfe68 <col:23, col:27> col:27 fd 'int'
| `-ParmVarDecl 0x56490e0bfee8 <col:31, col:35> col:35 mask 'int'
|-CXXMethodDecl 0x56490e0c02f8 <line:161:5, col:127> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56490e0c0048 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56490e0c00c0 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56490e0c0140 <col:82, col:106> col:94 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56490e0c9f58 <col:106> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56490e0c9f38 <col:106> 'int' 0
| `-ParmVarDecl 0x56490e0c01b8 <col:109, col:126> col:118 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56490e0c9f90 <col:126> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56490e0c9f70 <col:126> 'int' 0
|-CXXMethodDecl 0x56490e0c0678 <line:162:5, col:115> col:10 add_read_handler 'void (const String &, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56490e0c03c8 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56490e0c0440 <col:47, col:67> col:67 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56490e0c04c0 <col:82, col:86> col:86 user_data 'int'
| `-ParmVarDecl 0x56490e0c0538 <col:97, col:114> col:106 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56490e0c9fc8 <col:114> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56490e0c9fa8 <col:114> 'int' 0
|-CXXMethodDecl 0x56490e0c0a08 <line:163:5, col:117> col:10 add_read_handler 'void (const char *, ReadHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56490e0c0750 <col:27, col:39> col:39 name 'const char *'
| |-ParmVarDecl 0x56490e0c07c8 <col:45, col:65> col:65 read_callback 'ReadHandlerCallback':'String (*)(Element *, void *)'
| |-ParmVarDecl 0x56490e0c0848 <col:80, col:96> col:84 user_data 'int' cinit
| | `-IntegerLiteral 0x56490e0c9fe0 <col:96> 'int' 0
| `-ParmVarDecl 0x56490e0c08c0 <col:99, col:116> col:108 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56490e0ca020 <col:116> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56490e0ca000 <col:116> 'int' 0
|-CXXMethodDecl 0x56490e0c0d88 <line:164:5, col:130> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, const void *, uint32_t)'
| |-ParmVarDecl 0x56490e0c0ad8 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56490e0c0b50 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c0bd0 <col:85, col:109> col:97 user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56490e0ca058 <col:109> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56490e0ca038 <col:109> 'int' 0
| `-ParmVarDecl 0x56490e0c0c48 <col:112, col:129> col:121 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56490e0ca090 <col:129> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56490e0ca070 <col:129> 'int' 0
|-CXXMethodDecl 0x56490e0c1108 <line:165:5, col:118> col:10 add_write_handler 'void (const String &, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56490e0c0e58 <col:28, col:42> col:42 name 'const String &'
| |-ParmVarDecl 0x56490e0c0ed0 <col:48, col:69> col:69 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c0f50 <col:85, col:89> col:89 user_data 'int'
| `-ParmVarDecl 0x56490e0c0fc8 <col:100, col:117> col:109 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56490e0ca0c8 <col:117> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56490e0ca0a8 <col:117> 'int' 0
|-CXXMethodDecl 0x56490e0c1498 <line:166:5, col:120> col:10 add_write_handler 'void (const char *, WriteHandlerCallback, int, uint32_t)'
| |-ParmVarDecl 0x56490e0c11e0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c1258 <col:46, col:67> col:67 write_callback 'WriteHandlerCallback':'int (*)(const String &, Element *, void *, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c12d8 <col:83, col:99> col:87 user_data 'int' cinit
| | `-IntegerLiteral 0x56490e0ca0e0 <col:99> 'int' 0
| `-ParmVarDecl 0x56490e0c1350 <col:102, col:119> col:111 flags 'uint32_t':'unsigned int' cinit
|   `-ImplicitCastExpr 0x56490e0ca120 <col:119> 'uint32_t':'unsigned int' <IntegralCast>
|     `-IntegerLiteral 0x56490e0ca100 <col:119> 'int' 0
|-CXXMethodDecl 0x56490e0c18b8 <line:167:5, col:142> col:10 set_handler 'void (const String &, int, HandlerCallback, const void *, const void *)'
| |-ParmVarDecl 0x56490e0c1568 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56490e0c15e8 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56490e0c1660 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c16e0 <col:79, col:108> col:91 read_user_data 'const void *' cinit
| | `-ImplicitCastExpr 0x56490e0ca158 <col:108> 'const void *' <NullToPointer>
| |   `-IntegerLiteral 0x56490e0ca138 <col:108> 'int' 0
| `-ParmVarDecl 0x56490e0c1760 <col:111, col:141> col:123 write_user_data 'const void *' cinit
|   `-ImplicitCastExpr 0x56490e0ca190 <col:141> 'const void *' <NullToPointer>
|     `-IntegerLiteral 0x56490e0ca170 <col:141> 'int' 0
|-CXXMethodDecl 0x56490e0c1cd8 <line:168:5, col:122> col:10 set_handler 'void (const String &, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56490e0c1990 <col:22, col:36> col:36 name 'const String &'
| |-ParmVarDecl 0x56490e0c1a10 <col:42, col:46> col:46 flags 'int'
| |-ParmVarDecl 0x56490e0c1a88 <col:53, col:69> col:69 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c1b08 <col:79, col:83> col:83 read_user_data 'int'
| `-ParmVarDecl 0x56490e0c1b88 <col:99, col:121> col:103 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56490e0ca1a8 <col:121> 'int' 0
|-CXXMethodDecl 0x56490e0c2108 <line:169:5, col:124> col:10 set_handler 'void (const char *, int, HandlerCallback, int, int)'
| |-ParmVarDecl 0x56490e0c1db8 <col:22, col:34> col:34 name 'const char *'
| |-ParmVarDecl 0x56490e0c1e38 <col:40, col:44> col:44 flags 'int'
| |-ParmVarDecl 0x56490e0c1eb0 <col:51, col:67> col:67 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c1f30 <col:77, col:98> col:81 read_user_data 'int' cinit
| | `-IntegerLiteral 0x56490e0ca1c8 <col:98> 'int' 0
| `-ParmVarDecl 0x56490e0c1fb0 <col:101, col:123> col:105 write_user_data 'int' cinit
|   `-IntegerLiteral 0x56490e0ca1e8 <col:123> 'int' 0
|-CXXMethodDecl 0x56490e0c23d0 <line:170:5, col:81> col:9 set_handler_flags 'int (const String &, int, int)'
| |-ParmVarDecl 0x56490e0c21e0 <col:27, col:41> col:41 name 'const String &'
| |-ParmVarDecl 0x56490e0c2260 <col:47, col:51> col:51 set_flags 'int'
| `-ParmVarDecl 0x56490e0c22e0 <col:62, col:80> col:66 clear_flags 'int' cinit
|   `-IntegerLiteral 0x56490e0ca208 <col:80> 'int' 0
|-EnumDecl 0x56490e0c2488 <line:171:5, line:175:36> line:171:5
| |-EnumConstantDecl 0x56490e0c2590 <col:12, col:42> col:12 TASKHANDLER_WRITE_SCHEDULED 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56490e0c2820 <col:42> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0c2570 <col:42> 'int' Int: 1
| |     `-IntegerLiteral 0x56490e0c2550 <col:42> 'int' 1
| |-EnumConstantDecl 0x56490e0c2620 <line:172:12, col:40> col:12 TASKHANDLER_WRITE_TICKETS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56490e0c2838 <col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0c2600 <col:40> 'int' Int: 2
| |     `-IntegerLiteral 0x56490e0c25e0 <col:40> 'int' 2
| |-EnumConstantDecl 0x56490e0c26b0 <line:173:12, col:44> col:12 TASKHANDLER_WRITE_HOME_THREAD 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56490e0c2850 <col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0c2690 <col:44> 'int' Int: 4
| |     `-IntegerLiteral 0x56490e0c2670 <col:44> 'int' 4
| |-EnumConstantDecl 0x56490e0c2740 <line:174:12, col:36> col:12 TASKHANDLER_WRITE_ALL 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
| | `-ImplicitCastExpr 0x56490e0c2868 <col:36> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0c2720 <col:36> 'int' Int: 7
| |     `-IntegerLiteral 0x56490e0c2700 <col:36> 'int' 7
| `-EnumConstantDecl 0x56490e0c27d0 <line:175:12, col:34> col:12 referenced TASKHANDLER_DEFAULT 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|   `-ImplicitCastExpr 0x56490e0c2880 <col:34> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e0c27b0 <col:34> 'int' Int: 6
|       `-IntegerLiteral 0x56490e0c2790 <col:34> 'int' 6
|-CXXMethodDecl 0x56490e0c2b38 <line:176:5, col:106> col:10 used add_task_handlers 'void (Task *, NotifierSignal *, int, const String &)'
| |-ParmVarDecl 0x56490e0c28a8 <col:28, col:34> col:34 task 'Task *'
| |-ParmVarDecl 0x56490e0c2948 <col:40, col:56> col:56 signal 'NotifierSignal *'
| |-ParmVarDecl 0x56490e0c29c8 <col:64, col:68> col:68 flags 'int'
| `-ParmVarDecl 0x56490e0c2a40 <col:75, col:105> col:89 prefix 'const String &' cinit
|   `-ExprWithCleanups 0x56490e0ca2c0 <col:98, col:105> 'const String' lvalue
|     `-MaterializeTemporaryExpr 0x56490e0ca2a8 <col:98, col:105> 'const String' lvalue
|       `-ImplicitCastExpr 0x56490e0ca290 <col:98, col:105> 'const String' <NoOp>
|         `-CXXBindTemporaryExpr 0x56490e0ca270 <col:98, col:105> 'String' (CXXTemporary 0x56490e0ca270)
|           `-CXXTemporaryObjectExpr 0x56490e0ca238 <col:98, col:105> 'String' 'void ()'
|-CXXMethodDecl 0x56490e0c2dd8 <line:177:5, line:179:5> line:177:17 add_task_handlers 'void (Task *, NotifierSignal *, const String &)' inline
| |-ParmVarDecl 0x56490e0c2c08 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56490e0c2c80 <col:47, col:63> col:63 used signal 'NotifierSignal *'
| |-ParmVarDecl 0x56490e0c2cf8 <col:71, col:101> col:85 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56490e0ca370 <col:94, col:101> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56490e0ca358 <col:94, col:101> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56490e0ca340 <col:94, col:101> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56490e0ca320 <col:94, col:101> 'String' (CXXTemporary 0x56490e0ca320)
| |         `-CXXTemporaryObjectExpr 0x56490e0ca2e8 <col:94, col:101> 'String' 'void ()'
| `-CompoundStmt 0x56490e0cab60 <col:104, line:179:5>
|   `-CXXMemberCallExpr 0x56490e0caad8 <line:178:9, col:68> 'void'
|     |-MemberExpr 0x56490e0caaa8 <col:9> '<bound member function type>' ->add_task_handlers 0x56490e0c2b38
|     | `-CXXThisExpr 0x56490e0caa98 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56490e0cab18 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56490e0caa18 <col:27> 'Task *' lvalue ParmVar 0x56490e0c2c08 'task' 'Task *'
|     |-ImplicitCastExpr 0x56490e0cab30 <col:33> 'NotifierSignal *' <LValueToRValue>
|     | `-DeclRefExpr 0x56490e0caa38 <col:33> 'NotifierSignal *' lvalue ParmVar 0x56490e0c2c80 'signal' 'NotifierSignal *'
|     |-ImplicitCastExpr 0x56490e0cab48 <col:41> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56490e0caa58 <col:41> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56490e0c27d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56490e0caa78 <col:62> 'const String' lvalue ParmVar 0x56490e0c2cf8 'prefix' 'const String &'
|-CXXMethodDecl 0x56490e0c2fe8 <line:180:5, line:182:5> line:180:17 add_task_handlers 'void (Task *, const String &)' inline
| |-ParmVarDecl 0x56490e0c2ea0 <col:35, col:41> col:41 used task 'Task *'
| |-ParmVarDecl 0x56490e0c2f18 <col:47, col:77> col:61 used prefix 'const String &' cinit
| | `-ExprWithCleanups 0x56490e0ca420 <col:70, col:77> 'const String' lvalue
| |   `-MaterializeTemporaryExpr 0x56490e0ca408 <col:70, col:77> 'const String' lvalue
| |     `-ImplicitCastExpr 0x56490e0ca3f0 <col:70, col:77> 'const String' <NoOp>
| |       `-CXXBindTemporaryExpr 0x56490e0ca3d0 <col:70, col:77> 'String' (CXXTemporary 0x56490e0ca3d0)
| |         `-CXXTemporaryObjectExpr 0x56490e0ca398 <col:70, col:77> 'String' 'void ()'
| `-CompoundStmt 0x56490e0cad38 <col:80, line:182:5>
|   `-CXXMemberCallExpr 0x56490e0cacb0 <line:181:9, col:63> 'void'
|     |-MemberExpr 0x56490e0cac80 <col:9> '<bound member function type>' ->add_task_handlers 0x56490e0c2b38
|     | `-CXXThisExpr 0x56490e0cac70 <col:9> 'Element *' implicit this
|     |-ImplicitCastExpr 0x56490e0cacf0 <col:27> 'Task *' <LValueToRValue>
|     | `-DeclRefExpr 0x56490e0cabf0 <col:27> 'Task *' lvalue ParmVar 0x56490e0c2ea0 'task' 'Task *'
|     |-ImplicitCastExpr 0x56490e0cad08 <col:33> 'NotifierSignal *' <NullToPointer>
|     | `-IntegerLiteral 0x56490e0cac10 <col:33> 'int' 0
|     |-ImplicitCastExpr 0x56490e0cad20 <col:36> 'int' <IntegralCast>
|     | `-DeclRefExpr 0x56490e0cac30 <col:36> 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)' EnumConstant 0x56490e0c27d0 'TASKHANDLER_DEFAULT' 'Element::(anonymous enum at ../dummy_inc/click/element.hh:171:5)'
|     `-DeclRefExpr 0x56490e0cac50 <col:57> 'const String' lvalue ParmVar 0x56490e0c2f18 'prefix' 'const String &'
|-CXXMethodDecl 0x56490e0c32c8 <line:184:5, col:70> col:10 add_data_handlers 'void (const char *, int, uint8_t *)'
| |-ParmVarDecl 0x56490e0c30b0 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c3130 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c31a8 <col:57, col:66> col:66 data 'uint8_t *'
|-CXXMethodDecl 0x56490e0c3578 <line:185:5, col:67> col:10 add_data_handlers 'void (const char *, int, bool *)'
| |-ParmVarDecl 0x56490e0c3398 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c3418 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c3498 <col:57, col:63> col:63 data 'bool *'
|-CXXMethodDecl 0x56490e0c3868 <line:186:5, col:71> col:10 add_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56490e0c3648 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c36c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c3740 <col:57, col:67> col:67 data 'uint16_t *'
|-CXXMethodDecl 0x56490e0c3b18 <line:187:5, col:66> col:10 add_data_handlers 'void (const char *, int, int *)'
| |-ParmVarDecl 0x56490e0c3938 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c39b8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c3a38 <col:57, col:62> col:62 data 'int *'
|-CXXMethodDecl 0x56490e0c3dc8 <line:188:5, col:71> col:10 add_data_handlers 'void (const char *, int, unsigned int *)'
| |-ParmVarDecl 0x56490e0c3be8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c3c68 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c3ce8 <col:57, col:67> col:67 data 'unsigned int *'
|-CXXMethodDecl 0x56490e0c4078 <line:189:5, col:78> col:10 add_data_handlers 'void (const char *, int, atomic_uint32_t *)'
| |-ParmVarDecl 0x56490e0c3e98 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c3f18 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c3f90 <col:57, col:74> col:74 data 'atomic_uint32_t *'
|-CXXMethodDecl 0x56490e0c4328 <line:190:5, col:67> col:10 add_data_handlers 'void (const char *, int, long *)'
| |-ParmVarDecl 0x56490e0c4148 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c41c8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c4248 <col:57, col:63> col:63 data 'long *'
|-CXXMethodDecl 0x56490e0c45d8 <line:191:5, col:76> col:10 add_data_handlers 'void (const char *, int, unsigned long *)'
| |-ParmVarDecl 0x56490e0c43f8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c4478 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c44f8 <col:57, col:72> col:72 data 'unsigned long *'
|-CXXMethodDecl 0x56490e0c4888 <line:193:5, col:72> col:10 add_data_handlers 'void (const char *, int, long long *)'
| |-ParmVarDecl 0x56490e0c46a8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c4728 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c47a8 <col:57, col:68> col:68 data 'long long *'
|-CXXMethodDecl 0x56490e0c4b38 <line:194:5, col:81> col:10 add_data_handlers 'void (const char *, int, unsigned long long *)'
| |-ParmVarDecl 0x56490e0c4958 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c49d8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c4a58 <col:57, col:77> col:77 data 'unsigned long long *'
|-CXXMethodDecl 0x56490e0c4da0 <line:196:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint16_t *)'
| |-ParmVarDecl 0x56490e0c4c08 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56490e0c4c88 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56490e0c4d00 <col:67, col:77> col:77 data 'uint16_t *'
|-CXXMethodDecl 0x56490e0c5048 <line:197:5, col:81> col:10 add_net_order_data_handlers 'void (const char *, int, uint32_t *)'
| |-ParmVarDecl 0x56490e0c4e70 <col:38, col:50> col:50 name 'const char *'
| |-ParmVarDecl 0x56490e0c4ef0 <col:56, col:60> col:60 flags 'int'
| `-ParmVarDecl 0x56490e0c4f68 <col:67, col:77> col:77 data 'uint32_t *'
|-CXXMethodDecl 0x56490e0c52f8 <line:199:5, col:69> col:10 add_data_handlers 'void (const char *, int, double *)'
| |-ParmVarDecl 0x56490e0c5118 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c5198 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c5218 <col:57, col:65> col:65 data 'double *'
|-CXXMethodDecl 0x56490e0c55a8 <line:201:5, col:69> col:10 add_data_handlers 'void (const char *, int, String *)'
| |-ParmVarDecl 0x56490e0c53c8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c5448 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c54c0 <col:57, col:65> col:65 data 'String *'
|-CXXMethodDecl 0x56490e0c5858 <line:202:5, col:72> col:10 add_data_handlers 'void (const char *, int, IPAddress *)'
| |-ParmVarDecl 0x56490e0c5678 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c56f8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c5770 <col:57, col:68> col:68 data 'IPAddress *'
|-CXXMethodDecl 0x56490e0c5b08 <line:203:5, col:75> col:10 add_data_handlers 'void (const char *, int, EtherAddress *)'
| |-ParmVarDecl 0x56490e0c5928 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c59a8 <col:46, col:50> col:50 flags 'int'
| `-ParmVarDecl 0x56490e0c5a20 <col:57, col:71> col:71 data 'EtherAddress *'
|-CXXMethodDecl 0x56490e0c5e38 <line:204:5, col:98> col:10 add_data_handlers 'void (const char *, int, Timestamp *, bool)'
| |-ParmVarDecl 0x56490e0c5bd8 <col:28, col:40> col:40 name 'const char *'
| |-ParmVarDecl 0x56490e0c5c58 <col:46, col:50> col:50 flags 'int'
| |-ParmVarDecl 0x56490e0c5cd0 <col:57, col:68> col:68 data 'Timestamp *'
| `-ParmVarDecl 0x56490e0c5d48 <col:74, col:93> col:79 is_interval 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56490e0ca438 <col:93> 'bool' false
|-CXXMethodDecl 0x56490e0c6020 <line:206:5, col:58> col:19 read_positional_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56490e0c5f08 <col:43, col:50> col:51 'Element *'
| `-ParmVarDecl 0x56490e0c5f88 <col:53, col:57> col:58 'void *'
|-CXXMethodDecl 0x56490e0c61f8 <line:207:5, col:55> col:19 read_keyword_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56490e0c60e0 <col:40, col:47> col:48 'Element *'
| `-ParmVarDecl 0x56490e0c6160 <col:50, col:54> col:55 'void *'
|-CXXMethodDecl 0x56490e0c64d8 <line:208:5, col:92> col:16 reconfigure_positional_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56490e0c62b8 <col:47, col:59> col:60 'const String &'
| |-ParmVarDecl 0x56490e0c6330 <col:62, col:69> col:70 'Element *'
| |-ParmVarDecl 0x56490e0c63b0 <col:72, col:76> col:77 'void *'
| `-ParmVarDecl 0x56490e0c6428 <col:79, col:91> col:92 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0c67c8 <line:209:5, col:89> col:16 reconfigure_keyword_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56490e0c65a8 <col:44, col:56> col:57 'const String &'
| |-ParmVarDecl 0x56490e0c6620 <col:59, col:66> col:67 'Element *'
| |-ParmVarDecl 0x56490e0c66a0 <col:69, col:73> col:74 'void *'
| `-ParmVarDecl 0x56490e0c6718 <col:76, col:88> col:89 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0c6a00 <line:211:5, col:50> col:17 llrpc 'int (unsigned int, void *)' virtual
| |-ParmVarDecl 0x56490e0c68a0 <col:23, col:32> col:32 command 'unsigned int'
| `-ParmVarDecl 0x56490e0c6920 <col:41, col:47> col:47 arg 'void *'
|-CXXMethodDecl 0x56490e0c6be8 <line:212:5, col:48> col:9 local_llrpc 'int (unsigned int, void *)'
| |-ParmVarDecl 0x56490e0c6ac8 <col:21, col:30> col:30 command 'unsigned int'
| `-ParmVarDecl 0x56490e0c6b48 <col:39, col:45> col:45 arg 'void *'
|-CXXRecordDecl 0x56490e0c6c98 prev 0x56490e0be518 <line:214:5, line:252:5> line:214:11 referenced class Port definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e0c6d90 <col:5, col:11> col:11 implicit referenced class Port
| |-AccessSpecDecl 0x56490e0c6e20 <col:18, col:24> col:18 public
| |-CXXMethodDecl 0x56490e0c6e98 <line:216:9, col:30> col:21 used active 'bool () const' inline
| |-CXXMethodDecl 0x56490e0c6f58 <line:217:9, col:35> col:25 element 'Element *() const' inline
| |-CXXMethodDecl 0x56490e0c7020 <line:218:9, col:27> col:20 port 'int () const' inline
| |-CXXMethodDecl 0x56490e0c7198 <line:220:9, col:65> col:49 used push 'void (Packet *) const'
| | |-ParmVarDecl 0x56490e0c70d0 <col:54, col:62> col:62 p 'Packet *'
| | |-NoInlineAttr 0x56490e0c7240 <col:24>
| | `-OptimizeNoneAttr 0x56490e0c7298 <col:34>
| |-CXXMethodDecl 0x56490e0c72e0 <line:221:9, col:31> col:24 used pull 'Packet *() const' inline
| |-CXXMethodDecl 0x56490e0c7598 <line:227:9, col:63> col:21 used assign 'void (bool, Element *, int)' inline
| | |-ParmVarDecl 0x56490e0c7390 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56490e0c7408 <col:43, col:52> col:52 e 'Element *'
| | `-ParmVarDecl 0x56490e0c7488 <col:55, col:59> col:59 port 'int'
| |-AccessSpecDecl 0x56490e0c7650 <line:229:7, col:14> col:7 private
| |-FieldDecl 0x56490e0c7688 <line:231:9, col:18> col:18 referenced _e 'Element *'
| |-FieldDecl 0x56490e0c76f0 <line:232:9, col:13> col:13 referenced _port 'int'
| |-CXXConstructorDecl 0x56490e0c7778 <line:247:9, col:21> col:16 Port 'void ()' inline
| |-CXXMethodDecl 0x56490e0c7ab0 <line:248:9, col:79> col:21 assign 'void (bool, Element *, Element *, int)' inline
| | |-ParmVarDecl 0x56490e0c7830 <col:28, col:33> col:33 isoutput 'bool'
| | |-ParmVarDecl 0x56490e0c78a8 <col:43, col:52> col:52 owner 'Element *'
| | |-ParmVarDecl 0x56490e0c7920 <col:59, col:68> col:68 e 'Element *'
| | `-ParmVarDecl 0x56490e0c79a0 <col:71, col:75> col:75 port 'int'
| |-FriendDecl 0x56490e0c7bc0 <line:250:9, col:22> col:16 'class Element':'Element'
| |-CXXConstructorDecl 0x56490e0ce4a8 <line:214:11> col:11 implicit constexpr Port 'void (const Element::Port &)' inline default trivial noexcept-unevaluated 0x56490e0ce4a8
| | `-ParmVarDecl 0x56490e0ce5b8 <col:11> col:11 'const Element::Port &'
| |-CXXConstructorDecl 0x56490e0ce658 <col:11> col:11 implicit constexpr Port 'void (Element::Port &&)' inline default trivial noexcept-unevaluated 0x56490e0ce658
| | `-ParmVarDecl 0x56490e0ce768 <col:11> col:11 'Element::Port &&'
| `-CXXDestructorDecl 0x56490e194be0 <col:11> col:11 implicit ~Port 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56490e0c7c38 <line:256:5, col:49> col:12 id 'String () const'
| `-DeprecatedAttr 0x56490e0c7cd8 <col:38> "" ""
|-CXXMethodDecl 0x56490e0c7d68 <line:257:5, col:55> col:12 landmark 'String () const'
| `-DeprecatedAttr 0x56490e0c7e08 <col:44> "" ""
|-AccessSpecDecl 0x56490e0c7e78 <line:260:3, col:10> col:3 private
|-EnumDecl 0x56490e0c7ea0 <line:262:5, col:29> col:5
| `-EnumConstantDecl 0x56490e0c7fa0 <col:12, col:27> col:12 referenced INLINE_PORTS 'Element::(anonymous enum at ../dummy_inc/click/element.hh:262:5)'
|   `-ImplicitCastExpr 0x56490e0c7ff0 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e0c7f80 <col:27> 'int' Int: 4
|       `-IntegerLiteral 0x56490e0c7f60 <col:27> 'int' 4
|-FieldDecl 0x56490e0c80a8 <line:264:5, col:19> col:11 referenced _ports 'Element::Port *[2]'
|-FieldDecl 0x56490e0c8258 <line:265:5, col:36> col:10 _inline_ports 'Element::Port [4]'
|-FieldDecl 0x56490e0c8310 <line:267:5, col:18> col:9 referenced _nports 'int [2]'
|-FieldDecl 0x56490e0c8370 <line:269:5, col:13> col:13 referenced _router 'Router *'
|-FieldDecl 0x56490e0c83d8 <line:270:5, col:9> col:9 referenced _eindex 'int'
|-CXXConstructorDecl 0x56490e0c8528 <line:292:5, col:28> col:5 Element 'void (const Element &)'
| `-ParmVarDecl 0x56490e0c8468 <col:13, col:27> col:28 'const Element &'
|-CXXMethodDecl 0x56490e0c86d8 <line:293:5, col:39> col:14 operator= 'Element &(const Element &)'
| `-ParmVarDecl 0x56490e0c85e8 <col:24, col:38> col:39 'const Element &'
|-CXXMethodDecl 0x56490e0c88b8 <line:296:5, col:28> col:9 set_nports 'int (int, int)'
| |-ParmVarDecl 0x56490e0c8798 <col:20> col:23 'int'
| `-ParmVarDecl 0x56490e0c8818 <col:25> col:28 'int'
|-CXXMethodDecl 0x56490e0c8b60 <line:297:5, col:47> col:9 notify_nports 'int (int, int, ErrorHandler *)'
| |-ParmVarDecl 0x56490e0c8980 <col:23> col:26 'int'
| |-ParmVarDecl 0x56490e0c8a00 <col:28> col:31 'int'
| `-ParmVarDecl 0x56490e0c8a78 <col:33, col:46> col:47 'ErrorHandler *'
|-EnumDecl 0x56490e0c8c18 <line:298:5, col:47> col:10 Processing
| |-EnumConstantDecl 0x56490e0c8ce0 <col:23> col:23 VAGNOSTIC 'Element::Processing'
| |-EnumConstantDecl 0x56490e0c8d30 <col:34> col:34 VPUSH 'Element::Processing'
| `-EnumConstantDecl 0x56490e0c8d80 <col:41> col:41 VPULL 'Element::Processing'
|-CXXMethodDecl 0x56490e0c8f60 <line:299:5, col:71> col:16 next_processing_code 'int (const char *&, ErrorHandler *)' static
| |-ParmVarDecl 0x56490e0c8e10 <col:37, col:50> col:50 p 'const char *&'
| `-ParmVarDecl 0x56490e0c8e88 <col:53, col:67> col:67 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0c9208 <line:300:5, col:80> col:10 processing_vector 'void (int *, int *, ErrorHandler *) const'
| |-ParmVarDecl 0x56490e0c9028 <col:28, col:33> col:33 input_codes 'int *'
| |-ParmVarDecl 0x56490e0c90a8 <col:46, col:51> col:51 output_codes 'int *'
| `-ParmVarDecl 0x56490e0c9120 <col:65, col:77> col:78 'ErrorHandler *'
|-CXXMethodDecl 0x56490e0c9428 <line:302:5, col:74> col:10 initialize_ports 'void (const int *, const int *)'
| |-ParmVarDecl 0x56490e0c92d8 <col:27, col:38> col:38 input_codes 'const int *'
| `-ParmVarDecl 0x56490e0c9358 <col:51, col:62> col:62 output_codes 'const int *'
|-CXXMethodDecl 0x56490e0c9760 <line:303:5, col:60> col:9 connect_port 'int (bool, int, Element *, int)'
| |-ParmVarDecl 0x56490e0c94e8 <col:22, col:27> col:27 isoutput 'bool'
| |-ParmVarDecl 0x56490e0c9568 <col:37, col:41> col:41 port 'int'
| |-ParmVarDecl 0x56490e0c95e0 <col:47, col:54> col:55 'Element *'
| `-ParmVarDecl 0x56490e0c9660 <col:57> col:60 'int'
|-CXXMethodDecl 0x56490e0c9948 <line:305:5, col:68> col:19 read_handlers_handler 'String (Element *, void *)' static
| |-ParmVarDecl 0x56490e0c9830 <col:41, col:50> col:50 e 'Element *'
| `-ParmVarDecl 0x56490e0c98b0 <col:53, col:59> col:59 user_data 'void *'
|-CXXMethodDecl 0x56490e0c9a98 <line:306:5, col:51> col:10 add_default_handlers 'void (bool)'
| `-ParmVarDecl 0x56490e0c9a08 <col:31, col:36> col:36 writable_config 'bool'
|-CXXMethodDecl 0x56490e0c9e18 <line:307:5, col:100> col:17 add_data_handlers 'void (const char *, int, HandlerCallback, void *)' inline
| |-ParmVarDecl 0x56490e0c9b58 <col:35, col:47> col:47 name 'const char *'
| |-ParmVarDecl 0x56490e0c9bd8 <col:53, col:57> col:57 flags 'int'
| |-ParmVarDecl 0x56490e0c9c50 <col:64, col:80> col:80 callback 'HandlerCallback':'int (*)(int, String &, Element *, const Handler *, ErrorHandler *)'
| `-ParmVarDecl 0x56490e0c9cd0 <col:90, col:96> col:96 data 'void *'
`-FriendDecl 0x56490e0c9ef8 <line:309:5, col:18> col:12 'class Router':'Router'

Layout: <CGRecordLayout
  LLVMType:%class.Element = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Element.base = type <{ i32 (...)**, [2 x %"class.Element::Port"*], [4 x %"class.Element::Port"], [2 x i32], %class.Router*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class Storage
         0 |   Storage::index_type _capacity
         4 |   volatile Storage::index_type _head
         8 |   volatile Storage::index_type _tail
           | [sizeof=12, dsize=12, align=4,
           |  nvsize=12, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e186538 <../dummy_inc/click/standard/storage.hh:9:1, line:54:1> line:9:7 referenced class Storage definition
|-DefinitionData pass_in_registers trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e186658 <col:1, col:7> col:7 implicit referenced class Storage
|-AccessSpecDecl 0x56490e1866e8 <col:17, col:23> col:17 public
|-TypedefDecl 0x56490e186720 <line:11:5, col:22> col:22 referenced index_type 'uint32_t':'unsigned int'
| `-TypedefType 0x56490dbe8190 'uint32_t' sugar
|   |-Typedef 0x56490daf8408 'uint32_t'
|   `-TypedefType 0x56490dad1440 '__uint32_t' sugar
|     |-Typedef 0x56490dad1038 '__uint32_t'
|     `-BuiltinType 0x56490da8f410 'unsigned int'
|-TypedefDecl 0x56490e186788 <line:12:5, col:21> col:21 referenced signed_index_type 'int32_t':'int'
| `-TypedefType 0x56490dbe8270 'int32_t' sugar
|   |-Typedef 0x56490daf8268 'int32_t'
|   `-TypedefType 0x56490dad13b0 '__int32_t' sugar
|     |-Typedef 0x56490dad0fc8 '__int32_t'
|     `-BuiltinType 0x56490da8f370 'int'
|-VarDecl 0x56490e186810 <line:13:5, col:59> col:29 referenced invalid_index 'const Storage::index_type':'const unsigned int' static cinit
| `-CStyleCastExpr 0x56490e1868d8 <col:45, col:59> 'Storage::index_type':'unsigned int' <NoOp>
|   `-ImplicitCastExpr 0x56490e1868c0 <col:58, col:59> 'Storage::index_type':'unsigned int' <IntegralCast> part_of_explicit_cast
|     `-UnaryOperator 0x56490e186898 <col:58, col:59> 'int' prefix '-'
|       `-IntegerLiteral 0x56490e186878 <col:59> 'int' 1
|-CXXConstructorDecl 0x56490e1869c0 <line:15:5, col:38> col:5 used Storage 'void ()'
| |-CXXCtorInitializer Field 0x56490e188210 '_head' 'volatile Storage::index_type':'volatile unsigned int'
| | `-ImplicitCastExpr 0x56490e188318 <col:23> 'volatile Storage::index_type':'volatile unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490e1882d8 <col:23> 'int' 0
| |-CXXCtorInitializer Field 0x56490e188270 '_tail' 'volatile Storage::index_type':'volatile unsigned int'
| | `-ImplicitCastExpr 0x56490e188398 <col:33> 'volatile Storage::index_type':'volatile unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490e188358 <col:33> 'int' 0
| `-CompoundStmt 0x56490e1883e8 <col:36, col:38>
|-CXXConversionDecl 0x56490e186ac8 <line:17:5, col:52> col:5 operator bool 'bool () const'
| `-CompoundStmt 0x56490e1884d8 <col:27, col:52>
|   `-ReturnStmt 0x56490e1884c8 <col:29, col:45>
|     `-BinaryOperator 0x56490e1884a8 <col:36, col:45> 'bool' '!='
|       |-ImplicitCastExpr 0x56490e188478 <col:36> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x56490e188408 <col:36> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_head 0x56490e188210
|       |   `-CXXThisExpr 0x56490e1883f8 <col:36> 'const Storage *' implicit this
|       `-ImplicitCastExpr 0x56490e188490 <col:45> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x56490e188448 <col:45> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_tail 0x56490e188270
|           `-CXXThisExpr 0x56490e188438 <col:45> 'const Storage *' implicit this
|-CXXMethodDecl 0x56490e186b98 <line:18:5, col:49> col:10 empty 'bool () const'
| `-CompoundStmt 0x56490e1885d0 <col:24, col:49>
|   `-ReturnStmt 0x56490e1885c0 <col:26, col:42>
|     `-BinaryOperator 0x56490e1885a0 <col:33, col:42> 'bool' '=='
|       |-ImplicitCastExpr 0x56490e188570 <col:33> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       | `-MemberExpr 0x56490e188500 <col:33> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_head 0x56490e188210
|       |   `-CXXThisExpr 0x56490e1884f0 <col:33> 'const Storage *' implicit this
|       `-ImplicitCastExpr 0x56490e188588 <col:42> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x56490e188540 <col:42> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_tail 0x56490e188270
|           `-CXXThisExpr 0x56490e188530 <col:42> 'const Storage *' implicit this
|-CXXMethodDecl 0x56490e186c60 <line:19:5, col:16> col:9 size 'int () const'
|-CXXMethodDecl 0x56490e186ea0 <line:20:5, col:48> col:9 used size 'int (Storage::index_type, Storage::index_type) const'
| |-ParmVarDecl 0x56490e186d10 <col:14, col:25> col:25 head 'Storage::index_type':'unsigned int'
| `-ParmVarDecl 0x56490e186d88 <col:31, col:42> col:42 tail 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x56490e186f78 <line:21:5, col:46> col:9 capacity 'int () const'
| `-CompoundStmt 0x56490e188668 <col:26, col:46>
|   `-ReturnStmt 0x56490e188658 <col:28, col:35>
|     `-ImplicitCastExpr 0x56490e188640 <col:35> 'int' <IntegralCast>
|       `-ImplicitCastExpr 0x56490e188628 <col:35> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         `-MemberExpr 0x56490e1885f8 <col:35> 'const Storage::index_type':'const unsigned int' lvalue ->_capacity 0x56490e188188
|           `-CXXThisExpr 0x56490e1885e8 <col:35> 'const Storage *' implicit this
|-CXXMethodDecl 0x56490e187068 <line:23:5, col:45> col:16 head 'Storage::index_type () const'
| `-CompoundStmt 0x56490e1886e8 <col:29, col:45>
|   `-ReturnStmt 0x56490e1886d8 <col:31, col:38>
|     `-ImplicitCastExpr 0x56490e1886c0 <col:38> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56490e188690 <col:38> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_head 0x56490e188210
|         `-CXXThisExpr 0x56490e188680 <col:38> 'const Storage *' implicit this
|-CXXMethodDecl 0x56490e187128 <line:24:5, col:45> col:16 tail 'Storage::index_type () const'
| `-CompoundStmt 0x56490e188768 <col:29, col:45>
|   `-ReturnStmt 0x56490e188758 <col:31, col:38>
|     `-ImplicitCastExpr 0x56490e188740 <col:38> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56490e188710 <col:38> 'const volatile Storage::index_type':'const volatile unsigned int' lvalue ->_tail 0x56490e188270
|         `-CXXThisExpr 0x56490e188700 <col:38> 'const Storage *' implicit this
|-CXXMethodDecl 0x56490e1872c8 <line:26:5, line:28:5> line:26:16 used next_i 'Storage::index_type (Storage::index_type) const'
| |-ParmVarDecl 0x56490e1871d8 <col:23, col:34> col:34 used i 'Storage::index_type':'unsigned int'
| `-CompoundStmt 0x56490e188958 <col:43, line:28:5>
|   `-ReturnStmt 0x56490e188948 <line:27:2, col:32>
|     `-ParenExpr 0x56490e188928 <col:9, col:32> 'unsigned int'
|       `-ConditionalOperator 0x56490e1888f8 <col:10, col:31> 'unsigned int'
|         |-BinaryOperator 0x56490e188810 <col:10, col:13> 'bool' '!='
|         | |-ImplicitCastExpr 0x56490e1887e0 <col:10> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56490e188780 <col:10> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x56490e1871d8 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x56490e1887f8 <col:13> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         |   `-MemberExpr 0x56490e1887b0 <col:13> 'const Storage::index_type':'const unsigned int' lvalue ->_capacity 0x56490e188188
|         |     `-CXXThisExpr 0x56490e1887a0 <col:13> 'const Storage *' implicit this
|         |-BinaryOperator 0x56490e1888a0 <col:25, col:27> 'unsigned int' '+'
|         | |-ImplicitCastExpr 0x56490e188870 <col:25> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56490e188830 <col:25> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x56490e1871d8 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x56490e188888 <col:27> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x56490e188850 <col:27> 'int' 1
|         `-ImplicitCastExpr 0x56490e1888e0 <col:31> 'unsigned int' <IntegralCast>
|           `-IntegerLiteral 0x56490e1888c0 <col:31> 'int' 0
|-CXXMethodDecl 0x56490e187410 <line:29:5, line:31:5> line:29:16 prev_i 'Storage::index_type (Storage::index_type) const'
| |-ParmVarDecl 0x56490e187380 <col:23, col:34> col:34 used i 'Storage::index_type':'unsigned int'
| `-CompoundStmt 0x56490e188b48 <col:43, line:31:5>
|   `-ReturnStmt 0x56490e188b38 <line:30:2, col:32>
|     `-ParenExpr 0x56490e188b18 <col:9, col:32> 'unsigned int'
|       `-ConditionalOperator 0x56490e188ae8 <col:10, col:23> 'unsigned int'
|         |-BinaryOperator 0x56490e1889e0 <col:10, col:13> 'bool' '!='
|         | |-ImplicitCastExpr 0x56490e1889b0 <col:10> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56490e188970 <col:10> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x56490e187380 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x56490e1889c8 <col:13> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x56490e188990 <col:13> 'int' 0
|         |-BinaryOperator 0x56490e188a70 <col:17, col:19> 'unsigned int' '-'
|         | |-ImplicitCastExpr 0x56490e188a40 <col:17> 'Storage::index_type':'unsigned int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56490e188a00 <col:17> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x56490e187380 'i' 'Storage::index_type':'unsigned int'
|         | `-ImplicitCastExpr 0x56490e188a58 <col:19> 'unsigned int' <IntegralCast>
|         |   `-IntegerLiteral 0x56490e188a20 <col:19> 'int' 1
|         `-ImplicitCastExpr 0x56490e188ad0 <col:23> 'Storage::index_type':'unsigned int' <LValueToRValue>
|           `-MemberExpr 0x56490e188aa0 <col:23> 'const Storage::index_type':'const unsigned int' lvalue ->_capacity 0x56490e188188
|             `-CXXThisExpr 0x56490e188a90 <col:23> 'const Storage *' implicit this
|-CXXMethodDecl 0x56490e187588 <line:34:5, col:54> col:10 set_capacity 'void (Storage::index_type)'
| |-ParmVarDecl 0x56490e1874c8 <col:23, col:34> col:34 used c 'Storage::index_type':'unsigned int'
| `-CompoundStmt 0x56490e188bf8 <col:37, col:54>
|   `-BinaryOperator 0x56490e188bd8 <col:39, col:51> 'Storage::index_type':'unsigned int' lvalue '='
|     |-MemberExpr 0x56490e188b70 <col:39> 'Storage::index_type':'unsigned int' lvalue ->_capacity 0x56490e188188
|     | `-CXXThisExpr 0x56490e188b60 <col:39> 'Storage *' implicit this
|     `-ImplicitCastExpr 0x56490e188bc0 <col:51> 'Storage::index_type':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56490e188ba0 <col:51> 'Storage::index_type':'unsigned int' lvalue ParmVar 0x56490e1874c8 'c' 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x56490e1876d0 <line:35:5, col:38> col:17 set_head 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x56490e187640 <col:26, col:37> col:37 h 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x56490e187818 <line:36:5, col:38> col:17 set_tail 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x56490e187788 <col:26, col:37> col:37 t 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x56490e187960 <line:37:5, col:46> col:17 set_head_release 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x56490e1878d0 <col:34, col:45> col:45 h 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x56490e187aa8 <line:38:5, col:46> col:17 set_tail_acquire 'void (Storage::index_type)' inline
| `-ParmVarDecl 0x56490e187a18 <col:34, col:45> col:45 t 'Storage::index_type':'unsigned int'
|-CXXMethodDecl 0x56490e187b98 <line:39:5, col:43> col:23 reserve_tail_atomic 'Storage::index_type ()' inline
|-CXXMethodDecl 0x56490e187e38 <line:41:5, line:43:35> line:41:24 packet_memory_barrier 'void (Packet *volatile &, volatile Storage::index_type &)' static inline
| |-ParmVarDecl 0x56490e187c80 <col:46, col:64> col:64 packet 'Packet *volatile &'
| |-ParmVarDecl 0x56490e187d28 <line:42:46, col:67> col:67 index 'volatile Storage::index_type &'
| `-DeprecatedAttr 0x56490e187ee8 <line:43:24> "" ""
|-CXXMethodDecl 0x56490e188038 <line:44:5, line:45:35> line:44:17 packet_memory_barrier 'void (Packet *volatile &)' inline
| |-ParmVarDecl 0x56490e187f70 <col:39, col:57> col:57 packet 'Packet *volatile &'
| `-DeprecatedAttr 0x56490e1880e0 <line:45:24> "" ""
|-AccessSpecDecl 0x56490e188150 <line:47:3, col:12> col:3 protected
|-FieldDecl 0x56490e188188 <line:48:5, col:16> col:16 referenced _capacity 'Storage::index_type':'unsigned int'
|-AccessSpecDecl 0x56490e1881d8 <line:50:3, col:10> col:3 private
|-FieldDecl 0x56490e188210 <line:51:5, col:25> col:25 referenced _head 'volatile Storage::index_type':'volatile unsigned int'
|-FieldDecl 0x56490e188270 <line:52:5, col:25> col:25 referenced _tail 'volatile Storage::index_type':'volatile unsigned int'
|-CXXDestructorDecl 0x56490e191300 <line:9:7> col:7 implicit ~Storage 'void ()' inline default trivial noexcept-unevaluated 0x56490e191300
|-CXXConstructorDecl 0x56490e194688 <col:7> col:7 implicit constexpr Storage 'void (const Storage &)' inline default trivial noexcept-unevaluated 0x56490e194688
| `-ParmVarDecl 0x56490e194798 <col:7> col:7 'const Storage &'
`-CXXConstructorDecl 0x56490e194838 <col:7> col:7 implicit constexpr Storage 'void (Storage &&)' inline default trivial noexcept-unevaluated 0x56490e194838
  `-ParmVarDecl 0x56490e194948 <col:7> col:7 'Storage &&'

Layout: <CGRecordLayout
  LLVMType:%class.Storage = type { i32, i32, i32 }
  NonVirtualBaseLLVMType:%class.Storage = type { i32, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct TaskLink
         0 |   struct TaskLink * _prev
         8 |   struct TaskLink * _next
        16 |   unsigned int _pass
           | [sizeof=24, dsize=20, align=8,
           |  nvsize=20, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9)
         0 |   int16_t home_thread_id
         2 |   uint8_t is_scheduled
         3 |   uint8_t is_strong_unscheduled
           | [sizeof=4, dsize=4, align=2,
           |  nvsize=4, nvalign=2]

*** Dumping AST Record Layout
         0 | union Task::Status
         0 |   struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
         0 |     int16_t home_thread_id
         2 |     uint8_t is_scheduled
         3 |     uint8_t is_strong_unscheduled
         0 |   uint32_t status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Task::Pending
         0 |   class Task * t
         0 |   uintptr_t x
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Task
         0 |   struct TaskLink (base)
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        20 |   unsigned int _stride
        24 |   int _tickets
        28 |   union Task::Status _status
        28 |     struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
        28 |       int16_t home_thread_id
        30 |       uint8_t is_scheduled
        31 |       uint8_t is_strong_unscheduled
        28 |     uint32_t status
        32 |   TaskCallback _hook
        40 |   void * _thunk
        48 |   class RouterThread * _thread
        56 |   class Element * _owner
        64 |   union Task::Pending _pending_nextptr
        64 |     class Task * t
        64 |     uintptr_t x
           | [sizeof=72, dsize=72, align=8,
           |  nvsize=72, nvalign=8]

*** Dumping AST Record Layout
         0 | union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5)
         0 |   TimerCallback callback
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class Timer
         0 |   int _schedpos1
         8 |   class Timestamp _expiry_s
         8 |     union Timestamp::rep_t _t
         8 |       int64_t x
        16 |   union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
        16 |     TimerCallback callback
        24 |   void * _thunk
        32 |   class Element * _owner
        40 |   class RouterThread * _thread
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | union NotifierSignal::vmvalue
         0 |   class atomic_uint32_t * v1
         0 |   struct NotifierSignal::vmpair * vm
           | [sizeof=8, dsize=8, align=8,
           |  nvsize=8, nvalign=8]

*** Dumping AST Record Layout
         0 | class NotifierSignal
         0 |   union NotifierSignal::vmvalue _v
         0 |     class atomic_uint32_t * v1
         0 |     struct NotifierSignal::vmpair * vm
         8 |   uint32_t _mask
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping AST Record Layout
         0 | class LinkUnqueue
         0 |   class Element (primary base)
         0 |     (Element vtable pointer)
         8 |     class Element::Port *[2] _ports
        24 |     class Element::Port [4] _inline_ports
        88 |     int [2] _nports
        96 |     class Router * _router
       104 |     int _eindex
       108 |   class Storage (base)
       108 |     Storage::index_type _capacity
       112 |     volatile Storage::index_type _head
       116 |     volatile Storage::index_type _tail
       120 |   class Packet * _qhead
       128 |   class Packet * _qtail
       136 |   class Timestamp _latency
       136 |     union Timestamp::rep_t _t
       136 |       int64_t x
       144 |   _Bool _back_to_back
       148 |   uint32_t _bandwidth
       152 |   class Task _task
       152 |     struct TaskLink (base)
       152 |       struct TaskLink * _prev
       160 |       struct TaskLink * _next
       168 |       unsigned int _pass
       172 |     unsigned int _stride
       176 |     int _tickets
       180 |     union Task::Status _status
       180 |       struct Task::Status::(anonymous at ../dummy_inc/click/task.hh:315:9) 
       180 |         int16_t home_thread_id
       182 |         uint8_t is_scheduled
       183 |         uint8_t is_strong_unscheduled
       180 |       uint32_t status
       184 |     TaskCallback _hook
       192 |     void * _thunk
       200 |     class RouterThread * _thread
       208 |     class Element * _owner
       216 |     union Task::Pending _pending_nextptr
       216 |       class Task * t
       216 |       uintptr_t x
       224 |   class Timer _timer
       224 |     int _schedpos1
       232 |     class Timestamp _expiry_s
       232 |       union Timestamp::rep_t _t
       232 |         int64_t x
       240 |     union Timer::(anonymous at ../dummy_inc/click/timer.hh:343:5) _hook
       240 |       TimerCallback callback
       248 |     void * _thunk
       256 |     class Element * _owner
       264 |     class RouterThread * _thread
       272 |   class NotifierSignal _signal
       272 |     union NotifierSignal::vmvalue _v
       272 |       class atomic_uint32_t * v1
       272 |       struct NotifierSignal::vmpair * vm
       280 |     uint32_t _mask
           | [sizeof=288, dsize=288, align=8,
           |  nvsize=288, nvalign=8]

*** Dumping AST Record Layout
         0 | class atomic_uint32_t
         0 |   uint32_t _val
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping AST Record Layout
         0 | union Packet::Anno
         0 |   char [48] c
         0 |   uint8_t [48] u8
         0 |   uint16_t [24] u16
         0 |   uint32_t [12] u32
         0 |   uint64_t [6] u64
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Packet::AllAnno
         0 |   union Packet::Anno cb
         0 |     char [48] c
         0 |     uint8_t [48] u8
         0 |     uint16_t [24] u16
         0 |     uint32_t [12] u32
         0 |     uint64_t [6] u64
        48 |   unsigned char * mac
        56 |   unsigned char * nh
        64 |   unsigned char * h
        72 |   enum Packet::PacketType pkt_type
        76 |   char [8] timestamp
        88 |   class Packet * next
        96 |   class Packet * prev
           | [sizeof=104, dsize=104, align=8,
           |  nvsize=104, nvalign=8]

*** Dumping AST Record Layout
         0 | class Packet
         0 |   class atomic_uint32_t _use_count
         0 |     uint32_t _val
         8 |   class Packet * _data_packet
        16 |   unsigned char * _head
        24 |   unsigned char * _data
        32 |   unsigned char * _tail
        40 |   unsigned char * _end
        48 |   struct Packet::AllAnno _aa
        48 |     union Packet::Anno cb
        48 |       char [48] c
        48 |       uint8_t [48] u8
        48 |       uint16_t [24] u16
        48 |       uint32_t [12] u32
        48 |       uint64_t [6] u64
        96 |     unsigned char * mac
       104 |     unsigned char * nh
       112 |     unsigned char * h
       120 |     enum Packet::PacketType pkt_type
       124 |     char [8] timestamp
       136 |     class Packet * next
       144 |     class Packet * prev
       152 |   Packet::buffer_destructor_type _destructor
       160 |   void * _destructor_argument
           | [sizeof=168, dsize=168, align=8,
           |  nvsize=168, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dcaf7c8 <../dummy_inc/click/atomic.hh:52:1, line:94:1> line:52:7 referenced class atomic_uint32_t definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dcaf8e8 <col:1, col:7> col:7 implicit referenced class atomic_uint32_t
|-AccessSpecDecl 0x56490dcaf978 <col:25, col:31> col:25 public
|-CXXMethodDecl 0x56490dcafa48 <line:57:5, col:29> col:21 used value 'uint32_t () const' inline
|-CXXConversionDecl 0x56490dcafb30 <line:58:5, col:32> col:12 used operator unsigned int 'uint32_t () const' inline
|-CXXMethodDecl 0x56490dcb09e8 <line:60:5, col:49> col:29 used operator= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56490dcb0890 <col:39, col:48> col:48 x 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb0b98 <line:62:5, col:53> col:29 operator+= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56490dcb0aa0 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56490dcb0ce0 <line:63:5, col:53> col:29 operator-= 'atomic_uint32_t &(int32_t)' inline
| `-ParmVarDecl 0x56490dcb0c50 <col:40, col:48> col:48 delta 'int32_t':'int'
|-CXXMethodDecl 0x56490dcb0e28 <line:64:5, col:53> col:29 operator|= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56490dcb0d98 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb0f70 <line:65:5, col:53> col:29 operator&= 'atomic_uint32_t &(uint32_t)' inline
| `-ParmVarDecl 0x56490dcb0ee0 <col:40, col:49> col:49 mask 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb1038 <line:67:5, col:28> col:17 used operator++ 'void ()' inline
|-CXXMethodDecl 0x56490dcb11b8 <line:68:5, col:31> col:17 operator++ 'void (int)' inline
| `-ParmVarDecl 0x56490dcb10f0 <col:28> col:31 'int'
|-CXXMethodDecl 0x56490dcb1280 <line:69:5, col:28> col:17 used operator-- 'void ()' inline
|-CXXMethodDecl 0x56490dcb13c8 <line:70:5, col:31> col:17 operator-- 'void (int)' inline
| `-ParmVarDecl 0x56490dcb1338 <col:28> col:31 'int'
|-CXXMethodDecl 0x56490dcb1548 <line:72:5, col:42> col:21 swap 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56490dcb1480 <col:26, col:35> col:35 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb1690 <line:73:5, col:49> col:21 fetch_and_add 'uint32_t (uint32_t)' inline
| `-ParmVarDecl 0x56490dcb1600 <col:35, col:44> col:44 delta 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb1758 <line:74:5, col:30> col:17 dec_and_test 'bool ()' inline
|-CXXMethodDecl 0x56490dcb1998 <line:75:5, col:69> col:21 used compare_swap 'uint32_t (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56490dcb1808 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56490dcb1880 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb1be8 <line:76:5, col:97> col:17 compare_and_swap 'bool (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56490dcb1a58 <col:34, col:43> col:43 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56490dcb1ad0 <col:53, col:62> col:62 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490dcb1c98 <col:86> "" ""
|-CXXMethodDecl 0x56490dcb1f08 <line:78:5, col:71> col:28 used swap 'uint32_t (volatile uint32_t &, uint32_t)' static inline
| |-ParmVarDecl 0x56490dcb1d78 <col:33, col:52> col:52 x 'volatile uint32_t &'
| `-ParmVarDecl 0x56490dcb1df0 <col:55, col:64> col:64 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb20b8 <line:79:5, col:48> col:24 used inc 'void (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56490dcb1fc8 <col:28, col:47> col:47 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56490dcb2268 <line:80:5, col:57> col:24 used dec_and_test 'bool (volatile uint32_t &)' static inline
| `-ParmVarDecl 0x56490dcb2170 <col:37, col:56> col:56 x 'volatile uint32_t &'
|-CXXMethodDecl 0x56490dcb2538 <line:81:5, col:98> col:28 used compare_swap 'uint32_t (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56490dcb2320 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56490dcb2398 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56490dcb2410 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb28a0 <line:82:5, col:126> col:24 compare_and_swap 'bool (volatile uint32_t &, uint32_t, uint32_t)' static inline
| |-ParmVarDecl 0x56490dcb2600 <col:41, col:60> col:60 x 'volatile uint32_t &'
| |-ParmVarDecl 0x56490dcb2678 <col:63, col:72> col:72 expected 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56490dcb26f0 <col:82, col:91> col:91 desired 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490dcb2958 <col:115> "" ""
|-AccessSpecDecl 0x56490dcb29c8 <line:84:3, col:10> col:3 private
|-FieldDecl 0x56490dcb2a00 <line:91:5, col:14> col:14 referenced _val 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dcb2ea8 <line:52:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56490dcb2ea8
| `-ParmVarDecl 0x56490dcb2fb8 <col:7> col:7 'const atomic_uint32_t &'
|-CXXMethodDecl 0x56490dcb3058 <col:7> col:7 implicit constexpr operator= 'atomic_uint32_t &(atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56490dcb3058
| `-ParmVarDecl 0x56490dcb3168 <col:7> col:7 'atomic_uint32_t &&'
|-CXXConstructorDecl 0x56490dcfa878 <col:7> col:7 implicit used atomic_uint32_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490e08de10 <col:7>
|-CXXConstructorDecl 0x56490dcfa950 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (const atomic_uint32_t &)' inline default trivial noexcept-unevaluated 0x56490dcfa950
| `-ParmVarDecl 0x56490dcfaa68 <col:7> col:7 'const atomic_uint32_t &'
|-CXXConstructorDecl 0x56490dcfaad8 <col:7> col:7 implicit constexpr atomic_uint32_t 'void (atomic_uint32_t &&)' inline default trivial noexcept-unevaluated 0x56490dcfaad8
| `-ParmVarDecl 0x56490dcfabe8 <col:7> col:7 'atomic_uint32_t &&'
`-CXXDestructorDecl 0x56490e090780 <col:7> col:7 implicit ~atomic_uint32_t 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.atomic_uint32_t = type { i32 }
  NonVirtualBaseLLVMType:%class.atomic_uint32_t = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e074b38 prev 0x56490e06c260 <../dummy_inc/click/packet.hh:702:5, line:711:5> line:702:11 referenced union Anno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e074c30 <col:5, col:11> col:11 implicit union Anno
|-FieldDecl 0x56490e074d20 <line:703:2, col:18> col:7 referenced c 'char [48]'
|-FieldDecl 0x56490e074dd0 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
|-FieldDecl 0x56490e074f58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
|-FieldDecl 0x56490e0750d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
|-FieldDecl 0x56490e075258 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
|-CXXConstructorDecl 0x56490e08df78 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490e08e7e8 <col:11>
|-CXXDestructorDecl 0x56490e08e050 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56490e08e188 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56490e08e188
| `-ParmVarDecl 0x56490e08e298 <col:11> col:11 'const Packet::Anno &'
|-CXXConstructorDecl 0x56490e08e338 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56490e08e338
| `-ParmVarDecl 0x56490e08e448 <col:11> col:11 'Packet::Anno &&'
|-CXXMethodDecl 0x56490e091178 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490e091288 <col:11> col:11 'const Packet::Anno &'
| `-CompoundStmt 0x56490e091508 <col:11>
|   `-ReturnStmt 0x56490e0914f8 <col:11>
|     `-UnaryOperator 0x56490e0914e0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e0914d0 <col:11> 'Packet::Anno *' this
`-CXXMethodDecl 0x56490e0912f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56490e0912f8
  `-ParmVarDecl 0x56490e091408 <col:11> col:11 'Packet::Anno &&'

Layout: <CGRecordLayout
  LLVMType:%"union.Packet::Anno" = type { [6 x i64] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0752c0 <../dummy_inc/click/packet.hh:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0753d8 <col:5, col:12> col:12 implicit struct AllAnno
|-FieldDecl 0x56490e075478 <line:717:2, col:7> col:7 cb 'Packet::Anno'
|-FieldDecl 0x56490e0754e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
|-FieldDecl 0x56490e075548 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
|-FieldDecl 0x56490e0755b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
|-FieldDecl 0x56490e075610 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
|-FieldDecl 0x56490e0756d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
|-FieldDecl 0x56490e075730 <line:723:2, col:10> col:10 referenced next 'Packet *'
|-FieldDecl 0x56490e0859e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
|-CXXConstructorDecl 0x56490e08de88 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| |-CXXCtorInitializer Field 0x56490e075478 'cb' 'Packet::Anno'
| | `-CXXConstructExpr 0x56490e08e7f8 <col:12> 'Packet::Anno' 'void () noexcept'
| `-CompoundStmt 0x56490e08e850 <col:12>
|-CXXConstructorDecl 0x56490e08e4b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56490e08e4b8
| `-ParmVarDecl 0x56490e08e5c8 <col:12> col:12 'const Packet::AllAnno &'
|-CXXConstructorDecl 0x56490e08e668 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56490e08e668
| `-ParmVarDecl 0x56490e08e778 <col:12> col:12 'Packet::AllAnno &&'
`-CXXDestructorDecl 0x56490e090860 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  NonVirtualBaseLLVMType:%"struct.Packet::AllAnno" = type { %"union.Packet::Anno", i8*, i8*, i8*, i32, [8 x i8], %class.Packet*, %class.Packet* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0659b0 <../dummy_inc/click/packet.hh:35:1, line:775:1> line:35:7 referenced class Packet definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e065ac8 <col:1, col:7> col:7 implicit referenced class Packet
|-AccessSpecDecl 0x56490e065b58 <col:16, col:22> col:16 public
|-EnumDecl 0x56490e065b80 <line:41:5, line:50:5> line:41:5
| |-EnumConstantDecl 0x56490e065c80 <line:45:2, col:21> col:2 referenced default_headroom 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| | `-ImplicitCastExpr 0x56490e065d60 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e065c60 <col:21> 'int' Int: 28
| |     `-IntegerLiteral 0x56490e065c40 <col:21> 'int' 28
| `-EnumConstantDecl 0x56490e065d10 <line:48:2, col:22> col:2 referenced min_buffer_length 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
|   `-ImplicitCastExpr 0x56490e065d78 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e065cf0 <col:22> 'int' Int: 64
|       `-IntegerLiteral 0x56490e065cd0 <col:22> 'int' 64
|-CXXMethodDecl 0x56490e0660b8 <line:52:5, line:53:75> line:52:28 used make 'WritablePacket *(uint32_t, const void *, uint32_t, uint32_t)' static
| |-ParmVarDecl 0x56490e065da0 <col:33, col:42> col:42 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56490e065e20 <col:52, col:64> col:64 data 'const void *'
| |-ParmVarDecl 0x56490e065e98 <line:53:5, col:14> col:14 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56490e065f10 <col:22, col:31> col:31 tailroom 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56490e066178 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56490e066378 <line:54:5, col:109> col:35 make 'WritablePacket *(const void *, uint32_t)' static inline
| |-ParmVarDecl 0x56490e0661f0 <col:40, col:52> col:52 data 'const void *'
| |-ParmVarDecl 0x56490e066268 <col:58, col:67> col:67 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56490e066428 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56490e066588 <line:55:5, col:91> col:35 make 'WritablePacket *(uint32_t)' static inline
| |-ParmVarDecl 0x56490e066498 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56490e066630 <col:72> warn_unused_result ""
|-TypedefDecl 0x56490e066960 <line:65:5, col:89> col:20 referenced buffer_destructor_type 'void (*)(unsigned char *, size_t, void *)'
| `-PointerType 0x56490e0668f0 'void (*)(unsigned char *, size_t, void *)'
|   `-ParenType 0x56490e066890 'void (unsigned char *, size_t, void *)' sugar
|     `-FunctionProtoType 0x56490e066850 'void (unsigned char *, size_t, void *)' cdecl
|       |-BuiltinType 0x56490da8f2d0 'void'
|       |-PointerType 0x56490dce5d90 'unsigned char *'
|       | `-BuiltinType 0x56490da8f3d0 'unsigned char'
|       |-TypedefType 0x56490db37e80 'size_t' sugar
|       | |-Typedef 0x56490daffb20 'size_t'
|       | `-BuiltinType 0x56490da8f430 'unsigned long'
|       `-PointerType 0x56490da8fad0 'void *'
|         `-BuiltinType 0x56490da8f2d0 'void'
|-CXXMethodDecl 0x56490e066dd8 <line:66:5, line:68:131> line:66:28 make 'WritablePacket *(unsigned char *, uint32_t, Packet::buffer_destructor_type, void *, int, int)' static
| |-ParmVarDecl 0x56490e0669d0 <col:33, col:48> col:48 data 'unsigned char *'
| |-ParmVarDecl 0x56490e066a48 <col:54, col:63> col:63 length 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56490e066ae0 <line:67:5, col:28> col:28 buffer_destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| |-ParmVarDecl 0x56490e066b60 <line:68:33, col:58> col:39 argument 'void *' cinit
| | `-CStyleCastExpr 0x56490e086e70 <col:50, col:58> 'void *' <NoOp>
| |   `-ImplicitCastExpr 0x56490e086e58 <col:58> 'void *' <NullToPointer> part_of_explicit_cast
| |     `-IntegerLiteral 0x56490e086e20 <col:58> 'int' 0
| |-ParmVarDecl 0x56490e066be0 <col:61, col:76> col:65 headroom 'int' cinit
| | `-IntegerLiteral 0x56490e086e98 <col:76> 'int' 0
| |-ParmVarDecl 0x56490e066c60 <col:79, col:94> col:83 tailroom 'int' cinit
| | `-IntegerLiteral 0x56490e086eb8 <col:94> 'int' 0
| `-WarnUnusedResultAttr 0x56490e066ea8 <col:112> warn_unused_result ""
|-CXXMethodDecl 0x56490e066f28 <line:71:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56490e066fe8 <line:73:5, col:50> col:45 used kill 'void ()'
| |-NoInlineAttr 0x56490e067088 <col:20>
| `-OptimizeNoneAttr 0x56490e0670e0 <col:30>
|-CXXMethodDecl 0x56490e067158 <line:75:5, col:54> col:45 used shared 'bool () const'
| |-NoInlineAttr 0x56490e0671f8 <col:20>
| `-OptimizeNoneAttr 0x56490e067250 <col:30>
|-CXXMethodDecl 0x56490e0672c8 <line:76:5, col:55> col:13 clone 'Packet *()'
| `-WarnUnusedResultAttr 0x56490e067368 <col:36> warn_unused_result ""
|-CXXMethodDecl 0x56490e067418 <line:77:5, col:102> col:56 uniqueify 'WritablePacket *()'
| |-NoInlineAttr 0x56490e0674b8 <col:20>
| |-OptimizeNoneAttr 0x56490e067510 <col:30>
| `-WarnUnusedResultAttr 0x56490e067538 <col:83> warn_unused_result ""
|-CXXMethodDecl 0x56490e067590 <line:79:5, col:68> col:61 used data 'const unsigned char *() const'
| |-NoInlineAttr 0x56490e067630 <col:20>
| `-OptimizeNoneAttr 0x56490e067688 <col:30>
|-CXXMethodDecl 0x56490e0676d8 <line:80:5, col:72> col:61 used end_data 'const unsigned char *() const'
| |-NoInlineAttr 0x56490e067778 <col:20>
| `-OptimizeNoneAttr 0x56490e0677d0 <col:30>
|-CXXMethodDecl 0x56490e067818 <line:81:5, col:58> col:49 length 'uint32_t () const'
| |-NoInlineAttr 0x56490e0678b8 <col:20>
| `-OptimizeNoneAttr 0x56490e067910 <col:30>
|-CXXMethodDecl 0x56490e067958 <line:82:5, col:32> col:21 used headroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56490e067a18 <line:83:5, col:32> col:21 used tailroom 'uint32_t () const' inline
|-CXXMethodDecl 0x56490e067ae0 <line:84:5, col:42> col:33 used buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56490e067ba8 <line:85:5, col:46> col:33 used end_buffer 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56490e067c68 <line:86:5, col:37> col:21 used buffer_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56490e067d88 <line:97:5, line:99:5> line:97:28 buffer_destructor 'Packet::buffer_destructor_type () const'
| `-CompoundStmt 0x56490e086f80 <col:54, line:99:5>
|   `-ReturnStmt 0x56490e086f70 <line:98:2, col:9>
|     `-ImplicitCastExpr 0x56490e086f58 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-MemberExpr 0x56490e086f28 <col:9> 'const Packet::buffer_destructor_type':'void (*const)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56490e085d18
|         `-CXXThisExpr 0x56490e086f18 <col:9> 'const Packet *' implicit this
|-CXXMethodDecl 0x56490e067f28 <line:101:5, line:103:5> line:101:10 set_buffer_destructor 'void (Packet::buffer_destructor_type)'
| |-ParmVarDecl 0x56490e067e38 <col:32, col:55> col:55 used destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
| `-CompoundStmt 0x56490e087030 <col:67, line:103:5>
|   `-BinaryOperator 0x56490e087010 <line:102:9, col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56490e086fa8 <col:9> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56490e085d18
|     | `-CXXThisExpr 0x56490e086f98 <col:9> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56490e086ff8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <LValueToRValue>
|       `-DeclRefExpr 0x56490e086fd8 <col:23> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ParmVar 0x56490e067e38 'destructor' 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-CXXMethodDecl 0x56490e068020 <line:105:5, line:107:5> line:105:11 destructor_argument 'void *()'
| `-CompoundStmt 0x56490e0870b0 <col:33, line:107:5>
|   `-ReturnStmt 0x56490e0870a0 <line:106:9, col:16>
|     `-ImplicitCastExpr 0x56490e087088 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56490e087058 <col:16> 'void *' lvalue ->_destructor_argument 0x56490e085d80
|         `-CXXThisExpr 0x56490e087048 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56490e0680e0 <line:109:5, line:113:5> line:109:10 reset_buffer 'void ()'
| `-CompoundStmt 0x56490e0876e0 <col:25, line:113:5>
|   |-ParenExpr 0x56490e087428 <line:110:2, col:146> 'void'
|   | `-ConditionalOperator 0x56490e0873f8 <col:3, col:145> 'void'
|   |   |-CXXStaticCastExpr 0x56490e087168 <col:3, col:32> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-UnaryOperator 0x56490e087140 <col:23, col:31> 'bool' prefix '!' cannot overflow
|   |   |   `-CXXMemberCallExpr 0x56490e087108 <col:24, col:31> 'bool'
|   |   |     `-MemberExpr 0x56490e0870d8 <col:24> '<bound member function type>' ->shared 0x56490e067158
|   |   |       `-ImplicitCastExpr 0x56490e087128 <col:24> 'const Packet *' <NoOp>
|   |   |         `-CXXThisExpr 0x56490e0870c8 <col:24> 'Packet *' implicit this
|   |   |-CXXFunctionalCastExpr 0x56490e0871c8 <col:36, col:43> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e0871a8 <col:42> 'int' 0
|   |   `-CallExpr 0x56490e087358 <col:47, col:145> 'void'
|   |     |-ImplicitCastExpr 0x56490e087340 <col:47> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e087320 <col:47> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e087398 <col:62> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e087238 <col:62> 'const char [10]' lvalue "!shared()"
|   |     |-ImplicitCastExpr 0x56490e0873b0 <col:75> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e087260 <col:75> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e0873c8 <col:107> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e087298 <col:107> 'int' 110
|   |     `-ImplicitCastExpr 0x56490e0873e0 <col:112, col:126> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e087308 <col:112, col:126> 'const char [28]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e0872f0 <col:126> 'const char [28]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e0872b8 <col:126> 'const char [28]' lvalue "void Packet::reset_buffer()"
|   |-BinaryOperator 0x56490e087628 <line:111:2, col:33> 'unsigned char *' lvalue '='
|   | |-MemberExpr 0x56490e087458 <col:2> 'unsigned char *' lvalue ->_head 0x56490e085b20
|   | | `-CXXThisExpr 0x56490e087448 <col:2> 'Packet *' implicit this
|   | `-ImplicitCastExpr 0x56490e087610 <col:10, col:33> 'unsigned char *' <LValueToRValue>
|   |   `-BinaryOperator 0x56490e0875f0 <col:10, col:33> 'unsigned char *' lvalue '='
|   |     |-MemberExpr 0x56490e087498 <col:10> 'unsigned char *' lvalue ->_data 0x56490e085b88
|   |     | `-CXXThisExpr 0x56490e087488 <col:10> 'Packet *' implicit this
|   |     `-ImplicitCastExpr 0x56490e0875d8 <col:18, col:33> 'unsigned char *' <LValueToRValue>
|   |       `-BinaryOperator 0x56490e0875b8 <col:18, col:33> 'unsigned char *' lvalue '='
|   |         |-MemberExpr 0x56490e0874d8 <col:18> 'unsigned char *' lvalue ->_tail 0x56490e085bf0
|   |         | `-CXXThisExpr 0x56490e0874c8 <col:18> 'Packet *' implicit this
|   |         `-ImplicitCastExpr 0x56490e0875a0 <col:26, col:33> 'unsigned char *' <LValueToRValue>
|   |           `-BinaryOperator 0x56490e087580 <col:26, col:33> 'unsigned char *' lvalue '='
|   |             |-MemberExpr 0x56490e087518 <col:26> 'unsigned char *' lvalue ->_end 0x56490e085c58
|   |             | `-CXXThisExpr 0x56490e087508 <col:26> 'Packet *' implicit this
|   |             `-ImplicitCastExpr 0x56490e087568 <col:33> 'unsigned char *' <NullToPointer>
|   |               `-IntegerLiteral 0x56490e087548 <col:33> 'int' 0
|   `-BinaryOperator 0x56490e0876c0 <line:112:2, col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue '='
|     |-MemberExpr 0x56490e087658 <col:2> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' lvalue ->_destructor 0x56490e085d18
|     | `-CXXThisExpr 0x56490e087648 <col:2> 'Packet *' implicit this
|     `-ImplicitCastExpr 0x56490e0876a8 <col:16> 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)' <NullToPointer>
|       `-IntegerLiteral 0x56490e087688 <col:16> 'int' 0
|-CXXMethodDecl 0x56490e068220 <line:141:5, col:109> col:56 push 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56490e068190 <col:61, col:70> col:70 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e0682c8 <col:20>
| |-OptimizeNoneAttr 0x56490e068320 <col:30>
| `-WarnUnusedResultAttr 0x56490e068348 <col:90> warn_unused_result ""
|-CXXMethodDecl 0x56490e068418 <line:152:5, col:120> col:56 push_mac_header 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56490e068388 <col:72, col:81> col:81 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e0684c0 <col:20>
| |-OptimizeNoneAttr 0x56490e068518 <col:30>
| `-WarnUnusedResultAttr 0x56490e068540 <col:101> warn_unused_result ""
|-CXXMethodDecl 0x56490e068678 <line:171:5, col:76> col:13 nonunique_push 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56490e068580 <col:28, col:37> col:37 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56490e068720 <col:57> warn_unused_result ""
|-CXXMethodDecl 0x56490e068820 <line:187:5, col:62> col:45 pull 'void (uint32_t)'
| |-ParmVarDecl 0x56490e068790 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e0688c8 <col:20>
| `-OptimizeNoneAttr 0x56490e068920 <col:30>
|-CXXMethodDecl 0x56490e0689e8 <line:213:5, col:73> col:21 put 'WritablePacket *(uint32_t)'
| |-ParmVarDecl 0x56490e068958 <col:25, col:34> col:34 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56490e068a90 <col:54> warn_unused_result ""
|-CXXMethodDecl 0x56490e068b90 <line:230:5, col:75> col:13 nonunique_put 'Packet *(uint32_t)'
| |-ParmVarDecl 0x56490e068b00 <col:27, col:36> col:36 len 'uint32_t':'unsigned int'
| `-WarnUnusedResultAttr 0x56490e068c38 <col:56> warn_unused_result ""
|-CXXMethodDecl 0x56490e068d38 <line:245:5, col:62> col:45 take 'void (uint32_t)'
| |-ParmVarDecl 0x56490e068ca8 <col:50, col:59> col:59 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e068de0 <col:20>
| `-OptimizeNoneAttr 0x56490e068e38 <col:30>
|-CXXMethodDecl 0x56490e068fc8 <line:269:5, col:99> col:13 shift_data 'Packet *(int, bool)'
| |-ParmVarDecl 0x56490e068e78 <col:24, col:28> col:28 offset 'int'
| |-ParmVarDecl 0x56490e068ef0 <col:36, col:59> col:41 free_on_failure 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56490e086ed8 <col:59> 'bool' true
| `-WarnUnusedResultAttr 0x56490e069078 <col:80> warn_unused_result ""
|-CXXMethodDecl 0x56490e069278 <line:271:5, col:71> col:17 shrink_data 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56490e0690f0 <col:29, col:50> col:50 data 'const unsigned char *'
| `-ParmVarDecl 0x56490e069168 <col:56, col:65> col:65 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e069488 <line:272:5, col:78> col:17 change_headroom_and_length 'void (uint32_t, uint32_t)' inline
| |-ParmVarDecl 0x56490e069338 <col:44, col:53> col:53 headroom 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56490e0693b0 <col:63, col:72> col:72 length 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e069698 <line:274:5, col:40> col:10 copy 'bool (Packet *, int)'
| |-ParmVarDecl 0x56490e069548 <col:15, col:23> col:23 p 'Packet *'
| `-ParmVarDecl 0x56490e0695c8 <col:26, col:39> col:30 headroom 'int' cinit
|   `-IntegerLiteral 0x56490e086ee8 <col:39> 'int' 0
|-CXXMethodDecl 0x56490e069768 <line:279:5, col:34> col:17 has_mac_header 'bool () const' inline
|-CXXMethodDecl 0x56490e069830 <line:280:5, col:46> col:33 used mac_header 'const unsigned char *() const' inline
|-CXXMethodDecl 0x56490e0698f8 <line:281:5, col:36> col:16 mac_header_offset 'int () const' inline
|-CXXMethodDecl 0x56490e0699b8 <line:282:5, col:41> col:21 mac_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56490e069a80 <line:283:5, col:29> col:16 mac_length 'int () const' inline
|-CXXMethodDecl 0x56490e069bc8 <line:284:5, col:54> col:17 set_mac_header 'void (const unsigned char *)' inline
| `-ParmVarDecl 0x56490e069b38 <col:32, col:53> col:53 p 'const unsigned char *'
|-CXXMethodDecl 0x56490e069d98 <line:285:5, col:68> col:17 used set_mac_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56490e069c88 <col:32, col:53> col:53 p 'const unsigned char *'
| `-ParmVarDecl 0x56490e069d00 <col:56, col:65> col:65 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e069e68 <line:286:5, col:34> col:17 clear_mac_header 'void ()' inline
|-CXXMethodDecl 0x56490e069f28 <line:288:5, col:66> col:45 has_network_header 'bool () const'
| |-NoInlineAttr 0x56490e069fc8 <col:20>
| `-OptimizeNoneAttr 0x56490e06a020 <col:30>
|-CXXMethodDecl 0x56490e06a070 <line:289:5, col:78> col:61 used network_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56490e06a110 <col:20>
| `-OptimizeNoneAttr 0x56490e06a168 <col:30>
|-CXXMethodDecl 0x56490e06a1b8 <line:290:5, col:40> col:16 used network_header_offset 'int () const' inline
|-CXXMethodDecl 0x56490e06a278 <line:291:5, col:45> col:21 used network_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56490e06a340 <line:292:5, col:61> col:44 network_length 'int () const'
| |-NoInlineAttr 0x56490e06a3e0 <col:20>
| `-OptimizeNoneAttr 0x56490e06a438 <col:30>
|-CXXMethodDecl 0x56490e06a588 <line:293:5, col:72> col:17 set_network_header 'void (const unsigned char *, uint32_t)' inline
| |-ParmVarDecl 0x56490e06a478 <col:36, col:57> col:57 p 'const unsigned char *'
| `-ParmVarDecl 0x56490e06a4f0 <col:60, col:69> col:69 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e06a6d8 <line:294:5, col:55> col:17 set_network_header_length 'void (uint32_t)' inline
| `-ParmVarDecl 0x56490e06a648 <col:43, col:52> col:52 len 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e06a7a0 <line:295:5, col:38> col:17 clear_network_header 'void ()' inline
|-CXXMethodDecl 0x56490e06a860 <line:297:5, col:68> col:45 has_transport_header 'bool () const'
| |-NoInlineAttr 0x56490e06a900 <col:20>
| `-OptimizeNoneAttr 0x56490e06a958 <col:30>
|-CXXMethodDecl 0x56490e06a9a8 <line:298:5, col:80> col:61 used transport_header 'const unsigned char *() const'
| |-NoInlineAttr 0x56490e06aa48 <col:20>
| `-OptimizeNoneAttr 0x56490e06aaa0 <col:30>
|-CXXMethodDecl 0x56490e06aaf0 <line:299:5, col:42> col:16 transport_header_offset 'int () const' inline
|-CXXMethodDecl 0x56490e06abb8 <line:300:5, col:63> col:44 transport_length 'int () const'
| |-NoInlineAttr 0x56490e06ac58 <col:20>
| `-OptimizeNoneAttr 0x56490e06acb0 <col:30>
|-CXXMethodDecl 0x56490e06acf8 <line:301:5, col:40> col:17 clear_transport_header 'void ()' inline
|-CXXMethodDecl 0x56490e06ae18 <line:304:5, col:46> col:31 ether_header 'const click_ether *() const' inline
|-CXXMethodDecl 0x56490e06af88 <line:305:5, col:57> col:17 set_ether_header 'void (const click_ether *)' inline
| `-ParmVarDecl 0x56490e06aec8 <col:34, col:53> col:53 ethh 'const click_ether *'
|-CXXMethodDecl 0x56490e06b078 <line:307:5, col:68> col:56 ip_header 'const click_ip *() const'
| |-NoInlineAttr 0x56490e06b118 <col:20>
| `-OptimizeNoneAttr 0x56490e06b170 <col:30>
|-CXXMethodDecl 0x56490e06b1c0 <line:308:5, col:35> col:16 ip_header_offset 'int () const' inline
|-CXXMethodDecl 0x56490e06b280 <line:309:5, col:40> col:21 ip_header_length 'uint32_t () const' inline
|-CXXMethodDecl 0x56490e06b4b8 <line:310:5, col:92> col:45 set_ip_header 'void (const click_ip *, uint32_t)'
| |-ParmVarDecl 0x56490e06b330 <col:59, col:75> col:75 iph 'const click_ip *'
| |-ParmVarDecl 0x56490e06b3a8 <col:80, col:89> col:89 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e06b568 <col:20>
| `-OptimizeNoneAttr 0x56490e06b5c0 <col:30>
|-CXXMethodDecl 0x56490e06b668 <line:312:5, col:70> col:57 ip6_header 'const click_ip6 *() const'
| |-NoInlineAttr 0x56490e06b708 <col:20>
| `-OptimizeNoneAttr 0x56490e06b760 <col:30>
|-CXXMethodDecl 0x56490e06b7b0 <line:313:5, col:64> col:44 ip6_header_offset 'int () const'
| |-NoInlineAttr 0x56490e06b850 <col:20>
| `-OptimizeNoneAttr 0x56490e06b8a8 <col:30>
|-CXXMethodDecl 0x56490e06b8f0 <line:314:5, col:69> col:49 ip6_header_length 'uint32_t () const'
| |-NoInlineAttr 0x56490e06b990 <col:20>
| `-OptimizeNoneAttr 0x56490e06b9e8 <col:30>
|-CXXMethodDecl 0x56490e06bae8 <line:315:5, col:81> col:45 set_ip6_header 'void (const click_ip6 *)'
| |-ParmVarDecl 0x56490e06ba20 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-NoInlineAttr 0x56490e06bb90 <col:20>
| `-OptimizeNoneAttr 0x56490e06bbe8 <col:30>
|-CXXMethodDecl 0x56490e06bda8 <line:316:5, col:95> col:45 set_ip6_header 'void (const click_ip6 *, uint32_t)'
| |-ParmVarDecl 0x56490e06bc20 <col:60, col:77> col:77 ip6h 'const click_ip6 *'
| |-ParmVarDecl 0x56490e06bc98 <col:83, col:92> col:92 len 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e06be58 <col:20>
| `-OptimizeNoneAttr 0x56490e06beb0 <col:30>
|-CXXMethodDecl 0x56490e06bf58 <line:318:5, col:44> col:30 used icmp_header 'const click_icmp *() const' inline
|-CXXMethodDecl 0x56490e06c078 <line:319:5, col:42> col:29 used tcp_header 'const click_tcp *() const' inline
|-CXXMethodDecl 0x56490e06c198 <line:320:5, col:42> col:29 used udp_header 'const click_udp *() const' inline
|-AccessSpecDecl 0x56490e06c238 <line:333:3, col:10> col:3 private
|-CXXRecordDecl 0x56490e06c260 <line:335:5, col:11> col:11 referenced union Anno
|-CXXMethodDecl 0x56490e06c388 <line:340:5, col:60> col:52 used xanno 'const Packet::Anno *() const'
| |-NoInlineAttr 0x56490e06c428 <col:20>
| `-OptimizeNoneAttr 0x56490e06c480 <col:30>
|-CXXMethodDecl 0x56490e06c528 <line:341:5, col:52> col:46 used xanno 'Packet::Anno *()'
| |-NoInlineAttr 0x56490e06c5c8 <col:20>
| `-OptimizeNoneAttr 0x56490e06c620 <col:30>
|-AccessSpecDecl 0x56490e06c648 <line:344:3, col:9> col:3 public
|-EnumDecl 0x56490e06c670 <line:349:5, line:351:5> line:349:5
| `-EnumConstantDecl 0x56490e06c770 <line:350:2, col:14> col:2 referenced anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   `-ImplicitCastExpr 0x56490e06c7c0 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e06c750 <col:14> 'int' Int: 48
|       `-IntegerLiteral 0x56490e06c730 <col:14> 'int' 48
|-CXXMethodDecl 0x56490e06c828 <line:354:5, col:74> col:57 used timestamp_anno 'const Timestamp &() const'
| |-NoInlineAttr 0x56490e06c8c8 <col:20>
| `-OptimizeNoneAttr 0x56490e06c920 <col:30>
|-CXXMethodDecl 0x56490e06c998 <line:356:5, col:66> col:51 used timestamp_anno 'Timestamp &()'
| |-NoInlineAttr 0x56490e06ca38 <col:20>
| `-OptimizeNoneAttr 0x56490e06ca90 <col:30>
|-CXXMethodDecl 0x56490e06cb58 <line:359:5, col:54> col:17 used set_timestamp_anno 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56490e06cac8 <col:36, col:53> col:53 t 'const Timestamp &'
|-CXXMethodDecl 0x56490e06ccf8 <line:362:5, col:38> col:24 used device_anno 'net_device *() const' inline
|-CXXMethodDecl 0x56490e06ce98 <line:364:5, col:48> col:17 used set_device_anno 'void (net_device *)' inline
| `-ParmVarDecl 0x56490e06cda8 <col:33, col:45> col:45 dev 'net_device *'
|-EnumDecl 0x56490e06cf40 <line:368:5, line:381:5> line:368:10 referenced PacketType
| |-EnumConstantDecl 0x56490e06d040 <line:369:2, col:9> col:2 HOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56490e06d3f0 <col:9> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06d020 <col:9> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e06d000 <col:9> 'int' 0
| |-EnumConstantDecl 0x56490e06d0d0 <line:370:2, col:14> col:2 BROADCAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56490e06d408 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06d0b0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56490e06d090 <col:14> 'int' 1
| |-EnumConstantDecl 0x56490e06d160 <line:372:2, col:14> col:2 MULTICAST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56490e06d420 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06d140 <col:14> 'int' Int: 2
| |     `-IntegerLiteral 0x56490e06d120 <col:14> 'int' 2
| |-EnumConstantDecl 0x56490e06d1f0 <line:374:2, col:14> col:2 OTHERHOST 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56490e06d438 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06d1d0 <col:14> 'int' Int: 3
| |     `-IntegerLiteral 0x56490e06d1b0 <col:14> 'int' 3
| |-EnumConstantDecl 0x56490e06d280 <line:377:2, col:13> col:2 OUTGOING 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56490e06d450 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06d260 <col:13> 'int' Int: 4
| |     `-IntegerLiteral 0x56490e06d240 <col:13> 'int' 4
| |-EnumConstantDecl 0x56490e06d310 <line:379:2, col:13> col:2 LOOPBACK 'Packet::PacketType'
| | `-ImplicitCastExpr 0x56490e06d468 <col:13> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06d2f0 <col:13> 'int' Int: 5
| |     `-IntegerLiteral 0x56490e06d2d0 <col:13> 'int' 5
| `-EnumConstantDecl 0x56490e06d3a0 <line:380:2, col:14> col:2 FASTROUTE 'Packet::PacketType'
|   `-ImplicitCastExpr 0x56490e06d480 <col:14> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e06d380 <col:14> 'int' Int: 6
|       `-IntegerLiteral 0x56490e06d360 <col:14> 'int' 6
|-CXXMethodDecl 0x56490e06d4e8 <line:383:5, col:70> col:51 used packet_type_anno 'Packet::PacketType () const'
| |-NoInlineAttr 0x56490e06d588 <col:20>
| `-OptimizeNoneAttr 0x56490e06d5e0 <col:30>
|-CXXMethodDecl 0x56490e06d6d8 <line:385:5, col:78> col:45 used set_packet_type_anno 'void (Packet::PacketType)'
| |-ParmVarDecl 0x56490e06d618 <col:66, col:77> col:77 t 'Packet::PacketType'
| |-NoInlineAttr 0x56490e06d780 <col:20>
| `-OptimizeNoneAttr 0x56490e06d800 <col:30>
|-CXXMethodDecl 0x56490e06d878 <line:410:5, col:27> col:20 next 'Packet *() const' inline
|-CXXMethodDecl 0x56490e06d9a0 <line:412:5, col:26> col:21 next 'Packet *&()' inline
|-CXXMethodDecl 0x56490e06db18 <line:414:5, col:35> col:17 set_next 'void (Packet *)' inline
| `-ParmVarDecl 0x56490e06da50 <col:26, col:34> col:34 p 'Packet *'
|-CXXMethodDecl 0x56490e06dbe0 <line:417:5, col:27> col:20 prev 'Packet *() const' inline
|-CXXMethodDecl 0x56490e06dca8 <line:419:5, col:26> col:21 prev 'Packet *&()' inline
|-CXXMethodDecl 0x56490e06dde8 <line:421:5, col:35> col:17 set_prev 'void (Packet *)' inline
| `-ParmVarDecl 0x56490e06dd58 <col:26, col:34> col:34 p 'Packet *'
|-EnumDecl 0x56490e06de90 <line:423:5, line:426:5> line:423:5
| |-EnumConstantDecl 0x56490e06df90 <line:424:2, col:23> col:2 referenced dst_ip_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56490e06e190 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06df70 <col:23> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e06df50 <col:23> 'int' 0
| |-EnumConstantDecl 0x56490e06e020 <col:26, col:45> col:26 dst_ip_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56490e06e1a8 <col:45> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06e000 <col:45> 'int' Int: 4
| |     `-IntegerLiteral 0x56490e06dfe0 <col:45> 'int' 4
| |-EnumConstantDecl 0x56490e06e0b0 <line:425:2, col:24> col:2 dst_ip6_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
| | `-ImplicitCastExpr 0x56490e06e1c0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e06e090 <col:24> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e06e070 <col:24> 'int' 0
| `-EnumConstantDecl 0x56490e06e140 <col:27, col:47> col:27 dst_ip6_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:423:5)'
|   `-ImplicitCastExpr 0x56490e06e1d8 <col:47> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e06e120 <col:47> 'int' Int: 16
|       `-IntegerLiteral 0x56490e06e100 <col:47> 'int' 16
|-CXXMethodDecl 0x56490e06e238 <line:431:5, col:36> col:22 dst_ip_anno 'IPAddress () const' inline
|-CXXMethodDecl 0x56490e06e3a8 <line:436:5, col:75> col:45 set_dst_ip_anno 'void (IPAddress)'
| |-ParmVarDecl 0x56490e06e2e8 <col:61, col:71> col:71 addr 'IPAddress'
| |-NoInlineAttr 0x56490e06e450 <col:20>
| `-OptimizeNoneAttr 0x56490e06e4a8 <col:30>
|-CXXMethodDecl 0x56490e06e4f8 <line:441:5, col:36> col:11 anno 'void *()'
| `-CompoundStmt 0x56490e087800 <col:18, col:36>
|   `-ReturnStmt 0x56490e0877f0 <col:20, col:33>
|     `-ImplicitCastExpr 0x56490e0877d8 <col:27, col:33> 'void *' <BitCast>
|       `-CXXMemberCallExpr 0x56490e0877b8 <col:27, col:33> 'Packet::Anno *'
|         `-MemberExpr 0x56490e087788 <col:27> '<bound member function type>' ->xanno 0x56490e06c528
|           `-CXXThisExpr 0x56490e087778 <col:27> 'Packet *' implicit this
|-CXXMethodDecl 0x56490e06e5f0 <line:444:5, col:48> col:17 anno 'const void *() const'
| `-CompoundStmt 0x56490e087910 <col:30, col:48>
|   `-ReturnStmt 0x56490e087900 <col:32, col:45>
|     `-ImplicitCastExpr 0x56490e0878e8 <col:39, col:45> 'const void *' <BitCast>
|       `-CXXMemberCallExpr 0x56490e0878c8 <col:39, col:45> 'const Packet::Anno *'
|         `-MemberExpr 0x56490e087898 <col:39> '<bound member function type>' ->xanno 0x56490e06c388
|           `-CXXThisExpr 0x56490e087888 <col:39> 'const Packet *' implicit this
|-CXXMethodDecl 0x56490e06e6d8 <line:447:5, col:50> col:14 used anno_u8 'uint8_t *()'
| `-CompoundStmt 0x56490e087aa8 <col:24, col:50>
|   `-ReturnStmt 0x56490e087a98 <col:26, col:47>
|     `-UnaryOperator 0x56490e087a80 <col:33, col:47> 'uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56490e087a60 <col:34, col:47> 'uint8_t':'unsigned char' lvalue
|         |-ImplicitCastExpr 0x56490e087a48 <col:34, col:43> 'uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56490e0879f8 <col:34, col:43> 'uint8_t [48]' lvalue ->u8 0x56490e074dd0
|         |   `-CXXMemberCallExpr 0x56490e0879d8 <col:34, col:40> 'Packet::Anno *'
|         |     `-MemberExpr 0x56490e0879a8 <col:34> '<bound member function type>' ->xanno 0x56490e06c528
|         |       `-CXXThisExpr 0x56490e087998 <col:34> 'Packet *' implicit this
|         `-IntegerLiteral 0x56490e087a28 <col:46> 'int' 0
|-CXXMethodDecl 0x56490e06e7c8 <line:450:5, col:62> col:20 used anno_u8 'const uint8_t *() const'
| `-CompoundStmt 0x56490e087c40 <col:36, col:62>
|   `-ReturnStmt 0x56490e087c30 <col:38, col:59>
|     `-UnaryOperator 0x56490e087c18 <col:45, col:59> 'const uint8_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56490e087bf8 <col:46, col:59> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56490e087be0 <col:46, col:55> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56490e087b90 <col:46, col:55> 'uint8_t const[48]' lvalue ->u8 0x56490e074dd0
|         |   `-CXXMemberCallExpr 0x56490e087b70 <col:46, col:52> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56490e087b40 <col:46> '<bound member function type>' ->xanno 0x56490e06c388
|         |       `-CXXThisExpr 0x56490e087b30 <col:46> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56490e087bc0 <col:58> 'int' 0
|-CXXMethodDecl 0x56490e06e8e8 <line:453:5, col:53> col:15 used anno_u32 'uint32_t *()'
| `-CompoundStmt 0x56490e087dd8 <col:26, col:53>
|   `-ReturnStmt 0x56490e087dc8 <col:28, col:50>
|     `-UnaryOperator 0x56490e087db0 <col:35, col:50> 'uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56490e087d90 <col:36, col:50> 'uint32_t':'unsigned int' lvalue
|         |-ImplicitCastExpr 0x56490e087d78 <col:36, col:45> 'uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56490e087d28 <col:36, col:45> 'uint32_t [12]' lvalue ->u32 0x56490e0750d8
|         |   `-CXXMemberCallExpr 0x56490e087d08 <col:36, col:42> 'Packet::Anno *'
|         |     `-MemberExpr 0x56490e087cd8 <col:36> '<bound member function type>' ->xanno 0x56490e06c528
|         |       `-CXXThisExpr 0x56490e087cc8 <col:36> 'Packet *' implicit this
|         `-IntegerLiteral 0x56490e087d58 <col:49> 'int' 0
|-CXXMethodDecl 0x56490e06ea08 <line:456:5, col:65> col:21 used anno_u32 'const uint32_t *() const'
| `-CompoundStmt 0x56490e087fa8 <col:38, col:65>
|   `-ReturnStmt 0x56490e087f98 <col:40, col:62>
|     `-UnaryOperator 0x56490e087f80 <col:47, col:62> 'const uint32_t *' prefix '&' cannot overflow
|       `-ArraySubscriptExpr 0x56490e087f60 <col:48, col:62> 'const uint32_t':'const unsigned int' lvalue
|         |-ImplicitCastExpr 0x56490e087f48 <col:48, col:57> 'const uint32_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56490e087ec0 <col:48, col:57> 'uint32_t const[12]' lvalue ->u32 0x56490e0750d8
|         |   `-CXXMemberCallExpr 0x56490e087ea0 <col:48, col:54> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56490e087e70 <col:48> '<bound member function type>' ->xanno 0x56490e06c388
|         |       `-CXXThisExpr 0x56490e087e60 <col:48> 'const Packet *' implicit this
|         `-IntegerLiteral 0x56490e087ef0 <col:61> 'int' 0
|-CXXMethodDecl 0x56490e06ebb8 <line:460:5, line:463:5> line:460:13 used anno_u8 'uint8_t (int) const'
| |-ParmVarDecl 0x56490e06eac0 <col:21, col:25> col:25 used i 'int'
| `-CompoundStmt 0x56490e088678 <col:34, line:463:5>
|   |-ParenExpr 0x56490e0884c0 <line:461:2, col:174> 'void'
|   | `-ConditionalOperator 0x56490e088490 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56490e0880f8 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e0880c8 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e088018 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e088000 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e087fc0 <col:23> 'int' lvalue ParmVar 0x56490e06eac0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e087fe0 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e0880a8 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e088078 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e088038 <col:33> 'int' lvalue ParmVar 0x56490e06eac0 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56490e088090 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56490e088058 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56490e088158 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e088138 <col:56> 'int' 0
|   |   `-CallExpr 0x56490e0883f0 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56490e0883d8 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e0883b8 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e088430 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e088248 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56490e088448 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e088278 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e088460 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e0882b0 <col:135> 'int' 461
|   |     `-ImplicitCastExpr 0x56490e088478 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e0883a0 <col:140, col:154> 'const char [35]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e088388 <col:154> 'const char [35]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e088348 <col:154> 'const char [35]' lvalue "uint8_t Packet::anno_u8(int) const"
|   `-ReturnStmt 0x56490e088668 <line:462:2, col:22>
|     `-ImplicitCastExpr 0x56490e088650 <col:9, col:22> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-ArraySubscriptExpr 0x56490e088630 <col:9, col:22> 'const uint8_t':'const unsigned char' lvalue
|         |-ImplicitCastExpr 0x56490e088600 <col:9, col:18> 'const uint8_t *' <ArrayToPointerDecay>
|         | `-MemberExpr 0x56490e0885b0 <col:9, col:18> 'uint8_t const[48]' lvalue ->u8 0x56490e074dd0
|         |   `-CXXMemberCallExpr 0x56490e088590 <col:9, col:15> 'const Packet::Anno *'
|         |     `-MemberExpr 0x56490e088560 <col:9> '<bound member function type>' ->xanno 0x56490e06c388
|         |       `-CXXThisExpr 0x56490e088550 <col:9> 'const Packet *' implicit this
|         `-ImplicitCastExpr 0x56490e088618 <col:21> 'int' <LValueToRValue>
|           `-DeclRefExpr 0x56490e0885e0 <col:21> 'int' lvalue ParmVar 0x56490e06eac0 'i' 'int'
|-CXXMethodDecl 0x56490e06ee08 <line:469:5, line:472:5> line:469:10 used set_anno_u8 'void (int, uint8_t)'
| |-ParmVarDecl 0x56490e06ec78 <col:22, col:26> col:26 used i 'int'
| |-ParmVarDecl 0x56490e06ecf0 <col:29, col:37> col:37 used x 'uint8_t':'unsigned char'
| `-CompoundStmt 0x56490e088d08 <col:40, line:472:5>
|   |-ParenExpr 0x56490e088b20 <line:470:2, col:174> 'void'
|   | `-ConditionalOperator 0x56490e088af0 <col:3, col:173> 'void'
|   |   |-CXXStaticCastExpr 0x56490e0887d0 <col:3, col:46> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e0887a0 <col:23, col:37> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e0886f0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e0886d8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e088698 <col:23> 'int' lvalue ParmVar 0x56490e06ec78 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e0886b8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e088780 <col:33, col:37> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e088750 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e088710 <col:33> 'int' lvalue ParmVar 0x56490e06ec78 'i' 'int'
|   |   |     `-ImplicitCastExpr 0x56490e088768 <col:37> 'int' <IntegralCast>
|   |   |       `-DeclRefExpr 0x56490e088730 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |-CXXFunctionalCastExpr 0x56490e088830 <col:50, col:57> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e088810 <col:56> 'int' 0
|   |   `-CallExpr 0x56490e088a50 <col:61, col:173> 'void'
|   |     |-ImplicitCastExpr 0x56490e088a38 <col:61> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e088a18 <col:61> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e088a90 <col:76> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e0888a0 <col:76> 'const char [24]' lvalue "i >= 0 && i < anno_size"
|   |     |-ImplicitCastExpr 0x56490e088aa8 <col:103> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e0888d0 <col:103> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e088ac0 <col:135> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e088908 <col:135> 'int' 470
|   |     `-ImplicitCastExpr 0x56490e088ad8 <col:140, col:154> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e088a00 <col:140, col:154> 'const char [39]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e0889e8 <col:154> 'const char [39]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e0889a8 <col:154> 'const char [39]' lvalue "void Packet::set_anno_u8(int, uint8_t)"
|   `-BinaryOperator 0x56490e088ce8 <line:471:2, col:19> 'uint8_t':'unsigned char' lvalue '='
|     |-ArraySubscriptExpr 0x56490e088c90 <col:2, col:15> 'uint8_t':'unsigned char' lvalue
|     | |-ImplicitCastExpr 0x56490e088c60 <col:2, col:11> 'uint8_t *' <ArrayToPointerDecay>
|     | | `-MemberExpr 0x56490e088c10 <col:2, col:11> 'uint8_t [48]' lvalue ->u8 0x56490e074dd0
|     | |   `-CXXMemberCallExpr 0x56490e088bf0 <col:2, col:8> 'Packet::Anno *'
|     | |     `-MemberExpr 0x56490e088bc0 <col:2> '<bound member function type>' ->xanno 0x56490e06c528
|     | |       `-CXXThisExpr 0x56490e088bb0 <col:2> 'Packet *' implicit this
|     | `-ImplicitCastExpr 0x56490e088c78 <col:14> 'int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56490e088c40 <col:14> 'int' lvalue ParmVar 0x56490e06ec78 'i' 'int'
|     `-ImplicitCastExpr 0x56490e088cd0 <col:19> 'uint8_t':'unsigned char' <LValueToRValue>
|       `-DeclRefExpr 0x56490e088cb0 <col:19> 'uint8_t':'unsigned char' lvalue ParmVar 0x56490e06ecf0 'x' 'uint8_t':'unsigned char'
|-CXXMethodDecl 0x56490e06efc8 <line:479:5, line:485:5> line:479:14 used anno_u16 'uint16_t (int) const'
| |-ParmVarDecl 0x56490e06eed0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56490e089488 <col:36, line:485:5>
|   |-ParenExpr 0x56490e0891f0 <line:480:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e0891c0 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e088ea0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e088e70 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e088d80 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e088d68 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e088d28 <col:23> 'int' lvalue ParmVar 0x56490e06eed0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e088d48 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e088e50 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e088e38 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e088da0 <col:33> 'int' lvalue ParmVar 0x56490e06eed0 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e088e18 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e088e00 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e088dc0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e088de0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56490e088f00 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e088ee0 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e089120 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e089108 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e0890e8 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e089160 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e088f70 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56490e089178 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e088fa8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e089190 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e088fe0 <col:143> 'int' 480
|   |     `-ImplicitCastExpr 0x56490e0891a8 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e0890d0 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e0890b8 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e089078 <col:162> 'const char [37]' lvalue "uint16_t Packet::anno_u16(int) const"
|   `-ReturnStmt 0x56490e089478 <line:484:2, col:75>
|     `-ImplicitCastExpr 0x56490e089460 <col:9, col:75> 'click_aliasable_uint16_t':'unsigned short' <LValueToRValue>
|       `-UnaryOperator 0x56490e089448 <col:9, col:75> 'const click_aliasable_uint16_t':'const unsigned short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56490e089418 <col:10, col:75> 'const click_aliasable_uint16_t *' reinterpret_cast<const click_aliasable_uint16_t *> <BitCast>
|           `-BinaryOperator 0x56490e0893b8 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56490e089388 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56490e089300 <col:61, col:70> 'char const[48]' lvalue ->c 0x56490e074d20
|             |   `-CXXMemberCallExpr 0x56490e0892e0 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56490e0892b0 <col:61> '<bound member function type>' ->xanno 0x56490e06c388
|             |       `-CXXThisExpr 0x56490e0892a0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56490e0893a0 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56490e089330 <col:74> 'int' lvalue ParmVar 0x56490e06eed0 'i' 'int'
|-CXXMethodDecl 0x56490e06f218 <line:494:5, line:500:5> line:494:10 used set_anno_u16 'void (int, uint16_t)'
| |-ParmVarDecl 0x56490e06f088 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56490e06f100 <col:30, col:39> col:39 used x 'uint16_t':'unsigned short'
| `-CompoundStmt 0x56490e089bd8 <col:42, line:500:5>
|   |-ParenExpr 0x56490e089970 <line:495:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e089940 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e089620 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e0895f0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e089500 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e0894e8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e0894a8 <col:23> 'int' lvalue ParmVar 0x56490e06f088 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e0894c8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e0895d0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e0895b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e089520 <col:33> 'int' lvalue ParmVar 0x56490e06f088 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e089598 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e089580 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e089540 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e089560 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56490e089680 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e089660 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e0898a0 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e089888 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e089868 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e0898e0 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e0896f0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56490e0898f8 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e089728 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e089910 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e089760 <col:143> 'int' 495
|   |     `-ImplicitCastExpr 0x56490e089928 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e089850 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e089838 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e0897f8 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u16(int, uint16_t)"
|   `-BinaryOperator 0x56490e089bb8 <line:499:2, col:66> 'click_aliasable_uint16_t':'unsigned short' lvalue '='
|     |-UnaryOperator 0x56490e089b68 <col:2, col:62> 'click_aliasable_uint16_t':'unsigned short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56490e089b38 <col:3, col:62> 'click_aliasable_uint16_t *' reinterpret_cast<click_aliasable_uint16_t *> <BitCast>
|     |   `-BinaryOperator 0x56490e089ae0 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56490e089ab0 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56490e089a60 <col:48, col:57> 'char [48]' lvalue ->c 0x56490e074d20
|     |     |   `-CXXMemberCallExpr 0x56490e089a40 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56490e089a10 <col:48> '<bound member function type>' ->xanno 0x56490e06c528
|     |     |       `-CXXThisExpr 0x56490e089a00 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56490e089ac8 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56490e089a90 <col:61> 'int' lvalue ParmVar 0x56490e06f088 'i' 'int'
|     `-ImplicitCastExpr 0x56490e089ba0 <col:66> 'uint16_t':'unsigned short' <LValueToRValue>
|       `-DeclRefExpr 0x56490e089b80 <col:66> 'uint16_t':'unsigned short' lvalue ParmVar 0x56490e06f100 'x' 'uint16_t':'unsigned short'
|-CXXMethodDecl 0x56490e06f3d8 <line:507:5, line:513:5> line:507:13 anno_s16 'int16_t (int) const'
| |-ParmVarDecl 0x56490e06f2e0 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56490e08a338 <col:35, line:513:5>
|   |-ParenExpr 0x56490e08a048 <line:508:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08a018 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e089d70 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e089d40 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e089c50 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e089c38 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e089bf8 <col:23> 'int' lvalue ParmVar 0x56490e06f2e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e089c18 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e089d20 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e089d08 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e089c70 <col:33> 'int' lvalue ParmVar 0x56490e06f2e0 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e089ce8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e089cd0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e089c90 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e089cb0 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56490e089dd0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e089db0 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e089f78 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e089f60 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e089f40 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e089fb8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e089e40 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56490e089fd0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e089e78 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e089fe8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e089eb0 <col:143> 'int' 508
|   |     `-ImplicitCastExpr 0x56490e08a000 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e089f28 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e089f10 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e089ed0 <col:162> 'const char [36]' lvalue "int16_t Packet::anno_s16(int) const"
|   `-ReturnStmt 0x56490e08a328 <line:512:2, col:74>
|     `-ImplicitCastExpr 0x56490e08a310 <col:9, col:74> 'click_aliasable_int16_t':'short' <LValueToRValue>
|       `-UnaryOperator 0x56490e08a2f8 <col:9, col:74> 'const click_aliasable_int16_t':'const short' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56490e08a2c8 <col:10, col:74> 'const click_aliasable_int16_t *' reinterpret_cast<const click_aliasable_int16_t *> <BitCast>
|           `-BinaryOperator 0x56490e08a240 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56490e08a210 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56490e08a1c0 <col:60, col:69> 'char const[48]' lvalue ->c 0x56490e074d20
|             |   `-CXXMemberCallExpr 0x56490e08a1a0 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56490e08a170 <col:60> '<bound member function type>' ->xanno 0x56490e06c388
|             |       `-CXXThisExpr 0x56490e08a160 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56490e08a228 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56490e08a1f0 <col:73> 'int' lvalue ParmVar 0x56490e06f2e0 'i' 'int'
|-CXXMethodDecl 0x56490e06f628 <line:522:5, line:528:5> line:522:10 set_anno_s16 'void (int, int16_t)'
| |-ParmVarDecl 0x56490e06f498 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56490e06f510 <col:30, col:38> col:38 used x 'int16_t':'short'
| `-CompoundStmt 0x56490e08aa18 <col:41, line:528:5>
|   |-ParenExpr 0x56490e08a7a8 <line:523:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08a778 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08a4d0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08a4a0 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08a3b0 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08a398 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08a358 <col:23> 'int' lvalue ParmVar 0x56490e06f498 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08a378 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08a480 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e08a468 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08a3d0 <col:33> 'int' lvalue ParmVar 0x56490e06f498 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08a448 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08a430 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08a3f0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e08a410 <col:49> 'int' 1
|   |   |-CXXFunctionalCastExpr 0x56490e08a530 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08a510 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e08a6d8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e08a6c0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08a6a0 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08a718 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08a5a0 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 1"
|   |     |-ImplicitCastExpr 0x56490e08a730 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08a5d8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08a748 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08a610 <col:143> 'int' 523
|   |     `-ImplicitCastExpr 0x56490e08a760 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08a688 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08a670 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08a630 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s16(int, int16_t)"
|   `-BinaryOperator 0x56490e08a9f8 <line:527:2, col:65> 'click_aliasable_int16_t':'short' lvalue '='
|     |-UnaryOperator 0x56490e08a9a8 <col:2, col:61> 'click_aliasable_int16_t':'short' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56490e08a978 <col:3, col:61> 'click_aliasable_int16_t *' reinterpret_cast<click_aliasable_int16_t *> <BitCast>
|     |   `-BinaryOperator 0x56490e08a918 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56490e08a8e8 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56490e08a898 <col:47, col:56> 'char [48]' lvalue ->c 0x56490e074d20
|     |     |   `-CXXMemberCallExpr 0x56490e08a878 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56490e08a848 <col:47> '<bound member function type>' ->xanno 0x56490e06c528
|     |     |       `-CXXThisExpr 0x56490e08a838 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56490e08a900 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56490e08a8c8 <col:60> 'int' lvalue ParmVar 0x56490e06f498 'i' 'int'
|     `-ImplicitCastExpr 0x56490e08a9e0 <col:65> 'int16_t':'short' <LValueToRValue>
|       `-DeclRefExpr 0x56490e08a9c0 <col:65> 'int16_t':'short' lvalue ParmVar 0x56490e06f510 'x' 'int16_t':'short'
|-CXXMethodDecl 0x56490e06f7e8 <line:535:5, line:541:5> line:535:14 used anno_u32 'uint32_t (int) const'
| |-ParmVarDecl 0x56490e06f6f0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56490e08b0e8 <col:36, line:541:5>
|   |-ParenExpr 0x56490e08ae88 <line:536:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08ae58 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08abb0 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08ab80 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08aa90 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08aa78 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08aa38 <col:23> 'int' lvalue ParmVar 0x56490e06f6f0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08aa58 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08ab60 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e08ab48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08aab0 <col:33> 'int' lvalue ParmVar 0x56490e06f6f0 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08ab28 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08ab10 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08aad0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e08aaf0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56490e08ac10 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08abf0 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e08adb8 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e08ada0 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08ad80 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08adf8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08ac80 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56490e08ae10 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08acb8 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08ae28 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08acf0 <col:143> 'int' 536
|   |     `-ImplicitCastExpr 0x56490e08ae40 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08ad68 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08ad50 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08ad10 <col:162> 'const char [37]' lvalue "uint32_t Packet::anno_u32(int) const"
|   `-ReturnStmt 0x56490e08b0d8 <line:540:2, col:75>
|     `-ImplicitCastExpr 0x56490e08b0c0 <col:9, col:75> 'click_aliasable_uint32_t':'unsigned int' <LValueToRValue>
|       `-UnaryOperator 0x56490e08b0a8 <col:9, col:75> 'const click_aliasable_uint32_t':'const unsigned int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56490e08b078 <col:10, col:75> 'const click_aliasable_uint32_t *' reinterpret_cast<const click_aliasable_uint32_t *> <BitCast>
|           `-BinaryOperator 0x56490e08b020 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56490e08aff0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56490e08afa0 <col:61, col:70> 'char const[48]' lvalue ->c 0x56490e074d20
|             |   `-CXXMemberCallExpr 0x56490e08af80 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56490e08af50 <col:61> '<bound member function type>' ->xanno 0x56490e06c388
|             |       `-CXXThisExpr 0x56490e08af40 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56490e08b008 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56490e08afd0 <col:74> 'int' lvalue ParmVar 0x56490e06f6f0 'i' 'int'
|-CXXMethodDecl 0x56490e06f9b8 <line:550:5, col:75> col:45 used set_anno_u32 'void (int, uint32_t)'
| |-ParmVarDecl 0x56490e06f8a8 <col:58, col:62> col:62 i 'int'
| |-ParmVarDecl 0x56490e06f920 <col:65, col:74> col:74 x 'uint32_t':'unsigned int'
| |-NoInlineAttr 0x56490e06fa68 <col:20>
| `-OptimizeNoneAttr 0x56490e06fac0 <col:30>
|-CXXMethodDecl 0x56490e06fbf8 <line:556:5, line:562:5> line:556:13 used anno_s32 'int32_t (int) const'
| |-ParmVarDecl 0x56490e06fb00 <col:22, col:26> col:26 used i 'int'
| `-CompoundStmt 0x56490e08b7b8 <col:35, line:562:5>
|   |-ParenExpr 0x56490e08b558 <line:557:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08b528 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08b280 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08b250 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08b160 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08b148 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08b108 <col:23> 'int' lvalue ParmVar 0x56490e06fb00 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08b128 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08b230 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e08b218 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08b180 <col:33> 'int' lvalue ParmVar 0x56490e06fb00 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08b1f8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08b1e0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08b1a0 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e08b1c0 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56490e08b2e0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08b2c0 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e08b488 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e08b470 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08b450 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08b4c8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08b350 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56490e08b4e0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08b388 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08b4f8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08b3c0 <col:143> 'int' 557
|   |     `-ImplicitCastExpr 0x56490e08b510 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08b438 <col:148, col:162> 'const char [36]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08b420 <col:162> 'const char [36]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08b3e0 <col:162> 'const char [36]' lvalue "int32_t Packet::anno_s32(int) const"
|   `-ReturnStmt 0x56490e08b7a8 <line:561:2, col:74>
|     `-ImplicitCastExpr 0x56490e08b790 <col:9, col:74> 'click_aliasable_int32_t':'int' <LValueToRValue>
|       `-UnaryOperator 0x56490e08b778 <col:9, col:74> 'const click_aliasable_int32_t':'const int' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56490e08b748 <col:10, col:74> 'const click_aliasable_int32_t *' reinterpret_cast<const click_aliasable_int32_t *> <BitCast>
|           `-BinaryOperator 0x56490e08b6f0 <col:60, col:73> 'const char *' '+'
|             |-ImplicitCastExpr 0x56490e08b6c0 <col:60, col:69> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56490e08b670 <col:60, col:69> 'char const[48]' lvalue ->c 0x56490e074d20
|             |   `-CXXMemberCallExpr 0x56490e08b650 <col:60, col:66> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56490e08b620 <col:60> '<bound member function type>' ->xanno 0x56490e06c388
|             |       `-CXXThisExpr 0x56490e08b610 <col:60> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56490e08b6d8 <col:73> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56490e08b6a0 <col:73> 'int' lvalue ParmVar 0x56490e06fb00 'i' 'int'
|-CXXMethodDecl 0x56490e06fe08 <line:571:5, line:577:5> line:571:10 used set_anno_s32 'void (int, int32_t)'
| |-ParmVarDecl 0x56490e06fcb8 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56490e06fd30 <col:30, col:38> col:38 used x 'int32_t':'int'
| `-CompoundStmt 0x56490e08be98 <col:41, line:577:5>
|   |-ParenExpr 0x56490e08bc28 <line:572:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08bbf8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08b950 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08b920 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08b830 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08b818 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08b7d8 <col:23> 'int' lvalue ParmVar 0x56490e06fcb8 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08b7f8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08b900 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e08b8e8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08b850 <col:33> 'int' lvalue ParmVar 0x56490e06fcb8 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08b8c8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08b8b0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08b870 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e08b890 <col:49> 'int' 3
|   |   |-CXXFunctionalCastExpr 0x56490e08b9b0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08b990 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e08bb58 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e08bb40 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08bb20 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08bb98 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08ba20 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 3"
|   |     |-ImplicitCastExpr 0x56490e08bbb0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08ba58 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08bbc8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08ba90 <col:143> 'int' 572
|   |     `-ImplicitCastExpr 0x56490e08bbe0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08bb08 <col:148, col:162> 'const char [40]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08baf0 <col:162> 'const char [40]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08bab0 <col:162> 'const char [40]' lvalue "void Packet::set_anno_s32(int, int32_t)"
|   `-BinaryOperator 0x56490e08be78 <line:576:2, col:65> 'click_aliasable_int32_t':'int' lvalue '='
|     |-UnaryOperator 0x56490e08be28 <col:2, col:61> 'click_aliasable_int32_t':'int' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56490e08bdf8 <col:3, col:61> 'click_aliasable_int32_t *' reinterpret_cast<click_aliasable_int32_t *> <BitCast>
|     |   `-BinaryOperator 0x56490e08bd98 <col:47, col:60> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56490e08bd68 <col:47, col:56> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56490e08bd18 <col:47, col:56> 'char [48]' lvalue ->c 0x56490e074d20
|     |     |   `-CXXMemberCallExpr 0x56490e08bcf8 <col:47, col:53> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56490e08bcc8 <col:47> '<bound member function type>' ->xanno 0x56490e06c528
|     |     |       `-CXXThisExpr 0x56490e08bcb8 <col:47> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56490e08bd80 <col:60> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56490e08bd48 <col:60> 'int' lvalue ParmVar 0x56490e06fcb8 'i' 'int'
|     `-ImplicitCastExpr 0x56490e08be60 <col:65> 'int32_t':'int' <LValueToRValue>
|       `-DeclRefExpr 0x56490e08be40 <col:65> 'int32_t':'int' lvalue ParmVar 0x56490e06fd30 'x' 'int32_t':'int'
|-CXXMethodDecl 0x56490e06ffc8 <line:585:5, line:591:5> line:585:14 used anno_u64 'uint64_t (int) const'
| |-ParmVarDecl 0x56490e06fed0 <col:23, col:27> col:27 used i 'int'
| `-CompoundStmt 0x56490e08c5c8 <col:36, line:591:5>
|   |-ParenExpr 0x56490e08c308 <line:586:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08c2d8 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08c030 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08c000 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08bf10 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08bef8 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08beb8 <col:23> 'int' lvalue ParmVar 0x56490e06fed0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08bed8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08bfe0 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e08bfc8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08bf30 <col:33> 'int' lvalue ParmVar 0x56490e06fed0 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08bfa8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08bf90 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08bf50 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e08bf70 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56490e08c090 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08c070 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e08c238 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e08c220 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08c200 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08c278 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08c100 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56490e08c290 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08c138 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08c2a8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08c170 <col:143> 'int' 586
|   |     `-ImplicitCastExpr 0x56490e08c2c0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08c1e8 <col:148, col:162> 'const char [37]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08c1d0 <col:162> 'const char [37]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08c190 <col:162> 'const char [37]' lvalue "uint64_t Packet::anno_u64(int) const"
|   `-ReturnStmt 0x56490e08c5b8 <line:590:2, col:75>
|     `-ImplicitCastExpr 0x56490e08c5a0 <col:9, col:75> 'click_aliasable_uint64_t':'unsigned long' <LValueToRValue>
|       `-UnaryOperator 0x56490e08c588 <col:9, col:75> 'const click_aliasable_uint64_t':'const unsigned long' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56490e08c558 <col:10, col:75> 'const click_aliasable_uint64_t *' reinterpret_cast<const click_aliasable_uint64_t *> <BitCast>
|           `-BinaryOperator 0x56490e08c4d0 <col:61, col:74> 'const char *' '+'
|             |-ImplicitCastExpr 0x56490e08c4a0 <col:61, col:70> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56490e08c450 <col:61, col:70> 'char const[48]' lvalue ->c 0x56490e074d20
|             |   `-CXXMemberCallExpr 0x56490e08c430 <col:61, col:67> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56490e08c400 <col:61> '<bound member function type>' ->xanno 0x56490e06c388
|             |       `-CXXThisExpr 0x56490e08c3f0 <col:61> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56490e08c4b8 <col:74> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56490e08c480 <col:74> 'int' lvalue ParmVar 0x56490e06fed0 'i' 'int'
|-CXXMethodDecl 0x56490e070218 <line:600:5, line:606:5> line:600:10 used set_anno_u64 'void (int, uint64_t)'
| |-ParmVarDecl 0x56490e070088 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56490e070100 <col:30, col:39> col:39 used x 'uint64_t':'unsigned long'
| `-CompoundStmt 0x56490e08cca8 <col:42, line:606:5>
|   |-ParenExpr 0x56490e08ca38 <line:601:2, col:182> 'void'
|   | `-ConditionalOperator 0x56490e08ca08 <col:3, col:181> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08c760 <col:3, col:50> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08c730 <col:23, col:49> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08c640 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08c628 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08c5e8 <col:23> 'int' lvalue ParmVar 0x56490e070088 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08c608 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08c710 <col:33, col:49> 'bool' '<'
|   |   |     |-ImplicitCastExpr 0x56490e08c6f8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08c660 <col:33> 'int' lvalue ParmVar 0x56490e070088 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08c6d8 <col:37, col:49> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08c6c0 <col:37> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08c680 <col:37> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-IntegerLiteral 0x56490e08c6a0 <col:49> 'int' 7
|   |   |-CXXFunctionalCastExpr 0x56490e08c7c0 <col:54, col:61> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08c7a0 <col:60> 'int' 0
|   |   `-CallExpr 0x56490e08c968 <col:65, col:181> 'void'
|   |     |-ImplicitCastExpr 0x56490e08c950 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08c930 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08c9a8 <col:80> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08c830 <col:80> 'const char [28]' lvalue "i >= 0 && i < anno_size - 7"
|   |     |-ImplicitCastExpr 0x56490e08c9c0 <col:111> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08c868 <col:111> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08c9d8 <col:143> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08c8a0 <col:143> 'int' 601
|   |     `-ImplicitCastExpr 0x56490e08c9f0 <col:148, col:162> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08c918 <col:148, col:162> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08c900 <col:162> 'const char [41]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08c8c0 <col:162> 'const char [41]' lvalue "void Packet::set_anno_u64(int, uint64_t)"
|   `-BinaryOperator 0x56490e08cc88 <line:605:2, col:66> 'click_aliasable_uint64_t':'unsigned long' lvalue '='
|     |-UnaryOperator 0x56490e08cc38 <col:2, col:62> 'click_aliasable_uint64_t':'unsigned long' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56490e08cc08 <col:3, col:62> 'click_aliasable_uint64_t *' reinterpret_cast<click_aliasable_uint64_t *> <BitCast>
|     |   `-BinaryOperator 0x56490e08cba8 <col:48, col:61> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56490e08cb78 <col:48, col:57> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56490e08cb28 <col:48, col:57> 'char [48]' lvalue ->c 0x56490e074d20
|     |     |   `-CXXMemberCallExpr 0x56490e08cb08 <col:48, col:54> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56490e08cad8 <col:48> '<bound member function type>' ->xanno 0x56490e06c528
|     |     |       `-CXXThisExpr 0x56490e08cac8 <col:48> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56490e08cb90 <col:61> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56490e08cb58 <col:61> 'int' lvalue ParmVar 0x56490e070088 'i' 'int'
|     `-ImplicitCastExpr 0x56490e08cc70 <col:66> 'uint64_t':'unsigned long' <LValueToRValue>
|       `-DeclRefExpr 0x56490e08cc50 <col:66> 'uint64_t':'unsigned long' lvalue ParmVar 0x56490e070100 'x' 'uint64_t':'unsigned long'
|-CXXMethodDecl 0x56490e0703b0 <line:614:5, line:620:5> line:614:11 anno_ptr 'void *(int) const'
| |-ParmVarDecl 0x56490e0702e0 <col:20, col:24> col:24 used i 'int'
| `-CompoundStmt 0x56490e08d518 <col:33, line:620:5>
|   |-ParenExpr 0x56490e08d290 <line:615:2, col:220> 'void'
|   | `-ConditionalOperator 0x56490e08d260 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08ceb0 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08ce80 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08cd20 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08cd08 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08ccc8 <col:23> 'int' lvalue ParmVar 0x56490e0702e0 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08cce8 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08ce60 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56490e08ce48 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08cd40 <col:33> 'int' lvalue ParmVar 0x56490e0702e0 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08ce28 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08ce10 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08cd60 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56490e08cde8 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56490e08cdd0 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56490e08cd98 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56490e08cf10 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08cef0 <col:79> 'int' 0
|   |   `-CallExpr 0x56490e08d1c0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56490e08d1a8 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08d188 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08d200 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08cff8 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56490e08d218 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08d040 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08d230 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08d078 <col:181> 'int' 615
|   |     `-ImplicitCastExpr 0x56490e08d248 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08d170 <col:186, col:200> 'const char [34]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08d158 <col:200> 'const char [34]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08d118 <col:200> 'const char [34]' lvalue "void *Packet::anno_ptr(int) const"
|   `-ReturnStmt 0x56490e08d508 <line:619:2, col:81>
|     `-ImplicitCastExpr 0x56490e08d4f0 <col:9, col:81> 'click_aliasable_void_pointer_t':'void *' <LValueToRValue>
|       `-UnaryOperator 0x56490e08d4d8 <col:9, col:81> 'const click_aliasable_void_pointer_t':'void *const' lvalue prefix '*' cannot overflow
|         `-CXXReinterpretCastExpr 0x56490e08d4a8 <col:10, col:81> 'const click_aliasable_void_pointer_t *' reinterpret_cast<const click_aliasable_void_pointer_t *> <BitCast>
|           `-BinaryOperator 0x56490e08d420 <col:67, col:80> 'const char *' '+'
|             |-ImplicitCastExpr 0x56490e08d3f0 <col:67, col:76> 'const char *' <ArrayToPointerDecay>
|             | `-MemberExpr 0x56490e08d3a0 <col:67, col:76> 'char const[48]' lvalue ->c 0x56490e074d20
|             |   `-CXXMemberCallExpr 0x56490e08d380 <col:67, col:73> 'const Packet::Anno *'
|             |     `-MemberExpr 0x56490e08d350 <col:67> '<bound member function type>' ->xanno 0x56490e06c388
|             |       `-CXXThisExpr 0x56490e08d340 <col:67> 'const Packet *' implicit this
|             `-ImplicitCastExpr 0x56490e08d408 <col:80> 'int' <LValueToRValue>
|               `-DeclRefExpr 0x56490e08d3d0 <col:80> 'int' lvalue ParmVar 0x56490e0702e0 'i' 'int'
|-CXXMethodDecl 0x56490e0705c8 <line:629:5, line:635:5> line:629:10 set_anno_ptr 'void (int, const void *)'
| |-ParmVarDecl 0x56490e070470 <col:23, col:27> col:27 used i 'int'
| |-ParmVarDecl 0x56490e0704f0 <col:30, col:42> col:42 used x 'const void *'
| `-CompoundStmt 0x56490e08dd70 <col:45, line:635:5>
|   |-ParenExpr 0x56490e08dac0 <line:630:2, col:220> 'void'
|   | `-ConditionalOperator 0x56490e08da90 <col:3, col:219> 'void'
|   |   |-CXXStaticCastExpr 0x56490e08d720 <col:3, col:69> 'bool' static_cast<_Bool> <NoOp>
|   |   | `-BinaryOperator 0x56490e08d6f0 <col:23, col:68> 'bool' '&&'
|   |   |   |-BinaryOperator 0x56490e08d590 <col:23, col:28> 'bool' '>='
|   |   |   | |-ImplicitCastExpr 0x56490e08d578 <col:23> 'int' <LValueToRValue>
|   |   |   | | `-DeclRefExpr 0x56490e08d538 <col:23> 'int' lvalue ParmVar 0x56490e070470 'i' 'int'
|   |   |   | `-IntegerLiteral 0x56490e08d558 <col:28> 'int' 0
|   |   |   `-BinaryOperator 0x56490e08d6d0 <col:33, col:68> 'bool' '<='
|   |   |     |-ImplicitCastExpr 0x56490e08d6b8 <col:33> 'int' <LValueToRValue>
|   |   |     | `-DeclRefExpr 0x56490e08d5b0 <col:33> 'int' lvalue ParmVar 0x56490e070470 'i' 'int'
|   |   |     `-BinaryOperator 0x56490e08d698 <col:38, col:68> 'int' '-'
|   |   |       |-ImplicitCastExpr 0x56490e08d680 <col:38> 'int' <IntegralCast>
|   |   |       | `-DeclRefExpr 0x56490e08d5d0 <col:38> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)' EnumConstant 0x56490e06c770 'anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:349:5)'
|   |   |       `-CStyleCastExpr 0x56490e08d658 <col:50, col:68> 'int' <NoOp>
|   |   |         `-ImplicitCastExpr 0x56490e08d640 <col:55, col:68> 'int' <IntegralCast> part_of_explicit_cast
|   |   |           `-UnaryExprOrTypeTraitExpr 0x56490e08d608 <col:55, col:68> 'unsigned long' sizeof 'void *'
|   |   |-CXXFunctionalCastExpr 0x56490e08d780 <col:73, col:80> 'void' functional cast to void <ToVoid>
|   |   | `-IntegerLiteral 0x56490e08d760 <col:79> 'int' 0
|   |   `-CallExpr 0x56490e08d9f0 <col:84, col:219> 'void'
|   |     |-ImplicitCastExpr 0x56490e08d9a0 <col:84> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490e08d980 <col:84> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|   |     |-ImplicitCastExpr 0x56490e08da30 <col:99> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08d7f0 <col:99> 'const char [47]' lvalue "i >= 0 && i <= anno_size - (int)sizeof(void *)"
|   |     |-ImplicitCastExpr 0x56490e08da48 <col:149> 'const char *' <ArrayToPointerDecay>
|   |     | `-StringLiteral 0x56490e08d838 <col:149> 'const char [29]' lvalue "../dummy_inc/click/packet.hh"
|   |     |-ImplicitCastExpr 0x56490e08da60 <col:181> 'unsigned int' <IntegralCast>
|   |     | `-IntegerLiteral 0x56490e08d870 <col:181> 'int' 630
|   |     `-ImplicitCastExpr 0x56490e08da78 <col:186, col:200> 'const char *' <ArrayToPointerDecay>
|   |       `-UnaryOperator 0x56490e08d968 <col:186, col:200> 'const char [45]' lvalue prefix '__extension__' cannot overflow
|   |         `-PredefinedExpr 0x56490e08d950 <col:200> 'const char [45]' lvalue __PRETTY_FUNCTION__
|   |           `-StringLiteral 0x56490e08d908 <col:200> 'const char [45]' lvalue "void Packet::set_anno_ptr(int, const void *)"
|   `-BinaryOperator 0x56490e08dd50 <line:634:2, col:92> 'click_aliasable_void_pointer_t':'void *' lvalue '='
|     |-UnaryOperator 0x56490e08dcb8 <col:2, col:68> 'click_aliasable_void_pointer_t':'void *' lvalue prefix '*' cannot overflow
|     | `-CXXReinterpretCastExpr 0x56490e08dc88 <col:3, col:68> 'click_aliasable_void_pointer_t *' reinterpret_cast<click_aliasable_void_pointer_t *> <BitCast>
|     |   `-BinaryOperator 0x56490e08dc30 <col:54, col:67> 'char *' '+'
|     |     |-ImplicitCastExpr 0x56490e08dc00 <col:54, col:63> 'char *' <ArrayToPointerDecay>
|     |     | `-MemberExpr 0x56490e08dbb0 <col:54, col:63> 'char [48]' lvalue ->c 0x56490e074d20
|     |     |   `-CXXMemberCallExpr 0x56490e08db90 <col:54, col:60> 'Packet::Anno *'
|     |     |     `-MemberExpr 0x56490e08db60 <col:54> '<bound member function type>' ->xanno 0x56490e06c528
|     |     |       `-CXXThisExpr 0x56490e08db50 <col:54> 'Packet *' implicit this
|     |     `-ImplicitCastExpr 0x56490e08dc18 <col:67> 'int' <LValueToRValue>
|     |       `-DeclRefExpr 0x56490e08dbe0 <col:67> 'int' lvalue ParmVar 0x56490e070470 'i' 'int'
|     `-CXXConstCastExpr 0x56490e08dd20 <col:72, col:92> 'void *' const_cast<void *> <NoOp>
|       `-ImplicitCastExpr 0x56490e08dd08 <col:91> 'const void *' <LValueToRValue> part_of_explicit_cast
|         `-DeclRefExpr 0x56490e08dcd0 <col:91> 'const void *' lvalue ParmVar 0x56490e0704f0 'x' 'const void *'
|-CXXMethodDecl 0x56490e070698 <line:638:5, line:640:5> line:638:20 data_packet 'Packet *()' inline
| `-CompoundStmt 0x56490e08ddf8 <col:34, line:640:5>
|   `-ReturnStmt 0x56490e08dde8 <line:639:9, col:16>
|     `-ImplicitCastExpr 0x56490e08ddd0 <col:16> 'Packet *' <LValueToRValue>
|       `-MemberExpr 0x56490e08dda0 <col:16> 'Packet *' lvalue ->_data_packet 0x56490e085ab8
|         `-CXXThisExpr 0x56490e08dd90 <col:16> 'Packet *' implicit this
|-CXXMethodDecl 0x56490e0707d8 <line:643:5, col:50> col:17 used clear_annotations 'void (bool)' inline
| `-ParmVarDecl 0x56490e070748 <col:35, col:46> col:40 all 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56490e086f08 <col:46> 'bool' true
|-CXXMethodDecl 0x56490e070958 <line:644:5, col:48> col:17 copy_annotations 'void (const Packet *)' inline
| `-ParmVarDecl 0x56490e070890 <col:34, col:47> col:48 'const Packet *'
|-EnumDecl 0x56490e070a00 <line:648:5, line:660:5> line:648:5
| |-DeprecatedAttr 0x56490e0711b0 <line:660:22> "" ""
| |-EnumConstantDecl 0x56490e070b00 <line:649:2, col:21> col:2 DEFAULT_HEADROOM 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e071220 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070ae0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 28
| |     `-DeclRefExpr 0x56490e070ac0 <col:21> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56490e065c80 'default_headroom' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56490e070b90 <line:650:2, col:22> col:2 MIN_BUFFER_LENGTH 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e071238 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070b70 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' Int: 64
| |     `-DeclRefExpr 0x56490e070b50 <col:22> 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)' EnumConstant 0x56490e065d10 'min_buffer_length' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:41:5)'
| |-EnumConstantDecl 0x56490e070c20 <line:651:2, col:21> col:2 referenced addr_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e071250 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070c00 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e070be0 <col:21> 'int' 0
| |-EnumConstantDecl 0x56490e070cb0 <line:652:2, col:19> col:2 referenced addr_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e071268 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070c90 <col:19> 'int' Int: 16
| |     `-IntegerLiteral 0x56490e070c70 <col:19> 'int' 16
| |-EnumConstantDecl 0x56490e070d40 <line:653:2, col:21> col:2 referenced user_anno_offset 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e071280 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070d20 <col:21> 'int' Int: 16
| |     `-IntegerLiteral 0x56490e070d00 <col:21> 'int' 16
| |-EnumConstantDecl 0x56490e070dd0 <line:654:2, col:19> col:2 referenced user_anno_size 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e071298 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070db0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56490e070d90 <col:19> 'int' 32
| |-EnumConstantDecl 0x56490e070e60 <line:655:2, col:19> col:2 ADDR_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e0712b0 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070e40 <col:19> 'int' Int: 16
| |     `-DeclRefExpr 0x56490e070e20 <col:19> 'int' EnumConstant 0x56490e070cb0 'addr_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56490e070ef0 <line:656:2, col:19> col:2 referenced USER_ANNO_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e0712c8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070ed0 <col:19> 'int' Int: 32
| |     `-DeclRefExpr 0x56490e070eb0 <col:19> 'int' EnumConstant 0x56490e070dd0 'user_anno_size' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |-EnumConstantDecl 0x56490e070fc0 <line:657:2, col:40> col:2 USER_ANNO_U16_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e0712e0 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e070fa0 <col:23, col:40> 'int' Int: 16
| |     `-BinaryOperator 0x56490e070f80 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56490e070f40 <col:23> 'int' EnumConstant 0x56490e070ef0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56490e070f60 <col:40> 'int' 2
| |-EnumConstantDecl 0x56490e071090 <line:658:2, col:40> col:2 USER_ANNO_U32_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| | `-ImplicitCastExpr 0x56490e0712f8 <col:23, col:40> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e071070 <col:23, col:40> 'int' Int: 8
| |     `-BinaryOperator 0x56490e071050 <col:23, col:40> 'int' '/'
| |       |-DeclRefExpr 0x56490e071010 <col:23> 'int' EnumConstant 0x56490e070ef0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
| |       `-IntegerLiteral 0x56490e071030 <col:40> 'int' 4
| `-EnumConstantDecl 0x56490e071160 <line:659:2, col:40> col:2 USER_ANNO_U64_SIZE 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|   `-ImplicitCastExpr 0x56490e071310 <col:23, col:40> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e071140 <col:23, col:40> 'int' Int: 4
|       `-BinaryOperator 0x56490e071120 <col:23, col:40> 'int' '/'
|         |-DeclRefExpr 0x56490e0710e0 <col:23> 'int' EnumConstant 0x56490e070ef0 'USER_ANNO_SIZE' 'Packet::(anonymous enum at ../dummy_inc/click/packet.hh:648:5)'
|         `-IntegerLiteral 0x56490e071100 <col:40> 'int' 8
|-CXXMethodDecl 0x56490e071350 <line:661:5, col:79> col:33 buffer_data 'const unsigned char *() const' inline
| `-DeprecatedAttr 0x56490e0713f0 <col:68> "" ""
|-CXXMethodDecl 0x56490e071488 <line:662:5, col:56> col:18 addr_anno 'void *()' inline
| `-DeprecatedAttr 0x56490e071528 <col:45> "" ""
|-CXXMethodDecl 0x56490e0715c0 <line:663:5, col:68> col:24 addr_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56490e071660 <col:57> "" ""
|-CXXMethodDecl 0x56490e0716f8 <line:664:5, col:56> col:18 user_anno 'void *()' inline
| `-DeprecatedAttr 0x56490e071798 <col:45> "" ""
|-CXXMethodDecl 0x56490e071830 <line:665:5, col:68> col:24 user_anno 'const void *() const' inline
| `-DeprecatedAttr 0x56490e0718d0 <col:57> "" ""
|-CXXMethodDecl 0x56490e071960 <line:666:5, col:62> col:21 user_anno_u8 'uint8_t *()' inline
| `-DeprecatedAttr 0x56490e071a00 <col:51> "" ""
|-CXXMethodDecl 0x56490e071a90 <line:667:5, col:74> col:27 user_anno_u8 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56490e071b30 <col:63> "" ""
|-CXXMethodDecl 0x56490e071bc0 <line:668:5, col:64> col:22 user_anno_u32 'uint32_t *()' inline
| `-DeprecatedAttr 0x56490e071c60 <col:53> "" ""
|-CXXMethodDecl 0x56490e071cf0 <line:669:5, col:76> col:28 user_anno_u32 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56490e071d90 <col:65> "" ""
|-CXXMethodDecl 0x56490e071ea8 <line:670:5, col:72> col:20 user_anno_u8 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56490e071e18 <col:33, col:37> col:37 i 'int'
| `-DeprecatedAttr 0x56490e071f50 <col:61> "" ""
|-CXXMethodDecl 0x56490e0720e8 <line:671:5, col:78> col:17 set_user_anno_u8 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56490e071fd8 <col:34, col:38> col:38 i 'int'
| |-ParmVarDecl 0x56490e072050 <col:41, col:49> col:49 v 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56490e072198 <col:67> "" ""
|-CXXMethodDecl 0x56490e0722b0 <line:672:5, col:74> col:21 user_anno_u16 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56490e072220 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56490e072358 <col:63> "" ""
|-CXXMethodDecl 0x56490e0724f0 <line:673:5, col:80> col:17 set_user_anno_u16 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56490e0723e0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56490e072458 <col:42, col:51> col:51 v 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56490e0725a0 <col:69> "" ""
|-CXXMethodDecl 0x56490e0726b8 <line:674:5, col:74> col:21 user_anno_u32 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56490e072628 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56490e072760 <col:63> "" ""
|-CXXMethodDecl 0x56490e0728f8 <line:675:5, col:80> col:17 set_user_anno_u32 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56490e0727e8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56490e072860 <col:42, col:51> col:51 v 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490e0729a8 <col:69> "" ""
|-CXXMethodDecl 0x56490e072ac0 <line:676:5, col:73> col:20 user_anno_s32 'int32_t (int) const' inline
| |-ParmVarDecl 0x56490e072a30 <col:34, col:38> col:38 i 'int'
| `-DeprecatedAttr 0x56490e072b68 <col:62> "" ""
|-CXXMethodDecl 0x56490e072d00 <line:677:5, col:79> col:17 set_user_anno_s32 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56490e072bf0 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56490e072c68 <col:42, col:50> col:50 v 'int32_t':'int'
| `-DeprecatedAttr 0x56490e072db0 <col:68> "" ""
|-CXXMethodDecl 0x56490e072ec8 <line:679:5, col:74> col:21 user_anno_u64 'uint64_t (int) const' inline
| |-ParmVarDecl 0x56490e072e38 <col:35, col:39> col:39 i 'int'
| `-DeprecatedAttr 0x56490e072f70 <col:63> "" ""
|-CXXMethodDecl 0x56490e073108 <line:680:5, col:80> col:17 set_user_anno_u64 'void (int, uint64_t)' inline
| |-ParmVarDecl 0x56490e072ff8 <col:35, col:39> col:39 i 'int'
| |-ParmVarDecl 0x56490e073070 <col:42, col:51> col:51 v 'uint64_t':'unsigned long'
| `-DeprecatedAttr 0x56490e0731b8 <col:69> "" ""
|-CXXMethodDecl 0x56490e073248 <line:682:5, col:75> col:27 all_user_anno 'const uint8_t *() const' inline
| `-DeprecatedAttr 0x56490e0732e8 <col:64> "" ""
|-CXXMethodDecl 0x56490e073378 <line:683:5, col:63> col:21 all_user_anno 'uint8_t *()' inline
| `-DeprecatedAttr 0x56490e073418 <col:52> "" ""
|-CXXMethodDecl 0x56490e0734a8 <line:684:5, col:78> col:28 all_user_anno_u 'const uint32_t *() const' inline
| `-DeprecatedAttr 0x56490e073548 <col:67> "" ""
|-CXXMethodDecl 0x56490e0735d8 <line:685:5, col:66> col:22 all_user_anno_u 'uint32_t *()' inline
| `-DeprecatedAttr 0x56490e073678 <col:55> "" ""
|-CXXMethodDecl 0x56490e073790 <line:686:5, col:69> col:20 user_anno_c 'uint8_t (int) const' inline
| |-ParmVarDecl 0x56490e073700 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56490e073838 <col:58> "" ""
|-CXXMethodDecl 0x56490e0739d0 <line:687:5, col:73> col:17 set_user_anno_c 'void (int, uint8_t)' inline
| |-ParmVarDecl 0x56490e0738c0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56490e073938 <col:38> col:45 'uint8_t':'unsigned char'
| `-DeprecatedAttr 0x56490e073a80 <col:62> "" ""
|-CXXMethodDecl 0x56490e073b98 <line:688:5, col:69> col:20 user_anno_s 'int16_t (int) const' inline
| |-ParmVarDecl 0x56490e073b08 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56490e073c40 <col:58> "" ""
|-CXXMethodDecl 0x56490e073dd8 <line:689:5, col:73> col:17 set_user_anno_s 'void (int, int16_t)' inline
| |-ParmVarDecl 0x56490e073cc8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56490e073d40 <col:38> col:45 'int16_t':'short'
| `-DeprecatedAttr 0x56490e073e88 <col:62> "" ""
|-CXXMethodDecl 0x56490e073fa0 <line:690:5, col:71> col:21 user_anno_us 'uint16_t (int) const' inline
| |-ParmVarDecl 0x56490e073f10 <col:34> col:37 'int'
| `-DeprecatedAttr 0x56490e074048 <col:60> "" ""
|-CXXMethodDecl 0x56490e0741e0 <line:691:5, col:75> col:17 set_user_anno_us 'void (int, uint16_t)' inline
| |-ParmVarDecl 0x56490e0740d0 <col:34> col:37 'int'
| |-ParmVarDecl 0x56490e074148 <col:39> col:47 'uint16_t':'unsigned short'
| `-DeprecatedAttr 0x56490e074290 <col:64> "" ""
|-CXXMethodDecl 0x56490e0743a8 <line:692:5, col:69> col:20 user_anno_i 'int32_t (int) const' inline
| |-ParmVarDecl 0x56490e074318 <col:32> col:35 'int'
| `-DeprecatedAttr 0x56490e074450 <col:58> "" ""
|-CXXMethodDecl 0x56490e0745e8 <line:693:5, col:73> col:17 set_user_anno_i 'void (int, int32_t)' inline
| |-ParmVarDecl 0x56490e0744d8 <col:33> col:36 'int'
| |-ParmVarDecl 0x56490e074550 <col:38> col:45 'int32_t':'int'
| `-DeprecatedAttr 0x56490e074698 <col:62> "" ""
|-CXXMethodDecl 0x56490e0747b0 <line:694:5, col:70> col:21 user_anno_u 'uint32_t (int) const' inline
| |-ParmVarDecl 0x56490e074720 <col:33> col:36 'int'
| `-DeprecatedAttr 0x56490e074858 <col:59> "" ""
|-CXXMethodDecl 0x56490e0749f0 <line:695:5, col:74> col:17 set_user_anno_u 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56490e0748e0 <col:33> col:36 'int'
| |-ParmVarDecl 0x56490e074958 <col:38> col:46 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490e074aa0 <col:63> "" ""
|-AccessSpecDecl 0x56490e074b10 <line:698:3, col:10> col:3 private
|-CXXRecordDecl 0x56490e074b38 prev 0x56490e06c260 <line:702:5, line:711:5> line:702:11 referenced union Anno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e074c30 <col:5, col:11> col:11 implicit union Anno
| |-FieldDecl 0x56490e074d20 <line:703:2, col:18> col:7 referenced c 'char [48]'
| |-FieldDecl 0x56490e074dd0 <line:704:2, col:22> col:10 referenced u8 'uint8_t [48]'
| |-FieldDecl 0x56490e074f58 <line:705:2, col:28> col:11 u16 'uint16_t [24]'
| |-FieldDecl 0x56490e0750d8 <line:706:2, col:28> col:11 referenced u32 'uint32_t [12]'
| |-FieldDecl 0x56490e075258 <line:708:2, col:28> col:11 u64 'uint64_t [6]'
| |-CXXConstructorDecl 0x56490e08df78 <line:702:11> col:11 implicit used Anno 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56490e08e7e8 <col:11>
| |-CXXDestructorDecl 0x56490e08e050 <col:11> col:11 implicit ~Anno 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56490e08e188 <col:11> col:11 implicit constexpr Anno 'void (const Packet::Anno &)' inline default trivial noexcept-unevaluated 0x56490e08e188
| | `-ParmVarDecl 0x56490e08e298 <col:11> col:11 'const Packet::Anno &'
| |-CXXConstructorDecl 0x56490e08e338 <col:11> col:11 implicit constexpr Anno 'void (Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56490e08e338
| | `-ParmVarDecl 0x56490e08e448 <col:11> col:11 'Packet::Anno &&'
| |-CXXMethodDecl 0x56490e091178 <col:11> col:11 implicit used constexpr operator= 'Packet::Anno &(const Packet::Anno &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56490e091288 <col:11> col:11 'const Packet::Anno &'
| | `-CompoundStmt 0x56490e091508 <col:11>
| |   `-ReturnStmt 0x56490e0914f8 <col:11>
| |     `-UnaryOperator 0x56490e0914e0 <col:11> 'Packet::Anno' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56490e0914d0 <col:11> 'Packet::Anno *' this
| `-CXXMethodDecl 0x56490e0912f8 <col:11> col:11 implicit constexpr operator= 'Packet::Anno &(Packet::Anno &&)' inline default trivial noexcept-unevaluated 0x56490e0912f8
|   `-ParmVarDecl 0x56490e091408 <col:11> col:11 'Packet::Anno &&'
|-CXXRecordDecl 0x56490e0752c0 <line:716:5, line:725:5> line:716:12 referenced struct AllAnno definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e0753d8 <col:5, col:12> col:12 implicit struct AllAnno
| |-FieldDecl 0x56490e075478 <line:717:2, col:7> col:7 cb 'Packet::Anno'
| |-FieldDecl 0x56490e0754e0 <line:718:2, col:17> col:17 referenced mac 'unsigned char *'
| |-FieldDecl 0x56490e075548 <line:719:2, col:17> col:17 referenced nh 'unsigned char *'
| |-FieldDecl 0x56490e0755b0 <line:720:2, col:17> col:17 referenced h 'unsigned char *'
| |-FieldDecl 0x56490e075610 <line:721:2, col:13> col:13 pkt_type 'Packet::PacketType'
| |-FieldDecl 0x56490e0756d0 <line:722:2, col:34> col:7 timestamp 'char [8]'
| |-FieldDecl 0x56490e075730 <line:723:2, col:10> col:10 referenced next 'Packet *'
| |-FieldDecl 0x56490e0859e0 <line:724:2, col:10> col:10 referenced prev 'Packet *'
| |-CXXConstructorDecl 0x56490e08de88 <line:716:12> col:12 implicit used AllAnno 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer Field 0x56490e075478 'cb' 'Packet::Anno'
| | | `-CXXConstructExpr 0x56490e08e7f8 <col:12> 'Packet::Anno' 'void () noexcept'
| | `-CompoundStmt 0x56490e08e850 <col:12>
| |-CXXConstructorDecl 0x56490e08e4b8 <col:12> col:12 implicit constexpr AllAnno 'void (const Packet::AllAnno &)' inline default trivial noexcept-unevaluated 0x56490e08e4b8
| | `-ParmVarDecl 0x56490e08e5c8 <col:12> col:12 'const Packet::AllAnno &'
| |-CXXConstructorDecl 0x56490e08e668 <col:12> col:12 implicit constexpr AllAnno 'void (Packet::AllAnno &&)' inline default trivial noexcept-unevaluated 0x56490e08e668
| | `-ParmVarDecl 0x56490e08e778 <col:12> col:12 'Packet::AllAnno &&'
| `-CXXDestructorDecl 0x56490e090860 <col:12> col:12 implicit ~AllAnno 'void () noexcept' inline default trivial
|-FieldDecl 0x56490e085a58 <line:731:5, col:21> col:21 referenced _use_count 'atomic_uint32_t'
|-FieldDecl 0x56490e085ab8 <line:732:5, col:13> col:13 referenced _data_packet 'Packet *'
|-FieldDecl 0x56490e085b20 <line:734:5, col:20> col:20 referenced _head 'unsigned char *'
|-FieldDecl 0x56490e085b88 <line:735:5, col:20> col:20 referenced _data 'unsigned char *'
|-FieldDecl 0x56490e085bf0 <line:736:5, col:20> col:20 referenced _tail 'unsigned char *'
|-FieldDecl 0x56490e085c58 <line:737:5, col:20> col:20 referenced _end 'unsigned char *'
|-FieldDecl 0x56490e085cb8 <line:741:5, col:13> col:13 referenced _aa 'Packet::AllAnno'
|-FieldDecl 0x56490e085d18 <line:746:5, col:28> col:28 referenced _destructor 'Packet::buffer_destructor_type':'void (*)(unsigned char *, size_t, void *)'
|-FieldDecl 0x56490e085d80 <line:747:5, col:11> col:11 referenced _destructor_argument 'void *'
|-CXXConstructorDecl 0x56490e085e08 <line:751:5, line:755:5> line:751:12 used Packet 'void ()' inline
| |-CXXCtorInitializer Field 0x56490e085a58 '_use_count' 'atomic_uint32_t'
| | `-CXXConstructExpr 0x56490e08de20 <col:12> 'atomic_uint32_t' 'void () noexcept'
| |-CXXCtorInitializer Field 0x56490e085cb8 '_aa' 'Packet::AllAnno'
| | `-CXXConstructExpr 0x56490e08e860 <col:12> 'Packet::AllAnno' 'void () noexcept'
| `-CompoundStmt 0x56490e08e8c0 <col:21, line:755:5>
|-CXXConstructorDecl 0x56490e085fa8 <line:756:5, col:27> col:5 Packet 'void (const Packet &)'
| `-ParmVarDecl 0x56490e085ee8 <col:12, col:26> col:26 x 'const Packet &'
|-CXXDestructorDecl 0x56490e0860a0 <line:757:5, col:13> col:5 used ~Packet 'void () noexcept'
|-CXXMethodDecl 0x56490e086288 <line:758:5, col:38> col:13 operator= 'Packet &(const Packet &)'
| `-ParmVarDecl 0x56490e086190 <col:23, col:37> col:37 x 'const Packet &'
|-CXXMethodDecl 0x56490e086558 <line:761:5, col:74> col:10 alloc_data 'bool (uint32_t, uint32_t, uint32_t)'
| |-ParmVarDecl 0x56490e086340 <col:21, col:30> col:30 headroom 'uint32_t':'unsigned int'
| |-ParmVarDecl 0x56490e0863b8 <col:40, col:49> col:49 length 'uint32_t':'unsigned int'
| `-ParmVarDecl 0x56490e086430 <col:57, col:66> col:66 tailroom 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e086778 <line:768:5, col:95> col:17 shift_header_annotations 'void (const unsigned char *, int32_t)' inline
| |-ParmVarDecl 0x56490e086628 <col:42, col:63> col:63 old_head 'const unsigned char *'
| `-ParmVarDecl 0x56490e0866a0 <col:73, col:81> col:81 extra_headroom 'int32_t':'int'
|-CXXMethodDecl 0x56490e086a48 <line:769:5, col:109> col:21 expensive_uniqueify 'WritablePacket *(int32_t, int32_t, bool)'
| |-ParmVarDecl 0x56490e086838 <col:41, col:49> col:49 extra_headroom 'int32_t':'int'
| |-ParmVarDecl 0x56490e0868b0 <col:65, col:73> col:73 extra_tailroom 'int32_t':'int'
| `-ParmVarDecl 0x56490e086928 <col:89, col:94> col:94 free_on_failure 'bool'
|-CXXMethodDecl 0x56490e086ba0 <line:770:5, col:51> col:21 used expensive_push 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56490e086b10 <col:36, col:45> col:45 nbytes 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e086ce8 <line:771:5, col:50> col:21 used expensive_put 'WritablePacket *(uint32_t)'
| `-ParmVarDecl 0x56490e086c58 <col:35, col:44> col:44 nbytes 'uint32_t':'unsigned int'
`-FriendDecl 0x56490e086de0 <line:773:5, col:18> col:12 'class WritablePacket':'WritablePacket'

Layout: <CGRecordLayout
  LLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  NonVirtualBaseLLVMType:%class.Packet = type { %class.atomic_uint32_t, %class.Packet*, i8*, i8*, i8*, i8*, %"struct.Packet::AllAnno", void (i8*, i64, i8*)*, i8* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dfc2350 prev 0x56490dea8e80 <../dummy_inc/click/timestamp.hh:539:5, line:566:5> line:539:11 referenced union rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dfc2448 <col:5, col:11> col:11 implicit union rep_t
|-FieldDecl 0x56490dfc24e8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
|-CXXConstructorDecl 0x56490dfc7358 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490dfc7738 <col:11>
|-CXXConstructorDecl 0x56490dfc7430 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490dfc7518 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56490dfc7e80 <col:11>
|-CXXConstructorDecl 0x56490dfc75b8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56490dfc76c8 <col:11> col:11 'Timestamp::rep_t &&'
| `-CompoundStmt 0x56490dfc9ad8 <col:11>
|-CXXDestructorDecl 0x56490dfc89e8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56490e094c88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490e094d98 <col:11> col:11 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56490e095660 <col:11>
|   `-ReturnStmt 0x56490e095650 <col:11>
|     `-UnaryOperator 0x56490e095638 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e095628 <col:11> 'Timestamp::rep_t *' this
`-CXXMethodDecl 0x56490e094e08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56490e094f18 <col:11> col:11 'Timestamp::rep_t &&'
  `-CompoundStmt 0x56490e0f08f0 <col:11>
    `-ReturnStmt 0x56490e0f08e0 <col:11>
      `-UnaryOperator 0x56490e0f08c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56490e0f08b8 <col:11> 'Timestamp::rep_t *' this

Layout: <CGRecordLayout
  LLVMType:%"union.Timestamp::rep_t" = type { i64 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dfaf818 prev 0x56490dfaf580 <../dummy_inc/click/timestamp.hh:122:1, line:723:1> line:122:7 referenced class Timestamp definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dfaf910 <col:1, col:7> col:7 implicit referenced class Timestamp
|-AccessSpecDecl 0x56490dfaf9a0 <col:19, col:25> col:19 public
|-TypedefDecl 0x56490dfaf9d8 <line:125:5, col:21> col:21 referenced seconds_type 'int32_t':'int'
| `-TypedefType 0x56490dbe8270 'int32_t' sugar
|   |-Typedef 0x56490daf8268 'int32_t'
|   `-TypedefType 0x56490dad13b0 '__int32_t' sugar
|     |-Typedef 0x56490dad0fc8 '__int32_t'
|     `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490dfafa40 <line:128:5, col:21> col:21 referenced value_type 'int64_t':'long'
| `-TypedefType 0x56490dbe8430 'int64_t' sugar
|   |-Typedef 0x56490daf82d0 'int64_t'
|   `-TypedefType 0x56490dad14d0 '__int64_t' sugar
|     |-Typedef 0x56490dad10a8 '__int64_t'
|     `-BuiltinType 0x56490da8f390 'long'
|-EnumDecl 0x56490dfafa98 <line:133:5, line:140:5> line:133:5
| |-EnumConstantDecl 0x56490dfafc10 <line:134:9, col:38> col:9 max_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
| | `-ConstantExpr 0x56490dfafbf0 <col:23, col:38> 'Timestamp::seconds_type':'int' Int: 2147483647
| |   `-CStyleCastExpr 0x56490dfafbc8 <col:23, col:38> 'Timestamp::seconds_type':'int' <NoOp>
| |     `-ImplicitCastExpr 0x56490dfafbb0 <col:38> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
| |       `-IntegerLiteral 0x56490dfafb80 <col:38> 'unsigned int' 2147483647
| `-EnumConstantDecl 0x56490dfafd08 <line:137:9, col:39> col:9 min_seconds 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:133:5)'
|   `-ConstantExpr 0x56490dfafce8 <col:23, col:39> 'Timestamp::seconds_type':'int' Int: -2147483648
|     `-CStyleCastExpr 0x56490dfafcc0 <col:23, col:39> 'Timestamp::seconds_type':'int' <NoOp>
|       `-ImplicitCastExpr 0x56490dfafca8 <col:38, col:39> 'Timestamp::seconds_type':'int' <IntegralCast> part_of_explicit_cast
|         `-UnaryOperator 0x56490dfafc80 <col:38, col:39> 'unsigned int' prefix '-'
|           `-IntegerLiteral 0x56490dfafc60 <col:39> 'unsigned int' 2147483648
|-EnumDecl 0x56490dfafd58 <line:142:5, line:162:5> line:142:5
| |-EnumConstantDecl 0x56490dfafe60 <line:143:9, col:24> col:9 referenced nsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8bd0 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfafe40 <col:24> 'int' Int: 1000000000
| |     `-IntegerLiteral 0x56490dfafe20 <col:24> 'int' 1000000000
| |-EnumConstantDecl 0x56490dfafef0 <line:144:9, col:25> col:9 nsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8be8 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfafed0 <col:25> 'int' Int: 1000000
| |     `-IntegerLiteral 0x56490dfafeb0 <col:25> 'int' 1000000
| |-EnumConstantDecl 0x56490dfaff80 <line:145:9, col:25> col:9 nsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8c00 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfaff60 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x56490dfaff40 <col:25> 'int' 1000
| |-EnumConstantDecl 0x56490dfb0010 <line:146:9, col:24> col:9 referenced usec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8c18 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfafff0 <col:24> 'int' Int: 1000000
| |     `-IntegerLiteral 0x56490dfaffd0 <col:24> 'int' 1000000
| |-EnumConstantDecl 0x56490dfb00a0 <line:147:9, col:25> col:9 usec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8c30 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfb0080 <col:25> 'int' Int: 1000
| |     `-IntegerLiteral 0x56490dfb0060 <col:25> 'int' 1000
| |-EnumConstantDecl 0x56490dfb0130 <line:148:9, col:24> col:9 referenced msec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8c48 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfb0110 <col:24> 'int' Int: 1000
| |     `-IntegerLiteral 0x56490dfb00f0 <col:24> 'int' 1000
| |-EnumConstantDecl 0x56490dea89e0 <line:150:9, col:26> col:9 referenced subsec_per_sec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8c60 <col:26> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dea89c0 <col:26> 'int' Int: 1000000000
| |     `-DeclRefExpr 0x56490dfb0180 <col:26> 'int' EnumConstant 0x56490dfafe60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |-EnumConstantDecl 0x56490dea8ab0 <line:157:9, col:44> col:9 referenced subsec_per_msec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| | `-ImplicitCastExpr 0x56490dea8c78 <col:27, col:44> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dea8a90 <col:27, col:44> 'int' Int: 1000000
| |     `-BinaryOperator 0x56490dea8a70 <col:27, col:44> 'int' '/'
| |       |-DeclRefExpr 0x56490dea8a30 <col:27> 'int' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| |       `-DeclRefExpr 0x56490dea8a50 <col:44> 'int' EnumConstant 0x56490dfb0130 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
| `-EnumConstantDecl 0x56490dea8b80 <line:158:9, col:44> col:9 referenced subsec_per_usec 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ImplicitCastExpr 0x56490dea8c90 <col:27, col:44> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490dea8b60 <col:27, col:44> 'int' Int: 1000
|       `-BinaryOperator 0x56490dea8b40 <col:27, col:44> 'int' '/'
|         |-DeclRefExpr 0x56490dea8b00 <col:27> 'int' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|         `-DeclRefExpr 0x56490dea8b20 <col:44> 'int' EnumConstant 0x56490dfb0010 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-EnumDecl 0x56490dea8ca8 <line:164:5, line:166:5> line:164:5
| `-EnumConstantDecl 0x56490dea8db0 <line:165:9, col:19> col:9 NSUBSEC 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:164:5)'
|   `-ImplicitCastExpr 0x56490dea8e00 <col:19> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490dea8d90 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' Int: 1000000000
|       `-DeclRefExpr 0x56490dea8d70 <col:19> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-TypedefDecl 0x56490dea8e28 <line:168:5, col:32> col:32 referenced uninitialized_t 'uninitialized_type'
| `-RecordType 0x56490dbe7ea0 'uninitialized_type'
|   `-CXXRecord 0x56490dbe7e08 'uninitialized_type'
|-CXXRecordDecl 0x56490dea8e80 <line:170:5, col:11> col:11 referenced union rep_t
|-CXXConstructorDecl 0x56490dea8f68 <line:174:5, line:176:5> line:174:12 used Timestamp 'void ()' inline
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc7748 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dfc7868 <col:24, line:176:5>
|   `-CXXMemberCallExpr 0x56490dfc7820 <line:175:9, col:20> 'void'
|     |-MemberExpr 0x56490dfc77b0 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfc77a0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x56490dfc77e0 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x56490dfc7850 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56490dfc7800 <col:19> 'int' 0
|-CXXConstructorDecl 0x56490dea91b8 <line:187:5, line:189:5> line:187:21 Timestamp 'void (long, uint32_t)' inline
| |-ParmVarDecl 0x56490dea9028 <col:31, col:36> col:36 used sec 'long'
| |-ParmVarDecl 0x56490dea90a0 <col:41, col:59> col:50 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56490dfc71f0 <col:59> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490dfc71d0 <col:59> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc7880 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dfc79d0 <col:62, line:189:5>
|   `-CXXMemberCallExpr 0x56490dfc7958 <line:188:9, col:27> 'void'
|     |-MemberExpr 0x56490dfc78e8 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfc78d8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56490dfc79a0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56490dfc7988 <col:16> 'long' <LValueToRValue>
|     |   `-DeclRefExpr 0x56490dfc7918 <col:16> 'long' lvalue ParmVar 0x56490dea9028 'sec' 'long'
|     `-ImplicitCastExpr 0x56490dfc79b8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56490dfc7938 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dea90a0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56490dea9418 <line:191:5, line:193:5> line:191:21 used Timestamp 'void (int, uint32_t)' inline
| |-ParmVarDecl 0x56490dea9288 <col:31, col:35> col:35 used sec 'int'
| |-ParmVarDecl 0x56490dea9300 <col:40, col:58> col:49 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56490dfc7228 <col:58> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490dfc7208 <col:58> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc79e8 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dfc7b20 <col:61, line:193:5>
|   `-CXXMemberCallExpr 0x56490dfc7ac0 <line:192:9, col:27> 'void'
|     |-MemberExpr 0x56490dfc7a50 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfc7a40 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56490dfc7af0 <col:16> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56490dfc7a80 <col:16> 'int' lvalue ParmVar 0x56490dea9288 'sec' 'int'
|     `-ImplicitCastExpr 0x56490dfc7b08 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56490dfc7aa0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dea9300 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56490dea9678 <line:195:5, line:197:5> line:195:21 Timestamp 'void (unsigned long, uint32_t)' inline
| |-ParmVarDecl 0x56490dea94e8 <col:31, col:45> col:45 used sec 'unsigned long'
| |-ParmVarDecl 0x56490dea9560 <col:50, col:68> col:59 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56490dfc7260 <col:68> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490dfc7240 <col:68> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc7b38 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dfc7c88 <col:71, line:197:5>
|   `-CXXMemberCallExpr 0x56490dfc7c10 <line:196:9, col:27> 'void'
|     |-MemberExpr 0x56490dfc7ba0 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfc7b90 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56490dfc7c58 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56490dfc7c40 <col:16> 'unsigned long' <LValueToRValue>
|     |   `-DeclRefExpr 0x56490dfc7bd0 <col:16> 'unsigned long' lvalue ParmVar 0x56490dea94e8 'sec' 'unsigned long'
|     `-ImplicitCastExpr 0x56490dfc7c70 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56490dfc7bf0 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dea9560 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56490dea98d8 <line:199:5, line:201:5> line:199:21 used Timestamp 'void (unsigned int, uint32_t)' inline
| |-ParmVarDecl 0x56490dea9748 <col:31, col:40> col:40 used sec 'unsigned int'
| |-ParmVarDecl 0x56490dea97c0 <col:45, col:63> col:54 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56490dfc7298 <col:63> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490dfc7278 <col:63> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc7ca0 <col:21> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dfc7df0 <col:66, line:201:5>
|   `-CXXMemberCallExpr 0x56490dfc7d78 <line:200:9, col:27> 'void'
|     |-MemberExpr 0x56490dfc7d08 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfc7cf8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56490dfc7dc0 <col:16> 'Timestamp::seconds_type':'int' <IntegralCast>
|     | `-ImplicitCastExpr 0x56490dfc7da8 <col:16> 'unsigned int' <LValueToRValue>
|     |   `-DeclRefExpr 0x56490dfc7d38 <col:16> 'unsigned int' lvalue ParmVar 0x56490dea9748 'sec' 'unsigned int'
|     `-ImplicitCastExpr 0x56490dfc7dd8 <col:21> 'uint32_t':'unsigned int' <LValueToRValue>
|       `-DeclRefExpr 0x56490dfc7d58 <col:21> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dea97c0 'subsec' 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56490dea9a38 <line:203:5, col:37> col:21 used Timestamp 'void (double)' inline
| `-ParmVarDecl 0x56490dea99a8 <col:31> col:37 'double'
|-CXXConstructorDecl 0x56490dea9bd8 <line:206:5, col:46> col:12 Timestamp 'void (const struct timeval &)' inline
| `-ParmVarDecl 0x56490dea9b10 <col:22, col:44> col:44 tv 'const struct timeval &'
|-CXXConstructorDecl 0x56490dea9e08 <line:208:5, col:47> col:12 Timestamp 'void (const struct timespec &)' inline
| `-ParmVarDecl 0x56490dea9d10 <col:22, col:45> col:45 ts 'const struct timespec &'
|-CXXConstructorDecl 0x56490dea9fb8 <line:212:5, line:214:5> line:212:12 Timestamp 'void (const Timestamp::rep_t &)' inline
| |-ParmVarDecl 0x56490dea9ef8 <col:22, col:35> col:35 used rep 'const Timestamp::rep_t &'
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc7e90 <line:213:11, col:17> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-DeclRefExpr 0x56490dfc7e08 <col:14> 'const Timestamp::rep_t' lvalue ParmVar 0x56490dea9ef8 'rep' 'const Timestamp::rep_t &'
| `-CompoundStmt 0x56490dfc7ef0 <col:19, line:214:5>
|-CXXConstructorDecl 0x56490deaa1e8 <line:217:5, line:219:5> line:217:12 used Timestamp 'void (const Timestamp::uninitialized_t &)' inline
| |-ParmVarDecl 0x56490deaa0f8 <col:22, col:45> col:45 used unused 'const Timestamp::uninitialized_t &'
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc7f00 <col:12> 'Timestamp::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dfc7fb0 <col:53, line:219:5>
|   `-CStyleCastExpr 0x56490dfc7f88 <line:218:9, col:16> 'void' <ToVoid>
|     `-DeclRefExpr 0x56490dfc7f58 <col:16> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue ParmVar 0x56490deaa0f8 'unused' 'const Timestamp::uninitialized_t &'
|-TypedefDecl 0x56490deaa3d8 <line:221:5, col:64> col:39 referenced unspecified_bool_type 'Timestamp::seconds_type (Timestamp::*)() const'
| `-MemberPointerType 0x56490deaa350 'Timestamp::seconds_type (Timestamp::*)() const'
|   |-RecordType 0x56490de08180 'Timestamp'
|   | `-CXXRecord 0x56490dfaf818 'Timestamp'
|   `-ParenType 0x56490deaa2f0 'Timestamp::seconds_type () const' sugar
|     `-FunctionProtoType 0x56490deaa2c0 'Timestamp::seconds_type () const' const cdecl
|       `-TypedefType 0x56490dfafb60 'Timestamp::seconds_type' sugar
|         |-Typedef 0x56490dfaf9d8 'seconds_type'
|         `-TypedefType 0x56490dbe8270 'int32_t' sugar
|           |-Typedef 0x56490daf8268 'int32_t'
|           `-TypedefType 0x56490dad13b0 '__int32_t' sugar
|             |-Typedef 0x56490dad0fc8 '__int32_t'
|             `-BuiltinType 0x56490da8f370 'int'
|-CXXConversionDecl 0x56490deaa518 <line:222:5, col:45> col:12 used operator int (Timestamp::*)() const 'Timestamp::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56490deaa5e8 <line:225:5, line:231:5> line:225:17 is_negative 'bool () const' inline
| `-CompoundStmt 0x56490dfc80b8 <col:37, line:231:5>
|   `-ReturnStmt 0x56490dfc80a8 <line:227:9, col:23>
|     `-BinaryOperator 0x56490dfc8088 <col:16, col:23> 'bool' '<'
|       |-ImplicitCastExpr 0x56490dfc8058 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56490dfc8008 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56490dfc24e8
|       |   `-MemberExpr 0x56490dfc7fd8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
|       |     `-CXXThisExpr 0x56490dfc7fc8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56490dfc8070 <col:23> 'long' <IntegralCast>
|         `-IntegerLiteral 0x56490dfc8038 <col:23> 'int' 0
|-CXXMethodDecl 0x56490deaa6a8 <line:233:5, col:31> col:25 used sec 'Timestamp::seconds_type () const' inline
|-CXXMethodDecl 0x56490deaa768 <line:234:5, col:30> col:21 used subsec 'uint32_t () const' inline
|-CXXMethodDecl 0x56490deaa828 <line:235:5, col:28> col:21 msec 'uint32_t () const' inline
|-CXXMethodDecl 0x56490deaa8e8 <line:236:5, col:28> col:21 used usec 'uint32_t () const' inline
|-CXXMethodDecl 0x56490deaa9a8 <line:237:5, col:28> col:21 used nsec 'uint32_t () const' inline
|-CXXMethodDecl 0x56490deaab18 <line:239:5, col:41> col:17 set_sec 'void (Timestamp::seconds_type)' inline
| `-ParmVarDecl 0x56490deaaa58 <col:25, col:38> col:38 sec 'Timestamp::seconds_type':'int'
|-CXXMethodDecl 0x56490deaac60 <line:240:5, col:43> col:17 set_subsec 'void (uint32_t)' inline
| `-ParmVarDecl 0x56490deaabd0 <col:28, col:37> col:37 subsec 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490deaad28 <line:242:5, col:65> col:25 msec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56490deaadc8 <col:54> "" ""
|-CXXMethodDecl 0x56490deaae58 <line:243:5, col:65> col:25 usec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56490deaaef8 <col:54> "" ""
|-CXXMethodDecl 0x56490deaaf88 <line:244:5, col:65> col:25 nsec1 'Timestamp::seconds_type () const' inline
| `-DeprecatedAttr 0x56490deab028 <col:54> "" ""
|-CXXMethodDecl 0x56490deab128 <line:250:5, col:37> col:27 used timeval 'struct timeval () const' inline
|-CXXMethodDecl 0x56490deab1f8 <line:251:5, col:42> col:27 timeval_ceil 'struct timeval () const' inline
|-CXXMethodDecl 0x56490deab328 <line:257:5, col:39> col:28 timespec 'struct timespec () const' inline
|-CXXMethodDecl 0x56490deab420 <line:262:5, col:31> col:19 used doubleval 'double () const' inline
|-CXXMethodDecl 0x56490deab558 <line:265:5, line:271:5> line:265:23 msecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56490dfc82d0 <col:39, line:271:5>
|   `-ReturnStmt 0x56490dfc82c0 <line:267:9, col:61>
|     `-CallExpr 0x56490dfc8260 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x56490dfc8248 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dfc80d0 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56490dfc37c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x56490dfc8290 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56490dfc8130 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56490dfc24e8
|       |   `-MemberExpr 0x56490dfc8100 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
|       |     `-CXXThisExpr 0x56490dfc80f0 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56490dfc82a8 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x56490dfc81d0 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x56490dfc81a0 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x56490dfc8160 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x56490dfc81b8 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x56490dfc8180 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0130 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490deab618 <line:273:5, line:279:5> line:273:23 usecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56490dfc8490 <col:39, line:279:5>
|   `-ReturnStmt 0x56490dfc8480 <line:275:9, col:61>
|     `-CallExpr 0x56490dfc8420 <col:16, col:61> 'Timestamp::value_type':'long'
|       |-ImplicitCastExpr 0x56490dfc8408 <col:16> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dfc82e8 <col:16> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56490dfc37c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|       |-ImplicitCastExpr 0x56490dfc8450 <col:26, col:29> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56490dfc8348 <col:26, col:29> 'const int64_t':'const long' lvalue .x 0x56490dfc24e8
|       |   `-MemberExpr 0x56490dfc8318 <col:26> 'const Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
|       |     `-CXXThisExpr 0x56490dfc8308 <col:26> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56490dfc8468 <col:32, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|         `-BinaryOperator 0x56490dfc83e8 <col:32, col:49> 'int' '/'
|           |-ImplicitCastExpr 0x56490dfc83b8 <col:32> 'int' <IntegralCast>
|           | `-DeclRefExpr 0x56490dfc8378 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|           `-ImplicitCastExpr 0x56490dfc83d0 <col:49> 'int' <IntegralCast>
|             `-DeclRefExpr 0x56490dfc8398 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0010 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490deab6d8 <line:281:5, line:287:5> line:281:23 nsecval 'Timestamp::value_type () const' inline
| `-CompoundStmt 0x56490dfc8628 <col:39, line:287:5>
|   `-ReturnStmt 0x56490dfc8618 <line:283:9, col:53>
|     `-BinaryOperator 0x56490dfc85f8 <col:16, col:53> 'long' '*'
|       |-ImplicitCastExpr 0x56490dfc85c8 <col:16, col:19> 'int64_t':'long' <LValueToRValue>
|       | `-MemberExpr 0x56490dfc84e8 <col:16, col:19> 'const int64_t':'const long' lvalue .x 0x56490dfc24e8
|       |   `-MemberExpr 0x56490dfc84b8 <col:16> 'const Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
|       |     `-CXXThisExpr 0x56490dfc84a8 <col:16> 'const Timestamp *' implicit this
|       `-ImplicitCastExpr 0x56490dfc85e0 <col:23, col:53> 'long' <IntegralCast>
|         `-ParenExpr 0x56490dfc85a8 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56490dfc8588 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfc8558 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfc8518 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfafe60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfc8570 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfc8538 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490deab7c8 <line:290:5, line:293:5> line:290:22 msec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56490dfc9cc0 <col:40, line:293:5>
|   |-DeclStmt 0x56490dfc8770 <line:291:9, col:48>
|   | `-VarDecl 0x56490dfc8650 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x56490dfc8750 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x56490dfc86f8 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x56490dfc86c8 <col:22> '<bound member function type>' ->subsec 0x56490deaa768
|   |     |   `-CXXThisExpr 0x56490dfc86b8 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x56490dfc8738 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x56490dfc8718 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea8ab0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56490dfc9cb0 <line:292:9, col:70>
|     `-ExprWithCleanups 0x56490dfc9c98 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfc9c68 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfc9c50 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x56490dfc9c30 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x56490dfc9c00 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x56490dfc9998 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x56490dfc9980 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x56490dfc8788 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x56490dfc8650 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x56490dfc9ba0 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x56490dfc9b88 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x56490dfc9b58 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x56490dfc99b0 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x56490dfc9920 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x56490dfc9908 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x56490dfc98b8 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56490dfaf768 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x56490dfc9858 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x56490dfc87b8 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x56490dfc87a8 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x56490dfc98a0 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x56490dfc9888 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x56490dfc8c78 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x56490dfc87e0 <col:39> 'int' 0
|               |               `-BinaryOperator 0x56490dfc8870 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x56490dfc8840 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x56490dfc8800 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea8ab0 'subsec_per_msec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x56490dfc8858 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x56490dfc8820 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x56490dfc8650 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x56490dfc9bd0 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x56490dfc9968 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x56490dfc9958 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56490deab888 <line:295:5, line:302:5> line:295:22 usec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56490dfca218 <col:40, line:302:5>
|   |-DeclStmt 0x56490dfc9e10 <line:297:9, col:48>
|   | `-VarDecl 0x56490dfc9cf0 <col:9, col:33> col:18 used x 'uint32_t':'unsigned int' cinit
|   |   `-BinaryOperator 0x56490dfc9df0 <col:22, col:33> 'unsigned int' '%'
|   |     |-CXXMemberCallExpr 0x56490dfc9d98 <col:22, col:29> 'uint32_t':'unsigned int'
|   |     | `-MemberExpr 0x56490dfc9d68 <col:22> '<bound member function type>' ->subsec 0x56490deaa768
|   |     |   `-CXXThisExpr 0x56490dfc9d58 <col:22> 'const Timestamp *' implicit this
|   |     `-ImplicitCastExpr 0x56490dfc9dd8 <col:33> 'unsigned int' <IntegralCast>
|   |       `-DeclRefExpr 0x56490dfc9db8 <col:33> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea8b80 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56490dfca208 <line:298:9, col:70>
|     `-ExprWithCleanups 0x56490dfca1f0 <col:16, col:70> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfca1c0 <col:16, col:70> 'Timestamp' 'void (const Timestamp &) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfca1a8 <col:16, col:70> 'const Timestamp' lvalue
|           `-ParenExpr 0x56490dfca188 <col:16, col:70> 'const Timestamp'
|             `-ConditionalOperator 0x56490dfca158 <col:17, col:66> 'const Timestamp'
|               |-ImplicitCastExpr 0x56490dfca080 <col:17> 'bool' <IntegralToBoolean>
|               | `-ImplicitCastExpr 0x56490dfca068 <col:17> 'uint32_t':'unsigned int' <LValueToRValue>
|               |   `-DeclRefExpr 0x56490dfc9e28 <col:17> 'uint32_t':'unsigned int' lvalue Var 0x56490dfc9cf0 'x' 'uint32_t':'unsigned int'
|               |-CXXConstructExpr 0x56490dfca0f8 <col:21, col:61> 'const Timestamp' 'void (const Timestamp &) noexcept' elidable
|               | `-MaterializeTemporaryExpr 0x56490dfca0e0 <col:21, col:61> 'const Timestamp' lvalue
|               |   `-CXXConstructExpr 0x56490dfca0b0 <col:21, col:61> 'const Timestamp' 'void (Timestamp &&) noexcept' elidable
|               |     `-MaterializeTemporaryExpr 0x56490dfca098 <col:21, col:61> 'Timestamp' xvalue
|               |       `-CXXOperatorCallExpr 0x56490dfca008 <col:21, col:61> 'Timestamp'
|               |         |-ImplicitCastExpr 0x56490dfc9ff0 <col:27> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|               |         | `-DeclRefExpr 0x56490dfc9fd0 <col:27> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56490dfaf768 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|               |         |-CXXConstructExpr 0x56490dfc9f70 <col:21, col:22> 'Timestamp' 'void (const Timestamp &) noexcept'
|               |         | `-UnaryOperator 0x56490dfc9e58 <col:21, col:22> 'const Timestamp' lvalue prefix '*' cannot overflow
|               |         |   `-CXXThisExpr 0x56490dfc9e48 <col:22> 'const Timestamp *' this
|               |         `-MaterializeTemporaryExpr 0x56490dfc9fb8 <col:29, col:61> 'const Timestamp' lvalue
|               |           `-ImplicitCastExpr 0x56490dfc9fa0 <col:29, col:61> 'const Timestamp' <NoOp>
|               |             `-CXXTemporaryObjectExpr 0x56490dfc9f30 <col:29, col:61> 'Timestamp' 'void (int, uint32_t)'
|               |               |-IntegerLiteral 0x56490dfc9e80 <col:39> 'int' 0
|               |               `-BinaryOperator 0x56490dfc9f10 <col:42, col:60> 'unsigned int' '-'
|               |                 |-ImplicitCastExpr 0x56490dfc9ee0 <col:42> 'unsigned int' <IntegralCast>
|               |                 | `-DeclRefExpr 0x56490dfc9ea0 <col:42> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea8b80 'subsec_per_usec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|               |                 `-ImplicitCastExpr 0x56490dfc9ef8 <col:60> 'uint32_t':'unsigned int' <LValueToRValue>
|               |                   `-DeclRefExpr 0x56490dfc9ec0 <col:60> 'uint32_t':'unsigned int' lvalue Var 0x56490dfc9cf0 'x' 'uint32_t':'unsigned int'
|               `-CXXConstructExpr 0x56490dfca128 <col:65, col:66> 'const Timestamp' 'void (const Timestamp &) noexcept'
|                 `-UnaryOperator 0x56490dfca050 <col:65, col:66> 'const Timestamp' lvalue prefix '*' cannot overflow
|                   `-CXXThisExpr 0x56490dfca040 <col:66> 'const Timestamp *' this
|-CXXMethodDecl 0x56490deab948 <line:304:5, line:306:5> line:304:22 nsec_ceil 'Timestamp () const' inline
| `-CompoundStmt 0x56490dfca2a0 <col:40, line:306:5>
|   `-ReturnStmt 0x56490dfca290 <line:305:9, col:17>
|     `-CXXConstructExpr 0x56490dfca260 <col:16, col:17> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-UnaryOperator 0x56490dfca248 <col:16, col:17> 'const Timestamp' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490dfca238 <col:17> 'const Timestamp *' this
|-CXXMethodDecl 0x56490deabae8 <line:310:5, col:65> col:29 make_jiffies 'Timestamp (click_jiffies_t)' static inline
| `-ParmVarDecl 0x56490deab9f8 <col:42, col:58> col:58 jiffies 'click_jiffies_t':'unsigned int'
|-CXXMethodDecl 0x56490deabcb8 <line:312:5, col:76> col:29 make_jiffies 'Timestamp (click_jiffies_difference_t)' static inline
| `-ParmVarDecl 0x56490deabbc0 <col:42, col:69> col:69 jiffies 'click_jiffies_difference_t':'int'
|-CXXMethodDecl 0x56490deabda8 <line:314:5, col:38> col:28 jiffies 'click_jiffies_t () const' inline
|-CXXMethodDecl 0x56490deabf18 <line:318:5, line:320:5> line:318:29 make_sec 'Timestamp (Timestamp::seconds_type)' static inline
| |-ParmVarDecl 0x56490deabe58 <col:38, col:51> col:51 used sec 'Timestamp::seconds_type':'int'
| `-CompoundStmt 0x56490dfd48b8 <col:56, line:320:5>
|   `-ReturnStmt 0x56490dfd48a8 <line:319:9, col:32>
|     `-ExprWithCleanups 0x56490dfd4890 <col:16, col:32> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfca390 <col:16, col:32> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfca378 <col:16, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56490dfca338 <col:16, col:32> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56490dfca308 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56490dfca2c8 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490deabe58 'sec' 'Timestamp::seconds_type':'int'
|             `-ImplicitCastExpr 0x56490dfca320 <col:31> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56490dfca2e8 <col:31> 'int' 0
|-CXXMethodDecl 0x56490deac158 <line:324:5, line:326:5> line:324:29 make_msec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56490deabfd0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490deac048 <col:57, col:66> col:66 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd4a88 <col:72, line:326:5>
|   `-ReturnStmt 0x56490dfd4a78 <line:325:9, col:51>
|     `-ExprWithCleanups 0x56490dfd4a60 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfd4a30 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfd4a18 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56490dfd49d8 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56490dfd49c0 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56490dfd48e0 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490deabfd0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56490dfd4980 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56490dfd4968 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56490dfd4900 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56490dfc1c40 'msec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56490dfd49a8 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56490dfd4920 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490deac048 'msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490deac308 <line:328:5, line:337:5> line:328:29 used make_msec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56490deac218 <col:39, col:50> col:50 used msec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56490dfd5150 <col:56, line:337:5>
|   |-DeclStmt 0x56490dfd4d88 <line:329:9, col:51>
|   | `-VarDecl 0x56490dfd4ab0 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56490dfd4d70 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56490dfd4d40 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56490dfd4d28 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56490dfd4d10 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56490dfd4ce0 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56490dfd4cc8 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56490dfd4cb0 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56490dfd4ba0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56490dfd4f40 <line:331:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56490dfd4df0 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56490dfc24e8
|   | | `-MemberExpr 0x56490dfd4dc0 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56490dfc3498
|   | |   `-DeclRefExpr 0x56490dfd4da0 <col:9> 'Timestamp' lvalue Var 0x56490dfd4ab0 't' 'Timestamp'
|   | `-BinaryOperator 0x56490dfd4f20 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56490dfd4ef0 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56490dfd4e20 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56490deac218 'msec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56490dfd4f08 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56490dfd4ed0 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56490dfd4eb0 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56490dfd4e80 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56490dfd4e40 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56490dfd4e98 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56490dfd4e60 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0130 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56490dfd5138 <line:336:9, col:16>
|     `-CXXConstructExpr 0x56490dfd5108 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56490dfd50f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56490dfd50d0 <col:16> 'Timestamp' lvalue Var 0x56490dfd4ab0 't' 'Timestamp'
|-CXXMethodDecl 0x56490deac4d0 <line:341:5, line:343:5> line:341:29 make_usec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56490deac3c0 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490deac438 <col:57, col:66> col:66 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd5308 <col:72, line:343:5>
|   `-ReturnStmt 0x56490dfd52f8 <line:342:9, col:51>
|     `-ExprWithCleanups 0x56490dfd52e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfd52b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfd5298 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56490dfd5258 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56490dfd5240 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56490dfd5188 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490deac3c0 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56490dfd5200 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56490dfd51e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56490dfd51a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56490dfc1d88 'usec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56490dfd5228 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56490dfd51c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490deac438 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490deac620 <line:345:5, line:354:5> line:345:29 used make_usec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56490deac590 <col:39, col:50> col:50 used usec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56490dfd5750 <col:56, line:354:5>
|   |-DeclStmt 0x56490dfd54f8 <line:346:9, col:51>
|   | `-VarDecl 0x56490dfd5330 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56490dfd54e0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56490dfd54b0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56490dfd5498 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56490dfd5480 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56490dfd5450 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56490dfd5438 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56490dfd5420 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56490dfd53f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56490dfd56b0 <line:348:9, col:55> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56490dfd5560 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56490dfc24e8
|   | | `-MemberExpr 0x56490dfd5530 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56490dfc3498
|   | |   `-DeclRefExpr 0x56490dfd5510 <col:9> 'Timestamp' lvalue Var 0x56490dfd5330 't' 'Timestamp'
|   | `-BinaryOperator 0x56490dfd5690 <col:18, col:55> 'long' '*'
|   |   |-ImplicitCastExpr 0x56490dfd5660 <col:18> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56490dfd5590 <col:18> 'Timestamp::value_type':'long' lvalue ParmVar 0x56490deac590 'usec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56490dfd5678 <col:25, col:55> 'long' <IntegralCast>
|   |     `-ParenExpr 0x56490dfd5640 <col:25, col:55> 'int'
|   |       `-BinaryOperator 0x56490dfd5620 <col:26, col:43> 'int' '/'
|   |         |-ImplicitCastExpr 0x56490dfd55f0 <col:26> 'int' <IntegralCast>
|   |         | `-DeclRefExpr 0x56490dfd55b0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |         `-ImplicitCastExpr 0x56490dfd5608 <col:43> 'int' <IntegralCast>
|   |           `-DeclRefExpr 0x56490dfd55d0 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0010 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56490dfd5738 <line:353:9, col:16>
|     `-CXXConstructExpr 0x56490dfd5708 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56490dfd56f0 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56490dfd56d0 <col:16> 'Timestamp' lvalue Var 0x56490dfd5330 't' 'Timestamp'
|-CXXMethodDecl 0x56490deac7e8 <line:358:5, line:360:5> line:358:29 make_nsec 'Timestamp (Timestamp::seconds_type, uint32_t)' static inline
| |-ParmVarDecl 0x56490deac6d8 <col:39, col:52> col:52 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490deac750 <col:57, col:66> col:66 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd5908 <col:72, line:360:5>
|   `-ReturnStmt 0x56490dfd58f8 <line:359:9, col:51>
|     `-ExprWithCleanups 0x56490dfd58e0 <col:16, col:51> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfd58b0 <col:16, col:51> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfd5898 <col:16, col:51> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56490dfd5858 <col:16, col:51> 'Timestamp' 'void (int, uint32_t)'
|             |-ImplicitCastExpr 0x56490dfd5840 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue>
|             | `-DeclRefExpr 0x56490dfd5788 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490deac6d8 'sec' 'Timestamp::seconds_type':'int'
|             `-CallExpr 0x56490dfd5800 <col:31, col:50> 'uint32_t':'unsigned int'
|               |-ImplicitCastExpr 0x56490dfd57e8 <col:31> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56490dfd57a8 <col:31> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56490dfc1ed0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|               `-ImplicitCastExpr 0x56490dfd5828 <col:46> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56490dfd57c8 <col:46> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490deac750 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dfc01c0 <line:362:5, line:371:5> line:362:29 make_nsec 'Timestamp (Timestamp::value_type)' static inline
| |-ParmVarDecl 0x56490deac8a8 <col:39, col:50> col:50 used nsec 'Timestamp::value_type':'long'
| `-CompoundStmt 0x56490dfd5d78 <col:56, line:371:5>
|   |-DeclStmt 0x56490dfd5af8 <line:363:9, col:51>
|   | `-VarDecl 0x56490dfd5930 <col:9, col:50> col:19 used t 'Timestamp' nrvo cinit
|   |   `-ExprWithCleanups 0x56490dfd5ae0 <col:19, col:50> 'Timestamp'
|   |     `-CXXConstructExpr 0x56490dfd5ab0 <col:19, col:50> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56490dfd5a98 <col:23, col:50> 'Timestamp' xvalue
|   |         `-ImplicitCastExpr 0x56490dfd5a80 <col:23, col:50> 'Timestamp' <ConstructorConversion>
|   |           `-CXXConstructExpr 0x56490dfd5a50 <col:23, col:50> 'Timestamp' 'void (const Timestamp::uninitialized_t &)'
|   |             `-MaterializeTemporaryExpr 0x56490dfd5a38 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' lvalue
|   |               `-ImplicitCastExpr 0x56490dfd5a20 <col:23, col:50> 'const Timestamp::uninitialized_t':'const uninitialized_type' <NoOp>
|   |                 `-CXXTemporaryObjectExpr 0x56490dfd59f0 <col:23, col:50> 'Timestamp::uninitialized_t':'uninitialized_type' 'void () noexcept' zeroing
|   |-BinaryOperator 0x56490dfd5cd8 <line:365:9, col:63> 'int64_t':'long' lvalue '='
|   | |-MemberExpr 0x56490dfd5b60 <col:9, col:14> 'int64_t':'long' lvalue .x 0x56490dfc24e8
|   | | `-MemberExpr 0x56490dfd5b30 <col:9, col:11> 'Timestamp::rep_t' lvalue ._t 0x56490dfc3498
|   | |   `-DeclRefExpr 0x56490dfd5b10 <col:9> 'Timestamp' lvalue Var 0x56490dfd5930 't' 'Timestamp'
|   | `-CallExpr 0x56490dfd5c78 <col:18, col:63> 'Timestamp::value_type':'long'
|   |   |-ImplicitCastExpr 0x56490dfd5c60 <col:18> 'Timestamp::value_type (*)(Timestamp::value_type, uint32_t)' <FunctionToPointerDecay>
|   |   | `-DeclRefExpr 0x56490dfd5b90 <col:18> 'Timestamp::value_type (Timestamp::value_type, uint32_t)' lvalue CXXMethod 0x56490dfc37c8 'value_div' 'Timestamp::value_type (Timestamp::value_type, uint32_t)'
|   |   |-ImplicitCastExpr 0x56490dfd5ca8 <col:28> 'Timestamp::value_type':'long' <LValueToRValue>
|   |   | `-DeclRefExpr 0x56490dfd5bb0 <col:28> 'Timestamp::value_type':'long' lvalue ParmVar 0x56490deac8a8 'nsec' 'Timestamp::value_type':'long'
|   |   `-ImplicitCastExpr 0x56490dfd5cc0 <col:34, col:49> 'uint32_t':'unsigned int' <IntegralCast>
|   |     `-BinaryOperator 0x56490dfd5c40 <col:34, col:49> 'int' '/'
|   |       |-ImplicitCastExpr 0x56490dfd5c10 <col:34> 'int' <IntegralCast>
|   |       | `-DeclRefExpr 0x56490dfd5bd0 <col:34> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfafe60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   |       `-ImplicitCastExpr 0x56490dfd5c28 <col:49> 'int' <IntegralCast>
|   |         `-DeclRefExpr 0x56490dfd5bf0 <col:49> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|   `-ReturnStmt 0x56490dfd5d60 <line:370:9, col:16>
|     `-CXXConstructExpr 0x56490dfd5d30 <col:16> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|       `-ImplicitCastExpr 0x56490dfd5d18 <col:16> 'Timestamp' xvalue <NoOp>
|         `-DeclRefExpr 0x56490dfd5cf8 <col:16> 'Timestamp' lvalue Var 0x56490dfd5930 't' 'Timestamp'
|-CXXMethodDecl 0x56490dfc02b8 <line:375:5, line:377:5> line:375:29 epsilon 'Timestamp ()' static inline
| `-CompoundStmt 0x56490dfd5eb8 <col:39, line:377:5>
|   `-ReturnStmt 0x56490dfd5ea8 <line:376:9, col:30>
|     `-ExprWithCleanups 0x56490dfd5e90 <col:16, col:30> 'Timestamp'
|       `-CXXConstructExpr 0x56490dfd5e60 <col:16, col:30> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490dfd5e48 <col:16, col:30> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56490dfd5e08 <col:16, col:30> 'Timestamp' 'void (int, uint32_t)'
|             |-IntegerLiteral 0x56490dfd5db0 <col:26> 'int' 0
|             `-ImplicitCastExpr 0x56490dfd5df0 <col:29> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56490dfd5dd0 <col:29> 'int' 1
|-CXXMethodDecl 0x56490dfc0378 <line:380:5, line:382:5> line:380:17 clear 'void ()' inline
| `-CompoundStmt 0x56490dfd5f98 <col:25, line:382:5>
|   `-CXXMemberCallExpr 0x56490dfd5f50 <line:381:9, col:20> 'void'
|     |-MemberExpr 0x56490dfd5ee0 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfd5ed0 <col:9> 'Timestamp *' implicit this
|     |-IntegerLiteral 0x56490dfd5f10 <col:16> 'int' 0
|     `-ImplicitCastExpr 0x56490dfd5f80 <col:19> 'uint32_t':'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56490dfd5f30 <col:19> 'int' 0
|-CXXMethodDecl 0x56490dfc0578 <line:388:5, line:395:5> line:388:17 used assign 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56490dfc0428 <col:24, col:37> col:37 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490dfc04a0 <col:42, col:60> col:51 used subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56490dfc72d0 <col:60> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490dfc72b0 <col:60> 'int' 0
| `-CompoundStmt 0x56490dfd6190 <col:63, line:395:5>
|   `-BinaryOperator 0x56490dfd6170 <line:390:9, col:49> 'int64_t':'long' lvalue '='
|     |-MemberExpr 0x56490dfd5ff0 <col:9, col:12> 'int64_t':'long' lvalue .x 0x56490dfc24e8
|     | `-MemberExpr 0x56490dfd5fc0 <col:9> 'Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
|     |   `-CXXThisExpr 0x56490dfd5fb0 <col:9> 'Timestamp *' implicit this
|     `-BinaryOperator 0x56490dfd6150 <col:16, col:49> 'long' '+'
|       |-BinaryOperator 0x56490dfd60e0 <col:16, col:32> 'long' '*'
|       | |-CStyleCastExpr 0x56490dfd6080 <col:16, col:26> 'int64_t':'long' <NoOp>
|       | | `-ImplicitCastExpr 0x56490dfd6068 <col:26> 'int64_t':'long' <IntegralCast> part_of_explicit_cast
|       | |   `-ImplicitCastExpr 0x56490dfd6050 <col:26> 'Timestamp::seconds_type':'int' <LValueToRValue> part_of_explicit_cast
|       | |     `-DeclRefExpr 0x56490dfd6020 <col:26> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490dfc0428 'sec' 'Timestamp::seconds_type':'int'
|       | `-ImplicitCastExpr 0x56490dfd60c8 <col:32> 'long' <IntegralCast>
|       |   `-DeclRefExpr 0x56490dfd60a8 <col:32> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|       `-ImplicitCastExpr 0x56490dfd6138 <col:49> 'long' <IntegralCast>
|         `-ImplicitCastExpr 0x56490dfd6120 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|           `-DeclRefExpr 0x56490dfd6100 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc04a0 'subsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dfc0748 <line:397:5, line:399:5> line:397:17 used assign_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56490dfc0638 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490dfc06b0 <col:47, col:56> col:56 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd62e8 <col:62, line:399:5>
|   `-CXXMemberCallExpr 0x56490dfd62a0 <line:398:9, col:41> 'void'
|     |-MemberExpr 0x56490dfd61b8 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfd61a8 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56490dfd62d0 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56490dfd61e8 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490dfc0638 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x56490dfd6260 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56490dfd6248 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dfd6208 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56490dfc1d88 'usec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x56490dfd6288 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56490dfd6228 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc06b0 'usec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dfc0918 <line:401:5, line:403:5> line:401:17 used assign_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56490dfc0808 <col:29, col:42> col:42 used sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490dfc0880 <col:47, col:56> col:56 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6440 <col:62, line:403:5>
|   `-CXXMemberCallExpr 0x56490dfd63f8 <line:402:9, col:41> 'void'
|     |-MemberExpr 0x56490dfd6310 <col:9> '<bound member function type>' ->assign 0x56490dfc0578
|     | `-CXXThisExpr 0x56490dfd6300 <col:9> 'Timestamp *' implicit this
|     |-ImplicitCastExpr 0x56490dfd6428 <col:16> 'Timestamp::seconds_type':'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56490dfd6340 <col:16> 'Timestamp::seconds_type':'int' lvalue ParmVar 0x56490dfc0808 'sec' 'Timestamp::seconds_type':'int'
|     `-CallExpr 0x56490dfd63b8 <col:21, col:40> 'uint32_t':'unsigned int'
|       |-ImplicitCastExpr 0x56490dfd63a0 <col:21> 'uint32_t (*)(uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dfd6360 <col:21> 'uint32_t (uint32_t)' lvalue CXXMethod 0x56490dfc1ed0 'nsec_to_subsec' 'uint32_t (uint32_t)'
|       `-ImplicitCastExpr 0x56490dfd63e0 <col:36> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56490dfd6380 <col:36> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc0880 'nsec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dfc0ae8 <line:408:5, col:86> col:17 set 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56490dfc09d8 <col:21, col:34> col:34 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490dfc0a50 <col:39, col:57> col:48 subsec 'uint32_t':'unsigned int' cinit
| | `-ImplicitCastExpr 0x56490dfc7308 <col:57> 'uint32_t':'unsigned int' <IntegralCast>
| |   `-IntegerLiteral 0x56490dfc72e8 <col:57> 'int' 0
| `-DeprecatedAttr 0x56490dfc0b98 <col:75> "" ""
|-CXXMethodDecl 0x56490dfc0d28 <line:411:5, col:85> col:17 set_usec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56490dfc0c18 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490dfc0c90 <col:44, col:53> col:53 usec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490dfc0dd8 <col:74> "" ""
|-CXXMethodDecl 0x56490dfc0f68 <line:414:5, col:85> col:17 set_nsec 'void (Timestamp::seconds_type, uint32_t)' inline
| |-ParmVarDecl 0x56490dfc0e58 <col:26, col:39> col:39 sec 'Timestamp::seconds_type':'int'
| |-ParmVarDecl 0x56490dfc0ed0 <col:44, col:53> col:53 nsec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490dfc1018 <col:74> "" ""
|-CXXMethodDecl 0x56490dfc10a8 <line:417:5, col:53> col:17 set_now 'void ()' inline
| `-DeprecatedAttr 0x56490dfc1148 <col:42> "" ""
|-CXXMethodDecl 0x56490dfc12f0 <line:420:5, col:53> col:9 set_timeval_ioctl 'int (int, int)'
| |-ParmVarDecl 0x56490dfc11d0 <col:27, col:31> col:31 fd 'int'
| `-ParmVarDecl 0x56490dfc1250 <col:35, col:39> col:39 ioctl_selector 'int'
|-CXXMethodDecl 0x56490dfc13c0 <line:432:5, col:33> col:29 now 'Timestamp ()' static inline
|-CXXMethodDecl 0x56490dfc1480 <line:438:5, col:56> col:45 used assign_now 'void ()'
| |-NoInlineAttr 0x56490dfc1520 <col:20>
| `-OptimizeNoneAttr 0x56490dfc1578 <col:30>
|-CXXMethodDecl 0x56490dfc15c0 <line:446:5, col:36> col:29 used recent 'Timestamp ()' static inline
|-CXXMethodDecl 0x56490dfc1680 <line:452:5, col:31> col:17 used assign_recent 'void ()' inline
|-CXXMethodDecl 0x56490dfc1740 <line:466:5, col:40> col:29 now_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56490dfc1800 <line:472:5, col:35> col:17 used assign_now_steady 'void ()' inline
|-CXXMethodDecl 0x56490dfc18c0 <line:481:5, col:43> col:29 used recent_steady 'Timestamp ()' static inline
|-CXXMethodDecl 0x56490dfc1980 <line:487:5, col:38> col:17 used assign_recent_steady 'void ()' inline
|-CXXMethodDecl 0x56490dfc1a40 <line:496:5, col:22> col:12 unparse 'String () const'
|-CXXMethodDecl 0x56490dfc1b00 <line:501:5, col:31> col:12 unparse_interval 'String () const'
|-CXXMethodDecl 0x56490dfc1c40 <line:510:5, line:512:5> line:510:28 used msec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc1bb0 <col:43, col:52> col:52 used msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6588 <col:58, line:512:5>
|   `-ReturnStmt 0x56490dfd6578 <line:511:9, col:53>
|     `-BinaryOperator 0x56490dfd6558 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56490dfd6528 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd6458 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc1bb0 'msec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56490dfd6540 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56490dfd6508 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56490dfd64e8 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfd64b8 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfd6478 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfd64d0 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfd6498 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0130 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490dfc1d88 <line:514:5, line:516:5> line:514:28 used usec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc1cf8 <col:43, col:52> col:52 used usec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd66d0 <col:58, line:516:5>
|   `-ReturnStmt 0x56490dfd66c0 <line:515:9, col:53>
|     `-BinaryOperator 0x56490dfd66a0 <col:16, col:53> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56490dfd6670 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd65a0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc1cf8 'usec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56490dfd6688 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56490dfd6650 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56490dfd6630 <col:24, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfd6600 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfd65c0 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfd6618 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfd65e0 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0010 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490dfc1ed0 <line:518:5, line:520:5> line:518:28 used nsec_to_subsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc1e40 <col:43, col:52> col:52 used nsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6818 <col:58, line:520:5>
|   `-ReturnStmt 0x56490dfd6808 <line:519:9, col:53>
|     `-BinaryOperator 0x56490dfd67e8 <col:16, col:53> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56490dfd67b8 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd66e8 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc1e40 'nsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56490dfd67d0 <col:23, col:53> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56490dfd6798 <col:23, col:53> 'int'
|           `-BinaryOperator 0x56490dfd6778 <col:24, col:39> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfd6748 <col:24> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfd6708 <col:24> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfafe60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfd6760 <col:39> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfd6728 <col:39> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490dfc2018 <line:522:5, line:524:5> line:522:28 used subsec_to_msec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc1f88 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6960 <col:60, line:524:5>
|   `-ReturnStmt 0x56490dfd6950 <line:523:9, col:55>
|     `-BinaryOperator 0x56490dfd6930 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56490dfd6900 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd6830 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc1f88 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56490dfd6918 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56490dfd68e0 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56490dfd68c0 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfd6890 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfd6850 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfd68a8 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfd6870 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0130 'msec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490dfc2160 <line:526:5, line:528:5> line:526:28 used subsec_to_usec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc20d0 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6aa8 <col:60, line:528:5>
|   `-ReturnStmt 0x56490dfd6a98 <line:527:9, col:55>
|     `-BinaryOperator 0x56490dfd6a78 <col:16, col:55> 'unsigned int' '/'
|       |-ImplicitCastExpr 0x56490dfd6a48 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd6978 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc20d0 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56490dfd6a60 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56490dfd6a28 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56490dfd6a08 <col:26, col:43> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfd69d8 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfd6998 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfd69f0 <col:43> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfd69b8 <col:43> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfb0010 'usec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXMethodDecl 0x56490dfc22a8 <line:530:5, line:532:5> line:530:28 used subsec_to_nsec 'uint32_t (uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc2218 <col:43, col:52> col:52 used subsec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6bf0 <col:60, line:532:5>
|   `-ReturnStmt 0x56490dfd6be0 <line:531:9, col:55>
|     `-BinaryOperator 0x56490dfd6bc0 <col:16, col:55> 'unsigned int' '*'
|       |-ImplicitCastExpr 0x56490dfd6b90 <col:16> 'uint32_t':'unsigned int' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd6ac0 <col:16> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc2218 'subsec' 'uint32_t':'unsigned int'
|       `-ImplicitCastExpr 0x56490dfd6ba8 <col:25, col:55> 'unsigned int' <IntegralCast>
|         `-ParenExpr 0x56490dfd6b70 <col:25, col:55> 'int'
|           `-BinaryOperator 0x56490dfd6b50 <col:26, col:41> 'int' '/'
|             |-ImplicitCastExpr 0x56490dfd6b20 <col:26> 'int' <IntegralCast>
|             | `-DeclRefExpr 0x56490dfd6ae0 <col:26> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dfafe60 'nsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|             `-ImplicitCastExpr 0x56490dfd6b38 <col:41> 'int' <IntegralCast>
|               `-DeclRefExpr 0x56490dfd6b00 <col:41> 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)' EnumConstant 0x56490dea89e0 'subsec_per_sec' 'Timestamp::(anonymous enum at ../dummy_inc/click/timestamp.hh:142:5)'
|-CXXRecordDecl 0x56490dfc2350 prev 0x56490dea8e80 <line:539:5, line:566:5> line:539:11 referenced union rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490dfc2448 <col:5, col:11> col:11 implicit union rep_t
| |-FieldDecl 0x56490dfc24e8 <line:541:9, col:17> col:17 referenced x 'int64_t':'long'
| |-CXXConstructorDecl 0x56490dfc7358 <line:539:11> col:11 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56490dfc7738 <col:11>
| |-CXXConstructorDecl 0x56490dfc7430 <col:11> col:11 implicit used constexpr rep_t 'void (const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56490dfc7518 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56490dfc7e80 <col:11>
| |-CXXConstructorDecl 0x56490dfc75b8 <col:11> col:11 implicit used constexpr rep_t 'void (Timestamp::rep_t &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x56490dfc76c8 <col:11> col:11 'Timestamp::rep_t &&'
| | `-CompoundStmt 0x56490dfc9ad8 <col:11>
| |-CXXDestructorDecl 0x56490dfc89e8 <col:11> col:11 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56490e094c88 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(const Timestamp::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56490e094d98 <col:11> col:11 'const Timestamp::rep_t &'
| | `-CompoundStmt 0x56490e095660 <col:11>
| |   `-ReturnStmt 0x56490e095650 <col:11>
| |     `-UnaryOperator 0x56490e095638 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56490e095628 <col:11> 'Timestamp::rep_t *' this
| `-CXXMethodDecl 0x56490e094e08 <col:11> col:11 implicit used constexpr operator= 'Timestamp::rep_t &(Timestamp::rep_t &&) noexcept' inline default trivial
|   |-ParmVarDecl 0x56490e094f18 <col:11> col:11 'Timestamp::rep_t &&'
|   `-CompoundStmt 0x56490e0f08f0 <col:11>
|     `-ReturnStmt 0x56490e0f08e0 <col:11>
|       `-UnaryOperator 0x56490e0f08c8 <col:11> 'Timestamp::rep_t' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e0f08b8 <col:11> 'Timestamp::rep_t *' this
|-EnumDecl 0x56490dfc2550 <line:571:5, line:577:5> line:571:10 referenced warp_class_type
| |-EnumConstantDecl 0x56490dfc2650 <line:572:9, col:21> col:9 warp_none 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56490dfc2850 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfc2630 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56490dfc2610 <col:21> 'int' 0
| |-EnumConstantDecl 0x56490dfc26e0 <line:573:9, col:23> col:9 warp_linear 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56490dfc2868 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfc26c0 <col:23> 'int' Int: 1
| |     `-IntegerLiteral 0x56490dfc26a0 <col:23> 'int' 1
| |-EnumConstantDecl 0x56490dfc2770 <line:574:9, col:23> col:9 referenced warp_nowait 'Timestamp::warp_class_type'
| | `-ImplicitCastExpr 0x56490dfc2880 <col:23> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dfc2750 <col:23> 'int' Int: 2
| |     `-IntegerLiteral 0x56490dfc2730 <col:23> 'int' 2
| `-EnumConstantDecl 0x56490dfc2800 <line:576:9, col:27> col:9 warp_simulation 'Timestamp::warp_class_type'
|   `-ImplicitCastExpr 0x56490dfc2898 <col:27> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490dfc27e0 <col:27> 'int' Int: 3
|       `-IntegerLiteral 0x56490dfc27c0 <col:27> 'int' 3
|-CXXMethodDecl 0x56490dfc28d8 <line:581:5, col:34> col:23 warp_class 'int ()' static inline
|-CXXMethodDecl 0x56490dfc29a0 <line:588:5, col:37> col:26 warp_speed 'double ()' static inline
|-CXXMethodDecl 0x56490dfc2ba8 <line:621:5, col:65> col:17 warp_set_class 'void (Timestamp::warp_class_type, double)' static
| |-ParmVarDecl 0x56490dfc2a50 <col:32, col:48> col:48 w 'Timestamp::warp_class_type'
| `-ParmVarDecl 0x56490dfc2ad0 <col:51, col:62> col:58 s 'double' cinit
|   `-FloatingLiteral 0x56490dfc7320 <col:62> 'double' 1.000000e+00
|-CXXMethodDecl 0x56490dfc2db8 <line:628:5, col:82> col:17 warp_set_now 'void (const Timestamp &, const Timestamp &)' static
| |-ParmVarDecl 0x56490dfc2c68 <col:30, col:47> col:47 t_system 'const Timestamp &'
| `-ParmVarDecl 0x56490dfc2ce0 <col:57, col:74> col:74 t_steady 'const Timestamp &'
|-CXXMethodDecl 0x56490dfc2e88 <line:632:5, col:40> col:22 warp_real_delay 'Timestamp () const' inline
|-CXXMethodDecl 0x56490dfc2f48 <line:635:5, col:37> col:24 used warp_jumping 'bool ()' static inline
|-CXXMethodDecl 0x56490dfc30b8 <line:640:5, col:57> col:17 warp_jump_steady 'void (const Timestamp &)' static
| `-ParmVarDecl 0x56490dfc2ff8 <col:34, col:51> col:51 expiry 'const Timestamp &'
|-CXXMethodDecl 0x56490dfc3180 <line:647:5, col:42> col:29 now_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56490dfc3240 <line:653:5, col:37> col:17 used assign_now_unwarped 'void ()' inline
|-CXXMethodDecl 0x56490dfc3300 <line:659:5, col:49> col:29 now_steady_unwarped 'Timestamp ()' static inline
|-CXXMethodDecl 0x56490dfc33c0 <line:666:5, col:44> col:17 used assign_now_steady_unwarped 'void ()' inline
|-AccessSpecDecl 0x56490dfc3460 <line:670:3, col:10> col:3 private
|-FieldDecl 0x56490dfc3498 <line:672:5, col:11> col:11 referenced _t 'Timestamp::rep_t'
|-CXXMethodDecl 0x56490dfc3508 <line:674:5, line:684:5> line:674:17 used add_fix 'void ()' inline
| `-CompoundStmt 0x56490dfd6c08 <col:27, line:684:5>
|-CXXMethodDecl 0x56490dfc35c8 <line:686:5, line:696:5> line:686:17 used sub_fix 'void ()' inline
| `-CompoundStmt 0x56490dfd6c18 <col:27, line:696:5>
|-CXXMethodDecl 0x56490dfc37c8 <line:698:5, line:700:5> line:698:30 used value_div 'Timestamp::value_type (Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc3678 <col:40, col:51> col:51 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56490dfc36f0 <col:54, col:63> col:63 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd6da0 <col:66, line:700:5>
|   `-ReturnStmt 0x56490dfd6d90 <line:699:9, col:31>
|     `-CallExpr 0x56490dfd6d30 <col:16, col:31> 'int64_t':'long'
|       |-ImplicitCastExpr 0x56490dfd6d18 <col:16> 'int64_t (*)(int64_t, uint32_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dfd6cc8 <col:16> 'int64_t (int64_t, uint32_t)' lvalue Function 0x56490de4ccc8 'int_divide' 'int64_t (int64_t, uint32_t)'
|       |-ImplicitCastExpr 0x56490dfd6d60 <col:27> 'Timestamp::value_type':'long' <LValueToRValue>
|       | `-DeclRefExpr 0x56490dfd6c88 <col:27> 'Timestamp::value_type':'long' lvalue ParmVar 0x56490dfc3678 'a' 'Timestamp::value_type':'long'
|       `-ImplicitCastExpr 0x56490dfd6d78 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|         `-DeclRefExpr 0x56490dfd6ca8 <col:30> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc36f0 'b' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490dfc3b38 <line:702:5, line:707:5> line:702:24 value_div_mod 'void (int32_t &, int32_t &, Timestamp::value_type, uint32_t)' static inline
| |-ParmVarDecl 0x56490dfc3888 <col:38, col:47> col:47 used div 'int32_t &'
| |-ParmVarDecl 0x56490dfc3900 <col:52, col:61> col:61 used rem 'int32_t &'
| |-ParmVarDecl 0x56490dfc3978 <line:703:38, col:49> col:49 used a 'Timestamp::value_type':'long'
| |-ParmVarDecl 0x56490dfc39f0 <col:52, col:61> col:61 used b 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490dfd70f0 <col:64, line:707:5>
|   |-DeclStmt 0x56490dfd6e30 <line:704:9, col:24>
|   | `-VarDecl 0x56490dfd6dc8 <col:9, col:20> col:20 used quot 'Timestamp::value_type':'long'
|   |-BinaryOperator 0x56490dfd7040 <line:705:9, col:39> 'int32_t':'int' lvalue '='
|   | |-DeclRefExpr 0x56490dfd6e48 <col:9> 'int32_t':'int' lvalue ParmVar 0x56490dfc3900 'rem' 'int32_t &'
|   | `-ImplicitCastExpr 0x56490dfd7028 <col:15, col:39> 'int32_t':'int' <IntegralCast>
|   |   `-CallExpr 0x56490dfd6fc0 <col:15, col:39> 'uint32_t':'unsigned int'
|   |     |-ImplicitCastExpr 0x56490dfd6fa8 <col:15> 'uint32_t (*)(int64_t, uint32_t, int64_t &)' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x56490dfd6f28 <col:15> 'uint32_t (int64_t, uint32_t, int64_t &)' lvalue Function 0x56490de51fc8 'int_remainder' 'uint32_t (int64_t, uint32_t, int64_t &)'
|   |     |-ImplicitCastExpr 0x56490dfd6ff8 <col:29> 'Timestamp::value_type':'long' <LValueToRValue>
|   |     | `-DeclRefExpr 0x56490dfd6ec8 <col:29> 'Timestamp::value_type':'long' lvalue ParmVar 0x56490dfc3978 'a' 'Timestamp::value_type':'long'
|   |     |-ImplicitCastExpr 0x56490dfd7010 <col:32> 'uint32_t':'unsigned int' <LValueToRValue>
|   |     | `-DeclRefExpr 0x56490dfd6ee8 <col:32> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490dfc39f0 'b' 'uint32_t':'unsigned int'
|   |     `-DeclRefExpr 0x56490dfd6f08 <col:35> 'Timestamp::value_type':'long' lvalue Var 0x56490dfd6dc8 'quot' 'Timestamp::value_type':'long'
|   `-BinaryOperator 0x56490dfd70d0 <line:706:9, col:15> 'int32_t':'int' lvalue '='
|     |-DeclRefExpr 0x56490dfd7060 <col:9> 'int32_t':'int' lvalue ParmVar 0x56490dfc3888 'div' 'int32_t &'
|     `-ImplicitCastExpr 0x56490dfd70b8 <col:15> 'int32_t':'int' <IntegralCast>
|       `-ImplicitCastExpr 0x56490dfd70a0 <col:15> 'Timestamp::value_type':'long' <LValueToRValue>
|         `-DeclRefExpr 0x56490dfd7080 <col:15> 'Timestamp::value_type':'long' lvalue Var 0x56490dfd6dc8 'quot' 'Timestamp::value_type':'long'
|-CXXMethodDecl 0x56490dfc3dd8 <line:709:5, col:67> col:17 used assign_now 'void (bool, bool, bool)' inline
| |-ParmVarDecl 0x56490dfc3c08 <col:28, col:33> col:33 recent 'bool'
| |-ParmVarDecl 0x56490dfc3c80 <col:41, col:46> col:46 steady 'bool'
| `-ParmVarDecl 0x56490dfc3cf8 <col:54, col:59> col:59 unwarped 'bool'
|-CXXMethodDecl 0x56490dfc4078 <line:712:5, col:98> col:24 warp_adjust 'void (bool, const Timestamp &, const Timestamp &)' static inline
| |-ParmVarDecl 0x56490dfc3ea0 <col:36, col:41> col:41 steady 'bool'
| |-ParmVarDecl 0x56490dfc3f18 <col:49, col:66> col:66 t_raw 'const Timestamp &'
| `-ParmVarDecl 0x56490dfc3f90 <col:73, col:90> col:90 t_warped 'const Timestamp &'
|-CXXMethodDecl 0x56490dfc6418 <line:713:5, col:42> col:22 warped 'Timestamp (bool) const' inline
| `-ParmVarDecl 0x56490dfc4140 <col:29, col:34> col:34 steady 'bool'
|-CXXMethodDecl 0x56490dfc6618 <line:714:5, col:41> col:10 used warp 'void (bool, bool)'
| |-ParmVarDecl 0x56490dfc64d0 <col:15, col:20> col:20 steady 'bool'
| `-ParmVarDecl 0x56490dfc6548 <col:28, col:33> col:33 from_now 'bool'
|-FriendDecl 0x56490dfc68e8 <line:717:5, col:73> col:24
| `-FunctionDecl 0x56490dfc6828 parent 0x56490da8f278 <col:5, col:73> col:24 used operator== 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56490dfc66d8 <col:35, col:52> col:52 a 'const Timestamp &'
|   `-ParmVarDecl 0x56490dfc6750 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56490dfc6b08 <line:718:5, col:72> col:24
| `-FunctionDecl 0x56490dfc6a48 parent 0x56490da8f278 <col:5, col:72> col:24 used operator< 'bool (const Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56490dfc6938 <col:34, col:51> col:51 a 'const Timestamp &'
|   `-ParmVarDecl 0x56490dfc69b0 <col:54, col:71> col:71 b 'const Timestamp &'
|-FriendDecl 0x56490dfc6cd0 <line:719:5, col:57> col:29
| `-FunctionDecl 0x56490dfc6c18 parent 0x56490da8f278 <col:5, col:57> col:29 operator- 'Timestamp (const Timestamp &)' inline
|   `-ParmVarDecl 0x56490dfc6b58 <col:39, col:56> col:56 b 'const Timestamp &'
|-FriendDecl 0x56490dfc6f58 <line:720:5, col:73> col:30
| `-FunctionDecl 0x56490dfc6e98 parent 0x56490da8f278 <col:5, col:73> col:30 used operator+= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56490dfc6d48 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56490dfc6dc0 <col:55, col:72> col:72 b 'const Timestamp &'
|-FriendDecl 0x56490dfc7178 <line:721:5, col:73> col:30
| `-FunctionDecl 0x56490dfc70b8 parent 0x56490da8f278 <col:5, col:73> col:30 used operator-= 'Timestamp &(Timestamp &, const Timestamp &)' inline
|   |-ParmVarDecl 0x56490dfc6fa8 <col:41, col:52> col:52 a 'Timestamp &'
|   `-ParmVarDecl 0x56490dfc7020 <col:55, col:72> col:72 b 'const Timestamp &'
|-CXXConstructorDecl 0x56490dfc8890 <line:122:7> col:7 implicit used constexpr Timestamp 'void (const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490dfc8978 <col:7> col:7 used 'const Timestamp &'
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc97e8 <col:7> 'Timestamp::rep_t' 'void (const Timestamp::rep_t &) noexcept'
| |   `-MemberExpr 0x56490dfc97a0 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56490dfc3498
| |     `-DeclRefExpr 0x56490dfc9780 <col:7> 'const Timestamp' lvalue ParmVar 0x56490dfc8978 '' 'const Timestamp &'
| `-CompoundStmt 0x56490dfc9848 <col:7>
|-CXXConstructorDecl 0x56490dfc8af8 <col:7> col:7 implicit used constexpr Timestamp 'void (Timestamp &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56490dfc8c08 <col:7> col:7 used 'Timestamp &&'
| |-CXXCtorInitializer Field 0x56490dfc3498 '_t' 'Timestamp::rep_t'
| | `-CXXConstructExpr 0x56490dfc9ae8 <col:7> 'Timestamp::rep_t' 'void (Timestamp::rep_t &&) noexcept'
| |   `-MemberExpr 0x56490dfc9a90 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56490dfc3498
| |     `-CXXStaticCastExpr 0x56490dfc9a60 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
| |       `-DeclRefExpr 0x56490dfc9a30 <col:7> 'Timestamp' lvalue ParmVar 0x56490dfc8c08 '' 'Timestamp &&'
| `-CompoundStmt 0x56490dfc9b48 <col:7>
|-CXXDestructorDecl 0x56490dfc8cb8 <col:7> col:7 implicit referenced ~Timestamp 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56490e094ae0 <col:7> col:7 implicit used operator= 'Timestamp &(const Timestamp &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490e094be8 <col:7> col:7 used 'const Timestamp &'
| `-CompoundStmt 0x56490e0956d8 <col:7>
|   |-CXXMemberCallExpr 0x56490e095678 <col:7> 'Timestamp::rep_t' lvalue
|   | |-MemberExpr 0x56490e0955b8 <col:7> '<bound member function type>' .operator= 0x56490e094c88
|   | | `-MemberExpr 0x56490e0954c8 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
|   | |   `-CXXThisExpr 0x56490e0954b8 <col:7> 'Timestamp *' this
|   | `-MemberExpr 0x56490e095588 <col:7> 'const Timestamp::rep_t' lvalue ._t 0x56490dfc3498
|   |   `-DeclRefExpr 0x56490e095568 <col:7> 'const Timestamp' lvalue ParmVar 0x56490e094be8 '' 'const Timestamp &'
|   `-ReturnStmt 0x56490e0956c8 <col:7>
|     `-UnaryOperator 0x56490e0956b0 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e0956a0 <col:7> 'Timestamp *' this
`-CXXMethodDecl 0x56490e094f88 <col:7> col:7 implicit used operator= 'Timestamp &(Timestamp &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56490e095098 <col:7> col:7 used 'Timestamp &&'
  `-CompoundStmt 0x56490e0f0968 <col:7>
    |-CXXMemberCallExpr 0x56490e0f0908 <col:7> 'Timestamp::rep_t' lvalue
    | |-MemberExpr 0x56490e0f0870 <col:7> '<bound member function type>' .operator= 0x56490e094e08
    | | `-MemberExpr 0x56490e0f0740 <col:7> 'Timestamp::rep_t' lvalue ->_t 0x56490dfc3498
    | |   `-CXXThisExpr 0x56490e0f0730 <col:7> 'Timestamp *' this
    | `-MemberExpr 0x56490e0f0840 <col:7> 'Timestamp::rep_t' xvalue ._t 0x56490dfc3498
    |   `-CXXStaticCastExpr 0x56490e0f0810 <col:7> 'Timestamp' xvalue static_cast<class Timestamp &&> <NoOp>
    |     `-DeclRefExpr 0x56490e0f07e0 <col:7> 'Timestamp' lvalue ParmVar 0x56490e095098 '' 'Timestamp &&'
    `-ReturnStmt 0x56490e0f0958 <col:7>
      `-UnaryOperator 0x56490e0f0940 <col:7> 'Timestamp' lvalue prefix '*' cannot overflow
        `-CXXThisExpr 0x56490e0f0930 <col:7> 'Timestamp *' this

Layout: <CGRecordLayout
  LLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  NonVirtualBaseLLVMType:%class.Timestamp = type { %"union.Timestamp::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0d8590 <../dummy_inc/click/task.hh:31:1, line:47:1> line:31:8 referenced struct TaskLink definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0d86a8 <col:1, col:8> col:8 implicit referenced struct TaskLink
|-FieldDecl 0x56490e0d8778 <line:33:5, col:15> col:15 referenced _prev 'TaskLink *'
|-FieldDecl 0x56490e0d87d8 <line:34:5, col:15> col:15 referenced _next 'TaskLink *'
|-FieldDecl 0x56490e0d8840 <line:37:5, col:14> col:14 referenced _pass 'unsigned int'
|-CXXConstructorDecl 0x56490e0d88c8 <line:39:5, line:46:5> line:39:5 used TaskLink 'void ()'
| `-CompoundStmt 0x56490e0d8b30 <col:16, line:46:5>
|   |-BinaryOperator 0x56490e0d8a78 <line:41:9, col:25> 'TaskLink *' lvalue '='
|   | |-MemberExpr 0x56490e0d8998 <col:9> 'TaskLink *' lvalue ->_prev 0x56490e0d8778
|   | | `-CXXThisExpr 0x56490e0d8988 <col:9> 'TaskLink *' implicit this
|   | `-ImplicitCastExpr 0x56490e0d8a60 <col:17, col:25> 'TaskLink *' <LValueToRValue>
|   |   `-BinaryOperator 0x56490e0d8a40 <col:17, col:25> 'TaskLink *' lvalue '='
|   |     |-MemberExpr 0x56490e0d89d8 <col:17> 'TaskLink *' lvalue ->_next 0x56490e0d87d8
|   |     | `-CXXThisExpr 0x56490e0d89c8 <col:17> 'TaskLink *' implicit this
|   |     `-ImplicitCastExpr 0x56490e0d8a28 <col:25> 'TaskLink *' <NullToPointer>
|   |       `-IntegerLiteral 0x56490e0d8a08 <col:25> 'int' 0
|   `-BinaryOperator 0x56490e0d8b10 <line:44:9, col:17> 'unsigned int' lvalue '='
|     |-MemberExpr 0x56490e0d8aa8 <col:9> 'unsigned int' lvalue ->_pass 0x56490e0d8840
|     | `-CXXThisExpr 0x56490e0d8a98 <col:9> 'TaskLink *' implicit this
|     `-ImplicitCastExpr 0x56490e0d8af8 <col:17> 'unsigned int' <IntegralCast>
|       `-IntegerLiteral 0x56490e0d8ad8 <col:17> 'int' 0
|-CXXConstructorDecl 0x56490e153918 <line:31:8> col:8 implicit constexpr TaskLink 'void (const TaskLink &)' inline default trivial noexcept-unevaluated 0x56490e153918
| `-ParmVarDecl 0x56490e153a28 <col:8> col:8 'const TaskLink &'
|-CXXConstructorDecl 0x56490e153ac8 <col:8> col:8 implicit constexpr TaskLink 'void (TaskLink &&)' inline default trivial noexcept-unevaluated 0x56490e153ac8
| `-ParmVarDecl 0x56490e153bd8 <col:8> col:8 'TaskLink &&'
|-CXXDestructorDecl 0x56490e153dc8 <col:8> col:8 implicit ~TaskLink 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56490e1545c8 <col:8> col:8 implicit operator= 'TaskLink &(const TaskLink &)' inline default trivial noexcept-unevaluated 0x56490e1545c8
| `-ParmVarDecl 0x56490e1546d8 <col:8> col:8 'const TaskLink &'
`-CXXMethodDecl 0x56490e154748 <col:8> col:8 implicit operator= 'TaskLink &(TaskLink &&)' inline default trivial noexcept-unevaluated 0x56490e154748
  `-ParmVarDecl 0x56490e154858 <col:8> col:8 'TaskLink &&'

Layout: <CGRecordLayout
  LLVMType:%struct.TaskLink = type <{ %struct.TaskLink*, %struct.TaskLink*, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%struct.TaskLink.base = type <{ %struct.TaskLink*, %struct.TaskLink*, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0dbee8 <../dummy_inc/click/task.hh:315:9, line:319:9> line:315:9 struct definition
|-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56490e0dc018 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
|-FieldDecl 0x56490e0dc078 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
|-FieldDecl 0x56490e0dc0d8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
|-CXXConstructorDecl 0x56490e15aad8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
|-CXXDestructorDecl 0x56490e15abb0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56490e15ae68 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x56490e15ae68
| `-ParmVarDecl 0x56490e15af78 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
`-CXXConstructorDecl 0x56490e15b018 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x56490e15b018
  `-ParmVarDecl 0x56490e15b128 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'

Layout: <CGRecordLayout
  LLVMType:%struct.anon = type { i16, i8, i8 }
  NonVirtualBaseLLVMType:%struct.anon = type { i16, i8, i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0dbd40 <../dummy_inc/click/task.hh:314:5, line:321:5> line:314:11 union Status definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0dbe58 <col:5, col:11> col:11 implicit union Status
|-CXXRecordDecl 0x56490e0dbee8 <line:315:9, line:319:9> line:315:9 struct definition
| |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56490e0dc018 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| |-FieldDecl 0x56490e0dc078 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| |-FieldDecl 0x56490e0dc0d8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| |-CXXConstructorDecl 0x56490e15aad8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| |-CXXDestructorDecl 0x56490e15abb0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| |-CXXConstructorDecl 0x56490e15ae68 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x56490e15ae68
| | `-ParmVarDecl 0x56490e15af78 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| `-CXXConstructorDecl 0x56490e15b018 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x56490e15b018
|   `-ParmVarDecl 0x56490e15b128 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
|-FieldDecl 0x56490e0dc198 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
|-IndirectFieldDecl 0x56490e0dc1f8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| |-Field 0x56490e0dc198 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x56490e0dc018 'home_thread_id' 'int16_t':'short'
|-IndirectFieldDecl 0x56490e0dc250 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| |-Field 0x56490e0dc198 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x56490e0dc078 'is_scheduled' 'uint8_t':'unsigned char'
|-IndirectFieldDecl 0x56490e0dc2a8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| |-Field 0x56490e0dc198 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| `-Field 0x56490e0dc0d8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
|-FieldDecl 0x56490e0dc300 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56490e15a9e8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490e15c3e8 <col:11>
|-CXXConstructorDecl 0x56490e15acb8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x56490e15acb8
| `-ParmVarDecl 0x56490e15adc8 <col:11> col:11 'const Task::Status &'
|-CXXConstructorDecl 0x56490e15c260 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x56490e15c260
| `-ParmVarDecl 0x56490e15c378 <col:11> col:11 'Task::Status &&'
`-CXXDestructorDecl 0x56490e194af8 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Status" = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<16> >
         0 |   vector_memory<class sized_array_memory<16> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct TimerSet::heap_element>
         0 |   class vector_memory<class sized_array_memory<16> > vm_
         0 |     vector_memory<class sized_array_memory<16> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<8> >
         0 |   vector_memory<class sized_array_memory<8> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class Timer *>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SimpleSpinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class TimerSet
         0 |   class Timestamp _timer_expiry
         0 |     union Timestamp::rep_t _t
         0 |       int64_t x
         8 |   unsigned int _max_timer_stride
        12 |   unsigned int _timer_stride
        16 |   unsigned int _timer_count
        24 |   class Vector<struct TimerSet::heap_element> _timer_heap
        24 |     class vector_memory<class sized_array_memory<16> > vm_
        24 |       vector_memory<class sized_array_memory<16> >::type * l_
        32 |       vector_memory::size_type n_
        36 |       vector_memory::size_type capacity_
        40 |   class Vector<class Timer *> _timer_runchunk
        40 |     class vector_memory<class sized_array_memory<8> > vm_
        40 |       vector_memory<class sized_array_memory<8> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   class SimpleSpinlock _timer_lock (empty)
        64 |   class Timestamp _timer_check
        64 |     union Timestamp::rep_t _t
        64 |       int64_t x
        72 |   uint32_t _timer_check_reports
           | [sizeof=80, dsize=76, align=8,
           |  nvsize=76, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct pollfd>
         0 |   class vector_memory<class sized_array_memory<8> > vm_
         0 |     vector_memory<class sized_array_memory<8> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<24> >
         0 |   vector_memory<class sized_array_memory<24> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<struct SelectSet::SelectorInfo>
         0 |   class vector_memory<class sized_array_memory<24> > vm_
         0 |     vector_memory<class sized_array_memory<24> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class SelectSet
         0 |   int [2] _wake_pipe
         8 |   volatile _Bool _wake_pipe_pending
        16 |   class Vector<struct pollfd> _pollfds
        16 |     class vector_memory<class sized_array_memory<8> > vm_
        16 |       vector_memory<class sized_array_memory<8> >::type * l_
        24 |       vector_memory::size_type n_
        28 |       vector_memory::size_type capacity_
        32 |   class Vector<struct SelectSet::SelectorInfo> _selinfo
        32 |     class vector_memory<class sized_array_memory<24> > vm_
        32 |       vector_memory<class sized_array_memory<24> >::type * l_
        40 |       vector_memory::size_type n_
        44 |       vector_memory::size_type capacity_
           | [sizeof=48, dsize=48, align=8,
           |  nvsize=48, nvalign=8]

*** Dumping AST Record Layout
         0 | class Spinlock (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class SpinlockIRQ (empty)
           | [sizeof=1, dsize=0, align=1,
           |  nvsize=0, nvalign=1]

*** Dumping AST Record Layout
         0 | class RouterThread
         0 |   struct TaskLink _task_link
         0 |     struct TaskLink * _prev
         8 |     struct TaskLink * _next
        16 |     unsigned int _pass
        24 |   volatile _Bool _stop_flag
        32 |   class TimerSet _timers
        32 |     class Timestamp _timer_expiry
        32 |       union Timestamp::rep_t _t
        32 |         int64_t x
        40 |     unsigned int _max_timer_stride
        44 |     unsigned int _timer_stride
        48 |     unsigned int _timer_count
        56 |     class Vector<struct TimerSet::heap_element> _timer_heap
        56 |       class vector_memory<class sized_array_memory<16> > vm_
        56 |         vector_memory<class sized_array_memory<16> >::type * l_
        64 |         vector_memory::size_type n_
        68 |         vector_memory::size_type capacity_
        72 |     class Vector<class Timer *> _timer_runchunk
        72 |       class vector_memory<class sized_array_memory<8> > vm_
        72 |         vector_memory<class sized_array_memory<8> >::type * l_
        80 |         vector_memory::size_type n_
        84 |         vector_memory::size_type capacity_
        88 |     class SimpleSpinlock _timer_lock (empty)
        96 |     class Timestamp _timer_check
        96 |       union Timestamp::rep_t _t
        96 |         int64_t x
       104 |     uint32_t _timer_check_reports
       112 |   class SelectSet _selects
       112 |     int [2] _wake_pipe
       120 |     volatile _Bool _wake_pipe_pending
       128 |     class Vector<struct pollfd> _pollfds
       128 |       class vector_memory<class sized_array_memory<8> > vm_
       128 |         vector_memory<class sized_array_memory<8> >::type * l_
       136 |         vector_memory::size_type n_
       140 |         vector_memory::size_type capacity_
       144 |     class Vector<struct SelectSet::SelectorInfo> _selinfo
       144 |       class vector_memory<class sized_array_memory<24> > vm_
       144 |         vector_memory<class sized_array_memory<24> >::type * l_
       152 |         vector_memory::size_type n_
       156 |         vector_memory::size_type capacity_
       192 |   class Spinlock _task_lock (empty)
       196 |   class atomic_uint32_t _task_blocker
       196 |     uint32_t _val
       200 |   class atomic_uint32_t _task_blocker_waiting
       200 |     uint32_t _val
       208 |   union Task::Pending _pending_head
       208 |     class Task * t
       208 |     uintptr_t x
       216 |   class Task::Pending * _pending_tail
       224 |   class SpinlockIRQ _pending_lock (empty)
       256 |   class Master * _master
       264 |   int _id
       268 |   _Bool _driver_entered
       272 |   unsigned int _tasks_per_iter
       276 |   unsigned int _iters_per_os
           | [sizeof=320, dsize=280, align=64,
           |  nvsize=280, nvalign=64]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e0f5420 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<16>'
|-CXXRecordDecl 0x56490e0f55f8 prev 0x56490e0f5420 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56490e0f5688 <col:46, col:52> col:46 public
|-TypedefDecl 0x56490e0f56b0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e0fa7e0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<16>::type':'char_array<16>'
| `-ElaboratedType 0x56490e0fa790 'typename sized_array_memory<16>::type' sugar
|   `-TypedefType 0x56490e0f5b60 'sized_array_memory<16>::type' sugar
|     |-Typedef 0x56490e0f5a60 'type'
|     `-TemplateSpecializationType 0x56490e0f59f0 'char_array<16UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56490e0f58d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|       |   `-SubstNonTypeTemplateParmExpr 0x56490e0f58b0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56490e0f5890 <col:24> 'unsigned long' 16
|       `-RecordType 0x56490e0f59d0 'char_array<16>'
|         `-ClassTemplateSpecialization 0x56490e0f58f0 'char_array'
|-TypedefDecl 0x56490e0fa898 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<16> >::type *'
| `-PointerType 0x56490e0fa860 'vector_memory<sized_array_memory<16> >::type *'
|   `-TypedefType 0x56490e0fa840 'vector_memory<sized_array_memory<16> >::type' sugar
|     |-Typedef 0x56490e0fa7e0 'type'
|     `-ElaboratedType 0x56490e0fa790 'typename sized_array_memory<16>::type' sugar
|       `-TypedefType 0x56490e0f5b60 'sized_array_memory<16>::type' sugar
|         |-Typedef 0x56490e0f5a60 'type'
|         `-TemplateSpecializationType 0x56490e0f59f0 'char_array<16UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56490e0f58d0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 16
|           |   `-SubstNonTypeTemplateParmExpr 0x56490e0f58b0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56490e0f5890 <col:24> 'unsigned long' 16
|           `-RecordType 0x56490e0f59d0 'char_array<16>'
|             `-ClassTemplateSpecialization 0x56490e0f58f0 'char_array'
|-CXXMethodDecl 0x56490e0faa18 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<16> >::type *) const' inline
| `-ParmVarDecl 0x56490e0fa928 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXConstructorDecl 0x56490e0fab08 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56490e0fabe8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56490e0fabe8
|-CXXMethodDecl 0x56490e0faeb8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x56490e0fadc0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<16> > &'
|-CXXMethodDecl 0x56490e0fb0f8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56490e0faf70 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e0fafe8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fb2c8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56490e0fb1b8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e0fb230 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fb428 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x56490e0fb4f8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<16> >::iterator ()'
|-CXXMethodDecl 0x56490e0fb748 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56490e0fb5b8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x56490e0fb630 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fb9a8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<16> >::iterator (vector_memory<sized_array_memory<16> >::iterator, vector_memory<sized_array_memory<16> >::iterator)'
| |-ParmVarDecl 0x56490e0fb818 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
| `-ParmVarDecl 0x56490e0fb890 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<16> >::iterator':'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fbb68 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x56490e0fba78 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fbd28 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<16> >::type *)' inline
| `-ParmVarDecl 0x56490e0fbc30 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fbde0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e0fbe90 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e0fc0c8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<16> >::type *)'
| |-ParmVarDecl 0x56490e0fbf40 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e0fbfb8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<16> >::type *'
|-CXXMethodDecl 0x56490e0fc368 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<16> > &)'
| `-ParmVarDecl 0x56490e0fc270 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<16> > &'
|-FieldDecl 0x56490e0fc430 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<16> >::type *'
|-FieldDecl 0x56490e0fc480 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56490e0fc4d0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory = type { %struct.char_array*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e0f3f78 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'TimerSet::heap_element'
|-CXXRecordDecl 0x56490e0f4188 prev 0x56490e0f3f78 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56490e0f5390 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<heap_element>::type':'sized_array_memory<16>'
| `-ElaboratedType 0x56490e0f5340 'typename array_memory<heap_element>::type' sugar
|   `-TypedefType 0x56490e0f5320 'conditional<true, sized_array_memory<16>, typed_array_memory<TimerSet::heap_element> >::type' sugar
|     |-Typedef 0x56490e0f51d0 'type'
|     `-SubstTemplateTypeParmType 0x56490e0f4ff0 'sized_array_memory<16>' sugar
|       |-TemplateTypeParmType 0x56490dd37900 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd378a8 'T'
|       `-RecordType 0x56490e0f4b40 'sized_array_memory<16>'
|         `-ClassTemplateSpecialization 0x56490e0f4a58 'sized_array_memory'
|-FieldDecl 0x56490e0fc520 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<TimerSet::heap_element>::array_memory_type>':'vector_memory<sized_array_memory<16> >' mutable
|-AccessSpecDecl 0x56490e0fc570 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56490e0fc5a8 <line:118:5, col:15> col:15 value_type 'TimerSet::heap_element':'TimerSet::heap_element'
| `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|   |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56490dde8750 'T'
|   `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|     `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fc668 <line:119:5, col:16> col:16 reference 'TimerSet::heap_element &'
| `-LValueReferenceType 0x56490e0fc630 'TimerSet::heap_element &'
|   `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|       `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fc6f8 <line:120:5, col:22> col:22 const_reference 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x56490e0fc6c0 'const TimerSet::heap_element &'
|   `-QualType 0x56490e0f4221 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|         `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fc788 <line:121:5, col:16> col:16 pointer 'TimerSet::heap_element *'
| `-PointerType 0x56490e0fc750 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|       `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fc848 <line:122:5, col:22> col:22 const_pointer 'const TimerSet::heap_element *'
| `-PointerType 0x56490e0fc810 'const TimerSet::heap_element *'
|   `-QualType 0x56490e0f4221 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|         `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fd4a0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<heap_element>::type':'const TimerSet::heap_element &'
| `-ElaboratedType 0x56490e0fd450 'typename fast_argument<heap_element>::type' sugar
|   `-TypedefType 0x56490e0fd430 'fast_argument<TimerSet::heap_element, true>::type' sugar
|     |-Typedef 0x56490e0fd368 'type'
|     `-LValueReferenceType 0x56490e0fd330 'const TimerSet::heap_element &'
|       `-QualType 0x56490e0fd0d1 'const TimerSet::heap_element' const
|         `-SubstTemplateTypeParmType 0x56490e0fd0d0 'TimerSet::heap_element' sugar
|           |-TemplateTypeParmType 0x56490dd40ee0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56490dd40e88 'T'
|           `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|             `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fd508 <line:126:5, col:22> col:22 const_access_type 'const TimerSet::heap_element &'
| `-LValueReferenceType 0x56490e0fc6c0 'const TimerSet::heap_element &'
|   `-QualType 0x56490e0f4221 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|         `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fd560 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e0fd5c8 <line:130:5, col:16> col:16 iterator 'TimerSet::heap_element *'
| `-PointerType 0x56490e0fc750 'TimerSet::heap_element *'
|   `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|       `-CXXRecord 0x56490e0f30f0 'heap_element'
|-TypedefDecl 0x56490e0fd630 <line:131:5, col:22> col:22 const_iterator 'const TimerSet::heap_element *'
| `-PointerType 0x56490e0fc810 'const TimerSet::heap_element *'
|   `-QualType 0x56490e0f4221 'const TimerSet::heap_element' const
|     `-SubstTemplateTypeParmType 0x56490e0f4220 'TimerSet::heap_element' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e0f3180 'TimerSet::heap_element'
|         `-CXXRecord 0x56490e0f30f0 'heap_element'
|-EnumDecl 0x56490e0fd688 <line:134:5> col:5
| `-EnumConstantDecl 0x56490e0fd780 <col:12, col:40> col:12 RESERVE_GROW 'Vector<TimerSet::heap_element>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56490e0fd760 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56490dde9968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56490dde9940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56490dde9920 <col:40> 'int' 1
|-CXXConstructorDecl 0x56490e0fd808 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56490e0fda98 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e0fd8c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e0fd960 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXConstructorDecl 0x56490e0fdd58 <line:139:5, col:37> col:12 Vector 'void (const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x56490e0fdc40 <col:19, col:36> col:36 x 'const Vector<TimerSet::heap_element> &'
|-CXXConstructorDecl 0x56490e0fe018 <line:141:5, col:32> col:12 Vector 'void (Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x56490e0fdf00 <col:19, col:31> col:31 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x56490e0fe360 <line:144:5, col:51> col:23 operator= 'Vector<TimerSet::heap_element> &(const Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x56490e0fe240 <col:33, col:50> col:50 x 'const Vector<TimerSet::heap_element> &'
|-CXXMethodDecl 0x56490e0fe670 <line:146:5, col:46> col:23 operator= 'Vector<TimerSet::heap_element> &(Vector<TimerSet::heap_element> &&)' inline
| `-ParmVarDecl 0x56490e0fe550 <col:33, col:45> col:45 x 'Vector<TimerSet::heap_element> &&'
|-CXXMethodDecl 0x56490e0fe960 <line:148:5, col:70> col:23 assign 'Vector<TimerSet::heap_element> &(Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e0fe7a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e0fe820 <col:43, col:69> col:63 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56490e0feab8 <line:150:5, col:55> col:49 begin 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x56490e0feb98 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0febf0 <col:30> Inherited
|-CXXMethodDecl 0x56490e0fec38 <line:151:5, col:53> col:49 end 'Vector<TimerSet::heap_element>::iterator ()'
| |-NoInlineAttr 0x56490e0fece8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0fed40 <col:30> Inherited
|-CXXMethodDecl 0x56490e0fee08 <line:152:5, col:63> col:55 begin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56490e0feeb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0fef10 <col:30> Inherited
|-CXXMethodDecl 0x56490e0fef58 <line:153:5, col:61> col:55 end 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56490e0ff008 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0ff060 <col:30> Inherited
|-CXXMethodDecl 0x56490e0ff0a8 <line:154:5, col:64> col:55 cbegin 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56490e0ff158 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0ff1b0 <col:30> Inherited
|-CXXMethodDecl 0x56490e0ff1f8 <line:155:5, col:62> col:55 cend 'Vector<TimerSet::heap_element>::const_iterator () const'
| |-NoInlineAttr 0x56490e0ff2a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0ff300 <col:30> Inherited
|-CXXMethodDecl 0x56490e0ff328 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e0ff3d8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e0ff488 <line:159:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56490e0ff648 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e0ff538 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e0ff5b0 <col:37, col:63> col:57 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56490e0ff798 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56490e0ff708 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e0ff948 <line:163:5, col:65> col:43 operator[] 'TimerSet::heap_element &(Vector::size_type)'
| |-ParmVarDecl 0x56490e0ff850 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e0ffa00 <col:20>
| `-OptimizeNoneAttr 0x56490e0ffa58 <col:30>
|-CXXMethodDecl 0x56490e0ffb78 <line:164:5, col:73> col:49 operator[] 'const TimerSet::heap_element &(Vector::size_type) const'
| |-ParmVarDecl 0x56490e0ffa80 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e0ffc30 <col:20>
| `-OptimizeNoneAttr 0x56490e0ffc88 <col:30>
|-CXXMethodDecl 0x56490e0ffd40 <line:165:5, col:29> col:15 at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e0ffcb0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e0ffe88 <line:166:5, col:37> col:21 at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e0ffdf8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e0fffb8 <line:167:5, col:21> col:15 front 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x56490e1000e8 <line:168:5, col:29> col:21 front 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x56490e1001b8 <line:169:5, col:20> col:15 back 'TimerSet::heap_element &()' inline
|-CXXMethodDecl 0x56490e100288 <line:170:5, col:28> col:21 back 'const TimerSet::heap_element &() const' inline
|-CXXMethodDecl 0x56490e1003c8 <line:172:5, col:39> col:15 used unchecked_at 'TimerSet::heap_element &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e100338 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e100510 <line:173:5, col:47> col:21 unchecked_at 'const TimerSet::heap_element &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e100480 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e100658 <line:174:5, col:59> col:15 at_u 'TimerSet::heap_element &(Vector::size_type)' inline
| |-ParmVarDecl 0x56490e1005c8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e100710 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56490e100810 <line:175:5, col:71> col:21 at_u 'const TimerSet::heap_element &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56490e100780 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e1008c8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56490e100988 <line:177:5, col:20> col:15 data 'TimerSet::heap_element *()' inline
|-CXXMethodDecl 0x56490e100a88 <line:178:5, col:28> col:21 data 'const TimerSet::heap_element *() const' inline
|-CXXMethodDecl 0x56490e100c38 <line:180:5, col:48> col:17 push_back 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e100b48 <col:27, col:47> col:47 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-FunctionTemplateDecl 0x56490e1013f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56490e100cf0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<TimerSet::heap_element>':'fast_argument<TimerSet::heap_element, true>'
| `-CXXMethodDecl 0x56490e101358 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (TimerSet::heap_element &&)' inline
|   `-ParmVarDecl 0x56490e101258 <col:58, col:62> col:62 v 'TimerSet::heap_element &&'
|-CXXMethodDecl 0x56490e1014d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e101628 <line:186:5, col:49> col:17 push_front 'void (Vector<TimerSet::heap_element>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e101598 <col:28, col:48> col:48 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56490e101720 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56490e101968 <line:189:5, col:62> col:21 insert 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e1017e0 <col:28, col:37> col:37 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x56490e101858 <col:41, col:61> col:61 v 'Vector<TimerSet::heap_element>::value_argument_type':'const TimerSet::heap_element &'
|-CXXMethodDecl 0x56490e101b28 <line:190:5, col:38> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator)' inline
| `-ParmVarDecl 0x56490e101a38 <col:27, col:36> col:36 it 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x56490e101d78 <line:191:5, col:49> col:21 erase 'Vector<TimerSet::heap_element>::iterator (Vector<TimerSet::heap_element>::iterator, Vector<TimerSet::heap_element>::iterator)' inline
| |-ParmVarDecl 0x56490e101bf0 <col:27, col:36> col:36 a 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
| `-ParmVarDecl 0x56490e101c68 <col:39, col:48> col:48 b 'Vector<TimerSet::heap_element>::iterator':'TimerSet::heap_element *'
|-CXXMethodDecl 0x56490e101e38 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e102098 <line:195:5, col:34> col:17 swap 'void (Vector<TimerSet::heap_element> &)' inline
| `-ParmVarDecl 0x56490e101fa0 <col:22, col:33> col:33 x 'Vector<TimerSet::heap_element> &'
`-CXXDestructorDecl 0x56490e102168 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56490e102168

Layout: <CGRecordLayout
  LLVMType:%class.Vector = type { %class.vector_memory }
  NonVirtualBaseLLVMType:%class.Vector = type { %class.vector_memory }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e103690 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<8>'
|-CXXRecordDecl 0x56490e103868 prev 0x56490e103690 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56490e1038f8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56490e103920 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e1054f0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<8>::type':'char_array<8>'
| `-ElaboratedType 0x56490e1054a0 'typename sized_array_memory<8>::type' sugar
|   `-TypedefType 0x56490e103dd0 'sized_array_memory<8>::type' sugar
|     |-Typedef 0x56490e103cd0 'type'
|     `-TemplateSpecializationType 0x56490e103c60 'char_array<8UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56490e103b40 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|       |   `-SubstNonTypeTemplateParmExpr 0x56490e103b20 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56490e103b00 <col:24> 'unsigned long' 8
|       `-RecordType 0x56490e103c40 'char_array<8>'
|         `-ClassTemplateSpecialization 0x56490e103b60 'char_array'
|-TypedefDecl 0x56490e1055a8 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<8> >::type *'
| `-PointerType 0x56490e105570 'vector_memory<sized_array_memory<8> >::type *'
|   `-TypedefType 0x56490e105550 'vector_memory<sized_array_memory<8> >::type' sugar
|     |-Typedef 0x56490e1054f0 'type'
|     `-ElaboratedType 0x56490e1054a0 'typename sized_array_memory<8>::type' sugar
|       `-TypedefType 0x56490e103dd0 'sized_array_memory<8>::type' sugar
|         |-Typedef 0x56490e103cd0 'type'
|         `-TemplateSpecializationType 0x56490e103c60 'char_array<8UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56490e103b40 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 8
|           |   `-SubstNonTypeTemplateParmExpr 0x56490e103b20 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56490e103b00 <col:24> 'unsigned long' 8
|           `-RecordType 0x56490e103c40 'char_array<8>'
|             `-ClassTemplateSpecialization 0x56490e103b60 'char_array'
|-CXXMethodDecl 0x56490e105728 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<8> >::type *) const' inline
| `-ParmVarDecl 0x56490e105638 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXConstructorDecl 0x56490e105818 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56490e1058f8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56490e1058f8
|-CXXMethodDecl 0x56490e105bc8 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56490e105ad0 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<8> > &'
|-CXXMethodDecl 0x56490e105e08 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56490e105c80 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e105cf8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e105fd8 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56490e105ec8 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e105f40 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e106138 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56490e106208 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<8> >::iterator ()'
|-CXXMethodDecl 0x56490e106458 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56490e1062c8 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56490e106340 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e1066b8 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<8> >::iterator (vector_memory<sized_array_memory<8> >::iterator, vector_memory<sized_array_memory<8> >::iterator)'
| |-ParmVarDecl 0x56490e106528 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
| `-ParmVarDecl 0x56490e1065a0 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<8> >::iterator':'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e106878 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56490e106788 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e106a38 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<8> >::type *)' inline
| `-ParmVarDecl 0x56490e106940 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e106af0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e106ba0 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e106dd8 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<8> >::type *)'
| |-ParmVarDecl 0x56490e106c50 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e106cc8 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<8> >::type *'
|-CXXMethodDecl 0x56490e107078 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<8> > &)'
| `-ParmVarDecl 0x56490e106f80 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<8> > &'
|-FieldDecl 0x56490e107140 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<8> >::type *'
|-FieldDecl 0x56490e107190 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56490e1071e0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.1 = type { %struct.char_array.2*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e1022b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'Timer *'
|-CXXRecordDecl 0x56490e1024b8 prev 0x56490e1022b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56490e103600 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<Timer *>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x56490e1035b0 'typename array_memory<Timer *>::type' sugar
|   `-TypedefType 0x56490e103590 'conditional<true, sized_array_memory<8>, typed_array_memory<Timer *> >::type' sugar
|     |-Typedef 0x56490e103440 'type'
|     `-SubstTemplateTypeParmType 0x56490e103260 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56490dd37900 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd378a8 'T'
|       `-RecordType 0x56490e102db0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x56490e102cc8 'sized_array_memory'
|-FieldDecl 0x56490e107230 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<Timer *>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56490e107280 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56490e1072b8 <line:118:5, col:15> col:15 value_type 'Timer *':'Timer *'
| `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|   |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56490dde8750 'T'
|   `-PointerType 0x56490e0baaf0 'Timer *'
|     `-RecordType 0x56490e0b9c60 'Timer'
|       `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e107378 <line:119:5, col:16> col:16 reference 'Timer *&'
| `-LValueReferenceType 0x56490e107340 'Timer *&'
|   `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-PointerType 0x56490e0baaf0 'Timer *'
|       `-RecordType 0x56490e0b9c60 'Timer'
|         `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e107438 <line:120:5, col:22> col:22 const_reference 'Timer *const &'
| `-LValueReferenceType 0x56490e107400 'Timer *const &'
|   `-QualType 0x56490e102551 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-PointerType 0x56490e0baaf0 'Timer *'
|         `-RecordType 0x56490e0b9c60 'Timer'
|           `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e1074f8 <line:121:5, col:16> col:16 pointer 'Timer **'
| `-PointerType 0x56490e1074c0 'Timer **'
|   `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-PointerType 0x56490e0baaf0 'Timer *'
|       `-RecordType 0x56490e0b9c60 'Timer'
|         `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e1075b8 <line:122:5, col:22> col:22 const_pointer 'Timer *const *'
| `-PointerType 0x56490e107580 'Timer *const *'
|   `-QualType 0x56490e102551 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-PointerType 0x56490e0baaf0 'Timer *'
|         `-RecordType 0x56490e0b9c60 'Timer'
|           `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e108190 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<Timer *>::type':'Timer *'
| `-ElaboratedType 0x56490e108140 'typename fast_argument<Timer *>::type' sugar
|   `-TypedefType 0x56490e108120 'fast_argument<Timer *, false>::type' sugar
|     |-Typedef 0x56490e1080b0 'type'
|     `-SubstTemplateTypeParmType 0x56490e107e70 'Timer *' sugar
|       |-TemplateTypeParmType 0x56490dd41610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd415c0 'T'
|       `-PointerType 0x56490e0baaf0 'Timer *'
|         `-RecordType 0x56490e0b9c60 'Timer'
|           `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e1081f8 <line:126:5, col:22> col:22 const_access_type 'Timer *const &'
| `-LValueReferenceType 0x56490e107400 'Timer *const &'
|   `-QualType 0x56490e102551 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-PointerType 0x56490e0baaf0 'Timer *'
|         `-RecordType 0x56490e0b9c60 'Timer'
|           `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e108250 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e1082b8 <line:130:5, col:16> col:16 iterator 'Timer **'
| `-PointerType 0x56490e1074c0 'Timer **'
|   `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-PointerType 0x56490e0baaf0 'Timer *'
|       `-RecordType 0x56490e0b9c60 'Timer'
|         `-CXXRecord 0x56490e0de848 'Timer'
|-TypedefDecl 0x56490e108320 <line:131:5, col:22> col:22 const_iterator 'Timer *const *'
| `-PointerType 0x56490e107580 'Timer *const *'
|   `-QualType 0x56490e102551 'Timer *const' const
|     `-SubstTemplateTypeParmType 0x56490e102550 'Timer *' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-PointerType 0x56490e0baaf0 'Timer *'
|         `-RecordType 0x56490e0b9c60 'Timer'
|           `-CXXRecord 0x56490e0de848 'Timer'
|-EnumDecl 0x56490e108378 <line:134:5> col:5
| `-EnumConstantDecl 0x56490e108470 <col:12, col:40> col:12 RESERVE_GROW 'Vector<Timer *>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56490e108450 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56490dde9968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56490dde9940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56490dde9920 <col:40> 'int' 1
|-CXXConstructorDecl 0x56490e1084f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56490e108788 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e1085b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e108650 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXConstructorDecl 0x56490e108a48 <line:139:5, col:37> col:12 Vector 'void (const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56490e108930 <col:19, col:36> col:36 x 'const Vector<Timer *> &'
|-CXXConstructorDecl 0x56490e108d08 <line:141:5, col:32> col:12 Vector 'void (Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x56490e108bf0 <col:19, col:31> col:31 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x56490e109050 <line:144:5, col:51> col:23 operator= 'Vector<Timer *> &(const Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56490e108f30 <col:33, col:50> col:50 x 'const Vector<Timer *> &'
|-CXXMethodDecl 0x56490e109360 <line:146:5, col:46> col:23 operator= 'Vector<Timer *> &(Vector<Timer *> &&)' inline
| `-ParmVarDecl 0x56490e109240 <col:33, col:45> col:45 x 'Vector<Timer *> &&'
|-CXXMethodDecl 0x56490e109650 <line:148:5, col:70> col:23 assign 'Vector<Timer *> &(Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e109498 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e109510 <col:43, col:69> col:63 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56490e109fe8 <line:150:5, col:55> col:49 begin 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x56490e10a0c8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e10a120 <col:30> Inherited
|-CXXMethodDecl 0x56490e10a168 <line:151:5, col:53> col:49 end 'Vector<Timer *>::iterator ()'
| |-NoInlineAttr 0x56490e10a218 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e10a270 <col:30> Inherited
|-CXXMethodDecl 0x56490e10a338 <line:152:5, col:63> col:55 begin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56490e10a3e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e10a440 <col:30> Inherited
|-CXXMethodDecl 0x56490e10a488 <line:153:5, col:61> col:55 end 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56490e10a538 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e10a590 <col:30> Inherited
|-CXXMethodDecl 0x56490e10a5d8 <line:154:5, col:64> col:55 cbegin 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56490e10a688 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e10a6e0 <col:30> Inherited
|-CXXMethodDecl 0x56490e10a728 <line:155:5, col:62> col:55 cend 'Vector<Timer *>::const_iterator () const'
| |-NoInlineAttr 0x56490e10a7d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e10a830 <col:30> Inherited
|-CXXMethodDecl 0x56490e10a858 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e10a908 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e10a9b8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56490e10ab78 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e10aa68 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e10aae0 <col:37, col:63> col:57 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56490e10acc8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56490e10ac38 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e10ae78 <line:163:5, col:65> col:43 operator[] 'Timer *&(Vector::size_type)'
| |-ParmVarDecl 0x56490e10ad80 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e10af30 <col:20>
| `-OptimizeNoneAttr 0x56490e10af88 <col:30>
|-CXXMethodDecl 0x56490e10b0a8 <line:164:5, col:73> col:49 operator[] 'Timer *const &(Vector::size_type) const'
| |-ParmVarDecl 0x56490e10afb0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e10b160 <col:20>
| `-OptimizeNoneAttr 0x56490e10b1b8 <col:30>
|-CXXMethodDecl 0x56490e10b270 <line:165:5, col:29> col:15 at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e10b1e0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e10b3b8 <line:166:5, col:37> col:21 at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e10b328 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e10b4e8 <line:167:5, col:21> col:15 front 'Timer *&()' inline
|-CXXMethodDecl 0x56490e10b618 <line:168:5, col:29> col:21 front 'Timer *const &() const' inline
|-CXXMethodDecl 0x56490e10b6e8 <line:169:5, col:20> col:15 back 'Timer *&()' inline
|-CXXMethodDecl 0x56490e10b7b8 <line:170:5, col:28> col:21 back 'Timer *const &() const' inline
|-CXXMethodDecl 0x56490e10b8f8 <line:172:5, col:39> col:15 unchecked_at 'Timer *&(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e10b868 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e10ba40 <line:173:5, col:47> col:21 unchecked_at 'Timer *const &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e10b9b0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e10bb88 <line:174:5, col:59> col:15 at_u 'Timer *&(Vector::size_type)' inline
| |-ParmVarDecl 0x56490e10baf8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e10bc40 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56490e10bd40 <line:175:5, col:71> col:21 at_u 'Timer *const &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56490e10bcb0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e10bdf8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56490e10beb8 <line:177:5, col:20> col:15 data 'Timer **()' inline
|-CXXMethodDecl 0x56490e10bfb8 <line:178:5, col:28> col:21 data 'Timer *const *() const' inline
|-CXXMethodDecl 0x56490e10c138 <line:180:5, col:48> col:17 push_back 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e10c078 <col:27, col:47> col:47 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-FunctionTemplateDecl 0x56490e10c8f8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56490e10c1f0 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<Timer *>':'fast_argument<Timer *, false>'
| `-CXXMethodDecl 0x56490e10c858 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (Timer *&&)' inline
|   `-ParmVarDecl 0x56490e10c758 <col:58, col:62> col:62 v 'Timer *&&'
|-CXXMethodDecl 0x56490e10c9d8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e10cb28 <line:186:5, col:49> col:17 push_front 'void (Vector<Timer *>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e10ca98 <col:28, col:48> col:48 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56490e10cbe0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56490e10ce28 <line:189:5, col:62> col:21 insert 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e10cca0 <col:28, col:37> col:37 it 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x56490e10cd18 <col:41, col:61> col:61 v 'Vector<Timer *>::value_argument_type':'Timer *'
|-CXXMethodDecl 0x56490e10cfe8 <line:190:5, col:38> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator)' inline
| `-ParmVarDecl 0x56490e10cef8 <col:27, col:36> col:36 it 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x56490e10d238 <line:191:5, col:49> col:21 erase 'Vector<Timer *>::iterator (Vector<Timer *>::iterator, Vector<Timer *>::iterator)' inline
| |-ParmVarDecl 0x56490e10d0b0 <col:27, col:36> col:36 a 'Vector<Timer *>::iterator':'Timer **'
| `-ParmVarDecl 0x56490e10d128 <col:39, col:48> col:48 b 'Vector<Timer *>::iterator':'Timer **'
|-CXXMethodDecl 0x56490e10d2f8 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e10d558 <line:195:5, col:34> col:17 swap 'void (Vector<Timer *> &)' inline
| `-ParmVarDecl 0x56490e10d460 <col:22, col:33> col:33 x 'Vector<Timer *> &'
`-CXXDestructorDecl 0x56490e10d628 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56490e10d628

Layout: <CGRecordLayout
  LLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.0 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0d4e80 <../dummy_inc/click/sync.hh:194:1, line:211:1> line:194:7 referenced class SimpleSpinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e0d4f98 <col:1, col:7> col:7 implicit referenced class SimpleSpinlock
|-AccessSpecDecl 0x56490e0d5028 <col:24, col:30> col:24 public
|-CXXConstructorDecl 0x56490e0d50b0 <line:196:5, col:27> col:12 SimpleSpinlock 'void ()' inline
|-CXXDestructorDecl 0x56490e0d51a0 <line:197:5, col:28> col:12 ~SimpleSpinlock 'void () noexcept' inline
|-CXXMethodDecl 0x56490e0d52a0 <line:199:5, col:25> col:17 acquire 'void ()' inline
|-CXXMethodDecl 0x56490e0d5360 <line:200:5, col:25> col:17 release 'void ()' inline
|-CXXMethodDecl 0x56490e0d5420 <line:201:5, col:25> col:17 attempt 'bool ()' inline
|-CXXConstructorDecl 0x56490e0d5548 <line:194:7> col:7 implicit constexpr SimpleSpinlock 'void (const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x56490e0d5548
| `-ParmVarDecl 0x56490e0d5658 <col:7> col:7 'const SimpleSpinlock &'
`-CXXMethodDecl 0x56490e10e3d8 <col:7> col:7 implicit operator= 'SimpleSpinlock &(const SimpleSpinlock &)' inline default trivial noexcept-unevaluated 0x56490e10e3d8
  `-ParmVarDecl 0x56490e10e4e8 <col:7> col:7 'const SimpleSpinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.SimpleSpinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.SimpleSpinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0f2270 prev 0x56490e0ee3f8 <../dummy_inc/click/timerset.hh:12:1, line:90:1> line:12:7 referenced class TimerSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-CXXRecordDecl 0x56490e0f2368 <col:1, col:7> col:7 implicit referenced class TimerSet
|-AccessSpecDecl 0x56490e0f23f8 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x56490e0f2480 <line:14:5, col:14> col:5 TimerSet 'void ()'
|-CXXMethodDecl 0x56490e0f2578 <line:16:5, col:67> col:15 timer_expiry_steady 'Timestamp () const'
| `-CompoundStmt 0x56490e10e850 <col:43, col:67>
|   `-ReturnStmt 0x56490e10e840 <col:45, col:52>
|     `-CXXConstructExpr 0x56490e10e810 <col:52> 'Timestamp' 'void (const Timestamp &) noexcept'
|       `-MemberExpr 0x56490e10e7e0 <col:52> 'const Timestamp' lvalue ->_timer_expiry 0x56490e0f3d60
|         `-CXXThisExpr 0x56490e10e7d0 <col:52> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x56490e0f2638 <line:17:5, col:53> col:22 timer_expiry_steady_adjusted 'Timestamp () const' inline
|-CXXMethodDecl 0x56490e0f2840 <line:19:5, col:64> col:16 next_timer_delay 'int (bool, Timestamp &) const' inline
| |-ParmVarDecl 0x56490e0f26e8 <col:33, col:38> col:38 more_tasks 'bool'
| `-ParmVarDecl 0x56490e0f2760 <col:50, col:61> col:61 t 'Timestamp &'
|-CXXMethodDecl 0x56490e0f2938 <line:22:5, col:23> col:12 next_timer 'Timer *()'
|-CXXMethodDecl 0x56490e0f2a00 <line:24:5, col:67> col:14 max_timer_stride 'unsigned int () const'
| `-CompoundStmt 0x56490e10e8d0 <col:39, col:67>
|   `-ReturnStmt 0x56490e10e8c0 <col:41, col:48>
|     `-ImplicitCastExpr 0x56490e10e8a8 <col:48> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56490e10e878 <col:48> 'const unsigned int' lvalue ->_max_timer_stride 0x56490e0f3e48
|         `-CXXThisExpr 0x56490e10e868 <col:48> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x56490e0f2ac8 <line:25:5, col:59> col:14 timer_stride 'unsigned int () const'
| `-CompoundStmt 0x56490e10e950 <col:35, col:59>
|   `-ReturnStmt 0x56490e10e940 <col:37, col:44>
|     `-ImplicitCastExpr 0x56490e10e928 <col:44> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56490e10e8f8 <col:44> 'const unsigned int' lvalue ->_timer_stride 0x56490e0f3eb0
|         `-CXXThisExpr 0x56490e10e8e8 <col:44> 'const TimerSet *' implicit this
|-CXXMethodDecl 0x56490e0f2c10 <line:26:5, col:52> col:10 set_max_timer_stride 'void (unsigned int)'
| `-ParmVarDecl 0x56490e0f2b80 <col:31, col:40> col:40 timer_stride 'unsigned int'
|-CXXMethodDecl 0x56490e0f2d58 <line:28:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56490e0f2cc8 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56490e0f2f58 <line:30:5, col:57> col:10 run_timers 'void (RouterThread *, Master *)'
| |-ParmVarDecl 0x56490e0f2e10 <col:21, col:35> col:35 thread 'RouterThread *'
| `-ParmVarDecl 0x56490e0f2e88 <col:43, col:51> col:51 master 'Master *'
|-CXXMethodDecl 0x56490e0f3028 <line:32:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x56490e0f30c8 <line:34:3, col:10> col:3 private
|-CXXRecordDecl 0x56490e0f30f0 <line:36:5, line:45:5> line:36:12 referenced struct heap_element definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56490e0f3208 <col:5, col:12> col:12 implicit referenced struct heap_element
| |-FieldDecl 0x56490e0f32a8 <line:37:2, col:12> col:12 referenced expiry_s 'Timestamp'
| |-FieldDecl 0x56490e0f3308 <line:38:2, col:9> col:9 referenced t 'Timer *'
| `-CXXConstructorDecl 0x56490e0f3438 <line:42:2, line:44:2> line:42:2 heap_element 'void (Timer *)'
|   |-ParmVarDecl 0x56490e0f3368 <col:15, col:22> col:22 used t_ 'Timer *'
|   |-CXXCtorInitializer Field 0x56490e0f32a8 'expiry_s' 'Timestamp'
|   | `-CXXConstructExpr 0x56490e10ea28 <line:43:8, col:36> 'Timestamp' 'void (const Timestamp &) noexcept'
|   |   `-CXXMemberCallExpr 0x56490e10e9d0 <col:17, col:35> 'const Timestamp' lvalue
|   |     `-MemberExpr 0x56490e10e9a0 <col:17, col:21> '<bound member function type>' ->expiry_steady 0x56490e0dfe88
|   |       `-ImplicitCastExpr 0x56490e10e9f0 <col:17> 'const Timer *' <NoOp>
|   |         `-ImplicitCastExpr 0x56490e10e988 <col:17> 'Timer *' <LValueToRValue>
|   |           `-DeclRefExpr 0x56490e10e968 <col:17> 'Timer *' lvalue ParmVar 0x56490e0f3368 't_' 'Timer *'
|   |-CXXCtorInitializer Field 0x56490e0f3308 't' 'Timer *'
|   | `-ImplicitCastExpr 0x56490e10eac0 <col:41> 'Timer *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56490e10ea80 <col:41> 'Timer *' lvalue ParmVar 0x56490e0f3368 't_' 'Timer *'
|   `-CompoundStmt 0x56490e10eb10 <col:45, line:44:2>
|-CXXRecordDecl 0x56490e0f3500 <line:46:5, line:50:5> line:46:12 struct heap_less definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56490e0f3618 <col:5, col:12> col:12 implicit struct heap_less
| `-CXXMethodDecl 0x56490e0f3868 <line:47:2, line:49:2> line:47:14 operator() 'bool (const TimerSet::heap_element &, const TimerSet::heap_element &)' inline
|   |-ParmVarDecl 0x56490e0f36e8 <col:25, col:45> col:45 used a 'const TimerSet::heap_element &'
|   |-ParmVarDecl 0x56490e0f3760 <col:48, col:68> col:68 used b 'const TimerSet::heap_element &'
|   `-CompoundStmt 0x56490e10ec40 <col:71, line:49:2>
|     `-ReturnStmt 0x56490e10ec30 <line:48:6, col:28>
|       `-CXXOperatorCallExpr 0x56490e10ebf8 <col:13, col:28> 'bool'
|         |-ImplicitCastExpr 0x56490e10ebe0 <col:24> 'bool (*)(const Timestamp &, const Timestamp &)' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56490e10ebc0 <col:24> 'bool (const Timestamp &, const Timestamp &)' lvalue Function 0x56490dfe3d88 'operator<' 'bool (const Timestamp &, const Timestamp &)'
|         |-MemberExpr 0x56490e10eb40 <col:13, col:15> 'const Timestamp' lvalue .expiry_s 0x56490e0f32a8
|         | `-DeclRefExpr 0x56490e10eb20 <col:13> 'const TimerSet::heap_element' lvalue ParmVar 0x56490e0f36e8 'a' 'const TimerSet::heap_element &'
|         `-MemberExpr 0x56490e10eb90 <col:26, col:28> 'const Timestamp' lvalue .expiry_s 0x56490e0f32a8
|           `-DeclRefExpr 0x56490e10eb70 <col:26> 'const TimerSet::heap_element' lvalue ParmVar 0x56490e0f3760 'b' 'const TimerSet::heap_element &'
|-CXXRecordDecl 0x56490e0f3930 <line:51:5, line:55:5> line:51:12 struct heap_place definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56490e0f3a48 <col:5, col:12> col:12 implicit struct heap_place
| `-CXXMethodDecl 0x56490e0f3c68 <line:52:2, line:54:2> line:52:14 operator() 'void (TimerSet::heap_element *, TimerSet::heap_element *)' inline
|   |-ParmVarDecl 0x56490e0f3ae8 <col:25, col:39> col:39 used begin 'TimerSet::heap_element *'
|   |-ParmVarDecl 0x56490e0f3b60 <col:46, col:60> col:60 used t 'TimerSet::heap_element *'
|   `-CompoundStmt 0x56490e10ee48 <col:63, line:54:2>
|     `-BinaryOperator 0x56490e10ee28 <line:53:6, col:39> 'int' lvalue '='
|       |-MemberExpr 0x56490e10ecd8 <col:6, col:12> 'int' lvalue ->_schedpos1 0x56490e0e1e98
|       | `-ImplicitCastExpr 0x56490e10ecc0 <col:6, col:9> 'Timer *' <LValueToRValue>
|       |   `-MemberExpr 0x56490e10ec90 <col:6, col:9> 'Timer *' lvalue ->t 0x56490e0f3308
|       |     `-ImplicitCastExpr 0x56490e10ec78 <col:6> 'TimerSet::heap_element *' <LValueToRValue>
|       |       `-DeclRefExpr 0x56490e10ec58 <col:6> 'TimerSet::heap_element *' lvalue ParmVar 0x56490e0f3b60 't' 'TimerSet::heap_element *'
|       `-ImplicitCastExpr 0x56490e10ee10 <col:25, col:39> 'int' <IntegralCast>
|         `-BinaryOperator 0x56490e10edf0 <col:25, col:39> 'long' '+'
|           |-ParenExpr 0x56490e10ed98 <col:25, col:35> 'long'
|           | `-BinaryOperator 0x56490e10ed78 <col:26, col:30> 'long' '-'
|           |   |-ImplicitCastExpr 0x56490e10ed48 <col:26> 'TimerSet::heap_element *' <LValueToRValue>
|           |   | `-DeclRefExpr 0x56490e10ed08 <col:26> 'TimerSet::heap_element *' lvalue ParmVar 0x56490e0f3b60 't' 'TimerSet::heap_element *'
|           |   `-ImplicitCastExpr 0x56490e10ed60 <col:30> 'TimerSet::heap_element *' <LValueToRValue>
|           |     `-DeclRefExpr 0x56490e10ed28 <col:30> 'TimerSet::heap_element *' lvalue ParmVar 0x56490e0f3ae8 'begin' 'TimerSet::heap_element *'
|           `-ImplicitCastExpr 0x56490e10edd8 <col:39> 'long' <IntegralCast>
|             `-IntegerLiteral 0x56490e10edb8 <col:39> 'int' 1
|-FieldDecl 0x56490e0f3d60 <line:58:5, col:15> col:15 referenced _timer_expiry 'Timestamp'
| `-AlignedAttr 0x56490e0f3dd0 <col:44, col:53> aligned
|   `-ConstantExpr 0x56490e0f3db0 <col:52> 'int' Int: 8
|     `-IntegerLiteral 0x56490e0f3d30 <col:52> 'int' 8
|-FieldDecl 0x56490e0f3e48 <line:60:5, col:14> col:14 referenced _max_timer_stride 'unsigned int'
|-FieldDecl 0x56490e0f3eb0 <line:61:5, col:14> col:14 referenced _timer_stride 'unsigned int'
|-FieldDecl 0x56490e0f3f18 <line:62:5, col:14> col:14 _timer_count 'unsigned int'
|-FieldDecl 0x56490e102250 <line:63:5, col:26> col:26 referenced _timer_heap 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>'
|-FieldDecl 0x56490e10d710 <line:64:5, col:21> col:21 _timer_runchunk 'Vector<Timer *>':'Vector<Timer *>'
|-FieldDecl 0x56490e10d770 <line:65:5, col:20> col:20 _timer_lock 'SimpleSpinlock'
|-FieldDecl 0x56490e10d7d0 <line:71:5, col:15> col:15 _timer_check 'Timestamp'
|-FieldDecl 0x56490e10d830 <line:72:5, col:14> col:14 _timer_check_reports 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e10d920 <line:74:5, col:38> col:17 run_one_timer 'void (Timer *)' inline
| `-ParmVarDecl 0x56490e10d890 <col:31, col:37> col:38 'Timer *'
|-CXXMethodDecl 0x56490e10d9e8 <line:76:5, line:81:5> line:76:10 set_timer_expiry 'void ()'
| `-CompoundStmt 0x56490e10f2a0 <col:29, line:81:5>
|   `-IfStmt 0x56490e10f278 <line:77:2, line:80:32> has_else
|     |-ImplicitCastExpr 0x56490e10ef30 <line:77:6, col:23> 'bool' <IntegralToBoolean>
|     | `-CXXMemberCallExpr 0x56490e10eed0 <col:6, col:23> 'Vector::size_type':'int'
|     |   `-MemberExpr 0x56490e10eea0 <col:6, col:18> '<bound member function type>' .size 0x56490e0ff328
|     |     `-ImplicitCastExpr 0x56490e10ef18 <col:6> 'const Vector<TimerSet::heap_element>' lvalue <NoOp>
|     |       `-MemberExpr 0x56490e10ee70 <col:6> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x56490e102250
|     |         `-CXXThisExpr 0x56490e10ee60 <col:6> 'TimerSet *' implicit this
|     |-CXXOperatorCallExpr 0x56490e10f120 <line:78:6, col:50> 'Timestamp' lvalue
|     | |-ImplicitCastExpr 0x56490e10f108 <col:20> 'Timestamp &(*)(const Timestamp &) noexcept' <FunctionToPointerDecay>
|     | | `-DeclRefExpr 0x56490e10f0e8 <col:20> 'Timestamp &(const Timestamp &) noexcept' lvalue CXXMethod 0x56490e094ae0 'operator=' 'Timestamp &(const Timestamp &) noexcept'
|     | |-MemberExpr 0x56490e10ef58 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x56490e0f3d60
|     | | `-CXXThisExpr 0x56490e10ef48 <col:6> 'TimerSet *' implicit this
|     | `-ImplicitCastExpr 0x56490e10f0d0 <col:22, col:50> 'const Timestamp' lvalue <NoOp>
|     |   `-MemberExpr 0x56490e10f0a0 <col:22, col:50> 'Timestamp' lvalue .expiry_s 0x56490e0f32a8
|     |     `-CXXMemberCallExpr 0x56490e10f078 <col:22, col:48> 'TimerSet::heap_element':'TimerSet::heap_element' lvalue
|     |       |-MemberExpr 0x56490e10f048 <col:22, col:34> '<bound member function type>' .unchecked_at 0x56490e1003c8
|     |       | `-MemberExpr 0x56490e10ef98 <col:22> 'Vector<TimerSet::heap_element>':'Vector<TimerSet::heap_element>' lvalue ->_timer_heap 0x56490e102250
|     |       |   `-CXXThisExpr 0x56490e10ef88 <col:22> 'TimerSet *' implicit this
|     |       `-IntegerLiteral 0x56490e10f028 <col:47> 'int' 0
|     `-ExprWithCleanups 0x56490e10f260 <line:80:6, col:32> 'Timestamp' lvalue
|       `-CXXOperatorCallExpr 0x56490e10f228 <col:6, col:32> 'Timestamp' lvalue
|         |-ImplicitCastExpr 0x56490e10f210 <col:20> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56490e10f1f0 <col:20> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56490e094f88 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|         |-MemberExpr 0x56490e10f168 <col:6> 'Timestamp' lvalue ->_timer_expiry 0x56490e0f3d60
|         | `-CXXThisExpr 0x56490e10f158 <col:6> 'TimerSet *' implicit this
|         `-MaterializeTemporaryExpr 0x56490e10f1d8 <col:22, col:32> 'Timestamp' xvalue
|           `-CXXTemporaryObjectExpr 0x56490e10f1a8 <col:22, col:32> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56490e10db28 <line:82:5, col:37> col:10 check_timer_expiry 'void (Timer *)'
| `-ParmVarDecl 0x56490e10da98 <col:29, col:36> col:36 t 'Timer *'
|-CXXMethodDecl 0x56490e10dbf0 <line:84:5, col:29> col:17 used lock_timers 'void ()' inline
|-CXXMethodDecl 0x56490e10dcb0 <line:85:5, col:37> col:17 attempt_lock_timers 'bool ()' inline
|-CXXMethodDecl 0x56490e10dd70 <line:86:5, col:31> col:17 used unlock_timers 'void ()' inline
|-FriendDecl 0x56490e10de60 <line:88:5, col:18> col:12 'class Timer':'Timer'
|-CXXConstructorDecl 0x56490e10dec8 <line:12:7> col:7 implicit TimerSet 'void (const TimerSet &)' inline default noexcept-unevaluated 0x56490e10dec8
| `-ParmVarDecl 0x56490e10dfd8 <col:7> col:7 'const TimerSet &'
|-CXXConstructorDecl 0x56490e10e078 <col:7> col:7 implicit TimerSet 'void (TimerSet &&)' inline default noexcept-unevaluated 0x56490e10e078
| `-ParmVarDecl 0x56490e10e188 <col:7> col:7 'TimerSet &&'
|-CXXMethodDecl 0x56490e10e228 <col:7> col:7 implicit operator= 'TimerSet &(const TimerSet &)' inline default noexcept-unevaluated 0x56490e10e228
| `-ParmVarDecl 0x56490e10e338 <col:7> col:7 'const TimerSet &'
|-CXXMethodDecl 0x56490e10e558 <col:7> col:7 implicit operator= 'TimerSet &(TimerSet &&)' inline default noexcept-unevaluated 0x56490e10e558
| `-ParmVarDecl 0x56490e10e668 <col:7> col:7 'TimerSet &&'
`-CXXDestructorDecl 0x56490e10e6f0 <col:7> col:7 implicit ~TimerSet 'void ()' inline default noexcept-unevaluated 0x56490e10e6f0

Layout: <CGRecordLayout
  LLVMType:%class.TimerSet = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.TimerSet.base = type <{ %class.Timestamp, i32, i32, i32, [4 x i8], %class.Vector, %class.Vector.0, %class.SimpleSpinlock, [7 x i8], %class.Timestamp, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e138f98 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'pollfd'
|-CXXRecordDecl 0x56490e1391a8 prev 0x56490e138f98 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56490e13a280 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<pollfd>::type':'sized_array_memory<8>'
| `-ElaboratedType 0x56490e13a230 'typename array_memory<pollfd>::type' sugar
|   `-TypedefType 0x56490e13a210 'conditional<true, sized_array_memory<8>, typed_array_memory<pollfd> >::type' sugar
|     |-Typedef 0x56490e13a0c0 'type'
|     `-SubstTemplateTypeParmType 0x56490e103260 'sized_array_memory<8>' sugar
|       |-TemplateTypeParmType 0x56490dd37900 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd378a8 'T'
|       `-RecordType 0x56490e102db0 'sized_array_memory<8>'
|         `-ClassTemplateSpecialization 0x56490e102cc8 'sized_array_memory'
|-FieldDecl 0x56490e13a380 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<pollfd>::array_memory_type>':'vector_memory<sized_array_memory<8> >' mutable
|-AccessSpecDecl 0x56490e13a3d0 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56490e13a408 <line:118:5, col:15> col:15 value_type 'pollfd':'pollfd'
| `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|   |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56490dde8750 'T'
|   `-RecordType 0x56490e12b7c0 'pollfd'
|     `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13a4c8 <line:119:5, col:16> col:16 reference 'pollfd &'
| `-LValueReferenceType 0x56490e13a490 'pollfd &'
|   `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e12b7c0 'pollfd'
|       `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13a588 <line:120:5, col:22> col:22 const_reference 'const pollfd &'
| `-LValueReferenceType 0x56490e13a550 'const pollfd &'
|   `-QualType 0x56490e139241 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e12b7c0 'pollfd'
|         `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13a618 <line:121:5, col:16> col:16 pointer 'pollfd *'
| `-PointerType 0x56490e13a5e0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e12b7c0 'pollfd'
|       `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13a6d8 <line:122:5, col:22> col:22 const_pointer 'const pollfd *'
| `-PointerType 0x56490e13a6a0 'const pollfd *'
|   `-QualType 0x56490e139241 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e12b7c0 'pollfd'
|         `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13b2b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<pollfd>::type':'pollfd'
| `-ElaboratedType 0x56490e13b260 'typename fast_argument<pollfd>::type' sugar
|   `-TypedefType 0x56490e13b240 'fast_argument<pollfd, false>::type' sugar
|     |-Typedef 0x56490e13b1d0 'type'
|     `-SubstTemplateTypeParmType 0x56490e13af90 'pollfd' sugar
|       |-TemplateTypeParmType 0x56490dd41610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd415c0 'T'
|       `-RecordType 0x56490e12b7c0 'pollfd'
|         `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13b318 <line:126:5, col:22> col:22 const_access_type 'const pollfd &'
| `-LValueReferenceType 0x56490e13a550 'const pollfd &'
|   `-QualType 0x56490e139241 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e12b7c0 'pollfd'
|         `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13b370 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e13b3d8 <line:130:5, col:16> col:16 iterator 'pollfd *'
| `-PointerType 0x56490e13a5e0 'pollfd *'
|   `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e12b7c0 'pollfd'
|       `-CXXRecord 0x56490e12b730 'pollfd'
|-TypedefDecl 0x56490e13b440 <line:131:5, col:22> col:22 const_iterator 'const pollfd *'
| `-PointerType 0x56490e13a6a0 'const pollfd *'
|   `-QualType 0x56490e139241 'const pollfd' const
|     `-SubstTemplateTypeParmType 0x56490e139240 'pollfd' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e12b7c0 'pollfd'
|         `-CXXRecord 0x56490e12b730 'pollfd'
|-EnumDecl 0x56490e13b498 <line:134:5> col:5
| `-EnumConstantDecl 0x56490e13b590 <col:12, col:40> col:12 RESERVE_GROW 'Vector<pollfd>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56490e13b570 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56490dde9968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56490dde9940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56490dde9920 <col:40> 'int' 1
|-CXXConstructorDecl 0x56490e13b618 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56490e13b8a8 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e13b6d0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e13b770 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXConstructorDecl 0x56490e13bb68 <line:139:5, col:37> col:12 Vector 'void (const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56490e13ba50 <col:19, col:36> col:36 x 'const Vector<pollfd> &'
|-CXXConstructorDecl 0x56490e13be28 <line:141:5, col:32> col:12 Vector 'void (Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x56490e13bd10 <col:19, col:31> col:31 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x56490e13c170 <line:144:5, col:51> col:23 operator= 'Vector<pollfd> &(const Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56490e13c050 <col:33, col:50> col:50 x 'const Vector<pollfd> &'
|-CXXMethodDecl 0x56490e13c480 <line:146:5, col:46> col:23 operator= 'Vector<pollfd> &(Vector<pollfd> &&)' inline
| `-ParmVarDecl 0x56490e13c360 <col:33, col:45> col:45 x 'Vector<pollfd> &&'
|-CXXMethodDecl 0x56490e13c770 <line:148:5, col:70> col:23 assign 'Vector<pollfd> &(Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e13c5b8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e13c630 <col:43, col:69> col:63 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56490e13c8c8 <line:150:5, col:55> col:49 begin 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x56490e13c9a8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e13ca00 <col:30> Inherited
|-CXXMethodDecl 0x56490e13ca48 <line:151:5, col:53> col:49 end 'Vector<pollfd>::iterator ()'
| |-NoInlineAttr 0x56490e13caf8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e13cb50 <col:30> Inherited
|-CXXMethodDecl 0x56490e13cc18 <line:152:5, col:63> col:55 begin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56490e13ccc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e13cd20 <col:30> Inherited
|-CXXMethodDecl 0x56490e13cd68 <line:153:5, col:61> col:55 end 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56490e13ce18 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e13ce70 <col:30> Inherited
|-CXXMethodDecl 0x56490e13ceb8 <line:154:5, col:64> col:55 cbegin 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56490e13cf68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e13cfc0 <col:30> Inherited
|-CXXMethodDecl 0x56490e13d008 <line:155:5, col:62> col:55 cend 'Vector<pollfd>::const_iterator () const'
| |-NoInlineAttr 0x56490e13d0b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e13d110 <col:30> Inherited
|-CXXMethodDecl 0x56490e13d138 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e13d1e8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e13d298 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56490e13d458 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e13d348 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e13d3c0 <col:37, col:63> col:57 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56490e13d5a8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56490e13d518 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e13d758 <line:163:5, col:65> col:43 operator[] 'pollfd &(Vector::size_type)'
| |-ParmVarDecl 0x56490e13d660 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e13d810 <col:20>
| `-OptimizeNoneAttr 0x56490e13d868 <col:30>
|-CXXMethodDecl 0x56490e13d988 <line:164:5, col:73> col:49 operator[] 'const pollfd &(Vector::size_type) const'
| |-ParmVarDecl 0x56490e13d890 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e13da40 <col:20>
| `-OptimizeNoneAttr 0x56490e13da98 <col:30>
|-CXXMethodDecl 0x56490e13db50 <line:165:5, col:29> col:15 at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e13dac0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e13dc98 <line:166:5, col:37> col:21 at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e13dc08 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e13ddc8 <line:167:5, col:21> col:15 front 'pollfd &()' inline
|-CXXMethodDecl 0x56490e13def8 <line:168:5, col:29> col:21 front 'const pollfd &() const' inline
|-CXXMethodDecl 0x56490e13dfc8 <line:169:5, col:20> col:15 back 'pollfd &()' inline
|-CXXMethodDecl 0x56490e13e098 <line:170:5, col:28> col:21 back 'const pollfd &() const' inline
|-CXXMethodDecl 0x56490e13e1d8 <line:172:5, col:39> col:15 unchecked_at 'pollfd &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e13e148 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e13e320 <line:173:5, col:47> col:21 unchecked_at 'const pollfd &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e13e290 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e13e468 <line:174:5, col:59> col:15 at_u 'pollfd &(Vector::size_type)' inline
| |-ParmVarDecl 0x56490e13e3d8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e13e520 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56490e13e620 <line:175:5, col:71> col:21 at_u 'const pollfd &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56490e13e590 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e13e6d8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56490e13e798 <line:177:5, col:20> col:15 data 'pollfd *()' inline
|-CXXMethodDecl 0x56490e13e898 <line:178:5, col:28> col:21 data 'const pollfd *() const' inline
|-CXXMethodDecl 0x56490e13ea48 <line:180:5, col:48> col:17 push_back 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e13e958 <col:27, col:47> col:47 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-FunctionTemplateDecl 0x56490e13f208 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56490e13eb00 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<pollfd>':'fast_argument<pollfd, false>'
| `-CXXMethodDecl 0x56490e13f168 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (pollfd &&)' inline
|   `-ParmVarDecl 0x56490e13f068 <col:58, col:62> col:62 v 'pollfd &&'
|-CXXMethodDecl 0x56490e13f2e8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e13f438 <line:186:5, col:49> col:17 push_front 'void (Vector<pollfd>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e13f3a8 <col:28, col:48> col:48 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56490e13f4f0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56490e13f738 <line:189:5, col:62> col:21 insert 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e13f5b0 <col:28, col:37> col:37 it 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x56490e13f628 <col:41, col:61> col:61 v 'Vector<pollfd>::value_argument_type':'pollfd'
|-CXXMethodDecl 0x56490e13f8f8 <line:190:5, col:38> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator)' inline
| `-ParmVarDecl 0x56490e13f808 <col:27, col:36> col:36 it 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x56490e13fb78 <line:191:5, col:49> col:21 erase 'Vector<pollfd>::iterator (Vector<pollfd>::iterator, Vector<pollfd>::iterator)' inline
| |-ParmVarDecl 0x56490e13f9f0 <col:27, col:36> col:36 a 'Vector<pollfd>::iterator':'pollfd *'
| `-ParmVarDecl 0x56490e13fa68 <col:39, col:48> col:48 b 'Vector<pollfd>::iterator':'pollfd *'
|-CXXMethodDecl 0x56490e13fc38 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e13fe98 <line:195:5, col:34> col:17 swap 'void (Vector<pollfd> &)' inline
| `-ParmVarDecl 0x56490e13fda0 <col:22, col:33> col:33 x 'Vector<pollfd> &'
`-CXXDestructorDecl 0x56490e13ff68 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56490e13ff68

Layout: <CGRecordLayout
  LLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  NonVirtualBaseLLVMType:%class.Vector.3 = type { %class.vector_memory.1 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e141450 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<24>'
|-CXXRecordDecl 0x56490e141628 prev 0x56490e141450 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56490e1416b8 <col:46, col:52> col:46 public
|-TypedefDecl 0x56490e1416e0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e1432b0 <line:13:5, col:31> col:31 type 'typename sized_array_memory<24>::type':'char_array<24>'
| `-ElaboratedType 0x56490e143260 'typename sized_array_memory<24>::type' sugar
|   `-TypedefType 0x56490e141b90 'sized_array_memory<24>::type' sugar
|     |-Typedef 0x56490e141a90 'type'
|     `-TemplateSpecializationType 0x56490e141a20 'char_array<24UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56490e141900 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|       |   `-SubstNonTypeTemplateParmExpr 0x56490e1418e0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56490e1418c0 <col:24> 'unsigned long' 24
|       `-RecordType 0x56490e141a00 'char_array<24>'
|         `-ClassTemplateSpecialization 0x56490e141920 'char_array'
|-TypedefDecl 0x56490e143368 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<24> >::type *'
| `-PointerType 0x56490e143330 'vector_memory<sized_array_memory<24> >::type *'
|   `-TypedefType 0x56490e143310 'vector_memory<sized_array_memory<24> >::type' sugar
|     |-Typedef 0x56490e1432b0 'type'
|     `-ElaboratedType 0x56490e143260 'typename sized_array_memory<24>::type' sugar
|       `-TypedefType 0x56490e141b90 'sized_array_memory<24>::type' sugar
|         |-Typedef 0x56490e141a90 'type'
|         `-TemplateSpecializationType 0x56490e141a20 'char_array<24UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56490e141900 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 24
|           |   `-SubstNonTypeTemplateParmExpr 0x56490e1418e0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56490e1418c0 <col:24> 'unsigned long' 24
|           `-RecordType 0x56490e141a00 'char_array<24>'
|             `-ClassTemplateSpecialization 0x56490e141920 'char_array'
|-CXXMethodDecl 0x56490e1434e8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<24> >::type *) const' inline
| `-ParmVarDecl 0x56490e1433f8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXConstructorDecl 0x56490e1435d8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56490e1436b8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56490e1436b8
|-CXXMethodDecl 0x56490e143988 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x56490e143890 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<24> > &'
|-CXXMethodDecl 0x56490e143bc8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56490e143a40 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e143ab8 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e143d98 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56490e143c88 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e143d00 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e143ef8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x56490e143fc8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<24> >::iterator ()'
|-CXXMethodDecl 0x56490e144218 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56490e144088 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x56490e144100 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e144478 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<24> >::iterator (vector_memory<sized_array_memory<24> >::iterator, vector_memory<sized_array_memory<24> >::iterator)'
| |-ParmVarDecl 0x56490e1442e8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
| `-ParmVarDecl 0x56490e144360 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<24> >::iterator':'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e144638 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x56490e144548 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e1447f8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<24> >::type *)' inline
| `-ParmVarDecl 0x56490e144700 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e1448b0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e144960 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e144b98 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<24> >::type *)'
| |-ParmVarDecl 0x56490e144a10 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e144a88 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<24> >::type *'
|-CXXMethodDecl 0x56490e144e38 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<24> > &)'
| `-ParmVarDecl 0x56490e144d40 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<24> > &'
|-FieldDecl 0x56490e144f00 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<24> >::type *'
|-FieldDecl 0x56490e144f50 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56490e144fa0 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.5 = type { %struct.char_array.6*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e1400b0 <../dummy_inc/click/ipaddress.hh:13:1, col:29> ../dummy_inc/click/vector.hh:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'SelectSet::SelectorInfo'
|-CXXRecordDecl 0x56490e1402b8 prev 0x56490e1400b0 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56490e1413c0 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<SelectorInfo>::type':'sized_array_memory<24>'
| `-ElaboratedType 0x56490e141370 'typename array_memory<SelectorInfo>::type' sugar
|   `-TypedefType 0x56490e141350 'conditional<true, sized_array_memory<24>, typed_array_memory<SelectSet::SelectorInfo> >::type' sugar
|     |-Typedef 0x56490e141200 'type'
|     `-SubstTemplateTypeParmType 0x56490e141020 'sized_array_memory<24>' sugar
|       |-TemplateTypeParmType 0x56490dd37900 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd378a8 'T'
|       `-RecordType 0x56490de28fe0 'sized_array_memory<24>'
|         `-ClassTemplateSpecialization 0x56490de28ef8 'sized_array_memory'
|-FieldDecl 0x56490e144ff0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<SelectSet::SelectorInfo>::array_memory_type>':'vector_memory<sized_array_memory<24> >' mutable
|-AccessSpecDecl 0x56490e145040 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56490e145078 <line:118:5, col:15> col:15 value_type 'SelectSet::SelectorInfo':'SelectSet::SelectorInfo'
| `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|   |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56490dde8750 'T'
|   `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|     `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e145138 <line:119:5, col:16> col:16 reference 'SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56490e145100 'SelectSet::SelectorInfo &'
|   `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e1451f8 <line:120:5, col:22> col:22 const_reference 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56490e1451c0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x56490e140351 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e145288 <line:121:5, col:16> col:16 pointer 'SelectSet::SelectorInfo *'
| `-PointerType 0x56490e145250 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e145348 <line:122:5, col:22> col:22 const_pointer 'const SelectSet::SelectorInfo *'
| `-PointerType 0x56490e145310 'const SelectSet::SelectorInfo *'
|   `-QualType 0x56490e140351 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e145fa0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<SelectorInfo>::type':'const SelectSet::SelectorInfo &'
| `-ElaboratedType 0x56490e145f50 'typename fast_argument<SelectorInfo>::type' sugar
|   `-TypedefType 0x56490e145f30 'fast_argument<SelectSet::SelectorInfo, true>::type' sugar
|     |-Typedef 0x56490e145e68 'type'
|     `-LValueReferenceType 0x56490e145e30 'const SelectSet::SelectorInfo &'
|       `-QualType 0x56490e145bd1 'const SelectSet::SelectorInfo' const
|         `-SubstTemplateTypeParmType 0x56490e145bd0 'SelectSet::SelectorInfo' sugar
|           |-TemplateTypeParmType 0x56490dd40ee0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56490dd40e88 'T'
|           `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|             `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e146008 <line:126:5, col:22> col:22 const_access_type 'const SelectSet::SelectorInfo &'
| `-LValueReferenceType 0x56490e1451c0 'const SelectSet::SelectorInfo &'
|   `-QualType 0x56490e140351 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e146060 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e1460c8 <line:130:5, col:16> col:16 iterator 'SelectSet::SelectorInfo *'
| `-PointerType 0x56490e145250 'SelectSet::SelectorInfo *'
|   `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|       `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-TypedefDecl 0x56490e146130 <line:131:5, col:22> col:22 const_iterator 'const SelectSet::SelectorInfo *'
| `-PointerType 0x56490e145310 'const SelectSet::SelectorInfo *'
|   `-QualType 0x56490e140351 'const SelectSet::SelectorInfo' const
|     `-SubstTemplateTypeParmType 0x56490e140350 'SelectSet::SelectorInfo' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490e138b00 'SelectSet::SelectorInfo'
|         `-CXXRecord 0x56490e138a70 'SelectorInfo'
|-EnumDecl 0x56490e146188 <line:134:5> col:5
| `-EnumConstantDecl 0x56490e146280 <col:12, col:40> col:12 RESERVE_GROW 'Vector<SelectSet::SelectorInfo>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56490e146260 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56490dde9968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56490dde9940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56490dde9920 <col:40> 'int' 1
|-CXXConstructorDecl 0x56490e146308 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56490e146598 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e1463c0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e146460 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXConstructorDecl 0x56490e146858 <line:139:5, col:37> col:12 Vector 'void (const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56490e146740 <col:19, col:36> col:36 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXConstructorDecl 0x56490e146b18 <line:141:5, col:32> col:12 Vector 'void (Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x56490e146a00 <col:19, col:31> col:31 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x56490e146e60 <line:144:5, col:51> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(const Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56490e146d40 <col:33, col:50> col:50 x 'const Vector<SelectSet::SelectorInfo> &'
|-CXXMethodDecl 0x56490e147170 <line:146:5, col:46> col:23 operator= 'Vector<SelectSet::SelectorInfo> &(Vector<SelectSet::SelectorInfo> &&)' inline
| `-ParmVarDecl 0x56490e147050 <col:33, col:45> col:45 x 'Vector<SelectSet::SelectorInfo> &&'
|-CXXMethodDecl 0x56490e147460 <line:148:5, col:70> col:23 assign 'Vector<SelectSet::SelectorInfo> &(Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e1472a8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e147320 <col:43, col:69> col:63 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56490e1475b8 <line:150:5, col:55> col:49 begin 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x56490e147698 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e1476f0 <col:30> Inherited
|-CXXMethodDecl 0x56490e147738 <line:151:5, col:53> col:49 end 'Vector<SelectSet::SelectorInfo>::iterator ()'
| |-NoInlineAttr 0x56490e1477e8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e147840 <col:30> Inherited
|-CXXMethodDecl 0x56490e147908 <line:152:5, col:63> col:55 begin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56490e1479b8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e147a30 <col:30> Inherited
|-CXXMethodDecl 0x56490e147a78 <line:153:5, col:61> col:55 end 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56490e147b28 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e147b80 <col:30> Inherited
|-CXXMethodDecl 0x56490e147bc8 <line:154:5, col:64> col:55 cbegin 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56490e147c78 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e147cd0 <col:30> Inherited
|-CXXMethodDecl 0x56490e147d18 <line:155:5, col:62> col:55 cend 'Vector<SelectSet::SelectorInfo>::const_iterator () const'
| |-NoInlineAttr 0x56490e147dc8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e147e20 <col:30> Inherited
|-CXXMethodDecl 0x56490e147e48 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e147ef8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e147fa8 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56490e148168 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e148058 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e1480d0 <col:37, col:63> col:57 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56490e1482b8 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56490e148228 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e148468 <line:163:5, col:65> col:43 operator[] 'SelectSet::SelectorInfo &(Vector::size_type)'
| |-ParmVarDecl 0x56490e148370 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e148520 <col:20>
| `-OptimizeNoneAttr 0x56490e148578 <col:30>
|-CXXMethodDecl 0x56490e148698 <line:164:5, col:73> col:49 operator[] 'const SelectSet::SelectorInfo &(Vector::size_type) const'
| |-ParmVarDecl 0x56490e1485a0 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e148750 <col:20>
| `-OptimizeNoneAttr 0x56490e1487a8 <col:30>
|-CXXMethodDecl 0x56490e148860 <line:165:5, col:29> col:15 at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e1487d0 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e1489a8 <line:166:5, col:37> col:21 at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e148918 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e148ad8 <line:167:5, col:21> col:15 front 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x56490e148c08 <line:168:5, col:29> col:21 front 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x56490e148cd8 <line:169:5, col:20> col:15 back 'SelectSet::SelectorInfo &()' inline
|-CXXMethodDecl 0x56490e148da8 <line:170:5, col:28> col:21 back 'const SelectSet::SelectorInfo &() const' inline
|-CXXMethodDecl 0x56490e148ee8 <line:172:5, col:39> col:15 unchecked_at 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e148e58 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e149030 <line:173:5, col:47> col:21 unchecked_at 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e148fa0 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e149178 <line:174:5, col:59> col:15 at_u 'SelectSet::SelectorInfo &(Vector::size_type)' inline
| |-ParmVarDecl 0x56490e1490e8 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e149230 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56490e149330 <line:175:5, col:71> col:21 at_u 'const SelectSet::SelectorInfo &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56490e1492a0 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e1493e8 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56490e1494a8 <line:177:5, col:20> col:15 data 'SelectSet::SelectorInfo *()' inline
|-CXXMethodDecl 0x56490e1495a8 <line:178:5, col:28> col:21 data 'const SelectSet::SelectorInfo *() const' inline
|-CXXMethodDecl 0x56490e149758 <line:180:5, col:48> col:17 push_back 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e149668 <col:27, col:47> col:47 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-FunctionTemplateDecl 0x56490e149f18 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56490e149810 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<SelectSet::SelectorInfo>':'fast_argument<SelectSet::SelectorInfo, true>'
| `-CXXMethodDecl 0x56490e149e78 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (SelectSet::SelectorInfo &&)' inline
|   `-ParmVarDecl 0x56490e149d78 <col:58, col:62> col:62 v 'SelectSet::SelectorInfo &&'
|-CXXMethodDecl 0x56490e149ff8 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e14a148 <line:186:5, col:49> col:17 push_front 'void (Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e14a0b8 <col:28, col:48> col:48 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56490e14a200 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56490e14a448 <line:189:5, col:62> col:21 insert 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e14a2c0 <col:28, col:37> col:37 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x56490e14a338 <col:41, col:61> col:61 v 'Vector<SelectSet::SelectorInfo>::value_argument_type':'const SelectSet::SelectorInfo &'
|-CXXMethodDecl 0x56490e14a608 <line:190:5, col:38> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator)' inline
| `-ParmVarDecl 0x56490e14a518 <col:27, col:36> col:36 it 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x56490e14a858 <line:191:5, col:49> col:21 erase 'Vector<SelectSet::SelectorInfo>::iterator (Vector<SelectSet::SelectorInfo>::iterator, Vector<SelectSet::SelectorInfo>::iterator)' inline
| |-ParmVarDecl 0x56490e14a6d0 <col:27, col:36> col:36 a 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
| `-ParmVarDecl 0x56490e14a748 <col:39, col:48> col:48 b 'Vector<SelectSet::SelectorInfo>::iterator':'SelectSet::SelectorInfo *'
|-CXXMethodDecl 0x56490e14a918 <line:193:5, col:23> col:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e14ab78 <line:195:5, col:34> col:17 swap 'void (Vector<SelectSet::SelectorInfo> &)' inline
| `-ParmVarDecl 0x56490e14aa80 <col:22, col:33> col:33 x 'Vector<SelectSet::SelectorInfo> &'
`-CXXDestructorDecl 0x56490e14ac48 <../dummy_inc/click/ipaddress.hh:13:29> col:29 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56490e14ac48

Layout: <CGRecordLayout
  LLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  NonVirtualBaseLLVMType:%class.Vector.4 = type { %class.vector_memory.5 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e137c50 <../dummy_inc/click/selectset.hh:36:1, line:109:1> line:36:7 referenced class SelectSet definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e137d68 <col:1, col:7> col:7 implicit referenced class SelectSet
|-AccessSpecDecl 0x56490e137df8 <col:19, col:25> col:19 public
|-CXXConstructorDecl 0x56490e137e80 <line:38:5, col:15> col:5 SelectSet 'void ()'
|-CXXDestructorDecl 0x56490e137f70 <line:39:5, col:16> col:5 ~SelectSet 'void ()' noexcept-unevaluated 0x56490e137f70
|-CXXMethodDecl 0x56490e138070 <line:41:5, col:21> col:10 initialize 'void ()'
|-CXXMethodDecl 0x56490e138310 <line:43:5, col:54> col:9 add_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x56490e138128 <col:20, col:24> col:24 fd 'int'
| |-ParmVarDecl 0x56490e1381a0 <col:28, col:37> col:37 element 'Element *'
| `-ParmVarDecl 0x56490e138220 <col:46, col:50> col:50 mask 'int'
|-CXXMethodDecl 0x56490e138580 <line:44:5, col:57> col:9 remove_select 'int (int, Element *, int)'
| |-ParmVarDecl 0x56490e1383e0 <col:23, col:27> col:27 fd 'int'
| |-ParmVarDecl 0x56490e138458 <col:31, col:40> col:40 element 'Element *'
| `-ParmVarDecl 0x56490e1384d8 <col:49, col:53> col:53 mask 'int'
|-CXXMethodDecl 0x56490e1386d8 <line:46:5, col:42> col:10 run_selects 'void (RouterThread *)'
| `-ParmVarDecl 0x56490e138648 <col:22, col:36> col:36 thread 'RouterThread *'
|-CXXMethodDecl 0x56490e1387a0 <line:47:5, line:50:5> line:47:17 used wake_immediate 'void ()' inline
| `-CompoundStmt 0x56490e14c2f8 <col:34, line:50:5>
|   |-BinaryOperator 0x56490e14bcc8 <line:48:2, col:23> 'volatile bool' lvalue '='
|   | |-MemberExpr 0x56490e14bc88 <col:2> 'volatile bool' lvalue ->_wake_pipe_pending 0x56490e138f28
|   | | `-CXXThisExpr 0x56490e14bc78 <col:2> 'SelectSet *' implicit this
|   | `-CXXBoolLiteralExpr 0x56490e14bcb8 <col:23> 'bool' true
|   `-CallExpr 0x56490e14c2d0 <line:49:2, col:43> 'void'
|     |-ImplicitCastExpr 0x56490e14c2b8 <col:2> 'void (*)(long)' <FunctionToPointerDecay>
|     | `-DeclRefExpr 0x56490e14c238 <col:2> 'void (long)' lvalue Function 0x56490e14c138 'ignore_result' 'void (long)' (FunctionTemplate 0x56490dcaccd8 'ignore_result')
|     `-CallExpr 0x56490e14bee0 <col:16, col:42> 'ssize_t':'long'
|       |-ImplicitCastExpr 0x56490e14bec8 <col:16> 'ssize_t (*)(int, const void *, size_t)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490e14be48 <col:16> 'ssize_t (int, const void *, size_t)' lvalue Function 0x56490e115938 'write' 'ssize_t (int, const void *, size_t)'
|       |-ImplicitCastExpr 0x56490e14bf18 <col:22, col:34> 'int' <LValueToRValue>
|       | `-ArraySubscriptExpr 0x56490e14bdf0 <col:22, col:34> 'int' lvalue
|       |   |-ImplicitCastExpr 0x56490e14bdd8 <col:22> 'int *' <ArrayToPointerDecay>
|       |   | `-MemberExpr 0x56490e14bd88 <col:22> 'int [2]' lvalue ->_wake_pipe 0x56490e138ec8
|       |   |   `-CXXThisExpr 0x56490e14bd78 <col:22> 'SelectSet *' implicit this
|       |   `-IntegerLiteral 0x56490e14bdb8 <col:33> 'int' 1
|       |-ImplicitCastExpr 0x56490e14bf48 <col:37> 'const void *' <BitCast>
|       | `-ImplicitCastExpr 0x56490e14bf30 <col:37> 'const char *' <ArrayToPointerDecay>
|       |   `-StringLiteral 0x56490e14be10 <col:37> 'const char [1]' lvalue ""
|       `-ImplicitCastExpr 0x56490e14bf60 <col:41> 'size_t':'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x56490e14be28 <col:41> 'int' 1
|-CXXMethodDecl 0x56490e1388e0 <line:52:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56490e138850 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56490e1389a8 <line:54:5, col:23> col:17 fence 'void ()' inline
|-AccessSpecDecl 0x56490e138a48 <line:56:3, col:10> col:3 private
|-CXXRecordDecl 0x56490e138a70 <line:58:5, line:66:5> line:58:12 referenced struct SelectorInfo definition
| |-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56490e138b88 <col:5, col:12> col:12 implicit referenced struct SelectorInfo
| |-FieldDecl 0x56490e138c28 <line:59:2, col:11> col:11 read 'Element *'
| |-FieldDecl 0x56490e138c88 <line:60:2, col:11> col:11 write 'Element *'
| |-FieldDecl 0x56490e138cf0 <line:61:2, col:6> col:6 pollfd 'int'
| `-CXXConstructorDecl 0x56490e138da0 <line:62:2, line:65:2> line:62:2 SelectorInfo 'void ()'
|   |-CXXCtorInitializer Field 0x56490e138c28 'read' 'Element *'
|   | `-ImplicitCastExpr 0x56490e14c358 <line:63:13> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x56490e14c318 <col:13> 'int' 0
|   |-CXXCtorInitializer Field 0x56490e138c88 'write' 'Element *'
|   | `-ImplicitCastExpr 0x56490e14c3d8 <col:23> 'Element *' <NullToPointer>
|   |   `-IntegerLiteral 0x56490e14c398 <col:23> 'int' 0
|   |-CXXCtorInitializer Field 0x56490e138cf0 'pollfd' 'int'
|   | `-UnaryOperator 0x56490e14c438 <col:34, col:35> 'int' prefix '-'
|   |   `-IntegerLiteral 0x56490e14c418 <col:35> 'int' 1
|   `-CompoundStmt 0x56490e14c4b0 <line:64:2, line:65:2>
|-FieldDecl 0x56490e138ec8 <line:68:5, col:21> col:9 referenced _wake_pipe 'int [2]'
|-FieldDecl 0x56490e138f28 <line:69:5, col:19> col:19 referenced _wake_pipe_pending 'volatile bool'
|-FieldDecl 0x56490e140050 <line:82:5, col:27> col:27 _pollfds 'Vector<struct pollfd>':'Vector<pollfd>'
|-FieldDecl 0x56490e14ad30 <line:83:5, col:26> col:26 _selinfo 'Vector<SelectSet::SelectorInfo>':'Vector<SelectSet::SelectorInfo>'
|-CXXMethodDecl 0x56490e14af68 <line:89:5, col:63> col:10 register_select 'void (int, bool, bool)'
| |-ParmVarDecl 0x56490e14ad98 <col:26, col:30> col:30 fd 'int'
| |-ParmVarDecl 0x56490e14ae10 <col:34, col:39> col:39 add_read 'bool'
| `-ParmVarDecl 0x56490e14ae88 <col:49, col:54> col:54 add_write 'bool'
|-CXXMethodDecl 0x56490e14b150 <line:90:5, col:41> col:10 remove_pollfd 'void (int, int)'
| |-ParmVarDecl 0x56490e14b038 <col:24, col:28> col:28 pi 'int'
| `-ParmVarDecl 0x56490e14b0b8 <col:32, col:36> col:36 event 'int'
|-CXXMethodDecl 0x56490e14b398 <line:91:5, col:49> col:17 call_selected 'void (int, int) const' inline
| |-ParmVarDecl 0x56490e14b218 <col:31, col:35> col:35 fd 'int'
| `-ParmVarDecl 0x56490e14b298 <col:39, col:43> col:43 mask 'int'
|-CXXMethodDecl 0x56490e14b5a8 <line:92:5, col:63> col:17 post_select 'bool (RouterThread *, bool)' inline
| |-ParmVarDecl 0x56490e14b458 <col:29, col:43> col:43 thread 'RouterThread *'
| `-ParmVarDecl 0x56490e14b4d0 <col:51, col:56> col:56 acquire 'bool'
|-CXXMethodDecl 0x56490e14b6f8 <line:97:5, col:47> col:10 run_selects_poll 'void (RouterThread *)'
| `-ParmVarDecl 0x56490e14b668 <col:27, col:41> col:41 thread 'RouterThread *'
|-CXXMethodDecl 0x56490e14b7c0 <line:102:5, col:22> col:17 used lock 'void ()' inline
|-CXXMethodDecl 0x56490e14b880 <line:103:5, col:24> col:17 used unlock 'void ()' inline
|-CXXConstructorDecl 0x56490e14b948 <line:36:7> col:7 implicit SelectSet 'void (const SelectSet &)' inline default noexcept-unevaluated 0x56490e14b948
| `-ParmVarDecl 0x56490e14ba58 <col:7> col:7 'const SelectSet &'
`-CXXMethodDecl 0x56490e14baf8 <col:7> col:7 implicit operator= 'SelectSet &(const SelectSet &)' inline default noexcept-unevaluated 0x56490e14baf8
  `-ParmVarDecl 0x56490e14bc08 <col:7> col:7 'const SelectSet &'

Layout: <CGRecordLayout
  LLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  NonVirtualBaseLLVMType:%class.SelectSet = type { [2 x i32], i8, %class.Vector.3, %class.Vector.4 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0d3de8 <../dummy_inc/click/sync.hh:46:1, line:64:1> line:46:7 referenced class Spinlock definition
|-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e0d3f08 <col:1, col:7> col:7 implicit referenced class Spinlock
|-AccessSpecDecl 0x56490e0d3f98 <col:18, col:24> col:18 public
|-CXXConstructorDecl 0x56490e0d4020 <line:48:5, col:21> col:12 Spinlock 'void ()' inline
|-CXXDestructorDecl 0x56490e0d4110 <line:49:5, col:22> col:12 ~Spinlock 'void () noexcept' inline
|-CXXMethodDecl 0x56490e0d4210 <line:51:5, col:25> col:17 used acquire 'void ()' inline
|-CXXMethodDecl 0x56490e0d42d0 <line:52:5, col:25> col:17 used release 'void ()' inline
|-CXXMethodDecl 0x56490e0d4390 <line:53:5, col:25> col:17 attempt 'bool ()' inline
|-CXXMethodDecl 0x56490e0d4478 <line:54:5, col:26> col:17 nested 'bool () const' inline
|-CXXConstructorDecl 0x56490e0d4598 <line:46:7> col:7 implicit constexpr Spinlock 'void (const Spinlock &)' inline default trivial noexcept-unevaluated 0x56490e0d4598
| `-ParmVarDecl 0x56490e0d46a8 <col:7> col:7 'const Spinlock &'
`-CXXMethodDecl 0x56490e1548f8 <col:7> col:7 implicit operator= 'Spinlock &(const Spinlock &)' inline default trivial noexcept-unevaluated 0x56490e1548f8
  `-ParmVarDecl 0x56490e154a08 <col:7> col:7 'const Spinlock &'

Layout: <CGRecordLayout
  LLVMType:%class.Spinlock = type { i8 }
  NonVirtualBaseLLVMType:%class.Spinlock.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0dc5b8 <../dummy_inc/click/task.hh:339:5, line:342:5> line:339:11 referenced union Pending definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0dc6d8 <col:5, col:11> col:11 implicit union Pending
|-FieldDecl 0x56490e0dc778 <line:340:9, col:15> col:15 t 'Task *'
|-FieldDecl 0x56490e0dc7d8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
|-CXXConstructorDecl 0x56490e153ef8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56490e153ef8
| `-ParmVarDecl 0x56490e154008 <col:11> col:11 'const Task::Pending &'
|-CXXConstructorDecl 0x56490e1540a8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56490e1540a8
| `-ParmVarDecl 0x56490e1541b8 <col:11> col:11 'Task::Pending &&'
|-CXXDestructorDecl 0x56490e154228 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56490e154aa8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56490e154aa8
| `-ParmVarDecl 0x56490e154bb8 <col:11> col:11 'const Task::Pending &'
|-CXXMethodDecl 0x56490e154c28 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56490e154c28
| `-ParmVarDecl 0x56490e154d38 <col:11> col:11 'Task::Pending &&'
`-CXXConstructorDecl 0x56490e15c448 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
  `-CompoundStmt 0x56490e15c520 <col:11>

Layout: <CGRecordLayout
  LLVMType:%"union.Task::Pending" = type { %class.Task* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0d5ce0 <../dummy_inc/click/sync.hh:303:1, line:324:1> line:303:7 referenced class SpinlockIRQ definition
|-DefinitionData pass_in_registers empty standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0d5df8 <col:1, col:7> col:7 implicit referenced class SpinlockIRQ
|-AccessSpecDecl 0x56490e0d5e88 <col:21, col:27> col:21 public
|-CXXConstructorDecl 0x56490e0d5f10 <line:305:5, col:24> col:12 SpinlockIRQ 'void ()' inline
|-TypedefDecl 0x56490e0d5fd0 <line:310:5, col:17> col:17 referenced flags_t 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-CXXMethodDecl 0x56490e0d6098 <line:313:5, col:59> col:20 acquire 'SpinlockIRQ::flags_t ()' inline
| `-AlwaysInlineAttr 0x56490e0d6138 <col:45> always_inline
|-CXXMethodDecl 0x56490e0d6268 <line:314:5, col:63> col:17 release 'void (SpinlockIRQ::flags_t)' inline
| |-ParmVarDecl 0x56490e0d61a0 <col:25> col:32 'SpinlockIRQ::flags_t':'int'
| `-AlwaysInlineAttr 0x56490e0d6310 <col:49> always_inline
|-CXXConstructorDecl 0x56490e0d6408 <line:303:7> col:7 implicit constexpr SpinlockIRQ 'void (const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x56490e0d6408
| `-ParmVarDecl 0x56490e0d6518 <col:7> col:7 'const SpinlockIRQ &'
|-CXXConstructorDecl 0x56490e0d65b8 <col:7> col:7 implicit constexpr SpinlockIRQ 'void (SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x56490e0d65b8
| `-ParmVarDecl 0x56490e0d66c8 <col:7> col:7 'SpinlockIRQ &&'
|-CXXDestructorDecl 0x56490e154310 <col:7> col:7 implicit ~SpinlockIRQ 'void ()' inline default trivial noexcept-unevaluated 0x56490e154310
|-CXXMethodDecl 0x56490e154dd8 <col:7> col:7 implicit operator= 'SpinlockIRQ &(const SpinlockIRQ &)' inline default trivial noexcept-unevaluated 0x56490e154dd8
| `-ParmVarDecl 0x56490e154ee8 <col:7> col:7 'const SpinlockIRQ &'
`-CXXMethodDecl 0x56490e154f58 <col:7> col:7 implicit operator= 'SpinlockIRQ &(SpinlockIRQ &&)' inline default trivial noexcept-unevaluated 0x56490e154f58
  `-ParmVarDecl 0x56490e155068 <col:7> col:7 'SpinlockIRQ &&'

Layout: <CGRecordLayout
  LLVMType:%class.SpinlockIRQ = type { i8 }
  NonVirtualBaseLLVMType:%class.SpinlockIRQ.base = type {}
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e14c920 prev 0x56490e137bc0 <../dummy_inc/click/routerthread.hh:28:1, line:248:1> line:28:7 referenced class RouterThread definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x56490e14ca18 <col:1, col:7> col:7 implicit referenced class RouterThread
|-AccessSpecDecl 0x56490e14caa8 <col:22, col:28> col:22 public
|-EnumDecl 0x56490e14cad0 <line:30:5, col:58> col:5
| |-EnumConstantDecl 0x56490e14cbe8 <col:12, col:32> col:12 THREAD_QUIESCENT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
| | `-ConstantExpr 0x56490e14cbc8 <col:31, col:32> 'int' Int: -1
| |   `-UnaryOperator 0x56490e14cbb0 <col:31, col:32> 'int' prefix '-'
| |     `-IntegerLiteral 0x56490e14cb90 <col:32> 'int' 1
| `-EnumConstantDecl 0x56490e14cc90 <col:35, col:53> col:35 THREAD_UNKNOWN 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:30:5)'
|   `-ConstantExpr 0x56490e14cc70 <col:52, col:53> 'int' Int: -1000
|     `-UnaryOperator 0x56490e14cc58 <col:52, col:53> 'int' prefix '-'
|       `-IntegerLiteral 0x56490e14cc38 <col:53> 'int' 1000
|-CXXMethodDecl 0x56490e14cd30 <line:32:5, col:28> col:16 thread_id 'int () const' inline
|-CXXMethodDecl 0x56490e14cdf0 <line:34:5, col:29> col:20 master 'Master *() const' inline
|-CXXMethodDecl 0x56490e14ced8 <line:35:5, col:52> col:22 timer_set 'TimerSet &()' inline
| `-CompoundStmt 0x56490e155128 <col:34, col:52>
|   `-ReturnStmt 0x56490e155118 <col:36, col:43>
|     `-MemberExpr 0x56490e1550e8 <col:43> 'TimerSet' lvalue ->_timers 0x56490e14eba8
|       `-CXXThisExpr 0x56490e1550d8 <col:43> 'RouterThread *' implicit this
|-CXXMethodDecl 0x56490e14cfc8 <line:36:5, col:64> col:28 timer_set 'const TimerSet &() const' inline
| `-CompoundStmt 0x56490e155190 <col:46, col:64>
|   `-ReturnStmt 0x56490e155180 <col:48, col:55>
|     `-MemberExpr 0x56490e155150 <col:55> 'const TimerSet' lvalue ->_timers 0x56490e14eba8
|       `-CXXThisExpr 0x56490e155140 <col:55> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56490e14d0b8 <line:38:5, col:55> col:23 select_set 'SelectSet &()' inline
| `-CompoundStmt 0x56490e1551f8 <col:36, col:55>
|   `-ReturnStmt 0x56490e1551e8 <col:38, col:45>
|     `-MemberExpr 0x56490e1551b8 <col:45> 'SelectSet' lvalue ->_selects 0x56490e14ec08
|       `-CXXThisExpr 0x56490e1551a8 <col:45> 'RouterThread *' implicit this
|-CXXMethodDecl 0x56490e14d1a8 <line:39:5, col:67> col:29 select_set 'const SelectSet &() const' inline
| `-CompoundStmt 0x56490e155260 <col:48, col:67>
|   `-ReturnStmt 0x56490e155250 <col:50, col:57>
|     `-MemberExpr 0x56490e155220 <col:57> 'const SelectSet' lvalue ->_selects 0x56490e14ec08
|       `-CXXThisExpr 0x56490e155210 <col:57> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56490e14d268 <line:43:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x56490e14d358 <line:44:5, col:31> col:18 task_begin 'Task *() const' inline
|-CXXMethodDecl 0x56490e14d4c8 <line:45:5, col:40> col:18 task_next 'Task *(Task *) const' inline
| `-ParmVarDecl 0x56490e14d408 <col:28, col:34> col:34 task 'Task *'
|-CXXMethodDecl 0x56490e14d590 <line:46:5, col:29> col:18 task_end 'Task *() const' inline
|-CXXMethodDecl 0x56490e14d9d8 <line:47:5, col:59> col:10 scheduled_tasks 'void (Router *, Vector<Task *> &)'
| |-ParmVarDecl 0x56490e14d640 <col:26, col:34> col:34 router 'Router *'
| `-ParmVarDecl 0x56490e14d8c0 <col:42, col:58> col:58 x 'Vector<Task *> &'
|-CXXMethodDecl 0x56490e14daa8 <line:49:5, col:28> col:17 lock_tasks 'void ()' inline
|-CXXMethodDecl 0x56490e14db68 <line:50:5, col:30> col:17 unlock_tasks 'void ()' inline
|-CXXMethodDecl 0x56490e14dc28 <line:52:5, col:38> col:17 schedule_block_tasks 'void ()' inline
|-CXXMethodDecl 0x56490e14dd68 <line:53:5, col:43> col:17 used block_tasks 'void (bool)' inline
| `-ParmVarDecl 0x56490e14dcd8 <col:29, col:34> col:34 scheduled 'bool'
|-CXXMethodDecl 0x56490e14de30 <line:54:5, col:31> col:17 used unblock_tasks 'void ()' inline
|-CXXMethodDecl 0x56490e14def0 <line:56:5, col:29> col:17 stop_flag 'bool () const' inline
|-CXXMethodDecl 0x56490e14dfb0 <line:58:5, col:35> col:17 mark_driver_entry 'void ()' inline
|-CXXMethodDecl 0x56490e14e070 <line:59:5, col:17> col:10 driver 'void ()'
|-CXXMethodDecl 0x56490e14e1b0 <line:61:5, col:36> col:10 kill_router 'void (Router *)'
| `-ParmVarDecl 0x56490e14e120 <col:22, col:30> col:30 router 'Router *'
|-CXXMethodDecl 0x56490e14e278 <line:77:5, col:22> col:17 used wake 'void ()' inline
|-CXXMethodDecl 0x56490e14e338 <line:80:5, col:29> col:17 run_signals 'void ()' inline
|-EnumDecl 0x56490e14e3d8 <line:83:5, line:86:20> line:83:5
| |-EnumConstantDecl 0x56490e14e4a0 <col:12> col:12 referenced S_PAUSED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e4f0 <col:22> col:22 referenced S_BLOCKED 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e540 <col:33> col:33 referenced S_TIMERWAIT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e590 <line:84:12> col:12 S_LOCKSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e5e0 <col:26> col:26 S_LOCKTASKS 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e630 <line:85:12> col:12 S_RUNTASK 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e680 <col:23> col:23 S_RUNTIMER 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e6d0 <col:35> col:35 S_RUNSIGNAL 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e720 <col:48> col:48 S_RUNPENDING 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| |-EnumConstantDecl 0x56490e14e770 <col:62> col:62 S_RUNSELECT 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
| `-EnumConstantDecl 0x56490e14e7c0 <line:86:12> col:12 NSTATES 'RouterThread::(anonymous enum at ../dummy_inc/click/routerthread.hh:83:5)'
|-CXXMethodDecl 0x56490e14e8b8 <line:87:5, col:43> col:17 used set_thread_state 'void (int)' inline
| `-ParmVarDecl 0x56490e14e828 <col:34, col:38> col:38 state 'int'
|-CXXMethodDecl 0x56490e14ea08 <line:88:5, col:61> col:17 set_thread_state_for_blocking 'void (int)' inline
| `-ParmVarDecl 0x56490e14e978 <col:47, col:51> col:51 delay_type 'int'
|-AccessSpecDecl 0x56490e14eab0 <line:104:3, col:10> col:3 private
|-FieldDecl 0x56490e14eae8 <line:119:5, col:14> col:14 referenced _task_link 'TaskLink'
|-FieldDecl 0x56490e14eb48 <line:120:5, col:19> col:19 referenced _stop_flag 'volatile bool'
|-FieldDecl 0x56490e14eba8 <line:125:5, col:14> col:14 referenced _timers 'TimerSet'
|-FieldDecl 0x56490e14ec08 <line:127:5, col:15> col:15 referenced _selects 'SelectSet'
|-FieldDecl 0x56490e14ec88 <line:148:5, col:14> col:14 referenced _task_lock 'Spinlock'
| `-AlignedAttr 0x56490e14ecf8 <col:40, col:50> aligned
|   `-ConstantExpr 0x56490e14ecd8 <col:48> 'int' Int: 64
|     `-IntegerLiteral 0x56490e14ec58 <col:48> 'int' 64
|-FieldDecl 0x56490e14ed68 <line:149:5, col:21> col:21 referenced _task_blocker 'atomic_uint32_t'
|-FieldDecl 0x56490e14edc8 <line:150:5, col:21> col:21 referenced _task_blocker_waiting 'atomic_uint32_t'
|-FieldDecl 0x56490e14eec0 <line:152:5, col:19> col:19 referenced _pending_head 'Task::Pending':'Task::Pending'
|-FieldDecl 0x56490e14efd0 <line:153:5, col:20> col:20 _pending_tail 'Task::Pending *'
|-FieldDecl 0x56490e14f030 <line:154:5, col:17> col:17 _pending_lock 'SpinlockIRQ'
|-FieldDecl 0x56490e14f0b0 <line:157:5, col:13> col:13 referenced _master 'Master *'
| `-AlignedAttr 0x56490e14f120 <col:36, col:46> aligned
|   `-ConstantExpr 0x56490e14f100 <col:44> 'int' Int: 64
|     `-IntegerLiteral 0x56490e14f080 <col:44> 'int' 64
|-FieldDecl 0x56490e14f198 <line:158:5, col:9> col:9 referenced _id 'int'
|-FieldDecl 0x56490e14f1f8 <line:159:5, col:10> col:10 referenced _driver_entered 'bool'
|-AccessSpecDecl 0x56490e14f248 <line:170:3, col:9> col:3 public
|-FieldDecl 0x56490e14f288 <line:171:5, col:14> col:14 _tasks_per_iter 'unsigned int'
|-FieldDecl 0x56490e14f2f0 <line:172:5, col:14> col:14 _iters_per_os 'unsigned int'
|-AccessSpecDecl 0x56490e14f340 <line:173:3, col:10> col:3 private
|-CXXConstructorDecl 0x56490e14f4e8 <line:205:5, col:46> col:5 RouterThread 'void (Master *, int)'
| |-ParmVarDecl 0x56490e14f378 <col:18, col:26> col:26 master 'Master *'
| `-ParmVarDecl 0x56490e14f3f8 <col:34, col:38> col:38 threadno 'int'
|-CXXDestructorDecl 0x56490e14f5e8 <line:206:5, col:19> col:5 ~RouterThread 'void ()' noexcept-unevaluated 0x56490e14f5e8
|-CXXMethodDecl 0x56490e14f6f0 <line:209:5, col:29> col:17 add_pending 'void ()' inline
|-CXXMethodDecl 0x56490e14f7b8 <line:211:5, line:217:5> line:211:21 pass 'unsigned int () const' inline
| `-CompoundStmt 0x56490e155358 <col:34, line:217:5>
|   `-ReturnStmt 0x56490e155348 <line:215:9, col:34>
|     `-ImplicitCastExpr 0x56490e155330 <col:16, col:34> 'unsigned int' <LValueToRValue>
|       `-MemberExpr 0x56490e155300 <col:16, col:34> 'unsigned int' lvalue ->_pass 0x56490e0d8840
|         `-ImplicitCastExpr 0x56490e1552e8 <col:16, col:27> 'TaskLink *' <LValueToRValue>
|           `-MemberExpr 0x56490e1552b8 <col:16, col:27> 'TaskLink *const' lvalue ._next 0x56490e0d87d8
|             `-MemberExpr 0x56490e155288 <col:16> 'const TaskLink' lvalue ->_task_link 0x56490e14eae8
|               `-CXXThisExpr 0x56490e155278 <col:16> 'const RouterThread *' implicit this
|-CXXMethodDecl 0x56490e14f878 <line:221:5, col:28> col:10 driver_lock_tasks 'void ()'
|-CXXMethodDecl 0x56490e14f938 <line:222:5, line:226:5> line:222:17 driver_unlock_tasks 'void ()' inline
| `-CompoundStmt 0x56490e155a80 <col:39, line:226:5>
|   |-DeclStmt 0x56490e1555a8 <line:223:9, col:68>
|   | `-VarDecl 0x56490e155380 <col:9, col:67> col:18 used val 'uint32_t':'unsigned int' cinit
|   |   `-CXXMemberCallExpr 0x56490e155560 <col:24, col:67> 'uint32_t':'unsigned int'
|   |     |-MemberExpr 0x56490e155530 <col:24, col:38> '<bound member function type>' .compare_swap 0x56490dcba2c0
|   |     | `-MemberExpr 0x56490e1553f8 <col:24> 'atomic_uint32_t' lvalue ->_task_blocker 0x56490e14ed68
|   |     |   `-CXXThisExpr 0x56490e1553e8 <col:24> 'RouterThread *' implicit this
|   |     |-CStyleCastExpr 0x56490e1554e8 <col:51, col:63> 'uint32_t':'unsigned int' <NoOp>
|   |     | `-ImplicitCastExpr 0x56490e1554d0 <col:62, col:63> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|   |     |   `-UnaryOperator 0x56490e1554a8 <col:62, col:63> 'int' prefix '-'
|   |     |     `-IntegerLiteral 0x56490e155488 <col:63> 'int' 1
|   |     `-ImplicitCastExpr 0x56490e155590 <col:66> 'uint32_t':'unsigned int' <IntegralCast>
|   |       `-IntegerLiteral 0x56490e155510 <col:66> 'int' 0
|   |-CStyleCastExpr 0x56490e1555f0 <line:224:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56490e1555c0 <col:16> 'uint32_t':'unsigned int' lvalue Var 0x56490e155380 'val' 'uint32_t':'unsigned int'
|   `-ParenExpr 0x56490e155a60 <line:225:9, col:181> 'void'
|     `-ConditionalOperator 0x56490e155a30 <col:10, col:180> 'void'
|       |-CXXStaticCastExpr 0x56490e155708 <col:10, col:50> 'bool' static_cast<_Bool> <NoOp>
|       | `-BinaryOperator 0x56490e1556d8 <col:30, col:49> 'bool' '=='
|       |   |-ImplicitCastExpr 0x56490e1556c0 <col:30> 'uint32_t':'unsigned int' <LValueToRValue>
|       |   | `-DeclRefExpr 0x56490e155618 <col:30> 'uint32_t':'unsigned int' lvalue Var 0x56490e155380 'val' 'uint32_t':'unsigned int'
|       |   `-CStyleCastExpr 0x56490e155698 <col:37, col:49> 'uint32_t':'unsigned int' <NoOp>
|       |     `-ImplicitCastExpr 0x56490e155680 <col:48, col:49> 'uint32_t':'unsigned int' <IntegralCast> part_of_explicit_cast
|       |       `-UnaryOperator 0x56490e155658 <col:48, col:49> 'int' prefix '-'
|       |         `-IntegerLiteral 0x56490e155638 <col:49> 'int' 1
|       |-CXXFunctionalCastExpr 0x56490e155768 <col:54, col:61> 'void' functional cast to void <ToVoid>
|       | `-IntegerLiteral 0x56490e155748 <col:60> 'int' 0
|       `-CallExpr 0x56490e155990 <col:65, col:180> 'void'
|         |-ImplicitCastExpr 0x56490e155978 <col:65> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|         | `-DeclRefExpr 0x56490e155958 <col:65> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|         |-ImplicitCastExpr 0x56490e1559d0 <col:80> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x56490e155858 <col:80> 'const char [21]' lvalue "val == (uint32_t) -1"
|         |-ImplicitCastExpr 0x56490e1559e8 <col:104> 'const char *' <ArrayToPointerDecay>
|         | `-StringLiteral 0x56490e155888 <col:104> 'const char [35]' lvalue "../dummy_inc/click/routerthread.hh"
|         |-ImplicitCastExpr 0x56490e155a00 <col:142> 'unsigned int' <IntegralCast>
|         | `-IntegerLiteral 0x56490e1558c8 <col:142> 'int' 225
|         `-ImplicitCastExpr 0x56490e155a18 <col:147, col:161> 'const char *' <ArrayToPointerDecay>
|           `-UnaryOperator 0x56490e155940 <col:147, col:161> 'const char [41]' lvalue prefix '__extension__' cannot overflow
|             `-PredefinedExpr 0x56490e155928 <col:161> 'const char [41]' lvalue __PRETTY_FUNCTION__
|               `-StringLiteral 0x56490e1558e8 <col:161> 'const char [41]' lvalue "void RouterThread::driver_unlock_tasks()"
|-CXXMethodDecl 0x56490e1532d0 <line:228:5, col:37> col:17 run_tasks 'void (int)' inline
| `-ParmVarDecl 0x56490e153240 <col:27, col:31> col:31 ntasks 'int'
|-CXXMethodDecl 0x56490e153398 <line:229:5, col:33> col:17 process_pending 'void ()' inline
|-CXXMethodDecl 0x56490e153458 <line:230:5, col:24> col:17 run_os 'void ()' inline
|-CXXMethodDecl 0x56490e153518 <line:238:5, col:45> col:24 used running_in_interrupt 'bool ()' static inline
|-CXXMethodDecl 0x56490e1535d8 <line:239:5, col:45> col:17 used current_thread_is_running 'bool () const' inline
|-CXXMethodDecl 0x56490e153698 <line:240:5, col:53> col:17 current_thread_is_running_cleanup 'bool () const' inline
|-FriendDecl 0x56490e153790 <line:242:5, col:18> col:12 'class Task':'Task'
|-FriendDecl 0x56490e1537f0 <line:243:5, col:18> col:12 'class Master':'Master'
|-FriendDecl 0x56490e153880 <line:245:5, col:18> col:12 'class SelectSet':'SelectSet'
|-CXXConstructorDecl 0x56490e153c48 <line:28:7> col:7 implicit RouterThread 'void (const RouterThread &)' inline default noexcept-unevaluated 0x56490e153c48
| `-ParmVarDecl 0x56490e153d58 <col:7> col:7 'const RouterThread &'
`-CXXMethodDecl 0x56490e154418 <col:7> col:7 implicit operator= 'RouterThread &(const RouterThread &)' inline default noexcept-unevaluated 0x56490e154418
  `-ParmVarDecl 0x56490e154528 <col:7> col:7 'const RouterThread &'

Layout: <CGRecordLayout
  LLVMType:%class.RouterThread = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32, [40 x i8] }
  NonVirtualBaseLLVMType:%class.RouterThread.base = type { %struct.TaskLink, i8, [7 x i8], %class.TimerSet, %class.SelectSet, [32 x i8], %class.Spinlock, %class.atomic_uint32_t, %class.atomic_uint32_t, %"union.Task::Pending", %"union.Task::Pending"*, %class.SpinlockIRQ, [31 x i8], %class.Master*, i32, i8, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0d8b50 prev 0x56490e0b9b20 <../dummy_inc/click/task.hh:49:1, line:371:1> line:49:7 referenced class Task definition
|-DefinitionData has_user_declared_ctor can_const_default_init
| |-DefaultConstructor
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-private 'TaskLink'
|-CXXRecordDecl 0x56490e0d8c88 <col:1, col:7> col:7 implicit referenced class Task
|-AccessSpecDecl 0x56490e0d8d18 <col:33, col:39> col:33 public
|-EnumDecl 0x56490e0d8d40 <line:52:5, col:50> col:5
| |-EnumConstantDecl 0x56490e0d8e80 <col:12, col:26> col:12 referenced STRIDE1 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
| | `-ConstantExpr 0x56490e0d8e60 <col:22, col:26> 'unsigned int' Int: 65536
| |   `-BinaryOperator 0x56490e0d8e40 <col:22, col:26> 'unsigned int' '<<'
| |     |-IntegerLiteral 0x56490e0d8e00 <col:22> 'unsigned int' 1
| |     `-IntegerLiteral 0x56490e0d8e20 <col:26> 'int' 16
| `-EnumConstantDecl 0x56490e0d8f50 <col:30, col:47> col:30 referenced MAX_STRIDE 'Task::(anonymous enum at ../dummy_inc/click/task.hh:52:5)'
|   `-ConstantExpr 0x56490e0d8f30 <col:43, col:47> 'unsigned int' Int: 2147483648
|     `-BinaryOperator 0x56490e0d8f10 <col:43, col:47> 'unsigned int' '<<'
|       |-IntegerLiteral 0x56490e0d8ed0 <col:43> 'unsigned int' 1
|       `-IntegerLiteral 0x56490e0d8ef0 <col:47> 'int' 31
|-EnumDecl 0x56490e0d8fa0 <line:53:5, col:57> col:5
| |-EnumConstantDecl 0x56490e0d90e0 <col:12, col:29> col:12 referenced MAX_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
| | `-ImplicitCastExpr 0x56490e0d9200 <col:26, col:29> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0d90c0 <col:26, col:29> 'int' Int: 32768
| |     `-BinaryOperator 0x56490e0d90a0 <col:26, col:29> 'int' '<<'
| |       |-IntegerLiteral 0x56490e0d9060 <col:26> 'int' 1
| |       `-IntegerLiteral 0x56490e0d9080 <col:29> 'int' 15
| `-EnumConstantDecl 0x56490e0d91b0 <col:33, col:54> col:33 DEFAULT_TICKETS 'Task::(anonymous enum at ../dummy_inc/click/task.hh:53:5)'
|   `-ImplicitCastExpr 0x56490e0d9218 <col:51, col:54> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e0d9190 <col:51, col:54> 'int' Int: 1024
|       `-BinaryOperator 0x56490e0d9170 <col:51, col:54> 'int' '<<'
|         |-IntegerLiteral 0x56490e0d9130 <col:51> 'int' 1
|         `-IntegerLiteral 0x56490e0d9150 <col:54> 'int' 10
|-CXXConstructorDecl 0x56490e0d93e8 <line:75:5, col:48> col:12 Task 'void (TaskCallback, void *)' inline
| |-ParmVarDecl 0x56490e0d9240 <col:17, col:30> col:30 f 'TaskCallback':'bool (*)(Task *, void *)'
| `-ParmVarDecl 0x56490e0d92c0 <col:33, col:39> col:39 user_data 'void *'
|-CXXConstructorDecl 0x56490e0d9578 <line:86:5, col:27> col:12 used Task 'void (Element *)' inline
| `-ParmVarDecl 0x56490e0d94b0 <col:17, col:26> col:26 e 'Element *'
|-CXXDestructorDecl 0x56490e0d9670 <line:91:5, col:11> col:5 used ~Task 'void () noexcept'
|-CXXMethodDecl 0x56490e0d97f8 <line:98:5, line:100:5> line:98:25 callback 'TaskCallback () const' inline
| `-CompoundStmt 0x56490e0dd718 <col:42, line:100:5>
|   `-ReturnStmt 0x56490e0dd708 <line:99:9, col:16>
|     `-ImplicitCastExpr 0x56490e0dd6f0 <col:16> 'TaskCallback':'bool (*)(Task *, void *)' <LValueToRValue>
|       `-MemberExpr 0x56490e0dd6c0 <col:16> 'const TaskCallback':'bool (*const)(Task *, void *)' lvalue ->_hook 0x56490e0dc440
|         `-CXXThisExpr 0x56490e0dd6b0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56490e0d98c0 <line:103:5, line:105:5> line:103:18 user_data 'void *() const' inline
| `-CompoundStmt 0x56490e0dd798 <col:36, line:105:5>
|   `-ReturnStmt 0x56490e0dd788 <line:104:9, col:16>
|     `-ImplicitCastExpr 0x56490e0dd770 <col:16> 'void *' <LValueToRValue>
|       `-MemberExpr 0x56490e0dd740 <col:16> 'void *const' lvalue ->_thunk 0x56490e0dc4a8
|         `-CXXThisExpr 0x56490e0dd730 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56490e0d9980 <line:108:5, line:110:5> line:108:21 element 'Element *() const' inline
| `-CompoundStmt 0x56490e0dd818 <col:37, line:110:5>
|   `-ReturnStmt 0x56490e0dd808 <line:109:9, col:16>
|     `-ImplicitCastExpr 0x56490e0dd7f0 <col:16> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x56490e0dd7c0 <col:16> 'Element *const' lvalue ->_owner 0x56490e0dc568
|         `-CXXThisExpr 0x56490e0dd7b0 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56490e0da820 <line:114:5, col:31> col:17 initialized 'bool () const' inline
|-CXXMethodDecl 0x56490e0da8e8 <line:123:5, col:33> col:16 home_thread_id 'int () const' inline
|-CXXMethodDecl 0x56490e0da9a8 <line:132:5, col:35> col:26 thread 'RouterThread *() const' inline
|-CXXMethodDecl 0x56490e0daa68 <line:135:5, line:137:5> line:135:20 router 'Router *() const' inline
| `-CompoundStmt 0x56490e0dd900 <col:35, line:137:5>
|   `-ReturnStmt 0x56490e0dd8f0 <line:136:9, col:31>
|     `-CXXMemberCallExpr 0x56490e0dd8b8 <col:16, col:31> 'Router *'
|       `-MemberExpr 0x56490e0dd888 <col:16, col:24> '<bound member function type>' ->router 0x56490e0cafe0
|         `-ImplicitCastExpr 0x56490e0dd8d8 <col:16> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x56490e0dd870 <col:16> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x56490e0dd840 <col:16> 'Element *const' lvalue ->_owner 0x56490e0dc568
|               `-CXXThisExpr 0x56490e0dd830 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56490e0dab28 <line:140:5, col:22> col:13 master 'Master *() const'
|-CXXMethodDecl 0x56490e0dad28 <line:159:5, col:50> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56490e0dabd8 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56490e0dac50 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x56490e0daf38 <line:169:5, col:50> col:10 initialize 'void (Router *, bool)'
| |-ParmVarDecl 0x56490e0dade8 <col:21, col:29> col:29 router 'Router *'
| `-ParmVarDecl 0x56490e0dae60 <col:37, col:42> col:42 schedule 'bool'
|-CXXMethodDecl 0x56490e0db008 <line:179:5, line:181:5> line:179:17 scheduled 'bool () const' inline
| `-CompoundStmt 0x56490e0dda10 <col:35, line:181:5>
|   `-ReturnStmt 0x56490e0dda00 <line:180:9, col:24>
|     `-ImplicitCastExpr 0x56490e0dd9e8 <col:16, col:24> 'bool' <IntegralToBoolean>
|       `-ImplicitCastExpr 0x56490e0dd9d0 <col:16, col:24> 'uint8_t':'unsigned char' <LValueToRValue>
|         `-MemberExpr 0x56490e0dd9a0 <col:16, col:24> 'const uint8_t':'const unsigned char' lvalue .is_scheduled 0x56490e0dc078
|           `-MemberExpr 0x56490e0dd958 <col:16, col:24> 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|             `-MemberExpr 0x56490e0dd928 <col:16> 'const union Status':'const Task::Status' lvalue ->_status 0x56490e0dc3c8
|               `-CXXThisExpr 0x56490e0dd918 <col:16> 'const Task *' implicit this
|-CXXMethodDecl 0x56490e0db0c8 <line:190:5, line:192:5> line:190:17 unschedule 'void ()' inline
| `-CompoundStmt 0x56490e0ddb28 <col:30, line:192:5>
|   `-BinaryOperator 0x56490e0ddb08 <line:191:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x56490e0ddab0 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56490e0dc078
|     | `-MemberExpr 0x56490e0dda68 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|     |   `-MemberExpr 0x56490e0dda38 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56490e0dc3c8
|     |     `-CXXThisExpr 0x56490e0dda28 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x56490e0ddaf0 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x56490e0ddae0 <col:32> 'bool' false
|-CXXMethodDecl 0x56490e0db188 <line:201:5, line:206:5> line:201:17 used reschedule 'void ()' inline
| `-CompoundStmt 0x56490e0dde78 <col:30, line:206:5>
|   |-BinaryOperator 0x56490e0ddc20 <line:202:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x56490e0ddbc8 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56490e0dc078
|   | | `-MemberExpr 0x56490e0ddb80 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|   | |   `-MemberExpr 0x56490e0ddb50 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56490e0dc3c8
|   | |     `-CXXThisExpr 0x56490e0ddb40 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x56490e0ddc08 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x56490e0ddbf8 <col:32> 'bool' true
|   |-CallExpr 0x56490e0ddcc0 <line:203:9, col:21> 'void'
|   | `-ImplicitCastExpr 0x56490e0ddca8 <col:9> 'void (*)()' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56490e0ddc88 <col:9> 'void ()' lvalue Function 0x56490e0d39a0 'click_fence' 'void ()'
|   `-IfStmt 0x56490e0dde60 <line:204:9, line:205:32>
|     |-BinaryOperator 0x56490e0ddda0 <line:204:13, col:34> 'bool' '<'
|     | |-ImplicitCastExpr 0x56490e0ddd70 <col:13, col:30> 'uintptr_t':'unsigned long' <LValueToRValue>
|     | | `-MemberExpr 0x56490e0ddd20 <col:13, col:30> 'uintptr_t':'unsigned long' lvalue .x 0x56490e0dc7d8
|     | |   `-MemberExpr 0x56490e0ddcf0 <col:13> 'Task::Pending' lvalue ->_pending_nextptr 0x56490e0dc850
|     | |     `-CXXThisExpr 0x56490e0ddce0 <col:13> 'Task *' implicit this
|     | `-ImplicitCastExpr 0x56490e0ddd88 <col:34> 'unsigned long' <IntegralCast>
|     |   `-IntegerLiteral 0x56490e0ddd50 <col:34> 'int' 2
|     `-CXXMemberCallExpr 0x56490e0dde20 <line:205:13, col:32> 'void'
|       |-MemberExpr 0x56490e0dddd0 <col:13> '<bound member function type>' ->complete_schedule 0x56490e0dd250
|       | `-CXXThisExpr 0x56490e0dddc0 <col:13> 'Task *' implicit this
|       `-ImplicitCastExpr 0x56490e0dde48 <col:31> 'RouterThread *' <NullToPointer>
|         `-IntegerLiteral 0x56490e0dde00 <col:31> 'int' 0
|-CXXMethodDecl 0x56490e0db248 <line:238:5, line:240:5> line:238:17 fast_reschedule 'void ()' inline
| `-CompoundStmt 0x56490e0ddfa0 <col:35, line:240:5>
|   `-BinaryOperator 0x56490e0ddf80 <line:239:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x56490e0ddf28 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56490e0dc078
|     | `-MemberExpr 0x56490e0ddee0 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|     |   `-MemberExpr 0x56490e0ddeb0 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56490e0dc3c8
|     |     `-CXXThisExpr 0x56490e0ddea0 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x56490e0ddf68 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x56490e0ddf58 <col:32> 'bool' true
|-CXXMethodDecl 0x56490e0db308 <line:250:5, line:253:5> line:250:17 strong_unschedule 'void ()' inline
| `-CompoundStmt 0x56490e0de1b8 <col:37, line:253:5>
|   |-BinaryOperator 0x56490e0de098 <line:251:9, col:32> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x56490e0de040 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_scheduled 0x56490e0dc078
|   | | `-MemberExpr 0x56490e0ddff8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|   | |   `-MemberExpr 0x56490e0ddfc8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56490e0dc3c8
|   | |     `-CXXThisExpr 0x56490e0ddfb8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x56490e0de080 <col:32> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x56490e0de070 <col:32> 'bool' false
|   `-BinaryOperator 0x56490e0de198 <line:252:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|     |-MemberExpr 0x56490e0de140 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x56490e0dc0d8
|     | `-MemberExpr 0x56490e0de0f8 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|     |   `-MemberExpr 0x56490e0de0c8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56490e0dc3c8
|     |     `-CXXThisExpr 0x56490e0de0b8 <col:9> 'Task *' implicit this
|     `-ImplicitCastExpr 0x56490e0de180 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|       `-CXXBoolLiteralExpr 0x56490e0de170 <col:41> 'bool' true
|-CXXMethodDecl 0x56490e0db3c8 <line:261:5, line:264:5> line:261:17 strong_reschedule 'void ()' inline
| `-CompoundStmt 0x56490e0de338 <col:37, line:264:5>
|   |-BinaryOperator 0x56490e0de2b8 <line:262:9, col:41> 'uint8_t':'unsigned char' lvalue '='
|   | |-MemberExpr 0x56490e0de260 <col:9, col:17> 'uint8_t':'unsigned char' lvalue .is_strong_unscheduled 0x56490e0dc0d8
|   | | `-MemberExpr 0x56490e0de218 <col:9, col:17> 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)' lvalue . 0x56490e0dc198
|   | |   `-MemberExpr 0x56490e0de1e8 <col:9> 'union Status':'Task::Status' lvalue ->_status 0x56490e0dc3c8
|   | |     `-CXXThisExpr 0x56490e0de1d8 <col:9> 'Task *' implicit this
|   | `-ImplicitCastExpr 0x56490e0de2a0 <col:41> 'uint8_t':'unsigned char' <IntegralCast>
|   |   `-CXXBoolLiteralExpr 0x56490e0de290 <col:41> 'bool' false
|   `-CXXMemberCallExpr 0x56490e0de318 <line:263:9, col:20> 'void'
|     `-MemberExpr 0x56490e0de2e8 <col:9> '<bound member function type>' ->reschedule 0x56490e0db188
|       `-CXXThisExpr 0x56490e0de2d8 <col:9> 'Task *' implicit this
|-CXXMethodDecl 0x56490e0db510 <line:275:5, col:39> col:10 move_thread 'void (int)'
| `-ParmVarDecl 0x56490e0db480 <col:22, col:26> col:26 new_thread_id 'int'
|-CXXMethodDecl 0x56490e0db5e0 <line:279:5, col:26> col:16 tickets 'int () const' inline
|-CXXMethodDecl 0x56490e0db728 <line:280:5, col:34> col:17 used set_tickets 'void (int)' inline
| `-ParmVarDecl 0x56490e0db698 <col:29, col:33> col:33 n 'int'
|-CXXMethodDecl 0x56490e0db878 <line:281:5, col:41> col:17 adjust_tickets 'void (int)' inline
| `-ParmVarDecl 0x56490e0db7e8 <col:32, col:36> col:36 delta 'int'
|-CXXMethodDecl 0x56490e0db940 <line:284:5, col:22> col:17 fire 'bool ()' inline
|-CXXMethodDecl 0x56490e0dba00 <line:299:5, col:64> col:25 hook 'TaskCallback () const' inline
| `-DeprecatedAttr 0x56490e0dbaa0 <col:53> "" ""
|-CXXMethodDecl 0x56490e0dbb38 <line:300:5, col:58> col:18 thunk 'void *() const' inline
| `-DeprecatedAttr 0x56490e0dbbd8 <col:47> "" ""
|-AccessSpecDecl 0x56490e0dbc48 <line:303:3, col:10> col:3 private
|-FieldDecl 0x56490e0dbc88 <line:310:5, col:14> col:14 referenced _stride 'unsigned int'
|-FieldDecl 0x56490e0dbcf0 <line:311:5, col:9> col:9 referenced _tickets 'int'
|-CXXRecordDecl 0x56490e0dbd40 <line:314:5, line:321:5> line:314:11 union Status definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e0dbe58 <col:5, col:11> col:11 implicit union Status
| |-CXXRecordDecl 0x56490e0dbee8 <line:315:9, line:319:9> line:315:9 struct definition
| | |-DefinitionData is_anonymous pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | | |-DefaultConstructor exists trivial
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial
| | |-FieldDecl 0x56490e0dc018 <line:316:13, col:21> col:21 referenced home_thread_id 'int16_t':'short'
| | |-FieldDecl 0x56490e0dc078 <line:317:13, col:21> col:21 referenced is_scheduled 'uint8_t':'unsigned char'
| | |-FieldDecl 0x56490e0dc0d8 <line:318:13, col:21> col:21 referenced is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-CXXConstructorDecl 0x56490e15aad8 <line:315:9> col:9 implicit  'void () noexcept' inline default trivial
| | |-CXXDestructorDecl 0x56490e15abb0 <col:9> col:9 implicit ~ 'void () noexcept' inline default trivial
| | |-CXXConstructorDecl 0x56490e15ae68 <col:9> col:9 implicit constexpr  'void (const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &)' inline default trivial noexcept-unevaluated 0x56490e15ae68
| | | `-ParmVarDecl 0x56490e15af78 <col:9> col:9 'const Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &'
| | `-CXXConstructorDecl 0x56490e15b018 <col:9> col:9 implicit constexpr  'void (Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&)' inline default trivial noexcept-unevaluated 0x56490e15b018
| |   `-ParmVarDecl 0x56490e15b128 <col:9> col:9 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9) &&'
| |-FieldDecl 0x56490e0dc198 <col:9> col:9 implicit referenced 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| |-IndirectFieldDecl 0x56490e0dc1f8 <line:316:21> col:21 implicit home_thread_id 'int16_t':'short'
| | |-Field 0x56490e0dc198 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x56490e0dc018 'home_thread_id' 'int16_t':'short'
| |-IndirectFieldDecl 0x56490e0dc250 <line:317:21> col:21 implicit is_scheduled 'uint8_t':'unsigned char'
| | |-Field 0x56490e0dc198 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x56490e0dc078 'is_scheduled' 'uint8_t':'unsigned char'
| |-IndirectFieldDecl 0x56490e0dc2a8 <line:318:21> col:21 implicit is_strong_unscheduled 'uint8_t':'unsigned char'
| | |-Field 0x56490e0dc198 '' 'Task::Status::(anonymous struct at ../dummy_inc/click/task.hh:315:9)'
| | `-Field 0x56490e0dc0d8 'is_strong_unscheduled' 'uint8_t':'unsigned char'
| |-FieldDecl 0x56490e0dc300 <line:320:9, col:18> col:18 status 'uint32_t':'unsigned int'
| |-CXXConstructorDecl 0x56490e15a9e8 <line:314:11> col:11 implicit used Status 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56490e15c3e8 <col:11>
| |-CXXConstructorDecl 0x56490e15acb8 <col:11> col:11 implicit constexpr Status 'void (const Task::Status &)' inline default trivial noexcept-unevaluated 0x56490e15acb8
| | `-ParmVarDecl 0x56490e15adc8 <col:11> col:11 'const Task::Status &'
| |-CXXConstructorDecl 0x56490e15c260 <col:11> col:11 implicit constexpr Status 'void (Task::Status &&)' inline default trivial noexcept-unevaluated 0x56490e15c260
| | `-ParmVarDecl 0x56490e15c378 <col:11> col:11 'Task::Status &&'
| `-CXXDestructorDecl 0x56490e194af8 <col:11> col:11 implicit ~Status 'void () noexcept' inline default trivial
|-FieldDecl 0x56490e0dc3c8 <col:5, line:321:7> col:7 referenced _status 'union Status':'Task::Status'
|-FieldDecl 0x56490e0dc440 <line:323:5, col:18> col:18 referenced _hook 'TaskCallback':'bool (*)(Task *, void *)'
|-FieldDecl 0x56490e0dc4a8 <line:324:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56490e0dc508 <line:335:5, col:19> col:19 referenced _thread 'RouterThread *'
|-FieldDecl 0x56490e0dc568 <line:337:5, col:14> col:14 referenced _owner 'Element *'
|-CXXRecordDecl 0x56490e0dc5b8 <line:339:5, line:342:5> line:339:11 referenced union Pending definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e0dc6d8 <col:5, col:11> col:11 implicit union Pending
| |-FieldDecl 0x56490e0dc778 <line:340:9, col:15> col:15 t 'Task *'
| |-FieldDecl 0x56490e0dc7d8 <line:341:9, col:19> col:19 referenced x 'uintptr_t':'unsigned long'
| |-CXXConstructorDecl 0x56490e153ef8 <line:339:11> col:11 implicit constexpr Pending 'void (const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56490e153ef8
| | `-ParmVarDecl 0x56490e154008 <col:11> col:11 'const Task::Pending &'
| |-CXXConstructorDecl 0x56490e1540a8 <col:11> col:11 implicit constexpr Pending 'void (Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56490e1540a8
| | `-ParmVarDecl 0x56490e1541b8 <col:11> col:11 'Task::Pending &&'
| |-CXXDestructorDecl 0x56490e154228 <col:11> col:11 implicit ~Pending 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56490e154aa8 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(const Task::Pending &)' inline default trivial noexcept-unevaluated 0x56490e154aa8
| | `-ParmVarDecl 0x56490e154bb8 <col:11> col:11 'const Task::Pending &'
| |-CXXMethodDecl 0x56490e154c28 <col:11> col:11 implicit constexpr operator= 'Task::Pending &(Task::Pending &&)' inline default trivial noexcept-unevaluated 0x56490e154c28
| | `-ParmVarDecl 0x56490e154d38 <col:11> col:11 'Task::Pending &&'
| `-CXXConstructorDecl 0x56490e15c448 <col:11> col:11 implicit used Pending 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x56490e15c520 <col:11>
|-FieldDecl 0x56490e0dc850 <line:343:5, col:13> col:13 referenced _pending_nextptr 'Task::Pending'
|-CXXConstructorDecl 0x56490e0dc998 <line:345:5, col:23> col:5 Task 'void (const Task &)'
| `-ParmVarDecl 0x56490e0dc8d8 <col:10, col:22> col:22 x 'const Task &'
|-CXXMethodDecl 0x56490e0dcb48 <line:346:5, col:34> col:11 operator= 'Task &(const Task &)'
| `-ParmVarDecl 0x56490e0dca58 <col:21, col:33> col:33 x 'const Task &'
|-CXXMethodDecl 0x56490e0dcc10 <line:347:5, col:18> col:10 cleanup 'void ()'
|-CXXMethodDecl 0x56490e0dccd0 <line:352:5, col:37> col:17 used on_scheduled_list 'bool () const' inline
|-CXXMethodDecl 0x56490e0dcd90 <line:353:5, line:355:5> line:353:17 on_pending_list 'bool () const' inline
| `-CompoundStmt 0x56490e0de448 <col:41, line:355:5>
|   `-ReturnStmt 0x56490e0de438 <line:354:9, col:38>
|     `-BinaryOperator 0x56490e0de418 <col:16, col:38> 'bool' '!='
|       |-ImplicitCastExpr 0x56490e0de3e8 <col:16, col:33> 'uintptr_t':'unsigned long' <LValueToRValue>
|       | `-MemberExpr 0x56490e0de398 <col:16, col:33> 'const uintptr_t':'const unsigned long' lvalue .x 0x56490e0dc7d8
|       |   `-MemberExpr 0x56490e0de368 <col:16> 'const Task::Pending' lvalue ->_pending_nextptr 0x56490e0dc850
|       |     `-CXXThisExpr 0x56490e0de358 <col:16> 'const Task *' implicit this
|       `-ImplicitCastExpr 0x56490e0de400 <col:38> 'unsigned long' <IntegralCast>
|         `-IntegerLiteral 0x56490e0de3c8 <col:38> 'int' 0
|-CXXMethodDecl 0x56490e0dce50 <line:356:5, col:33> col:17 needs_cleanup 'bool () const' inline
|-CXXMethodDecl 0x56490e0dcf90 <line:361:5, col:33> col:10 add_pending 'void (bool)'
| `-ParmVarDecl 0x56490e0dcf00 <col:22, col:27> col:27 always 'bool'
|-CXXMethodDecl 0x56490e0dd108 <line:362:5, col:46> col:10 process_pending 'void (RouterThread *)'
| `-ParmVarDecl 0x56490e0dd048 <col:26, col:40> col:40 thread 'RouterThread *'
|-CXXMethodDecl 0x56490e0dd250 <line:364:5, col:64> col:10 used complete_schedule 'void (RouterThread *)'
| `-ParmVarDecl 0x56490e0dd1c0 <col:28, col:42> col:42 process_pending_thread 'RouterThread *'
|-CXXMethodDecl 0x56490e0dd318 <line:365:5, col:44> col:17 remove_from_scheduled_list 'void ()' inline
|-CXXMethodDecl 0x56490e0dd4e0 <line:367:5, col:55> col:17 error_hook 'bool (Task *, void *)' static
| |-ParmVarDecl 0x56490e0dd3c8 <col:28, col:34> col:34 task 'Task *'
| `-ParmVarDecl 0x56490e0dd448 <col:40, col:46> col:46 user_data 'void *'
|-FriendDecl 0x56490e0dd5e0 <line:369:5, col:18> col:12 'class RouterThread':'RouterThread'
`-FriendDecl 0x56490e0dd670 <line:370:5, col:18> col:12 'class Master':'Master'

Layout: <CGRecordLayout
  LLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  NonVirtualBaseLLVMType:%class.Task = type { %struct.TaskLink.base, i32, i32, %"union.Task::Status", i1 (%class.Task*, i8*)*, i8*, %class.RouterThread*, %class.Element*, %"union.Task::Pending" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0e1f48 <../dummy_inc/click/timer.hh:343:5, line:345:5> line:343:5 union definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-FieldDecl 0x56490e0e2078 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
`-CXXDestructorDecl 0x56490e0ee568 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%union.anon = type { void (%class.Timer*, i8*)* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0de848 prev 0x56490e0b9bd0 <../dummy_inc/click/timer.hh:14:1, line:358:1> line:14:7 class Timer definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e0de940 <col:1, col:7> col:7 implicit referenced class Timer
|-AccessSpecDecl 0x56490e0de9d0 <col:15, col:21> col:15 public
|-CXXConstructorDecl 0x56490e0dea30 <line:22:5, col:11> col:5 Timer 'void ()'
|-CXXRecordDecl 0x56490e0dead8 <line:24:5, line:25:5> line:24:12 referenced struct do_nothing_t definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56490e0debf8 <col:5, col:12> col:12 implicit struct do_nothing_t
| |-CXXConstructorDecl 0x56490e1941c0 <col:12> col:12 implicit constexpr do_nothing_t 'void ()' inline default trivial noexcept-unevaluated 0x56490e1941c0
| |-CXXConstructorDecl 0x56490e1942a0 <col:12> col:12 implicit constexpr do_nothing_t 'void (const Timer::do_nothing_t &)' inline default trivial noexcept-unevaluated 0x56490e1942a0
| | `-ParmVarDecl 0x56490e194388 <col:12> col:12 'const Timer::do_nothing_t &'
| `-CXXConstructorDecl 0x56490e194428 <col:12> col:12 implicit constexpr do_nothing_t 'void (Timer::do_nothing_t &&)' inline default trivial noexcept-unevaluated 0x56490e194428
|   `-ParmVarDecl 0x56490e194538 <col:12> col:12 'Timer::do_nothing_t &&'
|-CXXConstructorDecl 0x56490e0ded98 <line:32:5, col:37> col:5 Timer 'void (const Timer::do_nothing_t &)'
| `-ParmVarDecl 0x56490e0decd8 <col:11, col:31> col:31 unused 'const Timer::do_nothing_t &'
|-CXXConstructorDecl 0x56490e0defe8 <line:38:5, col:43> col:5 Timer 'void (TimerCallback, void *)'
| |-ParmVarDecl 0x56490e0dee58 <col:11, col:25> col:25 f 'TimerCallback':'void (*)(Timer *, void *)'
| `-ParmVarDecl 0x56490e0deed8 <col:28, col:34> col:34 user_data 'void *'
|-CXXConstructorDecl 0x56490e0df140 <line:43:5, col:27> col:5 Timer 'void (Element *)'
| `-ParmVarDecl 0x56490e0df0b0 <col:11, col:20> col:20 element 'Element *'
|-CXXConstructorDecl 0x56490e0df2c8 <line:47:5, col:21> col:5 used Timer 'void (Task *)'
| `-ParmVarDecl 0x56490e0df200 <col:11, col:17> col:17 task 'Task *'
|-CXXConstructorDecl 0x56490e0df478 <line:52:5, col:25> col:5 Timer 'void (const Timer &)'
| `-ParmVarDecl 0x56490e0df3b8 <col:11, col:24> col:24 x 'const Timer &'
|-CXXDestructorDecl 0x56490e0df570 <line:55:5, line:58:5> line:55:12 used ~Timer 'void () noexcept' inline
| `-CompoundStmt 0x56490e0ee740 <col:21, line:58:5>
|   `-IfStmt 0x56490e0ee728 <line:56:2, line:57:17>
|     |-CXXMemberCallExpr 0x56490e0ee690 <line:56:6, col:16> 'bool'
|     | `-MemberExpr 0x56490e0ee660 <col:6> '<bound member function type>' ->scheduled 0x56490e0dfdc8
|     |   `-ImplicitCastExpr 0x56490e0ee6b0 <col:6> 'const Timer *' <NoOp>
|     |     `-CXXThisExpr 0x56490e0ee650 <col:6> 'Timer *' implicit this
|     `-CXXMemberCallExpr 0x56490e0ee708 <line:57:6, col:17> 'void'
|       `-MemberExpr 0x56490e0ee6d8 <col:6> '<bound member function type>' ->unschedule 0x56490e0e13f0
|         `-CXXThisExpr 0x56490e0ee6c8 <col:6> 'Timer *' implicit this
|-CXXMethodDecl 0x56490e0df670 <line:62:5, line:65:5> line:62:17 used assign 'void ()' inline
| `-CompoundStmt 0x56490e0ee8e0 <col:26, line:65:5>
|   |-BinaryOperator 0x56490e0ee800 <line:63:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56490e0ee798 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56490e0e2078
|   | | `-MemberExpr 0x56490e0ee768 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56490e0e2138
|   | |   `-CXXThisExpr 0x56490e0ee758 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56490e0ee7e8 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56490e0ee7c8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56490e0e2598 'do_nothing_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56490e0ee8c0 <line:64:2, col:20> 'void *' lvalue '='
|     |-MemberExpr 0x56490e0ee830 <col:2> 'void *' lvalue ->_thunk 0x56490e0e21b8
|     | `-CXXThisExpr 0x56490e0ee820 <col:2> 'Timer *' implicit this
|     `-CStyleCastExpr 0x56490e0ee898 <col:11, col:20> 'void *' <IntegralToPointer>
|       `-IntegerLiteral 0x56490e0ee860 <col:20> 'int' 1
|-CXXMethodDecl 0x56490e0df7b0 <line:68:5, line:71:5> line:68:17 assign 'void (const Timer::do_nothing_t &)' inline
| |-ParmVarDecl 0x56490e0df720 <col:24, col:44> col:44 used unused 'const Timer::do_nothing_t &'
| `-CompoundStmt 0x56490e0eea40 <col:52, line:71:5>
|   |-CStyleCastExpr 0x56490e0ee930 <line:69:2, col:9> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56490e0ee900 <col:9> 'const Timer::do_nothing_t' lvalue ParmVar 0x56490e0df720 'unused' 'const Timer::do_nothing_t &'
|   `-CXXMemberCallExpr 0x56490e0eea20 <line:70:2, col:9> 'void'
|     `-MemberExpr 0x56490e0ee9f0 <col:2> '<bound member function type>' ->assign 0x56490e0df670
|       `-CXXThisExpr 0x56490e0ee9e0 <col:2> 'Timer *' implicit this
|-CXXMethodDecl 0x56490e0df980 <line:76:5, line:79:5> line:76:17 assign 'void (TimerCallback, void *)' inline
| |-ParmVarDecl 0x56490e0df868 <col:24, col:38> col:38 used f 'TimerCallback':'void (*)(Timer *, void *)'
| |-ParmVarDecl 0x56490e0df8e8 <col:41, col:47> col:47 used user_data 'void *'
| `-CompoundStmt 0x56490e0eebc0 <col:58, line:79:5>
|   |-BinaryOperator 0x56490e0eeb08 <line:77:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56490e0eeaa0 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56490e0e2078
|   | | `-MemberExpr 0x56490e0eea70 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56490e0e2138
|   | |   `-CXXThisExpr 0x56490e0eea60 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56490e0eeaf0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' <LValueToRValue>
|   |   `-DeclRefExpr 0x56490e0eead0 <col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue ParmVar 0x56490e0df868 'f' 'TimerCallback':'void (*)(Timer *, void *)'
|   `-BinaryOperator 0x56490e0eeba0 <line:78:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56490e0eeb38 <col:2> 'void *' lvalue ->_thunk 0x56490e0e21b8
|     | `-CXXThisExpr 0x56490e0eeb28 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56490e0eeb88 <col:11> 'void *' <LValueToRValue>
|       `-DeclRefExpr 0x56490e0eeb68 <col:11> 'void *' lvalue ParmVar 0x56490e0df8e8 'user_data' 'void *'
|-CXXMethodDecl 0x56490e0dfad0 <line:84:5, line:87:5> line:84:10 assign 'void (Element *)'
| |-ParmVarDecl 0x56490e0dfa40 <col:17, col:26> col:26 used element 'Element *'
| `-CompoundStmt 0x56490e0eed58 <col:35, line:87:5>
|   |-BinaryOperator 0x56490e0eec88 <line:85:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56490e0eec20 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56490e0e2078
|   | | `-MemberExpr 0x56490e0eebf0 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56490e0e2138
|   | |   `-CXXThisExpr 0x56490e0eebe0 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56490e0eec70 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56490e0eec50 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56490e0e2770 'element_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56490e0eed38 <line:86:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56490e0eecb8 <col:2> 'void *' lvalue ->_thunk 0x56490e0e21b8
|     | `-CXXThisExpr 0x56490e0eeca8 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56490e0eed20 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56490e0eed08 <col:11> 'Element *' <LValueToRValue>
|         `-DeclRefExpr 0x56490e0eece8 <col:11> 'Element *' lvalue ParmVar 0x56490e0dfa40 'element' 'Element *'
|-CXXMethodDecl 0x56490e0dfc18 <line:91:5, line:94:5> line:91:10 assign 'void (Task *)'
| |-ParmVarDecl 0x56490e0dfb88 <col:17, col:23> col:23 used task 'Task *'
| `-CompoundStmt 0x56490e0eeef0 <col:29, line:94:5>
|   |-BinaryOperator 0x56490e0eee20 <line:92:2, col:19> 'TimerCallback':'void (*)(Timer *, void *)' lvalue '='
|   | |-MemberExpr 0x56490e0eedb8 <col:2, col:8> 'TimerCallback':'void (*)(Timer *, void *)' lvalue .callback 0x56490e0e2078
|   | | `-MemberExpr 0x56490e0eed88 <col:2> 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)' lvalue ->_hook 0x56490e0e2138
|   | |   `-CXXThisExpr 0x56490e0eed78 <col:2> 'Timer *' implicit this
|   | `-ImplicitCastExpr 0x56490e0eee08 <col:19> 'void (*)(Timer *, void *)' <FunctionToPointerDecay>
|   |   `-DeclRefExpr 0x56490e0eede8 <col:19> 'void (Timer *, void *)' lvalue CXXMethod 0x56490e0ee348 'task_hook' 'void (Timer *, void *)'
|   `-BinaryOperator 0x56490e0eeed0 <line:93:2, col:11> 'void *' lvalue '='
|     |-MemberExpr 0x56490e0eee50 <col:2> 'void *' lvalue ->_thunk 0x56490e0e21b8
|     | `-CXXThisExpr 0x56490e0eee40 <col:2> 'Timer *' implicit this
|     `-ImplicitCastExpr 0x56490e0eeeb8 <col:11> 'void *' <BitCast>
|       `-ImplicitCastExpr 0x56490e0eeea0 <col:11> 'Task *' <LValueToRValue>
|         `-DeclRefExpr 0x56490e0eee80 <col:11> 'Task *' lvalue ParmVar 0x56490e0dfb88 'task' 'Task *'
|-CXXMethodDecl 0x56490e0dfd08 <line:98:5, line:100:5> line:98:17 initialized 'bool () const' inline
| `-CompoundStmt 0x56490e0eefd0 <col:37, line:100:5>
|   `-ReturnStmt 0x56490e0eefc0 <line:99:2, col:19>
|     `-BinaryOperator 0x56490e0eefa0 <col:9, col:19> 'bool' '!='
|       |-ImplicitCastExpr 0x56490e0eef70 <col:9> 'Element *' <LValueToRValue>
|       | `-MemberExpr 0x56490e0eef20 <col:9> 'Element *const' lvalue ->_owner 0x56490e0e2218
|       |   `-CXXThisExpr 0x56490e0eef10 <col:9> 'const Timer *' implicit this
|       `-ImplicitCastExpr 0x56490e0eef88 <col:19> 'Element *' <NullToPointer>
|         `-IntegerLiteral 0x56490e0eef50 <col:19> 'int' 0
|-CXXMethodDecl 0x56490e0dfdc8 <line:103:5, line:105:5> line:103:17 used scheduled 'bool () const' inline
| `-CompoundStmt 0x56490e0ef090 <col:35, line:105:5>
|   `-ReturnStmt 0x56490e0ef080 <line:104:2, col:23>
|     `-BinaryOperator 0x56490e0ef060 <col:9, col:23> 'bool' '!='
|       |-ImplicitCastExpr 0x56490e0ef048 <col:9> 'int' <LValueToRValue>
|       | `-MemberExpr 0x56490e0eeff8 <col:9> 'const int' lvalue ->_schedpos1 0x56490e0e1e98
|       |   `-CXXThisExpr 0x56490e0eefe8 <col:9> 'const Timer *' implicit this
|       `-IntegerLiteral 0x56490e0ef028 <col:23> 'int' 0
|-CXXMethodDecl 0x56490e0dfe88 <line:116:5, line:118:5> line:116:29 used expiry_steady 'const Timestamp &() const' inline
| `-CompoundStmt 0x56490e0ef0f8 <col:51, line:118:5>
|   `-ReturnStmt 0x56490e0ef0e8 <line:117:2, col:9>
|     `-MemberExpr 0x56490e0ef0b8 <col:9> 'const Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|       `-CXXThisExpr 0x56490e0ef0a8 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56490e0dff48 <line:131:5, line:136:5> line:131:22 expiry 'Timestamp () const' inline
| `-CompoundStmt 0x56490e0ef650 <col:37, line:136:5>
|   `-IfStmt 0x56490e0ef628 <line:132:2, line:135:13> has_else
|     |-ImplicitCastExpr 0x56490e0ef1b8 <line:132:6> 'bool' <MemberPointerToBoolean>
|     | `-ImplicitCastExpr 0x56490e0ef1a0 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const' <UserDefinedConversion>
|     |   `-CXXMemberCallExpr 0x56490e0ef180 <col:6> 'Timestamp::unspecified_bool_type':'Timestamp::seconds_type (Timestamp::*)() const'
|     |     `-MemberExpr 0x56490e0ef150 <col:6> '<bound member function type>' .operator int (Timestamp::*)() const 0x56490deaa518
|     |       `-MemberExpr 0x56490e0ef120 <col:6> 'const Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|     |         `-CXXThisExpr 0x56490e0ef110 <col:6> 'const Timer *' implicit this
|     |-ReturnStmt 0x56490e0ef598 <line:133:6, col:72>
|     | `-ExprWithCleanups 0x56490e0ef580 <col:13, col:72> 'Timestamp'
|     |   `-CXXConstructExpr 0x56490e0ef550 <col:13, col:72> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |     `-MaterializeTemporaryExpr 0x56490e0ef538 <col:13, col:72> 'Timestamp' xvalue
|     |       `-CXXOperatorCallExpr 0x56490e0ef500 <col:13, col:72> 'Timestamp'
|     |         |-ImplicitCastExpr 0x56490e0ef4e8 <col:45> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         | `-DeclRefExpr 0x56490e0ef4c8 <col:45> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56490dfe6310 'operator-' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |-CXXConstructExpr 0x56490e0ef468 <col:13, col:43> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|     |         | `-MaterializeTemporaryExpr 0x56490e0ef450 <col:13, col:43> 'Timestamp' xvalue
|     |         |   `-CXXOperatorCallExpr 0x56490e0ef378 <col:13, col:43> 'Timestamp'
|     |         |     |-ImplicitCastExpr 0x56490e0ef360 <col:23> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|     |         |     | `-DeclRefExpr 0x56490e0ef340 <col:23> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56490dfe5fc8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|     |         |     |-CXXConstructExpr 0x56490e0ef2e0 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|     |         |     | `-MemberExpr 0x56490e0ef1e0 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|     |         |     |   `-CXXThisExpr 0x56490e0ef1d0 <col:13> 'const Timer *' implicit this
|     |         |     `-MaterializeTemporaryExpr 0x56490e0ef328 <col:25, col:43> 'const Timestamp' lvalue
|     |         |       `-ImplicitCastExpr 0x56490e0ef310 <col:25, col:43> 'const Timestamp' <NoOp>
|     |         |         `-CallExpr 0x56490e0ef2c0 <col:25, col:43> 'Timestamp'
|     |         |           `-ImplicitCastExpr 0x56490e0ef2a8 <col:25, col:36> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |         |             `-DeclRefExpr 0x56490e0ef248 <col:25, col:36> 'Timestamp ()' lvalue CXXMethod 0x56490de3a080 'recent' 'Timestamp ()'
|     |         `-MaterializeTemporaryExpr 0x56490e0ef4b0 <col:47, col:72> 'const Timestamp' lvalue
|     |           `-ImplicitCastExpr 0x56490e0ef498 <col:47, col:72> 'const Timestamp' <NoOp>
|     |             `-CallExpr 0x56490e0ef430 <col:47, col:72> 'Timestamp'
|     |               `-ImplicitCastExpr 0x56490e0ef418 <col:47, col:58> 'Timestamp (*)()' <FunctionToPointerDecay>
|     |                 `-DeclRefExpr 0x56490e0ef3e8 <col:47, col:58> 'Timestamp ()' lvalue CXXMethod 0x56490de3ad50 'recent_steady' 'Timestamp ()'
|     `-ReturnStmt 0x56490e0ef618 <line:135:6, col:13>
|       `-CXXConstructExpr 0x56490e0ef5e8 <col:13> 'Timestamp' 'void (const Timestamp &) noexcept'
|         `-MemberExpr 0x56490e0ef5b8 <col:13> 'const Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|           `-CXXThisExpr 0x56490e0ef5a8 <col:13> 'const Timer *' implicit this
|-CXXMethodDecl 0x56490e0e0008 <line:139:5, line:141:5> line:139:20 router 'Router *() const' inline
| `-CompoundStmt 0x56490e0ef738 <col:35, line:141:5>
|   `-ReturnStmt 0x56490e0ef728 <line:140:2, col:24>
|     `-CXXMemberCallExpr 0x56490e0ef6f0 <col:9, col:24> 'Router *'
|       `-MemberExpr 0x56490e0ef6c0 <col:9, col:17> '<bound member function type>' ->router 0x56490e0cafe0
|         `-ImplicitCastExpr 0x56490e0ef710 <col:9> 'const Element *' <NoOp>
|           `-ImplicitCastExpr 0x56490e0ef6a8 <col:9> 'Element *' <LValueToRValue>
|             `-MemberExpr 0x56490e0ef678 <col:9> 'Element *const' lvalue ->_owner 0x56490e0e2218
|               `-CXXThisExpr 0x56490e0ef668 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56490e0e00c8 <line:144:5, line:146:5> line:144:21 element 'Element *() const' inline
| `-CompoundStmt 0x56490e0ef7b8 <col:37, line:146:5>
|   `-ReturnStmt 0x56490e0ef7a8 <line:145:2, col:9>
|     `-ImplicitCastExpr 0x56490e0ef790 <col:9> 'Element *' <LValueToRValue>
|       `-MemberExpr 0x56490e0ef760 <col:9> 'Element *const' lvalue ->_owner 0x56490e0e2218
|         `-CXXThisExpr 0x56490e0ef750 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56490e0e0188 <line:149:5, line:151:5> line:149:26 thread 'RouterThread *() const' inline
| `-CompoundStmt 0x56490e0ef838 <col:41, line:151:5>
|   `-ReturnStmt 0x56490e0ef828 <line:150:2, col:9>
|     `-ImplicitCastExpr 0x56490e0ef810 <col:9> 'RouterThread *' <LValueToRValue>
|       `-MemberExpr 0x56490e0ef7e0 <col:9> 'RouterThread *const' lvalue ->_thread 0x56490e0e2278
|         `-CXXThisExpr 0x56490e0ef7d0 <col:9> 'const Timer *' implicit this
|-CXXMethodDecl 0x56490e0e0250 <line:154:5, col:26> col:9 home_thread_id 'int () const'
|-CXXMethodDecl 0x56490e0e0410 <line:171:5, col:55> col:10 initialize 'void (Element *, bool)'
| |-ParmVarDecl 0x56490e0e0300 <col:21, col:30> col:30 owner 'Element *'
| `-ParmVarDecl 0x56490e0e0378 <col:37, col:50> col:42 quiet 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56490e0ee558 <col:50> 'bool' false
|-CXXMethodDecl 0x56490e0e0598 <line:181:5, col:35> col:10 initialize 'void (Router *)'
| `-ParmVarDecl 0x56490e0e04d0 <col:21, col:29> col:29 router 'Router *'
|-CXXMethodDecl 0x56490e0e06e0 <line:191:5, col:57> col:10 used schedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56490e0e0650 <col:29, col:46> col:46 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56490e0e0828 <line:197:5, col:59> col:10 reschedule_at_steady 'void (const Timestamp &)'
| `-ParmVarDecl 0x56490e0e0798 <col:31, col:48> col:48 when_steady 'const Timestamp &'
|-CXXMethodDecl 0x56490e0e0970 <line:210:5, col:50> col:17 used schedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56490e0e08e0 <col:29, col:46> col:46 when 'const Timestamp &'
|-CXXMethodDecl 0x56490e0e0ab8 <line:216:5, col:52> col:17 reschedule_at 'void (const Timestamp &)' inline
| `-ParmVarDecl 0x56490e0e0a28 <col:31, col:48> col:48 when 'const Timestamp &'
|-CXXMethodDecl 0x56490e0e0b80 <line:221:5, line:223:5> line:221:17 schedule_now 'void ()' inline
| `-CompoundStmt 0x56490e0ef9a0 <col:32, line:223:5>
|   `-ExprWithCleanups 0x56490e0ef988 <line:222:2, col:47> 'void'
|     `-CXXMemberCallExpr 0x56490e0ef930 <col:2, col:47> 'void'
|       |-MemberExpr 0x56490e0ef860 <col:2> '<bound member function type>' ->schedule_at_steady 0x56490e0e06e0
|       | `-CXXThisExpr 0x56490e0ef850 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0ef970 <col:21, col:46> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56490e0ef958 <col:21, col:46> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56490e0ef910 <col:21, col:46> 'Timestamp'
|             `-ImplicitCastExpr 0x56490e0ef8f8 <col:21, col:32> 'Timestamp (*)()' <FunctionToPointerDecay>
|               `-DeclRefExpr 0x56490e0ef8c8 <col:21, col:32> 'Timestamp ()' lvalue CXXMethod 0x56490de3ad50 'recent_steady' 'Timestamp ()'
|-CXXMethodDecl 0x56490e0e0cc0 <line:233:5, col:47> col:10 used schedule_after 'void (const Timestamp &)'
| `-ParmVarDecl 0x56490e0e0c30 <col:25, col:42> col:42 delta 'const Timestamp &'
|-CXXMethodDecl 0x56490e0e0e08 <line:239:5, line:241:5> line:239:17 used schedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e0d78 <col:36, col:45> col:45 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490e0efb28 <col:56, line:241:5>
|   `-ExprWithCleanups 0x56490e0efb10 <line:240:2, col:40> 'void'
|     `-CXXMemberCallExpr 0x56490e0efab8 <col:2, col:40> 'void'
|       |-MemberExpr 0x56490e0ef9c8 <col:2> '<bound member function type>' ->schedule_after 0x56490e0e0cc0
|       | `-CXXThisExpr 0x56490e0ef9b8 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0efaf8 <col:17, col:39> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56490e0efae0 <col:17, col:39> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56490e0efa78 <col:17, col:39> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-ImplicitCastExpr 0x56490e0efa48 <col:27> 'uint32_t':'unsigned int' <LValueToRValue>
|             | `-DeclRefExpr 0x56490e0efa08 <col:27> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490e0e0d78 'delta_sec' 'uint32_t':'unsigned int'
|             `-ImplicitCastExpr 0x56490e0efa60 <col:38> 'uint32_t':'unsigned int' <IntegralCast>
|               `-IntegerLiteral 0x56490e0efa28 <col:38> 'int' 0
|-CXXMethodDecl 0x56490e0e0f50 <line:247:5, line:249:5> line:247:17 used schedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e0ec0 <col:37, col:46> col:46 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490e0efd98 <col:58, line:249:5>
|   `-ExprWithCleanups 0x56490e0efd80 <line:248:2, col:49> 'void'
|     `-CXXMemberCallExpr 0x56490e0efd28 <col:2, col:49> 'void'
|       |-MemberExpr 0x56490e0efb50 <col:2> '<bound member function type>' ->schedule_after 0x56490e0e0cc0
|       | `-CXXThisExpr 0x56490e0efb40 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0efd68 <col:17, col:48> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56490e0efd50 <col:17, col:48> 'const Timestamp' <NoOp>
|           `-CallExpr 0x56490e0efcd0 <col:17, col:48> 'Timestamp'
|             |-ImplicitCastExpr 0x56490e0efcb8 <col:17, col:28> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56490e0efc28 <col:17, col:28> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56490deac308 'make_msec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56490e0efd10 <col:38> 'Timestamp::value_type':'long' <IntegralCast>
|               `-ImplicitCastExpr 0x56490e0efcf8 <col:38> 'uint32_t':'unsigned int' <LValueToRValue>
|                 `-DeclRefExpr 0x56490e0efc08 <col:38> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490e0e0ec0 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e0e1098 <line:259:5, line:261:5> line:259:17 reschedule_after 'void (const Timestamp &)' inline
| |-ParmVarDecl 0x56490e0e1008 <col:34, col:51> col:51 used delta 'const Timestamp &'
| `-CompoundStmt 0x56490e0eff78 <col:58, line:261:5>
|   `-ExprWithCleanups 0x56490e0eff60 <line:260:2, col:38> 'void'
|     `-CXXMemberCallExpr 0x56490e0eff08 <col:2, col:38> 'void'
|       |-MemberExpr 0x56490e0efdc0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56490e0e06e0
|       | `-CXXThisExpr 0x56490e0efdb0 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0eff48 <col:21, col:33> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56490e0eff30 <col:21, col:33> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56490e0efed0 <col:21, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56490e0efeb8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56490e0efe98 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56490dfe5fc8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56490e0efe68 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56490e0efe50 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56490e0efe00 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|             |     `-CXXThisExpr 0x56490e0efdf0 <col:21> 'Timer *' implicit this
|             `-DeclRefExpr 0x56490e0efe30 <col:33> 'const Timestamp' lvalue ParmVar 0x56490e0e1008 'delta' 'const Timestamp &'
|-CXXMethodDecl 0x56490e0e11e0 <line:268:5, line:270:5> line:268:17 used reschedule_after_sec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e1150 <col:38, col:47> col:47 used delta_sec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490e0f0250 <col:58, line:270:5>
|   `-ExprWithCleanups 0x56490e0f0238 <line:269:2, col:79> 'void'
|     `-CXXMemberCallExpr 0x56490e0f01e0 <col:2, col:79> 'void'
|       |-MemberExpr 0x56490e0effa0 <col:2> '<bound member function type>' ->schedule_at_steady 0x56490e0e06e0
|       | `-CXXThisExpr 0x56490e0eff90 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0f0220 <col:21, col:78> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56490e0f0208 <col:21, col:78> 'const Timestamp' <NoOp>
|           `-CXXTemporaryObjectExpr 0x56490e0f01a0 <col:21, col:78> 'Timestamp' 'void (unsigned int, uint32_t)'
|             |-BinaryOperator 0x56490e0f00d8 <col:31, col:49> 'unsigned int' '+'
|             | |-ImplicitCastExpr 0x56490e0f00c0 <col:31, col:45> 'unsigned int' <IntegralCast>
|             | | `-CXXMemberCallExpr 0x56490e0f0050 <col:31, col:45> 'Timestamp::seconds_type':'int'
|             | |   `-MemberExpr 0x56490e0f0020 <col:31, col:41> '<bound member function type>' .sec 0x56490de3c848
|             | |     `-ImplicitCastExpr 0x56490e0f0070 <col:31> 'const Timestamp' lvalue <NoOp>
|             | |       `-MemberExpr 0x56490e0efff0 <col:31> 'Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|             | |         `-CXXThisExpr 0x56490e0effe0 <col:31> 'Timer *' implicit this
|             | `-ImplicitCastExpr 0x56490e0f00a8 <col:49> 'uint32_t':'unsigned int' <LValueToRValue>
|             |   `-DeclRefExpr 0x56490e0f0088 <col:49> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490e0e1150 'delta_sec' 'uint32_t':'unsigned int'
|             `-CXXMemberCallExpr 0x56490e0f0168 <col:60, col:77> 'uint32_t':'unsigned int'
|               `-MemberExpr 0x56490e0f0138 <col:60, col:70> '<bound member function type>' .subsec 0x56490de3cf40
|                 `-ImplicitCastExpr 0x56490e0f0188 <col:60> 'const Timestamp' lvalue <NoOp>
|                   `-MemberExpr 0x56490e0f0108 <col:60> 'Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|                     `-CXXThisExpr 0x56490e0f00f8 <col:60> 'Timer *' implicit this
|-CXXMethodDecl 0x56490e0e1328 <line:277:5, line:279:5> line:277:17 used reschedule_after_msec 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e1298 <col:39, col:48> col:48 used delta_msec 'uint32_t':'unsigned int'
| `-CompoundStmt 0x56490e0f0588 <col:60, line:279:5>
|   `-ExprWithCleanups 0x56490e0f0570 <line:278:2, col:65> 'void'
|     `-CXXMemberCallExpr 0x56490e0f0518 <col:2, col:65> 'void'
|       |-MemberExpr 0x56490e0f0278 <col:2> '<bound member function type>' ->schedule_at_steady 0x56490e0e06e0
|       | `-CXXThisExpr 0x56490e0f0268 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0f0558 <col:21, col:64> 'const Timestamp' lvalue
|         `-ImplicitCastExpr 0x56490e0f0540 <col:21, col:64> 'const Timestamp' <NoOp>
|           `-CXXOperatorCallExpr 0x56490e0f04e0 <col:21, col:64> 'Timestamp'
|             |-ImplicitCastExpr 0x56490e0f04c8 <col:31> 'Timestamp (*)(Timestamp, const Timestamp &)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56490e0f04a8 <col:31> 'Timestamp (Timestamp, const Timestamp &)' lvalue Function 0x56490dfe5fc8 'operator+' 'Timestamp (Timestamp, const Timestamp &)'
|             |-CXXConstructExpr 0x56490e0f0448 <col:21> 'Timestamp' 'void (const Timestamp &) noexcept'
|             | `-ImplicitCastExpr 0x56490e0f0430 <col:21> 'const Timestamp' lvalue <NoOp>
|             |   `-MemberExpr 0x56490e0f02b8 <col:21> 'Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|             |     `-CXXThisExpr 0x56490e0f02a8 <col:21> 'Timer *' implicit this
|             `-MaterializeTemporaryExpr 0x56490e0f0490 <col:33, col:64> 'const Timestamp' lvalue
|               `-ImplicitCastExpr 0x56490e0f0478 <col:33, col:64> 'const Timestamp' <NoOp>
|                 `-CallExpr 0x56490e0f03d8 <col:33, col:64> 'Timestamp'
|                   |-ImplicitCastExpr 0x56490e0f03c0 <col:33, col:44> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|                   | `-DeclRefExpr 0x56490e0f0390 <col:33, col:44> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56490deac308 'make_msec' 'Timestamp (Timestamp::value_type)'
|                   `-ImplicitCastExpr 0x56490e0f0418 <col:54> 'Timestamp::value_type':'long' <IntegralCast>
|                     `-ImplicitCastExpr 0x56490e0f0400 <col:54> 'uint32_t':'unsigned int' <LValueToRValue>
|                       `-DeclRefExpr 0x56490e0f0370 <col:54> 'uint32_t':'unsigned int' lvalue ParmVar 0x56490e0e1298 'delta_msec' 'uint32_t':'unsigned int'
|-CXXMethodDecl 0x56490e0e13f0 <line:285:5, col:21> col:10 used unschedule 'void ()'
|-CXXMethodDecl 0x56490e0e14b0 <line:288:5, line:291:5> line:288:17 clear 'void ()' inline
| `-CompoundStmt 0x56490e0f0a50 <col:25, line:291:5>
|   |-CXXMemberCallExpr 0x56490e0f05e0 <line:289:2, col:13> 'void'
|   | `-MemberExpr 0x56490e0f05b0 <col:2> '<bound member function type>' ->unschedule 0x56490e0e13f0
|   |   `-CXXThisExpr 0x56490e0f05a0 <col:2> 'Timer *' implicit this
|   `-ExprWithCleanups 0x56490e0f0a38 <line:290:2, col:24> 'Timestamp' lvalue
|     `-CXXOperatorCallExpr 0x56490e0f0a00 <col:2, col:24> 'Timestamp' lvalue
|       |-ImplicitCastExpr 0x56490e0f09e8 <col:12> 'Timestamp &(*)(Timestamp &&) noexcept' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490e0f0698 <col:12> 'Timestamp &(Timestamp &&) noexcept' lvalue CXXMethod 0x56490e094f88 'operator=' 'Timestamp &(Timestamp &&) noexcept'
|       |-MemberExpr 0x56490e0f0610 <col:2> 'Timestamp' lvalue ->_expiry_s 0x56490e0e1ef8
|       | `-CXXThisExpr 0x56490e0f0600 <col:2> 'Timer *' implicit this
|       `-MaterializeTemporaryExpr 0x56490e0f0680 <col:14, col:24> 'Timestamp' xvalue
|         `-CXXTemporaryObjectExpr 0x56490e0f0650 <col:14, col:24> 'Timestamp' 'void ()'
|-CXXMethodDecl 0x56490e0e1570 <line:304:5, line:310:5> line:304:29 used adjustment 'Timestamp ()' static inline
| `-CompoundStmt 0x56490e0f0da8 <col:42, line:310:5>
|   |-IfStmt 0x56490e0f0bf0 <line:306:2, line:307:23>
|   | |-CallExpr 0x56490e0f0b20 <line:306:6, col:30> 'bool'
|   | | `-ImplicitCastExpr 0x56490e0f0b08 <col:6, col:17> 'bool (*)()' <FunctionToPointerDecay>
|   | |   `-DeclRefExpr 0x56490e0f0aa8 <col:6, col:17> 'bool ()' lvalue CXXMethod 0x56490dfd7af0 'warp_jumping' 'bool ()'
|   | `-ReturnStmt 0x56490e0f0be0 <line:307:6, col:23>
|   |   `-ExprWithCleanups 0x56490e0f0bc8 <col:13, col:23> 'Timestamp'
|   |     `-CXXConstructExpr 0x56490e0f0b98 <col:13, col:23> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|   |       `-MaterializeTemporaryExpr 0x56490e0f0b80 <col:13, col:23> 'Timestamp' xvalue
|   |         `-CXXTemporaryObjectExpr 0x56490e0f0b50 <col:13, col:23> 'Timestamp' 'void ()'
|   `-ReturnStmt 0x56490e0f0d98 <line:309:2, col:33>
|     `-ExprWithCleanups 0x56490e0f0d80 <col:9, col:33> 'Timestamp'
|       `-CXXConstructExpr 0x56490e0f0d50 <col:9, col:33> 'Timestamp' 'void (Timestamp &&) noexcept' elidable
|         `-MaterializeTemporaryExpr 0x56490e0f0d38 <col:9, col:33> 'Timestamp' xvalue
|           `-CallExpr 0x56490e0f0cf8 <col:9, col:33> 'Timestamp'
|             |-ImplicitCastExpr 0x56490e0f0ce0 <col:9, col:20> 'Timestamp (*)(Timestamp::value_type)' <FunctionToPointerDecay>
|             | `-DeclRefExpr 0x56490e0f0cb0 <col:9, col:20> 'Timestamp (Timestamp::value_type)' lvalue CXXMethod 0x56490deac620 'make_usec' 'Timestamp (Timestamp::value_type)'
|             `-ImplicitCastExpr 0x56490e0f0d20 <col:30> 'Timestamp::value_type':'long' <IntegralCast>
|               `-IntegerLiteral 0x56490e0f0c90 <col:30> 'int' 500
|-CXXMethodDecl 0x56490e0e16b0 <line:317:5, col:80> col:17 schedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e1620 <col:34, col:43> col:43 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490e0e1758 <col:69> "" ""
|-CXXMethodDecl 0x56490e0e1868 <line:323:5, col:81> col:17 schedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e17d8 <col:35, col:44> col:44 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490e0e1910 <col:70> "" ""
|-CXXMethodDecl 0x56490e0e1a20 <line:329:5, col:82> col:17 reschedule_after_s 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e1990 <col:36, col:45> col:45 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490e0e1ac8 <col:71> "" ""
|-CXXMethodDecl 0x56490e0e1bd8 <line:335:5, col:83> col:17 reschedule_after_ms 'void (uint32_t)' inline
| |-ParmVarDecl 0x56490e0e1b48 <col:37, col:46> col:46 delta_sec 'uint32_t':'unsigned int'
| `-DeprecatedAttr 0x56490e0e1c80 <col:72> "" ""
|-EnumDecl 0x56490e0e1cf0 <line:337:5, col:27> col:5
| `-EnumConstantDecl 0x56490e0e1df0 <col:12, col:25> col:12 behind_sec 'Timer::(anonymous enum at ../dummy_inc/click/timer.hh:337:5)'
|   `-ImplicitCastExpr 0x56490e0e1e40 <col:25> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e0e1dd0 <col:25> 'int' Int: 1
|       `-IntegerLiteral 0x56490e0e1db0 <col:25> 'int' 1
|-AccessSpecDecl 0x56490e0e1e58 <line:339:3, col:10> col:3 private
|-FieldDecl 0x56490e0e1e98 <line:341:5, col:9> col:9 referenced _schedpos1 'int'
|-FieldDecl 0x56490e0e1ef8 <line:342:5, col:15> col:15 referenced _expiry_s 'Timestamp'
|-CXXRecordDecl 0x56490e0e1f48 <line:343:5, line:345:5> line:343:5 union definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-FieldDecl 0x56490e0e2078 <line:344:2, col:16> col:16 referenced callback 'TimerCallback':'void (*)(Timer *, void *)'
| `-CXXDestructorDecl 0x56490e0ee568 <line:343:5> col:5 implicit ~ 'void () noexcept' inline default trivial
|-FieldDecl 0x56490e0e2138 <col:5, line:345:7> col:7 referenced _hook 'union (anonymous union at ../dummy_inc/click/timer.hh:343:5)':'Timer::(anonymous union at ../dummy_inc/click/timer.hh:343:5)'
|-FieldDecl 0x56490e0e21b8 <line:346:5, col:11> col:11 referenced _thunk 'void *'
|-FieldDecl 0x56490e0e2218 <line:347:5, col:14> col:14 referenced _owner 'Element *'
|-FieldDecl 0x56490e0e2278 <line:348:5, col:19> col:19 referenced _thread 'RouterThread *'
|-CXXMethodDecl 0x56490e0e23c8 <line:350:5, col:36> col:12 operator= 'Timer &(const Timer &)'
| `-ParmVarDecl 0x56490e0e22d8 <col:22, col:35> col:35 x 'const Timer &'
|-CXXMethodDecl 0x56490e0e2598 <line:352:5, col:58> col:17 used do_nothing_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56490e0e2480 <col:33, col:40> col:40 t 'Timer *'
| `-ParmVarDecl 0x56490e0e2500 <col:43, col:49> col:49 user_data 'void *'
|-CXXMethodDecl 0x56490e0e2770 <line:353:5, col:55> col:17 used element_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56490e0e2658 <col:30, col:37> col:37 t 'Timer *'
| `-ParmVarDecl 0x56490e0e26d8 <col:40, col:46> col:46 user_data 'void *'
|-CXXMethodDecl 0x56490e0ee348 <line:354:5, col:52> col:17 used task_hook 'void (Timer *, void *)' static
| |-ParmVarDecl 0x56490e0ee230 <col:27, col:34> col:34 t 'Timer *'
| `-ParmVarDecl 0x56490e0ee2b0 <col:37, col:43> col:43 user_data 'void *'
`-FriendDecl 0x56490e0ee518 <line:356:5, col:18> col:12 'class TimerSet':'TimerSet'

Layout: <CGRecordLayout
  LLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  NonVirtualBaseLLVMType:%class.Timer = type { i32, %class.Timestamp, %union.anon, i8*, %class.Element*, %class.RouterThread* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct NotifierSignal::vmpair
         0 |   class atomic_uint32_t * value
         8 |   uint32_t mask
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e1622e8 <../dummy_inc/click/notifier.hh:50:5, line:53:5> line:50:12 referenced struct vmpair definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e162408 <col:5, col:12> col:12 implicit struct vmpair
|-FieldDecl 0x56490e1624a8 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
|-FieldDecl 0x56490e162508 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
`-CXXDestructorDecl 0x56490e16d208 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x56490e16d208

Layout: <CGRecordLayout
  LLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  NonVirtualBaseLLVMType:%"struct.NotifierSignal::vmpair" = type { %class.atomic_uint32_t*, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e162570 <../dummy_inc/click/notifier.hh:54:5, line:57:5> line:54:11 referenced union vmvalue definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e162688 <col:5, col:11> col:11 implicit union vmvalue
|-FieldDecl 0x56490e162728 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
|-FieldDecl 0x56490e1627b8 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
|-CXXConstructorDecl 0x56490e16bda0 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490e16c1d8 <col:11>
|-CXXConstructorDecl 0x56490e16bea8 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x56490e16bea8
| `-ParmVarDecl 0x56490e16bfb8 <col:11> col:11 'const NotifierSignal::vmvalue &'
|-CXXConstructorDecl 0x56490e16c058 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x56490e16c058
| `-ParmVarDecl 0x56490e16c168 <col:11> col:11 'NotifierSignal::vmvalue &&'
`-CXXDestructorDecl 0x56490e16ced0 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%"union.NotifierSignal::vmvalue" = type { %class.atomic_uint32_t* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e160220 prev 0x56490e0b9c80 <../dummy_inc/click/notifier.hh:12:1, line:71:1> line:12:7 referenced class NotifierSignal definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param user_declared implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e160318 <col:1, col:7> col:7 implicit referenced class NotifierSignal
|-AccessSpecDecl 0x56490e1603a8 <line:13:3, col:9> col:3 public
|-TypedefDecl 0x56490e1604d8 <line:14:5, col:61> col:36 referenced unspecified_bool_type 'bool (NotifierSignal::*)() const'
| `-MemberPointerType 0x56490e160450 'bool (NotifierSignal::*)() const'
|   |-RecordType 0x56490e0b9d10 'NotifierSignal'
|   | `-CXXRecord 0x56490e160220 'NotifierSignal'
|   `-ParenType 0x56490e1603f0 'bool () const' sugar
|     `-FunctionProtoType 0x56490db3abc0 'bool () const' const cdecl
|       `-BuiltinType 0x56490da8f2f0 'bool'
|-CXXConstructorDecl 0x56490e160568 <line:16:5, col:27> col:12 used NotifierSignal 'void ()' inline
|-CXXConstructorDecl 0x56490e1607a8 <line:17:5, col:64> col:12 used NotifierSignal 'void (atomic_uint32_t *, uint32_t)' inline
| |-ParmVarDecl 0x56490e160620 <col:27, col:44> col:44 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x56490e160698 <col:51, col:60> col:60 mask 'uint32_t':'unsigned int'
|-CXXConstructorDecl 0x56490e160958 <line:18:5, col:50> col:12 used NotifierSignal 'void (const NotifierSignal &)' inline
| `-ParmVarDecl 0x56490e160898 <col:27, col:49> col:49 x 'const NotifierSignal &'
|-CXXDestructorDecl 0x56490e160a50 <line:19:5, col:28> col:12 used ~NotifierSignal 'void () noexcept' inline
|-CXXMethodDecl 0x56490e160b78 <line:21:5, col:46> col:34 idle_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56490e160c38 <line:22:5, col:46> col:34 busy_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56490e160cf8 <line:23:5, col:53> col:34 overderived_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56490e160db8 <line:24:5, col:55> col:34 used uninitialized_signal 'NotifierSignal ()' static inline
|-CXXMethodDecl 0x56490e160ea8 <line:26:5, col:26> col:17 used active 'bool () const' inline
|-CXXConversionDecl 0x56490e161018 <line:27:5, col:45> col:12 operator bool (NotifierSignal::*)() const 'NotifierSignal::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56490e161198 <line:29:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x56490e1610d8 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x56490e161260 <line:31:5, col:24> col:17 idle 'bool () const' inline
|-CXXMethodDecl 0x56490e161320 <line:32:5, col:24> col:17 busy 'bool () const' inline
|-CXXMethodDecl 0x56490e1613e0 <line:33:5, col:31> col:17 overderived 'bool () const' inline
|-CXXMethodDecl 0x56490e1614a0 <line:34:5, col:31> col:17 used initialized 'bool () const' inline
|-FriendDecl 0x56490e161758 <line:36:5, col:76> col:17
| `-FunctionDecl 0x56490e161698 parent 0x56490da8f278 <col:5, col:76> col:17 used operator== 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x56490e161550 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x56490e1615c8 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-FriendDecl 0x56490e161978 <line:37:5, col:76> col:17
| `-FunctionDecl 0x56490e1618b8 parent 0x56490da8f278 <col:5, col:76> col:17 operator!= 'bool (const NotifierSignal &, const NotifierSignal &)'
|   |-ParmVarDecl 0x56490e1617a8 <col:28, col:50> col:50 a 'const NotifierSignal &'
|   `-ParmVarDecl 0x56490e161820 <col:53, col:75> col:75 b 'const NotifierSignal &'
|-CXXMethodDecl 0x56490e161ab8 <line:39:5, col:54> col:21 operator= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x56490e1619c8 <col:31, col:53> col:53 x 'const NotifierSignal &'
|-CXXMethodDecl 0x56490e161c00 <line:40:5, col:55> col:21 used operator+= 'NotifierSignal &(const NotifierSignal &)'
| `-ParmVarDecl 0x56490e161b70 <col:32, col:54> col:54 x 'const NotifierSignal &'
|-FriendDecl 0x56490e161ec8 <line:41:5, col:78> col:27
| `-FunctionDecl 0x56490e161e08 parent 0x56490da8f278 <col:5, col:78> col:27 operator+ 'NotifierSignal (NotifierSignal, const NotifierSignal &)'
|   |-ParmVarDecl 0x56490e161cb8 <col:37, col:52> col:52 a 'NotifierSignal' destroyed
|   `-ParmVarDecl 0x56490e161d30 <col:55, col:77> col:77 b 'const NotifierSignal &'
|-CXXMethodDecl 0x56490e161fd8 <line:43:5, col:39> col:17 used swap 'void (NotifierSignal &)' inline
| `-ParmVarDecl 0x56490e161f18 <col:22, col:38> col:38 x 'NotifierSignal &'
|-CXXMethodDecl 0x56490e162158 <line:45:5, col:36> col:12 unparse 'String (Router *) const'
| `-ParmVarDecl 0x56490e162090 <col:20, col:28> col:28 router 'Router *'
|-CXXMethodDecl 0x56490e162220 <line:47:5, col:35> col:17 static_initialize 'void ()' static
|-AccessSpecDecl 0x56490e1622c0 <line:49:3, col:10> col:3 private
|-CXXRecordDecl 0x56490e1622e8 <line:50:5, line:53:5> line:50:12 referenced struct vmpair definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e162408 <col:5, col:12> col:12 implicit struct vmpair
| |-FieldDecl 0x56490e1624a8 <line:51:2, col:19> col:19 referenced value 'atomic_uint32_t *'
| |-FieldDecl 0x56490e162508 <line:52:2, col:11> col:11 referenced mask 'uint32_t':'unsigned int'
| `-CXXDestructorDecl 0x56490e16d208 <line:50:12> col:12 implicit ~vmpair 'void ()' inline default trivial noexcept-unevaluated 0x56490e16d208
|-CXXRecordDecl 0x56490e162570 <line:54:5, line:57:5> line:54:11 referenced union vmvalue definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490e162688 <col:5, col:11> col:11 implicit union vmvalue
| |-FieldDecl 0x56490e162728 <line:55:2, col:19> col:19 referenced v1 'atomic_uint32_t *'
| |-FieldDecl 0x56490e1627b8 <line:56:2, col:10> col:10 referenced vm 'NotifierSignal::vmpair *'
| |-CXXConstructorDecl 0x56490e16bda0 <line:54:11> col:11 implicit used vmvalue 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56490e16c1d8 <col:11>
| |-CXXConstructorDecl 0x56490e16bea8 <col:11> col:11 implicit constexpr vmvalue 'void (const NotifierSignal::vmvalue &)' inline default trivial noexcept-unevaluated 0x56490e16bea8
| | `-ParmVarDecl 0x56490e16bfb8 <col:11> col:11 'const NotifierSignal::vmvalue &'
| |-CXXConstructorDecl 0x56490e16c058 <col:11> col:11 implicit constexpr vmvalue 'void (NotifierSignal::vmvalue &&)' inline default trivial noexcept-unevaluated 0x56490e16c058
| | `-ParmVarDecl 0x56490e16c168 <col:11> col:11 'NotifierSignal::vmvalue &&'
| `-CXXDestructorDecl 0x56490e16ced0 <col:11> col:11 implicit ~vmvalue 'void () noexcept' inline default trivial
|-FieldDecl 0x56490e162830 <line:59:5, col:13> col:13 referenced _v 'NotifierSignal::vmvalue'
|-FieldDecl 0x56490e162890 <line:60:5, col:14> col:14 referenced _mask 'uint32_t':'unsigned int'
|-EnumDecl 0x56490e1628e0 <line:62:5, line:65:5> line:62:5
| |-EnumConstantDecl 0x56490e1629e0 <line:63:2, col:14> col:2 referenced true_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x56490e162be0 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e1629c0 <col:14> 'int' Int: 1
| |     `-IntegerLiteral 0x56490e1629a0 <col:14> 'int' 1
| |-EnumConstantDecl 0x56490e162a70 <col:17, col:30> col:17 referenced false_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x56490e162bf8 <col:30> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e162a50 <col:30> 'int' Int: 2
| |     `-IntegerLiteral 0x56490e162a30 <col:30> 'int' 2
| |-EnumConstantDecl 0x56490e162b00 <col:33, col:52> col:33 referenced overderived_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
| | `-ImplicitCastExpr 0x56490e162c10 <col:52> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e162ae0 <col:52> 'int' Int: 4
| |     `-IntegerLiteral 0x56490e162ac0 <col:52> 'int' 4
| `-EnumConstantDecl 0x56490e162b90 <line:64:2, col:23> col:2 referenced uninitialized_mask 'NotifierSignal::(anonymous enum at ../dummy_inc/click/notifier.hh:62:5)'
|   `-ImplicitCastExpr 0x56490e162c28 <col:23> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e162b70 <col:23> 'int' Int: 8
|       `-IntegerLiteral 0x56490e162b50 <col:23> 'int' 8
|-VarDecl 0x56490e162c50 <line:66:5, col:28> col:28 used static_value 'atomic_uint32_t' static
|-CXXMethodDecl 0x56490e162d58 <line:68:5, col:48> col:10 used hard_assign_vm 'void (const NotifierSignal &)'
| `-ParmVarDecl 0x56490e162cc8 <col:25, col:47> col:47 x 'const NotifierSignal &'
|-CXXMethodDecl 0x56490e162f20 <line:69:5, col:63> col:10 hard_derive_one 'void (atomic_uint32_t *, uint32_t)'
| |-ParmVarDecl 0x56490e162e10 <col:26, col:43> col:43 value 'atomic_uint32_t *'
| `-ParmVarDecl 0x56490e162e88 <col:50, col:59> col:59 mask 'uint32_t':'unsigned int'
`-CXXMethodDecl 0x56490e163158 <line:70:5, col:61> col:17 used hard_equals 'bool (const NotifierSignal::vmpair *, const NotifierSignal::vmpair *)' static
  |-ParmVarDecl 0x56490e163008 <col:29, col:43> col:43 a 'const NotifierSignal::vmpair *'
  `-ParmVarDecl 0x56490e163080 <col:46, col:60> col:60 b 'const NotifierSignal::vmpair *'

Layout: <CGRecordLayout
  LLVMType:%class.NotifierSignal = type <{ %"union.NotifierSignal::vmvalue", i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.NotifierSignal.base = type <{ %"union.NotifierSignal::vmvalue", i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e18f2c0 <../elements/standard/linkunqueue.hh:59:1, line:91:1> line:59:7 class LinkUnqueue definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists non_trivial needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-public 'Element'
|-public 'Storage'
|-CXXRecordDecl 0x56490e18f458 <col:1, col:7> col:7 implicit referenced class LinkUnqueue
|-AccessSpecDecl 0x56490e18f4e8 <col:54, col:60> col:54 public
|-CXXConstructorDecl 0x56490e18f570 <line:61:5, col:17> col:5 LinkUnqueue 'void ()'
|-CXXMethodDecl 0x56490e18f670 <line:63:5, col:60> col:17 class_name 'const char *() const'
| |-Overrides: [ 0x56490e0bb698 Element::class_name 'const char *() const' ]
| `-CompoundStmt 0x56490e191430 <col:36, col:60>
|   `-ReturnStmt 0x56490e191420 <col:38, col:45>
|     `-ImplicitCastExpr 0x56490e191408 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-StringLiteral 0x56490e1913e0 <col:45> 'const char [12]' lvalue "LinkUnqueue"
|-CXXMethodDecl 0x56490e18f738 <line:64:5, col:56> col:17 port_count 'const char *() const'
| |-Overrides: [ 0x56490e0bb760 Element::port_count 'const char *() const' ]
| `-CompoundStmt 0x56490e191490 <col:36, col:56>
|   `-ReturnStmt 0x56490e191480 <col:38, col:45>
|     `-ImplicitCastExpr 0x56490e191468 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56490e191448 <col:45> 'const char []' lvalue Var 0x56490e0bb9b8 'PORTS_1_1' 'const char []'
|-CXXMethodDecl 0x56490e18f800 <line:65:5, col:59> col:17 processing 'const char *() const'
| |-Overrides: [ 0x56490e0bbad0 Element::processing 'const char *() const' ]
| `-CompoundStmt 0x56490e1914f0 <col:36, col:59>
|   `-ReturnStmt 0x56490e1914e0 <col:38, col:45>
|     `-ImplicitCastExpr 0x56490e1914c8 <col:45> 'const char *' <ArrayToPointerDecay>
|       `-DeclRefExpr 0x56490e1914a8 <col:45> 'const char []' lvalue Var 0x56490e0bbdb0 'PULL_TO_PUSH' 'const char []'
|-CXXMethodDecl 0x56490e18f950 <line:66:5, col:28> col:11 cast 'void *(const char *)'
| |-Overrides: [ 0x56490e0bc2f0 Element::cast 'void *(const char *)' ]
| `-ParmVarDecl 0x56490e18f8b8 <col:16, col:27> col:28 'const char *'
|-CXXMethodDecl 0x56490e18fc30 <line:68:5, col:51> col:9 configure 'int (Vector<String> &, ErrorHandler *)'
| |-Overrides: [ 0x56490e0bcd90 Element::configure 'int (Vector<String> &, ErrorHandler *)' ]
| |-ParmVarDecl 0x56490e18fae0 <col:19, col:34> col:35 'Vector<String> &'
| `-ParmVarDecl 0x56490e18fb58 <col:37, col:50> col:51 'ErrorHandler *'
|-CXXMethodDecl 0x56490e18fd88 <line:69:5, col:34> col:9 initialize 'int (ErrorHandler *)'
| |-Overrides: [ 0x56490e0bcfe0 Element::initialize 'int (ErrorHandler *)' ]
| `-ParmVarDecl 0x56490e18fcf0 <col:20, col:33> col:34 'ErrorHandler *'
|-CXXMethodDecl 0x56490e18fed0 <line:70:5, col:30> col:10 cleanup 'void (Element::CleanupStage)'
| |-Overrides: [ 0x56490e0bd7f8 Element::cleanup 'void (Element::CleanupStage)' ]
| `-ParmVarDecl 0x56490e18fe40 <col:18> col:30 'Element::CleanupStage'
|-CXXMethodDecl 0x56490e18ff98 <line:71:5, col:23> col:10 add_handlers 'void ()'
| `-Overrides: [ 0x56490e0bce60 Element::add_handlers 'void ()' ]
|-CXXMethodDecl 0x56490e1900d8 <line:73:5, col:25> col:10 run_task 'bool (Task *)'
| |-Overrides: [ 0x56490e0baa48 Element::run_task 'bool (Task *)' ]
| `-ParmVarDecl 0x56490e190048 <col:19, col:24> col:25 'Task *'
|-AccessSpecDecl 0x56490e190180 <line:75:3, col:10> col:3 private
|-FieldDecl 0x56490e1901b8 <line:77:5, col:13> col:13 _qhead 'Packet *'
|-FieldDecl 0x56490e190218 <line:78:5, col:13> col:13 _qtail 'Packet *'
|-FieldDecl 0x56490e190278 <line:79:5, col:15> col:15 _latency 'Timestamp'
|-FieldDecl 0x56490e1902d8 <line:81:5, col:10> col:10 _back_to_back 'bool'
|-FieldDecl 0x56490e190338 <line:82:5, col:14> col:14 _bandwidth 'uint32_t':'unsigned int'
|-FieldDecl 0x56490e190398 <line:83:5, col:10> col:10 referenced _task 'Task'
|-FieldDecl 0x56490e1903f8 <line:84:5, col:11> col:11 _timer 'Timer'
|-FieldDecl 0x56490e190458 <line:85:5, col:20> col:20 _signal 'NotifierSignal'
|-CXXMethodDecl 0x56490e190608 <line:87:5, col:58> col:10 delay_by_bandwidth 'void (Packet *, const Timestamp &) const'
| |-ParmVarDecl 0x56490e1904b8 <col:29, col:36> col:37 'Packet *'
| `-ParmVarDecl 0x56490e190530 <col:39, col:55> col:56 'const Timestamp &'
|-CXXMethodDecl 0x56490e1907e0 <line:88:5, col:47> col:19 read_param 'String (Element *, void *)' static
| |-ParmVarDecl 0x56490e1906c8 <col:30, col:38> col:39 'Element *'
| `-ParmVarDecl 0x56490e190748 <col:41, col:46> col:47 'void *'
|-CXXMethodDecl 0x56490e190ac0 <line:89:5, col:79> col:16 write_handler 'int (const String &, Element *, void *, ErrorHandler *)' static
| |-ParmVarDecl 0x56490e1908a0 <col:30, col:43> col:44 'const String &'
| |-ParmVarDecl 0x56490e190918 <col:46, col:54> col:55 'Element *'
| |-ParmVarDecl 0x56490e190998 <col:57, col:62> col:63 'void *'
| `-ParmVarDecl 0x56490e190a10 <col:65, col:78> col:79 'ErrorHandler *'
|-CXXConstructorDecl 0x56490e190ba8 <line:59:7> col:7 implicit LinkUnqueue 'void (const LinkUnqueue &)' inline default_delete noexcept-unevaluated 0x56490e190ba8
| `-ParmVarDecl 0x56490e190cb8 <col:7> col:7 'const LinkUnqueue &'
|-CXXConstructorDecl 0x56490e190d58 <col:7> col:7 implicit LinkUnqueue 'void (LinkUnqueue &&)' inline default_delete noexcept-unevaluated 0x56490e190d58
| `-ParmVarDecl 0x56490e190e68 <col:7> col:7 'LinkUnqueue &&'
|-CXXMethodDecl 0x56490e190f08 <col:7> col:7 implicit operator= 'LinkUnqueue &(const LinkUnqueue &)' inline default_delete noexcept-unevaluated 0x56490e190f08
| `-ParmVarDecl 0x56490e191018 <col:7> col:7 'const LinkUnqueue &'
|-CXXMethodDecl 0x56490e191088 <col:7> col:7 implicit operator= 'LinkUnqueue &(LinkUnqueue &&)' inline default_delete noexcept-unevaluated 0x56490e191088
| `-ParmVarDecl 0x56490e191198 <col:7> col:7 'LinkUnqueue &&'
`-CXXDestructorDecl 0x56490e191220 <col:7> col:7 implicit ~LinkUnqueue 'void ()' inline default noexcept-unevaluated 0x56490e191220
  `-Overrides: [ 0x56490e0ba268 Element::~Element 'void () noexcept' ]

Layout: <CGRecordLayout
  LLVMType:%class.LinkUnqueue = type { %class.Element.base, %class.Storage, %class.Packet*, %class.Packet*, %class.Timestamp, i8, i32, %class.Task, %class.Timer, %class.NotifierSignal }
  NonVirtualBaseLLVMType:%class.LinkUnqueue = type { %class.Element.base, %class.Storage, %class.Packet*, %class.Packet*, %class.Timestamp, i8, i32, %class.Task, %class.Timer, %class.NotifierSignal }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class vector_memory<class typed_array_memory<class String> >
         0 |   vector_memory<class typed_array_memory<class String> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<class String>
         0 |   class vector_memory<class typed_array_memory<class String> > vm_
         0 |     vector_memory<class typed_array_memory<class String> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dcd6b70 <../dummy_inc/click/string.hh:189:5, line:198:5> line:189:12 referenced struct memo_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-CXXRecordDecl 0x56490dcd8e10 <col:5, col:12> col:12 implicit struct memo_t
|-FieldDecl 0x56490dcd8eb0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
|-FieldDecl 0x56490dcd8f10 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
|-FieldDecl 0x56490dcd8f70 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
`-FieldDecl 0x56490dcd9020 <line:197:2, col:18> col:7 real_data 'char [8]'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  NonVirtualBaseLLVMType:%"struct.String::memo_t" = type { i32, i32, i32, [8 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dcd9330 <../dummy_inc/click/string.hh:204:5, line:208:5> line:204:12 referenced struct rep_t definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param implicit_has_const_param
| |-MoveAssignment exists simple trivial
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dcd9448 <col:5, col:12> col:12 implicit struct rep_t
|-FieldDecl 0x56490dcd94f0 <line:205:2, col:14> col:14 referenced data 'const char *'
|-FieldDecl 0x56490dcd9558 <line:206:2, col:6> col:6 referenced length 'int'
|-FieldDecl 0x56490dcd95e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
|-CXXConstructorDecl 0x56490dcdd820 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490dcddc58 <col:12>
|-CXXConstructorDecl 0x56490dcdd928 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490dcdda38 <col:12> col:12 used 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56490dcd94f0 'data' 'const char *'
| | `-ImplicitCastExpr 0x56490dce0910 <col:12> 'const char *' <LValueToRValue>
| |   `-MemberExpr 0x56490dce08e0 <col:12> 'const char *const' lvalue .data 0x56490dcd94f0
| |     `-DeclRefExpr 0x56490dce08c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcdda38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56490dcd9558 'length' 'int'
| | `-ImplicitCastExpr 0x56490dce09a0 <col:12> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56490dce0970 <col:12> 'const int' lvalue .length 0x56490dcd9558
| |     `-DeclRefExpr 0x56490dce0950 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcdda38 '' 'const String::rep_t &'
| |-CXXCtorInitializer Field 0x56490dcd95e8 'memo' 'String::memo_t *'
| | `-ImplicitCastExpr 0x56490dce0a30 <col:12> 'String::memo_t *' <LValueToRValue>
| |   `-MemberExpr 0x56490dce0a00 <col:12> 'String::memo_t *const' lvalue .memo 0x56490dcd95e8
| |     `-DeclRefExpr 0x56490dce09e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcdda38 '' 'const String::rep_t &'
| `-CompoundStmt 0x56490dce0a88 <col:12>
|-CXXConstructorDecl 0x56490dcddad8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56490dcddad8
| `-ParmVarDecl 0x56490dcddbe8 <col:12> col:12 'String::rep_t &&'
|-CXXDestructorDecl 0x56490dce6060 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
|-CXXMethodDecl 0x56490dcf19c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| |-ParmVarDecl 0x56490dcf1ad8 <col:12> col:12 used 'const String::rep_t &'
| `-CompoundStmt 0x56490dcf1ff0 <col:12>
|   |-BinaryOperator 0x56490dcf1e08 <col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56490dcf1dc0 <col:12> 'const char *' lvalue ->data 0x56490dcd94f0
|   | | `-CXXThisExpr 0x56490dcf1db0 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56490dcf1df0 <col:12> 'const char *' <LValueToRValue>
|   |   `-MemberExpr 0x56490dcf1d80 <col:12> 'const char *const' lvalue .data 0x56490dcd94f0
|   |     `-DeclRefExpr 0x56490dcf1d60 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcf1ad8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56490dcf1ed0 <col:12> 'int' lvalue '='
|   | |-MemberExpr 0x56490dcf1e88 <col:12> 'int' lvalue ->length 0x56490dcd9558
|   | | `-CXXThisExpr 0x56490dcf1e78 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56490dcf1eb8 <col:12> 'int' <LValueToRValue>
|   |   `-MemberExpr 0x56490dcf1e48 <col:12> 'const int' lvalue .length 0x56490dcd9558
|   |     `-DeclRefExpr 0x56490dcf1e28 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcf1ad8 '' 'const String::rep_t &'
|   |-BinaryOperator 0x56490dcf1f98 <col:12> 'String::memo_t *' lvalue '='
|   | |-MemberExpr 0x56490dcf1f50 <col:12> 'String::memo_t *' lvalue ->memo 0x56490dcd95e8
|   | | `-CXXThisExpr 0x56490dcf1f40 <col:12> 'String::rep_t *' this
|   | `-ImplicitCastExpr 0x56490dcf1f80 <col:12> 'String::memo_t *' <LValueToRValue>
|   |   `-MemberExpr 0x56490dcf1f10 <col:12> 'String::memo_t *const' lvalue .memo 0x56490dcd95e8
|   |     `-DeclRefExpr 0x56490dcf1ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcf1ad8 '' 'const String::rep_t &'
|   `-ReturnStmt 0x56490dcf1fe0 <col:12>
|     `-UnaryOperator 0x56490dcf1fc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490dcf1fb8 <col:12> 'String::rep_t *' this
`-CXXMethodDecl 0x56490dcf1b48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56490dcf1b48
  `-ParmVarDecl 0x56490dcf1c58 <col:12> col:12 'String::rep_t &&'

Layout: <CGRecordLayout
  LLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  NonVirtualBaseLLVMType:%"struct.String::rep_t" = type { i8*, i32, %"struct.String::memo_t"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dccd2c0 <../dummy_inc/click/string.hh:19:1, line:304:1> line:19:7 referenced class String definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490dccd3d8 <col:1, col:7> col:7 implicit referenced class String
|-AccessSpecDecl 0x56490dccd468 <col:16, col:22> col:16 public
|-TypedefDecl 0x56490dccd4a8 <line:21:5, col:25> col:25 referenced const_iterator 'const char *'
| `-PointerType 0x56490da8fdc0 'const char *'
|   `-QualType 0x56490da8f311 'const char' const
|     `-BuiltinType 0x56490da8f310 'char'
|-TypedefDecl 0x56490dccd530 <line:22:5, col:28> col:28 iterator 'String::const_iterator':'const char *'
| `-TypedefType 0x56490dccd500 'String::const_iterator' sugar
|   |-Typedef 0x56490dccd4a8 'const_iterator'
|   `-PointerType 0x56490da8fdc0 'const char *'
|     `-QualType 0x56490da8f311 'const char' const
|       `-BuiltinType 0x56490da8f310 'char'
|-TypedefDecl 0x56490dccd6d0 <line:24:5, col:52> col:27 referenced unspecified_bool_type 'int (String::*)() const'
| `-MemberPointerType 0x56490dccd640 'int (String::*)() const'
|   |-RecordType 0x56490dccd350 'String'
|   | `-CXXRecord 0x56490dccd2c0 'String'
|   `-ParenType 0x56490dccd5e0 'int () const' sugar
|     `-FunctionProtoType 0x56490dccd5b0 'int () const' const cdecl
|       `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490dccd738 <line:27:5, col:21> col:21 referenced intmax_t 'int64_t':'long'
| `-TypedefType 0x56490dbe8430 'int64_t' sugar
|   |-Typedef 0x56490daf82d0 'int64_t'
|   `-TypedefType 0x56490dad14d0 '__int64_t' sugar
|     |-Typedef 0x56490dad10a8 '__int64_t'
|     `-BuiltinType 0x56490da8f390 'long'
|-TypedefDecl 0x56490dccd7a0 <line:28:5, col:22> col:22 referenced uintmax_t 'uint64_t':'unsigned long'
| `-TypedefType 0x56490dbe8350 'uint64_t' sugar
|   |-Typedef 0x56490daf8470 'uint64_t'
|   `-TypedefType 0x56490dad1560 '__uint64_t' sugar
|     |-Typedef 0x56490dad1118 '__uint64_t'
|     `-BuiltinType 0x56490da8f430 'unsigned long'
|-TypedefDecl 0x56490dccd830 <line:36:5, col:22> col:22 int_large_t 'String::intmax_t':'long'
| `-TypedefType 0x56490dccd800 'String::intmax_t' sugar
|   |-Typedef 0x56490dccd738 'intmax_t'
|   `-TypedefType 0x56490dbe8430 'int64_t' sugar
|     |-Typedef 0x56490daf82d0 'int64_t'
|     `-TypedefType 0x56490dad14d0 '__int64_t' sugar
|       |-Typedef 0x56490dad10a8 '__int64_t'
|       `-BuiltinType 0x56490da8f390 'long'
|-TypedefDecl 0x56490dccd8c0 <line:37:5, col:23> col:23 uint_large_t 'String::uintmax_t':'unsigned long'
| `-TypedefType 0x56490dccd890 'String::uintmax_t' sugar
|   |-Typedef 0x56490dccd7a0 'uintmax_t'
|   `-TypedefType 0x56490dbe8350 'uint64_t' sugar
|     |-Typedef 0x56490daf8470 'uint64_t'
|     `-TypedefType 0x56490dad1560 '__uint64_t' sugar
|       |-Typedef 0x56490dad1118 '__uint64_t'
|       `-BuiltinType 0x56490da8f430 'unsigned long'
|-CXXConstructorDecl 0x56490dccd980 <line:39:5, col:19> col:12 used String 'void ()' inline
|-CXXConstructorDecl 0x56490dccdb28 <line:40:5, col:34> col:12 used String 'void (const String &)' inline
| `-ParmVarDecl 0x56490dccda68 <col:19, col:33> col:33 x 'const String &'
|-CXXConstructorDecl 0x56490dccdcd8 <line:42:5, col:29> col:12 used String 'void (String &&)' inline
| `-ParmVarDecl 0x56490dccdc18 <col:19, col:28> col:28 x 'String &&'
|-CXXConstructorDecl 0x56490dccde30 <line:44:5, col:35> col:12 used String 'void (const char *)' inline
| `-ParmVarDecl 0x56490dccdda0 <col:19, col:31> col:31 cstr 'const char *'
|-CXXConstructorDecl 0x56490dcce0b0 <line:45:5, col:41> col:12 String 'void (const char *, int)' inline
| |-ParmVarDecl 0x56490dccdef8 <col:19, col:31> col:31 s 'const char *'
| `-ParmVarDecl 0x56490dccdf78 <col:34, col:38> col:38 len 'int'
|-CXXConstructorDecl 0x56490dcce308 <line:46:5, col:50> col:12 String 'void (const unsigned char *, int)' inline
| |-ParmVarDecl 0x56490dcce1b0 <col:19, col:40> col:40 s 'const unsigned char *'
| `-ParmVarDecl 0x56490dcce230 <col:43, col:47> col:47 len 'int'
|-CXXConstructorDecl 0x56490dcce528 <line:47:5, col:54> col:12 used String 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56490dcce3d8 <col:19, col:31> col:31 first 'const char *'
| `-ParmVarDecl 0x56490dcce458 <col:38, col:50> col:50 last 'const char *'
|-CXXConstructorDecl 0x56490dcce748 <line:48:5, col:72> col:12 String 'void (const unsigned char *, const unsigned char *)' inline
| |-ParmVarDecl 0x56490dcce5f8 <col:19, col:40> col:40 first 'const unsigned char *'
| `-ParmVarDecl 0x56490dcce678 <col:47, col:68> col:68 last 'const unsigned char *'
|-CXXConstructorDecl 0x56490dcce8d8 <line:49:5, col:34> col:21 used String 'void (bool)' inline
| `-ParmVarDecl 0x56490dcce810 <col:28, col:33> col:33 x 'bool'
|-CXXConstructorDecl 0x56490dccea58 <line:50:5, col:34> col:21 String 'void (char)' inline
| `-ParmVarDecl 0x56490dcce998 <col:28, col:33> col:33 c 'char'
|-CXXConstructorDecl 0x56490dccebe8 <line:51:5, col:43> col:21 String 'void (unsigned char)' inline
| `-ParmVarDecl 0x56490dcceb20 <col:28, col:42> col:42 c 'unsigned char'
|-CXXConstructorDecl 0x56490dcced40 <line:52:5, col:26> col:14 String 'void (int)'
| `-ParmVarDecl 0x56490dccecb0 <col:21, col:25> col:25 x 'int'
|-CXXConstructorDecl 0x56490dcceec8 <line:53:5, col:31> col:14 String 'void (unsigned int)'
| `-ParmVarDecl 0x56490dccee08 <col:21, col:30> col:30 x 'unsigned int'
|-CXXConstructorDecl 0x56490dccf058 <line:54:5, col:27> col:14 String 'void (long)'
| `-ParmVarDecl 0x56490dccef90 <col:21, col:26> col:26 x 'long'
|-CXXConstructorDecl 0x56490dccf1e8 <line:55:5, col:36> col:14 String 'void (unsigned long)'
| `-ParmVarDecl 0x56490dccf120 <col:21, col:35> col:35 x 'unsigned long'
|-CXXConstructorDecl 0x56490dccf378 <line:57:5, col:32> col:14 String 'void (long long)'
| `-ParmVarDecl 0x56490dccf2b0 <col:21, col:31> col:31 x 'long long'
|-CXXConstructorDecl 0x56490dccf508 <line:58:5, col:41> col:14 String 'void (unsigned long long)'
| `-ParmVarDecl 0x56490dccf440 <col:21, col:40> col:40 x 'unsigned long long'
|-CXXConstructorDecl 0x56490dccf698 <line:65:5, col:29> col:14 String 'void (double)'
| `-ParmVarDecl 0x56490dccf5d0 <col:21, col:28> col:28 x 'double'
|-CXXDestructorDecl 0x56490dccf790 <line:67:5, col:20> col:12 used ~String 'void () noexcept' inline
|-CXXMethodDecl 0x56490dccf8b8 <line:69:5, col:44> col:33 make_empty 'const String &()' static inline
|-CXXMethodDecl 0x56490dccfa38 <line:70:5, col:52> col:26 used make_uninitialized 'String (int)' static inline
| `-ParmVarDecl 0x56490dccf970 <col:45, col:49> col:49 len 'int'
|-CXXMethodDecl 0x56490dccfb88 <line:71:5, col:74> col:26 make_garbage 'String (int)' static inline
| |-ParmVarDecl 0x56490dccfaf8 <col:39, col:43> col:43 len 'int'
| `-DeprecatedAttr 0x56490dccfc30 <col:63> "" ""
|-CXXMethodDecl 0x56490dccfd78 <line:72:5, col:54> col:26 make_stable 'String (const char *)' static inline
| `-ParmVarDecl 0x56490dccfcb8 <col:38, col:50> col:50 cstr 'const char *'
|-CXXMethodDecl 0x56490dccff88 <line:73:5, col:60> col:26 make_stable 'String (const char *, int)' static inline
| |-ParmVarDecl 0x56490dccfe38 <col:38, col:50> col:50 s 'const char *'
| `-ParmVarDecl 0x56490dccfeb8 <col:53, col:57> col:57 len 'int'
|-CXXMethodDecl 0x56490dcd0628 <line:74:5, col:73> col:26 make_stable 'String (const char *, const char *)' static inline
| |-ParmVarDecl 0x56490dcd04d0 <col:38, col:50> col:50 first 'const char *'
| `-ParmVarDecl 0x56490dcd0550 <col:57, col:69> col:69 last 'const char *'
|-CXXMethodDecl 0x56490dcd0908 <line:75:5, col:80> col:19 make_numeric 'String (String::intmax_t, int, bool)' static
| |-ParmVarDecl 0x56490dcd06e8 <col:32, col:41> col:41 x 'String::intmax_t':'long'
| |-ParmVarDecl 0x56490dcd0768 <col:44, col:55> col:48 base 'int' cinit
| | `-IntegerLiteral 0x56490dcdd2f0 <col:55> 'int' 10
| `-ParmVarDecl 0x56490dcd07e0 <col:59, col:76> col:64 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56490dcdd310 <col:76> 'bool' true
|-CXXMethodDecl 0x56490dcd0be8 <line:76:5, col:81> col:19 make_numeric 'String (String::uintmax_t, int, bool)' static
| |-ParmVarDecl 0x56490dcd09d0 <col:32, col:42> col:42 x 'String::uintmax_t':'unsigned long'
| |-ParmVarDecl 0x56490dcd0a50 <col:45, col:56> col:49 base 'int' cinit
| | `-IntegerLiteral 0x56490dcdd320 <col:56> 'int' 10
| `-ParmVarDecl 0x56490dcd0ac8 <col:60, col:77> col:65 uppercase 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56490dcdd340 <col:77> 'bool' true
|-CXXMethodDecl 0x56490dcd0cf0 <line:78:5, col:31> col:24 used data 'const char *() const' inline
|-CXXMethodDecl 0x56490dcd0db8 <line:79:5, col:25> col:16 used length 'int () const' inline
|-CXXMethodDecl 0x56490dcd0e80 <line:81:5, col:60> col:52 c_str 'const char *() const'
| |-NoInlineAttr 0x56490dcd0f20 <col:20>
| `-OptimizeNoneAttr 0x56490dcd0f78 <col:30>
|-CXXConversionDecl 0x56490dcd1068 <line:83:5, col:45> col:12 used operator int (String::*)() const 'String::unspecified_bool_type () const' inline
|-CXXMethodDecl 0x56490dcd1138 <line:84:5, col:25> col:17 used empty 'bool () const' inline
|-CXXMethodDecl 0x56490dcd11f8 <line:85:5, col:29> col:17 operator! 'bool () const' inline
|-CXXMethodDecl 0x56490dcd12e8 <line:87:5, col:35> col:27 used begin 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56490dcd13a8 <line:88:5, col:33> col:27 used end 'String::const_iterator () const' inline
|-CXXMethodDecl 0x56490dcd1528 <line:90:5, col:35> col:17 used operator[] 'char (int) const' inline
| `-ParmVarDecl 0x56490dcd1460 <col:28, col:32> col:32 i 'int'
|-CXXMethodDecl 0x56490dcd1678 <line:91:5, col:27> col:17 at 'char (int) const' inline
| `-ParmVarDecl 0x56490dcd15e8 <col:20, col:24> col:24 i 'int'
|-CXXMethodDecl 0x56490dcd1768 <line:92:5, col:25> col:17 front 'char () const' inline
|-CXXMethodDecl 0x56490dcd1828 <line:93:5, col:24> col:17 back 'char () const' inline
|-CXXMethodDecl 0x56490dcd1a78 <line:95:5, col:64> col:21 used hashcode 'uint32_t (const char *, const char *)' static
| |-ParmVarDecl 0x56490dcd18e0 <col:30, col:42> col:42 begin 'const char *'
| `-ParmVarDecl 0x56490dcd1960 <col:49, col:61> col:61 end 'const char *'
|-CXXMethodDecl 0x56490dcd1cd8 <line:96:5, line:97:33> line:96:28 hashcode 'uint32_t (const unsigned char *, const unsigned char *)' static inline
| |-ParmVarDecl 0x56490dcd1b40 <col:37, col:58> col:58 begin 'const unsigned char *'
| `-ParmVarDecl 0x56490dcd1bc0 <line:97:9, col:30> col:30 end 'const unsigned char *'
|-CXXMethodDecl 0x56490dcd1da8 <line:98:5, col:32> col:21 hashcode 'uint32_t () const' inline
|-CXXMethodDecl 0x56490dcd1fb8 <line:100:5, col:65> col:19 substring 'String (const char *, const char *) const' inline
| |-ParmVarDecl 0x56490dcd1e60 <col:29, col:41> col:41 begin 'const char *'
| `-ParmVarDecl 0x56490dcd1ee0 <col:48, col:60> col:60 end 'const char *'
|-CXXMethodDecl 0x56490dcd21d8 <line:101:5, col:40> col:12 used substring 'String (int, int) const'
| |-ParmVarDecl 0x56490dcd2080 <col:22, col:26> col:26 pos 'int'
| `-ParmVarDecl 0x56490dcd2100 <col:31, col:35> col:35 len 'int'
|-CXXMethodDecl 0x56490dcd2368 <line:102:5, col:38> col:19 substring 'String (int) const' inline
| `-ParmVarDecl 0x56490dcd22a0 <col:29, col:33> col:33 pos 'int'
|-CXXMethodDecl 0x56490dcd29b0 <line:103:5, col:25> col:12 trim_space 'String () const'
|-CXXMethodDecl 0x56490dcd2b28 <line:105:5, col:41> col:17 equals 'bool (const String &) const' inline
| `-ParmVarDecl 0x56490dcd2a60 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56490dcd2d38 <line:106:5, col:48> col:17 used equals 'bool (const char *, int) const' inline
| |-ParmVarDecl 0x56490dcd2be8 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56490dcd2c68 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56490dcd2f50 <line:107:5, col:63> col:23 used compare 'int (const String &, const String &)' static inline
| |-ParmVarDecl 0x56490dcd2df8 <col:31, col:45> col:45 a 'const String &'
| `-ParmVarDecl 0x56490dcd2e70 <col:48, col:62> col:62 b 'const String &'
|-CXXMethodDecl 0x56490dcd30e0 <line:108:5, col:41> col:16 used compare 'int (const String &) const' inline
| `-ParmVarDecl 0x56490dcd3010 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56490dcd3300 <line:109:5, col:41> col:9 used compare 'int (const char *, int) const'
| |-ParmVarDecl 0x56490dcd31a0 <col:17, col:29> col:29 s 'const char *'
| `-ParmVarDecl 0x56490dcd3220 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56490dcd3450 <line:110:5, col:46> col:17 starts_with 'bool (const String &) const' inline
| `-ParmVarDecl 0x56490dcd33c0 <col:29, col:43> col:43 x 'const String &'
|-CXXMethodDecl 0x56490dcd3628 <line:111:5, col:46> col:10 used starts_with 'bool (const char *, int) const'
| |-ParmVarDecl 0x56490dcd3510 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56490dcd3590 <col:37, col:41> col:41 len 'int'
|-CXXMethodDecl 0x56490dcd3778 <line:112:5, col:44> col:10 glob_match 'bool (const String &) const'
| `-ParmVarDecl 0x56490dcd36e8 <col:21, col:35> col:35 pattern 'const String &'
|-CXXMethodDecl 0x56490dcd3990 <line:125:5, col:42> col:9 find_left 'int (char, int) const'
| |-ParmVarDecl 0x56490dcd3830 <col:19, col:24> col:24 c 'char'
| `-ParmVarDecl 0x56490dcd38b0 <col:27, col:39> col:31 start 'int' cinit
|   `-IntegerLiteral 0x56490dcdd350 <col:39> 'int' 0
|-CXXMethodDecl 0x56490dcd3bb0 <line:126:5, col:51> col:9 find_left 'int (const String &, int) const'
| |-ParmVarDecl 0x56490dcd3a50 <col:19, col:33> col:33 x 'const String &'
| `-ParmVarDecl 0x56490dcd3ad0 <col:36, col:48> col:40 start 'int' cinit
|   `-IntegerLiteral 0x56490dcdd370 <col:48> 'int' 0
|-CXXMethodDecl 0x56490dcd3d90 <line:127:5, col:52> col:9 find_right 'int (char, int) const'
| |-ParmVarDecl 0x56490dcd3c70 <col:20, col:25> col:25 c 'char'
| `-ParmVarDecl 0x56490dcd3cf0 <col:28, col:40> col:32 start 'int' cinit
|   `-IntegerLiteral 0x56490dcdd390 <col:40> 'int' 2147483647
|-CXXMethodDecl 0x56490dcd3e60 <line:129:5, col:20> col:12 lower 'String () const'
|-CXXMethodDecl 0x56490dcd3f20 <line:130:5, col:20> col:12 upper 'String () const'
|-CXXMethodDecl 0x56490dcd3fe0 <line:131:5, col:24> col:12 printable 'String () const'
|-CXXMethodDecl 0x56490dcd40a0 <line:132:5, col:25> col:12 quoted_hex 'String () const'
|-CXXMethodDecl 0x56490dcd4160 <line:133:5, col:26> col:12 encode_json 'String () const'
|-CXXMethodDecl 0x56490dcd4308 <line:135:5, col:45> col:20 used operator= 'String &(const String &)' inline
| `-ParmVarDecl 0x56490dcd4210 <col:30, col:44> col:44 x 'const String &'
|-CXXMethodDecl 0x56490dcd4488 <line:137:5, col:40> col:20 used operator= 'String &(String &&)' inline
| `-ParmVarDecl 0x56490dcd43c0 <col:30, col:39> col:39 x 'String &&'
|-CXXMethodDecl 0x56490dcd4608 <line:139:5, col:46> col:20 operator= 'String &(const char *)' inline
| `-ParmVarDecl 0x56490dcd4548 <col:30, col:42> col:42 cstr 'const char *'
|-CXXMethodDecl 0x56490dcd4788 <line:141:5, col:31> col:17 swap 'void (String &)' inline
| `-ParmVarDecl 0x56490dcd46c0 <col:22, col:30> col:30 x 'String &'
|-CXXMethodDecl 0x56490dcd48d0 <line:143:5, col:39> col:17 append 'void (const String &)' inline
| `-ParmVarDecl 0x56490dcd4840 <col:24, col:38> col:38 x 'const String &'
|-CXXMethodDecl 0x56490dcd4d80 <line:144:5, col:40> col:17 used append 'void (const char *)' inline
| `-ParmVarDecl 0x56490dcd4cf0 <col:24, col:36> col:36 cstr 'const char *'
|-CXXMethodDecl 0x56490dcd4f58 <line:145:5, col:46> col:17 used append 'void (const char *, int)' inline
| |-ParmVarDecl 0x56490dcd4e40 <col:24, col:36> col:36 s 'const char *'
| `-ParmVarDecl 0x56490dcd4ec0 <col:39, col:43> col:43 len 'int'
|-CXXMethodDecl 0x56490dcd5138 <line:146:5, col:59> col:17 append 'void (const char *, const char *)' inline
| |-ParmVarDecl 0x56490dcd5020 <col:24, col:36> col:36 first 'const char *'
| `-ParmVarDecl 0x56490dcd50a0 <col:43, col:55> col:55 last 'const char *'
|-CXXMethodDecl 0x56490dcd5288 <line:147:5, col:30> col:17 append 'void (char)' inline
| `-ParmVarDecl 0x56490dcd51f8 <col:24, col:29> col:29 c 'char'
|-CXXMethodDecl 0x56490dcd5498 <line:148:5, col:36> col:10 append_fill 'void (int, int)'
| |-ParmVarDecl 0x56490dcd5348 <col:22, col:26> col:26 c 'int'
| `-ParmVarDecl 0x56490dcd53c8 <col:29, col:33> col:33 len 'int'
|-CXXMethodDecl 0x56490dcd55f8 <line:149:5, col:39> col:11 used append_uninitialized 'char *(int)'
| `-ParmVarDecl 0x56490dcd5560 <col:32, col:36> col:36 len 'int'
|-CXXMethodDecl 0x56490dcd5750 <line:150:5, col:68> col:18 append_garbage 'char *(int)' inline
| |-ParmVarDecl 0x56490dcd56b8 <col:33, col:37> col:37 len 'int'
| `-DeprecatedAttr 0x56490dcd57f8 <col:57> "" ""
|-CXXMethodDecl 0x56490dcd5908 <line:152:5, col:46> col:20 used operator+= 'String &(const String &)' inline
| `-ParmVarDecl 0x56490dcd5878 <col:31, col:45> col:45 x 'const String &'
|-CXXMethodDecl 0x56490dcd5a58 <line:153:5, col:47> col:20 operator+= 'String &(const char *)' inline
| `-ParmVarDecl 0x56490dcd59c8 <col:31, col:43> col:43 cstr 'const char *'
|-CXXMethodDecl 0x56490dcd5bd8 <line:154:5, col:37> col:20 operator+= 'String &(char)' inline
| `-ParmVarDecl 0x56490dcd5b10 <col:31, col:36> col:36 c 'char'
|-CXXMethodDecl 0x56490dcd5ca0 <line:160:5, col:29> col:17 is_shared 'bool () const' inline
|-CXXMethodDecl 0x56490dcd5d60 <line:161:5, col:29> col:17 is_stable 'bool () const' inline
|-CXXMethodDecl 0x56490dcd5e20 <line:163:5, col:60> col:19 unique 'String () const' inline
| `-DeprecatedAttr 0x56490dcd5ec0 <col:49> "" ""
|-CXXMethodDecl 0x56490dcd5f50 <line:164:5, col:30> col:19 used unshared 'String () const' inline
|-CXXMethodDecl 0x56490dcd6010 <line:165:5, col:29> col:19 compact 'String () const' inline
|-CXXMethodDecl 0x56490dcd6100 <line:167:5, col:24> col:11 mutable_data 'char *()'
|-CXXMethodDecl 0x56490dcd61c8 <line:168:5, col:25> col:11 mutable_c_str 'char *()'
|-CXXMethodDecl 0x56490dcd6288 <line:170:5, col:52> col:33 make_out_of_memory 'const String &()' static inline
|-CXXMethodDecl 0x56490dcd6348 <line:171:5, col:33> col:17 out_of_memory 'bool () const' inline
|-CXXMethodDecl 0x56490dcd6440 <line:172:5, col:50> col:31 out_of_memory_data 'const char *()' static inline
|-CXXMethodDecl 0x56490dcd6508 <line:173:5, col:44> col:23 out_of_memory_length 'int ()' static inline
|-CXXMethodDecl 0x56490dcd65d0 <line:174:5, col:42> col:31 empty_data 'const char *()' static inline
|-CXXMethodDecl 0x56490dcd67a8 <line:180:5, col:81> col:31 skip_utf8_char 'const char *(const char *, const char *)' static inline
| |-ParmVarDecl 0x56490dcd6688 <col:46, col:58> col:58 first 'const char *'
| `-ParmVarDecl 0x56490dcd6708 <col:65, col:77> col:77 last 'const char *'
|-CXXMethodDecl 0x56490dcd69d0 <line:181:5, line:182:38> line:181:33 used skip_utf8_char 'const unsigned char *(const unsigned char *, const unsigned char *)' static
| |-ParmVarDecl 0x56490dcd6870 <col:48, col:69> col:69 first 'const unsigned char *'
| `-ParmVarDecl 0x56490dcd68f0 <line:182:13, col:34> col:34 last 'const unsigned char *'
|-VarDecl 0x56490dcd6ae0 <line:184:5, col:35> col:23 used bool_data 'const char [11]' static
|-AccessSpecDecl 0x56490dcd6b48 <line:186:3, col:10> col:3 private
|-CXXRecordDecl 0x56490dcd6b70 <line:189:5, line:198:5> line:189:12 referenced struct memo_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x56490dcd8e10 <col:5, col:12> col:12 implicit struct memo_t
| |-FieldDecl 0x56490dcd8eb0 <line:190:2, col:20> col:20 referenced refcount 'volatile uint32_t':'volatile unsigned int'
| |-FieldDecl 0x56490dcd8f10 <line:191:2, col:11> col:11 referenced capacity 'uint32_t':'unsigned int'
| |-FieldDecl 0x56490dcd8f70 <line:192:2, col:20> col:20 dirty 'volatile uint32_t':'volatile unsigned int'
| `-FieldDecl 0x56490dcd9020 <line:197:2, col:18> col:7 real_data 'char [8]'
|-EnumDecl 0x56490dcd9088 <line:200:5, line:202:5> line:200:5
| `-EnumConstantDecl 0x56490dcd92c8 <line:201:2, col:32> col:2 MEMO_SPACE 'String::(anonymous enum at ../dummy_inc/click/string.hh:200:5)'
|   `-ImplicitCastExpr 0x56490dcd9318 <col:15, col:32> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490dcd92a8 <col:15, col:32> 'unsigned long' Int: 12
|       `-BinaryOperator 0x56490dcd91b8 <col:15, col:32> 'unsigned long' '-'
|         |-UnaryExprOrTypeTraitExpr 0x56490dcd9160 <col:15, col:28> 'unsigned long' sizeof 'String::memo_t'
|         `-ImplicitCastExpr 0x56490dcd91a0 <col:32> 'unsigned long' <IntegralCast>
|           `-IntegerLiteral 0x56490dcd9180 <col:32> 'int' 8
|-CXXRecordDecl 0x56490dcd9330 <line:204:5, line:208:5> line:204:12 referenced struct rep_t definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x56490dcd9448 <col:5, col:12> col:12 implicit struct rep_t
| |-FieldDecl 0x56490dcd94f0 <line:205:2, col:14> col:14 referenced data 'const char *'
| |-FieldDecl 0x56490dcd9558 <line:206:2, col:6> col:6 referenced length 'int'
| |-FieldDecl 0x56490dcd95e8 <line:207:2, col:10> col:10 referenced memo 'String::memo_t *'
| |-CXXConstructorDecl 0x56490dcdd820 <line:204:12> col:12 implicit used rep_t 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x56490dcddc58 <col:12>
| |-CXXConstructorDecl 0x56490dcdd928 <col:12> col:12 implicit used constexpr rep_t 'void (const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56490dcdda38 <col:12> col:12 used 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56490dcd94f0 'data' 'const char *'
| | | `-ImplicitCastExpr 0x56490dce0910 <col:12> 'const char *' <LValueToRValue>
| | |   `-MemberExpr 0x56490dce08e0 <col:12> 'const char *const' lvalue .data 0x56490dcd94f0
| | |     `-DeclRefExpr 0x56490dce08c0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcdda38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56490dcd9558 'length' 'int'
| | | `-ImplicitCastExpr 0x56490dce09a0 <col:12> 'int' <LValueToRValue>
| | |   `-MemberExpr 0x56490dce0970 <col:12> 'const int' lvalue .length 0x56490dcd9558
| | |     `-DeclRefExpr 0x56490dce0950 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcdda38 '' 'const String::rep_t &'
| | |-CXXCtorInitializer Field 0x56490dcd95e8 'memo' 'String::memo_t *'
| | | `-ImplicitCastExpr 0x56490dce0a30 <col:12> 'String::memo_t *' <LValueToRValue>
| | |   `-MemberExpr 0x56490dce0a00 <col:12> 'String::memo_t *const' lvalue .memo 0x56490dcd95e8
| | |     `-DeclRefExpr 0x56490dce09e0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcdda38 '' 'const String::rep_t &'
| | `-CompoundStmt 0x56490dce0a88 <col:12>
| |-CXXConstructorDecl 0x56490dcddad8 <col:12> col:12 implicit constexpr rep_t 'void (String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56490dcddad8
| | `-ParmVarDecl 0x56490dcddbe8 <col:12> col:12 'String::rep_t &&'
| |-CXXDestructorDecl 0x56490dce6060 <col:12> col:12 implicit ~rep_t 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x56490dcf19c8 <col:12> col:12 implicit used constexpr operator= 'String::rep_t &(const String::rep_t &) noexcept' inline default trivial
| | |-ParmVarDecl 0x56490dcf1ad8 <col:12> col:12 used 'const String::rep_t &'
| | `-CompoundStmt 0x56490dcf1ff0 <col:12>
| |   |-BinaryOperator 0x56490dcf1e08 <col:12> 'const char *' lvalue '='
| |   | |-MemberExpr 0x56490dcf1dc0 <col:12> 'const char *' lvalue ->data 0x56490dcd94f0
| |   | | `-CXXThisExpr 0x56490dcf1db0 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56490dcf1df0 <col:12> 'const char *' <LValueToRValue>
| |   |   `-MemberExpr 0x56490dcf1d80 <col:12> 'const char *const' lvalue .data 0x56490dcd94f0
| |   |     `-DeclRefExpr 0x56490dcf1d60 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcf1ad8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56490dcf1ed0 <col:12> 'int' lvalue '='
| |   | |-MemberExpr 0x56490dcf1e88 <col:12> 'int' lvalue ->length 0x56490dcd9558
| |   | | `-CXXThisExpr 0x56490dcf1e78 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56490dcf1eb8 <col:12> 'int' <LValueToRValue>
| |   |   `-MemberExpr 0x56490dcf1e48 <col:12> 'const int' lvalue .length 0x56490dcd9558
| |   |     `-DeclRefExpr 0x56490dcf1e28 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcf1ad8 '' 'const String::rep_t &'
| |   |-BinaryOperator 0x56490dcf1f98 <col:12> 'String::memo_t *' lvalue '='
| |   | |-MemberExpr 0x56490dcf1f50 <col:12> 'String::memo_t *' lvalue ->memo 0x56490dcd95e8
| |   | | `-CXXThisExpr 0x56490dcf1f40 <col:12> 'String::rep_t *' this
| |   | `-ImplicitCastExpr 0x56490dcf1f80 <col:12> 'String::memo_t *' <LValueToRValue>
| |   |   `-MemberExpr 0x56490dcf1f10 <col:12> 'String::memo_t *const' lvalue .memo 0x56490dcd95e8
| |   |     `-DeclRefExpr 0x56490dcf1ef0 <col:12> 'const String::rep_t' lvalue ParmVar 0x56490dcf1ad8 '' 'const String::rep_t &'
| |   `-ReturnStmt 0x56490dcf1fe0 <col:12>
| |     `-UnaryOperator 0x56490dcf1fc8 <col:12> 'String::rep_t' lvalue prefix '*' cannot overflow
| |       `-CXXThisExpr 0x56490dcf1fb8 <col:12> 'String::rep_t *' this
| `-CXXMethodDecl 0x56490dcf1b48 <col:12> col:12 implicit constexpr operator= 'String::rep_t &(String::rep_t &&)' inline default trivial noexcept-unevaluated 0x56490dcf1b48
|   `-ParmVarDecl 0x56490dcf1c58 <col:12> col:12 'String::rep_t &&'
|-FieldDecl 0x56490dcd9660 <line:211:5, col:19> col:19 referenced _r 'String::rep_t' mutable
|-CXXMethodDecl 0x56490dcd98a8 <line:256:5, line:261:5> line:256:17 used assign_memo 'void (const char *, int, String::memo_t *) const' inline
| |-ParmVarDecl 0x56490dcd96c8 <col:29, col:41> col:41 used data 'const char *'
| |-ParmVarDecl 0x56490dcd9748 <col:47, col:51> col:51 used length 'int'
| |-ParmVarDecl 0x56490dcd97c0 <col:59, col:67> col:67 used memo 'String::memo_t *'
| `-CompoundStmt 0x56490dcdd7e0 <col:79, line:261:5>
|   |-BinaryOperator 0x56490dcdd458 <line:257:2, col:12> 'const char *' lvalue '='
|   | |-MemberExpr 0x56490dcdd3f0 <col:2, col:5> 'const char *' lvalue .data 0x56490dcd94f0
|   | | `-MemberExpr 0x56490dcdd3c0 <col:2> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|   | |   `-CXXThisExpr 0x56490dcdd3b0 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56490dcdd440 <col:12> 'const char *' <LValueToRValue>
|   |   `-DeclRefExpr 0x56490dcdd420 <col:12> 'const char *' lvalue ParmVar 0x56490dcd96c8 'data' 'const char *'
|   |-BinaryOperator 0x56490dcdd520 <line:258:2, col:14> 'int' lvalue '='
|   | |-MemberExpr 0x56490dcdd4b8 <col:2, col:5> 'int' lvalue .length 0x56490dcd9558
|   | | `-MemberExpr 0x56490dcdd488 <col:2> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|   | |   `-CXXThisExpr 0x56490dcdd478 <col:2> 'const String *' implicit this
|   | `-ImplicitCastExpr 0x56490dcdd508 <col:14> 'int' <LValueToRValue>
|   |   `-DeclRefExpr 0x56490dcdd4e8 <col:14> 'int' lvalue ParmVar 0x56490dcd9748 'length' 'int'
|   `-IfStmt 0x56490dcdd7c8 <line:259:2, line:260:41>
|     |-ImplicitCastExpr 0x56490dcdd640 <line:259:6, col:21> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56490dcdd628 <col:6, col:21> 'String::memo_t *' <LValueToRValue>
|     |   `-ParenExpr 0x56490dcdd608 <col:6, col:21> 'String::memo_t *' lvalue
|     |     `-BinaryOperator 0x56490dcdd5e8 <col:7, col:17> 'String::memo_t *' lvalue '='
|     |       |-MemberExpr 0x56490dcdd580 <col:7, col:10> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|     |       | `-MemberExpr 0x56490dcdd550 <col:7> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|     |       |   `-CXXThisExpr 0x56490dcdd540 <col:7> 'const String *' implicit this
|     |       `-ImplicitCastExpr 0x56490dcdd5d0 <col:17> 'String::memo_t *' <LValueToRValue>
|     |         `-DeclRefExpr 0x56490dcdd5b0 <col:17> 'String::memo_t *' lvalue ParmVar 0x56490dcd97c0 'memo' 'String::memo_t *'
|     `-CallExpr 0x56490dcdd7a0 <line:260:6, col:41> 'void'
|       |-ImplicitCastExpr 0x56490dcdd788 <col:6, col:23> 'void (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dcdd690 <col:6, col:23> 'void (volatile uint32_t &)' lvalue CXXMethod 0x56490dcb3f18 'inc' 'void (volatile uint32_t &)'
|       `-MemberExpr 0x56490dcdd6f8 <col:27, col:33> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56490dcd8eb0
|         `-ImplicitCastExpr 0x56490dcdd6e0 <col:27> 'String::memo_t *' <LValueToRValue>
|           `-DeclRefExpr 0x56490dcdd6c0 <col:27> 'String::memo_t *' lvalue ParmVar 0x56490dcd97c0 'memo' 'String::memo_t *'
|-CXXConstructorDecl 0x56490dcd9b58 <line:263:5, line:265:5> line:263:12 used String 'void (const char *, int, String::memo_t *)' inline
| |-ParmVarDecl 0x56490dcd9978 <col:19, col:31> col:31 used data 'const char *'
| |-ParmVarDecl 0x56490dcd99f8 <col:37, col:41> col:41 used length 'int'
| |-ParmVarDecl 0x56490dcd9a70 <col:49, col:57> col:57 used memo 'String::memo_t *'
| |-CXXCtorInitializer Field 0x56490dcd9660 '_r' 'String::rep_t'
| | `-CXXConstructExpr 0x56490dcddc68 <col:12> 'String::rep_t' 'void () noexcept'
| `-CompoundStmt 0x56490dcdddf8 <col:63, line:265:5>
|   `-CXXMemberCallExpr 0x56490dcddd60 <line:264:2, col:32> 'void'
|     |-MemberExpr 0x56490dcddcd0 <col:2> '<bound member function type>' ->assign_memo 0x56490dcd98a8
|     | `-ImplicitCastExpr 0x56490dcddd98 <col:2> 'const String *' <NoOp>
|     |   `-CXXThisExpr 0x56490dcddcc0 <col:2> 'String *' implicit this
|     |-ImplicitCastExpr 0x56490dcdddb0 <col:14> 'const char *' <LValueToRValue>
|     | `-DeclRefExpr 0x56490dcddd00 <col:14> 'const char *' lvalue ParmVar 0x56490dcd9978 'data' 'const char *'
|     |-ImplicitCastExpr 0x56490dcdddc8 <col:20> 'int' <LValueToRValue>
|     | `-DeclRefExpr 0x56490dcddd20 <col:20> 'int' lvalue ParmVar 0x56490dcd99f8 'length' 'int'
|     `-ImplicitCastExpr 0x56490dcddde0 <col:28> 'String::memo_t *' <LValueToRValue>
|       `-DeclRefExpr 0x56490dcddd40 <col:28> 'String::memo_t *' lvalue ParmVar 0x56490dcd9a70 'memo' 'String::memo_t *'
|-CXXMethodDecl 0x56490dcd9ce8 <line:267:5, line:269:5> line:267:17 used assign 'void (const String &) const' inline
| |-ParmVarDecl 0x56490dcd9c28 <col:24, col:38> col:38 used x 'const String &'
| `-CompoundStmt 0x56490dcde050 <col:47, line:269:5>
|   `-CXXMemberCallExpr 0x56490dcddfd0 <line:268:2, col:47> 'void'
|     |-MemberExpr 0x56490dcdde20 <col:2> '<bound member function type>' ->assign_memo 0x56490dcd98a8
|     | `-CXXThisExpr 0x56490dcdde10 <col:2> 'const String *' implicit this
|     |-ImplicitCastExpr 0x56490dcde008 <col:14, col:19> 'const char *' <LValueToRValue>
|     | `-MemberExpr 0x56490dcddea0 <col:14, col:19> 'const char *' lvalue .data 0x56490dcd94f0
|     |   `-MemberExpr 0x56490dcdde70 <col:14, col:16> 'String::rep_t' lvalue ._r 0x56490dcd9660
|     |     `-DeclRefExpr 0x56490dcdde50 <col:14> 'const String' lvalue ParmVar 0x56490dcd9c28 'x' 'const String &'
|     |-ImplicitCastExpr 0x56490dcde020 <col:25, col:30> 'int' <LValueToRValue>
|     | `-MemberExpr 0x56490dcddf20 <col:25, col:30> 'int' lvalue .length 0x56490dcd9558
|     |   `-MemberExpr 0x56490dcddef0 <col:25, col:27> 'String::rep_t' lvalue ._r 0x56490dcd9660
|     |     `-DeclRefExpr 0x56490dcdded0 <col:25> 'const String' lvalue ParmVar 0x56490dcd9c28 'x' 'const String &'
|     `-ImplicitCastExpr 0x56490dcde038 <col:38, col:43> 'String::memo_t *' <LValueToRValue>
|       `-MemberExpr 0x56490dcddfa0 <col:38, col:43> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|         `-MemberExpr 0x56490dcddf70 <col:38, col:40> 'String::rep_t' lvalue ._r 0x56490dcd9660
|           `-DeclRefExpr 0x56490dcddf50 <col:38> 'const String' lvalue ParmVar 0x56490dcd9c28 'x' 'const String &'
|-CXXMethodDecl 0x56490dcd9db0 <line:271:5, line:278:5> line:271:17 used deref 'void () const' inline
| `-CompoundStmt 0x56490dcdf118 <col:31, line:278:5>
|   `-IfStmt 0x56490dcdf100 <line:272:2, line:277:2>
|     |-ImplicitCastExpr 0x56490dcde0f0 <line:272:6, col:9> 'bool' <PointerToBoolean>
|     | `-ImplicitCastExpr 0x56490dcde0d8 <col:6, col:9> 'String::memo_t *' <LValueToRValue>
|     |   `-MemberExpr 0x56490dcde0a8 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|     |     `-MemberExpr 0x56490dcde078 <col:6> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|     |       `-CXXThisExpr 0x56490dcde068 <col:6> 'const String *' implicit this
|     `-CompoundStmt 0x56490dcdf0d8 <col:15, line:277:2>
|       |-ParenExpr 0x56490dcde690 <line:273:6, col:166> 'void'
|       | `-ConditionalOperator 0x56490dcde660 <col:7, col:165> 'void'
|       |   |-CXXStaticCastExpr 0x56490dcde200 <col:7, col:44> 'bool' static_cast<_Bool> <NoOp>
|       |   | `-ImplicitCastExpr 0x56490dcde1e8 <col:27, col:36> 'bool' <IntegralToBoolean> part_of_explicit_cast
|       |   |   `-ImplicitCastExpr 0x56490dcde1d0 <col:27, col:36> 'uint32_t':'unsigned int' <LValueToRValue> part_of_explicit_cast
|       |   |     `-MemberExpr 0x56490dcde190 <col:27, col:36> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56490dcd8eb0
|       |   |       `-ImplicitCastExpr 0x56490dcde178 <col:27, col:30> 'String::memo_t *' <LValueToRValue>
|       |   |         `-MemberExpr 0x56490dcde148 <col:27, col:30> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|       |   |           `-MemberExpr 0x56490dcde118 <col:27> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|       |   |             `-CXXThisExpr 0x56490dcde108 <col:27> 'const String *' implicit this
|       |   |-CXXFunctionalCastExpr 0x56490dcde260 <col:48, col:55> 'void' functional cast to void <ToVoid>
|       |   | `-IntegerLiteral 0x56490dcde240 <col:54> 'int' 0
|       |   `-CallExpr 0x56490dcde5c0 <col:59, col:165> 'void'
|       |     |-ImplicitCastExpr 0x56490dcde5a8 <col:59> 'void (*)(const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' <FunctionToPointerDecay>
|       |     | `-DeclRefExpr 0x56490dcde530 <col:59> 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()' lvalue Function 0x56490db2ec90 '__assert_fail' 'void (const char *, const char *, unsigned int, const char *) __attribute__((noreturn)) throw()'
|       |     |-ImplicitCastExpr 0x56490dcde600 <col:74> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56490dcde348 <col:74> 'const char [18]' lvalue "_r.memo->refcount"
|       |     |-ImplicitCastExpr 0x56490dcde618 <col:95> 'const char *' <ArrayToPointerDecay>
|       |     | `-StringLiteral 0x56490dcde3f8 <col:95> 'const char [29]' lvalue "../dummy_inc/click/string.hh"
|       |     |-ImplicitCastExpr 0x56490dcde630 <col:127> 'unsigned int' <IntegralCast>
|       |     | `-IntegerLiteral 0x56490dcde430 <col:127> 'int' 273
|       |     `-ImplicitCastExpr 0x56490dcde648 <col:132, col:146> 'const char *' <ArrayToPointerDecay>
|       |       `-UnaryOperator 0x56490dcde518 <col:132, col:146> 'const char [27]' lvalue prefix '__extension__' cannot overflow
|       |         `-PredefinedExpr 0x56490dcde500 <col:146> 'const char [27]' lvalue __PRETTY_FUNCTION__
|       |           `-StringLiteral 0x56490dcde4c8 <col:146> 'const char [27]' lvalue "void String::deref() const"
|       |-IfStmt 0x56490dcdeff8 <line:274:6, line:275:22>
|       | |-CallExpr 0x56490dcde8a0 <line:274:10, col:57> 'bool'
|       | | |-ImplicitCastExpr 0x56490dcde888 <col:10, col:27> 'bool (*)(volatile uint32_t &)' <FunctionToPointerDecay>
|       | | | `-DeclRefExpr 0x56490dcde800 <col:10, col:27> 'bool (volatile uint32_t &)' lvalue CXXMethod 0x56490dcb92b0 'dec_and_test' 'bool (volatile uint32_t &)'
|       | | `-MemberExpr 0x56490dcde7d0 <col:40, col:49> 'volatile uint32_t':'volatile unsigned int' lvalue ->refcount 0x56490dcd8eb0
|       | |   `-ImplicitCastExpr 0x56490dcde7b8 <col:40, col:43> 'String::memo_t *' <LValueToRValue>
|       | |     `-MemberExpr 0x56490dcde788 <col:40, col:43> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|       | |       `-MemberExpr 0x56490dcde758 <col:40> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|       | |         `-CXXThisExpr 0x56490dcde748 <col:40> 'const String *' implicit this
|       | `-CallExpr 0x56490dcde9a0 <line:275:3, col:22> 'void'
|       |   |-ImplicitCastExpr 0x56490dcde988 <col:3> 'void (*)(String::memo_t *)' <FunctionToPointerDecay>
|       |   | `-DeclRefExpr 0x56490dcde8c8 <col:3> 'void (String::memo_t *)' lvalue CXXMethod 0x56490dcdaa88 'delete_memo' 'void (String::memo_t *)'
|       |   `-ImplicitCastExpr 0x56490dcdefe0 <col:15, col:18> 'String::memo_t *' <LValueToRValue>
|       |     `-MemberExpr 0x56490dcde928 <col:15, col:18> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|       |       `-MemberExpr 0x56490dcde8f8 <col:15> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|       |         `-CXXThisExpr 0x56490dcde8e8 <col:15> 'const String *' implicit this
|       `-BinaryOperator 0x56490dcdf0b8 <line:276:6, col:16> 'String::memo_t *' lvalue '='
|         |-MemberExpr 0x56490dcdf050 <col:6, col:9> 'String::memo_t *' lvalue .memo 0x56490dcd95e8
|         | `-MemberExpr 0x56490dcdf020 <col:6> 'String::rep_t' lvalue ->_r 0x56490dcd9660
|         |   `-CXXThisExpr 0x56490dcdf010 <col:6> 'const String *' implicit this
|         `-ImplicitCastExpr 0x56490dcdf0a0 <col:16> 'String::memo_t *' <NullToPointer>
|           `-IntegerLiteral 0x56490dcdf080 <col:16> 'int' 0
|-CXXMethodDecl 0x56490dcda048 <line:280:5, col:56> col:10 used assign 'void (const char *, int, bool)'
| |-ParmVarDecl 0x56490dcd9e68 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56490dcd9ee8 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56490dcd9f60 <col:41, col:46> col:46 need_deref 'bool'
|-CXXMethodDecl 0x56490dcda120 <line:281:5, col:31> col:10 assign_out_of_memory 'void ()'
|-CXXMethodDecl 0x56490dcda370 <line:282:5, col:53> col:10 used append 'void (const char *, int, String::memo_t *)'
| |-ParmVarDecl 0x56490dcda1d8 <col:17, col:29> col:29 s 'const char *'
| |-ParmVarDecl 0x56490dcda258 <col:32, col:36> col:36 len 'int'
| `-ParmVarDecl 0x56490dcda2d0 <col:41, col:49> col:49 memo 'String::memo_t *'
|-CXXMethodDecl 0x56490dcda558 <line:283:5, col:58> col:19 used hard_make_stable 'String (const char *, int)' static
| |-ParmVarDecl 0x56490dcda440 <col:36, col:48> col:48 s 'const char *'
| `-ParmVarDecl 0x56490dcda4c0 <col:51, col:55> col:55 len 'int'
|-CXXMethodDecl 0x56490dcda658 <line:284:5, line:286:5> line:284:27 used absent_memo 'String::memo_t *()' static inline
| `-CompoundStmt 0x56490dcdf210 <col:41, line:286:5>
|   `-ReturnStmt 0x56490dcdf200 <line:285:2, col:48>
|     `-CXXReinterpretCastExpr 0x56490dcdf1d0 <col:9, col:48> 'String::memo_t *' reinterpret_cast<struct String::memo_t *> <IntegralToPointer>
|       `-CXXFunctionalCastExpr 0x56490dcdf198 <col:36, col:47> 'uintptr_t':'unsigned long' functional cast to uintptr_t <NoOp>
|         `-ImplicitCastExpr 0x56490dcdf180 <col:46> 'uintptr_t':'unsigned long' <IntegralCast> part_of_explicit_cast
|           `-IntegerLiteral 0x56490dcdf160 <col:46> 'int' 1
|-CXXMethodDecl 0x56490dcda8f8 <line:287:5, col:68> col:20 create_memo 'String::memo_t *(char *, int, int)' static
| |-ParmVarDecl 0x56490dcda710 <col:32, col:38> col:38 space 'char *'
| |-ParmVarDecl 0x56490dcda790 <col:45, col:49> col:49 dirty 'int'
| `-ParmVarDecl 0x56490dcda810 <col:56, col:60> col:60 capacity 'int'
|-CXXMethodDecl 0x56490dcdaa88 <line:288:5, col:41> col:17 used delete_memo 'void (String::memo_t *)' static
| `-ParmVarDecl 0x56490dcda9c0 <col:29, col:37> col:37 memo 'String::memo_t *'
|-CXXMethodDecl 0x56490dcdab58 <line:289:5, col:30> col:17 hard_c_str 'const char *() const'
|-CXXMethodDecl 0x56490dcdad28 <line:290:5, col:46> col:10 used hard_equals 'bool (const char *, int) const'
| |-ParmVarDecl 0x56490dcdac10 <col:22, col:34> col:34 s 'const char *'
| `-ParmVarDecl 0x56490dcdac90 <col:37, col:41> col:41 len 'int'
|-VarDecl 0x56490dcdc9d0 <line:292:5, col:23> col:23 used null_data 'const char' static
|-VarDecl 0x56490dcdcb18 <line:293:5, col:34> col:23 used oom_data 'const char [15]' static
|-VarDecl 0x56490dcdcc58 <line:294:5, col:34> col:23 int_data 'const char [20]' static
|-VarDecl 0x56490dcdccd0 <line:295:5, col:24> col:24 used null_string_rep 'const String::rep_t' static
|-VarDecl 0x56490dcdcd48 <line:296:5, col:24> col:24 used oom_string_rep 'const String::rep_t' static
|-EnumDecl 0x56490dcdcdb0 <line:297:5, col:25> col:5
| `-EnumConstantDecl 0x56490dcdceb0 <col:12, col:22> col:12 referenced oom_len 'String::(anonymous enum at ../dummy_inc/click/string.hh:297:5)'
|   `-ImplicitCastExpr 0x56490dcdcf00 <col:22> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490dcdce90 <col:22> 'int' Int: 14
|       `-IntegerLiteral 0x56490dcdce70 <col:22> 'int' 14
|-CXXMethodDecl 0x56490dcdd118 <line:299:5, col:46> col:19 make_claim 'String (char *, int, int)' static
| |-ParmVarDecl 0x56490dcdcf30 <col:30, col:35> col:36 'char *'
| |-ParmVarDecl 0x56490dcdcfb0 <col:38> col:41 'int'
| `-ParmVarDecl 0x56490dcdd030 <col:43> col:46 'int'
|-FriendDecl 0x56490dcdd220 <line:301:5, col:19> col:12 'struct rep_t':'String::rep_t'
`-FriendDecl 0x56490dcdd2b0 <line:302:5, col:18> col:12 'class StringAccum':'StringAccum'

Layout: <CGRecordLayout
  LLVMType:%class.String = type { %"struct.String::rep_t" }
  NonVirtualBaseLLVMType:%class.String = type { %"struct.String::rep_t" }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490de298c0 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'typed_array_memory<String>'
|-CXXRecordDecl 0x56490de29a98 prev 0x56490de298c0 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56490de29b28 <col:46, col:52> col:46 public
|-TypedefDecl 0x56490de2d240 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490de2eba0 <line:13:5, col:31> col:31 type 'typename typed_array_memory<String>::type':'String'
| `-ElaboratedType 0x56490de2eb50 'typename typed_array_memory<String>::type' sugar
|   `-TypedefType 0x56490de2eb30 'typed_array_memory<String>::type' sugar
|     |-Typedef 0x56490de2d458 'type'
|     `-SubstTemplateTypeParmType 0x56490de2d420 'String' sugar
|       |-TemplateTypeParmType 0x56490dddcc00 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dddcbb0 'T'
|       `-RecordType 0x56490dccd350 'String'
|         `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de2ec58 <line:14:5, col:19> col:19 iterator 'vector_memory<typed_array_memory<String> >::type *'
| `-PointerType 0x56490de2ec20 'vector_memory<typed_array_memory<String> >::type *'
|   `-TypedefType 0x56490de2ec00 'vector_memory<typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56490de2eba0 'type'
|     `-ElaboratedType 0x56490de2eb50 'typename typed_array_memory<String>::type' sugar
|       `-TypedefType 0x56490de2eb30 'typed_array_memory<String>::type' sugar
|         |-Typedef 0x56490de2d458 'type'
|         `-SubstTemplateTypeParmType 0x56490de2d420 'String' sugar
|           |-TemplateTypeParmType 0x56490dddcc00 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56490dddcbb0 'T'
|           `-RecordType 0x56490dccd350 'String'
|             `-CXXRecord 0x56490dccd2c0 'String'
|-CXXMethodDecl 0x56490de2edd8 <line:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<typed_array_memory<String> >::type *) const' inline
| `-ParmVarDecl 0x56490de2ece8 <col:36, col:48> col:48 argp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXConstructorDecl 0x56490de2eec8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56490de2efa8 <line:23:5, col:20> col:5 ~vector_memory 'void ()' noexcept-unevaluated 0x56490de2efa8
|-CXXMethodDecl 0x56490de2f278 <line:25:5, col:43> col:10 assign 'void (const vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56490de2f180 <col:17, col:42> col:42 x 'const vector_memory<typed_array_memory<String> > &'
|-CXXMethodDecl 0x56490de2f4b8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56490de2f330 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490de2f3a8 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de2f688 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56490de2f578 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490de2f5f0 <col:30, col:42> col:42 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de2f7e8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56490de2f8b8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<typed_array_memory<String> >::iterator ()'
|-CXXMethodDecl 0x56490de2fb08 <line:34:5, col:48> col:14 insert 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56490de2f978 <col:21, col:30> col:30 it 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56490de2f9f0 <col:34, col:46> col:46 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de2fd68 <line:35:5, col:42> col:14 erase 'vector_memory<typed_array_memory<String> >::iterator (vector_memory<typed_array_memory<String> >::iterator, vector_memory<typed_array_memory<String> >::iterator)'
| |-ParmVarDecl 0x56490de2fbd8 <col:20, col:29> col:29 a 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
| `-ParmVarDecl 0x56490de2fc50 <col:32, col:41> col:41 b 'vector_memory<typed_array_memory<String> >::iterator':'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de2ff28 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56490de2fe38 <col:27, col:39> col:39 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de300e8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<typed_array_memory<String> >::type *)' inline
| `-ParmVarDecl 0x56490de2fff0 <col:37, col:43> col:43 vp 'vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de301a0 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490de30250 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490de30488 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<typed_array_memory<String> >::type *)'
| |-ParmVarDecl 0x56490de30300 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490de30378 <col:45, col:57> col:57 vp 'const vector_memory<typed_array_memory<String> >::type *'
|-CXXMethodDecl 0x56490de30728 <line:66:5, col:35> col:10 swap 'void (vector_memory<typed_array_memory<String> > &)'
| `-ParmVarDecl 0x56490de30630 <col:15, col:34> col:34 x 'vector_memory<typed_array_memory<String> > &'
|-FieldDecl 0x56490de307f0 <line:68:5, col:11> col:11 l_ 'vector_memory<typed_array_memory<String> >::type *'
|-FieldDecl 0x56490de30840 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56490de30890 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.8 = type { %class.String*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490de09750 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'String'
|-CXXRecordDecl 0x56490de28328 prev 0x56490de09750 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56490de29830 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<String>::type':'typed_array_memory<String>'
| `-ElaboratedType 0x56490de297e0 'typename array_memory<String>::type' sugar
|   `-TypedefType 0x56490de297c0 'conditional<false, sized_array_memory<24>, typed_array_memory<String> >::type' sugar
|     |-Typedef 0x56490de29670 'type'
|     `-SubstTemplateTypeParmType 0x56490de29500 'typed_array_memory<String>' sugar
|       |-TemplateTypeParmType 0x56490dd380b0 'F' dependent depth 0 index 1
|       | `-TemplateTypeParm 0x56490dd38058 'F'
|       `-RecordType 0x56490de29160 'typed_array_memory<String>'
|         `-ClassTemplateSpecialization 0x56490de29080 'typed_array_memory'
|-FieldDecl 0x56490de308e0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<String>::array_memory_type>':'vector_memory<typed_array_memory<String> >' mutable
|-AccessSpecDecl 0x56490de30930 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56490de30968 <line:118:5, col:15> col:15 value_type 'String':'String'
| `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|   |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56490dde8750 'T'
|   `-RecordType 0x56490dccd350 'String'
|     `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de309f8 <line:119:5, col:16> col:16 reference 'String &'
| `-LValueReferenceType 0x56490de309c0 'String &'
|   `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490dccd350 'String'
|       `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de30a88 <line:120:5, col:22> col:22 const_reference 'const String &'
| `-LValueReferenceType 0x56490de30a50 'const String &'
|   `-QualType 0x56490de283c1 'const String' const
|     `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490dccd350 'String'
|         `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de30b18 <line:121:5, col:16> col:16 pointer 'String *'
| `-PointerType 0x56490de30ae0 'String *'
|   `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490dccd350 'String'
|       `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de30ba8 <line:122:5, col:22> col:22 const_pointer 'const String *'
| `-PointerType 0x56490de30b70 'const String *'
|   `-QualType 0x56490de283c1 'const String' const
|     `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490dccd350 'String'
|         `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de31830 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<String>::type':'const String &'
| `-ElaboratedType 0x56490de317e0 'typename fast_argument<String>::type' sugar
|   `-TypedefType 0x56490de317c0 'fast_argument<String, true>::type' sugar
|     |-Typedef 0x56490de316f8 'type'
|     `-LValueReferenceType 0x56490de316c0 'const String &'
|       `-QualType 0x56490de31461 'const String' const
|         `-SubstTemplateTypeParmType 0x56490de31460 'String' sugar
|           |-TemplateTypeParmType 0x56490dd40ee0 'T' dependent depth 0 index 0
|           | `-TemplateTypeParm 0x56490dd40e88 'T'
|           `-RecordType 0x56490dccd350 'String'
|             `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de31898 <line:126:5, col:22> col:22 const_access_type 'const String &'
| `-LValueReferenceType 0x56490de30a50 'const String &'
|   `-QualType 0x56490de283c1 'const String' const
|     `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490dccd350 'String'
|         `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de318f0 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490de31958 <line:130:5, col:16> col:16 iterator 'String *'
| `-PointerType 0x56490de30ae0 'String *'
|   `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-RecordType 0x56490dccd350 'String'
|       `-CXXRecord 0x56490dccd2c0 'String'
|-TypedefDecl 0x56490de319c0 <line:131:5, col:22> col:22 const_iterator 'const String *'
| `-PointerType 0x56490de30b70 'const String *'
|   `-QualType 0x56490de283c1 'const String' const
|     `-SubstTemplateTypeParmType 0x56490de283c0 'String' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-RecordType 0x56490dccd350 'String'
|         `-CXXRecord 0x56490dccd2c0 'String'
|-EnumDecl 0x56490de31a18 <line:134:5> col:5
| `-EnumConstantDecl 0x56490de31b10 <col:12, col:40> col:12 RESERVE_GROW 'Vector<String>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56490de31af0 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56490dde9968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56490dde9940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56490dde9920 <col:40> 'int' 1
|-CXXConstructorDecl 0x56490de31b98 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56490de31e28 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56490de31c50 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490de31cf0 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXConstructorDecl 0x56490de320b8 <line:139:5, col:37> col:12 Vector 'void (const Vector<String> &)' inline
| `-ParmVarDecl 0x56490de31fa0 <col:19, col:36> col:36 x 'const Vector<String> &'
|-CXXConstructorDecl 0x56490de32378 <line:141:5, col:32> col:12 Vector 'void (Vector<String> &&)' inline
| `-ParmVarDecl 0x56490de32260 <col:19, col:31> col:31 x 'Vector<String> &&'
|-CXXMethodDecl 0x56490de32690 <line:144:5, col:51> col:23 operator= 'Vector<String> &(const Vector<String> &)' inline
| `-ParmVarDecl 0x56490de32570 <col:33, col:50> col:50 x 'const Vector<String> &'
|-CXXMethodDecl 0x56490de329a0 <line:146:5, col:46> col:23 operator= 'Vector<String> &(Vector<String> &&)' inline
| `-ParmVarDecl 0x56490de32880 <col:33, col:45> col:45 x 'Vector<String> &&'
|-CXXMethodDecl 0x56490de32c90 <line:148:5, col:70> col:23 assign 'Vector<String> &(Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56490de32ad8 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490de32b50 <col:43, col:69> col:63 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56490de32db8 <line:150:5, col:55> col:49 begin 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56490de32e68 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490de32ec0 <col:30> Inherited
|-CXXMethodDecl 0x56490de32f08 <line:151:5, col:53> col:49 end 'Vector<String>::iterator ()'
| |-NoInlineAttr 0x56490de32fb8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490de33010 <col:30> Inherited
|-CXXMethodDecl 0x56490de330d8 <line:152:5, col:63> col:55 used begin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56490de33188 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490de331e0 <col:30> Inherited
|-CXXMethodDecl 0x56490de33228 <line:153:5, col:61> col:55 used end 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56490de332d8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490de33330 <col:30> Inherited
|-CXXMethodDecl 0x56490de33378 <line:154:5, col:64> col:55 cbegin 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56490de33428 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490de33480 <col:30> Inherited
|-CXXMethodDecl 0x56490de334c8 <line:155:5, col:62> col:55 cend 'Vector<String>::const_iterator () const'
| |-NoInlineAttr 0x56490de33578 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490de335d0 <col:30> Inherited
|-CXXMethodDecl 0x56490de335f8 <line:157:5, col:29> col:22 used size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490de336a8 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490de33758 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56490de33918 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56490de33808 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490de33880 <col:37, col:63> col:57 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56490de33a68 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56490de339d8 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490de33c18 <line:163:5, col:65> col:43 operator[] 'String &(Vector::size_type)'
| |-ParmVarDecl 0x56490de33b20 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490de33cd0 <col:20>
| `-OptimizeNoneAttr 0x56490de33d28 <col:30>
|-CXXMethodDecl 0x56490de33e48 <line:164:5, col:73> col:49 operator[] 'const String &(Vector::size_type) const'
| |-ParmVarDecl 0x56490de33d50 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490de33f00 <col:20>
| `-OptimizeNoneAttr 0x56490de33f58 <col:30>
|-CXXMethodDecl 0x56490de34010 <line:165:5, col:29> col:15 at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490de33f80 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490de34158 <line:166:5, col:37> col:21 at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490de340c8 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490de34288 <line:167:5, col:21> col:15 front 'String &()' inline
|-CXXMethodDecl 0x56490de343b8 <line:168:5, col:29> col:21 front 'const String &() const' inline
|-CXXMethodDecl 0x56490de34488 <line:169:5, col:20> col:15 back 'String &()' inline
|-CXXMethodDecl 0x56490de34558 <line:170:5, col:28> col:21 back 'const String &() const' inline
|-CXXMethodDecl 0x56490de34698 <line:172:5, col:39> col:15 unchecked_at 'String &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490de34608 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490de347e0 <line:173:5, col:47> col:21 unchecked_at 'const String &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490de34750 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490de34928 <line:174:5, col:59> col:15 at_u 'String &(Vector::size_type)' inline
| |-ParmVarDecl 0x56490de34898 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490de349e0 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56490de34ae0 <line:175:5, col:71> col:21 at_u 'const String &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56490de34a50 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490de34b98 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56490de34c58 <line:177:5, col:20> col:15 data 'String *()' inline
|-CXXMethodDecl 0x56490de34d58 <line:178:5, col:28> col:21 data 'const String *() const' inline
|-CXXMethodDecl 0x56490de34ed8 <line:180:5, col:48> col:17 used push_back 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56490de34e18 <col:27, col:47> col:47 v 'Vector<String>::value_argument_type':'const String &'
|-FunctionTemplateDecl 0x56490de356b8 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56490de34f90 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<String>':'fast_argument<String, true>'
| `-CXXMethodDecl 0x56490de35618 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (String &&)' inline
|   `-ParmVarDecl 0x56490de35518 <col:58, col:62> col:62 v 'String &&'
|-CXXMethodDecl 0x56490de35798 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490de358e8 <line:186:5, col:49> col:17 push_front 'void (Vector<String>::value_argument_type)' inline
| `-ParmVarDecl 0x56490de35858 <col:28, col:48> col:48 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56490de359a0 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56490de35be8 <line:189:5, col:62> col:21 insert 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::value_argument_type)' inline
| |-ParmVarDecl 0x56490de35a60 <col:28, col:37> col:37 it 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56490de35ad8 <col:41, col:61> col:61 v 'Vector<String>::value_argument_type':'const String &'
|-CXXMethodDecl 0x56490de35d78 <line:190:5, col:38> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator)' inline
| `-ParmVarDecl 0x56490de35cb8 <col:27, col:36> col:36 it 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56490de35f88 <line:191:5, col:49> col:21 erase 'Vector<String>::iterator (Vector<String>::iterator, Vector<String>::iterator)' inline
| |-ParmVarDecl 0x56490de35e40 <col:27, col:36> col:36 a 'Vector<String>::iterator':'String *'
| `-ParmVarDecl 0x56490de35eb8 <col:39, col:48> col:48 b 'Vector<String>::iterator':'String *'
|-CXXMethodDecl 0x56490de36048 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56490de362a8 <line:195:5, col:34> col:17 swap 'void (Vector<String> &)' inline
| `-ParmVarDecl 0x56490de361b0 <col:22, col:33> col:33 x 'Vector<String> &'
`-CXXDestructorDecl 0x56490de36378 <line:111:7> col:7 implicit ~Vector 'void ()' inline default noexcept-unevaluated 0x56490de36378

Layout: <CGRecordLayout
  LLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  NonVirtualBaseLLVMType:%class.Vector.7 = type { %class.vector_memory.8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ErrorHandler
         0 |   (ErrorHandler vtable pointer)
         8 |   int _nerrors
           | [sizeof=16, dsize=12, align=8,
           |  nvsize=12, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dd1db10 <../dummy_inc/click/error.hh:90:1, line:592:1> line:90:7 referenced class ErrorHandler definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490dd1dc28 <col:1, col:7> col:7 implicit referenced class ErrorHandler
|-AccessSpecDecl 0x56490dd1dcb8 <col:22, col:28> col:22 public
|-EnumDecl 0x56490dd1dce0 <line:98:5, line:111:5> line:98:10 Level
| |-EnumConstantDecl 0x56490dd1ddf8 <line:99:2, col:14> col:2 el_abort 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1ddd8 <col:13, col:14> 'int' Int: -999
| |   `-UnaryOperator 0x56490dd1ddc0 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56490dd1dda0 <col:14> 'int' 999
| |-EnumConstantDecl 0x56490dd1dea0 <line:100:2, col:14> col:2 el_fatal 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1de80 <col:13, col:14> 'int' Int: -1
| |   `-UnaryOperator 0x56490dd1de68 <col:13, col:14> 'int' prefix '-'
| |     `-IntegerLiteral 0x56490dd1de48 <col:14> 'int' 1
| |-EnumConstantDecl 0x56490dd1df30 <line:102:2, col:17> col:2 el_emergency 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1df10 <col:17> 'int' Int: 0
| |   `-IntegerLiteral 0x56490dd1def0 <col:17> 'int' 0
| |-EnumConstantDecl 0x56490dd1dfc0 <line:103:2, col:13> col:2 el_alert 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1dfa0 <col:13> 'int' Int: 1
| |   `-IntegerLiteral 0x56490dd1df80 <col:13> 'int' 1
| |-EnumConstantDecl 0x56490dd1e050 <line:104:2, col:16> col:2 el_critical 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1e030 <col:16> 'int' Int: 2
| |   `-IntegerLiteral 0x56490dd1e010 <col:16> 'int' 2
| |-EnumConstantDecl 0x56490dd1e0e0 <line:105:2, col:13> col:2 referenced el_error 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1e0c0 <col:13> 'int' Int: 3
| |   `-IntegerLiteral 0x56490dd1e0a0 <col:13> 'int' 3
| |-EnumConstantDecl 0x56490dd1e170 <line:106:2, col:15> col:2 el_warning 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1e150 <col:15> 'int' Int: 4
| |   `-IntegerLiteral 0x56490dd1e130 <col:15> 'int' 4
| |-EnumConstantDecl 0x56490dd1e200 <line:107:2, col:14> col:2 el_notice 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1e1e0 <col:14> 'int' Int: 5
| |   `-IntegerLiteral 0x56490dd1e1c0 <col:14> 'int' 5
| |-EnumConstantDecl 0x56490dd1e290 <line:109:2, col:12> col:2 el_info 'ErrorHandler::Level'
| | `-ConstantExpr 0x56490dd1e270 <col:12> 'int' Int: 6
| |   `-IntegerLiteral 0x56490dd1e250 <col:12> 'int' 6
| `-EnumConstantDecl 0x56490dd1e320 <line:110:2, col:13> col:2 el_debug 'ErrorHandler::Level'
|   `-ConstantExpr 0x56490dd1e300 <col:13> 'int' Int: 7
|     `-IntegerLiteral 0x56490dd1e2e0 <col:13> 'int' 7
|-VarDecl 0x56490dd1e3e8 <line:114:5, col:31> col:23 e_abort 'const char []' static
|-VarDecl 0x56490dd1e470 <col:5, line:115:10> col:2 e_fatal 'const char []' static
|-VarDecl 0x56490dd1e4f8 <line:114:5, line:116:14> col:2 e_emergency 'const char []' static
|-VarDecl 0x56490dd1e580 <line:114:5, line:117:10> col:2 e_alert 'const char []' static
|-VarDecl 0x56490dd1e608 <line:114:5, line:118:13> col:2 e_critical 'const char []' static
|-VarDecl 0x56490dd1e690 <line:114:5, line:119:10> col:2 e_error 'const char []' static
|-VarDecl 0x56490dd1e740 <line:114:5, line:120:12> col:2 e_warning 'const char []' static
|-VarDecl 0x56490dd1e7c8 <line:114:5, line:121:22> col:2 e_warning_annotated 'const char []' static
|-VarDecl 0x56490dd1e850 <line:114:5, line:122:11> col:2 e_notice 'const char []' static
|-VarDecl 0x56490dd1e8d8 <line:114:5, line:123:9> col:2 e_info 'const char []' static
|-VarDecl 0x56490dd1e960 <line:114:5, line:124:10> col:2 e_debug 'const char []' static
|-CXXConstructorDecl 0x56490dd1ea90 <line:127:5, line:129:5> line:127:5 used ErrorHandler 'void ()'
| |-CXXCtorInitializer Field 0x56490dd240d8 '_nerrors' 'int'
| | `-IntegerLiteral 0x56490dd24868 <line:128:13> 'int' 0
| `-CompoundStmt 0x56490dd26610 <col:16, line:129:5>
|-CXXDestructorDecl 0x56490dd1eb80 <line:131:5, line:132:5> line:131:13 used ~ErrorHandler 'void () noexcept' virtual
| `-CompoundStmt 0x56490dd26620 <col:29, line:132:5>
|-CXXMethodDecl 0x56490dd1ed38 <line:148:5, col:62> col:26 static_initialize 'ErrorHandler *(ErrorHandler *)' static
| `-ParmVarDecl 0x56490dd1ec70 <col:44, col:58> col:58 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56490dd1ee00 <line:154:5, col:32> col:17 static_cleanup 'void ()' static
|-CXXMethodDecl 0x56490dd1eee8 <line:159:5, line:161:5> line:159:26 default_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56490dd26678 <col:44, line:161:5>
|   `-ReturnStmt 0x56490dd26668 <line:160:2, col:9>
|     `-ImplicitCastExpr 0x56490dd26650 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56490dd26630 <col:9> 'ErrorHandler *' lvalue Var 0x56490dd24138 'the_default_handler' 'ErrorHandler *'
|-CXXMethodDecl 0x56490dd1f058 <line:168:5, col:55> col:17 set_default_handler 'void (ErrorHandler *)' static
| `-ParmVarDecl 0x56490dd1ef98 <col:37, col:51> col:51 errh 'ErrorHandler *'
|-CXXMethodDecl 0x56490dd1f120 <line:171:5, line:173:5> line:171:26 silent_handler 'ErrorHandler *()' static
| `-CompoundStmt 0x56490dd266d8 <col:43, line:173:5>
|   `-ReturnStmt 0x56490dd266c8 <line:172:2, col:9>
|     `-ImplicitCastExpr 0x56490dd266b0 <col:9> 'ErrorHandler *' <LValueToRValue>
|       `-DeclRefExpr 0x56490dd26690 <col:9> 'ErrorHandler *' lvalue Var 0x56490dd241b0 'the_silent_handler' 'ErrorHandler *'
|-VarDecl 0x56490dd1f1d8 <line:176:5, col:22> col:22 ok_result 'const int' static
|-VarDecl 0x56490dd1f258 <line:178:5, col:22> col:22 error_result 'const int' static
|-CXXMethodDecl 0x56490dd1f3a0 <line:186:5, col:36> col:10 debug 'void (const char *, ...)'
| `-ParmVarDecl 0x56490dd1f2d8 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1f4f0 <line:188:5, col:38> col:10 message 'void (const char *, ...)'
| `-ParmVarDecl 0x56490dd1f460 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1f648 <line:193:5, col:37> col:9 warning 'int (const char *, ...)'
| `-ParmVarDecl 0x56490dd1f5b0 <col:17, col:29> col:29 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1f7a0 <line:196:5, col:35> col:9 used error 'int (const char *, ...)'
| `-ParmVarDecl 0x56490dd1f708 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1f8f8 <line:201:5, col:35> col:9 fatal 'int (const char *, ...)'
| `-ParmVarDecl 0x56490dd1f860 <col:15, col:27> col:27 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1fb10 <line:204:5, col:61> col:10 ldebug 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56490dd1f9b0 <col:17, col:31> col:31 landmark 'const String &'
| `-ParmVarDecl 0x56490dd1fa30 <col:41, col:53> col:53 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1fce8 <line:206:5, col:63> col:10 lmessage 'void (const String &, const char *, ...)'
| |-ParmVarDecl 0x56490dd1fbd0 <col:19, col:33> col:33 landmark 'const String &'
| `-ParmVarDecl 0x56490dd1fc50 <col:43, col:55> col:55 fmt 'const char *'
|-CXXMethodDecl 0x56490dd1ff08 <line:208:5, col:62> col:9 lwarning 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56490dd1fda8 <col:18, col:32> col:32 landmark 'const String &'
| `-ParmVarDecl 0x56490dd1fe28 <col:42, col:54> col:54 fmt 'const char *'
|-CXXMethodDecl 0x56490dd200e8 <line:210:5, col:60> col:9 lerror 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56490dd1ffc8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56490dd20048 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56490dd202c8 <line:212:5, col:60> col:9 lfatal 'int (const String &, const char *, ...)'
| |-ParmVarDecl 0x56490dd201a8 <col:16, col:30> col:30 landmark 'const String &'
| `-ParmVarDecl 0x56490dd20228 <col:40, col:52> col:52 fmt 'const char *'
|-CXXMethodDecl 0x56490dd20450 <line:226:5, col:35> col:9 used xmessage 'int (const String &)'
| `-ParmVarDecl 0x56490dd20388 <col:18, col:32> col:32 str 'const String &'
|-CXXMethodDecl 0x56490dd20620 <line:232:5, line:234:5> line:232:9 used xmessage 'int (const String &, const String &)'
| |-ParmVarDecl 0x56490dd20508 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56490dd20580 <col:38, col:52> col:52 used str 'const String &'
| `-CompoundStmt 0x56490dd26938 <col:57, line:234:5>
|   `-ReturnStmt 0x56490dd26928 <line:233:2, col:41>
|     `-ExprWithCleanups 0x56490dd26910 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56490dd268b8 <col:9, col:41> 'int'
|         |-MemberExpr 0x56490dd26888 <col:9> '<bound member function type>' ->xmessage 0x56490dd20450
|         | `-CXXThisExpr 0x56490dd26878 <col:9> 'ErrorHandler *' implicit this
|         `-MaterializeTemporaryExpr 0x56490dd268f8 <col:18, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56490dd268e0 <col:18, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56490dd26858 <col:18, col:40> 'String' (CXXTemporary 0x56490dd26858)
|               `-CallExpr 0x56490dd26820 <col:18, col:40> 'String'
|                 |-ImplicitCastExpr 0x56490dd26808 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|                 | `-DeclRefExpr 0x56490dd26778 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56490dd228c0 'combine_anno' 'String (const String &, const String &)'
|                 |-DeclRefExpr 0x56490dd26798 <col:31> 'const String' lvalue ParmVar 0x56490dd20580 'str' 'const String &'
|                 `-DeclRefExpr 0x56490dd267b8 <col:36> 'const String' lvalue ParmVar 0x56490dd20508 'anno' 'const String &'
|-CXXMethodDecl 0x56490dd209d0 <line:241:5, line:243:5> line:241:9 xmessage 'int (const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56490dd20750 <col:18, col:32> col:32 used anno 'const String &'
| |-ParmVarDecl 0x56490dd207d0 <col:38, col:50> col:50 used fmt 'const char *'
| |-ParmVarDecl 0x56490dd208a0 <col:55, col:63> col:63 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56490dd26bc8 <col:68, line:243:5>
|   `-ReturnStmt 0x56490dd26bb8 <line:242:2, col:41>
|     `-ExprWithCleanups 0x56490dd26ba0 <col:9, col:41> 'int'
|       `-CXXMemberCallExpr 0x56490dd26b40 <col:9, col:41> 'int'
|         |-MemberExpr 0x56490dd26b10 <col:9> '<bound member function type>' ->xmessage 0x56490dd20620
|         | `-CXXThisExpr 0x56490dd26b00 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56490dd269d8 <col:18> 'const String' lvalue ParmVar 0x56490dd20750 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56490dd26b88 <col:24, col:40> 'const String' lvalue
|           `-ImplicitCastExpr 0x56490dd26b70 <col:24, col:40> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56490dd26ae0 <col:24, col:40> 'String' (CXXTemporary 0x56490dd26ae0)
|               `-CXXMemberCallExpr 0x56490dd26a78 <col:24, col:40> 'String'
|                 |-MemberExpr 0x56490dd26a08 <col:24> '<bound member function type>' ->vformat 0x56490dd21bb0
|                 | `-CXXThisExpr 0x56490dd269f8 <col:24> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56490dd26aa8 <col:32> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56490dd26a38 <col:32> 'const char *' lvalue ParmVar 0x56490dd207d0 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56490dd26ac0 <col:37> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56490dd26a58 <col:37> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56490dd208a0 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56490dd20c70 <line:251:5, line:254:5> line:251:9 used xmessage 'int (const String &, const String &, const String &)'
| |-ParmVarDecl 0x56490dd20a98 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56490dd20b10 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56490dd20b88 <line:252:4, col:18> col:18 used str 'const String &'
| `-CompoundStmt 0x56490dd26f08 <col:23, line:254:5>
|   `-ReturnStmt 0x56490dd26ef8 <line:253:2, col:71>
|     `-ExprWithCleanups 0x56490dd26ee0 <col:9, col:71> 'int'
|       `-CXXMemberCallExpr 0x56490dd26e80 <col:9, col:71> 'int'
|         |-MemberExpr 0x56490dd26e50 <col:9> '<bound member function type>' ->xmessage 0x56490dd20620
|         | `-CXXThisExpr 0x56490dd26e40 <col:9> 'ErrorHandler *' implicit this
|         |-MaterializeTemporaryExpr 0x56490dd26ec8 <col:18, col:65> 'const String' lvalue
|         | `-ImplicitCastExpr 0x56490dd26eb0 <col:18, col:65> 'const String' <NoOp>
|         |   `-CXXBindTemporaryExpr 0x56490dd26e00 <col:18, col:65> 'String' (CXXTemporary 0x56490dd26e00)
|         |     `-CallExpr 0x56490dd26d98 <col:18, col:65> 'String'
|         |       |-ImplicitCastExpr 0x56490dd26d80 <col:18> 'String (*)(const String &, const String &)' <FunctionToPointerDecay>
|         |       | `-DeclRefExpr 0x56490dd26c68 <col:18> 'String (const String &, const String &)' lvalue CXXMethod 0x56490dd228c0 'combine_anno' 'String (const String &, const String &)'
|         |       |-DeclRefExpr 0x56490dd26c88 <col:31> 'const String' lvalue ParmVar 0x56490dd20b10 'anno' 'const String &'
|         |       `-MaterializeTemporaryExpr 0x56490dd26de0 <col:37, col:64> 'const String' lvalue
|         |         `-ImplicitCastExpr 0x56490dd26dc8 <col:37, col:64> 'const String' <NoOp>
|         |           `-CXXBindTemporaryExpr 0x56490dd26d60 <col:37, col:64> 'String' (CXXTemporary 0x56490dd26d60)
|         |             `-CallExpr 0x56490dd26d30 <col:37, col:64> 'String'
|         |               |-ImplicitCastExpr 0x56490dd26d18 <col:37> 'String (*)(const String &)' <FunctionToPointerDecay>
|         |               | `-DeclRefExpr 0x56490dd26ca8 <col:37> 'String (const String &)' lvalue CXXMethod 0x56490dd22f18 'make_landmark_anno' 'String (const String &)'
|         |               `-DeclRefExpr 0x56490dd26cc8 <col:56> 'const String' lvalue ParmVar 0x56490dd20a98 'landmark' 'const String &'
|         `-DeclRefExpr 0x56490dd26e20 <col:68> 'const String' lvalue ParmVar 0x56490dd20b88 'str' 'const String &'
|-CXXMethodDecl 0x56490dd20ff0 <line:264:5, line:267:5> line:264:9 xmessage 'int (const String &, const String &, const char *, __va_list_tag *)'
| |-ParmVarDecl 0x56490dd20d38 <col:18, col:32> col:32 used landmark 'const String &'
| |-ParmVarDecl 0x56490dd20db0 <col:42, col:56> col:56 used anno 'const String &'
| |-ParmVarDecl 0x56490dd20e30 <line:265:4, col:16> col:16 used fmt 'const char *'
| |-ParmVarDecl 0x56490dd20ea8 <col:21, col:29> col:29 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56490dd271c0 <col:34, line:267:5>
|   `-ReturnStmt 0x56490dd271b0 <line:266:2, col:51>
|     `-ExprWithCleanups 0x56490dd27198 <col:9, col:51> 'int'
|       `-CXXMemberCallExpr 0x56490dd27130 <col:9, col:51> 'int'
|         |-MemberExpr 0x56490dd27100 <col:9> '<bound member function type>' ->xmessage 0x56490dd20c70
|         | `-CXXThisExpr 0x56490dd270f0 <col:9> 'ErrorHandler *' implicit this
|         |-DeclRefExpr 0x56490dd26fa8 <col:18> 'const String' lvalue ParmVar 0x56490dd20d38 'landmark' 'const String &'
|         |-DeclRefExpr 0x56490dd26fc8 <col:28> 'const String' lvalue ParmVar 0x56490dd20db0 'anno' 'const String &'
|         `-MaterializeTemporaryExpr 0x56490dd27180 <col:34, col:50> 'const String' lvalue
|           `-ImplicitCastExpr 0x56490dd27168 <col:34, col:50> 'const String' <NoOp>
|             `-CXXBindTemporaryExpr 0x56490dd270d0 <col:34, col:50> 'String' (CXXTemporary 0x56490dd270d0)
|               `-CXXMemberCallExpr 0x56490dd27068 <col:34, col:50> 'String'
|                 |-MemberExpr 0x56490dd26ff8 <col:34> '<bound member function type>' ->vformat 0x56490dd21bb0
|                 | `-CXXThisExpr 0x56490dd26fe8 <col:34> 'ErrorHandler *' implicit this
|                 |-ImplicitCastExpr 0x56490dd27098 <col:42> 'const char *' <LValueToRValue>
|                 | `-DeclRefExpr 0x56490dd27028 <col:42> 'const char *' lvalue ParmVar 0x56490dd20e30 'fmt' 'const char *'
|                 `-ImplicitCastExpr 0x56490dd270b0 <col:47> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                   `-DeclRefExpr 0x56490dd27048 <col:47> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56490dd20ea8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56490dd21100 <line:286:5, line:288:5> line:286:9 nerrors 'int () const'
| `-CompoundStmt 0x56490dd27240 <col:25, line:288:5>
|   `-ReturnStmt 0x56490dd27230 <line:287:2, col:9>
|     `-ImplicitCastExpr 0x56490dd27218 <col:9> 'int' <LValueToRValue>
|       `-MemberExpr 0x56490dd271e8 <col:9> 'const int' lvalue ->_nerrors 0x56490dd240d8
|         `-CXXThisExpr 0x56490dd271d8 <col:9> 'const ErrorHandler *' implicit this
|-CXXMethodDecl 0x56490dd21310 <line:349:5, col:66> col:19 xformat 'String (int, const char *, ...)' static
| |-ParmVarDecl 0x56490dd211b8 <col:27, col:31> col:31 default_flags 'int'
| `-ParmVarDecl 0x56490dd21238 <col:46, col:58> col:58 fmt 'const char *'
|-CXXMethodDecl 0x56490dd215f8 <line:351:5, col:75> col:19 used vxformat 'String (int, const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56490dd213d8 <col:28, col:32> col:32 default_flags 'int'
| |-ParmVarDecl 0x56490dd21458 <col:47, col:59> col:59 fmt 'const char *'
| `-ParmVarDecl 0x56490dd214d0 <col:64, col:72> col:72 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56490dd21790 <line:353:5, col:47> col:19 xformat 'String (const char *, ...)' static
| `-ParmVarDecl 0x56490dd216c8 <col:27, col:39> col:39 fmt 'const char *'
|-CXXMethodDecl 0x56490dd219d8 <line:355:5, line:357:5> line:355:19 vxformat 'String (const char *, __va_list_tag *)' static
| |-ParmVarDecl 0x56490dd21850 <col:28, col:40> col:40 used fmt 'const char *'
| |-ParmVarDecl 0x56490dd218c8 <col:45, col:53> col:53 used val '__va_list_tag *':'__va_list_tag *'
| `-CompoundStmt 0x56490dd274a0 <col:58, line:357:5>
|   `-ReturnStmt 0x56490dd27490 <line:356:2, col:29>
|     `-ExprWithCleanups 0x56490dd27478 <col:9, col:29> 'String'
|       `-CXXConstructExpr 0x56490dd27448 <col:9, col:29> 'String' 'void (String &&)' elidable
|         `-MaterializeTemporaryExpr 0x56490dd27430 <col:9, col:29> 'String' xvalue
|           `-CXXBindTemporaryExpr 0x56490dd27410 <col:9, col:29> 'String' (CXXTemporary 0x56490dd27410)
|             `-CallExpr 0x56490dd273a0 <col:9, col:29> 'String'
|               |-ImplicitCastExpr 0x56490dd27388 <col:9> 'String (*)(int, const char *, __va_list_tag *)' <FunctionToPointerDecay>
|               | `-DeclRefExpr 0x56490dd27308 <col:9> 'String (int, const char *, __va_list_tag *)' lvalue CXXMethod 0x56490dd215f8 'vxformat' 'String (int, const char *, __va_list_tag *)'
|               |-IntegerLiteral 0x56490dd272a8 <col:18> 'int' 0
|               |-ImplicitCastExpr 0x56490dd273d8 <col:21> 'const char *' <LValueToRValue>
|               | `-DeclRefExpr 0x56490dd272c8 <col:21> 'const char *' lvalue ParmVar 0x56490dd21850 'fmt' 'const char *'
|               `-ImplicitCastExpr 0x56490dd273f0 <col:26> '__va_list_tag *':'__va_list_tag *' <LValueToRValue>
|                 `-DeclRefExpr 0x56490dd272e8 <col:26> '__va_list_tag *':'__va_list_tag *' lvalue ParmVar 0x56490dd218c8 'val' '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56490dd21bb0 <line:369:5, col:56> col:20 used vformat 'String (const char *, __va_list_tag *)' virtual
| |-ParmVarDecl 0x56490dd21aa0 <col:28, col:40> col:40 fmt 'const char *'
| `-ParmVarDecl 0x56490dd21b18 <col:45, col:53> col:53 val '__va_list_tag *':'__va_list_tag *'
|-CXXMethodDecl 0x56490dd21d08 <line:379:5, col:39> col:12 format 'String (const char *, ...)'
| `-ParmVarDecl 0x56490dd21c78 <col:19, col:31> col:31 fmt 'const char *'
|-CXXMethodDecl 0x56490dd21e88 <line:393:5, col:46> col:20 decorate 'String (const String &)' virtual
| `-ParmVarDecl 0x56490dd21dc0 <col:29, col:43> col:43 str 'const String &'
|-CXXMethodDecl 0x56490dd22120 <line:424:5, col:69> col:19 emit 'void *(const String &, void *, bool)' virtual
| |-ParmVarDecl 0x56490dd21f40 <col:24, col:38> col:38 str 'const String &'
| |-ParmVarDecl 0x56490dd21fc0 <col:43, col:49> col:49 user_data 'void *'
| `-ParmVarDecl 0x56490dd22038 <col:60, col:65> col:65 more 'bool'
|-CXXMethodDecl 0x56490dd22280 <line:438:5, line:441:5> line:438:18 account 'void (int)' virtual
| |-ParmVarDecl 0x56490dd221f0 <col:26, col:30> col:30 used level 'int'
| `-CompoundStmt 0x56490dd275b8 <col:37, line:441:5>
|   `-IfStmt 0x56490dd275a0 <line:439:2, line:440:8>
|     |-BinaryOperator 0x56490dd27528 <line:439:6, col:15> 'bool' '<='
|     | |-ImplicitCastExpr 0x56490dd274f8 <col:6> 'int' <LValueToRValue>
|     | | `-DeclRefExpr 0x56490dd274b8 <col:6> 'int' lvalue ParmVar 0x56490dd221f0 'level' 'int'
|     | `-ImplicitCastExpr 0x56490dd27510 <col:15> 'int' <IntegralCast>
|     |   `-DeclRefExpr 0x56490dd274d8 <col:15> 'ErrorHandler::Level' EnumConstant 0x56490dd1e0e0 'el_error' 'ErrorHandler::Level'
|     `-UnaryOperator 0x56490dd27588 <line:440:6, col:8> 'int' lvalue prefix '++'
|       `-MemberExpr 0x56490dd27558 <col:8> 'int' lvalue ->_nerrors 0x56490dd240d8
|         `-CXXThisExpr 0x56490dd27548 <col:8> 'ErrorHandler *' implicit this
|-CXXMethodDecl 0x56490dd22348 <line:446:5, line:448:5> line:446:18 clear 'void ()' virtual
| `-CompoundStmt 0x56490dd27650 <col:26, line:448:5>
|   `-BinaryOperator 0x56490dd27630 <line:447:2, col:13> 'int' lvalue '='
|     |-MemberExpr 0x56490dd275e0 <col:2> 'int' lvalue ->_nerrors 0x56490dd240d8
|     | `-CXXThisExpr 0x56490dd275d0 <col:2> 'ErrorHandler *' implicit this
|     `-IntegerLiteral 0x56490dd27610 <col:13> 'int' 0
|-CXXMethodDecl 0x56490dd22510 <line:466:5, col:66> col:19 used make_anno 'String (const char *, const String &)' static
| |-ParmVarDecl 0x56490dd22400 <col:29, col:41> col:41 name 'const char *'
| `-ParmVarDecl 0x56490dd22478 <col:47, col:61> col:61 value 'const String &'
|-CXXMethodDecl 0x56490dd228c0 <line:482:5, col:69> col:19 used combine_anno 'String (const String &, const String &)' static
| |-ParmVarDecl 0x56490dd225d0 <col:32, col:46> col:46 str 'const String &'
| `-ParmVarDecl 0x56490dd22648 <col:51, col:65> col:65 anno 'const String &'
|-CXXMethodDecl 0x56490dd22b78 <line:516:5, line:517:68> line:516:24 parse_anno 'const char *(const String &, const char *, const char *, ...)' static
| |-ParmVarDecl 0x56490dd22980 <col:35, col:49> col:49 str 'const String &'
| |-ParmVarDecl 0x56490dd22a00 <line:517:3, col:15> col:15 begin 'const char *'
| |-ParmVarDecl 0x56490dd22a80 <col:22, col:34> col:34 end 'const char *'
| `-SentinelAttr 0x56490dd22c30 <col:59> 0 0
|-CXXMethodDecl 0x56490dd22dc8 <line:527:5, line:534:5> line:527:24 skip_anno 'const char *(const char *, const char *)' static
| |-ParmVarDecl 0x56490dd22ca8 <col:34, col:46> col:46 used begin 'const char *'
| |-ParmVarDecl 0x56490dd22d28 <col:53, col:65> col:65 used end 'const char *'
| `-CompoundStmt 0x56490dd27cc0 <col:70, line:534:5>
|   |-DeclStmt 0x56490dd277c0 <line:528:2, col:20>
|   | |-VarDecl 0x56490dd27678 <col:2, col:9> col:9 used name 'String' callinit destroyed
|   | | `-CXXConstructExpr 0x56490dd276e0 <col:9> 'String' 'void ()'
|   | `-VarDecl 0x56490dd27718 <col:2, col:15> col:15 used value 'String' callinit destroyed
|   |   `-CXXConstructExpr 0x56490dd27780 <col:15> 'String' 'void ()'
|   |-DeclStmt 0x56490dd27890 <line:529:2, col:23>
|   | `-VarDecl 0x56490dd277f0 <col:2, col:18> col:14 used x 'const char *' cinit
|   |   `-ImplicitCastExpr 0x56490dd27878 <col:18> 'const char *' <LValueToRValue>
|   |     `-DeclRefExpr 0x56490dd27858 <col:18> 'const char *' lvalue ParmVar 0x56490dd22ca8 'begin' 'const char *'
|   |-DoStmt 0x56490dd27c58 <line:530:2, line:532:15>
|   | |-CompoundStmt 0x56490dd27b88 <line:530:5, line:532:2>
|   | | `-ExprWithCleanups 0x56490dd27b70 <line:531:6, col:58> 'const char *' lvalue
|   | |   `-BinaryOperator 0x56490dd27b50 <col:6, col:58> 'const char *' lvalue '='
|   | |     |-DeclRefExpr 0x56490dd278a8 <col:6> 'const char *' lvalue Var 0x56490dd277f0 'x' 'const char *'
|   | |     `-CallExpr 0x56490dd27aa0 <col:10, col:58> 'const char *'
|   | |       |-ImplicitCastExpr 0x56490dd27a88 <col:10> 'const char *(*)(const String &, const char *, const char *, String *, String *, bool)' <FunctionToPointerDecay>
|   | |       | `-DeclRefExpr 0x56490dd27a40 <col:10> 'const char *(const String &, const char *, const char *, String *, String *, bool)' lvalue CXXMethod 0x56490dd245b0 'skip_anno' 'const char *(const String &, const char *, const char *, String *, String *, bool)'
|   | |       |-MaterializeTemporaryExpr 0x56490dd27b08 <col:20, col:27> 'const String' lvalue
|   | |       | `-ImplicitCastExpr 0x56490dd27af0 <col:20, col:27> 'const String' <NoOp>
|   | |       |   `-CXXBindTemporaryExpr 0x56490dd27960 <col:20, col:27> 'String' (CXXTemporary 0x56490dd27960)
|   | |       |     `-CXXTemporaryObjectExpr 0x56490dd27928 <col:20, col:27> 'String' 'void ()'
|   | |       |-ImplicitCastExpr 0x56490dd27b20 <col:30> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56490dd27980 <col:30> 'const char *' lvalue Var 0x56490dd277f0 'x' 'const char *'
|   | |       |-ImplicitCastExpr 0x56490dd27b38 <col:33> 'const char *' <LValueToRValue>
|   | |       | `-DeclRefExpr 0x56490dd279a0 <col:33> 'const char *' lvalue ParmVar 0x56490dd22d28 'end' 'const char *'
|   | |       |-UnaryOperator 0x56490dd279e0 <col:38, col:39> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56490dd279c0 <col:39> 'String' lvalue Var 0x56490dd27678 'name' 'String'
|   | |       |-UnaryOperator 0x56490dd27a18 <col:45, col:46> 'String *' prefix '&' cannot overflow
|   | |       | `-DeclRefExpr 0x56490dd279f8 <col:46> 'String' lvalue Var 0x56490dd27718 'value' 'String'
|   | |       `-CXXBoolLiteralExpr 0x56490dd27a30 <col:53> 'bool' false
|   | `-ImplicitCastExpr 0x56490dd27c40 <line:532:11> 'bool' <MemberPointerToBoolean>
|   |   `-ImplicitCastExpr 0x56490dd27c28 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|   |     `-CXXMemberCallExpr 0x56490dd27c08 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|   |       `-MemberExpr 0x56490dd27bd8 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|   |         `-ImplicitCastExpr 0x56490dd27bc0 <col:11> 'const String' lvalue <NoOp>
|   |           `-DeclRefExpr 0x56490dd27ba0 <col:11> 'String' lvalue Var 0x56490dd27678 'name' 'String'
|   `-ReturnStmt 0x56490dd27cb0 <line:533:2, col:9>
|     `-ImplicitCastExpr 0x56490dd27c98 <col:9> 'const char *' <LValueToRValue>
|       `-DeclRefExpr 0x56490dd27c78 <col:9> 'const char *' lvalue Var 0x56490dd277f0 'x' 'const char *'
|-CXXMethodDecl 0x56490dd22f18 <line:543:5, line:550:5> line:543:19 used make_landmark_anno 'String (const String &)' static
| |-ParmVarDecl 0x56490dd22e88 <col:38, col:52> col:52 used x 'const String &'
| `-CompoundStmt 0x56490dd282c8 <col:55, line:550:5>
|   `-IfStmt 0x56490dd282a0 <line:544:2, line:549:20> has_else
|     |-BinaryOperator 0x56490dd27f00 <line:544:6, col:19> 'bool' '&&'
|     | |-ImplicitCastExpr 0x56490dd27ee8 <col:6> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56490dd27ed0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56490dd27eb0 <col:6> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56490dd27e80 <col:6> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|     | |       `-DeclRefExpr 0x56490dd27d20 <col:6> 'const String' lvalue ParmVar 0x56490dd22e88 'x' 'const String &'
|     | `-BinaryOperator 0x56490dd27e60 <col:11, col:19> 'bool' '=='
|     |   |-ImplicitCastExpr 0x56490dd27e30 <col:11, col:14> 'int' <IntegralCast>
|     |   | `-CXXOperatorCallExpr 0x56490dd27de0 <col:11, col:14> 'char'
|     |   |   |-ImplicitCastExpr 0x56490dd27dc8 <col:12, col:14> 'char (*)(int) const' <FunctionToPointerDecay>
|     |   |   | `-DeclRefExpr 0x56490dd27d80 <col:12, col:14> 'char (int) const' lvalue CXXMethod 0x56490dcebfb0 'operator[]' 'char (int) const'
|     |   |   |-DeclRefExpr 0x56490dd27d40 <col:11> 'const String' lvalue ParmVar 0x56490dd22e88 'x' 'const String &'
|     |   |   `-IntegerLiteral 0x56490dd27d60 <col:13> 'int' 0
|     |   `-ImplicitCastExpr 0x56490dd27e48 <col:19> 'int' <IntegralCast>
|     |     `-CharacterLiteral 0x56490dd27e18 <col:19> 'char' 123
|     |-ReturnStmt 0x56490dd27f70 <line:545:6, col:13>
|     | `-CXXConstructExpr 0x56490dd27f40 <col:13> 'String' 'void (const String &)'
|     |   `-DeclRefExpr 0x56490dd27f20 <col:13> 'const String' lvalue ParmVar 0x56490dd22e88 'x' 'const String &'
|     `-IfStmt 0x56490dd28278 <line:546:7, line:549:20> has_else
|       |-ImplicitCastExpr 0x56490dd28008 <line:546:11> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56490dd27ff0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56490dd27fd0 <col:11> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56490dd27fa0 <col:11> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |       `-DeclRefExpr 0x56490dd27f80 <col:11> 'const String' lvalue ParmVar 0x56490dd22e88 'x' 'const String &'
|       |-ReturnStmt 0x56490dd28190 <line:547:6, col:29>
|       | `-ExprWithCleanups 0x56490dd28178 <col:13, col:29> 'String'
|       |   `-CXXConstructExpr 0x56490dd28148 <col:13, col:29> 'String' 'void (String &&)' elidable
|       |     `-MaterializeTemporaryExpr 0x56490dd28130 <col:13, col:29> 'String' xvalue
|       |       `-CXXBindTemporaryExpr 0x56490dd28110 <col:13, col:29> 'String' (CXXTemporary 0x56490dd28110)
|       |         `-CallExpr 0x56490dd280c0 <col:13, col:29> 'String'
|       |           |-ImplicitCastExpr 0x56490dd280a8 <col:13> 'String (*)(const char *, const String &)' <FunctionToPointerDecay>
|       |           | `-DeclRefExpr 0x56490dd28020 <col:13> 'String (const char *, const String &)' lvalue CXXMethod 0x56490dd22510 'make_anno' 'String (const char *, const String &)'
|       |           |-ImplicitCastExpr 0x56490dd280f0 <col:23> 'const char *' <ArrayToPointerDecay>
|       |           | `-StringLiteral 0x56490dd28040 <col:23> 'const char [2]' lvalue "l"
|       |           `-DeclRefExpr 0x56490dd28060 <col:28> 'const String' lvalue ParmVar 0x56490dd22e88 'x' 'const String &'
|       `-ReturnStmt 0x56490dd28268 <line:549:6, col:20>
|         `-ExprWithCleanups 0x56490dd28250 <col:13, col:20> 'String'
|           `-CXXConstructExpr 0x56490dd28220 <col:13, col:20> 'String' 'void (String &&)' elidable
|             `-MaterializeTemporaryExpr 0x56490dd28208 <col:13, col:20> 'String' xvalue
|               `-CXXBindTemporaryExpr 0x56490dd281e8 <col:13, col:20> 'String' (CXXTemporary 0x56490dd281e8)
|                 `-CXXTemporaryObjectExpr 0x56490dd281b0 <col:13, col:20> 'String' 'void ()'
|-CXXMethodDecl 0x56490dd23118 <line:559:5, col:76> col:19 clean_landmark 'String (const String &, bool)' static
| |-ParmVarDecl 0x56490dd22fd0 <col:34, col:48> col:48 landmark 'const String &'
| `-ParmVarDecl 0x56490dd23048 <col:58, col:71> col:63 colon 'bool' cinit
|   `-CXXBoolLiteralExpr 0x56490dd24858 <col:71> 'bool' false
|-CXXRecordDecl 0x56490dd231c8 <line:563:5, col:12> col:12 referenced struct Conversion
|-TypedefDecl 0x56490dd234c8 <line:564:5, col:60> col:22 referenced ConversionFunction 'String (*)(int, __va_list_tag *)'
| `-PointerType 0x56490dd23460 'String (*)(int, __va_list_tag *)'
|   `-ParenType 0x56490dd23400 'String (int, __va_list_tag *)' sugar
|     `-FunctionProtoType 0x56490dd233c0 'String (int, __va_list_tag *)' cdecl
|       |-RecordType 0x56490dccd350 'String'
|       | `-CXXRecord 0x56490dccd2c0 'String'
|       |-BuiltinType 0x56490da8f370 'int'
|       `-DecayedType 0x56490dd20870 '__va_list_tag *' sugar
|         |-TypedefType 0x56490dd20840 'va_list' sugar
|         | |-Typedef 0x56490dd03fc0 'va_list'
|         | `-TypedefType 0x56490dd03f70 '__gnuc_va_list' sugar
|         |   |-Typedef 0x56490dcff348 '__gnuc_va_list'
|         |   `-TypedefType 0x56490dcff2b0 '__builtin_va_list' sugar
|         |     |-Typedef 0x56490dad0bd8 '__builtin_va_list'
|         |     `-ConstantArrayType 0x56490dad0b80 '__va_list_tag [1]' 1 
|         |       `-RecordType 0x56490da900c0 '__va_list_tag'
|         |         `-CXXRecord 0x56490da90028 '__va_list_tag'
|         `-PointerType 0x56490dd09b40 '__va_list_tag *'
|           `-RecordType 0x56490da900c0 '__va_list_tag'
|             `-CXXRecord 0x56490da90028 '__va_list_tag'
|-EnumDecl 0x56490dd23520 <line:565:5, line:576:5> line:565:10 ConversionFlags
| |-EnumConstantDecl 0x56490dd23620 <line:566:2, col:16> col:2 cf_zero_pad 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23b80 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd23600 <col:16> 'int' Int: 1
| |     `-IntegerLiteral 0x56490dd235e0 <col:16> 'int' 1
| |-EnumConstantDecl 0x56490dd236b0 <line:567:2, col:21> col:2 cf_plus_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23b98 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd23690 <col:21> 'int' Int: 2
| |     `-IntegerLiteral 0x56490dd23670 <col:21> 'int' 2
| |-EnumConstantDecl 0x56490dd23740 <line:568:2, col:22> col:2 cf_space_positive 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23bb0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd23720 <col:22> 'int' Int: 4
| |     `-IntegerLiteral 0x56490dd23700 <col:22> 'int' 4
| |-EnumConstantDecl 0x56490dd237d0 <line:569:2, col:17> col:2 cf_left_just 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23bc8 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd237b0 <col:17> 'int' Int: 8
| |     `-IntegerLiteral 0x56490dd23790 <col:17> 'int' 8
| |-EnumConstantDecl 0x56490dd23860 <line:570:2, col:22> col:2 cf_alternate_form 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23be0 <col:22> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd23840 <col:22> 'int' Int: 16
| |     `-IntegerLiteral 0x56490dd23820 <col:22> 'int' 16
| |-EnumConstantDecl 0x56490dd238f0 <line:571:2, col:19> col:2 cf_singlequote 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23bf8 <col:19> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd238d0 <col:19> 'int' Int: 32
| |     `-IntegerLiteral 0x56490dd238b0 <col:19> 'int' 32
| |-EnumConstantDecl 0x56490dd23980 <line:572:2, col:17> col:2 cf_uppercase 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23c10 <col:17> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd23960 <col:17> 'int' Int: 64
| |     `-IntegerLiteral 0x56490dd23940 <col:17> 'int' 64
| |-EnumConstantDecl 0x56490dd23a10 <line:573:2, col:14> col:2 cf_signed 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23c28 <col:14> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd239f0 <col:14> 'int' Int: 128
| |     `-IntegerLiteral 0x56490dd239d0 <col:14> 'int' 128
| |-EnumConstantDecl 0x56490dd23aa0 <line:574:2, col:16> col:2 cf_negative 'ErrorHandler::ConversionFlags'
| | `-ImplicitCastExpr 0x56490dd23c40 <col:16> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490dd23a80 <col:16> 'int' Int: 256
| |     `-IntegerLiteral 0x56490dd23a60 <col:16> 'int' 256
| `-EnumConstantDecl 0x56490dd23b30 <line:575:2, col:12> col:2 cf_utf8 'ErrorHandler::ConversionFlags'
|   `-ImplicitCastExpr 0x56490dd23c58 <col:12> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490dd23b10 <col:12> 'int' Int: 1024
|       `-IntegerLiteral 0x56490dd23af0 <col:12> 'int' 1024
|-CXXMethodDecl 0x56490dd23e68 <line:577:5, col:82> col:24 add_conversion 'ErrorHandler::Conversion *(const String &, ErrorHandler::ConversionFunction)' static
| |-ParmVarDecl 0x56490dd23c80 <col:39, col:53> col:53 name 'const String &'
| `-ParmVarDecl 0x56490dd23d20 <col:59, col:78> col:78 func 'ErrorHandler::ConversionFunction':'String (*)(int, __va_list_tag *)'
|-CXXMethodDecl 0x56490dd23ff0 <line:578:5, col:56> col:16 remove_conversion 'int (ErrorHandler::Conversion *)' static
| `-ParmVarDecl 0x56490dd23f28 <col:34, col:46> col:46 conversion 'ErrorHandler::Conversion *'
|-AccessSpecDecl 0x56490dd24098 <line:580:3, col:10> col:3 private
|-FieldDecl 0x56490dd240d8 <line:582:5, col:9> col:9 referenced _nerrors 'int'
|-VarDecl 0x56490dd24138 <line:584:5, col:26> col:26 used the_default_handler 'ErrorHandler *' static
|-VarDecl 0x56490dd241b0 <line:585:5, col:26> col:26 used the_silent_handler 'ErrorHandler *' static
|-CXXMethodDecl 0x56490dd245b0 <line:587:5, line:590:14> line:587:24 used skip_anno 'const char *(const String &, const char *, const char *, String *, String *, bool)' static
| |-ParmVarDecl 0x56490dd24228 <col:34, col:48> col:48 str 'const String &'
| |-ParmVarDecl 0x56490dd242a8 <line:588:6, col:18> col:18 begin 'const char *'
| |-ParmVarDecl 0x56490dd24328 <col:25, col:37> col:37 end 'const char *'
| |-ParmVarDecl 0x56490dd243a0 <line:589:6, col:14> col:14 name_result 'String *'
| |-ParmVarDecl 0x56490dd24418 <col:27, col:35> col:35 value_result 'String *'
| `-ParmVarDecl 0x56490dd24490 <line:590:6, col:11> col:11 raw 'bool'
|-CXXMethodDecl 0x56490dd246d8 <line:90:7> col:7 implicit operator= 'ErrorHandler &(const ErrorHandler &)' inline default noexcept-unevaluated 0x56490dd246d8
| `-ParmVarDecl 0x56490dd247e8 <col:7> col:7 'const ErrorHandler &'
`-CXXConstructorDecl 0x56490dd2df58 <col:7> col:7 implicit constexpr ErrorHandler 'void (const ErrorHandler &)' inline default noexcept-unevaluated 0x56490dd2df58
  `-ParmVarDecl 0x56490dd2e068 <col:7> col:7 'const ErrorHandler &'

Layout: <CGRecordLayout
  LLVMType:%class.ErrorHandler = type <{ i32 (...)**, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.ErrorHandler.base = type <{ i32 (...)**, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class ArgContext
         0 |   const class Element * _context
         8 |   class ErrorHandler * _errh
        16 |   const char * _arg_keyword
        24 |   _Bool _read_status
           | [sizeof=32, dsize=25, align=8,
           |  nvsize=25, nvalign=8]

*** Dumping AST Record Layout
         0 | class vector_memory<class sized_array_memory<4> >
         0 |   vector_memory<class sized_array_memory<4> >::type * l_
         8 |   vector_memory::size_type n_
        12 |   vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Vector<int>
         0 |   class vector_memory<class sized_array_memory<4> > vm_
         0 |     vector_memory<class sized_array_memory<4> >::type * l_
         8 |     vector_memory::size_type n_
        12 |     vector_memory::size_type capacity_
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping AST Record Layout
         0 | class Args
         0 |   class ArgContext (base)
         0 |     const class Element * _context
         8 |     class ErrorHandler * _errh
        16 |     const char * _arg_keyword
        24 |     _Bool _read_status
        25 |   _Bool _my_conf
        26 |   _Bool _status
        27 |   uint8_t _simple_slotpos
        32 |   Vector<class String> * _conf
        40 |   class Vector<int> _kwpos
        40 |     class vector_memory<class sized_array_memory<4> > vm_
        40 |       vector_memory<class sized_array_memory<4> >::type * l_
        48 |       vector_memory::size_type n_
        52 |       vector_memory::size_type capacity_
        56 |   struct Args::Slot * _slots
        64 |   uint8_t [48] _simple_slotbuf
           | [sizeof=112, dsize=112, align=8,
           |  nvsize=112, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dfeca00 prev 0x56490dfeb548 <../dummy_inc/click/args.hh:29:1, line:85:1> line:29:7 referenced class ArgContext definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dfecaf8 <col:1, col:7> col:7 implicit referenced class ArgContext
|-AccessSpecDecl 0x56490dfecb88 <col:20, col:26> col:20 public
|-CXXConstructorDecl 0x56490dfecc98 <line:33:5, line:38:5> line:33:5 ArgContext 'void (ErrorHandler *)'
| |-ParmVarDecl 0x56490dfecbc0 <col:16, col:37> col:30 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56490dfee070 <col:37> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56490dfee050 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfedbe8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56490dfee100 <line:34:17> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56490dfee0c0 <col:17> 'ErrorHandler *' lvalue ParmVar 0x56490dfecbc0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56490dfedc50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56490dfee180 <col:37> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56490dfee140 <col:37> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfedcb0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56490dfee1c0 <col:54> 'bool' false
| `-CompoundStmt 0x56490dfee2c8 <col:61, line:38:5>
|   `-BinaryOperator 0x56490dfee2a8 <line:36:9, col:20> 'const Element *' lvalue '='
|     |-MemberExpr 0x56490dfee240 <col:9> 'const Element *' lvalue ->_context 0x56490dfedb88
|     | `-CXXThisExpr 0x56490dfee230 <col:9> 'ArgContext *' implicit this
|     `-ImplicitCastExpr 0x56490dfee290 <col:20> 'const Element *' <NullToPointer>
|       `-IntegerLiteral 0x56490dfee270 <col:20> 'int' 0
|-CXXConstructorDecl 0x56490dfecea8 <line:44:5, line:46:5> line:44:5 ArgContext 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56490dfecd58 <col:16, col:31> col:31 used context 'const Element *'
| |-ParmVarDecl 0x56490dfecdd0 <col:40, col:61> col:54 used errh 'ErrorHandler *' cinit
| | `-ImplicitCastExpr 0x56490dfee0a8 <col:61> 'ErrorHandler *' <NullToPointer>
| |   `-IntegerLiteral 0x56490dfee088 <col:61> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfedb88 '_context' 'const Element *'
| | `-ImplicitCastExpr 0x56490dfee320 <line:45:20> 'const Element *' <LValueToRValue>
| |   `-DeclRefExpr 0x56490dfee2e0 <col:20> 'const Element *' lvalue ParmVar 0x56490dfecd58 'context' 'const Element *'
| |-CXXCtorInitializer Field 0x56490dfedbe8 '_errh' 'ErrorHandler *'
| | `-ImplicitCastExpr 0x56490dfee3a0 <col:36> 'ErrorHandler *' <LValueToRValue>
| |   `-DeclRefExpr 0x56490dfee360 <col:36> 'ErrorHandler *' lvalue ParmVar 0x56490dfecdd0 'errh' 'ErrorHandler *'
| |-CXXCtorInitializer Field 0x56490dfedc50 '_arg_keyword' 'const char *'
| | `-ImplicitCastExpr 0x56490dfee420 <col:56> 'const char *' <NullToPointer>
| |   `-IntegerLiteral 0x56490dfee3e0 <col:56> 'int' 0
| |-CXXCtorInitializer Field 0x56490dfedcb0 '_read_status' 'bool'
| | `-CXXBoolLiteralExpr 0x56490dfee460 <col:73> 'bool' false
| `-CompoundStmt 0x56490dfee4d8 <col:80, line:46:5>
|-CXXMethodDecl 0x56490dfecfd8 <line:49:5, line:51:5> line:49:20 context 'const Element *() const'
| `-CompoundStmt 0x56490dfee550 <col:36, line:51:5>
|   `-ReturnStmt 0x56490dfee540 <line:50:9, col:16>
|     `-ImplicitCastExpr 0x56490dfee528 <col:16> 'const Element *' <LValueToRValue>
|       `-MemberExpr 0x56490dfee4f8 <col:16> 'const Element *const' lvalue ->_context 0x56490dfedb88
|         `-CXXThisExpr 0x56490dfee4e8 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56490dfed0c8 <line:55:5, line:57:5> line:55:19 errh 'ErrorHandler *() const'
| `-CompoundStmt 0x56490dfee5d0 <col:32, line:57:5>
|   `-ReturnStmt 0x56490dfee5c0 <line:56:9, col:16>
|     `-ImplicitCastExpr 0x56490dfee5a8 <col:16> 'ErrorHandler *' <LValueToRValue>
|       `-MemberExpr 0x56490dfee578 <col:16> 'ErrorHandler *const' lvalue ->_errh 0x56490dfedbe8
|         `-CXXThisExpr 0x56490dfee568 <col:16> 'const ArgContext *' implicit this
|-CXXMethodDecl 0x56490dfed188 <line:62:5, col:27> col:12 error_prefix 'String () const'
|-CXXMethodDecl 0x56490dfed310 <line:65:5, col:38> col:10 referenced error 'void (const char *, ...) const'
| `-ParmVarDecl 0x56490dfed240 <col:16, col:28> col:28 fmt 'const char *'
|-CXXMethodDecl 0x56490dfed460 <line:68:5, col:40> col:10 warning 'void (const char *, ...) const'
| `-ParmVarDecl 0x56490dfed3d0 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56490dfed5b0 <line:71:5, col:40> col:10 message 'void (const char *, ...) const'
| `-ParmVarDecl 0x56490dfed520 <col:18, col:30> col:30 fmt 'const char *'
|-CXXMethodDecl 0x56490dfed7b8 <line:73:5, col:58> col:10 xmessage 'void (const String &, const String &) const'
| |-ParmVarDecl 0x56490dfed668 <col:19, col:33> col:33 anno 'const String &'
| `-ParmVarDecl 0x56490dfed6e0 <col:39, col:53> col:53 str 'const String &'
|-CXXMethodDecl 0x56490dfeda98 <line:74:5, col:69> col:10 xmessage 'void (const String &, const char *, __va_list_tag *) const'
| |-ParmVarDecl 0x56490dfed878 <col:19, col:33> col:33 anno 'const String &'
| |-ParmVarDecl 0x56490dfed8f8 <col:39, col:51> col:51 fmt 'const char *'
| `-ParmVarDecl 0x56490dfed970 <col:56, col:64> col:64 val '__va_list_tag *':'__va_list_tag *'
|-AccessSpecDecl 0x56490dfedb50 <line:76:3, col:12> col:3 protected
|-FieldDecl 0x56490dfedb88 <line:79:5, col:20> col:20 referenced _context 'const Element *'
|-FieldDecl 0x56490dfedbe8 <line:81:5, col:19> col:19 referenced _errh 'ErrorHandler *'
|-FieldDecl 0x56490dfedc50 <line:82:5, col:17> col:17 _arg_keyword 'const char *'
|-FieldDecl 0x56490dfedcb0 <line:83:5, col:18> col:18 referenced _read_status 'bool' mutable
|-CXXConstructorDecl 0x56490dfedd00 <line:29:7> col:7 implicit constexpr ArgContext 'void (const ArgContext &)' inline default trivial noexcept-unevaluated 0x56490dfedd00
| `-ParmVarDecl 0x56490dfede18 <col:7> col:7 'const ArgContext &'
|-CXXMethodDecl 0x56490dfedeb8 <col:7> col:7 implicit operator= 'ArgContext &(const ArgContext &)' inline default trivial noexcept-unevaluated 0x56490dfedeb8
| `-ParmVarDecl 0x56490dfedfc8 <col:7> col:7 'const ArgContext &'
`-CXXDestructorDecl 0x56490e1a4e98 <col:7> col:7 implicit ~ArgContext 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.ArgContext = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8, [7 x i8] }>
  NonVirtualBaseLLVMType:%class.ArgContext.base = type <{ %class.Element*, %class.ErrorHandler*, i8*, i8 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e015b10 <../dummy_inc/click/vector.hh:11:1, line:71:1> line:11:30 class vector_memory definition
|-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-TemplateArgument type 'sized_array_memory<4>'
|-CXXRecordDecl 0x56490e015ce8 prev 0x56490e015b10 <col:24, col:30> col:30 implicit class vector_memory
|-AccessSpecDecl 0x56490e015d78 <col:46, col:52> col:46 public
|-TypedefDecl 0x56490e015da0 <line:12:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01ab90 <line:13:5, col:31> col:31 type 'typename sized_array_memory<4>::type':'char_array<4>'
| `-ElaboratedType 0x56490e01ab40 'typename sized_array_memory<4>::type' sugar
|   `-TypedefType 0x56490e016250 'sized_array_memory<4>::type' sugar
|     |-Typedef 0x56490e016150 'type'
|     `-TemplateSpecializationType 0x56490e0160e0 'char_array<4UL>' sugar char_array
|       |-TemplateArgument expr
|       | `-ConstantExpr 0x56490e015fc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|       |   `-SubstNonTypeTemplateParmExpr 0x56490e015fa0 <col:24> 'unsigned long'
|       |     `-IntegerLiteral 0x56490e015f80 <col:24> 'unsigned long' 4
|       `-RecordType 0x56490e0160c0 'char_array<4>'
|         `-ClassTemplateSpecialization 0x56490e015fe0 'char_array'
|-TypedefDecl 0x56490e01ac48 <../dummy_inc/click/vector.hh:14:5, col:19> col:19 iterator 'vector_memory<sized_array_memory<4> >::type *'
| `-PointerType 0x56490e01ac10 'vector_memory<sized_array_memory<4> >::type *'
|   `-TypedefType 0x56490e01abf0 'vector_memory<sized_array_memory<4> >::type' sugar
|     |-Typedef 0x56490e01ab90 'type'
|     `-ElaboratedType 0x56490e01ab40 'typename sized_array_memory<4>::type' sugar
|       `-TypedefType 0x56490e016250 'sized_array_memory<4>::type' sugar
|         |-Typedef 0x56490e016150 'type'
|         `-TemplateSpecializationType 0x56490e0160e0 'char_array<4UL>' sugar char_array
|           |-TemplateArgument expr
|           | `-ConstantExpr 0x56490e015fc0 <../dummy_inc/click/array_memory.hh:11:24> 'unsigned long' Int: 4
|           |   `-SubstNonTypeTemplateParmExpr 0x56490e015fa0 <col:24> 'unsigned long'
|           |     `-IntegerLiteral 0x56490e015f80 <col:24> 'unsigned long' 4
|           `-RecordType 0x56490e0160c0 'char_array<4>'
|             `-ClassTemplateSpecialization 0x56490e015fe0 'char_array'
|-CXXMethodDecl 0x56490e01adc8 <../dummy_inc/click/vector.hh:15:5, line:18:5> line:15:17 need_argument_copy 'bool (const vector_memory<sized_array_memory<4> >::type *) const' inline
| `-ParmVarDecl 0x56490e01acd8 <col:36, col:48> col:48 argp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXConstructorDecl 0x56490e01aeb8 <line:20:5, line:22:5> line:20:5 vector_memory 'void ()'
|-CXXDestructorDecl 0x56490e01af98 <line:23:5, col:20> col:5 ~vector_memory 'void () noexcept'
|-CXXMethodDecl 0x56490e01b268 <line:25:5, col:43> col:10 assign 'void (const vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56490e01b170 <col:17, col:42> col:42 x 'const vector_memory<sized_array_memory<4> > &'
|-CXXMethodDecl 0x56490e01b4a8 <line:26:5, col:44> col:10 assign 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56490e01b320 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e01b398 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01b678 <line:27:5, col:44> col:10 resize 'void (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56490e01b568 <col:17, col:27> col:27 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e01b5e0 <col:30, col:42> col:42 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01b7d8 <line:28:5, line:30:5> line:28:14 begin 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56490e01b8a8 <line:31:5, line:33:5> line:31:14 end 'vector_memory<sized_array_memory<4> >::iterator ()'
|-CXXMethodDecl 0x56490e01baf8 <line:34:5, col:48> col:14 insert 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56490e01b968 <col:21, col:30> col:30 it 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56490e01b9e0 <col:34, col:46> col:46 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01bd58 <line:35:5, col:42> col:14 erase 'vector_memory<sized_array_memory<4> >::iterator (vector_memory<sized_array_memory<4> >::iterator, vector_memory<sized_array_memory<4> >::iterator)'
| |-ParmVarDecl 0x56490e01bbc8 <col:20, col:29> col:29 a 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
| `-ParmVarDecl 0x56490e01bc40 <col:32, col:41> col:41 b 'vector_memory<sized_array_memory<4> >::iterator':'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01bf18 <line:36:5, line:43:5> line:36:17 push_back 'void (const vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56490e01be28 <col:27, col:39> col:39 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01c0d8 <line:45:5, line:52:5> line:45:17 move_construct_back 'void (vector_memory<sized_array_memory<4> >::type *)' inline
| `-ParmVarDecl 0x56490e01bfe0 <col:37, col:43> col:43 vp 'vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01c190 <line:54:5, line:59:5> line:54:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e01c240 <line:60:5, line:64:5> line:60:17 clear 'void ()' inline
|-CXXMethodDecl 0x56490e01c478 <line:65:5, col:59> col:10 reserve_and_push_back 'bool (vector_memory::size_type, const vector_memory<sized_array_memory<4> >::type *)'
| |-ParmVarDecl 0x56490e01c2f0 <col:32, col:42> col:42 n 'vector_memory::size_type':'int'
| `-ParmVarDecl 0x56490e01c368 <col:45, col:57> col:57 vp 'const vector_memory<sized_array_memory<4> >::type *'
|-CXXMethodDecl 0x56490e01c718 <line:66:5, col:35> col:10 swap 'void (vector_memory<sized_array_memory<4> > &)'
| `-ParmVarDecl 0x56490e01c620 <col:15, col:34> col:34 x 'vector_memory<sized_array_memory<4> > &'
|-FieldDecl 0x56490e01c7e0 <line:68:5, col:11> col:11 l_ 'vector_memory<sized_array_memory<4> >::type *'
|-FieldDecl 0x56490e01c830 <line:69:5, col:15> col:15 n_ 'vector_memory::size_type':'int'
`-FieldDecl 0x56490e01c880 <line:70:5, col:15> col:15 capacity_ 'vector_memory::size_type':'int'

Layout: <CGRecordLayout
  LLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  NonVirtualBaseLLVMType:%class.vector_memory.10 = type { %struct.char_array.11*, i32, i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e014518 <../dummy_inc/click/vector.hh:110:1, line:197:1> line:111:7 class Vector definition
|-DefinitionData standard_layout has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor exists non_trivial user_declared needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment exists non_trivial user_declared needs_overload_resolution
| `-Destructor simple non_trivial needs_overload_resolution
|-TemplateArgument type 'int'
|-CXXRecordDecl 0x56490e014728 prev 0x56490e014518 <col:1, col:7> col:7 implicit class Vector
|-TypedefDecl 0x56490e015a80 <line:113:5, col:44> col:44 array_memory_type 'typename array_memory<int>::type':'sized_array_memory<4>'
| `-ElaboratedType 0x56490e015a30 'typename array_memory<int>::type' sugar
|   `-TypedefType 0x56490e015a10 'conditional<true, sized_array_memory<4>, typed_array_memory<int> >::type' sugar
|     |-Typedef 0x56490e0158c0 'type'
|     `-SubstTemplateTypeParmType 0x56490e0156e0 'sized_array_memory<4>' sugar
|       |-TemplateTypeParmType 0x56490dd37900 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd378a8 'T'
|       `-RecordType 0x56490e015230 'sized_array_memory<4>'
|         `-ClassTemplateSpecialization 0x56490e015148 'sized_array_memory'
|-FieldDecl 0x56490e01c8d0 <line:114:5, col:46> col:46 vm_ 'vector_memory<Vector<int>::array_memory_type>':'vector_memory<sized_array_memory<4> >' mutable
|-AccessSpecDecl 0x56490e01c920 <line:116:3, col:9> col:3 public
|-TypedefDecl 0x56490e01c958 <line:118:5, col:15> col:15 value_type 'int':'int'
| `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|   |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|   | `-TemplateTypeParm 0x56490dde8750 'T'
|   `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01c9e8 <line:119:5, col:16> col:16 reference 'int &'
| `-LValueReferenceType 0x56490e01c9b0 'int &'
|   `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01caa8 <line:120:5, col:22> col:22 const_reference 'const int &'
| `-LValueReferenceType 0x56490e01ca70 'const int &'
|   `-QualType 0x56490e0147c1 'const int' const
|     `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01cb38 <line:121:5, col:16> col:16 pointer 'int *'
| `-PointerType 0x56490e01cb00 'int *'
|   `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01cbc8 <line:122:5, col:22> col:22 const_pointer 'const int *'
| `-PointerType 0x56490e01cb90 'const int *'
|   `-QualType 0x56490e0147c1 'const int' const
|     `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01d7b0 <line:125:5, col:45> col:45 value_argument_type 'typename fast_argument<int>::type':'int'
| `-ElaboratedType 0x56490e01d760 'typename fast_argument<int>::type' sugar
|   `-TypedefType 0x56490e01d740 'fast_argument<int, false>::type' sugar
|     |-Typedef 0x56490e01d6d0 'type'
|     `-SubstTemplateTypeParmType 0x56490e01d490 'int' sugar
|       |-TemplateTypeParmType 0x56490dd41610 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dd415c0 'T'
|       `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01d818 <line:126:5, col:22> col:22 const_access_type 'const int &'
| `-LValueReferenceType 0x56490e01ca70 'const int &'
|   `-QualType 0x56490e0147c1 'const int' const
|     `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01d870 <line:128:5, col:17> col:17 size_type 'int'
| `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01d8d8 <line:130:5, col:16> col:16 iterator 'int *'
| `-PointerType 0x56490e01cb00 'int *'
|   `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|     |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|     | `-TemplateTypeParm 0x56490dde8750 'T'
|     `-BuiltinType 0x56490da8f370 'int'
|-TypedefDecl 0x56490e01d940 <line:131:5, col:22> col:22 const_iterator 'const int *'
| `-PointerType 0x56490e01cb90 'const int *'
|   `-QualType 0x56490e0147c1 'const int' const
|     `-SubstTemplateTypeParmType 0x56490e0147c0 'int' sugar
|       |-TemplateTypeParmType 0x56490dde87a0 'T' dependent depth 0 index 0
|       | `-TemplateTypeParm 0x56490dde8750 'T'
|       `-BuiltinType 0x56490da8f370 'int'
|-EnumDecl 0x56490e022080 <line:134:5> col:5
| `-EnumConstantDecl 0x56490e022170 <col:12, col:40> col:12 RESERVE_GROW 'Vector<int>::(anonymous enum at ../dummy_inc/click/vector.hh:134:5)'
|   `-ConstantExpr 0x56490e022150 <col:27, col:40> 'Vector::size_type':'int' Int: -1
|     `-CStyleCastExpr 0x56490dde9968 <col:27, col:40> 'Vector::size_type':'int' <NoOp>
|       `-UnaryOperator 0x56490dde9940 <col:39, col:40> 'int' prefix '-'
|         `-IntegerLiteral 0x56490dde9920 <col:40> 'int' 1
|-CXXConstructorDecl 0x56490e0221f8 <line:137:5, col:28> col:21 Vector 'void ()' inline
|-CXXConstructorDecl 0x56490e022448 <line:138:5, col:62> col:21 Vector 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e0222b0 <col:28, col:38> col:38 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e022350 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXConstructorDecl 0x56490e022708 <line:139:5, col:37> col:12 Vector 'void (const Vector<int> &)' inline
| `-ParmVarDecl 0x56490e0225f0 <col:19, col:36> col:36 x 'const Vector<int> &'
|-CXXConstructorDecl 0x56490e0229c8 <line:141:5, col:32> col:12 Vector 'void (Vector<int> &&)' inline
| `-ParmVarDecl 0x56490e0228b0 <col:19, col:31> col:31 x 'Vector<int> &&'
|-CXXMethodDecl 0x56490e022d10 <line:144:5, col:51> col:23 operator= 'Vector<int> &(const Vector<int> &)' inline
| `-ParmVarDecl 0x56490e022bf0 <col:33, col:50> col:50 x 'const Vector<int> &'
|-CXXMethodDecl 0x56490e023020 <line:146:5, col:46> col:23 operator= 'Vector<int> &(Vector<int> &&)' inline
| `-ParmVarDecl 0x56490e022f00 <col:33, col:45> col:45 x 'Vector<int> &&'
|-CXXMethodDecl 0x56490e023310 <line:148:5, col:70> col:23 assign 'Vector<int> &(Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e023158 <col:30, col:40> col:40 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e0231d0 <col:43, col:69> col:63 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56490e023438 <line:150:5, col:55> col:49 begin 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56490e023518 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e023570 <col:30> Inherited
|-CXXMethodDecl 0x56490e0235b8 <line:151:5, col:53> col:49 end 'Vector<int>::iterator ()'
| |-NoInlineAttr 0x56490e023668 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0236c0 <col:30> Inherited
|-CXXMethodDecl 0x56490e023788 <line:152:5, col:63> col:55 begin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56490e023838 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e023890 <col:30> Inherited
|-CXXMethodDecl 0x56490e0238d8 <line:153:5, col:61> col:55 end 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56490e023988 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e0239e0 <col:30> Inherited
|-CXXMethodDecl 0x56490e023a28 <line:154:5, col:64> col:55 cbegin 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56490e023ad8 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e023b30 <col:30> Inherited
|-CXXMethodDecl 0x56490e023b78 <line:155:5, col:62> col:55 cend 'Vector<int>::const_iterator () const'
| |-NoInlineAttr 0x56490e023c28 <col:20> Inherited
| `-OptimizeNoneAttr 0x56490e023c80 <col:30> Inherited
|-CXXMethodDecl 0x56490e023ca8 <line:157:5, col:29> col:22 size 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e023d58 <line:158:5, col:33> col:22 capacity 'Vector::size_type () const' inline
|-CXXMethodDecl 0x56490e023e08 <line:159:5, col:25> col:17 empty 'bool () const' inline
|-CXXMethodDecl 0x56490e023fc8 <line:160:5, col:64> col:17 resize 'void (Vector::size_type, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e023eb8 <col:24, col:34> col:34 n 'Vector::size_type':'int'
| `-ParmVarDecl 0x56490e023f30 <col:37, col:63> col:57 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56490e024118 <line:161:5, col:36> col:17 reserve 'bool (Vector::size_type)' inline
| `-ParmVarDecl 0x56490e024088 <col:25, col:35> col:35 n 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e0242c8 <line:163:5, col:65> col:43 operator[] 'int &(Vector::size_type)'
| |-ParmVarDecl 0x56490e0241d0 <col:54, col:64> col:64 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e024380 <col:20>
| `-OptimizeNoneAttr 0x56490e0243d8 <col:30>
|-CXXMethodDecl 0x56490e0244f8 <line:164:5, col:73> col:49 operator[] 'const int &(Vector::size_type) const'
| |-ParmVarDecl 0x56490e024400 <col:60, col:70> col:70 i 'Vector::size_type':'int'
| |-NoInlineAttr 0x56490e0245b0 <col:20>
| `-OptimizeNoneAttr 0x56490e024608 <col:30>
|-CXXMethodDecl 0x56490e0246c0 <line:165:5, col:29> col:15 at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e024630 <col:18, col:28> col:28 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e024808 <line:166:5, col:37> col:21 at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e024778 <col:24, col:34> col:34 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e024938 <line:167:5, col:21> col:15 front 'int &()' inline
|-CXXMethodDecl 0x56490e024a68 <line:168:5, col:29> col:21 front 'const int &() const' inline
|-CXXMethodDecl 0x56490e024b38 <line:169:5, col:20> col:15 back 'int &()' inline
|-CXXMethodDecl 0x56490e024c08 <line:170:5, col:28> col:21 back 'const int &() const' inline
|-CXXMethodDecl 0x56490e024d48 <line:172:5, col:39> col:15 unchecked_at 'int &(Vector::size_type)' inline
| `-ParmVarDecl 0x56490e024cb8 <col:28, col:38> col:38 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e024e90 <line:173:5, col:47> col:21 unchecked_at 'const int &(Vector::size_type) const' inline
| `-ParmVarDecl 0x56490e024e00 <col:34, col:44> col:44 i 'Vector::size_type':'int'
|-CXXMethodDecl 0x56490e024fd8 <line:174:5, col:59> col:15 at_u 'int &(Vector::size_type)' inline
| |-ParmVarDecl 0x56490e024f48 <col:20, col:30> col:30 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e025090 <col:48> Inherited "" ""
|-CXXMethodDecl 0x56490e025190 <line:175:5, col:71> col:21 at_u 'const int &(Vector::size_type) const' inline
| |-ParmVarDecl 0x56490e025100 <col:26, col:36> col:36 i 'Vector::size_type':'int'
| `-DeprecatedAttr 0x56490e025248 <col:60> Inherited "" ""
|-CXXMethodDecl 0x56490e025308 <line:177:5, col:20> col:15 data 'int *()' inline
|-CXXMethodDecl 0x56490e025408 <line:178:5, col:28> col:21 data 'const int *() const' inline
|-CXXMethodDecl 0x56490e025588 <line:180:5, col:48> col:17 push_back 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e0254c8 <col:27, col:47> col:47 v 'Vector<int>::value_argument_type':'int'
|-FunctionTemplateDecl 0x56490e025d48 <line:182:5, line:183:63> col:48 push_back
| |-TemplateTypeParmDecl 0x56490e025640 <line:182:15, col:43> col:24 typename depth 0 index 0 A
| | `-TemplateArgument type 'fast_argument<int>':'fast_argument<int, false>'
| `-CXXMethodDecl 0x56490e025ca8 <line:183:5, col:63> col:48 push_back 'typename A::enable_rvalue_reference (int &&)' inline
|   `-ParmVarDecl 0x56490e025ba8 <col:58, col:62> col:62 v 'int &&'
|-CXXMethodDecl 0x56490e025e28 <line:185:5, col:26> col:17 pop_back 'void ()' inline
|-CXXMethodDecl 0x56490e025f78 <line:186:5, col:49> col:17 push_front 'void (Vector<int>::value_argument_type)' inline
| `-ParmVarDecl 0x56490e025ee8 <col:28, col:48> col:48 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56490e026030 <line:187:5, col:27> col:17 pop_front 'void ()' inline
|-CXXMethodDecl 0x56490e026278 <line:189:5, col:62> col:21 insert 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::value_argument_type)' inline
| |-ParmVarDecl 0x56490e0260f0 <col:28, col:37> col:37 it 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56490e026168 <col:41, col:61> col:61 v 'Vector<int>::value_argument_type':'int'
|-CXXMethodDecl 0x56490e026438 <line:190:5, col:38> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator)' inline
| `-ParmVarDecl 0x56490e026348 <col:27, col:36> col:36 it 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56490e026688 <line:191:5, col:49> col:21 erase 'Vector<int>::iterator (Vector<int>::iterator, Vector<int>::iterator)' inline
| |-ParmVarDecl 0x56490e026500 <col:27, col:36> col:36 a 'Vector<int>::iterator':'int *'
| `-ParmVarDecl 0x56490e026578 <col:39, col:48> col:48 b 'Vector<int>::iterator':'int *'
|-CXXMethodDecl 0x56490e026748 <line:193:5, col:23> col:17 used clear 'void ()' inline
|-CXXMethodDecl 0x56490e0269a8 <line:195:5, col:34> col:17 swap 'void (Vector<int> &)' inline
| `-ParmVarDecl 0x56490e0268b0 <col:22, col:33> col:33 x 'Vector<int> &'
`-CXXDestructorDecl 0x56490e026a78 <line:111:7> col:7 implicit ~Vector 'void () noexcept' inline default

Layout: <CGRecordLayout
  LLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  NonVirtualBaseLLVMType:%class.Vector.9 = type { %class.vector_memory.10 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::Slot
         0 |   (Slot vtable pointer)
         8 |   struct Args::Slot * _next
           | [sizeof=16, dsize=16, align=8,
           |  nvsize=16, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e00acb8 prev 0x56490dff3458 <../dummy_inc/click/args.hh:826:5, line:833:5> line:826:12 referenced struct Slot definition
|-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| |-MoveConstructor
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment
| `-Destructor non_trivial user_declared
|-CXXRecordDecl 0x56490e012780 <col:5, col:12> col:12 implicit referenced struct Slot
|-CXXConstructorDecl 0x56490e012870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| `-CompoundStmt 0x56490e036aa0 <col:16, line:828:9>
|-CXXDestructorDecl 0x56490e012960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| `-CompoundStmt 0x56490e036ab0 <col:25, line:830:9>
|-CXXMethodDecl 0x56490e012a60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
|-FieldDecl 0x56490e012b10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
|-CXXMethodDecl 0x56490e012bb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56490e012bb8
| `-ParmVarDecl 0x56490e012cc8 <col:12> col:12 'const Args::Slot &'
`-CXXConstructorDecl 0x56490e013488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56490e013488
  `-ParmVarDecl 0x56490e013598 <col:12> col:12 'const Args::Slot &'

Layout: <CGRecordLayout
  LLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  NonVirtualBaseLLVMType:%"struct.Args::Slot" = type { i32 (...)**, %"struct.Args::Slot"* }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dff3268 <../dummy_inc/click/args.hh:247:1, line:898:1> line:247:7 referenced class Args definition
|-DefinitionData has_user_declared_ctor has_mutable_fields can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor non_trivial user_declared has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param user_declared needs_overload_resolution implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared
|-public 'ArgContext'
|-CXXRecordDecl 0x56490dff33c8 <col:1, col:7> col:7 implicit referenced class Args
|-CXXRecordDecl 0x56490dff3458 <line:248:5, col:12> col:12 struct Slot
|-AccessSpecDecl 0x56490dff3510 <line:250:3, col:9> col:3 public
|-CXXConstructorDecl 0x56490dff3618 <line:254:5, col:32> col:5 Args 'void (ErrorHandler *)'
| `-ParmVarDecl 0x56490dff3548 <col:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56490e0280b8 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56490e028098 <col:31> 'int' 0
|-CXXConstructorDecl 0x56490dff3938 <line:259:5, col:60> col:5 Args 'void (const Vector<String> &, ErrorHandler *)'
| |-ParmVarDecl 0x56490dff37b0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| `-ParmVarDecl 0x56490dff3828 <col:38, col:59> col:52 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56490e0280f0 <col:59> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56490e0280d0 <col:59> 'int' 0
|-CXXConstructorDecl 0x56490dff3b10 <line:265:5, col:56> col:5 Args 'void (const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56490dff3a00 <col:10, col:25> col:25 context 'const Element *'
| `-ParmVarDecl 0x56490dff3a78 <col:34, col:55> col:48 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56490e028128 <col:55> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56490e028108 <col:55> 'int' 0
|-CXXConstructorDecl 0x56490dff3ec8 <line:271:5, line:272:32> line:271:5 used Args 'void (const Vector<String> &, const Element *, ErrorHandler *)'
| |-ParmVarDecl 0x56490dff3cb0 <col:10, col:32> col:32 conf 'const Vector<String> &'
| |-ParmVarDecl 0x56490dff3d28 <col:38, col:53> col:53 context 'const Element *'
| `-ParmVarDecl 0x56490dff3da0 <line:272:10, col:31> col:24 errh 'ErrorHandler *' cinit
|   `-ImplicitCastExpr 0x56490e028160 <col:31> 'ErrorHandler *' <NullToPointer>
|     `-IntegerLiteral 0x56490e028140 <col:31> 'int' 0
|-CXXConstructorDecl 0x56490dff4088 <line:279:5, col:23> col:5 Args 'void (const Args &)'
| `-ParmVarDecl 0x56490dff3fc8 <col:10, col:22> col:22 x 'const Args &'
|-CXXDestructorDecl 0x56490dff4180 <line:281:5, col:11> col:5 used ~Args 'void () noexcept'
|-CXXMethodDecl 0x56490dff4368 <line:285:5, col:34> col:11 operator= 'Args &(const Args &)'
| `-ParmVarDecl 0x56490dff4270 <col:21, col:33> col:33 x 'const Args &'
|-CXXMethodDecl 0x56490dff4458 <line:289:5, line:291:5> line:289:10 empty 'bool () const'
| `-CompoundStmt 0x56490e028550 <col:24, line:291:5>
|   `-ReturnStmt 0x56490e028540 <line:290:9, col:79>
|     `-BinaryOperator 0x56490e028520 <col:16, col:79> 'bool' '&&'
|       |-BinaryOperator 0x56490e0283b8 <col:16, col:47> 'bool' '&&'
|       | |-ParenExpr 0x56490e028310 <col:16, col:41> 'bool'
|       | | `-BinaryOperator 0x56490e0282f0 <col:17, col:40> 'bool' '||'
|       | |   |-UnaryOperator 0x56490e0281e8 <col:17, col:18> 'bool' prefix '!' cannot overflow
|       | |   | `-ImplicitCastExpr 0x56490e0281d0 <col:18> 'bool' <PointerToBoolean>
|       | |   |   `-ImplicitCastExpr 0x56490e0281b8 <col:18> 'Vector<String> *' <LValueToRValue>
|       | |   |     `-MemberExpr 0x56490e028188 <col:18> 'Vector<String> *const' lvalue ->_conf 0x56490e0144b0
|       | |   |       `-CXXThisExpr 0x56490e028178 <col:18> 'const Args *' implicit this
|       | |   `-UnaryOperator 0x56490e0282d8 <col:27, col:40> 'bool' prefix '!' cannot overflow
|       | |     `-ImplicitCastExpr 0x56490e0282c0 <col:28, col:40> 'bool' <IntegralToBoolean>
|       | |       `-CXXMemberCallExpr 0x56490e028288 <col:28, col:40> 'Vector::size_type':'int'
|       | |         `-MemberExpr 0x56490e028258 <col:28, col:35> '<bound member function type>' ->size 0x56490de335f8
|       | |           `-ImplicitCastExpr 0x56490e0282a8 <col:28> 'const Vector<String> *' <NoOp>
|       | |             `-ImplicitCastExpr 0x56490e028240 <col:28> 'Vector<String> *' <LValueToRValue>
|       | |               `-MemberExpr 0x56490e028210 <col:28> 'Vector<String> *const' lvalue ->_conf 0x56490e0144b0
|       | |                 `-CXXThisExpr 0x56490e028200 <col:28> 'const Args *' implicit this
|       | `-UnaryOperator 0x56490e0283a0 <col:46, col:47> 'bool' prefix '!' cannot overflow
|       |   `-ImplicitCastExpr 0x56490e028388 <col:47> 'bool' <PointerToBoolean>
|       |     `-ImplicitCastExpr 0x56490e028370 <col:47> 'Args::Slot *' <LValueToRValue>
|       |       `-MemberExpr 0x56490e028340 <col:47> 'Args::Slot *const' lvalue ->_slots 0x56490e026bc0
|       |         `-CXXThisExpr 0x56490e028330 <col:47> 'const Args *' implicit this
|       `-BinaryOperator 0x56490e028500 <col:57, col:79> 'bool' '=='
|         |-ImplicitCastExpr 0x56490e0284e8 <col:57, col:74> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56490e0284d0 <col:57, col:74> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56490e028490 <col:57, col:74> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56490e028478 <col:57> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56490e0283e8 <col:57> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56490e026ce8
|         |     |   `-CXXThisExpr 0x56490e0283d8 <col:57> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56490e028418 <col:73> 'int' 0
|         `-IntegerLiteral 0x56490e0284b0 <col:79> 'int' 0
|-CXXMethodDecl 0x56490dff4518 <line:294:5, line:296:5> line:294:10 results_empty 'bool () const'
| `-CompoundStmt 0x56490e028728 <col:32, line:296:5>
|   `-ReturnStmt 0x56490e028718 <line:295:9, col:49>
|     `-BinaryOperator 0x56490e0286f8 <col:16, col:49> 'bool' '&&'
|       |-UnaryOperator 0x56490e0285d8 <col:16, col:17> 'bool' prefix '!' cannot overflow
|       | `-ImplicitCastExpr 0x56490e0285c0 <col:17> 'bool' <PointerToBoolean>
|       |   `-ImplicitCastExpr 0x56490e0285a8 <col:17> 'Args::Slot *' <LValueToRValue>
|       |     `-MemberExpr 0x56490e028578 <col:17> 'Args::Slot *const' lvalue ->_slots 0x56490e026bc0
|       |       `-CXXThisExpr 0x56490e028568 <col:17> 'const Args *' implicit this
|       `-BinaryOperator 0x56490e0286d8 <col:27, col:49> 'bool' '=='
|         |-ImplicitCastExpr 0x56490e0286c0 <col:27, col:44> 'int' <IntegralCast>
|         | `-ImplicitCastExpr 0x56490e0286a8 <col:27, col:44> 'uint8_t':'unsigned char' <LValueToRValue>
|         |   `-ArraySubscriptExpr 0x56490e028668 <col:27, col:44> 'const uint8_t':'const unsigned char' lvalue
|         |     |-ImplicitCastExpr 0x56490e028650 <col:27> 'const uint8_t *' <ArrayToPointerDecay>
|         |     | `-MemberExpr 0x56490e028600 <col:27> 'uint8_t const[48]' lvalue ->_simple_slotbuf 0x56490e026ce8
|         |     |   `-CXXThisExpr 0x56490e0285f0 <col:27> 'const Args *' implicit this
|         |     `-IntegerLiteral 0x56490e028630 <col:43> 'int' 0
|         `-IntegerLiteral 0x56490e028688 <col:49> 'int' 0
|-CXXMethodDecl 0x56490dff4608 <line:301:5, line:306:5> line:301:11 clear 'Args &()'
| `-CompoundStmt 0x56490e028938 <col:19, line:306:5>
|   |-IfStmt 0x56490e028858 <line:302:9, line:303:26>
|   | |-ImplicitCastExpr 0x56490e028798 <line:302:13> 'bool' <PointerToBoolean>
|   | | `-ImplicitCastExpr 0x56490e028780 <col:13> 'Vector<String> *' <LValueToRValue>
|   | |   `-MemberExpr 0x56490e028750 <col:13> 'Vector<String> *' lvalue ->_conf 0x56490e0144b0
|   | |     `-CXXThisExpr 0x56490e028740 <col:13> 'Args *' implicit this
|   | `-CXXMemberCallExpr 0x56490e028838 <line:303:13, col:26> 'void'
|   |   `-MemberExpr 0x56490e028808 <col:13, col:20> '<bound member function type>' ->clear 0x56490de36048
|   |     `-ImplicitCastExpr 0x56490e0287f0 <col:13> 'Vector<String> *' <LValueToRValue>
|   |       `-MemberExpr 0x56490e0287c0 <col:13> 'Vector<String> *' lvalue ->_conf 0x56490e0144b0
|   |         `-CXXThisExpr 0x56490e0287b0 <col:13> 'Args *' implicit this
|   |-CXXMemberCallExpr 0x56490e0288e0 <line:304:9, col:22> 'void'
|   | `-MemberExpr 0x56490e0288b0 <col:9, col:16> '<bound member function type>' .clear 0x56490e026748
|   |   `-MemberExpr 0x56490e028880 <col:9> 'Vector<int>':'Vector<int>' lvalue ->_kwpos 0x56490e026b60
|   |     `-CXXThisExpr 0x56490e028870 <col:9> 'Args *' implicit this
|   `-ReturnStmt 0x56490e028928 <line:305:9, col:17>
|     `-UnaryOperator 0x56490e028910 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e028900 <col:17> 'Args *' this
|-CXXMethodDecl 0x56490dff4900 <line:313:5, col:36> col:11 bind 'Args &(Vector<String> &)'
| `-ParmVarDecl 0x56490dff4790 <col:16, col:32> col:32 conf 'Vector<String> &'
|-CXXMethodDecl 0x56490dff4a78 <line:317:5, col:38> col:11 push_back 'Args &(const String &)'
| `-ParmVarDecl 0x56490dff49b8 <col:21, col:35> col:35 arg 'const String &'
|-FunctionTemplateDecl 0x56490dff4df8 <line:321:5, line:327:5> line:321:35 push_back
| |-TemplateTypeParmDecl 0x56490dff4b20 <col:14, col:23> col:23 referenced typename depth 0 index 0 Iter
| `-CXXMethodDecl 0x56490dff4d58 <col:29, line:327:5> line:321:35 push_back 'Args &(Iter, Iter)'
|   |-ParmVarDecl 0x56490dff4bc8 <col:45, col:50> col:50 referenced begin 'Iter'
|   |-ParmVarDecl 0x56490dff4c40 <col:57, col:62> col:62 referenced end 'Iter'
|   `-CompoundStmt 0x56490e028c48 <col:67, line:327:5>
|     |-WhileStmt 0x56490e028bf8 <line:322:9, line:325:9>
|     | |-CXXOperatorCallExpr 0x56490e028a10 <line:322:16, col:25> '<dependent type>'
|     | | |-UnresolvedLookupExpr 0x56490e0289a0 <col:22> '<overloaded function type>' lvalue (ADL) = 'operator!=' 0x56490dfe3a78 0x56490ddd0920 0x56490dcfb1d0 0x56490dcfae80 0x56490dcfa770 0x56490dcbb740
|     | | |-DeclRefExpr 0x56490e028960 <col:16> 'Iter' lvalue ParmVar 0x56490dff4bc8 'begin' 'Iter'
|     | | `-DeclRefExpr 0x56490e028980 <col:25> 'Iter' lvalue ParmVar 0x56490dff4c40 'end' 'Iter'
|     | `-CompoundStmt 0x56490e028bd8 <col:30, line:325:9>
|     |   |-CallExpr 0x56490e028b78 <line:323:13, col:29> '<dependent type>'
|     |   | |-UnresolvedMemberExpr 0x56490e028a58 <col:13> '<bound member function type>' lvalue
|     |   | `-CXXOperatorCallExpr 0x56490e028b48 <col:23, col:24> '<dependent type>'
|     |   |   |-UnresolvedLookupExpr 0x56490e028ad8 <col:23> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|     |   |   `-DeclRefExpr 0x56490e028ab8 <col:24> 'Iter' lvalue ParmVar 0x56490dff4bc8 'begin' 'Iter'
|     |   `-UnaryOperator 0x56490e028bc0 <line:324:13, col:15> '<dependent type>' prefix '++' cannot overflow
|     |     `-DeclRefExpr 0x56490e028ba0 <col:15> 'Iter' lvalue ParmVar 0x56490dff4bc8 'begin' 'Iter'
|     `-ReturnStmt 0x56490e028c38 <line:326:9, col:17>
|       `-UnaryOperator 0x56490e028c20 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e028c10 <col:17> 'Args *' this
|-CXXMethodDecl 0x56490dff4f00 <line:331:5, col:44> col:11 push_back_words 'Args &(const String &)'
| `-ParmVarDecl 0x56490dff4e70 <col:27, col:41> col:41 str 'const String &'
|-CXXMethodDecl 0x56490dff5048 <line:335:5, col:43> col:11 push_back_args 'Args &(const String &)'
| `-ParmVarDecl 0x56490dff4fb8 <col:26, col:40> col:40 str 'const String &'
|-CXXMethodDecl 0x56490dff5110 <line:350:5, line:353:5> line:350:11 reset 'Args &()'
| `-CompoundStmt 0x56490e028d28 <col:19, line:353:5>
|   |-CXXMemberCallExpr 0x56490e028cc8 <line:351:9, col:21> 'void'
|   | |-MemberExpr 0x56490e028c78 <col:9> '<bound member function type>' ->reset_from 0x56490e027068
|   | | `-CXXThisExpr 0x56490e028c68 <col:9> 'Args *' implicit this
|   | `-IntegerLiteral 0x56490e028ca8 <col:20> 'int' 0
|   `-ReturnStmt 0x56490e028d18 <line:352:9, col:17>
|     `-UnaryOperator 0x56490e028d00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e028cf0 <col:17> 'Args *' this
|-VarDecl 0x56490dff51c8 <line:356:5, col:38> col:26 referenced mandatory 'const int' static constexpr cinit
| `-IntegerLiteral 0x56490dff5230 <col:38> 'int' 1
|-VarDecl 0x56490dff52c0 <line:357:5, col:39> col:26 referenced positional 'const int' static constexpr cinit
| `-IntegerLiteral 0x56490dff5328 <col:39> 'int' 2
|-VarDecl 0x56490dff53b8 <line:358:5, col:39> col:26 deprecated 'const int' static constexpr cinit
| `-IntegerLiteral 0x56490dff5420 <col:39> 'int' 4
|-VarDecl 0x56490dff54b0 <line:359:5, col:39> col:26 referenced firstmatch 'const int' static constexpr cinit
| `-IntegerLiteral 0x56490dff5518 <col:39> 'int' 8
|-FunctionTemplateDecl 0x56490dff5898 <line:368:5, line:371:5> line:369:11 read
| |-TemplateTypeParmDecl 0x56490dff5590 <line:368:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490dff57f8 <line:369:5, line:371:5> line:369:11 read 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56490dff5640 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff56e8 <col:37, col:40> col:40 referenced x 'T &'
|   `-CompoundStmt 0x56490e028e80 <col:43, line:371:5>
|     `-ReturnStmt 0x56490e028e70 <line:370:9, col:34>
|       `-CallExpr 0x56490e028e38 <col:16, col:34> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e028d58 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e028dd8 <col:21> 'const char *' lvalue ParmVar 0x56490dff5640 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e028df8 <col:30> 'int' 0
|         `-DeclRefExpr 0x56490e028e18 <col:33> 'T' lvalue ParmVar 0x56490dff56e8 'x' 'T &'
|-FunctionTemplateDecl 0x56490dff5bc8 <line:372:5, line:375:5> line:373:11 read_m
| |-TemplateTypeParmDecl 0x56490dff5900 <line:372:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490dff5b28 <line:373:5, line:375:5> line:373:11 read_m 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56490dff59b0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff5a58 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56490e028fd0 <col:45, line:375:5>
|     `-ReturnStmt 0x56490e028fc0 <line:374:9, col:42>
|       `-CallExpr 0x56490e028f88 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e028ea8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e028f28 <col:21> 'const char *' lvalue ParmVar 0x56490dff59b0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e028f48 <col:30> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x56490e028f68 <col:41> 'T' lvalue ParmVar 0x56490dff5a58 'x' 'T &'
|-FunctionTemplateDecl 0x56490dff5ef8 <line:376:5, line:379:5> line:377:11 read_p
| |-TemplateTypeParmDecl 0x56490dff5c30 <line:376:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490dff5e58 <line:377:5, line:379:5> line:377:11 read_p 'Args &(const char *, T &)'
|   |-ParmVarDecl 0x56490dff5ce0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff5d88 <col:39, col:42> col:42 referenced x 'T &'
|   `-CompoundStmt 0x56490e029120 <col:45, line:379:5>
|     `-ReturnStmt 0x56490e029110 <line:378:9, col:43>
|       `-CallExpr 0x56490e0290d8 <col:16, col:43> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e028ff8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e029078 <col:21> 'const char *' lvalue ParmVar 0x56490dff5ce0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e029098 <col:30> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int'
|         `-DeclRefExpr 0x56490e0290b8 <col:42> 'T' lvalue ParmVar 0x56490dff5d88 'x' 'T &'
|-FunctionTemplateDecl 0x56490dff6228 <line:380:5, line:383:5> line:381:11 read_mp
| |-TemplateTypeParmDecl 0x56490dff5f60 <line:380:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-CXXMethodDecl 0x56490dff6188 <line:381:5, line:383:5> line:381:11 read_mp 'Args &(const char *, T &)'
| | |-ParmVarDecl 0x56490dff6010 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56490dff60b8 <col:40, col:43> col:43 referenced x 'T &'
| | `-CompoundStmt 0x56490e029320 <col:46, line:383:5>
| |   `-ReturnStmt 0x56490e029310 <line:382:9, col:55>
| |     `-CallExpr 0x56490e0292d8 <col:16, col:55> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56490e029148 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56490e0291c8 <col:21> 'const char *' lvalue ParmVar 0x56490dff6010 'keyword' 'const char *'
| |       |-BinaryOperator 0x56490e029298 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56490e029248 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56490e029228 <col:30> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56490e029280 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56490e029260 <col:42> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int' non_odr_use_constant
| |       `-DeclRefExpr 0x56490e0292b8 <col:54> 'T' lvalue ParmVar 0x56490dff60b8 'x' 'T &'
| `-CXXMethodDecl 0x56490e1a5328 <line:381:5, line:383:5> line:381:11 used read_mp 'Args &(const char *, Timestamp &)'
|   |-TemplateArgument type 'Timestamp'
|   |-ParmVarDecl 0x56490e1a5140 <col:19, col:31> col:31 keyword 'const char *'
|   `-ParmVarDecl 0x56490e1a5218 <col:40, col:43> col:43 x 'Timestamp &'
|-FunctionTemplateDecl 0x56490dff6628 <line:384:5, line:388:5> line:385:11 read
| |-TemplateTypeParmDecl 0x56490dff6290 <line:384:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490dff6588 <line:385:5, line:388:5> line:385:11 read 'Args &(const char *, int, T &)'
|   |-ParmVarDecl 0x56490dff6340 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff63c0 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56490dff6468 <col:48, col:51> col:51 referenced x 'T &'
|   `-CompoundStmt 0x56490e029460 <col:54, line:388:5>
|     |-CallExpr 0x56490e0293e8 <line:386:9, col:47> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e029338 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56490e029378 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56490e029388 <col:30> 'const char *' lvalue ParmVar 0x56490dff6340 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56490e0293a8 <col:39> 'int' lvalue ParmVar 0x56490dff63c0 'flags' 'int'
|     | `-DeclRefExpr 0x56490e0293c8 <col:46> 'T' lvalue ParmVar 0x56490dff6468 'x' 'T &'
|     `-ReturnStmt 0x56490e029450 <line:387:9, col:17>
|       `-UnaryOperator 0x56490e029438 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e029428 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490dff6ad8 <line:400:5, line:403:5> line:401:11 read_or_set
| |-TemplateTypeParmDecl 0x56490dff6698 <line:400:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56490dff6718 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56490dff6a38 <line:401:5, line:403:5> line:401:11 read_or_set 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56490dff67d8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff6878 <col:44, col:47> col:47 referenced x 'T &'
|   |-ParmVarDecl 0x56490dff6918 <col:50, col:59> col:59 referenced default_value 'const V &'
|   `-CompoundStmt 0x56490e0295d0 <col:74, line:403:5>
|     `-ReturnStmt 0x56490e0295c0 <line:402:9, col:56>
|       `-CallExpr 0x56490e029580 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e029490 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e029500 <col:28> 'const char *' lvalue ParmVar 0x56490dff67d8 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e029520 <col:37> 'int' 0
|         |-DeclRefExpr 0x56490e029540 <col:40> 'T' lvalue ParmVar 0x56490dff6878 'x' 'T &'
|         `-DeclRefExpr 0x56490e029560 <col:43> 'const V' lvalue ParmVar 0x56490dff6918 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56490dff6f48 <line:404:5, line:407:5> line:405:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56490dff6b48 <line:404:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56490dff6bc8 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56490dff6ea8 <line:405:5, line:407:5> line:405:11 read_or_set_p 'Args &(const char *, T &, const V &)'
|   |-ParmVarDecl 0x56490dff6c88 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff6d28 <col:46, col:49> col:49 referenced x 'T &'
|   |-ParmVarDecl 0x56490dff6dc8 <col:52, col:61> col:61 referenced default_value 'const V &'
|   `-CompoundStmt 0x56490e029738 <col:76, line:407:5>
|     `-ReturnStmt 0x56490e029728 <line:406:9, col:65>
|       `-CallExpr 0x56490e0296e8 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e0295f8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e029668 <col:28> 'const char *' lvalue ParmVar 0x56490dff6c88 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e029688 <col:37> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int'
|         |-DeclRefExpr 0x56490e0296a8 <col:49> 'T' lvalue ParmVar 0x56490dff6d28 'x' 'T &'
|         `-DeclRefExpr 0x56490e0296c8 <col:52> 'const V' lvalue ParmVar 0x56490dff6dc8 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56490dff7498 <line:408:5, line:412:5> line:409:11 read_or_set
| |-TemplateTypeParmDecl 0x56490dff6fb8 <line:408:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56490dff7038 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56490dff73f8 <line:409:5, line:412:5> line:409:11 read_or_set 'Args &(const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56490dff70f8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff7178 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56490dff7218 <col:55, col:58> col:58 referenced x 'T &'
|   |-ParmVarDecl 0x56490dff72b8 <col:61, col:70> col:70 referenced default_value 'const V &'
|   `-CompoundStmt 0x56490e0298a0 <col:85, line:412:5>
|     |-CallExpr 0x56490e029820 <line:410:9, col:69> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e029750 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56490e029790 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56490e0297a0 <col:37> 'const char *' lvalue ParmVar 0x56490dff70f8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56490e0297c0 <col:46> 'int' lvalue ParmVar 0x56490dff7178 'flags' 'int'
|     | |-DeclRefExpr 0x56490e0297e0 <col:53> 'T' lvalue ParmVar 0x56490dff7218 'x' 'T &'
|     | `-DeclRefExpr 0x56490e029800 <col:56> 'const V' lvalue ParmVar 0x56490dff72b8 'default_value' 'const V &'
|     `-ReturnStmt 0x56490e029890 <line:411:9, col:17>
|       `-UnaryOperator 0x56490e029878 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e029868 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490dff7928 <line:422:5, line:425:5> line:423:11 read
| |-TemplateTypeParmDecl 0x56490dff7510 <line:422:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff7588 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dff7888 <line:423:5, line:425:5> line:423:11 read 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490dff7648 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff76c0 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff7768 <col:47, col:50> col:50 referenced x 'T &'
|   `-CompoundStmt 0x56490e029a20 <col:53, line:425:5>
|     `-ReturnStmt 0x56490e029a10 <line:424:9, col:42>
|       `-CallExpr 0x56490e0299d0 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e0298d0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e029950 <col:21> 'const char *' lvalue ParmVar 0x56490dff7648 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e029970 <col:30> 'int' 0
|         |-DeclRefExpr 0x56490e029990 <col:33> 'P' lvalue ParmVar 0x56490dff76c0 'parser' 'P'
|         `-DeclRefExpr 0x56490e0299b0 <col:41> 'T' lvalue ParmVar 0x56490dff7768 'x' 'T &'
|-FunctionTemplateDecl 0x56490dff7d78 <line:426:5, line:429:5> line:427:11 read_m
| |-TemplateTypeParmDecl 0x56490dff7998 <line:426:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff7a18 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dff7cd8 <line:427:5, line:429:5> line:427:11 read_m 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490dff7ad8 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff7b50 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff7bf8 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56490e029b98 <col:55, line:429:5>
|     `-ReturnStmt 0x56490e029b88 <line:428:9, col:50>
|       `-CallExpr 0x56490e029b48 <col:16, col:50> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e029a48 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e029ac8 <col:21> 'const char *' lvalue ParmVar 0x56490dff7ad8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e029ae8 <col:30> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x56490e029b08 <col:41> 'P' lvalue ParmVar 0x56490dff7b50 'parser' 'P'
|         `-DeclRefExpr 0x56490e029b28 <col:49> 'T' lvalue ParmVar 0x56490dff7bf8 'x' 'T &'
|-FunctionTemplateDecl 0x56490dff81c8 <line:430:5, line:433:5> line:431:11 read_p
| |-TemplateTypeParmDecl 0x56490dff7de8 <line:430:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff7e68 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dff8128 <line:431:5, line:433:5> line:431:11 read_p 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490dff7f28 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff7fa0 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff8048 <col:49, col:52> col:52 referenced x 'T &'
|   `-CompoundStmt 0x56490e029d10 <col:55, line:433:5>
|     `-ReturnStmt 0x56490e029d00 <line:432:9, col:51>
|       `-CallExpr 0x56490e029cc0 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e029bc0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e029c40 <col:21> 'const char *' lvalue ParmVar 0x56490dff7f28 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e029c60 <col:30> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int'
|         |-DeclRefExpr 0x56490e029c80 <col:42> 'P' lvalue ParmVar 0x56490dff7fa0 'parser' 'P'
|         `-DeclRefExpr 0x56490e029ca0 <col:50> 'T' lvalue ParmVar 0x56490dff8048 'x' 'T &'
|-FunctionTemplateDecl 0x56490dff8618 <line:434:5, line:437:5> line:435:11 read_mp
| |-TemplateTypeParmDecl 0x56490dff8238 <line:434:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff82b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-CXXMethodDecl 0x56490dff8578 <line:435:5, line:437:5> line:435:11 read_mp 'Args &(const char *, P, T &)'
| | |-ParmVarDecl 0x56490dff8378 <col:19, col:31> col:31 referenced keyword 'const char *'
| | |-ParmVarDecl 0x56490dff83f0 <col:40, col:42> col:42 referenced parser 'P'
| | |-ParmVarDecl 0x56490dff8498 <col:50, col:53> col:53 referenced x 'T &'
| | `-CompoundStmt 0x56490e029f38 <col:56, line:437:5>
| |   `-ReturnStmt 0x56490e029f28 <line:436:9, col:63>
| |     `-CallExpr 0x56490e029ee8 <col:16, col:63> '<dependent type>'
| |       |-UnresolvedMemberExpr 0x56490e029d38 <col:16> '<bound member function type>' lvalue
| |       |-DeclRefExpr 0x56490e029db8 <col:21> 'const char *' lvalue ParmVar 0x56490dff8378 'keyword' 'const char *'
| |       |-BinaryOperator 0x56490e029e88 <col:30, col:42> 'int' '|'
| |       | |-ImplicitCastExpr 0x56490e029e38 <col:30> 'int' <LValueToRValue>
| |       | | `-DeclRefExpr 0x56490e029e18 <col:30> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
| |       | `-ImplicitCastExpr 0x56490e029e70 <col:42> 'int' <LValueToRValue>
| |       |   `-DeclRefExpr 0x56490e029e50 <col:42> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int' non_odr_use_constant
| |       |-DeclRefExpr 0x56490e029ea8 <col:54> 'P' lvalue ParmVar 0x56490dff83f0 'parser' 'P'
| |       `-DeclRefExpr 0x56490e029ec8 <col:62> 'T' lvalue ParmVar 0x56490dff8498 'x' 'T &'
| `-CXXMethodDecl 0x56490e1a5e78 <line:435:5, line:437:5> line:435:11 used read_mp 'Args &(const char *, BandwidthArg, unsigned int &)'
|   |-TemplateArgument type 'BandwidthArg'
|   |-TemplateArgument type 'unsigned int'
|   |-ParmVarDecl 0x56490e1a5be8 <col:19, col:31> col:31 keyword 'const char *'
|   |-ParmVarDecl 0x56490e1a5c88 <col:40, col:42> col:42 parser 'BandwidthArg':'BandwidthArg'
|   `-ParmVarDecl 0x56490e1a5d58 <col:50, col:53> col:53 x 'unsigned int &'
|-FunctionTemplateDecl 0x56490dff8f38 <line:438:5, line:442:5> line:439:11 read
| |-TemplateTypeParmDecl 0x56490dff8688 <line:438:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff8708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dff8e98 <line:439:5, line:442:5> line:439:11 read 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56490dff87c8 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff8848 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56490dff8cb0 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff8d58 <col:58, col:61> col:61 referenced x 'T &'
|   `-CompoundStmt 0x56490e02a468 <col:64, line:442:5>
|     |-CallExpr 0x56490e02a020 <line:440:9, col:55> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e029f50 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56490e029f90 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56490e029fa0 <col:30> 'const char *' lvalue ParmVar 0x56490dff87c8 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56490e029fc0 <col:39> 'int' lvalue ParmVar 0x56490dff8848 'flags' 'int'
|     | |-DeclRefExpr 0x56490e029fe0 <col:46> 'P' lvalue ParmVar 0x56490dff8cb0 'parser' 'P'
|     | `-DeclRefExpr 0x56490e02a000 <col:54> 'T' lvalue ParmVar 0x56490dff8d58 'x' 'T &'
|     `-ReturnStmt 0x56490e02a458 <line:441:9, col:17>
|       `-UnaryOperator 0x56490e02a440 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02a068 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490dff9538 <line:455:5, line:458:5> line:456:11 read_or_set
| |-TemplateTypeParmDecl 0x56490dff8fb0 <line:455:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff9028 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56490dff90a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56490dff9498 <line:456:5, line:458:5> line:456:11 read_or_set 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56490dff9170 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff91e8 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff9288 <col:54, col:57> col:57 referenced x 'T &'
|   |-ParmVarDecl 0x56490dff9358 <col:60, col:69> col:69 referenced default_value 'const V &'
|   `-CompoundStmt 0x56490e02a600 <col:84, line:458:5>
|     `-ReturnStmt 0x56490e02a5f0 <line:457:9, col:64>
|       `-CallExpr 0x56490e02a5a8 <col:16, col:64> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02a498 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02a508 <col:28> 'const char *' lvalue ParmVar 0x56490dff9170 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02a528 <col:37> 'int' 0
|         |-DeclRefExpr 0x56490e02a548 <col:40> 'P' lvalue ParmVar 0x56490dff91e8 'parser' 'P'
|         |-DeclRefExpr 0x56490e02a568 <col:48> 'T' lvalue ParmVar 0x56490dff9288 'x' 'T &'
|         `-DeclRefExpr 0x56490e02a588 <col:51> 'const V' lvalue ParmVar 0x56490dff9358 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56490dff9ab8 <line:459:5, line:462:5> line:460:11 read_or_set_p
| |-TemplateTypeParmDecl 0x56490dff95b0 <line:459:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff9628 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56490dff96a8 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56490dff9a18 <line:460:5, line:462:5> line:460:11 read_or_set_p 'Args &(const char *, P, T &, const V &)'
|   |-ParmVarDecl 0x56490dff9770 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff97e8 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff9888 <col:56, col:59> col:59 referenced x 'T &'
|   |-ParmVarDecl 0x56490dff9928 <col:62, col:71> col:71 referenced default_value 'const V &'
|   `-CompoundStmt 0x56490e02a790 <col:86, line:462:5>
|     `-ReturnStmt 0x56490e02a780 <line:461:9, col:73>
|       `-CallExpr 0x56490e02a738 <col:16, col:73> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02a628 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02a698 <col:28> 'const char *' lvalue ParmVar 0x56490dff9770 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02a6b8 <col:37> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int'
|         |-DeclRefExpr 0x56490e02a6d8 <col:49> 'P' lvalue ParmVar 0x56490dff97e8 'parser' 'P'
|         |-DeclRefExpr 0x56490e02a6f8 <col:57> 'T' lvalue ParmVar 0x56490dff9888 'x' 'T &'
|         `-DeclRefExpr 0x56490e02a718 <col:60> 'const V' lvalue ParmVar 0x56490dff9928 'default_value' 'const V &'
|-FunctionTemplateDecl 0x56490dffa118 <line:463:5, line:467:5> line:464:11 read_or_set
| |-TemplateTypeParmDecl 0x56490dff9b30 <line:463:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dff9ba8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| |-TemplateTypeParmDecl 0x56490dff9c28 <col:39, col:48> col:48 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56490dffa078 <line:464:5, line:467:5> line:464:11 read_or_set 'Args &(const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56490dff9cf0 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dff9d70 <col:44, col:48> col:48 referenced flags 'int'
|   |-ParmVarDecl 0x56490dff9de8 <col:55, col:57> col:57 referenced parser 'P'
|   |-ParmVarDecl 0x56490dff9e88 <col:65, col:68> col:68 referenced x 'T &'
|   |-ParmVarDecl 0x56490dff9f28 <col:71, col:80> col:80 referenced default_value 'const V &'
|   `-CompoundStmt 0x56490e02a920 <col:95, line:467:5>
|     |-CallExpr 0x56490e02a898 <line:465:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e02a7a8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_or_set' empty
|     | |-CXXThisExpr 0x56490e02a7e8 <col:31> 'Args *' this
|     | |-DeclRefExpr 0x56490e02a7f8 <col:37> 'const char *' lvalue ParmVar 0x56490dff9cf0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56490e02a818 <col:46> 'int' lvalue ParmVar 0x56490dff9d70 'flags' 'int'
|     | |-DeclRefExpr 0x56490e02a838 <col:53> 'P' lvalue ParmVar 0x56490dff9de8 'parser' 'P'
|     | |-DeclRefExpr 0x56490e02a858 <col:61> 'T' lvalue ParmVar 0x56490dff9e88 'x' 'T &'
|     | `-DeclRefExpr 0x56490e02a878 <col:64> 'const V' lvalue ParmVar 0x56490dff9f28 'default_value' 'const V &'
|     `-ReturnStmt 0x56490e02a910 <line:466:9, col:17>
|       `-UnaryOperator 0x56490e02a8f8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02a8e8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490dffa6f8 <line:478:5, line:481:5> line:479:11 read
| |-TemplateTypeParmDecl 0x56490dffa198 <line:478:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dffa218 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56490dffa298 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56490dffa658 <line:479:5, line:481:5> line:479:11 read 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56490dffa360 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffa3d8 <col:37, col:39> col:39 referenced parser 'P'
|   |-ParmVarDecl 0x56490dffa478 <col:47, col:51> col:51 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56490dffa518 <col:55, col:59> col:59 referenced x2 'T2 &'
|   `-CompoundStmt 0x56490e02aac8 <col:63, line:481:5>
|     `-ReturnStmt 0x56490e02aab8 <line:480:9, col:47>
|       `-CallExpr 0x56490e02aa70 <col:16, col:47> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02a950 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02a9d0 <col:21> 'const char *' lvalue ParmVar 0x56490dffa360 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02a9f0 <col:30> 'int' 0
|         |-DeclRefExpr 0x56490e02aa10 <col:33> 'P' lvalue ParmVar 0x56490dffa3d8 'parser' 'P'
|         |-DeclRefExpr 0x56490e02aa30 <col:41> 'T1' lvalue ParmVar 0x56490dffa478 'x1' 'T1 &'
|         `-DeclRefExpr 0x56490e02aa50 <col:45> 'T2' lvalue ParmVar 0x56490dffa518 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56490dffac78 <line:482:5, line:485:5> line:483:11 read_m
| |-TemplateTypeParmDecl 0x56490dffa770 <line:482:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dffa7e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56490dffa868 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56490dffabd8 <line:483:5, line:485:5> line:483:11 read_m 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56490dffa930 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffa9a8 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56490dffaa48 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56490dffaae8 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56490e02ac68 <col:65, line:485:5>
|     `-ReturnStmt 0x56490e02ac58 <line:484:9, col:55>
|       `-CallExpr 0x56490e02ac10 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02aaf0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02ab70 <col:21> 'const char *' lvalue ParmVar 0x56490dffa930 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02ab90 <col:30> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int'
|         |-DeclRefExpr 0x56490e02abb0 <col:41> 'P' lvalue ParmVar 0x56490dffa9a8 'parser' 'P'
|         |-DeclRefExpr 0x56490e02abd0 <col:49> 'T1' lvalue ParmVar 0x56490dffaa48 'x1' 'T1 &'
|         `-DeclRefExpr 0x56490e02abf0 <col:53> 'T2' lvalue ParmVar 0x56490dffaae8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56490dffb1f8 <line:486:5, line:489:5> line:487:11 read_p
| |-TemplateTypeParmDecl 0x56490dffacf0 <line:486:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dffad68 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56490dffade8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56490dffb158 <line:487:5, line:489:5> line:487:11 read_p 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56490dffaeb0 <col:18, col:30> col:30 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffaf28 <col:39, col:41> col:41 referenced parser 'P'
|   |-ParmVarDecl 0x56490dffafc8 <col:49, col:53> col:53 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56490dffb068 <col:57, col:61> col:61 referenced x2 'T2 &'
|   `-CompoundStmt 0x56490e02ae08 <col:65, line:489:5>
|     `-ReturnStmt 0x56490e02adf8 <line:488:9, col:56>
|       `-CallExpr 0x56490e02adb0 <col:16, col:56> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02ac90 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02ad10 <col:21> 'const char *' lvalue ParmVar 0x56490dffaeb0 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02ad30 <col:30> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int'
|         |-DeclRefExpr 0x56490e02ad50 <col:42> 'P' lvalue ParmVar 0x56490dffaf28 'parser' 'P'
|         |-DeclRefExpr 0x56490e02ad70 <col:50> 'T1' lvalue ParmVar 0x56490dffafc8 'x1' 'T1 &'
|         `-DeclRefExpr 0x56490e02ad90 <col:54> 'T2' lvalue ParmVar 0x56490dffb068 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56490dffb778 <line:490:5, line:493:5> line:491:11 read_mp
| |-TemplateTypeParmDecl 0x56490dffb270 <line:490:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dffb2e8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56490dffb368 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56490dffb6d8 <line:491:5, line:493:5> line:491:11 read_mp 'Args &(const char *, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56490dffb430 <col:19, col:31> col:31 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffb4a8 <col:40, col:42> col:42 referenced parser 'P'
|   |-ParmVarDecl 0x56490dffb548 <col:50, col:54> col:54 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56490dffb5e8 <col:58, col:62> col:62 referenced x2 'T2 &'
|   `-CompoundStmt 0x56490e02b058 <col:66, line:493:5>
|     `-ReturnStmt 0x56490e02b048 <line:492:9, col:68>
|       `-CallExpr 0x56490e02b000 <col:16, col:68> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02ae30 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02aeb0 <col:21> 'const char *' lvalue ParmVar 0x56490dffb430 'keyword' 'const char *'
|         |-BinaryOperator 0x56490e02af80 <col:30, col:42> 'int' '|'
|         | |-ImplicitCastExpr 0x56490e02af30 <col:30> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56490e02af10 <col:30> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56490e02af68 <col:42> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56490e02af48 <col:42> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int' non_odr_use_constant
|         |-DeclRefExpr 0x56490e02afa0 <col:54> 'P' lvalue ParmVar 0x56490dffb4a8 'parser' 'P'
|         |-DeclRefExpr 0x56490e02afc0 <col:62> 'T1' lvalue ParmVar 0x56490dffb548 'x1' 'T1 &'
|         `-DeclRefExpr 0x56490e02afe0 <col:66> 'T2' lvalue ParmVar 0x56490dffb5e8 'x2' 'T2 &'
|-FunctionTemplateDecl 0x56490dffbdd8 <line:494:5, line:498:5> line:495:11 read
| |-TemplateTypeParmDecl 0x56490dffb7f0 <line:494:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dffb868 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56490dffb8e8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56490dffbd38 <line:495:5, line:498:5> line:495:11 read 'Args &(const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56490dffb9b0 <col:16, col:28> col:28 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffba30 <col:37, col:41> col:41 referenced flags 'int'
|   |-ParmVarDecl 0x56490dffbaa8 <col:48, col:50> col:50 referenced parser 'P'
|   |-ParmVarDecl 0x56490dffbb48 <col:58, col:62> col:62 referenced x1 'T1 &'
|   |-ParmVarDecl 0x56490dffbbe8 <col:66, col:70> col:70 referenced x2 'T2 &'
|   `-CompoundStmt 0x56490e02b1e8 <col:74, line:498:5>
|     |-CallExpr 0x56490e02b160 <line:496:9, col:60> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e02b070 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read' empty
|     | |-CXXThisExpr 0x56490e02b0b0 <col:24> 'Args *' this
|     | |-DeclRefExpr 0x56490e02b0c0 <col:30> 'const char *' lvalue ParmVar 0x56490dffb9b0 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56490e02b0e0 <col:39> 'int' lvalue ParmVar 0x56490dffba30 'flags' 'int'
|     | |-DeclRefExpr 0x56490e02b100 <col:46> 'P' lvalue ParmVar 0x56490dffbaa8 'parser' 'P'
|     | |-DeclRefExpr 0x56490e02b120 <col:54> 'T1' lvalue ParmVar 0x56490dffbb48 'x1' 'T1 &'
|     | `-DeclRefExpr 0x56490e02b140 <col:58> 'T2' lvalue ParmVar 0x56490dffbbe8 'x2' 'T2 &'
|     `-ReturnStmt 0x56490e02b1d8 <line:497:9, col:17>
|       `-UnaryOperator 0x56490e02b1c0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02b1b0 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490dffc138 <line:506:5, line:509:5> line:507:11 read_with
| |-TemplateTypeParmDecl 0x56490dffbe58 <line:506:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490dffc098 <line:507:5, line:509:5> line:507:11 read_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56490dffbf10 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffbf88 <col:42, col:44> col:44 referenced parser 'P'
|   `-CompoundStmt 0x56490e02b330 <col:52, line:509:5>
|     `-ReturnStmt 0x56490e02b320 <line:508:9, col:44>
|       `-CallExpr 0x56490e02b2e8 <col:16, col:44> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02b218 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02b288 <col:26> 'const char *' lvalue ParmVar 0x56490dffbf10 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02b2a8 <col:35> 'int' 0
|         `-DeclRefExpr 0x56490e02b2c8 <col:38> 'P' lvalue ParmVar 0x56490dffbf88 'parser' 'P'
|-FunctionTemplateDecl 0x56490dffc438 <line:510:5, line:513:5> line:511:11 read_m_with
| |-TemplateTypeParmDecl 0x56490dffc1a0 <line:510:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490dffc398 <line:511:5, line:513:5> line:511:11 read_m_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56490dffc250 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffc2c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56490e02b470 <col:54, line:513:5>
|     `-ReturnStmt 0x56490e02b460 <line:512:9, col:52>
|       `-CallExpr 0x56490e02b428 <col:16, col:52> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02b358 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02b3c8 <col:26> 'const char *' lvalue ParmVar 0x56490dffc250 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02b3e8 <col:35> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int'
|         `-DeclRefExpr 0x56490e02b408 <col:46> 'P' lvalue ParmVar 0x56490dffc2c8 'parser' 'P'
|-FunctionTemplateDecl 0x56490dffc738 <line:514:5, line:517:5> line:515:11 read_p_with
| |-TemplateTypeParmDecl 0x56490dffc4a0 <line:514:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490dffc698 <line:515:5, line:517:5> line:515:11 read_p_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56490dffc550 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffc5c8 <col:44, col:46> col:46 referenced parser 'P'
|   `-CompoundStmt 0x56490e02b5b0 <col:54, line:517:5>
|     `-ReturnStmt 0x56490e02b5a0 <line:516:9, col:53>
|       `-CallExpr 0x56490e02b568 <col:16, col:53> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02b498 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02b508 <col:26> 'const char *' lvalue ParmVar 0x56490dffc550 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02b528 <col:35> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int'
|         `-DeclRefExpr 0x56490e02b548 <col:47> 'P' lvalue ParmVar 0x56490dffc5c8 'parser' 'P'
|-FunctionTemplateDecl 0x56490dffca38 <line:518:5, line:521:5> line:519:11 read_mp_with
| |-TemplateTypeParmDecl 0x56490dffc7a0 <line:518:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490dffc998 <line:519:5, line:521:5> line:519:11 read_mp_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56490dffc850 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffc8c8 <col:45, col:47> col:47 referenced parser 'P'
|   `-CompoundStmt 0x56490e02b7a0 <col:55, line:521:5>
|     `-ReturnStmt 0x56490e02b790 <line:520:9, col:65>
|       `-CallExpr 0x56490e02b758 <col:16, col:65> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02b5d8 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02b648 <col:26> 'const char *' lvalue ParmVar 0x56490dffc850 'keyword' 'const char *'
|         |-BinaryOperator 0x56490e02b718 <col:35, col:47> 'int' '|'
|         | |-ImplicitCastExpr 0x56490e02b6c8 <col:35> 'int' <LValueToRValue>
|         | | `-DeclRefExpr 0x56490e02b6a8 <col:35> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
|         | `-ImplicitCastExpr 0x56490e02b700 <col:47> 'int' <LValueToRValue>
|         |   `-DeclRefExpr 0x56490e02b6e0 <col:47> 'const int' lvalue Var 0x56490dff52c0 'positional' 'const int' non_odr_use_constant
|         `-DeclRefExpr 0x56490e02b738 <col:59> 'P' lvalue ParmVar 0x56490dffc8c8 'parser' 'P'
|-FunctionTemplateDecl 0x56490dfff1c8 <line:522:5, line:526:5> line:523:11 read_with
| |-TemplateTypeParmDecl 0x56490dffcaa0 <line:522:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490dfff128 <line:523:5, line:526:5> line:523:11 read_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56490dffcb50 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dffcbd0 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56490dffcc48 <col:53, col:55> col:55 referenced parser 'P'
|   `-CompoundStmt 0x56490e02b8e0 <col:63, line:526:5>
|     |-CallExpr 0x56490e02b868 <line:524:9, col:57> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e02b7b8 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_with' empty
|     | |-CXXThisExpr 0x56490e02b7f8 <col:29> 'Args *' this
|     | |-DeclRefExpr 0x56490e02b808 <col:35> 'const char *' lvalue ParmVar 0x56490dffcb50 'keyword' 'const char *'
|     | |-DeclRefExpr 0x56490e02b828 <col:44> 'int' lvalue ParmVar 0x56490dffcbd0 'flags' 'int'
|     | `-DeclRefExpr 0x56490e02b848 <col:51> 'P' lvalue ParmVar 0x56490dffcc48 'parser' 'P'
|     `-ReturnStmt 0x56490e02b8d0 <line:525:9, col:17>
|       `-UnaryOperator 0x56490e02b8b8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02b8a8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490dfff618 <line:538:5, line:541:5> line:539:11 read_with
| |-TemplateTypeParmDecl 0x56490dfff238 <line:538:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dfff2b8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dfff578 <line:539:5, line:541:5> line:539:11 read_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490dfff378 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dfff3f0 <col:42, col:44> col:44 referenced parser 'P'
|   |-ParmVarDecl 0x56490dfff498 <col:52, col:55> col:55 referenced x 'T &'
|   `-CompoundStmt 0x56490e02ba38 <col:58, line:541:5>
|     `-ReturnStmt 0x56490e02ba28 <line:540:9, col:39>
|       `-CallExpr 0x56490e02b9f0 <col:16, col:39> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02b910 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02b990 <col:21> 'const char *' lvalue ParmVar 0x56490dfff378 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02b9b0 <col:30> 'P' lvalue ParmVar 0x56490dfff3f0 'parser' 'P'
|         `-DeclRefExpr 0x56490e02b9d0 <col:38> 'T' lvalue ParmVar 0x56490dfff498 'x' 'T &'
|-FunctionTemplateDecl 0x56490dfffa68 <line:542:5, line:545:5> line:543:11 read_m_with
| |-TemplateTypeParmDecl 0x56490dfff688 <line:542:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dfff708 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dfff9c8 <line:543:5, line:545:5> line:543:11 read_m_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490dfff7c8 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dfff840 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56490dfff8e8 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56490e02bb70 <col:60, line:545:5>
|     `-ReturnStmt 0x56490e02bb60 <line:544:9, col:41>
|       `-CallExpr 0x56490e02bb28 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02ba60 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02bac8 <col:23> 'const char *' lvalue ParmVar 0x56490dfff7c8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02bae8 <col:32> 'P' lvalue ParmVar 0x56490dfff840 'parser' 'P'
|         `-DeclRefExpr 0x56490e02bb08 <col:40> 'T' lvalue ParmVar 0x56490dfff8e8 'x' 'T &'
|-FunctionTemplateDecl 0x56490dfffeb8 <line:546:5, line:549:5> line:547:11 read_p_with
| |-TemplateTypeParmDecl 0x56490dfffad8 <line:546:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dfffb58 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490dfffe18 <line:547:5, line:549:5> line:547:11 read_p_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490dfffc18 <col:23, col:35> col:35 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490dfffc90 <col:44, col:46> col:46 referenced parser 'P'
|   |-ParmVarDecl 0x56490dfffd38 <col:54, col:57> col:57 referenced x 'T &'
|   `-CompoundStmt 0x56490e02bca8 <col:60, line:549:5>
|     `-ReturnStmt 0x56490e02bc98 <line:548:9, col:41>
|       `-CallExpr 0x56490e02bc60 <col:16, col:41> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02bb98 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02bc00 <col:23> 'const char *' lvalue ParmVar 0x56490dfffc18 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02bc20 <col:32> 'P' lvalue ParmVar 0x56490dfffc90 'parser' 'P'
|         `-DeclRefExpr 0x56490e02bc40 <col:40> 'T' lvalue ParmVar 0x56490dfffd38 'x' 'T &'
|-FunctionTemplateDecl 0x56490e000308 <line:550:5, line:553:5> line:551:11 read_mp_with
| |-TemplateTypeParmDecl 0x56490dffff28 <line:550:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490dffffa8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e000268 <line:551:5, line:553:5> line:551:11 read_mp_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490e000068 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e0000e0 <col:45, col:47> col:47 referenced parser 'P'
|   |-ParmVarDecl 0x56490e000188 <col:55, col:58> col:58 referenced x 'T &'
|   `-CompoundStmt 0x56490e02bde0 <col:61, line:553:5>
|     `-ReturnStmt 0x56490e02bdd0 <line:552:9, col:42>
|       `-CallExpr 0x56490e02bd98 <col:16, col:42> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02bcd0 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02bd38 <col:24> 'const char *' lvalue ParmVar 0x56490e000068 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02bd58 <col:33> 'P' lvalue ParmVar 0x56490e0000e0 'parser' 'P'
|         `-DeclRefExpr 0x56490e02bd78 <col:41> 'T' lvalue ParmVar 0x56490e000188 'x' 'T &'
|-FunctionTemplateDecl 0x56490e0007e8 <line:554:5, line:557:5> line:555:11 read_with
| |-TemplateTypeParmDecl 0x56490e000378 <line:554:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e0003f8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e000748 <line:555:5, line:557:5> line:555:11 read_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56490e0004b8 <col:21, col:33> col:33 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e000538 <col:42, col:46> col:46 referenced flags 'int'
|   |-ParmVarDecl 0x56490e0005b0 <col:53, col:55> col:55 referenced parser 'P'
|   |-ParmVarDecl 0x56490e000658 <col:63, col:66> col:66 referenced x 'T &'
|   `-CompoundStmt 0x56490e02bf58 <col:69, line:557:5>
|     `-ReturnStmt 0x56490e02bf48 <line:556:9, col:46>
|       `-CallExpr 0x56490e02bf08 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02be08 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02be88 <col:21> 'const char *' lvalue ParmVar 0x56490e0004b8 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02bea8 <col:30> 'int' lvalue ParmVar 0x56490e000538 'flags' 'int'
|         |-DeclRefExpr 0x56490e02bec8 <col:37> 'P' lvalue ParmVar 0x56490e0005b0 'parser' 'P'
|         `-DeclRefExpr 0x56490e02bee8 <col:45> 'T' lvalue ParmVar 0x56490e000658 'x' 'T &'
|-FunctionTemplateDecl 0x56490e000af8 <line:568:5, line:571:5> line:569:11 read_all_with
| |-TemplateTypeParmDecl 0x56490e000860 <line:568:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490e000a58 <line:569:5, line:571:5> line:569:11 read_all_with 'Args &(const char *, P)'
|   |-ParmVarDecl 0x56490e000910 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e000988 <col:46, col:48> col:48 referenced parser 'P'
|   `-CompoundStmt 0x56490e02c098 <col:56, line:571:5>
|     `-ReturnStmt 0x56490e02c088 <line:570:9, col:48>
|       `-CallExpr 0x56490e02c050 <col:16, col:48> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02bf80 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02bff0 <col:30> 'const char *' lvalue ParmVar 0x56490e000910 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02c010 <col:39> 'int' 0
|         `-DeclRefExpr 0x56490e02c030 <col:42> 'P' lvalue ParmVar 0x56490e000988 'parser' 'P'
|-FunctionTemplateDecl 0x56490e000e88 <line:572:5, line:576:5> line:573:11 read_all_with
| |-TemplateTypeParmDecl 0x56490e000b60 <line:572:15, col:24> col:24 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490e000de8 <line:573:5, line:576:5> line:573:11 read_all_with 'Args &(const char *, int, P)'
|   |-ParmVarDecl 0x56490e000c10 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e000c90 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56490e000d08 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56490e02c268 <col:67, line:576:5>
|     |-CallExpr 0x56490e02c1f0 <line:574:9, col:74> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e02c0b0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56490e02c0f0 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56490e02c100 <col:39> 'const char *' lvalue ParmVar 0x56490e000c10 'keyword' 'const char *'
|     | |-BinaryOperator 0x56490e02c1b0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56490e02c160 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56490e02c120 <col:48> 'int' lvalue ParmVar 0x56490e000c90 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56490e02c198 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56490e02c178 <col:56> 'const int' lvalue Var 0x56490dff54b0 'firstmatch' 'const int' non_odr_use_constant
|     | `-DeclRefExpr 0x56490e02c1d0 <col:68> 'P' lvalue ParmVar 0x56490e000d08 'parser' 'P'
|     `-ReturnStmt 0x56490e02c258 <line:575:9, col:17>
|       `-UnaryOperator 0x56490e02c240 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02c230 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490e0012d8 <line:589:5, line:592:5> line:590:11 read_all_with
| |-TemplateTypeParmDecl 0x56490e000ef8 <line:589:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e000f78 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e001238 <line:590:5, line:592:5> line:590:11 read_all_with 'Args &(const char *, P, T &)'
|   |-ParmVarDecl 0x56490e001038 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e0010b0 <col:46, col:48> col:48 referenced parser 'P'
|   |-ParmVarDecl 0x56490e001158 <col:56, col:59> col:59 referenced x 'T &'
|   `-CompoundStmt 0x56490e02c3d8 <col:62, line:592:5>
|     `-ReturnStmt 0x56490e02c3c8 <line:591:9, col:51>
|       `-CallExpr 0x56490e02c388 <col:16, col:51> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02c298 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02c308 <col:30> 'const char *' lvalue ParmVar 0x56490e001038 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02c328 <col:39> 'int' 0
|         |-DeclRefExpr 0x56490e02c348 <col:42> 'P' lvalue ParmVar 0x56490e0010b0 'parser' 'P'
|         `-DeclRefExpr 0x56490e02c368 <col:50> 'T' lvalue ParmVar 0x56490e001158 'x' 'T &'
|-FunctionTemplateDecl 0x56490e0017b8 <line:593:5, line:597:5> line:594:11 read_all_with
| |-TemplateTypeParmDecl 0x56490e001348 <line:593:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e0013c8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e001718 <line:594:5, line:597:5> line:594:11 read_all_with 'Args &(const char *, int, P, T &)'
|   |-ParmVarDecl 0x56490e001488 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e001508 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56490e001580 <col:57, col:59> col:59 referenced parser 'P'
|   |-ParmVarDecl 0x56490e001628 <col:67, col:70> col:70 referenced x 'T &'
|   `-CompoundStmt 0x56490e02c5d0 <col:73, line:597:5>
|     |-CallExpr 0x56490e02c550 <line:595:9, col:77> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e02c3f0 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all_with' empty
|     | |-CXXThisExpr 0x56490e02c430 <col:33> 'Args *' this
|     | |-DeclRefExpr 0x56490e02c440 <col:39> 'const char *' lvalue ParmVar 0x56490e001488 'keyword' 'const char *'
|     | |-BinaryOperator 0x56490e02c4f0 <col:48, col:56> 'int' '|'
|     | | |-ImplicitCastExpr 0x56490e02c4a0 <col:48> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56490e02c460 <col:48> 'int' lvalue ParmVar 0x56490e001508 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56490e02c4d8 <col:56> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56490e02c4b8 <col:56> 'const int' lvalue Var 0x56490dff54b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56490e02c510 <col:68> 'P' lvalue ParmVar 0x56490e001580 'parser' 'P'
|     | `-DeclRefExpr 0x56490e02c530 <col:76> 'T' lvalue ParmVar 0x56490e001628 'x' 'T &'
|     `-ReturnStmt 0x56490e02c5c0 <line:596:9, col:17>
|       `-UnaryOperator 0x56490e02c5a8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02c598 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490e001d68 <line:611:5, line:614:5> line:612:11 read_all
| |-TemplateTypeParmDecl 0x56490e001830 <line:611:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e0018a8 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e001cc8 <line:612:5, line:614:5> line:612:11 read_all 'Args &(const char *, P, Vector<T> &)'
|   |-ParmVarDecl 0x56490e001968 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e0019e0 <col:41, col:43> col:43 referenced parser 'P'
|   |-ParmVarDecl 0x56490e001ba0 <col:51, col:62> col:62 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56490e02c740 <col:65, line:614:5>
|     `-ReturnStmt 0x56490e02c730 <line:613:9, col:46>
|       `-CallExpr 0x56490e02c6f0 <col:16, col:46> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02c600 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02c670 <col:25> 'const char *' lvalue ParmVar 0x56490e001968 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02c690 <col:34> 'int' 0
|         |-DeclRefExpr 0x56490e02c6b0 <col:37> 'P' lvalue ParmVar 0x56490e0019e0 'parser' 'P'
|         `-DeclRefExpr 0x56490e02c6d0 <col:45> 'Vector<T>' lvalue ParmVar 0x56490e001ba0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56490e002198 <line:615:5, line:618:5> line:616:11 read_all
| |-TemplateTypeParmDecl 0x56490e001dd8 <line:615:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490e0020f8 <line:616:5, line:618:5> line:616:11 read_all 'Args &(const char *, Vector<T> &)'
|   |-ParmVarDecl 0x56490e001e90 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e001fe0 <col:41, col:52> col:52 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56490e02c960 <col:55, line:618:5>
|     `-ReturnStmt 0x56490e02c950 <line:617:9, col:55>
|       `-CallExpr 0x56490e02c910 <col:16, col:55> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02c768 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02c7d8 <col:25> 'const char *' lvalue ParmVar 0x56490e001e90 'keyword' 'const char *'
|         |-IntegerLiteral 0x56490e02c7f8 <col:34> 'int' 0
|         |-CXXUnresolvedConstructExpr 0x56490e02c8d0 <col:37, col:51> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56490e02c8f0 <col:54> 'Vector<T>' lvalue ParmVar 0x56490e001fe0 'x' 'Vector<T> &'
|-FunctionTemplateDecl 0x56490e002768 <line:619:5, line:623:5> line:620:11 read_all
| |-TemplateTypeParmDecl 0x56490e002200 <line:619:15, col:24> col:24 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e002278 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e0026c8 <line:620:5, line:623:5> line:620:11 read_all 'Args &(const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56490e002338 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e0023b8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56490e002430 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56490e002580 <col:62, col:73> col:73 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56490e02cb58 <col:76, line:623:5>
|     |-CallExpr 0x56490e02cad8 <line:621:9, col:72> '<dependent type>'
|     | |-UnresolvedLookupExpr 0x56490e02c978 <col:9> '<overloaded function type>' lvalue (ADL) = 'args_base_read_all' empty
|     | |-CXXThisExpr 0x56490e02c9b8 <col:28> 'Args *' this
|     | |-DeclRefExpr 0x56490e02c9c8 <col:34> 'const char *' lvalue ParmVar 0x56490e002338 'keyword' 'const char *'
|     | |-BinaryOperator 0x56490e02ca78 <col:43, col:51> 'int' '|'
|     | | |-ImplicitCastExpr 0x56490e02ca28 <col:43> 'int' <LValueToRValue>
|     | | | `-DeclRefExpr 0x56490e02c9e8 <col:43> 'int' lvalue ParmVar 0x56490e0023b8 'flags' 'int'
|     | | `-ImplicitCastExpr 0x56490e02ca60 <col:51> 'int' <LValueToRValue>
|     | |   `-DeclRefExpr 0x56490e02ca40 <col:51> 'const int' lvalue Var 0x56490dff54b0 'firstmatch' 'const int' non_odr_use_constant
|     | |-DeclRefExpr 0x56490e02ca98 <col:63> 'P' lvalue ParmVar 0x56490e002430 'parser' 'P'
|     | `-DeclRefExpr 0x56490e02cab8 <col:71> 'Vector<T>' lvalue ParmVar 0x56490e002580 'x' 'Vector<T> &'
|     `-ReturnStmt 0x56490e02cb48 <line:622:9, col:17>
|       `-UnaryOperator 0x56490e02cb30 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02cb20 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490e002ca8 <line:624:5, line:627:5> line:625:11 read_all
| |-TemplateTypeParmDecl 0x56490e0027e0 <line:624:15, col:24> col:24 typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e002858 <col:27, col:36> col:36 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e002c08 <line:625:5, line:627:5> line:625:11 read_all 'Args &(const char *, int, Vector<T> &)'
|   |-ParmVarDecl 0x56490e002918 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e002998 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56490e002ae0 <col:52, col:63> col:63 referenced x 'Vector<T> &'
|   `-CompoundStmt 0x56490e02cdc0 <col:66, line:627:5>
|     `-ReturnStmt 0x56490e02cdb0 <line:626:9, col:59>
|       `-CallExpr 0x56490e02cd70 <col:16, col:59> '<dependent type>'
|         |-UnresolvedMemberExpr 0x56490e02cb88 <col:16> '<bound member function type>' lvalue
|         |-DeclRefExpr 0x56490e02cbf8 <col:25> 'const char *' lvalue ParmVar 0x56490e002918 'keyword' 'const char *'
|         |-DeclRefExpr 0x56490e02cc18 <col:34> 'int' lvalue ParmVar 0x56490e002998 'flags' 'int'
|         |-CXXUnresolvedConstructExpr 0x56490e02cd30 <col:41, col:55> 'DefaultArg<T>' 'DefaultArg<T>'
|         `-DeclRefExpr 0x56490e02cd50 <col:58> 'Vector<T>' lvalue ParmVar 0x56490e002ae0 'x' 'Vector<T> &'
|-CXXMethodDecl 0x56490e002d38 <line:631:5, line:633:5> line:631:10 status 'bool () const'
| `-CompoundStmt 0x56490e02ce40 <col:25, line:633:5>
|   `-ReturnStmt 0x56490e02ce30 <line:632:9, col:16>
|     `-ImplicitCastExpr 0x56490e02ce18 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56490e02cde8 <col:16> 'const bool' lvalue ->_status 0x56490e014318
|         `-CXXThisExpr 0x56490e02cdd8 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56490e002ee8 <line:636:5, line:639:5> line:636:11 status 'Args &(bool &)'
| |-ParmVarDecl 0x56490e002e20 <col:18, col:24> col:24 used x 'bool &'
| `-CompoundStmt 0x56490e02cf28 <col:27, line:639:5>
|   |-BinaryOperator 0x56490e02ced0 <line:637:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56490e02ce58 <col:9> 'bool' lvalue ParmVar 0x56490e002e20 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56490e02ceb8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56490e02ce88 <col:13> 'bool' lvalue ->_status 0x56490e014318
|   |     `-CXXThisExpr 0x56490e02ce78 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56490e02cf18 <line:638:9, col:17>
|     `-UnaryOperator 0x56490e02cf00 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e02cef0 <col:17> 'Args *' this
|-CXXMethodDecl 0x56490e006e10 <line:641:5, line:644:5> line:641:17 status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56490e002fa8 <col:24, col:30> col:30 used x 'bool &'
| `-CompoundStmt 0x56490e02d018 <col:39, line:644:5>
|   |-BinaryOperator 0x56490e02cfc0 <line:642:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56490e02cf48 <col:9> 'bool' lvalue ParmVar 0x56490e002fa8 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56490e02cfa8 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56490e02cf78 <col:13> 'const bool' lvalue ->_status 0x56490e014318
|   |     `-CXXThisExpr 0x56490e02cf68 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56490e02d008 <line:643:9, col:17>
|     `-UnaryOperator 0x56490e02cff0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e02cfe0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56490e006ed8 <line:649:5, line:651:5> line:649:10 read_status 'bool () const'
| `-CompoundStmt 0x56490e02d0c0 <col:30, line:651:5>
|   `-ReturnStmt 0x56490e02d0b0 <line:650:9, col:16>
|     `-ImplicitCastExpr 0x56490e02d098 <col:16> 'bool' <LValueToRValue>
|       `-MemberExpr 0x56490e02d068 <col:16> 'bool' lvalue ->_read_status 0x56490dfedcb0
|         `-ImplicitCastExpr 0x56490e02d048 <col:16> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|           `-CXXThisExpr 0x56490e02d038 <col:16> 'const Args *' implicit this
|-CXXMethodDecl 0x56490e007020 <line:655:5, line:658:5> line:655:11 read_status 'Args &(bool &)'
| |-ParmVarDecl 0x56490e006f90 <col:23, col:29> col:29 used x 'bool &'
| `-CompoundStmt 0x56490e02d1c8 <col:32, line:658:5>
|   |-BinaryOperator 0x56490e02d170 <line:656:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56490e02d0d8 <col:9> 'bool' lvalue ParmVar 0x56490e006f90 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56490e02d158 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56490e02d128 <col:13> 'bool' lvalue ->_read_status 0x56490dfedcb0
|   |     `-ImplicitCastExpr 0x56490e02d108 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56490e02d0f8 <col:13> 'Args *' implicit this
|   `-ReturnStmt 0x56490e02d1b8 <line:657:9, col:17>
|     `-UnaryOperator 0x56490e02d1a0 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e02d190 <col:17> 'Args *' this
|-CXXMethodDecl 0x56490e007170 <line:660:5, line:663:5> line:660:17 read_status 'const Args &(bool &) const'
| |-ParmVarDecl 0x56490e0070e0 <col:29, col:35> col:35 used x 'bool &'
| `-CompoundStmt 0x56490e02d2d8 <col:44, line:663:5>
|   |-BinaryOperator 0x56490e02d280 <line:661:9, col:13> 'bool' lvalue '='
|   | |-DeclRefExpr 0x56490e02d1e8 <col:9> 'bool' lvalue ParmVar 0x56490e0070e0 'x' 'bool &'
|   | `-ImplicitCastExpr 0x56490e02d268 <col:13> 'bool' <LValueToRValue>
|   |   `-MemberExpr 0x56490e02d238 <col:13> 'bool' lvalue ->_read_status 0x56490dfedcb0
|   |     `-ImplicitCastExpr 0x56490e02d218 <col:13> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|   |       `-CXXThisExpr 0x56490e02d208 <col:13> 'const Args *' implicit this
|   `-ReturnStmt 0x56490e02d2c8 <line:662:9, col:17>
|     `-UnaryOperator 0x56490e02d2b0 <col:16, col:17> 'const Args' lvalue prefix '*' cannot overflow
|       `-CXXThisExpr 0x56490e02d2a0 <col:17> 'const Args *' this
|-CXXMethodDecl 0x56490e007238 <line:667:5, col:17> col:11 strip 'Args &()'
|-CXXMethodDecl 0x56490e007300 <line:675:5, col:17> col:9 execute 'int ()'
|-CXXMethodDecl 0x56490e0073c8 <line:684:5, col:17> col:9 consume 'int ()'
|-CXXMethodDecl 0x56490e007490 <line:693:5, col:18> col:9 used complete 'int ()'
|-FunctionTemplateDecl 0x56490e007798 <line:700:5, line:706:5> line:701:8 slot
| |-TemplateTypeParmDecl 0x56490e007530 <line:700:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490e0076f8 <line:701:5, line:706:5> line:701:8 slot 'T *(T &)'
|   |-ParmVarDecl 0x56490e007608 <col:13, col:16> col:16 referenced x 'T &'
|   `-CompoundStmt 0x56490e02d630 <col:19, line:706:5>
|     `-IfStmt 0x56490e02d608 <line:702:9, line:705:34> has_else
|       |-CXXDependentScopeMemberExpr 0x56490e02d3d8 <line:702:13, col:34> '<dependent type>' lvalue ->value
|       |-ReturnStmt 0x56490e02d538 <line:703:13, col:68>
|       | `-CXXReinterpretCastExpr 0x56490e02d508 <col:20, col:68> 'T *' reinterpret_cast<T *> <Dependent>
|       |   `-CallExpr 0x56490e02d4c8 <col:42, col:67> '<dependent type>'
|       |     |-MemberExpr 0x56490e02d430 <col:42> '<bound member function type>' ->simple_slot 0x56490e027d20
|       |     | `-CXXThisExpr 0x56490e02d420 <col:42> 'Args *' implicit this
|       |     |-UnaryOperator 0x56490e02d480 <col:54, col:55> '<dependent type>' prefix '&' cannot overflow
|       |     | `-DeclRefExpr 0x56490e02d460 <col:55> 'T' lvalue ParmVar 0x56490e007608 'x' 'T &'
|       |     `-UnaryExprOrTypeTraitExpr 0x56490e02d4a8 <col:58, col:66> 'unsigned long' sizeof 'T'
|       `-ReturnStmt 0x56490e02d5f8 <line:705:13, col:34>
|         `-CallExpr 0x56490e02d5d0 <col:20, col:34> '<dependent type>'
|           |-UnresolvedMemberExpr 0x56490e02d558 <col:20> '<bound member function type>' lvalue
|           `-DeclRefExpr 0x56490e02d5b0 <col:33> 'T' lvalue ParmVar 0x56490e007608 'x' 'T &'
|-FunctionTemplateDecl 0x56490e007a68 <line:711:5, line:717:5> line:712:8 initialized_slot
| |-TemplateTypeParmDecl 0x56490e0077f8 <line:711:15, col:24> col:24 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490e0079c8 <line:712:5, line:717:5> line:712:8 initialized_slot 'T *(T &)'
|   |-ParmVarDecl 0x56490e0078d8 <col:25, col:28> col:28 referenced x 'T &'
|   `-CompoundStmt 0x56490e02da10 <col:31, line:717:5>
|     |-DeclStmt 0x56490e02d770 <line:713:9, col:23>
|     | `-VarDecl 0x56490e02d658 <col:9, col:22> col:12 referenced s 'T *' nrvo cinit
|     |   `-CallExpr 0x56490e02d748 <col:16, col:22> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56490e02d6d0 <col:16> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56490e02d728 <col:21> 'T' lvalue ParmVar 0x56490e0078d8 'x' 'T &'
|     |-IfStmt 0x56490e02d9c0 <line:714:9, line:715:20>
|     | |-CXXDependentScopeMemberExpr 0x56490e02d868 <line:714:13, col:34> '<dependent type>' lvalue ->value
|     | `-BinaryOperator 0x56490e02d9a0 <line:715:13, col:20> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56490e02d940 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56490e02d8d0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|     |   | `-DeclRefExpr 0x56490e02d8b0 <col:14> 'T *' lvalue Var 0x56490e02d658 's' 'T *'
|     |   `-CXXUnresolvedConstructExpr 0x56490e02d980 <col:18, col:20> 'T' 'T'
|     `-ReturnStmt 0x56490e02d9f8 <line:716:9, col:16>
|       `-DeclRefExpr 0x56490e02d9d8 <col:16> 'T *' lvalue Var 0x56490e02d658 's' 'T *'
|-FunctionTemplateDecl 0x56490e007e78 <line:721:5, line:726:5> line:722:11 set
| |-TemplateTypeParmDecl 0x56490e007ac8 <line:721:15, col:24> col:24 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56490e007b48 <col:27, col:36> col:36 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56490e007dd8 <line:722:5, line:726:5> line:722:11 set 'Args &(T &, const V &)'
|   |-ParmVarDecl 0x56490e007c28 <col:15, col:18> col:18 referenced x 'T &'
|   |-ParmVarDecl 0x56490e007cc8 <col:21, col:30> col:30 referenced value 'const V &'
|   `-CompoundStmt 0x56490e02dd20 <col:37, line:726:5>
|     |-IfStmt 0x56490e02dcb0 <line:723:9, line:724:18> has_var
|     | |-DeclStmt 0x56490e02dcd0 <line:723:13, col:26>
|     | | `-VarDecl 0x56490e02da78 <col:13, col:26> col:16 referenced s 'T *' cinit
|     | |   `-CallExpr 0x56490e02db68 <col:20, col:26> '<dependent type>'
|     | |     |-UnresolvedMemberExpr 0x56490e02daf0 <col:20> '<bound member function type>' lvalue
|     | |     `-DeclRefExpr 0x56490e02db48 <col:25> 'T' lvalue ParmVar 0x56490e007c28 'x' 'T &'
|     | |-DeclRefExpr 0x56490e02db90 <col:16> 'T *' lvalue Var 0x56490e02da78 's' 'T *'
|     | `-BinaryOperator 0x56490e02dc90 <line:724:13, col:18> '<dependent type>' '='
|     |   |-CXXOperatorCallExpr 0x56490e02dc40 <col:13, col:14> '<dependent type>'
|     |   | |-UnresolvedLookupExpr 0x56490e02dbd0 <col:13> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|     |   | `-DeclRefExpr 0x56490e02dbb0 <col:14> 'T *' lvalue Var 0x56490e02da78 's' 'T *'
|     |   `-DeclRefExpr 0x56490e02dc70 <col:18> 'const V' lvalue ParmVar 0x56490e007cc8 'value' 'const V &'
|     `-ReturnStmt 0x56490e02dd10 <line:725:9, col:17>
|       `-UnaryOperator 0x56490e02dcf8 <col:16, col:17> 'Args' lvalue prefix '*' cannot overflow
|         `-CXXThisExpr 0x56490e02dce8 <col:17> 'Args *' this
|-FunctionTemplateDecl 0x56490e008278 <line:730:5, line:737:5> line:731:10 base_read
| |-TemplateTypeParmDecl 0x56490e007ee0 <line:730:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXMethodDecl 0x56490e0081d8 <line:731:5, line:737:5> line:731:10 base_read 'void (const char *, int, T &)'
|   |-ParmVarDecl 0x56490e007f90 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e008010 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56490e0080b8 <col:52, col:55> col:55 referenced variable 'T &'
|   `-CompoundStmt 0x56490e02eb40 <col:65, line:737:5>
|     |-DeclStmt 0x56490e02ddb8 <line:732:9, col:26>
|     | `-VarDecl 0x56490e02dd50 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56490e02eb08 <line:733:9, line:736:9> has_var
|       |-DeclStmt 0x56490e02eb28 <line:733:13, col:58>
|       | `-VarDecl 0x56490e02dde0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56490e02dfc0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56490e02df90 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56490e02df78 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56490e02df58 <col:26, col:58> 'String' (CXXTemporary 0x56490e02df58)
|       |           `-CXXMemberCallExpr 0x56490e02dee8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56490e02de58 <col:26> '<bound member function type>' ->find 0x56490e027338
|       |             | `-CXXThisExpr 0x56490e02de48 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56490e02df20 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e02de88 <col:31> 'const char *' lvalue ParmVar 0x56490e007f90 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56490e02df38 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e02dea8 <col:40> 'int' lvalue ParmVar 0x56490e008010 'flags' 'int'
|       |             `-DeclRefExpr 0x56490e02dec8 <col:47> 'Args::Slot *' lvalue Var 0x56490e02dd50 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56490e02e078 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56490e02e060 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56490e02e040 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56490e02e010 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |       `-ImplicitCastExpr 0x56490e02dff8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56490e02dfd8 <col:20> 'String' lvalue Var 0x56490e02dde0 'str' 'String'
|       `-CompoundStmt 0x56490e02eae8 <col:61, line:736:9>
|         |-DeclStmt 0x56490e02e530 <line:734:13, col:76>
|         | `-VarDecl 0x56490e02e0c8 <col:13, col:75> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56490e02e500 <col:20, col:75> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56490e02e470 <col:20, col:55> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56490e02e4b8 <col:60> 'T' lvalue ParmVar 0x56490e0080b8 'variable' 'T &'
|         |     `-UnaryOperator 0x56490e02e4e8 <col:70, col:71> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56490e02e4d8 <col:71> 'Args *' this
|         `-CallExpr 0x56490e02eab8 <line:735:13, col:114> '<dependent type>'
|           |-MemberExpr 0x56490e02e558 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|           | `-CXXThisExpr 0x56490e02e548 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56490e02ea78 <col:23, col:100> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56490e02e588 <col:23> 'T *' lvalue Var 0x56490e02e0c8 's' 'T *'
|           | `-CallExpr 0x56490e02ea38 <col:28, col:100> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56490e02e810 <col:28, col:63> '<dependent type>' lvalue ->parse
|           |   |-CXXUnresolvedConstructExpr 0x56490e02e910 <col:69, col:83> 'DefaultArg<T>' 'DefaultArg<T>'
|           |   |-DeclRefExpr 0x56490e02e930 <col:86> 'String' lvalue Var 0x56490e02dde0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56490e02e9e0 <col:91, col:92> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56490e02e970 <col:91> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|           |   | `-DeclRefExpr 0x56490e02e950 <col:92> 'T *' lvalue Var 0x56490e02e0c8 's' 'T *'
|           |   `-UnaryOperator 0x56490e02ea20 <col:95, col:96> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56490e02ea10 <col:96> 'Args *' this
|           `-DeclRefExpr 0x56490e02ea98 <col:103> 'Args::Slot *' lvalue Var 0x56490e02dd50 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56490e0087c8 <line:739:5, line:745:5> line:740:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56490e0082e8 <line:739:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56490e008368 <col:26, col:35> col:35 referenced typename depth 0 index 1 V
| `-CXXMethodDecl 0x56490e008728 <line:740:5, line:745:5> line:740:10 base_read_or_set 'void (const char *, int, T &, const V &)'
|   |-ParmVarDecl 0x56490e008428 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e0084a8 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56490e008548 <col:59, col:62> col:62 referenced variable 'T &'
|   |-ParmVarDecl 0x56490e0085e8 <col:72, col:81> col:81 referenced value 'const V &'
|   `-CompoundStmt 0x56490e02f9e0 <col:88, line:745:5>
|     |-DeclStmt 0x56490e02ebd8 <line:741:9, col:26>
|     | `-VarDecl 0x56490e02eb70 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56490e02edf8 <line:742:9, col:55>
|     | `-VarDecl 0x56490e02ec00 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56490e02ede0 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56490e02edb0 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56490e02ed98 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56490e02ed78 <col:22, col:54> 'String' (CXXTemporary 0x56490e02ed78)
|     |           `-CXXMemberCallExpr 0x56490e02ed08 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56490e02ec78 <col:22> '<bound member function type>' ->find 0x56490e027338
|     |             | `-CXXThisExpr 0x56490e02ec68 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56490e02ed40 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56490e02eca8 <col:27> 'const char *' lvalue ParmVar 0x56490e008428 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56490e02ed58 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56490e02ecc8 <col:36> 'int' lvalue ParmVar 0x56490e0084a8 'flags' 'int'
|     |             `-DeclRefExpr 0x56490e02ece8 <col:43> 'Args::Slot *' lvalue Var 0x56490e02eb70 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56490e02f1d0 <line:743:9, col:72>
|     | `-VarDecl 0x56490e02ee48 <col:9, col:71> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56490e02f1a0 <col:16, col:71> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56490e02f110 <col:16, col:51> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56490e02f158 <col:56> 'T' lvalue ParmVar 0x56490e008548 'variable' 'T &'
|     |     `-UnaryOperator 0x56490e02f188 <col:66, col:67> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56490e02f178 <col:67> 'Args *' this
|     `-CallExpr 0x56490e02f9b0 <line:744:9, col:139> '<dependent type>'
|       |-MemberExpr 0x56490e02f1f8 <col:9> '<bound member function type>' ->postparse 0x56490e027548
|       | `-CXXThisExpr 0x56490e02f1e8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56490e02f970 <col:19, col:125> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56490e02f228 <col:19> 'T *' lvalue Var 0x56490e02ee48 's' 'T *'
|       | `-ParenExpr 0x56490e02f950 <col:24, col:125> '<dependent type>'
|       |   `-ConditionalOperator 0x56490e02f920 <col:25, col:124> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56490e02f908 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56490e02f8f0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56490e02f8d0 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56490e02f8a0 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |     |       `-ImplicitCastExpr 0x56490e02f888 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56490e02f248 <col:25> 'String' lvalue Var 0x56490e02ec00 'str' 'String'
|       |     |-CallExpr 0x56490e02f6f8 <col:31, col:103> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56490e02f4d0 <col:31, col:66> '<dependent type>' lvalue ->parse
|       |     | |-CXXUnresolvedConstructExpr 0x56490e02f5d0 <col:72, col:86> 'DefaultArg<T>' 'DefaultArg<T>'
|       |     | |-DeclRefExpr 0x56490e02f5f0 <col:89> 'String' lvalue Var 0x56490e02ec00 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56490e02f6a0 <col:94, col:95> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56490e02f630 <col:94> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|       |     | | `-DeclRefExpr 0x56490e02f610 <col:95> 'T *' lvalue Var 0x56490e02ee48 's' 'T *'
|       |     | `-UnaryOperator 0x56490e02f6e0 <col:98, col:99> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56490e02f6d0 <col:99> 'Args *' this
|       |     `-ParenExpr 0x56490e02f868 <col:107, col:124> '<dependent type>'
|       |       `-BinaryOperator 0x56490e02f848 <col:108, col:120> '<dependent type>' ','
|       |         |-BinaryOperator 0x56490e02f818 <col:108, col:113> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56490e02f7c8 <col:108, col:109> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56490e02f758 <col:108> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|       |         | | `-DeclRefExpr 0x56490e02f738 <col:109> 'T *' lvalue Var 0x56490e02ee48 's' 'T *'
|       |         | `-DeclRefExpr 0x56490e02f7f8 <col:113> 'const V' lvalue ParmVar 0x56490e0085e8 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56490e02f838 <col:120> 'bool' true
|       `-DeclRefExpr 0x56490e02f990 <col:128> 'Args::Slot *' lvalue Var 0x56490e02eb70 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56490e008cf8 <line:747:5, line:754:5> line:748:10 base_read
| |-TemplateTypeParmDecl 0x56490e008840 <line:747:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e0088b8 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e008c58 <line:748:5, line:754:5> line:748:10 base_read 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56490e008978 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e0089f8 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56490e008a70 <col:52, col:54> col:54 referenced parser 'P'
|   |-ParmVarDecl 0x56490e008b18 <col:62, col:65> col:65 referenced variable 'T &'
|   `-CompoundStmt 0x56490e0305d8 <col:75, line:754:5>
|     |-DeclStmt 0x56490e02fa88 <line:749:9, col:26>
|     | `-VarDecl 0x56490e02fa20 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56490e0305a0 <line:750:9, line:753:9> has_var
|       |-DeclStmt 0x56490e0305c0 <line:750:13, col:58>
|       | `-VarDecl 0x56490e02fab0 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56490e02fc90 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56490e02fc60 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56490e02fc48 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56490e02fc28 <col:26, col:58> 'String' (CXXTemporary 0x56490e02fc28)
|       |           `-CXXMemberCallExpr 0x56490e02fbb8 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56490e02fb28 <col:26> '<bound member function type>' ->find 0x56490e027338
|       |             | `-CXXThisExpr 0x56490e02fb18 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56490e02fbf0 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e02fb58 <col:31> 'const char *' lvalue ParmVar 0x56490e008978 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56490e02fc08 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e02fb78 <col:40> 'int' lvalue ParmVar 0x56490e0089f8 'flags' 'int'
|       |             `-DeclRefExpr 0x56490e02fb98 <col:47> 'Args::Slot *' lvalue Var 0x56490e02fa20 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56490e02fd48 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56490e02fd30 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56490e02fd10 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56490e02fce0 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |       `-ImplicitCastExpr 0x56490e02fcc8 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56490e02fca8 <col:20> 'String' lvalue Var 0x56490e02fab0 'str' 'String'
|       `-CompoundStmt 0x56490e030580 <col:61, line:753:9>
|         |-DeclStmt 0x56490e030120 <line:751:13, col:63>
|         | `-VarDecl 0x56490e02fd98 <col:13, col:62> col:16 referenced s 'T *' cinit
|         |   `-CallExpr 0x56490e0300f0 <col:20, col:62> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56490e030060 <col:20, col:42> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56490e0300a8 <col:47> 'T' lvalue ParmVar 0x56490e008b18 'variable' 'T &'
|         |     `-UnaryOperator 0x56490e0300d8 <col:57, col:58> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56490e0300c8 <col:58> 'Args *' this
|         `-CallExpr 0x56490e030550 <line:752:13, col:92> '<dependent type>'
|           |-MemberExpr 0x56490e030148 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|           | `-CXXThisExpr 0x56490e030138 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56490e030510 <col:23, col:78> '<dependent type>' '&&'
|           | |-DeclRefExpr 0x56490e030178 <col:23> 'T *' lvalue Var 0x56490e02fd98 's' 'T *'
|           | `-CallExpr 0x56490e0304d0 <col:28, col:78> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56490e030360 <col:28, col:50> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56490e0303a8 <col:56> 'P' lvalue ParmVar 0x56490e008a70 'parser' 'P'
|           |   |-DeclRefExpr 0x56490e0303c8 <col:64> 'String' lvalue Var 0x56490e02fab0 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56490e030478 <col:69, col:70> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56490e030408 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|           |   | `-DeclRefExpr 0x56490e0303e8 <col:70> 'T *' lvalue Var 0x56490e02fd98 's' 'T *'
|           |   `-UnaryOperator 0x56490e0304b8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56490e0304a8 <col:74> 'Args *' this
|           `-DeclRefExpr 0x56490e030530 <col:81> 'Args::Slot *' lvalue Var 0x56490e02fa20 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56490e009358 <line:756:5, line:762:5> line:757:10 base_read_or_set
| |-TemplateTypeParmDecl 0x56490e008d70 <line:756:14, col:23> col:23 referenced typename depth 0 index 0 T
| |-TemplateTypeParmDecl 0x56490e008de8 <col:26, col:35> col:35 referenced typename depth 0 index 1 P
| |-TemplateTypeParmDecl 0x56490e008e68 <col:38, col:47> col:47 referenced typename depth 0 index 2 V
| `-CXXMethodDecl 0x56490e0092b8 <line:757:5, line:762:5> line:757:10 base_read_or_set 'void (const char *, int, P, T &, const V &)'
|   |-ParmVarDecl 0x56490e008f30 <col:27, col:39> col:39 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e008fb0 <col:48, col:52> col:52 referenced flags 'int'
|   |-ParmVarDecl 0x56490e009028 <col:59, col:61> col:61 referenced parser 'P'
|   |-ParmVarDecl 0x56490e0090c8 <col:69, col:72> col:72 referenced variable 'T &'
|   |-ParmVarDecl 0x56490e009168 <col:82, col:91> col:91 referenced value 'const V &'
|   `-CompoundStmt 0x56490e031368 <col:98, line:762:5>
|     |-DeclStmt 0x56490e030670 <line:758:9, col:26>
|     | `-VarDecl 0x56490e030608 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56490e030890 <line:759:9, col:55>
|     | `-VarDecl 0x56490e030698 <col:9, col:54> col:16 referenced str 'String' cinit destroyed
|     |   `-ExprWithCleanups 0x56490e030878 <col:22, col:54> 'String'
|     |     `-CXXConstructExpr 0x56490e030848 <col:22, col:54> 'String' 'void (String &&)' elidable
|     |       `-MaterializeTemporaryExpr 0x56490e030830 <col:22, col:54> 'String' xvalue
|     |         `-CXXBindTemporaryExpr 0x56490e030810 <col:22, col:54> 'String' (CXXTemporary 0x56490e030810)
|     |           `-CXXMemberCallExpr 0x56490e0307a0 <col:22, col:54> 'String'
|     |             |-MemberExpr 0x56490e030710 <col:22> '<bound member function type>' ->find 0x56490e027338
|     |             | `-CXXThisExpr 0x56490e030700 <col:22> 'Args *' implicit this
|     |             |-ImplicitCastExpr 0x56490e0307d8 <col:27> 'const char *' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56490e030740 <col:27> 'const char *' lvalue ParmVar 0x56490e008f30 'keyword' 'const char *'
|     |             |-ImplicitCastExpr 0x56490e0307f0 <col:36> 'int' <LValueToRValue>
|     |             | `-DeclRefExpr 0x56490e030760 <col:36> 'int' lvalue ParmVar 0x56490e008fb0 'flags' 'int'
|     |             `-DeclRefExpr 0x56490e030780 <col:43> 'Args::Slot *' lvalue Var 0x56490e030608 'slot_status' 'Args::Slot *'
|     |-DeclStmt 0x56490e030cb0 <line:760:9, col:59>
|     | `-VarDecl 0x56490e0308e8 <col:9, col:58> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56490e030c80 <col:16, col:58> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56490e030bf0 <col:16, col:38> '<dependent type>' lvalue ->slot
|     |     |-DeclRefExpr 0x56490e030c38 <col:43> 'T' lvalue ParmVar 0x56490e0090c8 'variable' 'T &'
|     |     `-UnaryOperator 0x56490e030c68 <col:53, col:54> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56490e030c58 <col:54> 'Args *' this
|     `-CallExpr 0x56490e031338 <line:761:9, col:117> '<dependent type>'
|       |-MemberExpr 0x56490e030cd8 <col:9> '<bound member function type>' ->postparse 0x56490e027548
|       | `-CXXThisExpr 0x56490e030cc8 <col:9> 'Args *' implicit this
|       |-BinaryOperator 0x56490e0312f8 <col:19, col:103> '<dependent type>' '&&'
|       | |-DeclRefExpr 0x56490e030d08 <col:19> 'T *' lvalue Var 0x56490e0308e8 's' 'T *'
|       | `-ParenExpr 0x56490e0312d8 <col:24, col:103> '<dependent type>'
|       |   `-ConditionalOperator 0x56490e0312a8 <col:25, col:102> '<dependent type>'
|       |     |-ImplicitCastExpr 0x56490e031290 <col:25> 'bool' <MemberPointerToBoolean>
|       |     | `-ImplicitCastExpr 0x56490e031278 <col:25> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |     |   `-CXXMemberCallExpr 0x56490e031258 <col:25> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     |     `-MemberExpr 0x56490e031228 <col:25> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |     |       `-ImplicitCastExpr 0x56490e031210 <col:25> 'const String' lvalue <NoOp>
|       |     |         `-DeclRefExpr 0x56490e030d28 <col:25> 'String' lvalue Var 0x56490e030698 'str' 'String'
|       |     |-CallExpr 0x56490e031080 <col:31, col:81> '<dependent type>'
|       |     | |-CXXDependentScopeMemberExpr 0x56490e030f10 <col:31, col:53> '<dependent type>' lvalue ->parse
|       |     | |-DeclRefExpr 0x56490e030f58 <col:59> 'P' lvalue ParmVar 0x56490e009028 'parser' 'P'
|       |     | |-DeclRefExpr 0x56490e030f78 <col:67> 'String' lvalue Var 0x56490e030698 'str' 'String'
|       |     | |-CXXOperatorCallExpr 0x56490e031028 <col:72, col:73> '<dependent type>'
|       |     | | |-UnresolvedLookupExpr 0x56490e030fb8 <col:72> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|       |     | | `-DeclRefExpr 0x56490e030f98 <col:73> 'T *' lvalue Var 0x56490e0308e8 's' 'T *'
|       |     | `-UnaryOperator 0x56490e031068 <col:76, col:77> 'Args' lvalue prefix '*' cannot overflow
|       |     |   `-CXXThisExpr 0x56490e031058 <col:77> 'Args *' this
|       |     `-ParenExpr 0x56490e0311f0 <col:85, col:102> '<dependent type>'
|       |       `-BinaryOperator 0x56490e0311d0 <col:86, col:98> '<dependent type>' ','
|       |         |-BinaryOperator 0x56490e0311a0 <col:86, col:91> '<dependent type>' '='
|       |         | |-CXXOperatorCallExpr 0x56490e031150 <col:86, col:87> '<dependent type>'
|       |         | | |-UnresolvedLookupExpr 0x56490e0310e0 <col:86> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|       |         | | `-DeclRefExpr 0x56490e0310c0 <col:87> 'T *' lvalue Var 0x56490e0308e8 's' 'T *'
|       |         | `-DeclRefExpr 0x56490e031180 <col:91> 'const V' lvalue ParmVar 0x56490e009168 'value' 'const V &'
|       |         `-CXXBoolLiteralExpr 0x56490e0311c0 <col:98> 'bool' true
|       `-DeclRefExpr 0x56490e031318 <col:106> 'Args::Slot *' lvalue Var 0x56490e030608 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56490e0099c8 <line:764:5, line:773:5> line:765:10 base_read
| |-TemplateTypeParmDecl 0x56490e0093d8 <line:764:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e009458 <col:26, col:35> col:35 referenced typename depth 0 index 1 T1
| |-TemplateTypeParmDecl 0x56490e0094d8 <col:39, col:48> col:48 referenced typename depth 0 index 2 T2
| `-CXXMethodDecl 0x56490e009928 <line:765:5, line:773:5> line:765:10 base_read 'void (const char *, int, P, T1 &, T2 &)'
|   |-ParmVarDecl 0x56490e0095a0 <col:20, col:32> col:32 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e009620 <col:41, col:45> col:45 referenced flags 'int'
|   |-ParmVarDecl 0x56490e009698 <line:766:20, col:22> col:22 referenced parser 'P'
|   |-ParmVarDecl 0x56490e009738 <col:30, col:34> col:34 referenced variable1 'T1 &'
|   |-ParmVarDecl 0x56490e0097d8 <col:45, col:49> col:49 referenced variable2 'T2 &'
|   `-CompoundStmt 0x56490e032348 <col:60, line:773:5>
|     |-DeclStmt 0x56490e031410 <line:767:9, col:26>
|     | `-VarDecl 0x56490e0313a8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56490e032310 <line:768:9, line:772:9> has_var
|       |-DeclStmt 0x56490e032330 <line:768:13, col:58>
|       | `-VarDecl 0x56490e031438 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56490e031618 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56490e0315e8 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56490e0315d0 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56490e0315b0 <col:26, col:58> 'String' (CXXTemporary 0x56490e0315b0)
|       |           `-CXXMemberCallExpr 0x56490e031540 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56490e0314b0 <col:26> '<bound member function type>' ->find 0x56490e027338
|       |             | `-CXXThisExpr 0x56490e0314a0 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56490e031578 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e0314e0 <col:31> 'const char *' lvalue ParmVar 0x56490e0095a0 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56490e031590 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e031500 <col:40> 'int' lvalue ParmVar 0x56490e009620 'flags' 'int'
|       |             `-DeclRefExpr 0x56490e031520 <col:47> 'Args::Slot *' lvalue Var 0x56490e0313a8 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56490e0316d0 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56490e0316b8 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56490e031698 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56490e031668 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |       `-ImplicitCastExpr 0x56490e031650 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56490e031630 <col:20> 'String' lvalue Var 0x56490e031438 'str' 'String'
|       `-CompoundStmt 0x56490e0322e8 <col:61, line:772:9>
|         |-DeclStmt 0x56490e031a10 <line:769:13, col:66>
|         | `-VarDecl 0x56490e031728 <col:13, col:65> col:17 referenced s1 'T1 *' cinit
|         |   `-CallExpr 0x56490e0319e0 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56490e031950 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56490e031998 <col:49> 'T1' lvalue ParmVar 0x56490e009738 'variable1' 'T1 &'
|         |     `-UnaryOperator 0x56490e0319c8 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56490e0319b8 <col:61> 'Args *' this
|         |-DeclStmt 0x56490e031d80 <line:770:13, col:66>
|         | `-VarDecl 0x56490e031a98 <col:13, col:65> col:17 referenced s2 'T2 *' cinit
|         |   `-CallExpr 0x56490e031d50 <col:22, col:65> '<dependent type>'
|         |     |-CXXDependentScopeMemberExpr 0x56490e031cc0 <col:22, col:44> '<dependent type>' lvalue ->slot
|         |     |-DeclRefExpr 0x56490e031d08 <col:49> 'T2' lvalue ParmVar 0x56490e0097d8 'variable2' 'T2 &'
|         |     `-UnaryOperator 0x56490e031d38 <col:60, col:61> 'Args' lvalue prefix '*' cannot overflow
|         |       `-CXXThisExpr 0x56490e031d28 <col:61> 'Args *' this
|         `-CallExpr 0x56490e0322b8 <line:771:13, col:105> '<dependent type>'
|           |-MemberExpr 0x56490e031da8 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|           | `-CXXThisExpr 0x56490e031d98 <col:13> 'Args *' implicit this
|           |-BinaryOperator 0x56490e032278 <col:23, col:91> '<dependent type>' '&&'
|           | |-BinaryOperator 0x56490e031e18 <col:23, col:29> '<dependent type>' '&&'
|           | | |-DeclRefExpr 0x56490e031dd8 <col:23> 'T1 *' lvalue Var 0x56490e031728 's1' 'T1 *'
|           | | `-DeclRefExpr 0x56490e031df8 <col:29> 'T2 *' lvalue Var 0x56490e031a98 's2' 'T2 *'
|           | `-CallExpr 0x56490e032230 <col:35, col:91> '<dependent type>'
|           |   |-CXXDependentScopeMemberExpr 0x56490e032000 <col:35, col:57> '<dependent type>' lvalue ->parse
|           |   |-DeclRefExpr 0x56490e032048 <col:63> 'P' lvalue ParmVar 0x56490e009698 'parser' 'P'
|           |   |-DeclRefExpr 0x56490e032068 <col:71> 'String' lvalue Var 0x56490e031438 'str' 'String'
|           |   |-CXXOperatorCallExpr 0x56490e032118 <col:76, col:77> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56490e0320a8 <col:76> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|           |   | `-DeclRefExpr 0x56490e032088 <col:77> 'T1 *' lvalue Var 0x56490e031728 's1' 'T1 *'
|           |   |-CXXOperatorCallExpr 0x56490e0321d8 <col:81, col:82> '<dependent type>'
|           |   | |-UnresolvedLookupExpr 0x56490e032168 <col:81> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|           |   | `-DeclRefExpr 0x56490e032148 <col:82> 'T2 *' lvalue Var 0x56490e031a98 's2' 'T2 *'
|           |   `-UnaryOperator 0x56490e032218 <col:86, col:87> 'Args' lvalue prefix '*' cannot overflow
|           |     `-CXXThisExpr 0x56490e032208 <col:87> 'Args *' this
|           `-DeclRefExpr 0x56490e032298 <col:94> 'Args::Slot *' lvalue Var 0x56490e0313a8 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56490e009db8 <line:775:5, line:780:5> line:776:10 base_read_with
| |-TemplateTypeParmDecl 0x56490e009a48 <line:775:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490e009d18 <line:776:5, line:780:5> line:776:10 base_read_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56490e009b00 <col:25, col:37> col:37 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e009b80 <col:46, col:50> col:50 referenced flags 'int'
|   |-ParmVarDecl 0x56490e009bf8 <col:57, col:59> col:59 referenced parser 'P'
|   `-CompoundStmt 0x56490e034358 <col:67, line:780:5>
|     |-DeclStmt 0x56490e0323e0 <line:777:9, col:26>
|     | `-VarDecl 0x56490e032378 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     `-IfStmt 0x56490e034320 <line:778:9, line:779:60> has_var
|       |-DeclStmt 0x56490e034340 <line:778:13, col:58>
|       | `-VarDecl 0x56490e033f00 <col:13, col:58> col:20 referenced str 'String' cinit destroyed
|       |   `-ExprWithCleanups 0x56490e0340e0 <col:26, col:58> 'String'
|       |     `-CXXConstructExpr 0x56490e0340b0 <col:26, col:58> 'String' 'void (String &&)' elidable
|       |       `-MaterializeTemporaryExpr 0x56490e034098 <col:26, col:58> 'String' xvalue
|       |         `-CXXBindTemporaryExpr 0x56490e034078 <col:26, col:58> 'String' (CXXTemporary 0x56490e034078)
|       |           `-CXXMemberCallExpr 0x56490e034008 <col:26, col:58> 'String'
|       |             |-MemberExpr 0x56490e033f78 <col:26> '<bound member function type>' ->find 0x56490e027338
|       |             | `-CXXThisExpr 0x56490e033f68 <col:26> 'Args *' implicit this
|       |             |-ImplicitCastExpr 0x56490e034040 <col:31> 'const char *' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e033fa8 <col:31> 'const char *' lvalue ParmVar 0x56490e009b00 'keyword' 'const char *'
|       |             |-ImplicitCastExpr 0x56490e034058 <col:40> 'int' <LValueToRValue>
|       |             | `-DeclRefExpr 0x56490e033fc8 <col:40> 'int' lvalue ParmVar 0x56490e009b80 'flags' 'int'
|       |             `-DeclRefExpr 0x56490e033fe8 <col:47> 'Args::Slot *' lvalue Var 0x56490e032378 'slot_status' 'Args::Slot *'
|       |-ImplicitCastExpr 0x56490e034198 <col:20> 'bool' <MemberPointerToBoolean>
|       | `-ImplicitCastExpr 0x56490e034180 <col:20> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|       |   `-CXXMemberCallExpr 0x56490e034160 <col:20> 'String::unspecified_bool_type':'int (String::*)() const'
|       |     `-MemberExpr 0x56490e034130 <col:20> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|       |       `-ImplicitCastExpr 0x56490e034118 <col:20> 'const String' lvalue <NoOp>
|       |         `-DeclRefExpr 0x56490e0340f8 <col:20> 'String' lvalue Var 0x56490e033f00 'str' 'String'
|       `-CallExpr 0x56490e0342f0 <line:779:13, col:60> '<dependent type>'
|         |-MemberExpr 0x56490e0341c0 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|         | `-CXXThisExpr 0x56490e0341b0 <col:13> 'Args *' implicit this
|         |-CallExpr 0x56490e0342a0 <col:23, col:46> '<dependent type>'
|         | |-CXXDependentScopeMemberExpr 0x56490e034210 <col:23, col:30> '<dependent type>' lvalue .parse
|         | | `-DeclRefExpr 0x56490e0341f0 <col:23> 'P' lvalue ParmVar 0x56490e009bf8 'parser' 'P'
|         | |-DeclRefExpr 0x56490e034258 <col:36> 'String' lvalue Var 0x56490e033f00 'str' 'String'
|         | `-UnaryOperator 0x56490e034288 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|         |   `-CXXThisExpr 0x56490e034278 <col:42> 'Args *' this
|         `-DeclRefExpr 0x56490e0342d0 <col:49> 'Args::Slot *' lvalue Var 0x56490e032378 'slot_status' 'Args::Slot *'
|-FunctionTemplateDecl 0x56490e00a158 <line:782:5, line:792:5> line:783:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56490e009e28 <line:782:14, col:23> col:23 referenced typename depth 0 index 0 P
| `-CXXMethodDecl 0x56490e00a0b8 <line:783:5, line:792:5> line:783:10 base_read_all_with 'void (const char *, int, P)'
|   |-ParmVarDecl 0x56490e009ee0 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e009f60 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56490e009fd8 <col:61, col:63> col:63 referenced parser 'P'
|   `-CompoundStmt 0x56490e034cc8 <col:71, line:792:5>
|     |-DeclStmt 0x56490e0343f0 <line:784:9, col:26>
|     | `-VarDecl 0x56490e034388 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56490e0344c0 <line:785:9, col:29>
|     | `-VarDecl 0x56490e034420 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56490e0344a8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56490e034488 <col:28> 'int' 1
|     |-WhileStmt 0x56490e034b78 <line:786:9, line:790:9> has_var
|     | |-DeclStmt 0x56490e034b98 <line:786:16, col:61>
|     | | `-VarDecl 0x56490e0344e8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56490e0346c8 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56490e034698 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56490e034680 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56490e034660 <col:29, col:61> 'String' (CXXTemporary 0x56490e034660)
|     | |           `-CXXMemberCallExpr 0x56490e0345f0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56490e034560 <col:29> '<bound member function type>' ->find 0x56490e027338
|     | |             | `-CXXThisExpr 0x56490e034550 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56490e034628 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56490e034590 <col:34> 'const char *' lvalue ParmVar 0x56490e009ee0 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56490e034640 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56490e0345b0 <col:43> 'int' lvalue ParmVar 0x56490e009f60 'flags' 'int'
|     | |             `-DeclRefExpr 0x56490e0345d0 <col:50> 'Args::Slot *' lvalue Var 0x56490e034388 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56490e034780 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56490e034768 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56490e034748 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56490e034718 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|     | |       `-ImplicitCastExpr 0x56490e034700 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56490e0346e0 <col:23> 'String' lvalue Var 0x56490e0344e8 'str' 'String'
|     | `-CompoundStmt 0x56490e034b50 <col:64, line:790:9>
|     |   |-CallExpr 0x56490e0348d8 <line:787:13, col:60> '<dependent type>'
|     |   | |-MemberExpr 0x56490e0347a8 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|     |   | | `-CXXThisExpr 0x56490e034798 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56490e034888 <col:23, col:46> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56490e0347f8 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56490e0347d8 <col:23> 'P' lvalue ParmVar 0x56490e009fd8 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56490e034840 <col:36> 'String' lvalue Var 0x56490e0344e8 'str' 'String'
|     |   | | `-UnaryOperator 0x56490e034870 <col:41, col:42> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56490e034860 <col:42> 'Args *' this
|     |   | `-DeclRefExpr 0x56490e0348b8 <col:49> 'Args::Slot *' lvalue Var 0x56490e034388 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56490e034a70 <line:788:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56490e034908 <col:13> 'int' lvalue Var 0x56490e034420 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56490e034a58 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56490e034a38 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56490e0349a0 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56490e034980 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56490e034968 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56490e034928 <col:28> 'int' lvalue Var 0x56490e034420 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56490e034948 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56490e034a20 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56490e0349f0 <col:49> 'bool' lvalue ->_read_status 0x56490dfedcb0
|     |   |         `-ImplicitCastExpr 0x56490e0349d0 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56490e0349c0 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56490e034b20 <line:789:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56490e034a90 <col:13> 'int' lvalue ParmVar 0x56490e009f60 'flags' 'int'
|     |     `-UnaryOperator 0x56490e034b08 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56490e034af0 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56490e034ad0 <col:23> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56490e034ca8 <line:791:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56490e034be0 <col:9> 'bool' lvalue ->_read_status 0x56490dfedcb0
|       | `-ImplicitCastExpr 0x56490e034bc0 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56490e034bb0 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56490e034c88 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56490e034c68 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56490e034c50 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56490e034c10 <col:25> 'int' lvalue Var 0x56490e034420 'read_status' 'int'
|           `-IntegerLiteral 0x56490e034c30 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56490e00a638 <line:794:5, line:805:5> line:795:10 base_read_all_with
| |-TemplateTypeParmDecl 0x56490e00a1c8 <line:794:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e00a248 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e00a598 <line:795:5, line:805:5> line:795:10 base_read_all_with 'void (const char *, int, P, T &)'
|   |-ParmVarDecl 0x56490e00a308 <col:29, col:41> col:41 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e00a388 <col:50, col:54> col:54 referenced flags 'int'
|   |-ParmVarDecl 0x56490e00a400 <col:61, col:63> col:63 referenced parser 'P'
|   |-ParmVarDecl 0x56490e00a4a8 <col:71, col:74> col:74 referenced variable 'T &'
|   `-CompoundStmt 0x56490e035c60 <col:84, line:805:5>
|     |-DeclStmt 0x56490e034d70 <line:796:9, col:26>
|     | `-VarDecl 0x56490e034d08 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56490e034e40 <line:797:9, col:29>
|     | `-VarDecl 0x56490e034da0 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56490e034e28 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56490e034e08 <col:28> 'int' 1
|     |-DeclStmt 0x56490e035180 <line:798:9, col:71>
|     | `-VarDecl 0x56490e034e98 <col:9, col:70> col:12 referenced s 'T *' cinit
|     |   `-CallExpr 0x56490e035150 <col:16, col:70> '<dependent type>'
|     |     |-CXXDependentScopeMemberExpr 0x56490e0350c0 <col:16, col:38> '<dependent type>' lvalue ->initialized_slot
|     |     |-DeclRefExpr 0x56490e035108 <col:55> 'T' lvalue ParmVar 0x56490e00a4a8 'variable' 'T &'
|     |     `-UnaryOperator 0x56490e035138 <col:65, col:66> 'Args' lvalue prefix '*' cannot overflow
|     |       `-CXXThisExpr 0x56490e035128 <col:66> 'Args *' this
|     |-WhileStmt 0x56490e035b10 <line:799:9, line:803:9> has_var
|     | |-DeclStmt 0x56490e035b30 <line:799:16, col:61>
|     | | `-VarDecl 0x56490e0351a8 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56490e035388 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56490e035358 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56490e035340 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56490e035320 <col:29, col:61> 'String' (CXXTemporary 0x56490e035320)
|     | |           `-CXXMemberCallExpr 0x56490e0352b0 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56490e035220 <col:29> '<bound member function type>' ->find 0x56490e027338
|     | |             | `-CXXThisExpr 0x56490e035210 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56490e0352e8 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56490e035250 <col:34> 'const char *' lvalue ParmVar 0x56490e00a308 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56490e035300 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56490e035270 <col:43> 'int' lvalue ParmVar 0x56490e00a388 'flags' 'int'
|     | |             `-DeclRefExpr 0x56490e035290 <col:50> 'Args::Slot *' lvalue Var 0x56490e034d08 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56490e035440 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56490e035428 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56490e035408 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56490e0353d8 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|     | |       `-ImplicitCastExpr 0x56490e0353c0 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56490e0353a0 <col:23> 'String' lvalue Var 0x56490e0351a8 'str' 'String'
|     | `-CompoundStmt 0x56490e035ae8 <col:64, line:803:9>
|     |   |-CallExpr 0x56490e035870 <line:800:13, col:92> '<dependent type>'
|     |   | |-MemberExpr 0x56490e035468 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|     |   | | `-CXXThisExpr 0x56490e035458 <col:13> 'Args *' implicit this
|     |   | |-BinaryOperator 0x56490e035830 <col:23, col:78> '<dependent type>' '&&'
|     |   | | |-DeclRefExpr 0x56490e035498 <col:23> 'T *' lvalue Var 0x56490e034e98 's' 'T *'
|     |   | | `-CallExpr 0x56490e0357f0 <col:28, col:78> '<dependent type>'
|     |   | |   |-CXXDependentScopeMemberExpr 0x56490e035680 <col:28, col:50> '<dependent type>' lvalue ->parse
|     |   | |   |-DeclRefExpr 0x56490e0356c8 <col:56> 'P' lvalue ParmVar 0x56490e00a400 'parser' 'P'
|     |   | |   |-DeclRefExpr 0x56490e0356e8 <col:64> 'String' lvalue Var 0x56490e0351a8 'str' 'String'
|     |   | |   |-CXXOperatorCallExpr 0x56490e035798 <col:69, col:70> '<dependent type>'
|     |   | |   | |-UnresolvedLookupExpr 0x56490e035728 <col:69> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|     |   | |   | `-DeclRefExpr 0x56490e035708 <col:70> 'T *' lvalue Var 0x56490e034e98 's' 'T *'
|     |   | |   `-UnaryOperator 0x56490e0357d8 <col:73, col:74> 'Args' lvalue prefix '*' cannot overflow
|     |   | |     `-CXXThisExpr 0x56490e0357c8 <col:74> 'Args *' this
|     |   | `-DeclRefExpr 0x56490e035850 <col:81> 'Args::Slot *' lvalue Var 0x56490e034d08 'slot_status' 'Args::Slot *'
|     |   |-BinaryOperator 0x56490e035a08 <line:801:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56490e0358a0 <col:13> 'int' lvalue Var 0x56490e034da0 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56490e0359f0 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56490e0359d0 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56490e035938 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56490e035918 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56490e035900 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56490e0358c0 <col:28> 'int' lvalue Var 0x56490e034da0 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56490e0358e0 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56490e0359b8 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56490e035988 <col:49> 'bool' lvalue ->_read_status 0x56490dfedcb0
|     |   |         `-ImplicitCastExpr 0x56490e035968 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56490e035958 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56490e035ab8 <line:802:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56490e035a28 <col:13> 'int' lvalue ParmVar 0x56490e00a388 'flags' 'int'
|     |     `-UnaryOperator 0x56490e035aa0 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56490e035a88 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56490e035a68 <col:23> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56490e035c40 <line:804:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56490e035b78 <col:9> 'bool' lvalue ->_read_status 0x56490dfedcb0
|       | `-ImplicitCastExpr 0x56490e035b58 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56490e035b48 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56490e035c20 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56490e035c00 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56490e035be8 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56490e035ba8 <col:25> 'int' lvalue Var 0x56490e034da0 'read_status' 'int'
|           `-IntegerLiteral 0x56490e035bc8 <col:40> 'int' 1
|-FunctionTemplateDecl 0x56490e00ac18 <line:807:5, line:821:5> line:808:10 base_read_all
| |-TemplateTypeParmDecl 0x56490e00a6b0 <line:807:14, col:23> col:23 referenced typename depth 0 index 0 P
| |-TemplateTypeParmDecl 0x56490e00a728 <col:26, col:35> col:35 referenced typename depth 0 index 1 T
| `-CXXMethodDecl 0x56490e00ab78 <line:808:5, line:821:5> line:808:10 base_read_all 'void (const char *, int, P, Vector<T> &)'
|   |-ParmVarDecl 0x56490e00a7e8 <col:24, col:36> col:36 referenced keyword 'const char *'
|   |-ParmVarDecl 0x56490e00a868 <col:45, col:49> col:49 referenced flags 'int'
|   |-ParmVarDecl 0x56490e00a8e0 <col:56, col:58> col:58 referenced parser 'P'
|   |-ParmVarDecl 0x56490e00aa30 <col:66, col:77> col:77 referenced variable 'Vector<T> &'
|   `-CompoundStmt 0x56490e036a68 <col:87, line:821:5>
|     |-DeclStmt 0x56490e035d10 <line:809:9, col:26>
|     | `-VarDecl 0x56490e035ca8 <col:9, col:15> col:15 referenced slot_status 'Args::Slot *'
|     |-DeclStmt 0x56490e035de0 <line:810:9, col:29>
|     | `-VarDecl 0x56490e035d40 <col:9, col:28> col:13 referenced read_status 'int' cinit
|     |   `-UnaryOperator 0x56490e035dc8 <col:27, col:28> 'int' prefix '-'
|     |     `-IntegerLiteral 0x56490e035da8 <col:28> 'int' 1
|     |-DeclStmt 0x56490e036028 <line:811:9, col:38>
|     | `-VarDecl 0x56490e035f10 <col:9, col:37> col:20 referenced s 'Vector<T> *' cinit
|     |   `-CallExpr 0x56490e036000 <col:24, col:37> '<dependent type>'
|     |     |-UnresolvedMemberExpr 0x56490e035f88 <col:24> '<bound member function type>' lvalue
|     |     `-DeclRefExpr 0x56490e035fe0 <col:29> 'Vector<T>' lvalue ParmVar 0x56490e00aa30 'variable' 'Vector<T> &'
|     |-WhileStmt 0x56490e036918 <line:812:9, line:819:9> has_var
|     | |-DeclStmt 0x56490e036938 <line:812:16, col:61>
|     | | `-VarDecl 0x56490e036050 <col:16, col:61> col:23 referenced str 'String' cinit destroyed
|     | |   `-ExprWithCleanups 0x56490e036230 <col:29, col:61> 'String'
|     | |     `-CXXConstructExpr 0x56490e036200 <col:29, col:61> 'String' 'void (String &&)' elidable
|     | |       `-MaterializeTemporaryExpr 0x56490e0361e8 <col:29, col:61> 'String' xvalue
|     | |         `-CXXBindTemporaryExpr 0x56490e0361c8 <col:29, col:61> 'String' (CXXTemporary 0x56490e0361c8)
|     | |           `-CXXMemberCallExpr 0x56490e036158 <col:29, col:61> 'String'
|     | |             |-MemberExpr 0x56490e0360c8 <col:29> '<bound member function type>' ->find 0x56490e027338
|     | |             | `-CXXThisExpr 0x56490e0360b8 <col:29> 'Args *' implicit this
|     | |             |-ImplicitCastExpr 0x56490e036190 <col:34> 'const char *' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56490e0360f8 <col:34> 'const char *' lvalue ParmVar 0x56490e00a7e8 'keyword' 'const char *'
|     | |             |-ImplicitCastExpr 0x56490e0361a8 <col:43> 'int' <LValueToRValue>
|     | |             | `-DeclRefExpr 0x56490e036118 <col:43> 'int' lvalue ParmVar 0x56490e00a868 'flags' 'int'
|     | |             `-DeclRefExpr 0x56490e036138 <col:50> 'Args::Slot *' lvalue Var 0x56490e035ca8 'slot_status' 'Args::Slot *'
|     | |-ImplicitCastExpr 0x56490e0362e8 <col:23> 'bool' <MemberPointerToBoolean>
|     | | `-ImplicitCastExpr 0x56490e0362d0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const' <UserDefinedConversion>
|     | |   `-CXXMemberCallExpr 0x56490e0362b0 <col:23> 'String::unspecified_bool_type':'int (String::*)() const'
|     | |     `-MemberExpr 0x56490e036280 <col:23> '<bound member function type>' .operator int (String::*)() const 0x56490dcd1068
|     | |       `-ImplicitCastExpr 0x56490e036268 <col:23> 'const String' lvalue <NoOp>
|     | |         `-DeclRefExpr 0x56490e036248 <col:23> 'String' lvalue Var 0x56490e036050 'str' 'String'
|     | `-CompoundStmt 0x56490e0368e0 <col:64, line:819:9>
|     |   |-DeclStmt 0x56490e0363a8 <line:813:13, col:23>
|     |   | `-VarDecl 0x56490e036310 <col:13, col:22> col:15 referenced sx 'T' cinit
|     |   |   `-CXXUnresolvedConstructExpr 0x56490e036388 <col:20, col:22> 'T' 'T'
|     |   |-CallExpr 0x56490e036528 <line:814:13, col:64> '<dependent type>'
|     |   | |-MemberExpr 0x56490e0363d0 <col:13> '<bound member function type>' ->postparse 0x56490e027548
|     |   | | `-CXXThisExpr 0x56490e0363c0 <col:13> 'Args *' implicit this
|     |   | |-CallExpr 0x56490e0364d0 <col:23, col:50> '<dependent type>'
|     |   | | |-CXXDependentScopeMemberExpr 0x56490e036420 <col:23, col:30> '<dependent type>' lvalue .parse
|     |   | | | `-DeclRefExpr 0x56490e036400 <col:23> 'P' lvalue ParmVar 0x56490e00a8e0 'parser' 'P'
|     |   | | |-DeclRefExpr 0x56490e036468 <col:36> 'String' lvalue Var 0x56490e036050 'str' 'String'
|     |   | | |-DeclRefExpr 0x56490e036488 <col:41> 'T' lvalue Var 0x56490e036310 'sx' 'T'
|     |   | | `-UnaryOperator 0x56490e0364b8 <col:45, col:46> 'Args' lvalue prefix '*' cannot overflow
|     |   | |   `-CXXThisExpr 0x56490e0364a8 <col:46> 'Args *' this
|     |   | `-DeclRefExpr 0x56490e036508 <col:53> 'Args::Slot *' lvalue Var 0x56490e035ca8 'slot_status' 'Args::Slot *'
|     |   |-IfStmt 0x56490e036680 <line:815:13, line:816:32>
|     |   | |-ImplicitCastExpr 0x56490e0365b8 <line:815:17> 'bool' <LValueToRValue>
|     |   | | `-MemberExpr 0x56490e036588 <col:17> 'bool' lvalue ->_read_status 0x56490dfedcb0
|     |   | |   `-ImplicitCastExpr 0x56490e036568 <col:17> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   | |     `-CXXThisExpr 0x56490e036558 <col:17> 'Args *' implicit this
|     |   | `-CallExpr 0x56490e036658 <line:816:17, col:32> '<dependent type>'
|     |   |   |-CXXDependentScopeMemberExpr 0x56490e0365f0 <col:17, col:20> '<dependent type>' lvalue ->push_back
|     |   |   | `-DeclRefExpr 0x56490e0365d0 <col:17> 'Vector<T> *' lvalue Var 0x56490e035f10 's' 'Vector<T> *'
|     |   |   `-DeclRefExpr 0x56490e036638 <col:30> 'T' lvalue Var 0x56490e036310 'sx' 'T'
|     |   |-BinaryOperator 0x56490e036800 <line:817:13, col:49> 'int' lvalue '='
|     |   | |-DeclRefExpr 0x56490e036698 <col:13> 'int' lvalue Var 0x56490e035d40 'read_status' 'int'
|     |   | `-ImplicitCastExpr 0x56490e0367e8 <col:27, col:49> 'int' <IntegralCast>
|     |   |   `-BinaryOperator 0x56490e0367c8 <col:27, col:49> 'bool' '&&'
|     |   |     |-ParenExpr 0x56490e036730 <col:27, col:44> 'bool'
|     |   |     | `-BinaryOperator 0x56490e036710 <col:28, col:43> 'bool' '!='
|     |   |     |   |-ImplicitCastExpr 0x56490e0366f8 <col:28> 'int' <LValueToRValue>
|     |   |     |   | `-DeclRefExpr 0x56490e0366b8 <col:28> 'int' lvalue Var 0x56490e035d40 'read_status' 'int'
|     |   |     |   `-IntegerLiteral 0x56490e0366d8 <col:43> 'int' 0
|     |   |     `-ImplicitCastExpr 0x56490e0367b0 <col:49> 'bool' <LValueToRValue>
|     |   |       `-MemberExpr 0x56490e036780 <col:49> 'bool' lvalue ->_read_status 0x56490dfedcb0
|     |   |         `-ImplicitCastExpr 0x56490e036760 <col:49> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|     |   |           `-CXXThisExpr 0x56490e036750 <col:49> 'Args *' implicit this
|     |   `-CompoundAssignOperator 0x56490e0368b0 <line:818:13, col:23> 'int' lvalue '&=' ComputeLHSTy='int' ComputeResultTy='int'
|     |     |-DeclRefExpr 0x56490e036820 <col:13> 'int' lvalue ParmVar 0x56490e00a868 'flags' 'int'
|     |     `-UnaryOperator 0x56490e036898 <col:22, col:23> 'int' prefix '~' cannot overflow
|     |       `-ImplicitCastExpr 0x56490e036880 <col:23> 'int' <LValueToRValue>
|     |         `-DeclRefExpr 0x56490e036860 <col:23> 'const int' lvalue Var 0x56490dff51c8 'mandatory' 'const int' non_odr_use_constant
|     `-BinaryOperator 0x56490e036a48 <line:820:9, col:41> 'bool' lvalue '='
|       |-MemberExpr 0x56490e036980 <col:9> 'bool' lvalue ->_read_status 0x56490dfedcb0
|       | `-ImplicitCastExpr 0x56490e036960 <col:9> 'ArgContext *' <UncheckedDerivedToBase (ArgContext)>
|       |   `-CXXThisExpr 0x56490e036950 <col:9> 'Args *' implicit this
|       `-ParenExpr 0x56490e036a28 <col:24, col:41> 'bool'
|         `-BinaryOperator 0x56490e036a08 <col:25, col:40> 'bool' '=='
|           |-ImplicitCastExpr 0x56490e0369f0 <col:25> 'int' <LValueToRValue>
|           | `-DeclRefExpr 0x56490e0369b0 <col:25> 'int' lvalue Var 0x56490e035d40 'read_status' 'int'
|           `-IntegerLiteral 0x56490e0369d0 <col:40> 'int' 1
|-AccessSpecDecl 0x56490e00ac90 <line:824:3, col:10> col:3 private
|-CXXRecordDecl 0x56490e00acb8 prev 0x56490dff3458 <line:826:5, line:833:5> line:826:12 referenced struct Slot definition
| |-DefinitionData polymorphic abstract has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x56490e012780 <col:5, col:12> col:12 implicit referenced struct Slot
| |-CXXConstructorDecl 0x56490e012870 <line:827:9, line:828:9> line:827:9 used Slot 'void ()'
| | `-CompoundStmt 0x56490e036aa0 <col:16, line:828:9>
| |-CXXDestructorDecl 0x56490e012960 <line:829:9, line:830:9> line:829:17 used ~Slot 'void () noexcept' virtual
| | `-CompoundStmt 0x56490e036ab0 <col:25, line:830:9>
| |-CXXMethodDecl 0x56490e012a60 <line:831:9, col:32> col:22 store 'void ()' virtual pure
| |-FieldDecl 0x56490e012b10 <line:832:9, col:15> col:15 _next 'Args::Slot *'
| |-CXXMethodDecl 0x56490e012bb8 <line:826:12> col:12 implicit operator= 'Args::Slot &(const Args::Slot &)' inline default noexcept-unevaluated 0x56490e012bb8
| | `-ParmVarDecl 0x56490e012cc8 <col:12> col:12 'const Args::Slot &'
| `-CXXConstructorDecl 0x56490e013488 <col:12> col:12 implicit constexpr Slot 'void (const Args::Slot &)' inline default noexcept-unevaluated 0x56490e013488
|   `-ParmVarDecl 0x56490e013598 <col:12> col:12 'const Args::Slot &'
|-CXXRecordDecl 0x56490e012d38 <line:835:5, line:848:5> line:835:12 struct BytesSlot definition
| |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor
| | |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor needs_overload_resolution
| | |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment needs_overload_resolution
| | `-Destructor non_trivial user_declared needs_overload_resolution
| |-public 'Args::Slot'
| |-CXXRecordDecl 0x56490e012e98 <col:5, col:12> col:12 implicit referenced struct BytesSlot
| |-CXXConstructorDecl 0x56490e013090 <line:836:9, line:838:9> line:836:9 BytesSlot 'void (void *, size_t)'
| | |-ParmVarDecl 0x56490e012f40 <col:19, col:25> col:25 used ptr 'void *'
| | |-ParmVarDecl 0x56490e012fb8 <col:30, col:37> col:37 used size 'size_t':'unsigned long'
| | |-CXXCtorInitializer 'Args::Slot'
| | | `-CXXConstructExpr 0x56490e036c90 <col:9> 'Args::Slot' 'void ()'
| | |-CXXCtorInitializer Field 0x56490e013348 '_ptr' 'void *'
| | | `-ImplicitCastExpr 0x56490e036b00 <line:837:20> 'void *' <LValueToRValue>
| | |   `-DeclRefExpr 0x56490e036ac0 <col:20> 'void *' lvalue ParmVar 0x56490e012f40 'ptr' 'void *'
| | |-CXXCtorInitializer Field 0x56490e0133b0 '_slot' 'char *'
| | | `-CXXNewExpr 0x56490e036b88 <col:32, col:45> 'char *' array Function 0x56490dbe5e38 'operator new[]' 'void *(std::size_t)'
| | |   `-ImplicitCastExpr 0x56490e036b70 <col:41> 'size_t':'unsigned long' <LValueToRValue>
| | |     `-DeclRefExpr 0x56490e036b40 <col:41> 'size_t':'unsigned long' lvalue ParmVar 0x56490e012fb8 'size' 'size_t':'unsigned long'
| | |-CXXCtorInitializer Field 0x56490e013410 '_size' 'size_t':'unsigned long'
| | | `-ImplicitCastExpr 0x56490e036c50 <col:55> 'size_t':'unsigned long' <LValueToRValue>
| | |   `-DeclRefExpr 0x56490e036c10 <col:55> 'size_t':'unsigned long' lvalue ParmVar 0x56490e012fb8 'size' 'size_t':'unsigned long'
| | `-CompoundStmt 0x56490e036d10 <col:61, line:838:9>
| |-CXXDestructorDecl 0x56490e013190 <line:839:9, line:841:9> line:839:9 ~BytesSlot 'void () noexcept'
| | |-Overrides: [ 0x56490e012960 Slot::~Slot 'void () noexcept' ]
| | `-CompoundStmt 0x56490e036d98 <col:22, line:841:9>
| |   `-CXXDeleteExpr 0x56490e036d78 <line:840:13, col:22> 'void' array Function 0x56490dbe6198 'operator delete[]' 'void (void *) noexcept'
| |     `-ImplicitCastExpr 0x56490e036d60 <col:22> 'char *' <LValueToRValue>
| |       `-MemberExpr 0x56490e036d30 <col:22> 'char *' lvalue ->_slot 0x56490e0133b0
| |         `-CXXThisExpr 0x56490e036d20 <col:22> 'Args::BytesSlot *' implicit this
| |-CXXMethodDecl 0x56490e013290 <line:842:9, line:844:9> line:842:14 store 'void ()'
| | |-Overrides: [ 0x56490e012a60 Slot::store 'void ()' ]
| | `-CompoundStmt 0x56490e036f88 <col:22, line:844:9>
| |   `-CallExpr 0x56490e036ef0 <line:843:13, col:38> 'void *'
| |     |-ImplicitCastExpr 0x56490e036ed8 <col:13> 'void *(*)(void *__restrict, const void *__restrict, size_t) throw()' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x56490e036eb8 <col:13> 'void *(void *__restrict, const void *__restrict, size_t) throw()' lvalue Function 0x56490dcbc898 'memcpy' 'void *(void *__restrict, const void *__restrict, size_t) throw()'
| |     |-ImplicitCastExpr 0x56490e036f28 <col:20> 'void *' <LValueToRValue>
| |     | `-MemberExpr 0x56490e036e08 <col:20> 'void *' lvalue ->_ptr 0x56490e013348
| |     |   `-CXXThisExpr 0x56490e036df8 <col:20> 'Args::BytesSlot *' implicit this
| |     |-ImplicitCastExpr 0x56490e036f58 <col:26> 'const void *' <BitCast>
| |     | `-ImplicitCastExpr 0x56490e036f40 <col:26> 'char *' <LValueToRValue>
| |     |   `-MemberExpr 0x56490e036e48 <col:26> 'char *' lvalue ->_slot 0x56490e0133b0
| |     |     `-CXXThisExpr 0x56490e036e38 <col:26> 'Args::BytesSlot *' implicit this
| |     `-ImplicitCastExpr 0x56490e036f70 <col:33> 'size_t':'unsigned long' <LValueToRValue>
| |       `-MemberExpr 0x56490e036e88 <col:33> 'size_t':'unsigned long' lvalue ->_size 0x56490e013410
| |         `-CXXThisExpr 0x56490e036e78 <col:33> 'Args::BytesSlot *' implicit this
| |-FieldDecl 0x56490e013348 <line:845:9, col:15> col:15 referenced _ptr 'void *'
| |-FieldDecl 0x56490e0133b0 <line:846:9, col:15> col:15 referenced _slot 'char *'
| |-FieldDecl 0x56490e013410 <line:847:9, col:16> col:16 referenced _size 'size_t':'unsigned long'
| |-CXXConstructorDecl 0x56490e013608 <line:835:12> col:12 implicit constexpr BytesSlot 'void (const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56490e013608
| | `-ParmVarDecl 0x56490e013718 <col:12> col:12 'const Args::BytesSlot &'
| `-CXXMethodDecl 0x56490e0137b8 <col:12> col:12 implicit operator= 'Args::BytesSlot &(const Args::BytesSlot &)' inline default noexcept-unevaluated 0x56490e0137b8
|   `-ParmVarDecl 0x56490e0138c8 <col:12> col:12 'const Args::BytesSlot &'
|-ClassTemplateDecl 0x56490e013a68 <line:850:5, line:860:5> line:851:12 SlotT
| |-TemplateTypeParmDecl 0x56490e013938 <line:850:14, col:23> col:23 referenced typename depth 0 index 0 T
| `-CXXRecordDecl 0x56490e0139d8 <line:851:5, line:860:5> line:851:12 struct SlotT definition
|   |-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor
|   | |-CopyConstructor simple non_trivial has_const_param needs_implicit needs_overload_resolution implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial needs_implicit needs_overload_resolution
|   | |-CopyAssignment non_trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial needs_implicit needs_overload_resolution
|   | `-Destructor simple non_trivial needs_implicit needs_overload_resolution
|   |-public 'Args::Slot'
|   |-CXXRecordDecl 0x56490e013d00 <col:5, col:12> col:12 implicit referenced struct SlotT
|   |-CXXConstructorDecl 0x56490e013ef8 <line:852:9, line:854:9> line:852:9 SlotT<T> 'void (T *)'
|   | |-ParmVarDecl 0x56490e013dc8 <col:15, col:18> col:18 referenced ptr 'T *'
|   | |-CXXCtorInitializer Field 0x56490e014078 '_ptr' 'T *'
|   | | `-ParenListExpr 0x56490e036fc0 <line:853:19, col:23> 'NULL TYPE'
|   | |   `-DeclRefExpr 0x56490e036fa0 <col:20> 'T *' lvalue ParmVar 0x56490e013dc8 'ptr' 'T *'
|   | `-CompoundStmt 0x56490e037010 <col:25, line:854:9>
|   |-CXXMethodDecl 0x56490e013fc8 <line:855:9, line:857:9> line:855:14 store 'void ()'
|   | |-Overrides: [ 0x56490e012a60 Slot::store 'void ()' ]
|   | `-CompoundStmt 0x56490e0371c0 <col:22, line:857:9>
|   |   `-CallExpr 0x56490e037190 <line:856:13, col:40> '<dependent type>'
|   |     |-UnresolvedLookupExpr 0x56490e037020 <col:13> '<overloaded function type>' lvalue (ADL) = 'assign_consume' 0x56490ddff298 0x56490dcadb08
|   |     |-CXXOperatorCallExpr 0x56490e037120 <col:28, col:29> '<dependent type>'
|   |     | |-UnresolvedLookupExpr 0x56490e0370b0 <col:28> '<overloaded function type>' lvalue (ADL) = 'operator*' 0x56490dfe8ba8 0x56490dfe8798 0x56490dfe83c8 0x56490dfe7fe8 0x56490dfe7c08 0x56490dfe7838
|   |     | `-MemberExpr 0x56490e037080 <col:29> 'T *' lvalue ->_ptr 0x56490e014078
|   |     |   `-CXXThisExpr 0x56490e037070 <col:29> 'SlotT<T> *' implicit this
|   |     `-MemberExpr 0x56490e037160 <col:35> 'T' lvalue ->_slot 0x56490e0140d8
|   |       `-CXXThisExpr 0x56490e037150 <col:35> 'SlotT<T> *' implicit this
|   |-FieldDecl 0x56490e014078 <line:858:9, col:12> col:12 referenced _ptr 'T *'
|   `-FieldDecl 0x56490e0140d8 <line:859:9, col:11> col:11 referenced _slot 'T'
|-EnumDecl 0x56490e014140 <line:862:5, line:868:5> line:862:5
| `-EnumConstantDecl 0x56490e014240 <line:866:9, col:31> col:9 referenced simple_slotbuf_size 'Args::(anonymous enum at ../dummy_inc/click/args.hh:862:5)'
|   `-ImplicitCastExpr 0x56490e014290 <col:31> 'unsigned int' <IntegralCast>
|     `-ConstantExpr 0x56490e014220 <col:31> 'int' Int: 48
|       `-IntegerLiteral 0x56490e014200 <col:31> 'int' 48
|-FieldDecl 0x56490e0142b8 <line:871:5, col:10> col:10 _my_conf 'bool'
|-FieldDecl 0x56490e014318 <line:876:5, col:10> col:10 referenced _status 'bool'
|-FieldDecl 0x56490e014378 <line:877:5, col:13> col:13 _simple_slotpos 'uint8_t':'unsigned char'
|-FieldDecl 0x56490e0144b0 <line:879:5, col:21> col:21 referenced _conf 'Vector<String> *'
|-FieldDecl 0x56490e026b60 <line:880:5, col:17> col:17 referenced _kwpos 'Vector<int>':'Vector<int>'
|-FieldDecl 0x56490e026bc0 <line:882:5, col:11> col:11 referenced _slots 'Args::Slot *'
|-FieldDecl 0x56490e026ce8 <line:883:5, col:48> col:13 referenced _simple_slotbuf 'uint8_t [48]'
|-CXXMethodDecl 0x56490e026f18 <line:885:5, col:54> col:17 initialize 'void (const Vector<String> *)' inline
| `-ParmVarDecl 0x56490e026e20 <col:28, col:50> col:50 conf 'const Vector<String> *'
|-CXXMethodDecl 0x56490e027068 <line:886:5, col:26> col:10 used reset_from 'void (int)'
| `-ParmVarDecl 0x56490e026fd8 <col:21, col:25> col:25 i 'int'
|-CXXMethodDecl 0x56490e027338 <line:888:5, col:67> col:12 referenced find 'String (const char *, int, Args::Slot *&)'
| |-ParmVarDecl 0x56490e027128 <col:17, col:29> col:29 keyword 'const char *'
| |-ParmVarDecl 0x56490e0271a8 <col:38, col:42> col:42 flags 'int'
| `-ParmVarDecl 0x56490e027250 <col:49, col:56> col:56 slot_status 'Args::Slot *&'
|-CXXMethodDecl 0x56490e027548 <line:889:5, col:46> col:10 referenced postparse 'void (bool, Args::Slot *)'
| |-ParmVarDecl 0x56490e027400 <col:20, col:25> col:25 ok 'bool'
| `-ParmVarDecl 0x56490e027478 <col:29, col:35> col:35 slot_status 'Args::Slot *'
|-CXXMethodDecl 0x56490e027618 <line:890:5, col:25> col:10 check_complete 'void ()'
|-CXXMethodDecl 0x56490e027768 <line:892:5, col:48> col:23 simple_slot_size 'int (int)' static inline
| `-ParmVarDecl 0x56490e0276d0 <col:40, col:44> col:44 size 'int'
|-CXXMethodDecl 0x56490e027af8 <line:893:5, line:894:62> line:893:17 simple_slot_info 'void (int, int, void *&, void **&)' inline
| |-ParmVarDecl 0x56490e027828 <col:34, col:38> col:38 offset 'int'
| |-ParmVarDecl 0x56490e0278a8 <col:46, col:50> col:50 size 'int'
| |-ParmVarDecl 0x56490e027950 <line:894:34, col:41> col:41 slot 'void *&'
| `-ParmVarDecl 0x56490e027a08 <col:47, col:55> col:55 pointer 'void **&'
|-CXXMethodDecl 0x56490e027d20 <line:895:5, col:46> col:11 referenced simple_slot 'void *(void *, size_t)'
| |-ParmVarDecl 0x56490e027bd0 <col:23, col:29> col:29 data 'void *'
| `-ParmVarDecl 0x56490e027c48 <col:35, col:42> col:42 size 'size_t':'unsigned long'
`-FunctionTemplateDecl 0x56490e028038 <line:896:5, col:53> col:29 complex_slot
  |-TemplateTypeParmDecl 0x56490e027dd0 <col:14, col:23> col:23 referenced typename depth 0 index 0 T
  `-CXXMethodDecl 0x56490e027f98 <col:26, col:53> col:29 complex_slot 'T *(T &)'
    `-ParmVarDecl 0x56490e027ea8 <col:42, col:45> col:45 variable 'T &'

Layout: <CGRecordLayout
  LLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  NonVirtualBaseLLVMType:%class.Args = type { %class.ArgContext.base, i8, i8, i8, %class.Vector.7*, %class.Vector.9, %"struct.Args::Slot"*, [48 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class NumArg (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | class BandwidthArg
         0 |   class NumArg (base) (empty)
         0 |   int status
           | [sizeof=4, dsize=4, align=4,
           |  nvsize=4, nvalign=4]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0410d0 <../dummy_inc/click/args.hh:1013:1, line:1027:1> line:1013:7 referenced class NumArg definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490e0411e8 <col:1, col:7> col:7 implicit class NumArg
|-AccessSpecDecl 0x56490e041278 <col:16, col:22> col:16 public
|-EnumDecl 0x56490e0412a0 <line:1014:5, line:1026:5> line:1014:5
| |-EnumConstantDecl 0x56490e0413a0 <line:1015:9, col:21> col:9 status_ok 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56490e0415f0 <col:21> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e041380 <col:21> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e041360 <col:21> 'int' 0
| |-EnumConstantDecl 0x56490e041430 <line:1016:9, col:24> col:9 referenced status_inval 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56490e041608 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e041410 <col:24> 'int' Int: 22
| |     `-IntegerLiteral 0x56490e0413f0 <col:24> 'int' 22
| |-EnumConstantDecl 0x56490e0414c0 <line:1017:9, col:24> col:9 referenced status_range 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56490e041620 <col:24> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e0414a0 <col:24> 'int' Int: 34
| |     `-IntegerLiteral 0x56490e041480 <col:24> 'int' 34
| |-EnumConstantDecl 0x56490e041550 <line:1019:9, col:25> col:9 status_notsup 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
| | `-ImplicitCastExpr 0x56490e041638 <col:25> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e041530 <col:25> 'int' Int: 95
| |     `-IntegerLiteral 0x56490e041510 <col:25> 'int' 95
| `-EnumConstantDecl 0x56490e0415a0 <line:1025:9> col:9 status_unitless 'NumArg::(anonymous enum at ../dummy_inc/click/args.hh:1014:5)'
|-CXXConstructorDecl 0x56490e042fb0 <line:1013:7> col:7 implicit used constexpr NumArg 'void () noexcept' inline default trivial
| `-CompoundStmt 0x56490e0433e8 <col:7>
|-CXXConstructorDecl 0x56490e0430b8 <col:7> col:7 implicit constexpr NumArg 'void (const NumArg &)' inline default trivial noexcept-unevaluated 0x56490e0430b8
| `-ParmVarDecl 0x56490e0431c8 <col:7> col:7 'const NumArg &'
|-CXXConstructorDecl 0x56490e043268 <col:7> col:7 implicit used constexpr NumArg 'void (NumArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56490e043378 <col:7> col:7 'NumArg &&'
| `-CompoundStmt 0x56490e1a6130 <col:7>
`-CXXDestructorDecl 0x56490e0454d8 <col:7> col:7 implicit ~NumArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.NumArg = type { i8 }
  NonVirtualBaseLLVMType:%class.NumArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e0502d0 <../dummy_inc/click/args.hh:1284:1, line:1288:1> line:1284:7 referenced class BandwidthArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable trivial literal
| |-DefaultConstructor exists trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'NumArg'
|-CXXRecordDecl 0x56490e050428 <col:1, col:7> col:7 implicit class BandwidthArg
|-AccessSpecDecl 0x56490e0504b8 <col:38, col:44> col:38 public
|-CXXMethodDecl 0x56490e0506b0 <line:1285:5, col:84> col:10 parse 'bool (const String &, uint32_t &, const ArgContext &)'
| |-ParmVarDecl 0x56490e0504f0 <col:16, col:30> col:30 str 'const String &'
| |-ParmVarDecl 0x56490e050568 <col:35, col:45> col:45 result 'uint32_t &'
| `-ParmVarDecl 0x56490e0505e0 <col:53, col:74> col:72 'const ArgContext &' cinit
|   `-DeclRefExpr 0x56490e050930 <col:74> 'const ArgContext' lvalue Var 0x56490e0371e8 'blank_args' 'const ArgContext'
|-CXXMethodDecl 0x56490e050808 <line:1286:5, col:37> col:19 unparse 'String (uint32_t)' static
| `-ParmVarDecl 0x56490e050778 <col:27, col:36> col:36 x 'uint32_t':'unsigned int'
|-FieldDecl 0x56490e0508c8 <line:1287:5, col:9> col:9 referenced status 'int'
|-CXXConstructorDecl 0x56490e1a5578 <line:1284:7> col:7 implicit referenced BandwidthArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56490e1a5678 <col:7> col:7 implicit constexpr BandwidthArg 'void (const BandwidthArg &)' inline default trivial noexcept-unevaluated 0x56490e1a5678
| `-ParmVarDecl 0x56490e1a5788 <col:7> col:7 'const BandwidthArg &'
|-CXXConstructorDecl 0x56490e1a5828 <col:7> col:7 implicit used constexpr BandwidthArg 'void (BandwidthArg &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56490e1a5938 <col:7> col:7 used 'BandwidthArg &&'
| |-CXXCtorInitializer 'NumArg'
| | `-CXXConstructExpr 0x56490e1a6140 <col:7> 'NumArg' 'void (NumArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56490e1a6110 <col:7> 'NumArg' xvalue <UncheckedDerivedToBase (NumArg)>
| |     `-CXXStaticCastExpr 0x56490e1a60e0 <col:7> 'BandwidthArg' xvalue static_cast<class BandwidthArg &&> <NoOp>
| |       `-DeclRefExpr 0x56490e1a60b0 <col:7> 'BandwidthArg' lvalue ParmVar 0x56490e1a5938 '' 'BandwidthArg &&'
| |-CXXCtorInitializer Field 0x56490e0508c8 'status' 'int'
| | `-ImplicitCastExpr 0x56490e1a6238 <col:7> 'int' <LValueToRValue>
| |   `-MemberExpr 0x56490e1a6208 <col:7> 'int' xvalue .status 0x56490e0508c8
| |     `-CXXStaticCastExpr 0x56490e1a61d8 <col:7> 'BandwidthArg' xvalue static_cast<class BandwidthArg &&> <NoOp>
| |       `-DeclRefExpr 0x56490e1a61a8 <col:7> 'BandwidthArg' lvalue ParmVar 0x56490e1a5938 '' 'BandwidthArg &&'
| `-CompoundStmt 0x56490e1a6288 <col:7>
`-CXXDestructorDecl 0x56490e1a59d8 <col:7> col:7 implicit referenced ~BandwidthArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%class.BandwidthArg = type { i32 }
  NonVirtualBaseLLVMType:%class.BandwidthArg = type { i32 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct char_array<16>
         0 |   char [16] x
           | [sizeof=16, dsize=16, align=1,
           |  nvsize=16, nvalign=1]

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490e0f58f0 <../dummy_inc/click/type_traits.hh:165:1, line:167:1> line:165:28 struct char_array definition
|-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| |-DefaultConstructor exists trivial needs_implicit
| |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveConstructor exists simple trivial needs_implicit
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial needs_implicit
|-TemplateArgument integral 16
|-PackedAttr 0x56490e1f8a68 <line:167:18>
|-CXXRecordDecl 0x56490e1f8b28 prev 0x56490e0f58f0 <line:165:21, col:28> col:28 implicit struct char_array
`-FieldDecl 0x56490e1f8c38 <line:166:5, col:13> col:10 x 'char [16]'

Layout: <CGRecordLayout
  LLVMType:%struct.char_array = type { [16 x i8] }
  NonVirtualBaseLLVMType:%struct.char_array = type { [16 x i8] }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct Args::SlotT<class Timestamp>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   class Timestamp * _ptr
        24 |   class Timestamp _slot
        24 |     union Timestamp::rep_t _t
        24 |       int64_t x
           | [sizeof=32, dsize=32, align=8,
           |  nvsize=32, nvalign=8]

*** Dumping AST Record Layout
         0 | struct Args::SlotT<unsigned int>
         0 |   struct Args::Slot (primary base)
         0 |     (Slot vtable pointer)
         8 |     struct Args::Slot * _next
        16 |   unsigned int * _ptr
        24 |   unsigned int _slot
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping AST Record Layout
         0 | class Notifier
         0 |   (Notifier vtable pointer)
         8 |   class NotifierSignal _signal
         8 |     union NotifierSignal::vmvalue _v
         8 |       class atomic_uint32_t * v1
         8 |       struct NotifierSignal::vmpair * vm
        16 |     uint32_t _mask
        24 |   enum Notifier::SearchOp _search_op
           | [sizeof=32, dsize=28, align=8,
           |  nvsize=28, nvalign=8]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490e163208 <../dummy_inc/click/notifier.hh:73:1, line:130:1> line:73:7 referenced class Notifier definition
|-DefinitionData polymorphic has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple non_trivial has_const_param needs_overload_resolution implicit_has_const_param
| |-MoveConstructor needs_overload_resolution
| |-CopyAssignment non_trivial has_const_param implicit_has_const_param
| |-MoveAssignment needs_overload_resolution
| `-Destructor non_trivial user_declared needs_overload_resolution
|-CXXRecordDecl 0x56490e163328 <col:1, col:7> col:7 implicit referenced class Notifier
|-AccessSpecDecl 0x56490e1633b8 <col:18, col:24> col:18 public
|-EnumDecl 0x56490e1633e0 <line:75:5, col:76> col:10 referenced SearchOp
| |-EnumConstantDecl 0x56490e1634e0 <col:21, col:35> col:21 referenced SEARCH_STOP 'Notifier::SearchOp'
| | `-ImplicitCastExpr 0x56490e1635d0 <col:35> 'unsigned int' <IntegralCast>
| |   `-ConstantExpr 0x56490e1634c0 <col:35> 'int' Int: 0
| |     `-IntegerLiteral 0x56490e1634a0 <col:35> 'int' 0
| |-EnumConstantDecl 0x56490e163530 <col:38> col:38 SEARCH_CONTINUE 'Notifier::SearchOp'
| `-EnumConstantDecl 0x56490e163580 <col:55> col:55 SEARCH_CONTINUE_WAKE 'Notifier::SearchOp'
|-TypedefDecl 0x56490e163818 <line:76:5, col:53> col:20 referenced callback_type 'void (*)(void *, Notifier *)'
| `-PointerType 0x56490e1637b0 'void (*)(void *, Notifier *)'
|   `-ParenType 0x56490e163750 'void (void *, Notifier *)' sugar
|     `-FunctionProtoType 0x56490e163710 'void (void *, Notifier *)' cdecl
|       |-BuiltinType 0x56490da8f2d0 'void'
|       |-PointerType 0x56490da8fad0 'void *'
|       | `-BuiltinType 0x56490da8f2d0 'void'
|       `-PointerType 0x56490e163670 'Notifier *'
|         `-RecordType 0x56490e1632a0 'Notifier'
|           `-CXXRecord 0x56490e163208 'Notifier'
|-CXXConstructorDecl 0x56490e163958 <line:78:5, col:46> col:12 Notifier 'void (Notifier::SearchOp)' inline
| `-ParmVarDecl 0x56490e163880 <col:21, col:35> col:30 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x56490e169fa8 <col:35> 'Notifier::SearchOp' EnumConstant 0x56490e1634e0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXConstructorDecl 0x56490e163b68 <line:79:5, col:76> col:12 Notifier 'void (const NotifierSignal &, Notifier::SearchOp)' inline
| |-ParmVarDecl 0x56490e163a18 <col:21, col:43> col:43 signal 'const NotifierSignal &'
| `-ParmVarDecl 0x56490e163a90 <col:51, col:65> col:60 op 'Notifier::SearchOp' cinit
|   `-DeclRefExpr 0x56490e169fc8 <col:65> 'Notifier::SearchOp' EnumConstant 0x56490e1634e0 'SEARCH_STOP' 'Notifier::SearchOp'
|-CXXDestructorDecl 0x56490e163c68 <line:80:5, col:23> col:13 ~Notifier 'void () noexcept' virtual
|-CXXMethodDecl 0x56490e163d98 <line:83:5, line:85:5> line:83:17 initialized 'bool () const' inline
| `-CompoundStmt 0x56490e16a088 <col:37, line:85:5>
|   `-ReturnStmt 0x56490e16a078 <line:84:2, col:29>
|     `-CXXMemberCallExpr 0x56490e16a058 <col:9, col:29> 'bool'
|       `-MemberExpr 0x56490e16a028 <col:9, col:17> '<bound member function type>' .initialized 0x56490e1614a0
|         `-MemberExpr 0x56490e169ff8 <col:9> 'const NotifierSignal' lvalue ->_signal 0x56490e1699c8
|           `-CXXThisExpr 0x56490e169fe8 <col:9> 'const Notifier *' implicit this
|-CXXMethodDecl 0x56490e163fa0 <line:87:5, col:52> col:9 initialize 'int (const char *, Router *)'
| |-ParmVarDecl 0x56490e163e50 <col:20, col:32> col:32 name 'const char *'
| `-ParmVarDecl 0x56490e163ec8 <col:38, col:46> col:46 router 'Router *'
|-CXXMethodDecl 0x56490e164098 <line:89:5, col:43> col:34 signal 'const NotifierSignal &() const' inline
|-CXXMethodDecl 0x56490e164188 <line:90:5, col:33> col:21 search_op 'Notifier::SearchOp () const' inline
|-CXXMethodDecl 0x56490e166900 <line:92:5, col:26> col:17 active 'bool () const' inline
|-CXXMethodDecl 0x56490e166a40 <line:94:5, col:39> col:17 used set_active 'bool (bool)' inline
| `-ParmVarDecl 0x56490e1669b0 <col:28, col:33> col:33 active 'bool'
|-CXXMethodDecl 0x56490e166b08 <line:95:5, col:22> col:17 wake 'void ()' inline
|-CXXMethodDecl 0x56490e166bc8 <line:96:5, col:23> col:17 sleep 'void ()' inline
|-CXXMethodDecl 0x56490e166e40 <line:98:5, col:71> col:17 used add_activate_callback 'int (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x56490e166ca0 <col:39, col:53> col:53 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56490e166d20 <col:56, col:62> col:62 user_data 'void *'
|-CXXMethodDecl 0x56490e167098 <line:99:5, col:75> col:18 used remove_activate_callback 'void (Notifier::callback_type, void *)' virtual
| |-ParmVarDecl 0x56490e166f00 <col:43, col:57> col:57 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56490e166f80 <col:60, col:66> col:66 user_data 'void *'
|-CXXMethodDecl 0x56490e167220 <line:100:5, col:39> col:16 add_listener 'int (Task *)' inline
| `-ParmVarDecl 0x56490e167158 <col:29, col:35> col:35 task 'Task *'
|-CXXMethodDecl 0x56490e167368 <line:101:5, col:43> col:17 remove_listener 'void (Task *)' inline
| `-ParmVarDecl 0x56490e1672d8 <col:33, col:39> col:39 task 'Task *'
|-CXXMethodDecl 0x56490e1674f0 <line:102:5, col:59> col:16 add_dependent_signal 'int (NotifierSignal *)' inline
| `-ParmVarDecl 0x56490e167420 <col:37, col:53> col:53 signal 'NotifierSignal *'
|-CXXMethodDecl 0x56490e167668 <line:103:5, col:63> col:17 remove_dependent_signal 'void (NotifierSignal *)' inline
| `-ParmVarDecl 0x56490e1675a8 <col:41, col:57> col:57 signal 'NotifierSignal *'
|-VarDecl 0x56490e167730 <line:105:5, col:38> col:23 EMPTY_NOTIFIER 'const char []' static
|-VarDecl 0x56490e1677b8 <line:106:5, col:37> col:23 FULL_NOTIFIER 'const char []' static
|-CXXMethodDecl 0x56490e167988 <line:108:5, col:76> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x56490e167830 <col:56, col:65> col:65 e 'Element *'
| `-ParmVarDecl 0x56490e1678b0 <col:68, col:72> col:72 port 'int'
|-CXXMethodDecl 0x56490e167c28 <line:109:5, col:88> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x56490e167a48 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56490e167ac8 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x56490e167b40 <col:78, col:84> col:84 task 'Task *'
|-CXXMethodDecl 0x56490e167ec8 <line:110:5, col:106> col:34 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x56490e167cf0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56490e167d70 <col:68, col:72> col:72 port 'int'
| `-ParmVarDecl 0x56490e167de8 <col:78, col:88> col:88 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x56490e168248 <line:111:5, col:103> col:27 used upstream_empty_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x56490e167f90 <col:49, col:58> col:58 e 'Element *'
| |-ParmVarDecl 0x56490e168010 <col:61, col:65> col:65 port 'int'
| |-ParmVarDecl 0x56490e168088 <col:71, col:85> col:85 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56490e168108 <col:88, col:94> col:94 user_data 'void *'
|-CXXMethodDecl 0x56490e168430 <line:113:5, col:77> col:34 used downstream_full_signal 'NotifierSignal (Element *, int)' static inline
| |-ParmVarDecl 0x56490e168318 <col:57, col:66> col:66 e 'Element *'
| `-ParmVarDecl 0x56490e168398 <col:69, col:73> col:73 port 'int'
|-CXXMethodDecl 0x56490e168688 <line:114:5, col:89> col:34 downstream_full_signal 'NotifierSignal (Element *, int, Task *)' static inline
| |-ParmVarDecl 0x56490e1684f0 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56490e168570 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x56490e1685e8 <col:79, col:85> col:85 task 'Task *'
|-CXXMethodDecl 0x56490e1688e8 <line:115:5, col:107> col:34 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier *)' static inline
| |-ParmVarDecl 0x56490e168750 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56490e1687d0 <col:69, col:73> col:73 port 'int'
| `-ParmVarDecl 0x56490e168848 <col:79, col:89> col:89 dependent_notifier 'Notifier *'
|-CXXMethodDecl 0x56490e168bd0 <line:116:5, col:104> col:27 used downstream_full_signal 'NotifierSignal (Element *, int, Notifier::callback_type, void *)' static
| |-ParmVarDecl 0x56490e1689b0 <col:50, col:59> col:59 e 'Element *'
| |-ParmVarDecl 0x56490e168a30 <col:62, col:66> col:66 port 'int'
| |-ParmVarDecl 0x56490e168aa8 <col:72, col:86> col:86 f 'Notifier::callback_type':'void (*)(void *, Notifier *)'
| `-ParmVarDecl 0x56490e168b28 <col:89, col:95> col:95 user_data 'void *'
|-CXXMethodDecl 0x56490e168e88 <line:118:5, col:109> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x56490e168ca0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56490e168d20 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x56490e168da0 <col:78> col:81 'int'
| `-DeprecatedAttr 0x56490e168f40 <col:98> "" ""
|-CXXMethodDecl 0x56490e169228 <line:119:5, col:121> col:34 upstream_empty_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x56490e168fc0 <col:56, col:65> col:65 e 'Element *'
| |-ParmVarDecl 0x56490e169040 <col:68, col:72> col:72 port 'int'
| |-ParmVarDecl 0x56490e1690c0 <col:78> col:81 'int'
| |-ParmVarDecl 0x56490e169138 <col:83, col:92> col:93 'Notifier *'
| `-DeprecatedAttr 0x56490e1692e8 <col:110> "" ""
|-CXXMethodDecl 0x56490e169508 <line:120:5, col:110> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int)' static inline
| |-ParmVarDecl 0x56490e169368 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56490e1693e8 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x56490e169468 <col:79> col:82 'int'
| `-DeprecatedAttr 0x56490e1695c0 <col:99> "" ""
|-CXXMethodDecl 0x56490e169860 <line:121:5, col:122> col:34 downstream_full_signal 'NotifierSignal (Element *, int, int, Notifier *)' static inline
| |-ParmVarDecl 0x56490e169640 <col:57, col:66> col:66 e 'Element *'
| |-ParmVarDecl 0x56490e1696c0 <col:69, col:73> col:73 port 'int'
| |-ParmVarDecl 0x56490e169740 <col:79> col:82 'int'
| |-ParmVarDecl 0x56490e1697b8 <col:84, col:93> col:94 'Notifier *'
| `-DeprecatedAttr 0x56490e169920 <col:111> "" ""
|-AccessSpecDecl 0x56490e169990 <line:123:3, col:10> col:3 private
|-FieldDecl 0x56490e1699c8 <line:125:5, col:20> col:20 referenced _signal 'NotifierSignal'
|-FieldDecl 0x56490e169a28 <line:126:5, col:14> col:14 referenced _search_op 'Notifier::SearchOp'
|-CXXMethodDecl 0x56490e169ba0 <line:128:5, col:61> col:17 used dependent_signal_callback 'void (void *, Notifier *)' static
| |-ParmVarDecl 0x56490e169a90 <col:43, col:48> col:49 'void *'
| `-ParmVarDecl 0x56490e169b08 <col:51, col:60> col:61 'Notifier *'
|-CXXConstructorDecl 0x56490e169c78 <line:73:7> col:7 implicit Notifier 'void (const Notifier &)' inline default noexcept-unevaluated 0x56490e169c78
| `-ParmVarDecl 0x56490e169d88 <col:7> col:7 'const Notifier &'
`-CXXMethodDecl 0x56490e169e28 <col:7> col:7 implicit operator= 'Notifier &(const Notifier &)' inline default noexcept-unevaluated 0x56490e169e28
  `-ParmVarDecl 0x56490e169f38 <col:7> col:7 'const Notifier &'

Layout: <CGRecordLayout
  LLVMType:%class.Notifier = type <{ i32 (...)**, %class.NotifierSignal, i32, [4 x i8] }>
  NonVirtualBaseLLVMType:%class.Notifier.base = type <{ i32 (...)**, %class.NotifierSignal, i32 }>
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | struct uninitialized_type (empty)
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dbe7e08 <../dummy_inc/click/config.h:317:1, line:318:1> line:317:8 referenced struct uninitialized_type definition
|-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dbe7f28 <col:1, col:8> col:8 implicit struct uninitialized_type
|-CXXConstructorDecl 0x56490dfc9360 <col:8> col:8 implicit referenced constexpr uninitialized_type 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56490dfc9440 <col:8> col:8 implicit constexpr uninitialized_type 'void (const uninitialized_type &)' inline default trivial noexcept-unevaluated 0x56490dfc9440
| `-ParmVarDecl 0x56490dfc9528 <col:8> col:8 'const uninitialized_type &'
|-CXXConstructorDecl 0x56490dfc95c8 <col:8> col:8 implicit constexpr uninitialized_type 'void (uninitialized_type &&)' inline default trivial noexcept-unevaluated 0x56490dfc95c8
| `-ParmVarDecl 0x56490dfc96d8 <col:8> col:8 'uninitialized_type &&'
`-CXXDestructorDecl 0x56490dfd4bd0 <col:8> col:8 implicit referenced ~uninitialized_type 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.uninitialized_type = type { i8 }
  NonVirtualBaseLLVMType:%struct.uninitialized_type = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping AST Record Layout
         0 | class TimestampArg
         0 |   _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping AST Record Layout
         0 | struct DefaultArg<class Timestamp>
         0 |   class TimestampArg (base)
         0 |     _Bool is_signed
           | [sizeof=1, dsize=1, align=1,
           |  nvsize=1, nvalign=1]

*** Dumping IRgen Record Layout
Record: CXXRecordDecl 0x56490dfeb8d0 <../dummy_inc/click/timestamp.hh:1525:1, line:1534:1> line:1525:7 referenced class TimestampArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable has_user_declared_ctor can_const_default_init
| |-DefaultConstructor exists non_trivial user_provided
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-CXXRecordDecl 0x56490dfeb9e8 <col:1, col:7> col:7 implicit referenced class TimestampArg
|-AccessSpecDecl 0x56490dfeba78 <col:22, col:28> col:22 public
|-CXXConstructorDecl 0x56490dfebb88 <line:1526:5, line:1528:5> line:1526:5 used TimestampArg 'void (bool)'
| |-ParmVarDecl 0x56490dfebab0 <col:18, col:35> col:23 used is_signed 'bool' cinit
| | `-CXXBoolLiteralExpr 0x56490dfebf78 <col:35> 'bool' false
| |-CXXCtorInitializer Field 0x56490dfebf10 'is_signed' 'bool'
| | `-ImplicitCastExpr 0x56490dfebfe8 <line:1527:21> 'bool' <LValueToRValue>
| |   `-DeclRefExpr 0x56490dfebfa8 <col:21> 'bool' lvalue ParmVar 0x56490dfebab0 'is_signed' 'bool'
| `-CompoundStmt 0x56490dfec030 <col:32, line:1528:5>
|-CXXMethodDecl 0x56490dfebe48 <line:1529:5, line:1532:5> line:1529:10 used parse 'bool (const String &, Timestamp &, const ArgContext &)'
| |-ParmVarDecl 0x56490dfebc48 <col:16, col:30> col:30 used str 'const String &'
| |-ParmVarDecl 0x56490dfebcc0 <col:35, col:46> col:46 used value 'Timestamp &'
| |-ParmVarDecl 0x56490dfebd68 <col:53, col:78> col:71 used args 'const ArgContext &' cinit
| | `-DeclRefExpr 0x56490dfebf88 <col:78> 'const ArgContext' lvalue Var 0x56490dfeb610 'blank_args' 'const ArgContext'
| `-CompoundStmt 0x56490dfec240 <col:90, line:1532:5>
|   |-CStyleCastExpr 0x56490dfec070 <line:1530:9, col:16> 'void' <ToVoid>
|   | `-DeclRefExpr 0x56490dfec040 <col:16> 'const ArgContext' lvalue ParmVar 0x56490dfebd68 'args' 'const ArgContext &'
|   `-ReturnStmt 0x56490dfec230 <line:1531:9, col:46>
|     `-CallExpr 0x56490dfec1e0 <col:16, col:46> 'bool'
|       |-ImplicitCastExpr 0x56490dfec1c8 <col:16> 'bool (*)(const String &, Timestamp *, bool)' <FunctionToPointerDecay>
|       | `-DeclRefExpr 0x56490dfec180 <col:16> 'bool (const String &, Timestamp *, bool)' lvalue Function 0x56490dfeb818 'cp_time' 'bool (const String &, Timestamp *, bool)'
|       |-DeclRefExpr 0x56490dfec0e8 <col:24> 'const String' lvalue ParmVar 0x56490dfebc48 'str' 'const String &'
|       |-UnaryOperator 0x56490dfec128 <col:29, col:30> 'Timestamp *' prefix '&' cannot overflow
|       | `-DeclRefExpr 0x56490dfec108 <col:30> 'Timestamp' lvalue ParmVar 0x56490dfebcc0 'value' 'Timestamp &'
|       `-ImplicitCastExpr 0x56490dfec218 <col:37> 'bool' <LValueToRValue>
|         `-MemberExpr 0x56490dfec150 <col:37> 'bool' lvalue ->is_signed 0x56490dfebf10
|           `-CXXThisExpr 0x56490dfec140 <col:37> 'TimestampArg *' implicit this
|-FieldDecl 0x56490dfebf10 <line:1533:5, col:10> col:10 referenced is_signed 'bool'
|-CXXDestructorDecl 0x56490e1fe740 <line:1525:7> col:7 implicit ~TimestampArg 'void () noexcept' inline default trivial
|-CXXConstructorDecl 0x56490e1fe878 <col:7> col:7 implicit constexpr TimestampArg 'void (const TimestampArg &)' inline default trivial noexcept-unevaluated 0x56490e1fe878
| `-ParmVarDecl 0x56490e1fe988 <col:7> col:7 'const TimestampArg &'
`-CXXConstructorDecl 0x56490e1fea28 <col:7> col:7 implicit used constexpr TimestampArg 'void (TimestampArg &&) noexcept' inline default trivial
  |-ParmVarDecl 0x56490e1feb38 <col:7> col:7 used 'TimestampArg &&'
  |-CXXCtorInitializer Field 0x56490dfebf10 'is_signed' 'bool'
  | `-ImplicitCastExpr 0x56490e1ff900 <col:7> 'bool' <LValueToRValue>
  |   `-MemberExpr 0x56490e1ff8d0 <col:7> 'bool' xvalue .is_signed 0x56490dfebf10
  |     `-CXXStaticCastExpr 0x56490e1ff8a0 <col:7> 'TimestampArg' xvalue static_cast<class TimestampArg &&> <NoOp>
  |       `-DeclRefExpr 0x56490e1ff870 <col:7> 'TimestampArg' lvalue ParmVar 0x56490e1feb38 '' 'TimestampArg &&'
  `-CompoundStmt 0x56490e1ff948 <col:7>

Layout: <CGRecordLayout
  LLVMType:%class.TimestampArg = type { i8 }
  NonVirtualBaseLLVMType:%class.TimestampArg = type { i8 }
  IsZeroInitializable:1
  BitFields:[
]>

*** Dumping IRgen Record Layout
Record: ClassTemplateSpecializationDecl 0x56490dfec288 <../dummy_inc/click/timestamp.hh:1536:1, col:64> col:19 struct DefaultArg definition
|-DefinitionData pass_in_registers standard_layout trivially_copyable can_const_default_init
| |-DefaultConstructor exists non_trivial
| |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |-MoveConstructor exists simple trivial
| |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |-MoveAssignment exists simple trivial needs_implicit
| `-Destructor simple irrelevant trivial
|-public 'TimestampArg'
|-TemplateArgument type 'Timestamp'
|-CXXRecordDecl 0x56490dfec4e8 <col:12, col:19> col:19 implicit struct DefaultArg
|-CXXConstructorDecl 0x56490e1fe668 <col:19> col:19 implicit used DefaultArg 'void () noexcept(false)' inline default
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x56490e1fef40 <col:19> 'TimestampArg' 'void (bool)'
| |   `-CXXDefaultArgExpr 0x56490e1fef20 <<invalid sloc>> 'bool'
| `-CompoundStmt 0x56490e1fefb0 <col:19>
|-CXXConstructorDecl 0x56490e1feba8 <col:19> col:19 implicit constexpr DefaultArg 'void (const DefaultArg<Timestamp> &)' inline default trivial noexcept-unevaluated 0x56490e1feba8
| `-ParmVarDecl 0x56490e1fecb8 <col:19> col:19 'const DefaultArg<Timestamp> &'
|-CXXConstructorDecl 0x56490e1fed58 <col:19> col:19 implicit used constexpr DefaultArg 'void (DefaultArg<Timestamp> &&) noexcept' inline default trivial
| |-ParmVarDecl 0x56490e1fee68 <col:19> col:19 used 'DefaultArg<Timestamp> &&'
| |-CXXCtorInitializer 'TimestampArg'
| | `-CXXConstructExpr 0x56490e1ff958 <col:19> 'TimestampArg' 'void (TimestampArg &&) noexcept'
| |   `-ImplicitCastExpr 0x56490e1ff850 <col:19> 'TimestampArg' xvalue <UncheckedDerivedToBase (TimestampArg)>
| |     `-CXXStaticCastExpr 0x56490e1ff820 <col:19> 'DefaultArg<Timestamp>' xvalue static_cast<struct DefaultArg<class Timestamp> &&> <NoOp>
| |       `-DeclRefExpr 0x56490e1ff7f0 <col:19> 'DefaultArg<Timestamp>' lvalue ParmVar 0x56490e1fee68 '' 'DefaultArg<Timestamp> &&'
| `-CompoundStmt 0x56490e1ff9c8 <col:19>
`-CXXDestructorDecl 0x56490e1feff0 <col:19> col:19 implicit referenced ~DefaultArg 'void () noexcept' inline default trivial

Layout: <CGRecordLayout
  LLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  NonVirtualBaseLLVMType:%struct.DefaultArg = type { %class.TimestampArg }
  IsZeroInitializable:1
  BitFields:[
]>
